
# ----------------------------------------------------------------------------------------------------------------------
#
#  Script: FCG
# Version: 0.0.0.0
#
# ----------------------------------------------------------------------------------------------------------------------
<#
Change Log for FCG
------------------------------------------------------------------------------------------------
0.0.0.0 - Initial Version
------------------------------------------------------------------------------------------------
#>

#requires -version 5.0

using namespace System.Windows.Forms
using namespace System.Drawing
using namespace System.Collections
using namespace System.Collections.Generic
using namespace System.Collections.Specialized

<#
  .SYNOPSIS
  .DESCRIPTION
  .PARAMETER <Parameter-Name>
  .EXAMPLE
  .NOTES
    My Script FCG Version 1.0 by kensw on 07/04/2025
    Created with "My PS5 Form Code Generator" Version 6.1.4.4
#>
#[CmdletBinding()]
#param (
#)

$ErrorActionPreference = "Stop"

# Set $VerbosePreference to 'SilentlyContinue' for Production Deployment
$VerbosePreference = "Continue"

# Set $DebugPreference for Production Deployment
$DebugPreference = "SilentlyContinue"

# Hide Console Window Progress Bar
$ProgressPreference = "SilentlyContinue"

# Clear Previous Error Messages
$Error.Clear()

# Pre-Load Required Modules
[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")

# Enable Visual Styles
[System.Windows.Forms.Application]::EnableVisualStyles()

# Pre-Load Required Modules
if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:$False).Name))
{
  Import-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:$False
  if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:$False).Name))
  {
    throw "ERROR: Unable to Load Module 'CimCmdlets'"
  }
}

# Enable Visual Styles
[System.Windows.Forms.Application]::EnableVisualStyles()

#region >>>>>>>>>>>>>>>> FCG Configuration <<<<<<<<<<<<<<<<

#region ******** FCG Default Colors ********"

Class Colors
{
  [Object]$Back
  [Object]$Fore
  [Object]$LabelFore
  [Object]$ErrorFore
  [Object]$TitleBack
  [Object]$TitleFore
  [Object]$GroupFore
  [Object]$TextBack
  [Object]$TextROBack
  [Object]$TextFore
  [Object]$TextTitle
  [Object]$TextHint
  [Object]$TextBad
  [Object]$TextWarn
  [Object]$TextGood
  [Object]$TextInfo
  [Object]$ButtonBack
  [Object]$ButtonFore
  
  Colors ([Object]$Back, [Object]$Fore, [Object]$LabelFore, [Object]$ErrorFore, [Object]$TitleBack, [Object]$TitleFore, [Object]$GroupFore, [Object]$TextBack, [Object]$TextROBack, [Object]$TextFore, [Object]$TextTitle, [Object]$TextHint, [Object]$TextBad, [Object]$TextWarn, [Object]$TextGood, [Object]$TextInfo, [Object]$ButtonBack, [Object]$ButtonFore)
  {
    $This.Back = $Back
    $This.Fore = $Fore
    $This.LabelFore = $LabelFore
    $This.ErrorFore = $ErrorFore
    $This.TitleBack = $TitleBack
    $This.TitleFore = $TitleFore
    $This.GroupFore = $GroupFore
    $This.TextBack = $TextBack
    $This.TextROBack = $TextROBack
    $This.TextFore = $TextFore
    $This.TextTitle = $TextTitle
    $This.TextHint = $TextHint
    $This.TextBad = $TextBad
    $This.TextWarn = $TextWarn
    $This.TextGood = $TextGood
    $This.TextInfo = $TextInfo
    $This.ButtonBack = $ButtonBack
    $This.ButtonFore = $ButtonFore
  }
}

#endregion ******** FCG Default Colors ********

#region ******** FCG Default Font ********"

Class Font
{
  [Object]$Regular
  [Object]$Hint
  [Object]$Bold
  [Object]$Title
  [Single]$Ratio
  [Single]$Width
  [Single]$Height
  
  Font ([Object]$Regular, [Object]$Hint, [Object]$Bold, [Object]$Title, [Single]$Ratio, [Single]$Width, [Single]$Height)
  {
    $This.Regular = $Regular
    $This.Hint = $Hint
    $This.Bold = $Bold
    $This.Title = $Title
    $This.Ratio = $Ratio
    $This.Width = $Width
    $This.Height = $Height
  }
}

#endregion ******** FCG Default Font ********

#region ******** FCG MyConfig ********"

Class MyConfig
{
  # Default Form Run Mode
  static [bool]$Production = $False

  static [String]$ScriptName = "My Script - FCG"
  static [Version]$ScriptVersion = [Version]::New("0.0.0.0")
  static [String]$ScriptAuthor = "kensw"

  # Script Configuration
  static [String]$ScriptRoot = ""
  static [String]$ConfigFile = ""
  static [PSCustomObject]$ConfigData = [PSCustomObject]@{ }

  # Script Runtime Values
  static [Bool]$Is64Bit = ([IntPtr]::Size -eq 8)

  # Default Form Settings
  static [Int]$FormSpacer = 4
  static [int]$FormMinWidth = 60
  static [int]$FormMinHeight = 35

  # Default Font
  static [String]$FontFamily = "Verdana"
  static [Single]$FontSize = 10
  static [Single]$FontTitle = 1.5

  # Azure Module Logon Information
  static [String]$AZModuleName = "Az.Accounts"
  static [String]$AZModuleVersion = "2.19.0"

  Static [OrderedDictionary]$RequiredModules = [Ordered]@{
    "Az.Accounts" = "4.0.2"
    "Az.KeyVault" = "6.3.1"
    "Az.Automation" = "1.11.1"
  }

  # Azure Logon Information
  static [String]$TenantID = ""
  static [String]$SubscriptionID = ""
  static [Object]$AADLogonInfo = $Null
  static [Object]$AccessToken = $Null
  static [HashTable]$AuthToken = @{ }

  # Default Form Color Mode
  static [Bool]$DarkMode = ((Get-ItemProperty -Path "Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -ErrorAction "SilentlyContinue").AppsUseLightTheme -eq "0")

  # Form Auto Exit
  static [Int]$AutoExit = 0
  static [Int]$AutoExitMax = 60
  static [Int]$AutoExitTic = 60000

  # Administrative Rights
  static [Bool]$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
  static [Bool]$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)

  # KPI Event Logging
  static [Bool]$KPILogExists = $False
  static [String]$KPILogName = "KPI Event Log"

  # Network / Internet
  static [__ComObject]$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}"))

  # Default Script Credentials
  static [String]$Domain = "Domain"
  static [String]$UserID = "UserID"
  static [String]$Password = "P@ssw0rd"

  # Default SMTP Configuration
  static [String]$SMTPServer = "smtp.mydomain.local"
  static [int]$SMTPPort = 25

  # Default MEMCM Configuration
  static [String]$MEMCMServer = "MyMEMCM.MyDomain.Local"
  static [String]$MEMCMSite = "XYZ"
  static [String]$MEMCMNamespace = "Root\SMS\Site_XYZ"

  # Help / Issues Uri's
  static [String]$HelpURL = "https://www.microsoft.com/"
  static [String]$BugURL = "https://www.amazon.com/"

  # CertKet for Cert Encryption
  static [String]$CertKey = ""

  # Web Browser File Path's
  static [String]$EdgePath = (Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe" -ErrorAction "SilentlyContinue")."(default)"
  static [String]$ChromePath = (Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe" -ErrorAction "SilentlyContinue")."(default)"

  # Current DateTime Offset
  static [DateTimeOffset]$DateTimeOffset = [System.DateTimeOffset]::Now

  static [Colors]$Colors

  static [Font]$Font
}

#endregion ******** FCG MyConfig ********"

# Get Script Path
if ([String]::IsNullOrEmpty($HostInvocation))
{
  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($Script:MyInvocation.MyCommand.Path)
}
else
{
  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($HostInvocation.MyCommand.Path)
}

#region ******** FCG Default Colors ********

If ([MyConfig]::DarkMode)
{
  [MyConfig]::Colors = [Colors]::New(
    [System.Drawing.Color]::FromArgb(40, 40, 40), # Back
    [System.Drawing.Color]::DodgerBlue, # Fore [System.Drawing.Color]::LightCoral
    [System.Drawing.Color]::WhiteSmoke, # LabelForr
    [System.Drawing.Color]::Red, # ErrorFoer
    [System.Drawing.Color]::DarkGray, # TitleFore
    [System.Drawing.Color]::Black, # TitleBack
    [System.Drawing.Color]::WhiteSmoke, # GroupFore
    [System.Drawing.Color]::Gainsboro, # TextBack
    [System.Drawing.Color]::DarkGray, # TextROBack
    [System.Drawing.Color]::Black, #TextFore
    [System.Drawing.Color]::Navy, # TextTitle
    [System.Drawing.Color]::Gray, # TextHint
    [System.Drawing.Color]::FireBrick, # TextBad
    [System.Drawing.Color]::Sienna, # TextWarn
    [System.Drawing.Color]::ForestGreen, # TextGood
    [System.Drawing.Color]::CornflowerBlue, # TextInfo
    [System.Drawing.Color]::DarkGray, # ButtonBack
    [System.Drawing.Color]::Black # ButtonFore
  )
}
Else
{
  [MyConfig]::Colors = [Colors]::New(
    [System.Drawing.Color]::WhiteSmoke, # Back
    [System.Drawing.Color]::Navy, # Fore
    [System.Drawing.Color]::Black, # LabelFor
    [System.Drawing.Color]::Red, # ErrorFoer
    [System.Drawing.Color]::LightBlue, # TitleFore
    [System.Drawing.Color]::Navy, # TitleBack
    [System.Drawing.Color]::Navy, # GroupFore
    [System.Drawing.Color]::White, # TextBack
    [System.Drawing.Color]::Gainsboro, # TextROBack
    [System.Drawing.Color]::Black, # TextFore
    [System.Drawing.Color]::Navy, # TextTitle
    [System.Drawing.Color]::Gray, # TextHint
    [System.Drawing.Color]::FireBrick, #TextBad
    [System.Drawing.Color]::Sienna, # TextWarn
    [System.Drawing.Color]::ForestGreen, # TextGood
    [System.Drawing.Color]::CornflowerBlue, # TextInfo
    [System.Drawing.Color]::Gainsboro, # ButtonBack
    [System.Drawing.Color]::Navy) # ButtonFore
}

#region Default Colors
<#
[MyConfig]::Colors = [Colors]::New(
  [System.Drawing.SystemColors]::Control, # Back
  [System.Drawing.SystemColors]::ControlText, # Fore
  [System.Drawing.SystemColors]::ControlText, # LabelFore
  [System.Drawing.SystemColors]::ControlText, # ErrorFore
  [System.Drawing.SystemColors]::ControlText, # TitleFore
  [System.Drawing.SystemColors]::Control, # TitleBack
  [System.Drawing.SystemColors]::ControlText, # GroupFore
  [System.Drawing.SystemColors]::Window, # #TextBack
  [System.Drawing.SystemColors]::Window, # TextROBack
  [System.Drawing.SystemColors]::WindowText, # TextFore
  [System.Drawing.SystemColors]::WindowText, # TextTitle
  [System.Drawing.SystemColors]::GrayText, # TextHint
  [System.Drawing.SystemColors]::WindowText, # TextBad
  [System.Drawing.SystemColors]::WindowText, # TextWarn
  [System.Drawing.SystemColors]::WindowText, # TextGood
  [System.Drawing.SystemColors]::WindowText, # TextInfo
  [System.Drawing.SystemColors]::Control, # ButtonBack
  [System.Drawing.SystemColors]::ControlText # ButtonFore
)
#>
#endregion Default Colors

#endregion ******** FCG Default Colors ********

#region ******** Default Font ********

$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize
:FontCheck Do
{
  $TempBoldFont = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)
  $TempGraphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)
  $TempMeasureString = $TempGraphics.MeasureString("X", $TempBoldFont)
  If (($MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor($TempMeasureString.Width))) -or ($MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor($TempMeasureString.Height))))
  {
    [MyConfig]::FontSize = [MyConfig]::FontSize - .1
  }
  Else
  {
    break FontCheck
  }
}
While ($True)
[MyConfig]::Font = [Font]::New(([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)), ([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)), $TempBoldFont, ([System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Regular)), ($TempGraphics.DpiX / 96), ([Math]::Floor($TempMeasureString.Width)), ([Math]::Ceiling($TempMeasureString.Height)))
$MonitorSize = $Null
$TempBoldFont = $Null
$TempMeasureString = $Null
$TempGraphics.Dispose()
$TempGraphics = $Null

#endregion ******** Default Font ********

#endregion ================ FCG Configuration  ================

#region >>>>>>>>>>>>>>>> FCG Runtime Values <<<<<<<<<<<<<<<<

Class MyRuntime
{
  static [HashTable]$FavEvents = @{
    "Button"           = @("Click")
    "CheckBox"         = @("CheckedChanged")
    "CheckedListBox"   = @("ItemCheck", "SelectedIndexChanged")
    "ComboBox"         = @("SelectedIndexChanged")
    "ContextMenuStrip" = @("ItemClicked", "Opening")
    "Form"             = @("Closing", "KeyDown", "Load", "Move", "Resize", "Shown")
    "ListBox"          = @("MouseDown", "SelectedIndexChanged")
    "ListView"         = @("ColumnClick", "DrawColumnHeader", "DrawItem", "DrawSubItem")
    "MenuStrip"        = @("ItemClicked", "Opening")
    "NotifyIcon"       = @("MouseClick")
    "RadioButton"      = @("CheckedChanged")
    "TabControl"       = @("DrawItem")
    "TextBox"          = @("GotFocus", "KeyDown", "KeyPress", "KeyUp", "LostFocus")
    "Timer"            = @("Tick")
    "TreeView"         = @("AfterSelect", "BeforeExpand")
    "WebBrowser"       = @("NewWindow", "StatusTextChanged")
  }
}

#endregion ================ FCG Runtime  Values ================

#region >>>>>>>>>>>>>>>> My Default Enumerations <<<<<<<<<<<<<<<<

#region ******** enum MyAnswer ********
[Flags()]
enum MyAnswer
{
  Unknown = 0
  No      = 1
  Yes     = 2
  Maybe   = 3
}
#endregion ******** enum MyAnswer ********

#region ******** enum MyDigit ********
enum MyDigit
{
  Zero
  One
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
}
#endregion ******** enum MyDigit ********

#region ******** enum MyBits ********
[Flags()]
enum MyBits
{
  Bit01 = 0x00000001
  Bit02 = 0x00000002
  Bit03 = 0x00000004
  Bit04 = 0x00000008
  Bit05 = 0x00000010
  Bit06 = 0x00000020
  Bit07 = 0x00000040
  Bit08 = 0x00000080
  Bit09 = 0x00000100
  Bit10 = 0x00000200
  Bit11 = 0x00000400
  Bit12 = 0x00000800
  Bit13 = 0x00001000
  Bit14 = 0x00002000
  Bit15 = 0x00004000
  Bit16 = 0x00008000
}
#endregion ******** enum MyBits ********

#endregion ================ My Default Enumerations ================

#region >>>>>>>>>>>>>>>> My Custom Class <<<<<<<<<<<<<<<<

#region ******** MyListItem Class ********
Class MyListItem
{
  [String]$Text
  [Object]$Value
  [Object]$Tag
  [MyBits]$Flags

  MyListItem ([String]$Text, [Object]$Value)
  {
    $This.Text = $Text
    $This.Value = $Value
  }

  MyListItem ([String]$Text, [Object]$Value, [MyBits]$Flags)
  {
    $This.Text = $Text
    $This.Value = $Value
    $This.Flags = $Flags
  }

  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag)
  {
    $This.Text = $Text
    $This.Value = $Value
    $This.Tag = $Tag
  }

  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag, [MyBits]$Flags)
  {
    $This.Text = $Text
    $This.Value = $Value
    $This.Tag = $Tag
    $This.Flags = $Flags
  }
}
#endregion ******** MyListItem Class ********

#endregion ================ My Custom Class ================

#region >>>>>>>>>>>>>>>> Windows APIs <<<<<<<<<<<<<<<<

#region ******** [Console.Window] ********

#[Void][Console.Window]::Hide()
#[Void][Console.Window]::Show()

$MyCode = @"
using System;
using System.Runtime.InteropServices;

namespace Console
{
  public class Window
  {
    [DllImport("Kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

    public static bool Hide()
    {
      return ShowWindowAsync(GetConsoleWindow(), 0);
    }

    public static bool Show()
    {
      return ShowWindowAsync(GetConsoleWindow(), 5);
    }
  }
}
"@
Add-Type -TypeDefinition $MyCode -Debug:$False
#endregion ******** [Console.Window] ********

[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
if ([MyConfig]::Production)
{
  [Void][Console.Window]::Hide()
}

#region ******** [Extract.MyIcon] ********

#$TempCount = [Extract.MyIcon]::IconCount("C:\Windows\System32\shell32.dll")
#$TempIcon = [Extract.MyIcon]::IconReturn("C:\Windows\System32\shell32.dll", 1, $False)

$MyCode = @"
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace Extract
{
  public class MyIcon
  {
    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DestroyIcon(IntPtr hIcon);

    [DllImport("shell32.dll", CharSet = CharSet.Auto)]
    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);

    public static int IconCount(string FileName)
    {
      try
      {
        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);
      }
      catch
      {
      }
      return 0;
    }

    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)
    {
      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
      Icon RetData = null;
      try
      {
        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);
        if (GetLarge)
        {
          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();
          }
        }
        else
        {
          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();
          }
        }
      }
      catch
      {
      }
      finally
      {
        foreach (IntPtr ptr in LIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
        foreach (IntPtr ptr in SIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
      }
      return RetData;
    }

    public static Icon IconReturn(string FileName, int IconNum)
    {
      return IconReturn(FileName, IconNum, false);
    }
  }
}
"@
Add-Type -TypeDefinition $MyCode -ReferencedAssemblies System.Drawing -Debug:$False
#endregion ******** [Extract.MyIcon] ********

#endregion ================ Windows APIs ================

#region >>>>>>>>>>>>>>>> My Custom Functions <<<<<<<<<<<<<<<<

#region Function Prompt
Function Prompt
{
  [Console]::Title = $PWD
  "PS$($PSVersionTable.PSVersion.Major)$(">" * ($NestedPromptLevel + 1)) "
}
#endregion Function Prompt

#region ******** Sample Functions ********

#region function Verb-Noun
Function Verb-Noun ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Verb-Noun -Value "String"
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByValue")]
  Param (
    [parameter(Mandatory = $False, ParameterSetName = "ByValue")]
    [String[]]$Value = "Default Value"
  )
  Write-Verbose -Message "Enter Function Verb-Noun"
  
  # Loop and Proccess all Values
  ForEach ($Item In $Value)
  {
  }
  
  Write-Verbose -Message "Exit Function Verb-Noun"
}
#endregion function Verb-Noun

#region function Verb-NounPiped
Function Verb-NounPiped()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Verb-NounPiped -Value "String"
    .EXAMPLE
      $Value | Verb-NounPiped
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByValue")]
  Param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, ParameterSetName = "ByValue")]
    [String[]]$Value = "Default Value"
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Verb-NounPiped Begin Block"
    # This Code is Executed Once when the Function Begins
    
    Write-Verbose -Message "Exit Function Verb-NounPiped Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Verb-NounPiped Process Block"
    
    # Loop and Proccess all Values
    ForEach ($Item In $Value)
    {
    }
    
    Write-Verbose -Message "Exit Function Verb-NounPiped Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Verb-NounPiped End Block"
    # This Code is Executed Once whent he Function Ends
    
    Write-Verbose -Message "Exit Function Verb-NounPiped End Block"
  }
}
#endregion function Verb-NounPiped

#endregion ******** Sample Functions ********

#region ******* Microsoft Forms Functions ********

#region function New-MyListItem
function New-MyListItem()
{
  <#
    .SYNOPSIS
      Makes and Adds a New ListItem for a ComboBox or ListBox Control
    .DESCRIPTION
      Makes and Adds a New ListItem for a ComboBox or ListBox Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Value
    .PARAMETER Tag
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MyListItem -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [Object]$Control,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [parameter(Mandatory = $True)]
    [String]$Value,
    [Object]$Tag,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MyListItem"

  If ($PassThru)
  {
    $Control.Items.Add(([PSCustomObject]@{"Text" = $Text; "Value" = $Value; "Tag" = $Tag}))
  }
  Else
  {
    [Void]$Control.Items.Add(([PSCustomObject]@{"Text" = $Text; "Value" = $Value; "Tag" = $Tag}))
  }

  Write-Verbose -Message "Exit Function New-MyListItem"
}
#endregion function New-MyListItem

#region function New-TreeNode
function New-TreeNode()
{
  <#
    .SYNOPSIS
      Makes and adds a New TreeNode to a TreeView Node
    .DESCRIPTION
      Makes and adds a New TreeNode to a TreeView Node
    .PARAMETER TreeNode
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER Tag
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER ImageIndex
    .PARAMETER SelectedImageIndex
    .PARAMETER ToolTip
    .PARAMETER AtTop
    .PARAMETER Checked
    .PARAMETER Expand
    .PARAMETER PassThru
    .EXAMPLE
      New-TreeNode -TreeNode $TreeNode -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Index")]
  param (
    [parameter(Mandatory = $True)]
    [Object]$TreeNode,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [Object]$Tag,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,
    [parameter(Mandatory = $False, ParameterSetName = "Index")]
    [Int]$ImageIndex = -1,
    [parameter(Mandatory = $False, ParameterSetName = "Index")]
    [Int]$SelectedImageIndex = -1,
    [parameter(Mandatory = $True, ParameterSetName = "Key")]
    [String]$ImageKey,
    [parameter(Mandatory = $False, ParameterSetName = "Key")]
    [String]$SelectedImageKey,
    [String]$ToolTip,
    [switch]$AtTop,
    [switch]$Checked,
    [switch]$Expand,
    [switch]$AddChild,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-TreeNode"

  #region $TempTreeNode = [System.Windows.Forms.TreeNode]
  if ($AddChild.IsPresent)
  {
    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text, [System.Windows.Forms.TreeNode]::New("*"))
  }
  else
  {
    $TempTreeNode = [System.Windows.Forms.TreeNode]::New($Text)
  }

  if ($AtTop.IsPresent)
  {
    [Void]$TreeNode.Nodes.Insert(0, $TempTreeNode)
  }
  else
  {
    [Void]$TreeNode.Nodes.Add($TempTreeNode)
  }

  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempTreeNode.Name = $Name
  }
  else
  {
    $TempTreeNode.Name = $Text
  }

  If ($Checked.IsPresent)
  {
    $TempTreeNode.Checked = $Checked.IsPresent
  }
  $TempTreeNode.Tag = $Tag
  $TempTreeNode.ToolTipText = $ToolTip

  $TempTreeNode.BackColor = $BackColor
  $TempTreeNode.ForeColor = $ForeColor
  $TempTreeNode.NodeFont = $Font

  Switch ($PSCmdlet.ParameterSetName)
  {
    "Index"
    {
      $TempTreeNode.ImageIndex = $ImageIndex
      if ($PSBoundParameters.ContainsKey("SelectedImageIndex"))
      {
        $TempTreeNode.SelectedImageIndex = $SelectedImageIndex
      }
      else
      {
        $TempTreeNode.SelectedImageIndex = $ImageIndex
      }
      Break
    }
    "Key"
    {
      $TempTreeNode.ImageKey = $ImageKey
      if ($PSBoundParameters.ContainsKey("SelectedImageKey"))
      {
        $TempTreeNode.SelectedImageKey = $SelectedImageKey
      }
      else
      {
        $TempTreeNode.SelectedImageKey = $ImageKey
      }
      Break
    }
  }
  #endregion $TempTreeNode = [System.Windows.Forms.TreeNode]

  if ($Expand.IsPresent)
  {
    $TempTreeNode.Expand()
  }

  If ($PassThru.IsPresent)
  {
    $TempTreeNode
  }

  $TempTreeNode = $Null

  Write-Verbose -Message "Exit Function New-TreeNode"
}
#endregion function New-TreeNode

#region function New-MenuItem
function New-MenuItem()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuItem for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuItem for a Menu or ToolStrip Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER ToolTip
    .PARAMETER Icon
    .PARAMETER ImageIndex
    .PARAMETER ImageKey
    .PARAMETER TextImageRelation
    .PARAMETER DisplayStyle
    .PARAMETER Alignment
    .PARAMETER Tag
    .PARAMETER Disable
    .PARAMETER Check
    .PARAMETER ClickOnCheck
    .PARAMETER ShortcutKeys
    .PARAMETER Disable
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MenuItem -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]
    [Int]$ImageIndex,
    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]
    [String]$ImageKey,
    [parameter(Mandatory = $False, ParameterSetName = "Icon")]
    [parameter(Mandatory = $False, ParameterSetName = "ImageIndex")]
    [parameter(Mandatory = $False, ParameterSetName = "ImageKey")]
    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",
    [Object]$Tag,
    [Switch]$Disable,
    [Switch]$Check,
    [Switch]$ClickOnCheck,
    [System.Windows.Forms.Keys]$ShortcutKeys = "None",
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MenuItem"

  #region $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]
  $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New($Text)

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuItem)
    if ($Menu.DropDown.Items.Count -eq 1)
    {
      $Menu.DropDown.BackColor = $Menu.BackColor
      $Menu.DropDown.ForeColor = $Menu.ForeColor
      $Menu.DropDown.ImageList = $Menu.Owner.ImageList
    }
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuItem)
  }

  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuItem.Name = $Name
  }
  else
  {
    $TempMenuItem.Name = $Text
  }

  $TempMenuItem.ShortcutKeys = $ShortcutKeys
  $TempMenuItem.Tag = $Tag
  $TempMenuItem.ToolTipText = $ToolTip
  $TempMenuItem.TextAlign = $Alignment
  $TempMenuItem.Checked = $Check.IsPresent
  $TempMenuItem.CheckOnClick = $ClickOnCheck.IsPresent
  $TempMenuItem.DisplayStyle = $DisplayStyle
  $TempMenuItem.Enabled = (-not $Disable.IsPresent)

  $TempMenuItem.BackColor = $BackColor
  $TempMenuItem.ForeColor = $ForeColor
  $TempMenuItem.Font = $Font

  If ($PSCmdlet.ParameterSetName -eq "Default")
  {
    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  else
  {
    Switch ($PSCmdlet.ParameterSetName)
    {
      "Icon"
      {
        $TempMenuItem.Image = $Icon
        Break
      }
      "ImageIndex"
      {
        $TempMenuItem.ImageIndex = $ImageIndex
        Break
      }
      "ImageKey"
      {
        $TempMenuItem.ImageKey = $ImageKey
        Break
      }
    }
    $TempMenuItem.ImageAlign = $Alignment
    $TempMenuItem.TextImageRelation = $TextImageRelation
  }
  #endregion $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]

  If ($PassThru.IsPresent)
  {
    $TempMenuItem
  }

  $TempMenuItem = $Null

  Write-Verbose -Message "Exit Function New-MenuItem"
}
#endregion function New-MenuItem

#region function New-MenuButton
function New-MenuButton()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuButton for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuButton for a Menu or ToolStrip Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER ToolTip
    .PARAMETER Icon
    .PARAMETER ImageIndex
    .PARAMETER ImageKey
    .PARAMETER DisplayStyle
    .PARAMETER Alignment
    .PARAMETER Tag
    .PARAMETER Disable
    .PARAMETER Check
    .PARAMETER ClickOnCheck
    .PARAMETER ShortcutKeys
    .PARAMETER Disable
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MenuButton -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]
    [Int]$ImageIndex,
    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]
    [String]$ImageKey,
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",
    [Object]$Tag,
    [Switch]$Disable,
    [Switch]$Check,
    [Switch]$ClickOnCheck,
    [System.Windows.Forms.Keys]$ShortcutKeys = "None",
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MenuButton"

  #region $TempMenuButton = [System.Windows.Forms.ToolStripButton]
  $TempMenuButton = [System.Windows.Forms.ToolStripButton]::New($Text)

  [Void]$Menu.Items.Add($TempMenuButton)

  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuButton.Name = $Name
  }
  else
  {
    $TempMenuButton.Name = $Text
  }

  $TempMenuButton.ShortcutKeys = $ShortcutKeys
  $TempMenuButton.Tag = $Tag
  $TempMenuButton.ToolTipText = $ToolTip
  $TempMenuButton.TextAlign = $Alignment
  $TempMenuButton.Checked = $Check.IsPresent
  $TempMenuButton.CheckOnClick = $ClickOnCheck.IsPresent
  $TempMenuButton.DisplayStyle = $DisplayStyle
  $TempMenuButton.Enabled = (-not $Disable.IsPresent)

  $TempMenuButton.BackColor = $BackColor
  $TempMenuButton.ForeColor = $ForeColor
  $TempMenuButton.Font = $Font

  If ($PSCmdlet.ParameterSetName -eq "Default")
  {
    $TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  else
  {
    Switch ($PSCmdlet.ParameterSetName)
    {
      "Icon"
      {
        $TempMenuButton.Image = $Icon
        Break
      }
      "ImageIndex"
      {
        $TempMenuButton.ImageIndex = $ImageIndex
        Break
      }
      "ImageKey"
      {
        $TempMenuButton.ImageKey = $ImageKey
        Break
      }
    }
    $TempMenuButton.ImageAlign = $Alignment
    $TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText
  }
  #endregion $TempMenuButton = [System.Windows.Forms.ToolStripButton]

  If ($PassThru.IsPresent)
  {
    $TempMenuButton
  }

  $TempMenuButton = $Null

  Write-Verbose -Message "Exit Function New-MenuButton"
}
#endregion function New-MenuButton

#region function New-MenuLabel
function New-MenuLabel()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER ToolTip
    .PARAMETER Icon
    .PARAMETER DisplayStyle
    .PARAMETER Alignment
    .PARAMETER Tag
    .PARAMETER Disable
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MenuLabel -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [System.Drawing.Icon]$Icon,
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleLeft",
    [Object]$Tag,
    [Switch]$Disable,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MenuLabel"

  #region $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]
  $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New($Text)

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuLabel)
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuLabel)
  }

  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuLabel.Name = $Name
  }
  else
  {
    $TempMenuLabel.Name = $Text
  }

  $TempMenuLabel.TextAlign = $Alignment
  $TempMenuLabel.Tag = $Tag
  $TempMenuLabel.ToolTipText = $ToolTip
  $TempMenuLabel.DisplayStyle = $DisplayStyle
  $TempMenuLabel.Enabled = (-not $Disable.IsPresent)

  $TempMenuLabel.BackColor = $BackColor
  $TempMenuLabel.ForeColor = $ForeColor
  $TempMenuLabel.Font = $Font

  if ($PSBoundParameters.ContainsKey("Icon"))
  {
    $TempMenuLabel.Image = $Icon
    $TempMenuLabel.ImageAlign = $Alignment
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText
  }
  else
  {
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  #endregion $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]

  If ($PassThru)
  {
    $TempMenuLabel
  }

  $TempMenuLabel = $Null

  Write-Verbose -Message "Exit Function New-MenuLabel"
}
#endregion function New-MenuLabel

#region function New-MenuSeparator
function New-MenuSeparator()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control
    .PARAMETER Menu
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .EXAMPLE
      New-MenuSeparator -Menu $Menu
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore
  )
  Write-Verbose -Message "Enter Function New-MenuSeparator"

  #region $TempSeparator = [System.Windows.Forms.ToolStripSeparator]
  $TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempSeparator)
  }
  else
  {
    [Void]$Menu.Items.Add($TempSeparator)
  }

  $TempSeparator.Name = "TempSeparator"
  $TempSeparator.Text = "TempSeparator"

  $TempSeparator.BackColor = $BackColor
  $TempSeparator.ForeColor = $ForeColor
  #endregion $TempSeparator = [System.Windows.Forms.ToolStripSeparator]

  $TempSeparator = $Null

  Write-Verbose -Message "Exit Function New-MenuSeparator"
}
#endregion function New-MenuSeparator

#region function New-ListViewItem
function New-ListViewItem()
{
  <#
    .SYNOPSIS
      Makes and adds a New ListViewItem to a ListView Control
    .DESCRIPTION
      Makes and adds a New ListViewItem to a ListView Control
    .PARAMETER ListView
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER Font
    .PARAMETER Name
    .PARAMETER Text
    .PARAMETER SubItems
    .PARAMETER Tag
    .PARAMETER IndentCount
    .PARAMETER ImageIndex
    .PARAMETER Imagekey
    .PARAMETER Group
    .PARAMETER ToolTip
    .PARAMETER Checked
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-ListViewItem -ListView $listView -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param(
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListView]$ListView,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [String]$Name,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String[]]$SubItems,
    [Object]$Tag,
    [parameter(Mandatory = $False, ParameterSetName = "Index")]
    [parameter(Mandatory = $False, ParameterSetName = "Key")]
    [Int]$IndentCount = 0,
    [parameter(Mandatory = $True, ParameterSetName = "Index")]
    [Int]$ImageIndex = -1,
    [parameter(Mandatory = $True, ParameterSetName = "Key")]
    [String]$ImageKey,
    [System.Windows.Forms.ListViewGroup]$Group,
    [String]$ToolTip,
    [Switch]$Checked,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-ListViewItem"

  #region $TempListViewItem = [System.Windows.Forms.ListViewItem]
  if ($PSCmdlet.ParameterSetName -eq "Default")
  {
    $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $Group)
  }
  else
  {
    if ($PSCmdlet.ParameterSetName -eq "Index")
    {
      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageIndex, $Group)
    }
    else
    {
      $TempListViewItem = [System.Windows.Forms.ListViewItem]::New($Text, $ImageKey, $Group)
    }
    $TempListViewItem.IndentCount = $IndentCount
  }

  if ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempListViewItem.Name = $Name
  }
  else
  {
    $TempListViewItem.Name = $Text
  }

  $TempListViewItem.Tag = $Tag
  $TempListViewItem.ToolTipText = $ToolTip
  $TempListViewItem.Checked = $Checked.IsPresent

  $TempListViewItem.BackColor = $BackColor
  $TempListViewItem.ForeColor = $ForeColor
  $TempListViewItem.Font = $Font
  if ($PSBoundParameters.ContainsKey("SubItems"))
  {
    $TempListViewItem.SubItems.AddRange($SubItems)
  }
  #endregion $TempListViewItem = [System.Windows.Forms.ListViewItem]

  [Void]$ListView.Items.Add($TempListViewItem)

  If ($PassThru.IsPresent)
  {
    $TempListViewItem
  }

  $TempListViewItem = $Null

  Write-Verbose -Message "Exit Function New-ListViewItem"
}
#endregion function New-ListViewItem

#region function New-ColumnHeader
function New-ColumnHeader()
{
  <#
    .SYNOPSIS
      Makes and Adds a New ColumnHeader for a ListView Control
    .DESCRIPTION
      Makes and Adds a New ColumnHeader for a ListView Control
    .PARAMETER ListView
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER Tag
    .PARAMETER Width
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-ColumnHeader -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListView]$ListView,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [Object]$Tag,
    [Int]$Width = -2,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-ColumnHeader"

  #region $TempColumnHeader = [System.Windows.Forms.ColumnHeader]
  $TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()
  [Void]$ListView.Columns.Add($TempColumnHeader)
  $TempColumnHeader.Tag = $Tag
  $TempColumnHeader.Text = $Text
  if ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempColumnHeader.Name = $Name
  }
  else
  {
    $TempColumnHeader.Name = $Text
  }
  $TempColumnHeader.Width = $Width
  #endregion $TempColumnHeader = [System.Windows.Forms.ColumnHeader]

  If ($PassThru.IsPresent)
  {
    $TempColumnHeader
  }

  $TempColumnHeader = $Null

  Write-Verbose -Message "Exit Function New-ColumnHeader"
}
#endregion function New-ColumnHeader

#region function New-ListViewGroup
function New-ListViewGroup()
{
  <#
    .SYNOPSIS
      Makes and Adds a New ListViewGroup to a ListView Control
    .DESCRIPTION
      Makes and Adds a New ListViewGroup to a ListView Control
    .PARAMETER Header
    .PARAMETER Name
    .PARAMETER Tag
    .PARAMETER Alignment
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-ListViewGroup -Header "Header" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListView]$ListView,
    [parameter(Mandatory = $True)]
    [String]$Header,
    [String]$Name,
    [Object]$Tag,
    [System.Windows.Forms.HorizontalAlignment]$Alignment = "Left",
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-ListViewGroup"

  #region $TempListViewGroup = [System.Windows.Forms.ListViewGroup]
  $TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()
  [Void]$ListView.Groups.Add($TempListViewGroup)
  $TempListViewGroup.Tag = $Tag
  $TempListViewGroup.Header = $Header
  if ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempListViewGroup.Name = $Name
  }
  else
  {
    $TempListViewGroup.Name = $Header
  }
  $TempListViewGroup.HeaderAlignment = $Alignment
  #endregion $TempListViewGroup = [System.Windows.Forms.ListViewGroup]

  If ($PassThru.IsPresent)
  {
    $TempListViewGroup
  }

  $TempListViewGroup = $Null

  Write-Verbose -Message "Exit Function New-ListViewGroup"
}
#endregion function New-ListViewGroup

#region function New-TabPage
function New-TabPage()
{
  <#
    .SYNOPSIS
      Makes and adds a New TabPage to a TabControl Node
    .DESCRIPTION
      Makes and adds a New TabPage to a TabControl Node
    .PARAMETER TabControl
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER Font
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER Tag
    .PARAMETER ImageIndex
    .PARAMETER ToolTip
    .PARAMETER Disabled
    .PARAMETER PassThru
    .EXAMPLE
      $TabPage = New-TabPage -TabControl  -Text "Text" -Tag "Tag" -PassThru
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param(
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TabControl]$TabControl,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.TextBack,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [Object]$Tag,
    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]
    [Int]$ImageIndex,
    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]
    [String]$ImageKey,
    [String]$ToolTip,
    [Switch]$Disabled,
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-TabPage"

  #region $TempTabPage = [System.Windows.Forms.TabPage]
  $TempTabPage = [System.Windows.Forms.TabPage]::New($Text)
  $TabControl.Controls.Add($TempTabPage)

  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempTabPage.Name = $Name
  }
  else
  {
    $TempTabPage.Name = $Text
  }

  $TempTabPage.Tag = $Tag
  $TempTabPage.ToolTipText = $ToolTip
  $TempTabPage.Enabled = (-not $Disabled.IsPresent)
  Switch ($PSCmdlet.ParameterSetName)
  {
    "ImageIndex"
    {
      $TempTabPage.ImageIndex = $ImageIndex
      Break
    }
    "ImageKey"
    {
      $TempTabPage.ImageKey = $ImageKey
      Break
    }
  }
  $TempTabPage.BackColor = $BackColor
  $TempTabPage.ForeColor = $ForeColor
  $TempTabPage.Font = $Font
  #endregion $TempTabPage = [System.Windows.Forms.TabPage]

  If ($PassThru.IsPresent)
  {
    $TempTabPage
  }

  $TempTabPage = $Null

  Write-Verbose -Message "Exit Function New-TabPage"
}
#endregion function New-TabPage

#region function Scale-MyForm
function Scale-MyForm()
{
  <#
    .SYNOPSIS
      Scale Form
    .DESCRIPTION
      Scale Form
    .PARAMETER Control
    .PARAMETER Scale
    .EXAMPLE
      Scale-MyForm -Control $Control -$Scale
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [Object]$Control = $FCGForm,
    [Single]$Scale = 1
  )
  Write-Verbose -Message "Enter Function Scale-MyForm"

  if ($Control -is [System.Windows.Forms.Form])
  {
    $Control.Scale($Scale)
  }

  $Control.Font = [System.Drawing.Font]::New($Control.Font.FontFamily, ($Control.Font.Size * $Scale), $Control.Font.Style)

  if ([String]::IsNullOrEmpty($Control.PSObject.Properties.Match("Items")))
  {
    if ($Control.Controls.Count)
    {
      ForEach ($ChildControl in $Control.Controls)
      {
        Scale-MyForm -Control $ChildControl -Scale $Scale
      }
    }
  }
  else
  {
    ForEach ($Item in $Control.Items)
    {
      Scale-MyForm -Control $Item -Scale $Scale
    }
  }

  Write-Verbose -Message "Exit Function Scale-MyForm"
}
#endregion function Scale-MyForm

#endregion ******* Microsoft Forms Functions ********

#region ******* Active Directory Functions ********

#region function Get-MyADForest
function Get-MyADForest ()
{
  <#
    .SYNOPSIS
      Get Active Directory Forest
    .DESCRIPTION
      Get Active Directory Forest
    .PARAMETER Name
    .PARAMETER Current
    .EXAMPLE
      $MyADForest = Get-MyADForest -Current
    .EXAMPLE
      $MyADForest = Get-MyADForest -Name "String"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Current")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "Name")]
    [String]$Name,
    [parameter(Mandatory = $True, ParameterSetName = "Current")]
    [Switch]$Current
  )
  Write-Verbose -Message "Enter Function Get-MyADForest"

  Switch ($PSCmdlet.ParameterSetName)
  {
    "Name"
    {
      $DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Forest
      $DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New($DirectoryContextType, $Name)
      [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($DirectoryContext)
      $DirectoryContext = $Null
      $DirectoryContextType = $Null
      Break
    }
    "Current"
    {
      [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
      Break
    }
  }

  Write-Verbose -Message "Exit Function Get-MyADForest"
}
#endregion function Get-MyADForest

#region function Get-MyADDomain
function Get-MyADDomain ()
{
  <#
    .SYNOPSIS
      Get Active Directory Domain
    .DESCRIPTION
      Get Active Directory Domain
    .PARAMETER Name
    .PARAMETER Computer
    .PARAMETER Current
    .EXAMPLE
      $MyADForest = Get-MyADDomain -Current
    .EXAMPLE
      $MyADForest = Get-MyADDomain -Computer
    .EXAMPLE
      $MyADForest = Get-MyADDomain -Name "String"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Current")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "Name")]
    [String]$Name,
    [parameter(Mandatory = $True, ParameterSetName = "Computer")]
    [Switch]$Computer,
    [parameter(Mandatory = $True, ParameterSetName = "Current")]
    [Switch]$Current
  )
  Write-Verbose -Message "Enter Function Get-MyADDomain"

  Switch ($PSCmdlet.ParameterSetName)
  {
    "Name"
    {
      $DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain
      $DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New($DirectoryContextType, $Name)
      [System.DirectoryServices.ActiveDirectory.Domian]::GetDomain($DirectoryContext)
      $DirectoryContext = $Null
      $DirectoryContextType = $Null
      Break
    }
    "Computer"
    {
      [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()
      break
    }
    "Current"
    {
      [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
      Break
    }
  }

  Write-Verbose -Message "Exit Function Get-MyADDomain"
}
#endregion function Get-MyADDomain

#region function Get-MyADObject
function Get-MyADObject()
{
  <#
    .SYNOPSIS
      Searches AD and returns an AD SearchResultCollection 
    .DESCRIPTION
      Searches AD and returns an AD SearchResultCollection 
    .PARAMETER LDAPFilter
      AD Search LDAP Filter
    .PARAMETER PageSize
      Search Page Size
    .PARAMETER SizeLimit
      Search Search Size
    .PARAMETER SearchRoot
      Starting Search OU
    .PARAMETER ServerName
      Name of DC or Domain to query
    .PARAMETER SearchScope
      Search Scope
    .PARAMETER Sort
      Sort Direction
    .PARAMETER SortProperty
      Property to Sort By
    .PARAMETER PropertiesToLoad
      Properties to Load
    .PARAMETER Credential
      Credentials to use when searching active directory
    .EXAMPLE
      Get-MyADObject [<String>]
    .EXAMPLE
      Get-MyADObject -filter [<String>]
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [String]$LDAPFilter = "(objectClass=*)",
    [Long]$PageSize = 1000,
    [Long]$SizeLimit = 1000,
    [String]$SearchRoot = "LDAP://$($([ADSI]'').distinguishedName)",
    [String]$ServerName,
    [ValidateSet("Base", "OneLevel", "Subtree")]
    [System.DirectoryServices.SearchScope]$SearchScope = "SubTree",
    [ValidateSet("Ascending", "Descending")]
    [System.DirectoryServices.SortDirection]$Sort = "Ascending",
    [String]$SortProperty,
    [String[]]$PropertiesToLoad,
    [PSCredential]$Credential
  )
  Write-Verbose -Message "Enter Function Get-MyADObject"

  $MySearcher = [System.DirectoryServices.DirectorySearcher]::New($LDAPFilter, $PropertiesToLoad, $SearchScope)

  $MySearcher.PageSize = $PageSize
  $MySearcher.SizeLimit = $SizeLimit

  $TempSearchRoot = $SearchRoot.ToUpper()
  Switch -regex ($TempSearchRoot)
  {
    "(?:LDAP|GC)://*"
    {
      if ($PSBoundParameters.ContainsKey("ServerName"))
      {
        $MySearchRoot = $TempSearchRoot -replace "(?<LG>(?:LDAP|GC)://)(?:[\w\d\.-]+/)?(?<DN>.+)", "`${LG}$($ServerName)/`${DN}"
      }
      else
      {
        $MySearchRoot = $TempSearchRoot
      }
      break
    }
    Default
    {
      if ($PSBoundParameters.ContainsKey("ServerName"))
      {
        $MySearchRoot = "LDAP://$($ServerName)/$($TempSearchRoot)"
      }
      else
      {
        $MySearchRoot = "LDAP://$($TempSearchRoot)"
      }
      break
    }
  }

  if ($PSBoundParameters.ContainsKey("Credential"))
  {
    $MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New($MySearchRoot, ($Credential.UserName), (($Credential.GetNetworkCredential()).Password))
  }
  else
  {
    $MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New($MySearchRoot)
  }

  if ($PSBoundParameters.ContainsKey("SortProperty"))
  {
    $MySearcher.Sort.PropertyName = $SortProperty
    $MySearcher.Sort.Direction = $Sort
  }

  $MySearcher.FindAll()

  $MySearcher.Dispose()
  $MySearcher = $Null
  $MySearchRoot = $Null
  $TempSearchRoot = $Null

  Write-Verbose -Message "Exit Function Get-MyADObject"
}
#endregion function Get-MyADObject

#region function New-MyADUser
function New-MyADUser()
{
  <#
    .SYNOPSIS
      Creates a new User in Active Directory
    .DESCRIPTION
      Creates a new User in Active Directory
    .PARAMETER Parent
    .PARAMETER ServerName
    .PARAMETER SamAccountName
    .PARAMETER UserPrincipalName
    .PARAMETER FirstName
    .PARAMETER MI
    .PARAMETER LastName
    .PARAMETER Description
    .PARAMETER Password
    .PARAMETER Enabled
    .PARAMETER NoExpire
    .PARAMETER NoChange
    .PARAMETER Credential
    .INPUTS
    .OUTPUTS
    .EXAMPLE
      New-MyADUser -Parent "OU=Users,OU=MyUsers,DC=MyDomain,DC=Local" -SamAccountName "MyTestUser" -UserPrincipalName "MyTestUser@MyDomain.Local" -FirstName "FirstName" -MI "M" -LastName "LastName" -Description "My Description" -Password "MyPassword" -Enabled
    .NOTES
      Basic function to create a User in Active Directory, needs input validation and error checking
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Parent,
    [String]$ServerName,
    [parameter(Mandatory = $True)]
    [String]$SamAccountName,
    [parameter(Mandatory = $True)]
    [String]$UserPrincipalName,
    [parameter(Mandatory = $True)]
    [String]$FirstName,
    [String]$MI,
    [parameter(Mandatory = $True)]
    [String]$LastName,
    [parameter(Mandatory = $True)]
    [String]$Description,
    [parameter(Mandatory = $True)]
    [String]$Password,
    [Switch]$Enabled,
    [Switch]$NoExpire,
    [Switch]$NoChange,
    [PSCredential]$Credential
  )
  Write-Verbose -Message "Enter Function New-MyADUser"

  $Params = @{
    "SearchRoot"  = $Parent;
    "SearchScope" = "Base";
    "SizeLimit"   = 1
  }
  if ($PSBoundParameters.ContainsKey("ServerName"))
  {
    [Void]$Params.Add("ServerName", $ServerName)
  }
  if ($PSBoundParameters.ContainsKey("Credential"))
  {
    [Void]$Params.Add("Credential", $Credential)
  }
  $ParentOU = (Get-MyADObject @Params).GetDirectoryEntry()
  $New = $ParentOU.Children.Add("CN=$($SamAccountName)", "User")
  [Void]$New.Properties["samaccountname"].Add($SamAccountName)
  [Void]$New.Properties["userprincipalname"].Add($UserPrincipalName)
  [Void]$New.Properties["givenname"].Add($FirstName)
  [Void]$New.Properties["sn"].Add($LastName)
  if ($PSBoundParameters.ContainsKey("MI"))
  {
    [Void]$New.Properties["initials"].Add($MI)
    [Void]$New.Properties["displayname"].Add("$($LastName), $($FirstName) $($MI)")
  }
  else
  {
    [Void]$New.Properties["displayname"].Add("$($LastName), $($FirstName)")
  }
  [Void]$New.Properties["description"].Add($Description)
  [Void]$New.CommitChanges()
  if ($Enabled.IsPresent)
  {
    [Void]$New.psbase.invokeset("AccountDisabled", "False")
  }
  [Void]$New.CommitChanges()
  [Void]$New.SetPassword($Password)
  [Void]$New.RefreshCache()
  $UACFlag = 0
  if ($NoExpire.IsPresent)
  {
    $UACFlag = $UACFlag -bor 0x10000
  }
  if ($NoChange.IsPresent)
  {
    $UACFlag = $UACFlag -bor 0x40
  }

  $New.Properties["userAccountControl"].Value = (($New.Properties["userAccountControl"].Value -band (-bnot 0x20)) -bor $UACFlag)
  [Void]$New.CommitChanges()
  [Void]$New.RefreshCache()

  $New

  $New = $Null

  Write-Verbose -Message "Exit Function New-MyADUser"
}
#endregion function New-MyADUser

#region function Translate-DomainName
function Translate-DomainName()
{
  <#
    .SYNOPSIS
    .DESCRIPTION
    .PARAMETER List
    .PARAMETER Filter
    .EXAMPLE
    .NOTES
      Original Function By Ken Sweet

      ADS_NAME_TYPE_1779 = 1
      ADS_NAME_TYPE_CANONICAL = 2
      ADS_NAME_TYPE_NT4 = 3
      ADS_NAME_TYPE_DISPLAY = 4
      ADS_NAME_TYPE_DOMAIN_SIMPLE = 5
      ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6
      ADS_NAME_TYPE_GUID = 7
      ADS_NAME_TYPE_UNKNOWN = 8
      ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9
      ADS_NAME_TYPE_CANONICAL_EX = 10
      ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11
      ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12
  #>
  [CmdletBinding(DefaultParameterSetName = "ByDN")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "ByDN")]
    [String]$DN,
    [parameter(Mandatory = $True, ParameterSetName = "ByFQDN")]
    [String]$FQDN
  )
  Write-Verbose -Message "Enter Function Translate-DomainName"

  $NameTranslate = New-Object -ComObject "NameTranslate"

  [System.Void]([System.__ComObject].InvokeMember("Init", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, (3, $Null)))
  Switch ($PSCmdlet.ParameterSetName)
  {
    "ByDN"
    {
      [System.Void]([System.__ComObject].InvokeMember("Set", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, (1, $DN)))
      Break
    }
    "ByFQDN"
    {
      [System.Void]([System.__ComObject].InvokeMember("Set", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, (2, "$FQDN/")))
      Break
    }
  }

  [PSCustomObject][Ordered]@{
    "DN" = ([System.__ComObject].InvokeMember("Get", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, 1));
    "FQDN" = ([System.__ComObject].InvokeMember("Get", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, 2)).Trim('/');
    "NetBIOS" = ([System.__ComObject].InvokeMember("Get", [System.Reflection.BindingFlags]::InvokeMethod, $Null, $NameTranslate, 3)).Trim('\')
  }

  $NameTranslate = $Null

  Write-Verbose -Message "Exit Function Translate-DomainName"
}
#endregion function Translate-DomainName

#region function Validate-MyADAccount
function Validate-MyADAccount()
{
  <#
    .SYNOPSIS
      Validates AD Credentials
    .DESCRIPTION
      Validates AD Credentials
    .PARAMETER Domain
    .PARAMETER UserName
    .PARAMETER Password
    .EXAMPLE
      Validate-MyADAccount -Domain <String> -UserName <String> -Password <String>
    .EXAMPLE
      Validate-MyADAccount -UserName <String> -Password <String>
    .EXAMPLE
      Validate-MyADAccount -Password <String>
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Creds")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "Text")]
    [String]$Domain,
    [parameter(Mandatory = $True, ParameterSetName = "Text")]
    [String]$UserName,
    [parameter(Mandatory = $True, ParameterSetName = "Text")]
    [String]$Password,
    [parameter(Mandatory = $True, ParameterSetName = "Creds")]
    [PSCredential]$Credential
  )
  Write-Verbose -Message "Enter Function Validate-MyADAccount"

  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.DirectoryServices.AccountManagement.ContextType")).Type))
  {
    [void][System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.AccountManagement")
  }
  
  if ($PSBoundParameters.ContainsKey("Credential"))
  {
    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, (($Credential.GetNetworkCredential()).Domain)).ValidateCredentials((($Credential.GetNetworkCredential()).UserName), (($Credential.GetNetworkCredential()).Password))
  }
  else
  {
    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, $Domain).ValidateCredentials($UserName, $Password)
  }

  Write-Verbose -Message "Exit Function Validate-MyADAccount"
}
#endregion function Validate-MyADAccount

#region function Confirm-MyGroupMemberShip
Function Confirm-MyGroupMemberShip ()
{
  <#
    .SYNOPSIS
      Confirms if User is a Member of a Group
    .DESCRIPTION
      Confirms if User is a Member of a Group
    .PARAMETER UserID
      User ID / Sam Account Name of user
    .PARAMETER UserRoot
      Search Root for the User Account
    .PARAMETER UserScope
      Search Scope for User Account
    .PARAMETER UserDN
      DN of User Account
    .PARAMETER GroupName
      Name of the Group
    .PARAMETER GroupRoot
      Search Root for the Group
    .PARAMETER GroupScope
      Search Scope for Group
    .EXAMPLE
      Confirm-MyGroupMemberShip -UserID $UserID -UserRoot $UserRoot -GroupName $GroupName -GroupRoot $GroupRoot
    .EXAMPLE
      Confirm-MyGroupMemberShip -UserDN $UserDN -GroupName $GroupName -GroupRoot $GroupRoot
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "UserID")]
  Param (
    [parameter(Mandatory = $False, ParameterSetName = "UserID")]
    [String]$UserID = [Environment]::UserName,
    [parameter(Mandatory = $True, ParameterSetName = "UserID")]
    [String]$UserRoot = "LDAP://MyDomain.Local/dc=MyDomain,dc=Local",
    [parameter(Mandatory = $False, ParameterSetName = "UserID")]
    [ValidateSet("SubTree", "OneLevel")]
    [String]$UserScope = "SubTree",
    [parameter(Mandatory = $True, ParameterSetName = "UserDN")]
    [String]$UserDN,
    [parameter(Mandatory = $True)]
    [String]$GroupName,
    [parameter(Mandatory = $True)]
    [String]$GroupRoot = "LDAP://MyDomain.Local/dc=MyDomain,dc=Local",
    [ValidateSet("SubTree", "OneLevel")]
    [String]$GroupScope = "SubTree"
  )
  Write-Verbose -Message "Enter Function Confirm-MyGroupMemberShip"
  
  If ($PSCmdlet.ParameterSetName -eq "UserID")
  {
    Try
    {
      # Get Users DistinguishedName
      $ChkADUser = ([adsisearcher]::New($UserRoot, "(&(objectClass=user)(objectCategory=person)(samAccountName=$($UserID)))", @("DistinguishedName"), $UserScope)).FindOne()
      # Verify User was Found
      If ([String]::IsNullOrEmpty($ChkADUser.Path))
      {
        # Set UserDN
        $UserDN = $Null
        $Message = "User Not Found"
      }
      Else
      {
        # Set UserDN
        $UserDN = $ChkADUser.Properties["distinguishedname"][0]
      }
    }
    Catch
    {
      # Set UserDN
      $UserDN = $Null
      $Message = $Error[0].ToString()
    }
  }
  
  # Verify User DN is not Null
  If ([String]::IsNullOrEmpty($UserDN))
  {
    # Set Is Member Status
    $IsMember = $False
    # Set Success Status
    $Success = $False
  }
  Else
  {
    Try
    {
      # Check AD is user is member of the Group
      $ChkGroup = ([adsisearcher]::New($GroupRoot, "(&(objectClass=group)(objectCategory=group)(name=$($GroupName))(member:1.2.840.113556.1.4.1941:=$($UserDN)))", @("adspath"), $GroupScope)).FindOne()
      # Set Is Member Status
      $IsMember = (-not [String]::IsNullOrEmpty($ChkGroup.Path))
      # Set Success Status
      $Success = $True
      $Message = "Success"
    }
    Catch
    {
      # Set Is Member Status
      $IsMember = $False
      # Set Success Status
      $Success = $False
      $Message = $Error[0].ToString()
    }
  }

  # Return Status
  [PSCustomObject]@{
    "Success"   = $Success;
    "Message"    = $Message;
    "UserDN"    = $UserDN;
    "GroupName" = $GroupName;
    "IsMember"  = $IsMember
  }

  Write-Verbose -Message "Exit Function Confirm-MyGroupMemberShip"
}
#endregion function Confirm-MyGroupMemberShip

#region function Get-MyBitlockerKey
Function Get-MyBitlockerKey()
{
  <#
    .SYNOPSIS
      Get Bitlocker Keys
    .DESCRIPTION
      Get Bitlocker Keys
    .PARAMETER ComputerName
    .PARAMETER PasswordID
    .PARAMETER DOmainFQDN
    .EXAMPLE
      Get-MyBitlockerKey -ComputerName $ComputerName
    .EXAMPLE
      $ComputerName | Get-MyBitlockerKey
    .NOTES
      Original Function By %YourName%
      
      2024-07-21 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "CompName")]
  Param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True, ParameterSetName = "CompName")]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $True, ValueFromPipeline = $True, ParameterSetName = "Password")]
    [String[]]$PasswordID,
    [parameter(Mandatory = $True, ParameterSetName = "Password")]
    [String]$DomainFQDN = "ad.providence.org",
    [parameter(Mandatory = $True, ParameterSetName = "Password")]
    [String]$SearchRoot = "DC=ad,dc=providence,dc=org"
  )
  Process
  {
    Write-Verbose -Message "Enter Function Get-MyBitlockerKey Process Block"
    
    If ($PSCmdlet.ParameterSetName -eq "CompName")
    {
      ForEach ($Computer In $ComputerName)
      {
        $CompObj = Get-MyADObject -SearchRoot "GC://$($DomainFQDN):3268" -SearchScope "Subtree" -LDAPFilter "(&(objectClass=user)(objectCategory=computer)(samaccounttype=805306369)(CN=$($Computer)))" -PropertiesToLoad "distinguishedname", "adspath"
        If ([String]::IsNullOrEmpty($CompObj.Path))
        {
          [PSCustomObject]@{ "ComputerName" = $Computer; "PasswordID" = "N/A"; "Password" = "N/A"; "DateTime" = [DateTime]::MinValue }
        }
        Else
        {
          $BLPasswords = Get-MyADObject -SearchRoot ($CompObj.Properties["distinguishedname"][0]) -SearchScope "OneLevel" -LDAPFilter "(ObjectClass=msFVE-RecoveryInformation)"
          ForEach ($BLPassword In $BLPasswords)
          {
            $DateTimeInfo = [RegEx]::Match($BLPassword.Properties["adspath"][0], "CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}")
            If ($DateTimeInfo.Success)
            {
              $KeyTime = [DateTime]::new($DateTimeInfo.Groups["YE"].Value, $DateTimeInfo.Groups["MO"].Value, $DateTimeInfo.Groups["DA"].Value, $DateTimeInfo.Groups["HO"].Value, $DateTimeInfo.Groups["MI"].Value, $DateTimeInfo.Groups["SE"].Value)
            }
            Else
            {
              $KeyTime = [DateTime]::MinValue
            }
            [PSCustomObject]@{ "ComputerName" = $Computer; "PasswordID" = (([Guid]$BLPassword.Properties["msfve-recoveryguid"][0]).Guid); "Password" = ($BLPassword.Properties["msfve-recoverypassword"][0]); "DateTime" = $KeyTime }
          }
        }
      }
    }
    Else
    {
      ForEach ($PassID In $PasswordID)
      {
        $PassObj = Get-MyADObject -SearchRoot $SearchRoot -Server $DomainFQDN -SearchScope "Subtree" -LDAPFilter "(&(ObjectClass=msFVE-RecoveryInformation)(Name=*$($PassID)*))"
        If ([String]::IsNullOrEmpty($PassObj.Path))
        {
          [PSCustomObject]@{ "ComputerName" = "Unknown"; "PasswordID" = "N/A"; "Password" = "N/A"; "DateTime" = [DateTime]::MinValue }
        }
        Else
        {
          $DateTimeInfo = [RegEx]::Match($PassObj.Properties["adspath"][0], "CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}")
          If ($DateTimeInfo.Success)
          {
            $KeyTime = [DateTime]::new($DateTimeInfo.Groups["YE"].Value, $DateTimeInfo.Groups["MO"].Value, $DateTimeInfo.Groups["DA"].Value, $DateTimeInfo.Groups["HO"].Value, $DateTimeInfo.Groups["MI"].Value, $DateTimeInfo.Groups["SE"].Value)
          }
          Else
          {
            $KeyTime = [DateTime]::MinValue
          }
          $CompNameInfo = [RegEx]::Match($PassObj.Properties["adspath"][0], ",CN=(?<Name>.{1,15}),OU=")
          If ($CompNameInfo.Success)
          {
            $Computer = $CompNameInfo.Groups["Name"].Value
          }
          Else
          {
            $Computer = "Unknown"
          }
          [PSCustomObject]@{ "ComputerName" = $Computer; "PasswordID" = (([Guid]$PassObj.Properties["msfve-recoveryguid"][0]).Guid); "Password" = ($PassObj.Properties["msfve-recoverypassword"][0]); "DateTime" = $KeyTime }
        }
      }
    }
    
    Write-Verbose -Message "Exit Function Get-MyBitlockerKey Process Block"
  }
}
#endregion function Get-MyBitlockerKey

#endregion ******* Active Directory Functions ********

#region ******* Database Functions ********

#region function Invoke-MySQLCommand
Function Invoke-MySQLCommand ()
{
  <#
    .SYNOPSIS
      Invokes SQL Query or Stored Procedure
    .DESCRIPTION
      Invokes SQL Query or Stored Procedure
    .PARAMETER SQLConnection
    .PARAMETER Command
    .PARAMETER StoredProcedure
    .PARAMETER SPValues
    .EXAMPLE
      $SQLData = Invoke-MySQLCommand -SQLConnection $DBCon -Command "Select * From TableName"
    .EXAMPLE
      $SQLData = Invoke-MySQLCommand -SQLConnection $DBCon -Command "StoreProcedureName" -SPValues @{ "ID" = 1; "Value" = "Some Value" }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "SQLQuery")]
  Param (
    [parameter(Mandatory = $True)]
    [System.Data.SqlClient.SqlConnection]$SQLConnection,
    [parameter(Mandatory = $True)]
    [String]$Command,
    [parameter(Mandatory = $True, ParameterSetName = "StoredProcedure")]
    [Switch]$StoredProcedure,
    [parameter(Mandatory = $False, ParameterSetName = "StoredProcedure")]
    [HashTable]$SPValues
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Create new SQL Command
  $SQLComand = [System.Data.SqlClient.SqlCommand]::New($Command, $SQLConnection)
  # Check if Calling a Stored Procedure
  If ($StoredProcedure.IsPresent)
  {
    # Set Comand Type
    $SQLComand.CommandType = [System.Data.CommandType]::StoredProcedure
    # Check if Parameters were passed for the Stored Procedure
    If ($PSBoundParameters.ContainsKey("SPValues"))
    {
      # Add Stored Procedure Paramaters
      ForEach ($SPValue In $SPValues.Keys)
      {
        [Void]$SQLComand.Parameters.Add($SPValue, $SPValues[$SPValue])
      }
    }
  }
  Else
  {
    # Set Comand Type
    $SQLComand.CommandType = [System.Data.CommandType]::Text
  }
  
  # Return SQL Data
  $SQLDataAdapter = [System.Data.SqlClient.SqlDataAdapter]::New($SQLComand)
  $SQLDataSet = [System.Data.DataSet]::New()
  [Void]$SQLDataAdapter.Fill($SQLDataSet)
  $SQLDataSet.Tables[0]
  
  # Dispose of Objects
  $SQLDataAdapter.Dispose()
  $SQLComand.Dispose()
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Invoke-MySQLCommand

#region function Open-MySQLConnection
Function Open-MySQLConnection()
{
  <#
    .SYNOPSIS
      Opens Connection to SQL Server Database
    .DESCRIPTION
      Opens Connection to SQL Server Database
    .PARAMETER ConnectionString
    .PARAMETER AccessToken
    .EXAMPLE
      $DBCon = Open-MySQLConnection -ConnectionString "Data Source=Server\Instance;Initial Catalog=Database;Trusted_Connection=yes"
    .EXAMPLE
      $DBCon = Open-MySQLConnection -ConnectionString "Data Source=Server\Instance;Initial Catalog=Database;User Id=UserName;Password=Password;"
    .EXAMPLE
      $DBCon = Open-MySQLConnection -ConnectionString "Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Authentication='Active Directory Password';"
    .EXAMPLE
      Import-Module -Name Az.Accounts
      $ConnectInfo = Connect-AzAccount
      $AccessToken = Get-AzAccessToken -ResourceUrl "https://database.windows.net"
      $DBCon = Open-MySQLConnection -AccessToken $AccessToken -ConnectionString "Data Source=DBInstanceName.database.windows.net;Initial Catalog=DBName;Connect Timeout=900"
      If ($DBCon.State -ne "Open")
      {
        Throw "Unable to Connect to SQL Server"
      }

    .NOTES
      24-12-11 Initial Relase
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ConnectionString,
    [String]$AccessToken
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Check if .Net Assembly is Loaded
  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Data.SqlClient.SqlConnection")).Type))
  {
    # Load .Net Assembly
    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Data")
  }
  
  Try
  {
    # Create New SQL Connection
    $DBCon = [System.Data.SqlClient.SqlConnection]::New($ConnectionString)
    # Check is Azure Access Token was Passed
    If ($PSBoundParameters.ContainsKey("AccessToken"))
    {
      # Set Azure Access Token
      $DBCon.AccessToken = $AccessToken
    }
    # Open SQL Connection
    $DBCon.Open()
    # Return SQL Connection
    $DBCon
  }
  Catch
  {
    # Return Failed to Open
    [PSObject]@{
      "State" = [System.Data.ConnectionState]::Closed
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Open-MySQLConnection

#region function Open-MyOracleConnection
function Open-MyOracleConnection()
{
  <#
    .SYNOPSIS
      Opens Connection to Oracle Server Database
    .DESCRIPTION
      Opens Connection to Oracle Server Database
    .PARAMETER ConnectionString
    .EXAMPLE
      Open-MyOracleConnection -ConnectionString <String>
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ConnectionString
  )
  Write-Verbose -Message "Enter Function Open-MyOracleConnection"

  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Data.OracleClient.OracleConnection")).Type))
  {
    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Data")
  }

  Try
  {
    $DBCon = [System.Data.OracleClient.OracleConnection]::New($ConnectionString)
    $DBCon.Open()
    $DBCon
  }
  Catch
  {
    [PSObject]@{ "State" = [System.Data.ConnectionState]::Closed }
  }

  Write-Verbose -Message "Exit Function Open-MyOracleConnection"
}
#endregion function Open-MyOracleConnection

#region function Invoke-MyOracleCommand
function Invoke-MyOracleCommand ()
{
  <#
    .SYNOPSIS
      Invokes Oracle Command or Stored Procedure
    .DESCRIPTION
      Invokes Oracle Command or Stored Procedure
    .PARAMETER OracleConnection
    .PARAMETER Command
    .PARAMETER StoredProcedure
    .PARAMETER SPValues
    .PARAMETER AsDataTable
    .EXAMPLE
      Open-MyOracleConnection -ConnectionString <String>
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Data.OracleClient.OracleConnection]$OracleConnection,
    [parameter(Mandatory = $True)]
    [String]$Command,
    [Switch]$StoredProcedure,
    [HashTable]$SPValues,
    [Switch]$AsDataTable
  )
  Write-Verbose -Message "Enter Function Invoke-MyOracleCommand"

  $OracleComand = [System.Data.OracleClient.OracleCommand]::New($Command, $OracleConnection)
  if ($StoredProcedure.IsPresent)
  {
    $OracleComand.CommandType = [System.Data.CommandType]::StoredProcedure
    if ($PSBoundParameters.ContainsKey("SPValues"))
    {
      foreach ($SPValue in $SPValues.Keys)
      {
        [Void]$OracleComand.Parameters.Add($SPValue, $SPValues[$SPValue])
      }
    }
  }
  else
  {
    $OracleComand.CommandType = [System.Data.CommandType]::Text
  }
  if ($AsDataTable.IsPresent)
  {
    $OracleDataAdapter = [System.Data.OracleClient.OracleDataAdapter]::New($OracleComand)
    $OracleDataSet = [System.Data.DataSet]::New()
    [Void]$OracleDataAdapter.Fill($OracleDataSet)
    $OracleDataSet.Tables[0]
  }
  else
  {
    ($TempDBReader = $OracleComand.ExecuteReader())
    $TempDBReader.Close()
  }

  Write-Verbose -Message "Exit Function Invoke-MyOracleCommand"
}
#endregion function Invoke-MyOracleCommand

#endregion ******* Database Functions ********

#region ******* Encrypt / Encode Data Functions ********

#region function Encode-MyData
function Encode-MyData()
{
  <#
    .SYNOPSIS
      Encode Base64 String Data
    .DESCRIPTION
      Encode Base64 String Data
    .PARAMETER Data
      Data to Compress
    .PARAMETER LineLength
      Max Line Length
    .EXAMPLE
      Encode-MyData -Data "String"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Data,
    [Int]$LineLength = 160
  )
  Write-Verbose -Message "Enter Function Encode-MyData"

  $MemoryStream = [System.IO.MemoryStream]::New()
  $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)
  $StreamWriter.Write($Data)
  $StreamWriter.Close()

  $Code = [System.Text.StringBuilder]::New()
  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineLength})(?=.)"))
  {
    [Void]$Code.AppendLine($Line)
  }

  $Code.ToString()
  $MemoryStream.Close()
  $MemoryStream = $Null
  $StreamWriter = $Null
  $Code = $Null
  $Line = $Null

  Write-Verbose -Message "Exit Function Encode-MyData"
}
#endregion function Encode-MyData

#region function Decode-MyData
function Decode-MyData()
{
  <#
    .SYNOPSIS
      Decode Base64 String Data
    .DESCRIPTION
      Decode Base64 String Data
    .PARAMETER Data
      Data to Decompress
    .EXAMPLE
      Decode-MyData -Data "String"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Data,
    [Switch]$AsString
  )
  Write-Verbose -Message "Enter Function Decode-MyData"

  $CompressedData = [System.Convert]::FromBase64String($Data)
  $MemoryStream = [System.IO.MemoryStream]::New()
  $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)
  [Void]$MemoryStream.Seek(0, 0)
  $StreamReader = [System.IO.StreamReader]::New($MemoryStream, [System.Text.Encoding]::UTF8)

  if ($AsString.IsPresent)
  {
    $StreamReader.ReadToEnd()
  }
  else
  {
    $ArrayList = [System.Collections.ArrayList]::New()
    $Buffer = [System.Char[]]::New(4096)
    While ($StreamReader.EndOfStream -eq $False)
    {
      $Bytes = $StreamReader.Read($Buffer, 0, 4096)
      if ($Bytes)
      {
        $ArrayList.AddRange($Buffer[0 .. ($Bytes - 1)])
      }
    }
    $ArrayList
    $ArrayList.Clear()
  }

  $StreamReader.Close()
  $MemoryStream.Close()
  $MemoryStream = $Null
  $StreamReader = $Null
  $CompressedData = $Null
  $ArrayList = $Null
  $Buffer = $Null
  $Bytes = $Null

  Write-Verbose -Message "Exit Function Decode-MyData"
}
#endregion function Decode-MyData

#region Function Encrypt-MySensitiveData
Function Encrypt-MySensitiveData
{
  <#
    .SYNOPSIS
      Encrypts / Decrypts Text String Data
    .DESCRIPTION
      Encrypts / Decrypts Text String Data
    .PARAMETER String
      Plain Text or Encrypted String
    .PARAMETER PassPhrase
      Pass Phrase to Encrypt / Decrypt Data
    .PARAMETER Salt
      Salt to Encrypt / Decrypt Data
    .PARAMETER HashAlgorithm
      Hash Algorithm to Encrypt / Decrypt Data
    .PARAMETER CipherMode
      Cipher Mode to Encrypt / Decrypt Data
    .PARAMETER PaddingMode
      Padding Mode to Encrypt / Decrypt Data
    .PARAMETER Decrypt
      Switch to Decrypt Data
    .EXAMPLE
      $EncryptedData = Encrypt-PMSensitiveData -String $String -PassPhrase $PassPhrase -Salt $Pepper
    .EXAMPLE
      $DecryptedData = Encrypt-PMSensitiveData -String $String -PassPhrase $PassPhrase -Salt $Pepper -Decrypt
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$String,
    [parameter(Mandatory = $True)]
    [String]$PassPhrase = "PassPhrase",
    [parameter(Mandatory = $False)]
    [String]$Salt = "Pepper",
    [System.Security.Cryptography.HashAlgorithmName]$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,
    [System.Security.Cryptography.CipherMode]$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,
    [System.Security.Cryptography.PaddingMode]$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,
    [Switch]$Decrypt
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Create Cryptography AES Object
  $Aes = [System.Security.Cryptography.Aes]::Create()
  $Aes.Mode = $CipherMode
  $Aes.Padding = $PaddingMode
  # Salt Needs to be at least 8 Characters
  $SaltBytes = [System.Text.Encoding]::UTF8.GetBytes($Salt.PadRight(8, "*"))
  $Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New($PassPhrase, $SaltBytes, 8, $HashAlgorithm).GetBytes($Aes.Key.Length)

  if ($Decrypt.IsPresent)
  {
    # Decrypt Encrypted Data
    $DecodeBytes = [System.Convert]::FromBase64String($String)
    $Aes.IV = $DecodeBytes[0..15]
    $Decryptor = $Aes.CreateDecryptor()
    [System.Text.Encoding]::UTF8.GetString(($Decryptor.TransformFinalBlock($DecodeBytes, 16, ($DecodeBytes.Length - 16))))
  }
  else
  {
    # Encrypt String Data
    $EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes($String)
    $Encryptor = $Aes.CreateEncryptor()
    $EncryptedBytes = [System.Collections.ArrayList]::New($Aes.IV)
    $EncryptedBytes.AddRange($Encryptor.TransformFinalBlock($EncodeBytes, 0, $EncodeBytes.Length))
    [System.Convert]::ToBase64String($EncryptedBytes)
    $EncryptedBytes.Clear()
  }

  $Aes.Dispose()

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion Function Encrypt-MySensitiveData

#region function Encrypt-WithCert
Function Encrypt-WithCert ()
{
  <#
    .SYNOPSIS
      Encrypts Text Data used Info from Cert
    .DESCRIPTION
      Encrypts Text Data used Info from Cert
    .PARAMETER CertKey
    .PARAMETER TextString
    .PARAMETER Salt
    .PARAMETER Universal
    .PARAMETER Decrypt
    .EXAMPLE
      # Encrypt with Local Salt
      $EncryptedText = Encrypt-WithCert -CertKey $CeryKey -Salt $Salt -TextString $TextString
    .EXAMPLE
      # Encrypt with Universal Salt
      $EncryptedText = Encrypt-WithCert -CertKey $CeryKey -Salt $Salt -Universal -TextString $TextString
    .EXAMPLE
      # Encrypt with No Salt
      $EncryptedText = Encrypt-WithCert -CertKey $CeryKey -TextString $TextString
    .NOTES
      Original Function By Ken Sweet

      2024-02-14 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "NoSalt")]
  Param (
    [parameter(Mandatory = $True)]
    [String]$CertKey,
    [parameter(Mandatory = $True)]
    [String]$TextString,
    [parameter(Mandatory = $True, ParameterSetName = "WithSalt")]
    [ValidateRange(0, 3)]
    [Int]$Salt,
    [parameter(Mandatory = $False, ParameterSetName = "WithSalt")]
    [Switch]$Universal,
    [Switch]$Decrypt
  )
  Write-Verbose -Message "Enter Function Encrypt-WithCert"
  
  $Cert = Get-ChildItem -Path "Cert:\LocalMachine\Root\$($CertKey)"
  If ($PSCmdlet.ParameterSetName -eq "WithSalt")
  {
    If ($Universal.IsPresent)
    {
      $TmpNotBefore = $Cert.NotBefore.ToUniversalTime()
      $TmpNotAfter = $Cert.NotAfter.ToUniversalTime()
    }
    Else
    {
      $TmpNotBefore = $Cert.NotBefore
      $TmpNotAfter = $Cert.NotAfter
    }
    $SaltInit = @($TmpNotBefore.ToString("yyyyMMddhhmmss"), $TmpNotBefore.ToString("hhmmssyyyyMMdd"), $TmpNotAfter.ToString("yyyyMMddhhmmss"), $TmpNotAfter.ToString("hhmmssyyyyMMdd"))[$Salt]
  }
  Else
  {
    $SaltInit = $Cert.Subject
  }
  Encrypt-MySensitiveData -PassPhrase ($Cert.SerialNumber) -Salt $SaltInit -String $TextString -Decrypt:($Decrypt.IsPresent)
  
  Write-Verbose -Message "Exit Function Encrypt-WithCert"
}
#endregion function Encrypt-WithCert

#region function Encrypt-MyTextString
function Encrypt-MyTextString()
{
  <#
    .SYNOPSIS
      Encrypts a Password for use in a Script
    .DESCRIPTION
      Encrypts a Password for use in a Script
    .PARAMETER TextString
      Password to be Encrypted
    .PARAMETER ProtectionScope
      Who can Decrypt
        Currentuser = = Specific User
        LocalMachine = = Any User
    .PARAMETER EncryptKey
      Option Extra Encryption Security
    .PARAMETER Decrypt
    .EXAMPLE
      Encrypt-MyTextString -Password "Password"
    .NOTES
      Original Function By ken.sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$TextString,
    [ValidateSet("LocalMachine", "CurrentUser")]
    [String]$ProtectionScope = "CurrentUser",
    [String]$EncryptKey = $Null,
    [Switch]$Decrypt
  )
  Write-Verbose -Message "Enter Function Encrypt-MyTextString"

  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Security.Cryptography.ProtectedData")).Type))
  {
    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Security")
  }

  if ($PSBoundParameters.ContainsKey("EncryptKey"))
  {
    $OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes($EncryptKey)
  }
  else
  {
    $OptionalEntropy = $Null
  }

  if ($Decrypt.IsPresent)
  {
    $EncryptedData = [System.Convert]::FromBase64String($TextString)
    $DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect($EncryptedData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))
    [System.Text.Encoding]::ASCII.GetString($DecryptedData)
  }
  else
  {
    $TempData = [System.Text.Encoding]::ASCII.GetBytes($TextString)
    $EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect($TempData, $OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]$ProtectionScope))
    [System.Convert]::ToBase64String($EncryptedData)
  }

  Write-Verbose -Message "Exit Function Encrypt-MyTextString"
}
#endregion function Encrypt-MyTextString

#region function Decode-MySecureString
function Decode-MySecureString ()
{
  <#
    .SYNOPSIS
      Decodes a SecureString
    .DESCRIPTION
      Decodes a SecureString
    .PARAMETER SecureString
    .EXAMPLE
      Decode-MySecureString -SecureString [<String>]
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Security.SecureString]$SecureString
  )
  Write-Verbose -Message "Enter Function Get-EnvironmentVariable"

  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString))

  Write-Verbose -Message "Exit Function Get-EnvironmentVariable"
}
#endregion function Decode-MySecureString

#endregion ******* Encrypt / Encode Data Functions ********

#region ******* Logging / Events Functions ********

#region function Write-MyLogFile
function Write-MyLogFile()
{
  <#
    .SYNOPSIS
    .DESCRIPTION
    .PARAMETER LogPath
    .PARAMETER LogFolder
    .PARAMETER LogName
    .PARAMETER Severity
    .PARAMETER Message
    .PARAMETER Context
    .PARAMETER Thread
    .PARAMETER StackInfo
    .PARAMETER MaxSize
    .PARAMETER OutHost
    .PARAMETER ColorText
    .PARAMETER ColorInfo
    .PARAMETER ColorGood
    .PARAMETER ColorWarn
    .PARAMETER ColorError
    .EXAMPLE
      Write-MyLogFile -LogFolder "MyLogFolder" -Message "This is My Info Log File Message"
      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Info" -Message "This is My Info Log File Message"
    .EXAMPLE
      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Warning" -Message "This is My Warning Log File Message"
    .EXAMPLE
      Write-MyLogFile -LogFolder "MyLogFolder" -Severity "Error" -Message "This is My Error Log File Message"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $False, ParameterSetName = "LogFolder")]
    [String]$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),
    [String]$LogName = "$([System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName)).log",
    [parameter(Mandatory = $False, ParameterSetName = "SystemLog")]
    [Switch]$SystemLog,
    [ValidateSet("Text", "Info", "Good", "Warning", "Error")]
    [String]$Severity = "Text",
    [parameter(Mandatory = $True)]
    [String]$Message,
    [String]$Component = "",
    [String]$Context = "",
    [Int]$Thread = $PID,
    [ValidateRange(0, 16777216)]
    [Int]$MaxSize = 52428800,
    [Switch]$OutHost,
    [ConsoleColor]$ColorText = [ConsoleColor]::Gray,
    [ConsoleColor]$ColorInfo = [ConsoleColor]::DarkCyan,
    [ConsoleColor]$ColorGood = [ConsoleColor]::DarkGreen,
    [ConsoleColor]$ColorWarn = [ConsoleColor]::DarkYellow,
    [ConsoleColor]$ColorError = [ConsoleColor]::DarkRed
  )
  Write-Verbose -Message "Enter Function Write-MyLogFile"
  
  switch ($PSCmdlet.ParameterSetName)
  {
    "LogFolder"
    {
      $LogPath = $LogFolder
      break
    }
    "SystemLog"
    {
      $LogPath = "$($ENV:SystemRoot)\Logs\$($LogFolder)"
      break
    }
    Default
    {
      $LogPath = "$($PSScriptRoot)\Logs"
      break
    }
  }
  
  if (-not [System.IO.Directory]::Exists($LogPath))
  {
    [Void][System.IO.Directory]::CreateDirectory($LogPath)
  }
  $TempFile = "$($LogPath)\$LogName"
  
  switch ($Severity)
  {
    "Text"
    {
      $TempSeverity = 1
      $HostColor = $ColorText
      break
    }
    "Info"
    {
      $TempSeverity = 1
      $HostColor = $ColorInfo
      break
    }
    "Good"
    {
      $TempSeverity = 1
      $HostColor = $ColorGood
      break
    }
    "Warning"
    {
      $TempSeverity = 2
      $HostColor = $ColorWarn
      break
    }
    "Error"
    {
      $TempSeverity = 3
      $HostColor = $ColorError
      break
    }
  }
  
  $TempDate = [DateTime]::Now
  
  if (-not $PSBoundParameters.ContainsKey("Component"))
  {
    $TempSource = [System.IO.Path]::GetFileName($MyInvocation.ScriptName)
    $Component = [System.IO.Path]::GetFileNameWithoutExtension($TempSource)
  }
  
  if ([System.IO.File]::Exists($TempFile) -and $MaxSize -gt 0)
  {
    if (([System.IO.FileInfo]$TempFile).Length -gt $MaxSize)
    {
      $TempBackup = [System.IO.Path]::ChangeExtension($TempFile, "lo_")
      if ([System.IO.File]::Exists($TempBackup))
      {
        Remove-Item -Force -Path $TempBackup
      }
      Rename-Item -Force -Path $TempFile -NewName ([System.IO.Path]::GetFileName($TempBackup))
    }
  }
  
  if ($OutHost.IsPresent)
  {
    Write-Host -Object "$($TempDate.ToString("yy-MM-dd HH:mm:ss")) - $($Message)" -ForegroundColor $HostColor
  }
  
  Add-Content -Encoding Ascii -Path $TempFile -Value ("<![LOG[{0}]LOG]!><time=`"{1}`" date=`"{2}`" component=`"{3}`" context=`"{4}`" type=`"{5}`" thread=`"{6}`" file=`"{7}`">" -f $Message, $($TempDate.ToString("HH:mm:ss.fff+000")), $($TempDate.ToString("MM-dd-yyyy")), $Component, $Context, $TempSeverity, $Thread, $TempSource)
  
  Write-Verbose -Message "Exit Function Write-MyLogFile"
}
#endregion function Write-MyLogFile

#region function Write-MyPipelineLogFile
function Write-MyPipelineLogFile()
{
  <#
    .SYNOPSIS
    .DESCRIPTION
    .PARAMETER Severity
    .PARAMETER Message
    .EXAMPLE
      Write-MyPipelineLogFile -Message "This is My Info Log File Message"
      Write-MyPipelineLogFile -Severity "Info" -Message "This is My Info Log File Message"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [ValidateSet("Info", "Warning", "Error")]
    [String]$Severity = "Info",
    [String]$Message = "",
    [ConsoleColor]$ColorText = [ConsoleColor]::Gray,
    [ConsoleColor]$ColorInfo = [ConsoleColor]::DarkCyan,
    [ConsoleColor]$ColorGood = [ConsoleColor]::DarkGreen,
    [ConsoleColor]$ColorWarn = [ConsoleColor]::DarkYellow,
    [ConsoleColor]$ColorError = [ConsoleColor]::DarkRed

  )
  Write-Verbose -Message "Enter Function Write-MyPipelineLogFile"

  Switch ($Severity)
  {
    "Text" {
      $HostColor = $ColorText
      break
    }
    "Info" {
      $HostColor = $ColorInfo
      break
    }
    "Good" {
      $HostColor = $ColorGood
      break
    }
    "Warning" {
      $HostColor = $ColorWarn
      Break
    }
    "Error" {
      $HostColor = $ColorError
      Break
    }
  }

  Write-Host -object $Message -ForegroundColor $HostColor

  Write-Verbose -Message "Exit Function Write-MyPipelineLogFile"
}
#endregion function Write-MyPipelineLogFile

#region Create KPI Event Log
Try
{
  # Test if Event Log Exists
  [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)
  if (-not [MyConfig]::KPILogExists)
  {
    # Write First Log Entry
    $EventMessage = "$([MyConfig]::ScriptName)|$([MyConfig]::ScriptVersion)|Event Log Refreshed on $([DateTime]::Now.ToShortDateString()) at $([DateTime]::Now.ToShortTimeString())"
    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source "Utility" -EventId 0 -Category 0 -Message $EventMessage -ErrorAction SilentlyContinue
    
    # Test if Event Log Exists
    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)
  }
}
Catch
{
  # Check if user has Local Admin Rights
  if (([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
  {
    # Create Event Log
    New-EventLog -LogName ([MyConfig]::KPILogName) -Source "Utility", "Automation" -ErrorAction SilentlyContinue
    # Write First Log Entry
    $EventMessage = "$([MyConfig]::ScriptName)|$([MyConfig]::ScriptVersion)|Event Log Created on $([DateTime]::Now.ToShortDateString()) at $([DateTime]::Now.ToShortTimeString())"
    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source "Utility" -EventId 0 -Category 0 -Message $EventMessage -ErrorAction SilentlyContinue
    
    # Test if Event Log Exists
    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)
  }
  else
  {
    # Test if Event Log Exists
    [MyConfig]::KPILogExists = $False
  }
}
#endregion Create KPI Event Log

#region function Write-KPIEvent
function Write-KPIEvent ()
{
  <#
    .SYNOPSIS
      Writes an Event to the PSJH KPI Event Log
    .DESCRIPTION
      Writes an Event to the PSJH KPI Event Log
    .PARAMETER ScriptName
    .PARAMETER ScriptVersion
    .PARAMETER LogName
    .PARAMETER Source
    .PARAMETER EntryType
    .PARAMETER EventID
    .PARAMETER Category
    .PARAMETER Message
    .EXAMPLE
      Write-KPIEvent -Source $Source -EntryType $EntryType -EventID $EventID -Category $Category -Message $Message
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$ScriptName = [MyConfig]::ScriptName,
    [String]$ScriptVersion = [MyConfig]::ScriptVersion,
    [String]$LogName = [MyConfig]::KPILogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("Utility", "Automation")]
    [String]$Source,
    [parameter(Mandatory = $True)]
    [ValidateSet("Information", "Warning", "Error")]
    [String]$EntryType = "Information",
    [parameter(Mandatory = $True)]
    [ValidateRange(0, 65535)]
    [Int]$EventID,
    [ValidateRange(0, 32767)]
    [Int]$Category = 0,
    [parameter(Mandatory = $True)]
    [String]$Message
  )
  Write-Verbose -Message "Enter Function Write-KPIEvent"
  
  if ([MyConfig]::KPILogExists)
  {
    Write-EventLog -LogName $LogName -Source $Source -EntryType $EntryType -EventId $EventID -Category $Category -Message "$($ScriptName)|$($ScriptVersion)|$($Message)"
  }
  
  Write-Verbose -Message "Exit Function Write-KPIEvent"
}
#endregion function Write-KPIEvent

#endregion ******* Logging / Events Functions ********

#region ******* Generic / General Functions ********

#region function Invoke-MyPause
function Invoke-MyPause
{
  <#
    .SYNOPSIS
      Pause Script for Specified Number of Seconds
    .DESCRIPTION
      Pause Script for Specified Number of Seconds
    .PARAMETER Seconds
    .PARAMETER ScriptBlock
    .EXAMPLE
      Invoke-MyPause [-Seconds $Seconds]
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Int]$Seconds = 60,
    [ScriptBlock]$ScriptBlock = { $True }
  )
  Write-Verbose -Message "Enter Function Invoke-MyPause"
  
  $TmpPause = [System.Diagnostics.Stopwatch]::StartNew()
  Do
  {
    [System.Threading.Thread]::Sleep(10)
    $WaitCheck = $ScriptBlock.Invoke()
    [System.Windows.Forms.Application]::DoEvents()
  }
  while (($TmpPause.Elapsed.TotalSeconds -lt $Seconds) -and $WaitCheck)
  $TmpPause.Stop()
  
  Write-Verbose -Message "Exit Function Invoke-MyPause"
}
#endregion function Invoke-MyPause

#region function Set-MyClipboard
Function Set-MyClipboard()
{
  <#
    .SYNOPSIS
      Copies Object Data to the ClipBoard
    .DESCRIPTION
      Copies Object Data to the ClipBoard
    .PARAMETER Items
    .PARAMETER Title
    .PARAMETER TitleFore
    .PARAMETER TitleBack
    .PARAMETER Property
    .PARAMETER PropertyFore
    .PARAMETER PropertyBack
    .PARAMETER RowFore
    .PARAMETER RowEvenBack
    .PARAMETER RowOddBack
    .EXAMPLE
      Set-MyClipBoard -Items $Items -Title "This is My Title" -Property "Property1", "Property2", "Property3"
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "Office")]
  Param (
    [parameter(Mandatory = $True, ValueFromPipeline = $True)]
    [Object[]]$Items,
    [String]$Title = "My Copied Data from PowerShell",
    [String]$TitleFore = "Black",
    [String]$TitleBack = "LightSteelBlue",
    [parameter(Mandatory = $True)]
    [String[]]$Properties,
    [String]$PropertyFore = "Black",
    [String]$PropertyBack = "PowderBlue",
    [String]$RowFore = "Black",
    [String]$RowEvenBack = "White",
    [String]$RowOddBack = "Gainsboro"
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Set-MyClipboard Begin Block"
    
    # Init StringBuilding
    $HTMLStringBuilder = [System.Text.StringBuilder]::New()
    
    # Start HTML ClipBaord Data
    [Void]$HTMLStringBuilder.Append("Version:1.0`r`nStartHTML:000START`r`nEndHTML:00000END`r`nStartFragment:00FSTART`r`nEndFragment:0000FEND`r`n")
    [Void]$HTMLStringBuilder.Replace("000START", ("{0:X8}" -f $HTMLStringBuilder.Length))
    [Void]$HTMLStringBuilder.Append("<html><head><title>My Copied Data</title></head><body><!--StartFragment-->")
    [Void]$HTMLStringBuilder.Replace("00FSTART", ("{0:X8}" -f $HTMLStringBuilder.Length))
    
    # Table Style
    [Void]$HTMLStringBuilder.Append("<style>`r`n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($TitleFore); background: $($TitleBack);}`r`n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: $($PropertyFore); background: $($PropertyBack);}`r`n.Row0 {border: 1px solid black; border-collapse: collapse;color: $($RowFore); background: $($RowEvenBack);}`r`n.Row1 {border: 1px solid black; border-collapse: collapse; color: $($RowFore); background: $($RowOddBack);}`r`n</style>")
    
    # Start Build Table / Set Title
    [Void]$HTMLStringBuilder.Append("<table><tr><th class=Title aligh=center colspan=$($Properties.Count)>&nbsp;$($Title)&nbsp;</th></tr>")
    
    # Add Table Column / Property Names
    [Void]$HTMLStringBuilder.Append("<tr>$(($Properties | ForEach-Object -Process { "<td class=Property aligh=center>&nbsp;$($PSItem)&nbsp;</td>" }) -join '')</tr>")
    
    # Start Row Count
    $TmpRowCount = 0
    
    $TmpItemList = [System.Collections.ArrayList]::New()
    
    Write-Verbose -Message "Exit Function Set-MyClipboard Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Set-MyClipboard Process Block"
    
    ForEach ($Item In $Items)
    {
      [Void]$HTMLStringBuilder.Append("<tr>$(((($Properties | ForEach-Object -Process { $Item.($PSItem) }) | ForEach-Object -Process { "<td class=Row$($TmpRowCount)>&nbsp;$($PSItem)&nbsp;</td>" }) -join ''))</tr>")
      [Void]$TmpItemList.Add(($Item | Select-Object -Property $Properties))
      $TmpRowCount = ($TmpRowCount + 1) % 2
    }
    
    Write-Verbose -Message "Exit Function Set-MyClipboard Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Set-MyClipboard End Block"
    
    # Close HTML Table
    [Void]$HTMLStringBuilder.Append("</table><br><br>")
    
    # Set End Clipboard Values
    [Void]$HTMLStringBuilder.Replace("0000FEND", ("{0:X8}" -f $HTMLStringBuilder.Length))
    [Void]$HTMLStringBuilder.Append("<!--EndFragment--></body></html>")
    [Void]$HTMLStringBuilder.Replace("00000END", ("{0:X8}" -f $HTMLStringBuilder.Length))
    
    [System.Windows.Forms.Clipboard]::Clear()
    $DataObject = [System.Windows.Forms.DataObject]::New("Text", ($TmpItemList | Select-Object -Property $Properties | ConvertTo-Csv -NoTypeInformation | Out-String))
    $DataObject.SetData("HTML Format", $HTMLStringBuilder.ToString())
    [System.Windows.Forms.Clipboard]::SetDataObject($DataObject)
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Function Set-MyClipboard End Block"
  }
}
#endregion function Set-MyClipboard

#region function Send-MyEMail
function Send-MyEMail()
{
  <#
    .SYNOPSIS
      Sends an E-mail
    .DESCRIPTION
      Sends an E-mail
    .PARAMETER SMTPServer
    .PARAMETER SMTPPort
    .PARAMETER To
    .PARAMETER From
    .PARAMETER Subject
    .PARAMETER Body
    .PARAMETER MsgFile
    .PARAMETER IsHTML
    .PARAMETER CC
    .PARAMETER BCC
    .PARAMETER Attachments
    .PARAMETER Priority
    .EXAMPLE
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$SMTPServer = [MyConfig]::SMTPServer,
    [Int]$SMTPPort = [MyConfig]::SMTPPort,
    [parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, HelpMessage = "Enter To")]
    [System.Net.Mail.MailAddress[]]$To,
    [parameter(Mandatory = $True, HelpMessage = "Enter From")]
    [System.Net.Mail.MailAddress]$From,
    [parameter(Mandatory = $True, HelpMessage = "Enter Subject")]
    [String]$Subject,
    [parameter(Mandatory = $True, HelpMessage = "Enter Message Text")]
    [String]$Body,
    [Switch]$IsHTML,
    [System.Net.Mail.MailAddress[]]$CC,
    [System.Net.Mail.MailAddress[]]$BCC,
    [System.Net.Mail.Attachment[]]$Attachment,
    [ValidateSet("Low", "Normal", "High")]
    [System.Net.Mail.MailPriority]$Priority = "Normal"
  )
  Begin 
  {
    Write-Verbose -Message "Enter Function Send-MyEMail Begin"

    $MyMessage = [System.Net.Mail.MailMessage]::New()
    $MyMessage.From = $From
    $MyMessage.Subject = $Subject
    $MyMessage.IsBodyHtml = $IsHTML
    $MyMessage.Priority = $Priority

    if ($PSBoundParameters.ContainsKey("CC"))
    {
      foreach ($SendCC in $CC) 
      {
        $MyMessage.CC.Add($SendCC)
      }
    }

    if ($PSBoundParameters.ContainsKey("BCC"))
    {
      foreach ($SendBCC in $BCC) 
      {
        $MyMessage.BCC.Add($SendBCC)
      }
    }

    if ([System.IO.File]::Exists($Body)) 
    {
      $MyMessage.Body = $([System.IO.File]::ReadAllText($Body))
    }
    else
    {
      $MyMessage.Body = $Body
    }

    if ($PSBoundParameters.ContainsKey("Attachment"))
    {
      foreach ($AttachedFile in $Attachment) 
      {
        $MyMessage.Attachments.Add($AttachedFile)
      }
    }

    Write-Verbose -Message "Exit Function Send-MyEMail Begin"
  }
  Process 
  {
    Write-Verbose -Message "Enter Function Send-MyEMail Process"

    $MyMessage.To.Clear()
    foreach ($SendTo in $To) 
    {
      $MyMessage.To.Add($SendTo)
    }

    $SMTPClient = [System.Net.Mail.SmtpClient]::New($SMTPServer, $SMTPPort)
    $SMTPClient.Send($MyMessage)

    Write-Verbose -Message "Exit Function Send-MyEMail Process"
  }
  End 
  {
    Write-Verbose -Message "Enter Function Send-MyEMail End"
    Write-Verbose -Message "Exit Function Send-MyEMail End"
  }
}
#endregion function Send-MyEMail

#region function Show-MyWebReport
function Show-MyWebReport
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Show-MyWebReport -Value "String"
    .NOTES
      Original Function By Ken Sweet

      10/5/2021 - Initial Release
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ReportURL
  )
  Write-Verbose -Message "Enter Function Show-MyWebReport"

  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))
  {
    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))
    {
      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList "--app=`"$($ReportURL)`""
    }
  }
  else
  {
    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList "--app=`"$($ReportURL)`""
  }

  Write-Verbose -Message "Exit Function Show-MyWebReport"
}
#endregion function Show-MyWebReport

#region class MyConCommand
class MyConCommand
{
  [Int]$ExitCode
  [String]$OutputTxt
  [String]$ErrorMsg
  
  MyConCommand ([Int]$ExitCode, [String]$OutputTxt, [String]$ErrorMsg)
  {
    $This.ExitCode = $ExitCode
    $This.OutputTxt = $OutputTxt
    $This.ErrorMsg = $ErrorMsg
  }
}
#endregion class MyConCommand

#region function Invoke-MyConCommand
function Invoke-MyConCommand ()
{
  <#
    .SYNOPSIS
      Invokes a Console Command and Returns the Exit Code
    .DESCRIPTION
      Invokes a Console Command and Returns the Exit Code
    .PARAMETER Command
      Command to be Executed
    .PARAMETER Parameters
      Command line Parameters
    .EXAMPLE
      Invoke-MyConCommand -Command "C:\Windows\System32\cmd.exe" -Parameters "/c Exit 1"
    .NOTES
      Original Function By Ken Sweet
      
      09/19/2023 - Initial Release
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Command,
    [String]$Parameters = $Null
  )
  Write-Verbose -Message "Enter Function Invoke-MyConCommand"
  
  if ([System.IO.File]::Exists($Command))
  {
    $PSI = [System.Diagnostics.ProcessStartInfo]::New($Command, $Parameters)
    $PSI.UseShellExecute = $False
    $PSI.RedirectStandardError = $True
    $PSI.RedirectStandardOutput = $True
    Try
    {
      $Out = [System.Diagnostics.Process]::Start($PSI)
      $Out.WaitForExit()
      [MyConCommand]::New($Out.ExitCode, $Out.StandardOutput.ReadToEnd(), $Out.StandardError.ReadToEnd())
    }
    Catch
    {
      [MyConCommand]::New(-2, $Null, $Error[0].Message)
    }
  }
  else
  {
    [MyConCommand]::New(-1, $Null, "Command was not Found")
  }
  
  Write-Verbose -Message "Exit Function Invoke-MyConCommand"
}
#endregion function Invoke-MyConCommand

#region function Test-MyClassLoaded
function Test-MyClassLoaded()
{
  <#
    .SYNOPSIS
      Test if Custom Class is Loaded
    .DESCRIPTION
      Test if Custom Class is Loaded
    .PARAMETER Name
      Name of Custom Class
    .EXAMPLE
      $IsLoaded = Test-MyClassLoaded -Name "CustomClass"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "Default")]
    [String]$Name
  )
  Write-Verbose -Message "Enter Function Test-MyClassLoaded"

  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New($Name)).Type))

  Write-Verbose -Message "Exit Function Test-MyClassLoaded"
}
#endregion function Test-MyClassLoaded

#region function New-MyComObject
function New-MyComObject()
{
  <#
    .SYNOPSIS
      Creates Local and Remote COMObjects
    .DESCRIPTION
      Creates Local and Remote COMObjects
    .PARAMETER ComputerName
    .PARAMETER ComObject
    .EXAMPLE
      New-MyComObject -ComObject <String>
    .EXAMPLE
      New-MyComObject -ComputerName <String> -ComObject <String>
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $True)]
    [String]$COMObject
  )
  Write-Verbose -Message "Enter Function New-MyComObject"

  [Activator]::CreateInstance([Type]::GetTypeFromProgID($COMObject, $ComputerName))

  Write-Verbose -Message "Exit Function New-MyComObject"
}
#endregion function New-MyComObject

#region function ConvertTo-MyIconImage
function ConvertTo-MyIconImage()
{
  <#
    .SYNOPSIS
      Convert Base 64 Encoded Imagesback to Icon / Image
    .DESCRIPTION
      Convert Base 64 Encoded Imagesback to Icon / Image
    .PARAMETER EncodedImage
    .PARAMETER Image
    .EXAMPLE
      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage
    .EXAMPLE
      $NewItem = ConvertTo-MyIconImage -EncodedImage $EncodedImage -Image
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$EncodedImage,
    [Switch]$Image
  )
  Write-Verbose -Message "Enter Function ConvertTo-MyIconImage"

  if ($Image.IsPresent)
  {
    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))
  }
  else
  {
    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodedImage)))
  }

  Write-Verbose -Message "Exit Function ConvertTo-MyIconImage"
}
#endregion function ConvertTo-MyIconImage

#region function Send-MyTextMessage
function Send-MyTextMessage ()
{
  <#
    .SYNOPSIS
      Send Text Message to Remote or Local Computer or IP Address
    .DESCRIPTION
      Send Text Message to Remote or Local Computer or IP Address
    .PARAMETER ComputerName
    .PARAMETER IPAddress
      255.255.255.255 = Broadcast
    .PARAMETER Message
    .PARAMETER Port
    .EXAMPLE
      Send-MyTextMessage -Mesage [<String>]
    .NOTES
      Original function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "IPAddress")]
  param (
    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]
    [String]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]
    [System.Net.IPAddress]$IPAddress = "127.0.0.1",
    [parameter(Mandatory = $False)]
    [String]$Message = "This is My Message",
    [int]$Port = 2500
  )
  Write-Verbose -Message "Enter function Send-MyTextMessage"

  if ($PSCmdlet.ParameterSetName -eq "IPAddress")
  {
    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)
  }
  else
  {
    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)
  }
  $MessageBytes = [Text.Encoding]::ASCII.GetBytes("$($Message)")
  $UDPClient = [System.Net.Sockets.UdpClient]::New()
  $UDPClient.Send($MessageBytes, $MessageBytes.Length, $RemoteClient)
  $UDPClient.Close()
  $UDPClient.Dispose()

  Write-Verbose -Message "Exit function Send-MyTextMessage"
}
#endregion function Send-MyTextMessage

#region function Listen-MyTextMessage
function Listen-MyTextMessage ()
{
  <#
    .SYNOPSIS
      Listen for Text Message from Remote or Local Computer
    .DESCRIPTION
      Listen for Text Message from Remote or Local Computer
    .PARAMETER ComputerName
    .PARAMETER IPAddress
      0.0.0.0 = Any
    .PARAMETER Port
    .EXAMPLE
      Listen-MyTextMessage
    .NOTES
      Original function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "IPAddress")]
  param (
    [parameter(Mandatory = $False, ParameterSetName = "ComputerName")]
    [String]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $False, ParameterSetName = "IPAddress")]
    [System.Net.IPAddress]$IPAddress = "127.0.0.1",
    [int]$Port = 2500
  )
  Write-Verbose -Message "Enter function Listen-MyTextMessage"

  if ($PSCmdlet.ParameterSetName -eq "IPAddress")
  {
    $RemoteClient = [System.Net.IPEndPoint]::New($IPAddress, $Port)
  }
  else
  {
    $RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName($ComputerName)).AddressList[0]), $Port)
  }
  $UDPClient = [System.Net.Sockets.UdpClient]::New($Port)
  Do
  {
    $TempRemoteClient = $RemoteClient
    $Message = $UDPClient.Receive([ref]$TempRemoteClient)
    $DecodedMessage = [Text.Encoding]::ASCII.GetString($Message)
    Write-Host -Object  "Message From: $($TempRemoteClient.Address) - $($DecodedMessage)"
  } While ($True -and ($DecodedMessage -ne "Exit"))

  Write-Verbose -Message "Exit function Listen-MyTextMessage"
}
#endregion function Listen-MyTextMessage

#region ******** class TestMyWorkstation ********
class TestMyWorkstation
{
  [String]$ComputerName = [Environment]::MachineName
  [String]$FQDN = [Environment]::MachineName
  [Bool]$Found = $False
  [String]$UserName = ""
  [String]$Domain = ""
  [Bool]$DomainMember = $False
  [int]$ProductType = 0
  [String]$Manufacturer = ""
  [String]$Model = ""
  [Bool]$IsMobile = $False
  [String]$SerialNumber = ""
  [Long]$Memory = 0
  [String]$OperatingSystem = ""
  [String]$BuildNumber = ""
  [String]$Version = ""
  [String]$ServicePack = ""
  [String]$Architecture = ""
  [Bool]$Is64Bit = $False;
  [DateTime]$LocalDateTime = [DateTime]::MinValue
  [DateTime]$InstallDate = [DateTime]::MinValue
  [DateTime]$LastBootUpTime = [DateTime]::MinValue
  [String]$IPAddress = ""
  [String]$Status = "Off-Line"
  [DateTime]$StartTime = [DateTime]::Now
  [DateTime]$EndTime = [DateTime]::Now

  TestMyWorkstation ([String]$IPAddress)
  {
    $This.IPAddress = $IPAddress
    $This.Status = "On-Line"
  }

  [Void] AddComputerSystem ([String]$TestName, [String]$ComputerName, [Bool]$DomainMember, [String]$Domain, [String]$Manufacturer, [String]$Model, [String]$UserName, [Long]$Memory)
  {
    $This.ComputerName = "$($ComputerName)".ToLower()
    $This.DomainMember = $DomainMember
    $This.Domain = "$($Domain)".ToLower()
    if ($DomainMember)
    {
      $This.FQDN = "$($ComputerName).$($Domain)".ToLower()
    }
    $This.Manufacturer = $Manufacturer
    $This.Model = $Model
    $This.UserName = $UserName
    $This.Memory = $Memory
    $This.Found = ($ComputerName -eq @($TestName.Split("."))[0])
  }

  [Void] AddOperatingSystem ([int]$ProductType, [String]$OperatingSystem, [String]$ServicePack, [String]$BuildNumber, [String]$Version, [String]$Architecture, [DateTime]$LocalDateTime, [DateTime]$InstallDate, [DateTime]$LastBootUpTime)
  {
    $This.ProductType = $ProductType
    $This.OperatingSystem = $OperatingSystem
    $This.ServicePack = $ServicePack
    $This.BuildNumber = $BuildNumber
    $This.Version = $Version
    $This.Architecture = $Architecture
    $This.Is64Bit = ($Architecture -eq "64-bit")
    $This.LocalDateTime = $LocalDateTime
    $This.InstallDate = $InstallDate
    $This.LastBootUpTime = $LastBootUpTime
  }

  [Void] AddSerialNumber ([String]$SerialNumber)
  {
    $This.SerialNumber = $SerialNumber
  }

  [Void] AddIsMobile ([Long[]]$ChassisTypes)
  {
    $This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains $ChassisTypes[0])
  }

  [Void] UpdateStatus ([String]$Status)
  {
    $This.Status = $Status
  }

  [TestMyWorkstation] SetEndTime ()
  {
    $This.EndTime = [DateTime]::Now
    return $This
  }

  [TimeSpan] GetRunTime ()
  {
    return ($This.EndTime - $This.StartTime)
  }
}
#endregion ******** class TestMyWorkstation ********

#region function Test-MyWorkstation
function Test-MyWorkstation()
{
  <#
    .SYNOPSIS
      Verify Remote Workstation is the Correct One
    .DESCRIPTION
      Verify Remote Workstation is the Correct One
    .PARAMETER ComputerName
      Name of the Computer to Verify
    .PARAMETER Credential
      Credentials to use when connecting to the Remote Computer
    .PARAMETER Serial
      Return Serial Number
    .PARAMETER Mobile
      Check if System is Desktop / Laptop
    .INPUTS
    .OUTPUTS
    .EXAMPLE
      Test-MyWorkstation -ComputerName "MyWorkstation"
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [PSCredential]$Credential,
    [Switch]$Serial,
    [Switch]$Mobile
  )
  begin
  {
    Write-Verbose -Message "Enter Function Test-MyWorkstation"

    # Default Common Get-WmiObject Options
    if ($PSBoundParameters.ContainsKey("Credential"))
    {
      $Params = @{
        "ComputerName" = $Null;
        "Credential"   = $Credential
      }
    }
    else
    {
      $Params = @{
        "ComputerName" = $Null
      }
    }
  }
  process
  {
    Write-Verbose -Message "Enter Function Test-MyWorkstation - Process"

    foreach ($Computer in $ComputerName)
    {
      if ($Computer -match "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$")
      {
        try
        {
          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not
          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)
          :FoundMyWork foreach ($IPAddress in $IPAddresses)
          {
            if ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)
            {
              $Params.ComputerName = $IPAddress
              
              # Start Setting Return Values as they are Found
              $VerifyObject = [TestMyWorkstation]::New($IPAddress)
              
              # Get ComputerSystem
              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)
              $VerifyObject.AddComputerSystem($Computer, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))
              $MyCompData.Dispose()
              
              # Verify Remote Computer is the Connect Computer, No need to get any more information
              if ($VerifyObject.Found)
              {
                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                [Void]($MyOSData = Get-WmiObject @Params -ClassName Win32_OperatingSystem)
                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))
                $MyOSData.Dispose()
                
                # Optional SerialNumber Job
                if ($Serial.IsPresent)
                {
                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                  [Void]($MyBIOSData = Get-WmiObject @Params -ClassName Win32_Bios)
                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)
                  $MyBIOSData.Dispose()
                }
                
                # Optional Mobile / ChassisType Job
                if ($Mobile.IsPresent)
                {
                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                  [Void]($MyChassisData = Get-WmiObject @Params -ClassName Win32_SystemEnclosure)
                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)
                  $MyChassisData.Dispose()
                }
              }
              else
              {
                $VerifyObject.UpdateStatus("Wrong Workstation Name")
              }
              # Beak out of Loop, Verify was a Success no need to try other IP Address if any
              break FoundMyWork
            }
          }
        }
        catch
        {
          # Workstation Not in DNS
          $VerifyObject.UpdateStatus("Workstation Not in DNS")
        }
      }
      else
      {
        $VerifyObject.UpdateStatus("Invalid Computer Name")
      }

      # Set End Time and Return Results
      $VerifyObject.SetEndTime()
    }
    Write-Verbose -Message "Exit Function Test-MyWorkstation - Process"
  }
  end
  {
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    Write-Verbose -Message "Exit Function Test-MyWorkstation"
  }
}
#endregion function Test-MyWorkstation

#region class MyWorkstationInfo
Class MyWorkstationInfo
{
  [String]$ComputerName = [Environment]::MachineName
  [String]$FQDN = [Environment]::MachineName
  [Bool]$Found = $False
  [String]$UserName = ""
  [String]$Domain = ""
  [Bool]$DomainMember = $False
  [int]$ProductType = 0
  [String]$Manufacturer = ""
  [String]$Model = ""
  [Bool]$IsMobile = $False
  [String]$SerialNumber = ""
  [Long]$Memory = 0
  [String]$OperatingSystem = ""
  [String]$BuildNumber = ""
  [String]$Version = ""
  [String]$ServicePack = ""
  [String]$Architecture = ""
  [Bool]$Is64Bit = $False;
  [DateTime]$LocalDateTime = [DateTime]::MinValue
  [DateTime]$InstallDate = [DateTime]::MinValue
  [DateTime]$LastBootUpTime = [DateTime]::MinValue
  [String]$IPAddress = ""
  [String]$Status = "Off-Line"
  [DateTime]$StartTime = [DateTime]::Now
  [DateTime]$EndTime = [DateTime]::Now
  
  MyWorkstationInfo ([String]$ComputerName)
  {
    $This.ComputerName = $ComputerName.ToUpper()
    $This.FQDN = $ComputerName.ToUpper()
    $This.Status = "On-Line"
  }
  
  [Void] AddComputerSystem ([String]$TestName, [String]$IPAddress, [String]$ComputerName, [Bool]$DomainMember, [String]$Domain, [String]$Manufacturer, [String]$Model, [String]$UserName, [Long]$Memory)
  {
    $This.IPAddress = $IPAddress
    $This.ComputerName = "$($ComputerName)".ToUpper()
    $This.DomainMember = $DomainMember
    $This.Domain = "$($Domain)".ToUpper()
    If ($DomainMember)
    {
      $This.FQDN = "$($ComputerName).$($Domain)".ToUpper()
    }
    $This.Manufacturer = $Manufacturer
    $This.Model = $Model
    $This.UserName = $UserName
    $This.Memory = $Memory
    $This.Found = ($ComputerName -eq @($TestName.Split("."))[0])
  }
  
  [Void] AddOperatingSystem ([int]$ProductType, [String]$OperatingSystem, [String]$ServicePack, [String]$BuildNumber, [String]$Version, [String]$Architecture, [DateTime]$LocalDateTime, [DateTime]$InstallDate, [DateTime]$LastBootUpTime)
  {
    $This.ProductType = $ProductType
    $This.OperatingSystem = $OperatingSystem
    $This.ServicePack = $ServicePack
    $This.BuildNumber = $BuildNumber
    $This.Version = $Version
    $This.Architecture = $Architecture
    $This.Is64Bit = ($Architecture -eq "64-bit")
    $This.LocalDateTime = $LocalDateTime
    $This.InstallDate = $InstallDate
    $This.LastBootUpTime = $LastBootUpTime
  }
  
  [Void] AddSerialNumber ([String]$SerialNumber)
  {
    $This.SerialNumber = $SerialNumber
  }
  
  [Void] AddIsMobile ([Long[]]$ChassisTypes)
  {
    $This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains $ChassisTypes[0])
  }
  
  [Void] UpdateStatus ([String]$Status)
  {
    $This.Status = $Status
  }
  
  [MyWorkstationInfo] SetEndTime ()
  {
    $This.EndTime = [DateTime]::Now
    Return $This
  }
  
  [TimeSpan] GetRunTime ()
  {
    Return ($This.EndTime - $This.StartTime)
  }
}
#endregion class MyWorkstationInfo

#region function Get-MyWorkstationInfo
Function Get-MyWorkstationInfo()
{
  <#
    .SYNOPSIS
      Verify Remote Workstation is the Correct One
    .DESCRIPTION
      Verify Remote Workstation is the Correct One
    .PARAMETER ComputerName
      Name of the Computer to Verify
    .PARAMETER Credential
      Credentials to use when connecting to the Remote Computer
    .PARAMETER Serial
      Return Serial Number
    .PARAMETER Mobile
      Check if System is Desktop / Laptop
    .INPUTS
    .OUTPUTS
    .EXAMPLE
      Get-MyWorkstationInfo -ComputerName "MyWorkstation"
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [PSCredential]$Credential,
    [Switch]$Serial,
    [Switch]$Mobile
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo"
    
    # Default Common Get-WmiObject Options
    If ($PSBoundParameters.ContainsKey("Credential"))
    {
      $Params = @{
        "ComputerName" = $Null;
        "Credential"   = $Credential
      }
    }
    Else
    {
      $Params = @{
        "ComputerName" = $Null
      }
    }
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-MyWorkstationInfo - Process"
    
    ForEach ($Computer In $ComputerName)
    {
      # Start Setting Return Values as they are Found
      $VerifyObject = [MyWorkstationInfo]::New($Computer)
      
      # Validate ComputerName
      If ($Computer -match "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$")
      {
        Try
        {
          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not
          $IPAddresses = @([System.Net.Dns]::GetHostAddresses($Computer) | Where-Object -FilterScript { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)
          :FoundMyWork ForEach ($IPAddress In $IPAddresses)
          {
            If ([System.Net.NetworkInformation.Ping]::New().Send($IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)
            {
              # Set Default Parms
              $Params.ComputerName = $IPAddress
              
              # Get ComputerSystem
              [Void]($MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)
              $VerifyObject.AddComputerSystem($Computer, $IPAddress, ($MyCompData.Name), ($MyCompData.PartOfDomain), ($MyCompData.Domain), ($MyCompData.Manufacturer), ($MyCompData.Model), ($MyCompData.UserName), ($MyCompData.TotalPhysicalMemory))
              $MyCompData.Dispose()
              
              # Verify Remote Computer is the Connect Computer, No need to get any more information
              If ($VerifyObject.Found)
              {
                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                [Void]($MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)
                $VerifyObject.AddOperatingSystem(($MyOSData.ProductType), ($MyOSData.Caption), ($MyOSData.CSDVersion), ($MyOSData.BuildNumber), ($MyOSData.Version), ($MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime($MyOSData.LastBootUpTime)))
                $MyOSData.Dispose()
                
                # Optional SerialNumber Job
                If ($Serial.IsPresent)
                {
                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                  [Void]($MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)
                  $VerifyObject.AddSerialNumber($MyBIOSData.SerialNumber)
                  $MyBIOSData.Dispose()
                }
                
                # Optional Mobile / ChassisType Job
                If ($Mobile.IsPresent)
                {
                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer
                  [Void]($MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)
                  $VerifyObject.AddIsMobile($MyChassisData.ChassisTypes)
                  $MyChassisData.Dispose()
                }
              }
              Else
              {
                $VerifyObject.UpdateStatus("Wrong Workstation Name")
              }
              # Beak out of Loop, Verify was a Success no need to try other IP Address if any
              Break FoundMyWork
            }
          }
        }
        Catch
        {
          # Workstation Not in DNS
          $VerifyObject.UpdateStatus("Workstation Not in DNS")
        }
      }
      Else
      {
        $VerifyObject.UpdateStatus("Invalid Computer Name")
      }
      
      # Set End Time and Return Results
      $VerifyObject.SetEndTime()
    }
    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo - Process"
  }
  End
  {
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    Write-Verbose -Message "Exit Function Get-MyWorkstationInfo"
  }
}
#endregion function Get-MyWorkstationInfo

#region function Get-MyNetAdapterConStatus
function Get-MyNetAdapterConStatus ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Get-MyNetAdapterConStatus -Value "String"
    .NOTES
      Original Function By Ken Sweet

      2022/07/05 - Initial Release
  #>
  [CmdletBinding()]
  param (
    [String]$ComputerName = [System.Environment]::MachineName,
    [PSCredential]$Credential = [PSCredential]::Empty
  )
  Write-Verbose -Message "Enter Function Get-MyNetAdapterConStatus"

  $PhysicalMediumTypeList = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\WMI" -Query "Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1" | Select-Object -Property InstanceName, NdisPhysicalMediumType)
  $NetworkAdapters = @(Get-WmiObject -ComputerName $ComputerName -Credential $Credential -Namespace "Root\CimV2" -Query "Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2" | Select-Object -ExpandProperty Name)
  [PSCustomObject][ordered]@{
    "Wired" = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 0) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)
    "Wireless" = (@($PhysicalMediumTypeList | Where-Object -FilterScript { ($PSItem.NdisPhysicalMediumType -eq 9) -and ($PSItem.InstanceName -in $NetworkAdapters) }).Count -gt 0)
  }

  Write-Verbose -Message "Exit Function Get-MyNetAdapterConStatus"
}
#endregion function Get-MyNetAdapterConStatus

#endregion ******* Generic / General Functions ********

#region ******* Registry / Environement Variable Functions ********

#region function Reset-MyRegKeyOwner
function Reset-MyRegKeyOwner ()
{
  <#
    .SYNOPSIS
      Take Ownership of a Registry Key and Reset Access Rules
    .DESCRIPTION
      Take Ownership of a Registry Key and Reset Access Rules
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Reset-MyRegKeyOwner -Value "String"
    .NOTES
      Original Function By Ken Sweet

      %Date% - Initial Release
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $False)]
    [Microsoft.Win32.RegistryKey]$Hive = [Microsoft.Win32.Registry]::LocalMachine,
    [parameter(Mandatory = $True)]
    [String]$Key,
    [Switch]$User,
    [Switch]$ResetAccess,
    [Switch]$Recurse
  )
  Write-Verbose -Message "Enter Function Reset-MyRegKeyOwner"

  if ($User.IsPresent)
  {
    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-545")
  }
  else
  {
    $NewOwner = [System.Security.Principal.SecurityIdentifier]::New("S-1-5-32-544")
  }

  Write-Verbose -Message "Key: $($Key)"
  $TempKey = $Hive.OpenSubKey($Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)
  $ACL = [System.Security.AccessControl.RegistrySecurity]::New()
  $ACL.SetOwner($NewOwner)
  $TempKey.SetAccessControl($ACL)
  $ACL.SetAccessRuleProtection($False, $False)
  $TempKey.SetAccessControl($ACL)

  if ($ResetAccess.IsPresent)
  {
    $TempKey = $TempKey.OpenSubKey("", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)
    $Rule = [System.Security.AccessControl.RegistryAccessRule]::New($NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)
    $ACL.ResetAccessRule($Rule)
    $TempKey.SetAccessControl($ACL)
  }

  if ($Recurse.IsPresent)
  {
    [Void]$PSBoundParameters.Remove("Key")
    [Void]$PSBoundParameters.Remove("ResetAccess")
    $TempKey = $TempKey.OpenSubKey("")
    foreach ($SubKey in @($TempKey.GetSubKeyNames()))
    {
      Reset-MyRegKeyOwner @PSBoundParameters -Key "$($Key)\$($SubKey)"
    }
  }

  Write-Verbose -Message "Exit Function Reset-MyRegKeyOwner"
}
#endregion function Reset-MyRegKeyOwner

#region function Set-MyISScriptData
function Set-MyISScriptData()
{
  <#
    .SYNOPSIS
      Writes Script Data to the Registry
    .DESCRIPTION
      Writes Script Data to the Registry
    .PARAMETER Script
     Name of the Regsitry Key to write the values under. Defaults to the name of the script.
    .PARAMETER Name
     Name of the Value to write
    .PARAMETER Value
      The Data to write
    .PARAMETER MultiValue
      Write Multiple values to the Registry
    .PARAMETER User
      Write to the HKCU Registry Hive
    .PARAMETER Computer
      Write to the HKLM Registry Hive
    .PARAMETER Bitness
      Specify 32/64 bit HKLM Registry Hive
    .EXAMPLE
      Set-MyISScriptData -Name "Name" -Value "Value"

      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key
    .EXAMPLE
      Set-MyISScriptData -Name "Name" -Value @("This", "That") -User -Script "ScriptName"

      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key

      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ
      Use @() or (,) when specifing the Value paramter value
    .EXAMPLE
      Set-MyISScriptData -Name "Name" -Value (,8) -Bitness "64" -Computer

      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key

      Number arrays are written to the registry as strings.
    .EXAMPLE
      Set-MyISScriptData -Name "Name" -Value 0 -Computer

      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key
    .EXAMPLE
      Set-MyISScriptData -MultiValue @{"Name" = "MyName"; "Number" = 4; "Array" = @("First", 2, "3rd", 4)} -Computer -Bitness "32"

      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "User")]
  param (
    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),
    [parameter(Mandatory = $True, ParameterSetName = "User")]
    [parameter(Mandatory = $True, ParameterSetName = "Comp")]
    [String]$Name,
    [parameter(Mandatory = $True, ParameterSetName = "User")]
    [parameter(Mandatory = $True, ParameterSetName = "Comp")]
    [Object]$Value,
    [parameter(Mandatory = $True, ParameterSetName = "UserMulti")]
    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]
    [HashTable]$MultiValue,
    [parameter(Mandatory = $False, ParameterSetName = "User")]
    [parameter(Mandatory = $False, ParameterSetName = "UserMulti")]
    [Switch]$User,
    [parameter(Mandatory = $True, ParameterSetName = "Comp")]
    [parameter(Mandatory = $True, ParameterSetName = "CompMulti")]
    [Switch]$Computer,
    [parameter(Mandatory = $False, ParameterSetName = "Comp")]
    [parameter(Mandatory = $False, ParameterSetName = "CompMulti")]
    [ValidateSet("32", "64", "All")]
    [String]$Bitness = "All"
  )
  Write-Verbose -Message "Enter Function Set-MyISScriptData"

  # Get Default Registry Paths
  $RegPaths = [System.Collections.ArrayList]::New()
  if ($Computer.IsPresent)
  {
    if ($Bitness -match "All|32")
    {
      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")
    }
    if ($Bitness -match "All|64")
    {
      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")
    }
  }
  else
  {
    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")
  }

  # Create the Registry Keys if Needed.
  ForEach ($RegPath in $RegPaths)
  {
    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData" -ErrorAction "SilentlyContinue")))
    {
      Try
      {
        [Void](New-Item -Path $RegPath -Name "MyISScriptData")
      }
      Catch
      {
        Throw "Error Creating Registry Key : MyISScriptData"
      }
    }
    if ([String]::IsNullOrEmpty((Get-Item -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue")))
    {
      Try
      {
        [Void](New-Item -Path "$RegPath\MyISScriptData" -Name $Script)
      }
      Catch
      {
        Throw "Error Creating Registry Key : $Script"
      }
    }
  }

  # Write the values to the registry.
  Switch -regex ($PSCmdlet.ParameterSetName)
  {
    "Multi"
    {
      ForEach ($Key in $MultiValue.Keys)
      {
        if ($MultiValue[$Key] -is [Array])
        {
          $Data = [String[]]$MultiValue[$Key]
        }
        else
        {
          $Data = $MultiValue[$Key]
        }
        ForEach ($RegPath in $RegPaths)
        {
          [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Key -Value $Data)
        }
      }
    }
    Default
    {
      if ($Value -is [Array])
      {
        $Data = [String[]]$Value
      }
      else
      {
        $Data = $Value
      }
      ForEach ($RegPath in $RegPaths)
      {
        [Void](Set-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -Name $Name -Value $Data)
      }
    }
  }

  Write-Verbose -Message "Exit Function Set-MyISScriptData"
}
#endregion function Set-MyISScriptData

#region function Get-MyISScriptData
function Get-MyISScriptData()
{
  <#
    .SYNOPSIS
      Reads Script Data from the Registry
    .DESCRIPTION
      Reads Script Data from the Registry
    .PARAMETER Script
     Name of the Regsitry Key to read the values from. Defaults to the name of the script.
    .PARAMETER Name
     Name of the Value to read
    .PARAMETER User
      Read from the HKCU Registry Hive
    .PARAMETER Computer
      Read from the HKLM Registry Hive
    .PARAMETER Bitness
      Specify 32/64 bit HKLM Registry Hive
    .EXAMPLE
      $RegValues = Get-MyISScriptData -Name "Name"

      Read the value from the HKCU Registry Hive under the Default Script Name registry key
    .EXAMPLE
      $RegValues = Get-MyISScriptData -Name "Name" -User -Script "ScriptName"

      Read the value from the HKCU Registry Hive under the Specified Script Name registry key
    .EXAMPLE
      $RegValues = Get-MyISScriptData -Name "Name" -Computer

      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key
    .EXAMPLE
      $RegValues = Get-MyISScriptData -Name "Name" -Bitness "32" -Script "ScriptName" -Computer

      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "User")]
  param (
    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),
    [String[]]$Name = "*",
    [parameter(Mandatory = $False, ParameterSetName = "User")]
    [Switch]$User,
    [parameter(Mandatory = $True, ParameterSetName = "Comp")]
    [Switch]$Computer,
    [parameter(Mandatory = $False, ParameterSetName = "Comp")]
    [ValidateSet("32", "64")]
    [String]$Bitness = "64"
  )
  Write-Verbose -Message "Enter Function Get-MyISScriptData"

  # Get Default Registry Path
  if ($Computer.IsPresent)
  {
    if ($Bitness -eq "64")
    {
      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software"
    }
    else
    {
      $RegPath = "Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node"
    }
  }
  else
  {
    $RegPath = "Registry::HKEY_CURRENT_USER\Software"
  }

  # Get the values from the registry.
  Get-ItemProperty -Path "$RegPath\MyISScriptData\$Script" -ErrorAction "SilentlyContinue" | Select-Object -Property $Name

  Write-Verbose -Message "Exit Function Get-MyISScriptData"
}
#endregion 

#region function Remove-MyISScriptData
function Remove-MyISScriptData()
{
  <#
    .SYNOPSIS
      Removes Script Data from the Registry
    .DESCRIPTION
      Removes Script Data from the Registry
    .PARAMETER Script
     Name of the Regsitry Key to remove. Defaults to the name of the script.
    .PARAMETER User
      Remove from the HKCU Registry Hive
    .PARAMETER Computer
      Remove from the HKLM Registry Hive
    .PARAMETER Bitness
      Specify 32/64 bit HKLM Registry Hive
    .EXAMPLE
      Remove-MyISScriptData

      Removes the default script registry key from the HKCU Registry Hive
    .EXAMPLE
      Remove-MyISScriptData -User -Script "ScriptName"

      Removes the Specified Script Name registry key from the HKCU Registry Hive
    .EXAMPLE
      Remove-MyISScriptData -Computer

      Removes the default script registry key from the 32/64 bit HKLM Registry Hive
    .EXAMPLE
      Remove-MyISScriptData -Computer -Script "ScriptName" -Bitness "32"

      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "User")]
  param (
    [String]$Script = [System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.ScriptName),
    [parameter(Mandatory = $False, ParameterSetName = "User")]
    [Switch]$User,
    [parameter(Mandatory = $True, ParameterSetName = "Comp")]
    [Switch]$Computer,
    [parameter(Mandatory = $False, ParameterSetName = "Comp")]
    [ValidateSet("32", "64", "All")]
    [String]$Bitness = "All"
  )
  Write-Verbose -Message "Enter Function Remove-MyISScriptData"

  # Get Default Registry Paths
  $RegPaths = [System.Collections.ArrayList]::New()
  if ($Computer.IsPresent)
  {
    if ($Bitness -match "All|32")
    {
      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node")
    }
    if ($Bitness -match "All|64")
    {
      [Void]$RegPaths.Add("Registry::HKEY_LOCAL_MACHINE\Software")
    }
  }
  else
  {
    [Void]$RegPaths.Add("Registry::HKEY_CURRENT_USER\Software")
  }

  # Remove the values from the registry.
  ForEach ($RegPath in $RegPaths)
  {
    [Void](Remove-Item -Path "$RegPath\MyISScriptData\$Script")
  }

  Write-Verbose -Message "Exit Function Remove-MyISScriptData"
}
#endregion function Remove-MyISScriptData

#region function Get-EnvironmentVariable
function Get-EnvironmentVariable()
{
  <#
    .SYNOPSIS
      Creates an Environment Variable on the Local or Remote Workstation
    .DESCRIPTION
      Creates an Environment Variable on the Local or Remote Workstation
    .PARAMETER ComputerName
    .PARAMETER Variable
    .PARAMETER UserName
    .PARAMETER Credential
    .EXAMPLE
      Get-EnvironmentVariable -Variable <String>
    .NOTES
      Original Script By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True)]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [String]$Variable = "%",
    [String]$UserName = "<SYSTEM>",
    [PSCredential]$Credential = [PSCredential]::Empty
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Begin Block"

    $Query = "Select * from Win32_Environment Where Name like '$Variable' and UserName = '$UserName'"

    $SessionParams = @{
      "ComputerName" = ""
    }
    if ($PSBoundParameters.ContainsKey("Credential"))
    {
      [Void]$SessionParms.Add("Credential", $Credential)
    }

    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-EnvironmentVariable Process Block"

    ForEach ($Computer in $ComputerName)
    {
      $SessionParams.ComputerName = $Computer
      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query $Query
    }

    Write-Verbose -Message "Exit Function Get-EnvironmentVariable Process Block"
  }
}
#endregion function Get-EnvironmentVariable

#region function Set-EnvironmentVariable
function Set-EnvironmentVariable()
{
  <#
    .SYNOPSIS
      Creates an Environment Variable on the Local or Remote Workstation
    .DESCRIPTION
      Creates an Environment Variable on the Local or Remote Workstation
    .PARAMETER ComputerName
    .PARAMETER Variable
    .PARAMETER UserName
    .PARAMETER Credential
    .EXAMPLE
      Set-EnvironmentVariable -Variable <String>
    .NOTES
      Original Script By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True)]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $True)]
    [String]$Variable,
    [String]$Value,
    [String]$UserName = "<SYSTEM>",
    [PSCredential]$Credential = [PSCredential]::Empty
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Begin Block"

    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"

    $SessionParams = @{
      "ComputerName" = ""
    }
    if ($PSBoundParameters.ContainsKey("Credential"))
    {
      [Void]$SessionParms.Add("Credential", $Credential)
    }

    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Set-EnvironmentVariable Process Block"

    ForEach ($Computer in $ComputerName)
    {
      $SessionParams.ComputerName = $Computer
      $CimSession = New-CimSession @SessionParams
      if ([String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))
      {
        New-CimInstance -CimSession $CimSession -ClassName Win32_Environment -Property @{ "Name" = $Variable; "VariableValue" = $Value; "UserName" = $UserName }
      }
      else
      {
        Set-CimInstance -InputObject $Instance -Property @{ "Name" = $Variable; "VariableValue" = $Value } -PassThru
      }
      $CimSession.Close()
    }

    Write-Verbose -Message "Exit Function Set-EnvironmentVariable Process Block"
  }
}
#endregion function Set-EnvironmentVariable

#region function Remove-EnvironmentVariable
function Remove-EnvironmentVariable()
{
  <#
    .SYNOPSIS
      Creates an Environment Variable on the Local or Remote Workstation
    .DESCRIPTION
      Creates an Environment Variable on the Local or Remote Workstation
    .PARAMETER ComputerName
    .PARAMETER Variable
    .PARAMETER UserName
    .PARAMETER Credential
    .EXAMPLE
      Remove-EnvironmentVariable -Variable <String>
    .NOTES
      Original Script By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $False, ValueFromPipeline = $True)]
    [String[]]$ComputerName = [System.Environment]::MachineName,
    [parameter(Mandatory = $True)]
    [String]$Variable,
    [String]$UserName = "<SYSTEM>",
    [PSCredential]$Credential = [PSCredential]::Empty
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Begin Block"

    $Query = "Select * from Win32_Environment Where Name = '$Variable' and UserName = '$UserName'"

    $SessionParams = @{
      "ComputerName" = ""
    }
    if ($PSBoundParameters.ContainsKey("Credential"))
    {
      [Void]$SessionParms.Add("Credential", $Credential)
    }

    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Remove-EnvironmentVariable Process Block"

    ForEach ($Computer in $ComputerName)
    {
      $SessionParams.ComputerName = $Computer
      $CimSession = New-CimSession @SessionParams
      if (-not [String]::IsNullOrEmpty(($Instance = Get-CimInstance -CimSession $CimSession -Query $Query)))
      {
        Remove-CimInstance -InputObject $Instance
      }
      $CimSession.Close()
    }

    Write-Verbose -Message "Exit Function Remove-EnvironmentVariable Process Block"
  }
}
#endregion function Remove-EnvironmentVariable

#endregion ******* Registry / Environement Variable Functions ********

#region ******* Import / Install Module Functions ********

#region function Install-MyPackageProvider
function Install-MyPackageProvider ()
{
  <#
    .SYNOPSIS
      Installs the PackageProvider
    .DESCRIPTION
      Installs the PackageProvider
    .PARAMETER Name
      The Name of the PackageProvider
    .EXAMPLE
      Install-MyPackageProvider -Name $Name

      Installs the Module
    .NOTES
      Original Function By Ken Sweet

      12/24/2021 - Initial Release
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, ValueFromPipeline = $True)]
    [String]$Name,
    [Version]$Version = "0.0.0.0",
    [ValidateSet("AllUsers", "CurrentUser")]
    [String]$Scope = "AllUsers",
    [Switch]$Install
  )
  Write-Verbose -Message "Enter Function Install-MyPackageProvider"
  
  $CommonParams = @{
    "Name"          = $Name
    "WarningAction" = "SilentlyContinue"
    "ErrorAction"   = "SilentlyContinue"
    "Verbose"       = $False
  }
  if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt $Version)
  {
    if (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and ($Scope -eq "AllUsers")) -or ($Scope -eq "CurrentUser")) -and $Install.IsPresent)
    {
      Install-PackageProvider @CommonParams -Scope $Scope -MinimumVersion "$($Version)" -Force | Out-Null
      if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt $Version)
      {
        @{ "Success" = $False; "Restart" = $False }
      }
      else
      {
        @{ "Success" = $True; "Restart" = $True }
      }
    }
    else
    {
      @{ "Success" = $False; "Restart" = $False }
    }
  }
  else
  {
    @{ "Success" = $True; "Restart" = $False }
  }
  
  Write-Verbose -Message "Exit Function Install-MyPackageProvider"
}
#endregion function Install-MyPackageProvider

#region function Install-MyModule
Function Install-MyModule ()
{
  <#
    .SYNOPSIS
      Checks for, and Installs if Required, and Imports the Specified Module
    .DESCRIPTION
      Checks for, and Installs if Required, and Imports the Specified Module
    .PARAMETER Name
    .PARAMETER Version
    .PARAMETER Scope
    .PARAMETER Repository
    .PARAMETER Install
    .EXAMPLE
      Install-MyModule -Name $Name

      Installs the Module
    .NOTES
      Original Function By Ken Sweet

      12/09/2021 - Initial Release
      12/24/2021 - Update / ReWrite
      02/28/2024 - Update Parameters, Add Repository, Remove AcceptLicense
      05/23/2024 - Update / ReWrite
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$Name,
    [Version]$Version = "0.0.0.0",
    [ValidateSet("AllUsers", "CurrentUser")]
    [String]$Scope = "AllUsers",
    [String]$Repository = "sie-powershell",
    [Switch]$Install,
    [String]$SourceLocation = "https://artifactory.providence.org/artifactory/api/nuget/sie-powershell",
    [String]$PublishLocation = "https://artifactory.providence.org/artifactory/api/nuget/sie-powershell-local"
  )
  Write-Verbose -Message "Enter Function Install-MyModule"

  # Zero Verion for Checks
  $ZeroVersion = [Version]::new(0, 0, 0, 0)

  # Get Module Common Parameters
  $GMParams = @{
    "Name"          = $Name
    "WarningAction" = "SilentlyContinue"
    "ErrorAction"   = "SilentlyContinue"
    "Verbose"       = $False
  }

  # Install Module Parameters
  $IMParams = @{
    "Name"          = $Name
    "WarningAction" = "SilentlyContinue"
    "ErrorAction"   = "SilentlyContinue"
    "Verbose"       = $False
  }
  If ($PSBoundParameters.ContainsKey("Version"))
  {
    $IMParams.Add("RequiredVersion", $Version)
  }

  # Check if Module is Already Imported
  $ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1
  If ([String]::IsNullOrEmpty($ChkInstalled.Version))
  {
    # Get Installed Module Versions
    $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1
    If ([String]::IsNullOrEmpty($ChkInstalled.Version))
    {
      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and ($Scope -eq "AllUsers")) -or ($Scope -eq "CurrentUser")) -and $Install.IsPresent)
      {
        # Check if Repo Exists
        $ChkRepo = Get-PSRepository -Name $Repository -ErrorAction SilentlyContinue
        If ([String]::IsNullOrEmpty($ChkRepo.Name))
        {
          # Add Custom Repo
          Register-PSRepository -Name $Repository -SourceLocation $SourceLocation -PublishLocation $PublishLocation -InstallationPolicy "Trusted"
        }
        # Install / Update Module
        Install-Module @IMParams -Repository $Repository -Scope $Scope -Force -AllowClobber | Out-Null
        If ($Repository -ne "PSGallery")
        {
          # Remove Custom Repo
          Unregister-PSRepository -Name $Repository
        }
        $ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { ($PSItem.Version -eq $Version) -or ($Version -eq $ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1
        If ([String]::IsNullOrEmpty($ChkInstalled.Version))
        {
          # Module Installed Failed
          [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install Failed" }
        }
        Else
        {
          # Import Module
          Import-Module @IMParams
          # Verify Imported Module
          $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1
          If ($ChkImported.Version -eq $ChkInstalled.Version)
          {
            # Module Install / Import Succeeded
            [PSCustomObject]@{ "Success" = $True; "Message" = "Module Install / Import Succeeded" }
          }
          Else
          {
            # Module Install / Import Failed
            [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Failed" }
          }
        }
      }
      Else
      {
        # Module Install / Import Failed
        [PSCustomObject]@{ "Success" = $False; "Message" = "Module Install / Import Not Installed" }
      }
    }
    Else
    {
      # Import Module
      Import-Module @IMParams
      # Verify Imported Module
      $ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1
      If ($ChkImported.Version -eq $ChkInstalled.Version)
      {
        # Module Import Succeeded
        [PSCustomObject]@{ "Success" = $True; "Message" = "Module Import Succeeded" }
      }
      Else
      {
        # Module Import Failed
        [PSCustomObject]@{ "Success" = $False; "Message" = "Module Import Failed" }
      }
    }
  }
  Else
  {
    # Module Previously Imported
    If (($ChkInstalled.Version -eq $Version) -or ($Version -eq $ZeroVersion))
    {
      # Correct Module Version Imported
      [PSCustomObject]@{ "Success" = $True; "Message" = "Correct Version Previously Loaded" }
    }
    Else
    {
      # Wrong Module Version Imported
      [PSCustomObject]@{ "Success" = $False; "Message" = "Wrong Version Previously Loaded" }
    }
  }

  Write-Verbose -Message "Exit Function Install-MyModule"
}
#endregion function Install-MyModule

#region function Install-MSALPS
function Install-MSALPS ()
{
  <#
    .SYNOPSIS
      Installs the Microsoft MSAL.PS Module
    .DESCRIPTION
      Installs the Microsoft MSAL.PS Module
    .EXAMPLE
      Install-MSALPS

      Installs the Microsoft MSAL.PS Module
    .NOTES
      Original Function By Ken Sweet

      7/21/2021 - Initial Release
      8/19/2021 - Change Write-Hosts to Status Messages
      12/24/2021 - Update / ReWrite
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Install-MSALPS"

  If ((Install-MyModule -Name "MSAL.PS" -Version "2.0.0.0" -Scope "AllUsers").Success)
  {
    # Module MSAL.PS
    @{ "Success" = $True }
  }
  else
  {
    If ((Install-MyPackageProvider -Name "NuGet" -Version "2.0.0.0" -Scope "AllUsers" -Install).Success)
    {
      If ((Install-MyModule -Name "MSAL.PS" -Version "2.0.0.0" -Scope "AllUsers" -Install).Success)
      {
        # Module MSAL.PS
        @{ "Success" = $True }
      }
      else
      {
        # Module MSAL.PS
        @{ "Success" = $False }
      }
    }
    else
    {
      # PackageProvider NuGet
      @{ "Success" = $False }
    }
  }

  Write-Verbose -Message "Exit Function Install-MSALPS"
}
#endregion function Install-MSALPS

#endregion ******* Import / Install Module Functions ********

#region ******* Microsoft GraphAPI Functions ********

#region function Get-UserToken
function Get-UserToken ()
{
  <#
    .SYNOPSIS
      Get Users GraphAPI AuthToken
    .DESCRIPTION
      Get Users GraphAPI AuthToken
    .EXAMPLE
      Get-UserToken
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Get-UserToken"

  $MsResponse = Get-MSALToken -Interactive -ClientId "d1ddf0e4-d672-4dae-b554-9d5bdfd93547" -RedirectUri "urn:ietf:wg:oauth:2.0:oob" -Authority "https://login.microsoftonline.com/common" -Scopes @("https://graph.microsoft.com/.default") -ExtraQueryParameters @{claims = '{"access_token" : {"amr": { "values": ["mfa"] }}}' }

  @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $($MsResponse.AccessToken)"
    "ExpiresOn"     = ($MsResponse.ExpiresOn.LocalDateTime.ToString())
  }

  Write-Verbose -Message "Exit Function Get-UserToken"
}
#endregion function Get-UserToken

#region function Refresh-UserToken
function Refresh-UserToken ()
{
  <#
    .SYNOPSIS
      Refresh Users GraphAPI AuthToken
    .DESCRIPTION
      Refresh Users GraphAPI AuthToken
    .EXAMPLE
      Refresh-UserToken
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Refresh-UserToken"

  $MsResponse = Get-MSALToken -ForceRefresh -ClientId "d1ddf0e4-d672-4dae-b554-9d5bdfd93547" -RedirectUri "urn:ietf:wg:oauth:2.0:oob" -Authority "https://login.microsoftonline.com/common" -Scopes @("https://graph.microsoft.com/.default")

  @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $($MsResponse.AccessToken)"
    "ExpiresOn"     = ($MsResponse.ExpiresOn.LocalDateTime.ToString())
  }

  Write-Verbose -Message "Exit Function Refresh-UserToken"
}
#endregion function Refresh-UserToken

#region function Get-MyOAuthApplicationToken
function Get-MyOAuthApplicationToken
{
  <#
    .SYNOPSIS
      Get Application OAuth Token
    .DESCRIPTION
      Get Application OAuth Token
    .PARAMETER TenantID
    .PARAMETER ClientID
    .PARAMETER ClientSecret
    .PARAMETER ResourceUri
    .EXAMPLE
      Get-MyOAuthApplicationToken -TenantID $TenantID -ClientID $ClientID -ClientSecret $ClientSecret
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "New")]
  param (
    [parameter(Mandatory = $True)]
    [String]$TenantID,
    [parameter(Mandatory = $True)]
    [String]$ClientID,
    [parameter(Mandatory = $True)]
    [String]$ClientSecret,
    [String]$Scope = "https://graph.microsoft.com/.default"
  )
  Write-Verbose -Message "Enter Function Get-MyOAuthApplicationToken"

  $Body = @{
    "grant_type"    = "client_credentials"
    "client_id"     = $ClientID
    "client_secret" = $ClientSecret
    "Scope"         = $Scope
  }

  $Uri = "https://login.microsoftonline.com/$($TenantID)/oauth2/v2.0/token"

  Try
  {
    $AuthResult = Invoke-RestMethod -Uri $Uri -Body $Body -Method Post -ContentType "application/x-www-form-urlencoded" -ErrorAction SilentlyContinue
  }
  Catch
  {
    $AuthResult = $Null
  }

  if ([String]::IsNullOrEmpty($AuthResult))
  {
    # Failed to Authenticate
    @{
      "Expires_In" = 0
    }
  }
  else
  {
    # Successful Authentication
    @{
      "Content-Type"  = "application/json"
      "Authorization" = "Bearer " + $AuthResult.Access_Token
      "Expires_In"    = $AuthResult.Expires_In
    }
  }

  Write-Verbose -Message "Exit Function Get-MyOAuthApplicationToken"
}
#endregion function Get-MyOAuthApplicationToken

#region function Get-MyOAuthCertToken
function Get-MyOAuthCertToken
{
  <#
    .SYNOPSIS
      Get Certificate OAuth Token
    .DESCRIPTION
      Get Certificate OAuth Token
    .PARAMETER TenantID
    .PARAMETER ClientID
    .PARAMETER Certificate
    .PARAMETER Scope
    .EXAMPLE
      $AuthToken = Get-MyOAuthCertToken -TenantID $TenantID -ClientID $ClientID -Certificate $Certificate
    .NOTES
      Function By Ken Sweet

  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$TenantID,
    [parameter(Mandatory = $True)]
    [String]$ClientID,
    [parameter(Mandatory = $True)]
    [String]$Certificate,
    [String]$Scope = "https://graph.microsoft.com/"
  )
  Write-Verbose -Message "Enter Function Get-MyOAuthCertToken"

  if ([String]::IsNullOrEmpty(($Cert = Get-Item -Path "Cert:\CurrentUser\My\$($Certificate)")))
  {
    # Failed to Authenticate
    @{
      "Expires_In" = 0
    }
  }
  else
  {
    # Create base64 hash of certificate
    $CertHash = [System.Convert]::ToBase64String($Cert.GetCertHash()) -replace '\+', '-' -replace '/', '_' -replace '='

    # Create JWT timestamp for expiration
    $StartDate = (Get-Date -Date "1970-01-01T00:00:00Z").ToUniversalTime()
    $JWTExpirationTimeSpan = (New-TimeSpan -Start $StartDate -End (Get-Date).ToUniversalTime().AddMinutes(2)).TotalSeconds
    $JWTExpiration = [math]::Round($JWTExpirationTimeSpan, 0)

    # Create JWT validity start timestamp
    $NotBeforeExpirationTimeSpan = (New-TimeSpan -Start $StartDate -End ((Get-Date).ToUniversalTime())).TotalSeconds
    $NotBefore = [math]::Round($NotBeforeExpirationTimeSpan, 0)

    # Create JWT header
    $JWTHeader = @{
      alg = "RS256"
      typ = "JWT"
      # Use the CertHash and replace/strip to match web encoding of base64
      x5t = $CertHash
    }

    # Convert header and payload to base64
    $JWTHeaderToByte = [System.Text.Encoding]::UTF8.GetBytes(($JWTHeader | ConvertTo-Json))
    $EncodedHeader = [System.Convert]::ToBase64String($JWTHeaderToByte)

    # Create JWT payload
    $JWTPayLoad = @{
      # What endpoint is allowed to use this JWT
      aud = "https://login.microsoftonline.com/$TenantID/oauth2/token"
      # Expiration timestamp
      exp = $JWTExpiration
      # Issuer = your application
      iss = $ClientID
      # JWT ID: random guid
      jti = [guid]::NewGuid()
      # Not to be used before
      nbf = $NotBefore
      # JWT Subject
      sub = $ClientID
    }

    $JWTPayLoadToByte = [System.Text.Encoding]::UTF8.GetBytes(($JWTPayload | ConvertTo-Json))
    $EncodedPayload = [System.Convert]::ToBase64String($JWTPayLoadToByte)

    # Join header and Payload with "." to create a valid (unsigned) JWT
    $JWT = $EncodedHeader + "." + $EncodedPayload

    # Define RSA signature and hashing algorithm
    $RSAPadding = [Security.Cryptography.RSASignaturePadding]::Pkcs1
    $HashAlgorithm = [Security.Cryptography.HashAlgorithmName]::SHA256

    # Create a signature of the JWT
    $Signature = [Convert]::ToBase64String($Cert.PrivateKey.SignData([System.Text.Encoding]::UTF8.GetBytes($JWT), $HashAlgorithm, $RSAPadding)) -replace '\+', '-' -replace '/', '_' -replace '='

    # Join the signature to the JWT with "."
    $JWT = $JWT + "." + $Signature

    # Create a hash with body parameters
    $Body = @{
      client_id             = $ClientID
      client_assertion      = $JWT
      client_assertion_type = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
      scope                 = $Scope
      grant_type            = "client_credentials"
    }

    # Use the self-generated JWT as Authorization
    $Header = @{
      Authorization = "Bearer $JWT"
    }

    # Splat the parameters for Invoke-Restmethod for cleaner code
    $PostSplat = @{
      ContentType = 'application/x-www-form-urlencoded'
      Method      = 'POST'
      Body        = $Body
      Uri         = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
      Headers     = $Header
    }

    if ([String]::IsNullOrEmpty(($AuthResult = Invoke-RestMethod @PostSplat)))
    {
      # Failed to Authenticate
      @{
        "Expires_In" = 0
      }
    }
    else
    {
      # Successful Authentication
      @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer " + $AuthResult.Access_Token
        "Expires_In"    = $AuthResult.Expires_In
      }
    }
  }

  Write-Verbose -Message "Exit Function Get-MyOAuthCertToken"
}
#endregion function Get-MyOAuthCertToken

#region function Get-MyOAuthDelegateToken
function Get-MyOAuthDelegateToken
{
  <#
    .SYNOPSIS
      Get Delegate OAuth Token
    .DESCRIPTION
      Get Delegate OAuth Token
    .PARAMETER TenantID
    .PARAMETER ClientID
    .PARAMETER ResourceUri
    .PARAMETER State
    .PARAMETER Scope
    .PARAMETER Application
    .EXAMPLE
      $AuthToken = Get-MyOAuthDelegateToken -TenantID $TenantID -ClientID $ClientID
    .NOTES
      Updated Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$TenantID,
    [parameter(Mandatory = $True)]
    [String]$ClientID,
    [String]$RedirectUri = "https://localhost",
    [String]$State = "MyState",
    [String[]]$Scope = "https://graph.microsoft.com/.default"
  )
  Write-Verbose -Message "Enter Function Get-MyOAuthDelegateToken"

  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Web.HttpUtility")).Type))
  {
    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Web")
  }

  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New("System.Windows.Forms.Form")).Type))
  {
    [Void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
  }

  $TempRedirectUri = [System.Web.HttpUtility]::UrlEncode($RedirectUri)
  $TempScope = [System.Web.HttpUtility]::UrlEncode(($Scope -join "%20"))
  $AuthUri = "https://login.microsoftonline.com/$($TenantID)/oauth2/v2.0/authorize?client_id=$($ClientID)&state=$($State)&redirect_uri=$($TempRedirectUri)&scope=$($TempScope)&response_type=code&response_mode=query"

  #region $OADForm = [System.Windows.Forms.Form]::New()
  $OADForm = [System.Windows.Forms.Form]::New()
  $OADForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow
  $OADForm.Size = [System.Drawing.Size]::New(480, 680)
  $OADForm.TopLevel = $True
  $OADForm.TopMost = $True
  #endregion $OADForm = [System.Windows.Forms.Form]::New()

  $OADForm.add_Shown({ $This.Activate() })

  #region $OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()
  $OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()
  $OADForm.Controls.Add($OADWebBrowser)
  $OADWebBrowser.Location = [System.Drawing.Point]::New(4, 4)
  $OADWebBrowser.Size = [System.Drawing.Size]::New(472, 672)
  $OADWebBrowser.ScriptErrorsSuppressed = $True
  $OADWebBrowser.Url = $AuthUri
  #endregion $OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()

  $OADWebBrowser.add_DocumentCompleted({ if ($This.Url.Query -match "error=[^&]*|code=[^&]*") { $This.Parent.Close() } })

  $OADForm.ShowDialog($FCGForm) | Out-Null

  if ([String]::IsNullOrEmpty(($Code = [System.Web.HttpUtility]::ParseQueryString($OADWebBrowser.Url.Query).Get("Code"))))
  {
    # Failed to Authenticate
    @{
      "Expires_In" = 0
      "Error"      = ([System.Web.HttpUtility]::ParseQueryString($OADWebBrowser.Url.Query).Get("Error"))
    }
  }
  else
  {
    # Authorized
    $TokenUri = "https://login.microsoftonline.com/$($TenantID)/oauth2/v2.0/token"
    $Body = @{
      "Client_ID"     = $ClientID
      "Scope"         = $Scope
      "Code"          = $Code
      "Redirect_Uri"  = $RedirectUri
      "Grant_Type"    = "authorization_code"
    }

    Try
    {
      $AuthResult = (Invoke-WebRequest -UseBasicParsing -Method Post -Uri $TokenUri -ContentType "application/x-www-form-urlencoded" -Body $Body -ErrorAction SilentlyContinue).Content | ConvertFrom-Json
    }
    Catch {}

    if ([String]::IsNullOrEmpty($AuthResult))
    {
      # Failed to Authenticate
      @{
        "Expires_In" = 0
      }
    }
    else
    {
      # Successful Authentication
      @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer " + $AuthResult.Access_Token
        "Expires_In"    = $AuthResult.Expires_In
      }
    }
  }

  Write-Verbose -Message "Exit Function Get-MyOAuthDelegateToken"
}
#endregion function Get-MyOAuthDelegateToken

#region function Get-MyOAuthUserToken
function Get-MyOAuthUserToken
{
  <#
    .SYNOPSIS
      Get User OAuth Token
    .DESCRIPTION
      Get User OAuth Token
    .PARAMETER Credential
    .PARAMETER TenantID
    .PARAMETER EMail
    .PARAMETER Password
    .PARAMETER PromptConsent
    .EXAMPLE
      $AuthToken = Get-MyOAuthUserToken -Credential $Credential -TenantID $TenantID
    .EXAMPLE
      $AuthToken = Get-MyOAuthUserToken -EMail $EMail -Password $Password
    .EXAMPLE
      $AuthToken = Get-MyOAuthUserToken -EMail $EMail -PromptConsent

      if ($AuthToken.ExpiresOn -gt [System.DateTimeOffset]::MinValue)
      {
        # You are Good
      }
      else
      {
        # Logon Failed!
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "AskPassword")]
  Param (
    [parameter(Mandatory = $True, ParameterSetName = "Credential")]
    [String]$TenantID,
    [String]$ClientID = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547",
    [parameter(Mandatory = $True, ParameterSetName = "Password")]
    [parameter(Mandatory = $True, ParameterSetName = "AskPassword")]
    [System.Net.Mail.MailAddress]$EMail,
    [parameter(Mandatory = $True, ParameterSetName = "Password")]
    [String]$Password,
    [parameter(Mandatory = $False, ParameterSetName = "AskPassword")]
    [Switch]$PromptConsent,
    [parameter(Mandatory = $True, ParameterSetName = "Credential")]
    [PSCredential]$Credential,
    [String]$ResourceUri = "https://graph.microsoft.com/"
  )
  Write-Verbose -Message "Enter Function Get-MyOAuthUserToken"

  $AzureADModule = @(Get-Module -Name "AzureAD" -ListAvailable | Sort-Object -Property "Version" -Descending)

  if ($AzureADModule.Count)
  {
    if ($PSCmdlet.ParameterSetName -eq "Credential")
    {
      $Authority = "https://login.microsoftonline.com/$($TenantID)"
    }
    else
    {
      $Authority = "https://login.microsoftonline.com/$($EMail.Host)"
    }

    [Void][System.Reflection.Assembly]::LoadFrom("$($AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.dll")
    [Void][System.Reflection.Assembly]::LoadFrom("$($AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll")

    $AuthContext = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext]::New($Authority)

    if ($PSCmdlet.ParameterSetName -eq "AskPassword")
    {
      $RedirectUri = "urn:ietf:wg:oauth:2.0:oob"
      $PlatformParameters = [Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters]::New("Auto")
      $UserID = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier]::New(($EMail.Address), "OptionalDisplayableId")
      if ($PromptConsent.IsPresent)
      {
        $AuthResult = $AuthContext.AcquireTokenAsync($ResourceUri, $ClientID, $RedirectUri, $PlatformParameters, $UserID, "prompt=admin_consent").Result
      }
      else
      {
        $AuthResult = $AuthContext.AcquireTokenAsync($ResourceUri, $ClientID, $RedirectUri, $PlatformParameters, $UserID).Result
      }
    }
    else
    {
      if ($PSCmdlet.ParameterSetName -eq "Password")
      {
        $UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New(($EMail.Address), (ConvertTo-SecureString -String $Password -AsPlainText -Force))
      }
      else
      {
        $UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New(($Credential.UserName), ($Credential.Password))
      }
      $AuthResult = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions]::AcquireTokenAsync($AuthContext, $ResourceUri, $ClientID, $UserCredentials).Result
    }

    if ([String]::IsNullOrEmpty($AuthResult.AccessToken))
    {
      # Failed to Authenticate
      @{
        "ExpiresOn" = [System.DateTimeOffset]::MinValue
      }
    }
    else
    {
      # Successful Authentication
      @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer " + $AuthResult.AccessToken
        "ExpiresOn"     = $AuthResult.ExpiresOn
      }
    }
  }
  else
  {
    # Azure Module not Found
    @{
      "ExpiresOn" = [System.DateTimeOffset]::MinValue
    }
  }

  Write-Verbose -Message "Exit Function Get-MyOAuthUserToken"
}
#endregion function Get-MyOAuthUserToken

#region function Get-MyGraphQuery
function Get-MyGraphQuery
{
  <#
    .SYNOPSIS
      Query Graph API
    .DESCRIPTION
      Query Graph API
    .PARAMETER AuthToken
    .PARAMETER Version
    .PARAMETER Resource
    .PARAMETER Count
    .PARAMETER Filter
    .PARAMETER Expand
    .PARAMETER Select
    .PARAMETER OrderBy
    .PARAMETER Top
    .PARAMETER Skip
    .PARAMETER All
    .EXAMPLE
      Get-MyGraphQuery -AuthToken $AuthToken -Resource $Resource
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Hashtable]$AuthToken = $Script:Authtoken,
    [ValidateSet("Beta", "v1.0")]
    [String]$Version = "Beta",
    [parameter(Mandatory = $True)]
    [String]$Resource,
    [Switch]$Count,
    [String]$Filter,
    [String]$Expand,
    [String[]]$Select,
    [String]$Search,
    [String[]]$OrderBy,
    [ValidateRange(1, 1000)]
    [Int]$Top = 500,
    [Int]$Skip,
    [Switch]$All
  )
  Write-Verbose -Message "Enter Function Get-MyGraphQuery"

  $MyFilters = [System.Collections.ArrayList]::New()

  #region Build Graph Query Search Filter

  if ($Count.IsPresent)
  {
    [Void]$MyFilters.Add("`$count=true")
  }

  if ($PSBoundParameters.ContainsKey("Search"))
  {
    [Void]$MyFilters.Add("`$search=`"$($Search)`"")
  }

  if ($PSBoundParameters.ContainsKey("Select"))
  {
    [Void]$MyFilters.Add("`$select=$(($Select -join ","))")
  }

  if ($PSBoundParameters.ContainsKey("OrderBy"))
  {
    [Void]$MyFilters.Add("`$orderby=$(($OrderBy -join ","))")
  }

  if ($PSBoundParameters.ContainsKey("Top"))
  {
    [Void]$MyFilters.Add("`$top=$($Top)")
  }

  if ($PSBoundParameters.ContainsKey("Skip"))
  {
    [Void]$MyFilters.Add("`$skip=$($Skip)")
  }

  if ($PSBoundParameters.ContainsKey("Filter"))
  {
    [Void]$MyFilters.Add("`$filter=$($Filter)")
  }

  if ($PSBoundParameters.ContainsKey("Expand"))
  {
    [Void]$MyFilters.Add("`$expand=$($Expand)")
  }
  #endregion Build Graph Query Search Filter

  if ($MyFilters.Count)
  {
    $Uri = "https://graph.microsoft.com/$($Version)/$($Resource)?$(($MyFilters -join "&"))"
  }
  else
  {
    $Uri = "https://graph.microsoft.com/$($Version)/$($Resource)"
  }

  do
  {
    Write-Verbose -Message "Query Graph API"
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Get -Verbose:$False
    if ($ReturnData.StatusCode -eq 200)
    {
      $Content = $ReturnData.Content | ConvertFrom-Json
      if (@($Content.PSObject.Properties.match("value")).Count)
      {
        $Content.Value
      }
      else
      {
        $Content
      }
      $Uri = ($Content."@odata.nextLink")
    }
    else
    {
      break
    }
  }
  while ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)

  Write-Verbose -Message "Exit Function Get-MyGraphQuery"
}
#endregion function Get-MyGraphQuery

#region function Get-MyGQuery
function Get-MyGQuery
{
  <#
    .SYNOPSIS
      Query Graph API
    .DESCRIPTION
      Query Graph API
    .PARAMETER AuthToken
    .PARAMETER Version
    .PARAMETER Resource
    .PARAMETER All
    .EXAMPLE
      Get-MyGQuery -AuthToken $AuthToken -Resource $Resource
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Hashtable]$AuthToken = $Script:Authtoken,
    [ValidateSet("Beta", "v1.0")]
    [String]$Version = "Beta",
    [parameter(Mandatory = $True)]
    [String]$Resource,
    [Switch]$All,
    [Int]$Wait = 100
  )
  Write-Verbose -Message "Enter Function Get-MyGQuery"

  $Uri = "https://graph.microsoft.com/$($Version)/$($Resource)"
  Do
  {
    Write-Verbose -Message "Query Graph API"
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:$False
    if ($ReturnData.StatusCode -eq 200)
    {
      $Content = $ReturnData.Content | ConvertFrom-Json
      if (@($Content.PSObject.Properties.match("value")).Count)
      {
        $Content.Value
      }
      else
      {
        $Content
      }
      $Uri = ($Content."@odata.nextLink")
      Start-Sleep -Milliseconds $Wait
    }
    else
    {
      $Uri = $Null
    }
  }
  While ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)

  Write-Verbose -Message "Exit Function Get-MyGQuery"
}
#endregion function Get-MyGQuery

#region function Send-MyGraphMail
Function Send-MyGraphMail
{
  <#
    .SYNOPSIS
      Send Mail via Graph API
    .DESCRIPTION
      Send Mail via Graph API
    .PARAMETER Version
    .PARAMETER AuthToken
    .PARAMETER UsedID
    .PARAMETER Subject
    .PARAMETER Body
    .PARAMETER AsText
    .PARAMETER To
    .PARAMETER Mention
    .PARAMETER CC
    .PARAMETER BCC
    .PARAMETER ReplyTo
    .PARAMETER Importance
    .PARAMETER Flagged
    .PARAMETER DeliveryReceipt
    .PARAMETER ReadReceipt
    .PARAMETER Attachments
    .PARAMETER SaveToSent
    .EXAMPLE
      Send-MyGraphMail -Subject $Subject -Body $Body -To $To -AuthToken $AuthToken
    .NOTES
      Original Function By Ken Sweet
      23/06/08 Add Mention Option
  #>
  [CmdletBinding(DefaultParameterSetName = "Me")]
  Param (
    [ValidateSet("v1.0", "Beta")]
    [String]$Version = "Beta",
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True, ParameterSetName = "User")]
    [String]$UsedID,
    [parameter(Mandatory = $True)]
    [String]$Subject,
    [parameter(Mandatory = $True)]
    [String]$Body,
    [Switch]$AsText,
    [parameter(Mandatory = $True)]
    [System.Net.Mail.MailAddress[]]$To,
    [System.Net.Mail.MailAddress[]]$Mention,
    [System.Net.Mail.MailAddress[]]$CC,
    [System.Net.Mail.MailAddress[]]$BCC,
    [System.Net.Mail.MailAddress[]]$ReplyTo,
    [System.Net.Mail.MailAddress]$From,
    [ValidateSet("Low", "Normal", "High")]
    [String]$Importance = "Normal",
    [Switch]$Flagged,
    [Switch]$DeliveryReceipt,
    [Switch]$ReadReceipt,
    [String[]]$Attachments,
    [Switch]$SaveToSent
  )
  Write-Verbose -Message "Enter Function Send-MyGraphMail"
  
  $Message = [Ordered]@{ "Message" = [Ordered]@{ "Subject" = $Subject } }
  
  If ($AsText.IsPresent)
  {
    [Void]$Message.Message.Add("Body", [Ordered]@{ "ContentType" = "TEXT" })
  }
  Else
  {
    [Void]$Message.Message.Add("Body", [Ordered]@{ "ContentType" = "HTML" })
  }
  
  [Void]$Message.Message.Body.Add("Content", $Body)
  [Void]$Message.Message.Add("Importance", $Importance)
  [Void]$Message.Message.Add("isDeliveryReceiptRequested", ($DeliveryReceipt.IsPresent.ToString()))
  [Void]$Message.Message.Add("isReadReceiptRequested", ($ReadReceipt.IsPresent.ToString()))
  
  If ($Flagged.IsPresent)
  {
    [Void]$Message.Message.Add("flag", [Ordered]@{ "flagStatus" = "flagged" })
    [Void]$Message.Message.Flag.Add("dueDateTime", [Ordered]@{ "dateTime" = ([DateTime]::Now.ToString("yyyy-MM-ddT23:59:59")); "timeZone" = ([TimeZone]::CurrentTimeZone.StandardName) })
    [Void]$Message.Message.Flag.Add("startDateTime", [Ordered]@{ "dateTime" = ([DateTime]::Now.ToString("yyyy-MM-ddT23:59:59")); "timeZone" = ([TimeZone]::CurrentTimeZone.StandardName) })
  }
  
  If ($PSBoundParameters.ContainsKey("From"))
  {
    [Void]$Message.Message.Add("from", [Ordered]@{ "emailAddress" = @{ "address" = ($From.Address) } })
  }
  
  [Void]$Message.Message.Add("toRecipients", ([System.Collections.ArrayList]::New()))
  $TO | ForEach-Object -Process { [Void]$Message.Message.toRecipients.Add(@{ "emailAddress" = @{ "address" = ($PSItem.Address) } }) }
  
  If ($PSBoundParameters.ContainsKey("$Mention"))
  {
    [Void]$Message.Message.Add("Mentions", ([System.Collections.ArrayList]::New()))
    $Mention | ForEach-Object -Process { [Void]$Message.Message.Mentions.Add(@{ "Mentioned" = @{ "name" = ($PSItem.Address); "address" = ($PSItem.Address) } }) }
  }
  
  If ($PSBoundParameters.ContainsKey("CC"))
  {
    [Void]$Message.Message.Add("ccRecipients", ([System.Collections.ArrayList]::New()))
    $CC | ForEach-Object -Process { [Void]$Message.Message.ccRecipients.Add(@{ "emailAddress" = @{ "address" = ($PSItem.Address) } }) }
  }
  
  If ($PSBoundParameters.ContainsKey("BCC"))
  {
    [Void]$Message.Message.Add("bccRecipients", ([System.Collections.ArrayList]::New()))
    $BCC | ForEach-Object -Process { [Void]$Message.Message.bccRecipients.Add(@{ "emailAddress" = @{ "address" = ($PSItem.Address) } }) }
  }
  
  If ($PSBoundParameters.ContainsKey("ReplyTo"))
  {
    [Void]$Message.Message.Add("replyTo", ([System.Collections.ArrayList]::New()))
    $ReplyTo | ForEach-Object -Process { [Void]$Message.Message.replyTo.Add(@{ "emailAddress" = @{ "address" = ($PSItem.Address) } }) }
  }
  
  If ($PSBoundParameters.ContainsKey("Attachments"))
  {
    [Void]$Message.Message.Add("Attachments", ([System.Collections.ArrayList]::New()))
    ForEach ($File In $Attachments)
    {
      If ([System.IO.File]::Exists($File))
      {
        $Base64Encode = [Convert]::ToBase64String(([System.IO.File]::ReadAllBytes($File)))
        [Void]$Message.Message.attachments.Add([Ordered]@{ "@odata.type" = "#microsoft.graph.fileAttachment"; "Name" = ([System.IO.Path]::GetFileName($File)); "contentType" = "MIME types"; "contentBytes" = "$($Base64Encode)" })
      }
    }
  }
  
  [Void]$Message.Add("saveToSentItems", ($SaveToSent.IsPresent.ToString()))
  
  If ($PSCmdlet.ParameterSetName -eq "Me")
  {
    $Uri = "https://graph.microsoft.com/$($Version)/me/sendmail"
  }
  Else
  {
    $Uri = "https://graph.microsoft.com/$($Version)/users/$($UserID)/sendmail"
  }
  
  $Result = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Headers $AuthToken -Method Post -Body ($Message | ConvertTo-Json -Depth 99)
  
  [PSCustomObject]@{ "Success" = ($Result.StatusCode -eq 202) }
  
  Write-Verbose -Message "Exit Function Send-MyGraphMail"
}
#endregion function Send-MyGraphMail

#region function Send-MSTeamNotification
function Send-MSTeamNotification ()
{
  <#
    .SYNOPSIS
      Send MS Teams WebHook Notification
    .DESCRIPTION
      Send MS Teams WebHook Notification
    .PARAMETER Value
    .PARAMETER WebHookUri
      MS teams WebHoot Uri
    .PARAMETER ThemeColor
      Message Theme Coloe
    .PARAMETER Title
      Message Title
    .PARAMETER Subtitle
      Message Sub Title
    .PARAMETER Facts
      Facts to Display
    .PARAMETER Image
      Nine Test Images 1 - 9
      https://teamsnodesample.azurewebsites.net/static/img/image#.png
    .PARAMETER Button
      Buttons to Display
    .EXAMPLE
      $WebHookURI = "https://Web Hook URL"
      $Title = "Title"
      $Subtitle = "Subtitle"
      $Facts = [Ordered]@{
        "Fact 1 Name" = "Fact 1 Value"
        "Fact 2 Name" = "Fact 2 Value"
      }
      $Buttons = [Ordered]@{
        "Button01" = "http://www.intel.com"
        "Button02" = "http://www.microsoft.com"
      }

      Send-MSTeamNotification -WebHookUri $WebHookURI -Title $Title -Subtitle $Subtitle -Facts $Facts -Button $Buttons
    .NOTES
      Original Function By Ken Sweet

      7/28/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "Simple")]
  param (
    [parameter(Mandatory = $True)]
    [String]$WebHookUri,
    [String]$ThemeColor = "0076D7",
    [parameter(Mandatory = $True)]
    [String]$Title,
    [parameter(Mandatory = $True)]
    [String]$Subtitle,
    [String]$Text,
    [String]$Message,
    [System.Collections.Specialized.OrderedDictionary]$Facts,
    [ValidateRange(0, 9)]
    [Int]$Image = 9,
    [parameter(Mandatory = $True, ParameterSetName = "Button")]
    [System.Collections.Specialized.OrderedDictionary]$Button
  )
  Write-Verbose -Message "Enter Function Send-MSTeamNotification"

  $JSon = [Ordered]@{}
  [Void]$JSon.Add("@type", "MessageCard")
  [Void]$JSon.Add("@context", "http://schema.org/extensions")
  [Void]$JSon.Add("themeColor", $ThemeColor)
  [Void]$JSon.Add("summary", $Title)
  [Void]$JSon.Add("sections", [System.Collections.ArrayList]::New())
  [Void]$JSon.Sections.Add([Ordered]@{"activityTitle" = $Title})
  [Void]$JSon.Sections[0].Add("activitySubtitle", $Subtitle)
  if ($PSBoundParameters.ContainsKey("Text"))
  {
    [Void]$JSon.Sections[0].Add("activityText", $Text)
  }
  [Void]$JSon.Sections[0].Add("activityImage", "https://teamsnodesample.azurewebsites.net/static/img/image$($Image).png")
  if ($PSBoundParameters.ContainsKey("Message"))
  {
    [Void]$JSon.Sections[0].Add("Text", $Message)
  }
  if ($PSBoundParameters.ContainsKey("Facts"))
  {
    [Void]$JSon.Sections[0].Add("facts", [System.Collections.ArrayList]::New())
    foreach ($Fact in $Facts.Keys) 
    {
      [Void]$JSon.Sections[0].Facts.Add(([Ordered]@{"name" = $Fact; "value" = $Facts[$Fact]}))
    }
  }
  [Void]$JSon.Sections[0].Add("markdown", "true")
  if ($PSCmdlet.ParameterSetName -eq "Button")
  {
    [Void]$JSon.Add("potentialAction", [System.Collections.ArrayList]::New())
    foreach ($Btn in $Button.Keys)
    {
      [Void]$JSon.potentialAction.Add([Ordered]@{"@type" = "OpenUri"})
      [Void]$JSon.potentialAction[($JSon.potentialAction.Count - 1)].Add("name", $Btn)
      [Void]$JSon.potentialAction[($JSon.potentialAction.Count - 1)].Add("targets", [System.Collections.ArrayList]::New())
      [Void]$JSon.potentialAction[($JSon.potentialAction.Count - 1)].targets.Add(@{"os" = "default"; "uri" = $Button[$Btn]})
    }
  }
  Invoke-RestMethod -Uri $WebHookURI -Method Post -Body ($JSon | ConvertTo-Json -Depth 99) -ContentType 'application/json' -ErrorAction "SilentlyContinue" | Out-Null

  Write-Verbose -Message "Exit Function Send-MSTeamNotification"
}
#endregion function Send-MSTeamNotification

#region function Verify-MyPIMRoleActived
Function Verify-MyPIMRoleActived ()
{
  <#
    .SYNOPSIS
      Verify PIM Role has been Activated
    .DESCRIPTION
      Verify PIM Role has been Activateds
    .PARAMETER RoleName
      Name of Entra PIm Role
    .PARAMETER RoleID
      ID of Entra PIm Role
    .PARAMETER UserName
      UPN of User Account
    .PARAMETER UserID
      ID is User Account
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleID $RoleID
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleID $RoleID -UserID $UserID
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleID $RoleID -UserName $UserName
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleName $RoleName
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleName $RoleName -UserID $UserID
    .EXAMPLE
      $PIMRoleActivated = Verify-MyPIMRoleActived -RoleName $RoleName -UserName $UserName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "MeRoleName")]
  Param (
    [parameter(Mandatory = $True, ParameterSetName = "MeRoleName")]
    [parameter(Mandatory = $True, ParameterSetName = "UserIDRoleName")]
    [parameter(Mandatory = $True, ParameterSetName = "UserNameRoleName")]
    [String]$RoleName,
    [parameter(Mandatory = $True, ParameterSetName = "MeRoleID")]
    [parameter(Mandatory = $True, ParameterSetName = "UserIDRoleID")]
    [parameter(Mandatory = $True, ParameterSetName = "UserNameRoleID")]
    [String]$RoleID,
    [parameter(Mandatory = $True, ParameterSetName = "UserNameRoleName")]
    [parameter(Mandatory = $True, ParameterSetName = "UserNameRoleID")]
    [String]$UserName,
    [parameter(Mandatory = $True, ParameterSetName = "UserIDRoleName")]
    [parameter(Mandatory = $True, ParameterSetName = "UserIDRoleID")]
    [String]$UserID
  )
  Write-Verbose -Message "Enter Function Verify-MyPIMRoleActived"
  
  Switch -wildcard ($PSCmdlet.ParameterSetName)
  {
    "Me*"
    {
      $TmpMe = Invoke-MgGraphRequest -Method Get -Uri "https://graph.microsoft.com/v1.0/Me?`$Select=ID"
      If ([String]::IsNullOrEmpty($TmpMe.ID))
      {
        $UserID = "UnknownUserID"
      }
      Else
      {
        $UserID = $TmpMe.ID
      }
      Break
    }
    "UserName*"
    {
      Try
      {
        $TmpUser = Invoke-MgGraphRequest -Method Get -Uri "https://graph.microsoft.com/v1.0/users/$($UserName)?`$Select=ID"
        If ([String]::IsNullOrEmpty($TmpUser.ID))
        {
          $UserID = "UnknownUserID"
        }
        Else
        {
          $UserID = $TmpUser.ID
        }
      }
      Catch
      {
        $UserID = "UnknownUserID"
      }
      Break
    }
  }
  
  If ($PSCmdlet.ParameterSetName -like "*RoleName")
  {
    $TmpRole = Invoke-MgGraphRequest -Method Get -Uri "https://graph.microsoft.com/v1.0/directoryRoles?`$filter=DisplayName eq '$($RoleName)'&`$Select=ID"
    $RoleID = $TmpRole.Value.ID
  }
  
  If ([String]::IsNullOrEmpty($RoleID) -or ($UserID -eq "UnknownUserID"))
  {
    # Role Not Found
    [PSCustomObject]@{
      "Activated" = $False
      "UserID"    = $UserID
      "UPN"       = $UserName
      "RoleID"    = $RoleID
      "RoleName"  = $RoleName
    }
  }
  else
  {
    $ChkRoleMember = Invoke-MgGraphRequest -Method Get -Uri "https://graph.microsoft.com/v1.0/directoryRoles/$($RoleID)/Members?`$filter=id eq '$($UserID)'&`$Select=ID,userPrincipalName"
    If ([String]::IsNullOrEmpty($ChkRoleMember.Value.ID))
    {
      # User is Not a Member
      [PSCustomObject]@{
        "Activated" = $False
        "UserID"    = $UserID
        "UPN"       = $UserName
        "RoleID"    = $RoleID
        "RoleName"  = $RoleName
      }
    }
    Else
    {
      # User is a Member
      [PSCustomObject]@{
        "Activated" = $True
        "UserID"    = $ChkRoleMember.Value.ID
        "UPN"       = $ChkRoleMember.Value.userPrincipalName
        "RoleID"    = $RoleID
        "RoleName"  = $RoleName
      }
    }
  }
  
  Write-Verbose -Message "Exit Function Verify-MyPIMRoleActived"
}
#endregion function Verify-MyPIMRoleActived

#endregion ******* Microsoft GraphAPI Functions ********

#region ******* SharePoint Rest API Functions ********

#region function Get-MySPLists
function Get-MySPLists ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .EXAMPLE
      Get-MySPLists -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName
    .EXAMPLE
      Get-MySPLists -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName
    .EXAMPLE
      Get-MySPLists -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID
  )
  Write-Verbose -Message "Enter Function Get-MySPLists"
  
  # Set Get List By Name or ID
  switch ($PSCmdlet.ParameterSetName)
  {
    "ByName"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      break
    }
    "ByID"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  # Invoke SharePoint Rest API
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)?`$select=Id,Title,ListItemEntityTypeFullName,ItemCount,LastItemDeletedDate,LastItemModifiedDate,LastItemUserModifiedDate"
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri $Uri -Headers $AuthToken -ErrorAction SilentlyContinue
  if ($ReturnData.StatusCode -eq 200)
  {
    if ($PSCmdlet.ParameterSetName -eq "Default")
    {
      # Return List of SharePoint Lists
      ($ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate
    }
    else
    {
      # Return SharePoint List
      ($ReturnData.Content | ConvertFrom-Json).d | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate
    }
  }
  
  Write-Verbose -Message "Exit Function Get-MySPLists"
}
#endregion function Get-MySPLists

#region function Get-MySPListFields
function Get-MySPListFields ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .EXAMPLE
      Get-MySPListFields -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName
    .EXAMPLE
      Get-MySPListFields -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID
  )
  Write-Verbose -Message "Enter Function Get-MySPListFields"
  
  # Set Get List By Name or ID
  switch ($PSCmdlet.ParameterSetName)
  {
    "ByName"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      Break
    }
    "ByID"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  # Invoke SharePoint Rest API
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Fields?`$filter=ReadOnlyField eq false&`$select=Id,Title,StaticName,InternalName,Required,ReadOnlyField,EnforceUniqueValues,FieldTypeKind,TypeAsString,TypeDisplayName"
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri $Uri -Headers $AuthToken -ErrorAction SilentlyContinue
  if ($ReturnData.StatusCode -eq 200)
  {
    # Return List of SharePoint List Fields
    ($ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, StaticName, InternalName, Required, ReadOnlyField, EnforceUniqueValues, FieldTypeKind, TypeAsString, TypeDisplayName
  }
  
  Write-Verbose -Message "Exit Function Get-MySPListFields"
}
#endregion function Get-MySPListFields

#region function Get-MySPListItems
function Get-MySPListItems ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ItemID
      ID of the SharePoint List Item
    .PARAMETER Top
      Max Number of Items to Return
    .PARAMETER Fields
      Name of the Fields to Return
    .PARAMETER Created
      Date Item was Created
    .PARAMETER Modified
      Date Item was Modified
    .PARAMETER All
      Return all List Items
    .EXAMPLE
      Get-MySPListItems -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -Created "3/3/2023 10:00 am"
    .EXAMPLE
      Get-MySPListItems -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -Modified "3/3/2023 11:45"
    .EXAMPLE
      Get-MySPListItems -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -ItemID 13
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByNameFilter")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByNameItemId")]
    [parameter(Mandatory = $True, ParameterSetName = "ByNameFilter")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByIDItemId")]
    [parameter(Mandatory = $True, ParameterSetName = "ByIDFilter")]
    [String]$ListID,
    [parameter(Mandatory = $True, ParameterSetName = "ByNameItemId")]
    [parameter(Mandatory = $True, ParameterSetName = "ByIDItemId")]
    [Int]$ItemID,
    [ValidateRange(1, 1000)]
    [Int]$Top = 100,
    [String[]]$Fields = "*",
    [parameter(Mandatory = $False, ParameterSetName = "ByNameFilter")]
    [parameter(Mandatory = $False, ParameterSetName = "ByIDFilter")]
    [DateTime]$Created,
    [parameter(Mandatory = $False, ParameterSetName = "ByNameFilter")]
    [parameter(Mandatory = $False, ParameterSetName = "ByIDFilter")]
    [DateTime]$Modified,
    [parameter(Mandatory = $False, ParameterSetName = "ByNameFilter")]
    [parameter(Mandatory = $False, ParameterSetName = "ByIDFilter")]
    [Switch]$All
  )
  Write-Verbose -Message "Enter Function Get-MySPListItems"
  
  # Set Get List By Name or ID
  switch -wildcard ($PSCmdlet.ParameterSetName)
  {
    "ByName*"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      break
    }
    "ByID*"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  # Configure Initial Rest API Query Uri
  if ($PSCmdlet.ParameterSetName -like "*Filter")
  {
    if ($PSBoundParameters.ContainsKey("Created") -or $PSBoundParameters.ContainsKey("Modified"))
    {
      if ($PSBoundParameters.ContainsKey("Created"))
      {
        $TmpValName = "Created"
        $TmpTime = $Created.ToUniversalTime().ToString("s")
      }
      else
      {
        $TmpValName = "Modified"
        $TmpTime = $Modified.ToUniversalTime().ToString("s")
      }
      $TmpFilter = "&`$filter=$($TmpValName) gt '$($TmpTime)Z'"
    }
    $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items?`$top=$($Top)&`$orderby=Modified desc$($TmpFilter)"
  }
  else
  {
    $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))"
  }
  
  do
  {
    # Invoke SharePoint Rest API
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri $Uri -Headers $AuthToken -ErrorAction SilentlyContinue
    if ($ReturnData.StatusCode -eq 200)
    {
      $TmpData = ($ReturnData.Content -replace "`"Id`"", "`"ID`"" | ConvertFrom-Json).d
      if ($PSCmdlet.ParameterSetName -like "*Filter")
      {
        # Return Items Found by ID
        $TmpData.results | Select-Object -Property $Fields
      }
      else
      {
        # Return Item Found by ID
        $TmpData | Select-Object -Property $Fields
      }
      $Uri = $TmpData."__next"
    }
    else
    {
      $Uri = $Null
    }
  }
  while ((-not [String]::IsNullOrEmpty($Uri)) -and $All.IsPresent)
  
  Write-Verbose -Message "Exit Function Get-MySPListItems"
}
#endregion function Get-MySPListItems

#region function New-MySPListItem
function New-MySPListItem ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ListItemName
      Typoe name of the SharePoint List items
    .PARAMETER Item
      HashTable of New Item Fields
    .PARAMETER PassThru
      Return Created Item
    .EXAMPLE
      $NewItem = [Ordered]@{"Title" = "New Item Title"}
      $NewItem.Add("Choice", "Choice 1")
      $NewItem.Add("MultiLine", "Text Line 01`r`nText Line 02")
      $NewItem.Add("Number", 1)
      $NewItem.Add("YesNo", "True")
      $NewItem.Add("Currency", 1.2)
      $NewItem.Add("LookupId", 1) # Name of Field with Id added to the End
      $NewItem.Add("HyperLink", [Ordered]@{"__metadata" = @{ "type" = "SP.FieldUrlValue"}})
      $NewItem.HyperLink.Add("Description", "Text Description")
      $NewItem.HyperLink.Add("Url", "https://www.nytimes.com/games/wordle/index.html")

      New-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -Item $NewItem
    .EXAMPLE
      New-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -ListItemName $ListItemName -Item $NewItem
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListItemName,
    [parameter(Mandatory = $True)]
    [HashTable]$Item,
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MySPListItem"
  
  $Body = $Item.Clone()
  
  # Set Get List By Name or ID
  switch ($PSCmdlet.ParameterSetName)
  {
    "ByName"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      [Void]$Body.Add("__metadata", @{"type" = "SP.Data.$($ListName.Replace(' ', '_x0020_'))ListItem"})
      break
    }
    "ByID"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      [Void]$Body.Add("__metadata", @{"type" = $ListItemName})
      break
    }
  }
  
  # Invoke SharePoint Rest API
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items"
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri $Uri -Headers $AuthToken -Body ($Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue
  if ($ReturnData.StatusCode -eq 201)
  {
    if ($PassThru.IsPresent)
    {
      # Return New SharePoint List Item
      ($ReturnData.Content -replace "`"Id`"", "`"ID`"" | ConvertFrom-Json).d
    }
  }
  
  Write-Verbose -Message "Exit Function New-MySPListItem"
}
#endregion function New-MySPListItem

#region function Update-MySPListItem
function Update-MySPListItem ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ListItemName
      Typoe name of the SharePoint List items
    .PARAMETER ItemID
      ID of the SharePoint List Item
    .PARAMETER Item
      HashTable of Updated Item Fields
    .PARAMETER PassThru
      Return Created Item
    .EXAMPLE
      $UpdatedItem = [Ordered]@{"Title" = "Updated Item Title"}
      $UpdatedItem.Add("Choice", "Choice 1")
      $UpdatedItem.Add("MultiLine", "Text Line 01`r`nText Line 02")
      $UpdatedItem.Add("Number", 1)
      $UpdatedItem.Add("YesNo", "True")
      $UpdatedItem.Add("Currency", 1.2)
      $UpdatedItem.Add("LookupId", 1) # Name of Field with Id added to the End
      $UpdatedItem.Add("HyperLink", [Ordered]@{"__metadata" = @{ "type" = "SP.FieldUrlValue"}})
      $UpdatedItem.HyperLink.Add("Description", "Text Description")
      $UpdatedItem.HyperLink.Add("Url", "https://www.nytimes.com/games/wordle/index.html")
  
      Update-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -ItemID $ItemID -Item $UpdatedItem
    .EXAMPLE
      Update-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -ListItemName $ListItemName -ItemID $ItemID -Item $UpdatedItem
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListItemName,
    [parameter(Mandatory = $True)]
    [Int]$ItemID,
    [parameter(Mandatory = $True)]
    [HashTable]$Item,
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function Update-MySPListItem"
  
  $Body = $Item.Clone()
  
  # Set Get List By Name or ID
  switch ($PSCmdlet.ParameterSetName)
  {
    "ByName"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      [Void]$Body.Add("__metadata", @{"type" = "SP.Data.$($ListName.Replace(' ', '_x0020_'))ListItem"})
      break
    }
    "ByID"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      [Void]$Body.Add("__metadata", @{"type" = $ListItemName})
      break
    }
  }
  
  # Add If-Match Header Parameter
  $MergeToken = $AuthToken.Clone()
  [Void]$MergeToken.Add("If-Match", "*")
  
  # Invoke SharePoint Rest API
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))"
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Patch -Uri $Uri -Headers $MergeToken -Body ($Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue
  if ($ReturnData.StatusCode -eq 204)
  {
    if ($PassThru.IsPresent)
    {
      $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri $Uri -Headers $AuthToken -ErrorAction SilentlyContinue
      if ($ReturnData.StatusCode -eq 200)
      {
        # Return Updated SharePoint List Item
        ($ReturnData.Content -replace "`"Id`"", "`"ID`"" | ConvertFrom-Json).d
      }
    }
  }
  
  Write-Verbose -Message "Exit Function Update-MySPListItem"
}
#endregion function Update-MySPListItem

#region function Delete-MySPListItem
function Delete-MySPListItem ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ListItemName
      Typoe name of the SharePoint List items
    .PARAMETER ItemID
      ID of the SharePoint List Item
    .EXAMPLE
      Delete-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -ItemID $ItemID
    .EXAMPLE
      Delete-MySPListItem -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -ListItemName $ListItemName -ItemID $ItemID
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListItemName,
    [parameter(Mandatory = $True)]
    [Int]$ItemID
  )
  Write-Verbose -Message "Enter Function Delete-MySPListItem"
  
  # Set Get List By Name or ID
  switch ($PSCmdlet.ParameterSetName)
  {
    "ByName"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      break
    }
    "ByID"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  # Add If-Match Header Parameter
  $DeleteToken = $AuthToken.Clone()
  [Void]$DeleteToken.Add("If-Match", "*")
  
  # Invoke SharePoint Rest API
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))"
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Delete -Uri $Uri -Headers $DeleteToken -ErrorAction SilentlyContinue
  if ($ReturnData.StatusCode -eq 200)
  {
    # Return Delete Success
    [PSCustomObject]@{"Success" = $True}
  }
  else
  {
    # Return Delete Failed
    [PSCustomObject]@{"Success" = $False}
  }
  
  Write-Verbose -Message "Exit Function Delete-MySPListItem"
}
#endregion function Delete-MySPListItem

#region function Get-MySPListItemAttachment
function Get-MySPListItemAttachment ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ItemID
      ID of the SharePoint List Item
    .PARAMETER Attachment
      Name of the Attachment to Return
    .EXAMPLE
      Get-MySPListItemAttachment -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -ItemID $ItemID
    .EXAMPLE
      Get-MySPListItemAttachment -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -ItemID $ItemID
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID,
    [parameter(Mandatory = $True)]
    [Int]$ItemID,
    [String[]]$Attachment = "None"
  )
  Write-Verbose -Message "Enter Function Get-MySPListItemAttachment"
  
  # Set Get List By Name or ID
  switch -wildcard ($PSCmdlet.ParameterSetName)
  {
    "ByName*"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      break
    }
    "ByID*"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  if ($Attachment -eq "None")
  {
    $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))/AttachmentFiles"
  }
  else
  {
    $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))/AttachmentFiles/getByFileName('{0}')"
  }
  
  foreach ($FileName in $Attachment)
  {
    # Invoke SharePoint Rest API
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri ($Uri -f $FileName) -Headers $AuthToken -ErrorAction SilentlyContinue
    if ($ReturnData.StatusCode -eq 200)
    {
      # Return Attachment Success
      if ($Attachment -eq "None")
      {
        ($ReturnData.Content | ConvertFrom-Json).d.Results | ForEach-Object -Process { [PSCustomObject]@{ "FileName" = $PSItem.FileName; "Url" = "https://$($TenantName).sharepoint.com$($PSItem.ServerRelativeUrl)" } }
      }
      else
      {
        ($ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ "FileName" = $PSItem.FileName; "Url" = "https://$($TenantName).sharepoint.com$($PSItem.ServerRelativeUrl)" } }
      }
    }
  }
  
  Write-Verbose -Message "Exit Function Get-MySPListItemAttachment"
}
#endregion function Get-MySPListItemAttachment

#region function Add-MySPListItemAttachment
function Add-MySPListItemAttachment ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER AuthToken
      SharePoint Reast API AuthToken
    .PARAMETER TenantName
      Name of the Azure Tenant
    .PARAMETER SiteName
      Name of the SharePoint Site
    .PARAMETER ListName
      Name of the SharePoint List
    .PARAMETER ListID
      ID of the SharePoint List
    .PARAMETER ItemID
      ID of the SharePoint List Item
    .PARAMETER Attachment
      Name of the Attachment to Return
    .EXAMPLE
      Add-MySPListItemAttachment -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListName $ListName -ItemID $ItemID -Attachment "C:\File1.Ext", "C:\File2.Ext"
    .EXAMPLE
      Add-MySPListItemAttachment -AuthToken $AuthToken -TenantName $TenantName -SiteName $SiteName -ListID $ListID -ItemID $ItemID -Attachment "C:\File1.Ext", "C:\File2.Ext"
    .NOTES
      Original Function By Ken Sweet
      
      2023-03-03 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "ByName")]
  param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$TenantName,
    [parameter(Mandatory = $True)]
    [String]$SiteName,
    [parameter(Mandatory = $True, ParameterSetName = "ByName")]
    [String]$ListName,
    [parameter(Mandatory = $True, ParameterSetName = "ByID")]
    [String]$ListID,
    [parameter(Mandatory = $True)]
    [Int]$ItemID,
    [String[]]$Attachment
  )
  Write-Verbose -Message "Enter Function Add-MySPListItemAttachment"
  
  # Set Get List By Name or ID
  switch -wildcard ($PSCmdlet.ParameterSetName)
  {
    "ByName*"
    {
      $TmpGetBy = "/getbytitle('$($ListName)')"
      break
    }
    "ByID*"
    {
      $TmpGetBy = "(guid'$($ListID)')"
      break
    }
  }
  
  $Uri = "https://$($TenantName).sharepoint.com/sites/$($SiteName)/_api/web/lists$($TmpGetBy)/Items($($ItemID))/AttachmentFiles/add(FileName='{0}')"
  foreach ($FilePath in $Attachment)
  {
    # Invoke SharePoint Rest API
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri ($Uri -f [System.IO.Path]::GetFileName($FilePath)) -Headers $AuthToken -InFile $FilePath -ContentType "application/octet-stream" -ErrorAction SilentlyContinue
    if ($ReturnData.StatusCode -eq 200)
    {
      # Return Delete Success
      ($ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ "FileName" = $PSItem.FileName; "Url" = "https://$($TenantName).sharepoint.com$($PSItem.ServerRelativeUrl)" } }
    }
  }
  
  Write-Verbose -Message "Exit Function Add-MySPListItemAttachment"
}
#endregion function Add-MySPListItemAttachment

#endregion ******* SharePoint Rest API Functions ********

#region ******* Azure AD Storage Table Functions ********

#region function Get-MyTableQuery
function Get-MyTableQuery ()
{
  <#
    .SYNOPSIS
      Query Storage Account Table
    .DESCRIPTION
      Query Storage Account Table
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER TableName
      Name of Storage Account Table
    .PARAMETER Query
      Storage Account Table Query
    .PARAMETER Top
      Top Number of Rows to Return
    .PARAMETER Select
      Property Values to Select
    .PARAMETER PartitionKey
      Table Partition Key
    .PARAMETER RowKey
      Table Row Key
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName
      Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName
    .EXAMPLE
      Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey "PKey1" -RowKey "RKey1"
      Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey "PKey1" -RowKey "RKey1"
    .EXAMPLE
      Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -Query "PartitionKey eq 'PKey2'"
      Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -Query "PartitionKey eq 'PKey2'"
    .EXAMPLE
      Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -Query "PartitionKey eq 'RKey2'" -Top 1
      Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -Query "PartitionKey eq 'RKey2'" -Top 1
    .EXAMPLE
      Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -Query "RowKey eq 'RKey2'" -Select Int32, Text, DateTime
      Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -Query "RowKey eq 'RKey2'" -Select Int32, Text, DateTime
    .EXAMPLE
      For ($C = 0; $C -le 9; $C++)
      {
        #Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey ("PKey{0}" -f $C) -RowKey ("RKey{0}" -f $C)
        Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey ("PKey{0}" -f $C) -RowKey ("RKey{0}" -f $C)
      }
    .EXAMPLE
      For ($C = 0; $C -le 9; $C++)
      {
        #Get-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -Query "PartitionKey eq '$("PKey{0}" -f $C)' and  RowKey eq '$("RKey{0}" -f $C)'" -Select Text, Double
        Get-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -Query "PartitionKey eq '$("PKey{0}" -f $C)' and  RowKey eq '$("RKey{0}" -f $C)'" -Select Text, Double
      }
   .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SASAll")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AKQuery")]
    [parameter(Mandatory = $True, ParameterSetName = "AKKey")]
    [parameter(Mandatory = $True, ParameterSetName = "AKAll")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SASQuery")]
    [parameter(Mandatory = $True, ParameterSetName = "SASKey")]
    [parameter(Mandatory = $True, ParameterSetName = "SASAll")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$TableName,
    [parameter(Mandatory = $True, ParameterSetName = "AKQuery")]
    [parameter(Mandatory = $True, ParameterSetName = "SASQuery")]
    [String]$Query,
    [parameter(Mandatory = $False, ParameterSetName = "AKQuery")]
    [parameter(Mandatory = $False, ParameterSetName = "AKAll")]
    [parameter(Mandatory = $False, ParameterSetName = "SASQuery")]
    [parameter(Mandatory = $False, ParameterSetName = "SASAll")]
    [Int]$Top,
    [String[]]$Select,
    [parameter(Mandatory = $True, ParameterSetName = "AKKey")]
    [parameter(Mandatory = $True, ParameterSetName = "SASKey")]
    [String]$PartitionKey,
    [parameter(Mandatory = $True, ParameterSetName = "AKKey")]
    [parameter(Mandatory = $True, ParameterSetName = "SASKey")]
    [String]$RowKey,
    [String]$Version = "2020-10-02",
    [Switch]$All

  )
  Write-Verbose -Message "Enter Function Get-MyTableQuery"

  $ArrayList = [System.Collections.ArrayList]::New()
  Switch -regex ($PSCmdlet.ParameterSetName)
  {
    "Key"
    {
      $Key = "PartitionKey='$($PartitionKey)',RowKey='$($RowKey)'"
      Break
    }
    "Query"
    {
      [Void]$ArrayList.Add("`$filter=$($Query)")
      Break
    }
  }
  if ($PSBoundParameters.ContainsKey("Top"))
  {
    [Void]$ArrayList.Add("`$top=$($Top)")
  }
  if ($PSBoundParameters.ContainsKey("Select"))
  {
    [Void]$ArrayList.Add("`$select=$(($Select -join ","))")
  }
  if ($ArrayList.Count)
  {
    $TableQuery = "?$($ArrayList -join "&")"
    $SASJoin = "&"
  }
  else
  {
    $SASJoin = "?"
  }

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
    "Accept"       = "application/json;odata=fullmetadata"
  }
  if ($PSCmdlet.ParameterSetName -like "AK*")
  {
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("$($GMTTime)`n/$($StorageAccount)/$($tableName)($($Key))")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }

  Do
  {
    if ($PSCmdlet.ParameterSetName -like "AK*")
    {
      $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))$($TableQuery)$($NextRecords)"
    }
    else
    {
      $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))$($TableQuery)$($NextRecords)$($SASJoin)$($SAS)"
    }
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri $Uri -Headers $Headers -ContentType application/json
    if ($ReturnData.StatusCode -eq 200)
    {
      $Content = $ReturnData.Content | ConvertFrom-Json
      if (@($Content.PSObject.Properties.match("value")).Count)
      {
        $Content.Value | Select-Object -Property * -ExcludeProperty odata*
      }
      else
      {
        $Content | Select-Object -Property * -ExcludeProperty odata*
      }
      if ($ReturnData.Headers.ContainsKey("x-ms-continuation-NextPartitionKey"))
      {
        $NextRecords = "$($SASJoin)NextPartitionKey=$($ReturnData.Headers["x-ms-continuation-NextPartitionKey"])&NextRowKey=$($ReturnData.Headers["x-ms-continuation-NextRowKey"])"
        $SASJoin = "&"
      }
    }
    else
    {
      break
    }
  }
  while (($ReturnData.StatusCode -eq 200) -and ($ReturnData.Headers.ContainsKey("x-ms-continuation-NextPartitionKey")) -and $All.IsPresent)

  Write-Verbose -Message "Exit Function Get-MyTableQuery"
}
#endregion function Get-MyTableQuery

#region function Add-MyTableQuery
function Add-MyTableQuery ()
{
  <#
    .SYNOPSIS
      Add / Update a Storage Table Data Row
    .DESCRIPTION
      Add / Update a Storage Table Data Row
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER TableName
      Name of Storage Account Table
    .PARAMETER PartitionKey
      Table Partition Key
    .PARAMETER RowKey
      Table Row Key
    .PARAMETER Body
      Update Data
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      For ($A = 0; $A -le 9; $A++)
      {
        For ($B = 0; $B -le 9; $B++)
        {
          $Body = [ordered]@{
            "Text"                = ("Text Value {0}{1}" -f $A, $B)
            "Int32"               = $A
            "DateTime@odata.type" = "Edm.DateTime"
            "DateTime"            = (([DateTime]::Parse(("{0:00}/{1:00}/202{2} {0:00}:{1:00}:{3:00}" -f ($A + 1), ($B + 1), $A, ($A  + $B)))).ToUniversalTime().ToString("O"))
            "GUID@odata.type"     = "Edm.Guid"
            "GUID"                = ([Guid]::NewGuid())
            "Double@odata.type"   = "Edm.Double"
            "Double"              = ([Double]"$($A).$($B)")
          }
          #Add-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
          Add-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
        }
      }
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$TableName,
    [parameter(Mandatory = $True)]
    [String]$PartitionKey,
    [parameter(Mandatory = $True)]
    [String]$RowKey,
    [parameter(Mandatory = $True)]
    [HashTable]$Body,
    [String]$Version = "2020-10-02",
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function Add-MyTableQuery"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  [Void]$Body.Add("PartitionKey", $PartitionKey)
  [Void]$Body.Add("RowKey", $RowKey)
  $Json = $Body | ConvertTo-Json
  $Headers = @{
    "x-ms-date"      = $GMTTime
    "x-ms-version"   = $Version
    "Accept"         = "application/Json;odata=fullmetadata"
    "Content-Length" = $Json.Length
  }
  if (-not $PassThru.IsPresent)
  {
    [Void]$Headers.Add("Prefer", "return-no-content")
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("$($GMTTime)`n/$($StorageAccount)/$($tableName)()")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)()?$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri $Uri -Headers $Headers -Body $Json -ContentType application/json

  if ($ReturnData.StatusCode -in @(201, 204))
  {
    if ($PassThru.IsPresent)
    {
      ($ReturnData.Content | ConvertFrom-Json) | Select-Object -Property * -ExcludeProperty odata*
    }
  }

  Write-Verbose -Message "Exit Function Add-MyTableQuery"
}
#endregion function Add-MyTableQuery

#region function Merge-MyTableQuery
function Merge-MyTableQuery ()
{
  <#
    .SYNOPSIS
      Merge with an Existing Storage Table Data Row
    .DESCRIPTION
      Merge with an Existing Storage Table Data Row
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER TableName
      Name of Storage Account Table
    .PARAMETER PartitionKey
      Table Partition Key
    .PARAMETER RowKey
      Table Row Key
    .PARAMETER Body
      Update Data
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      For ($A = 0; $A -le 9; $A++)
      {
        For ($B = 0; $B -le 9; $B++)
        {
          $Body = [ordered]@{
            "Text"                = ("Text Value {0}{1}" -f $A, $B)
            "Int32"               = $A
            "DateTime@odata.type" = "Edm.DateTime"
            "DateTime"            = (([DateTime]::Parse(("{0:00}/{1:00}/2021 {0:00}:{1:00}" -f ($A + 1), ($B + 1)))).ToUniversalTime().ToString("O"))
            "GUID@odata.type"     = "Edm.Guid"
            "GUID"                = ([Guid]::NewGuid())
            "Double@odata.type"   = "Edm.Double"
            "Double"              = ([Double]"$($A).$($B)")
          }
          #Merge-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
          Merge-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
        }
      }
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$TableName,
    [parameter(Mandatory = $True)]
    [String]$PartitionKey,
    [parameter(Mandatory = $True)]
    [String]$RowKey,
    [parameter(Mandatory = $True)]
    [HashTable]$Body,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Merge-MyTableQuery"

  $Key = "PartitionKey='$($PartitionKey)',RowKey='$($RowKey)'"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Json = $Body | ConvertTo-Json
  $Headers = @{
    "x-ms-date"      = $GMTTime
    "x-ms-version"   = $Version
    "Accept"         = "application/json;odata=fullmetadata"
    "Content-Length" = $Json.Length
    "If-Match"       = "*"
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("$($GMTTime)`n/$($StorageAccount)/$($tableName)($($Key))")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))?$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method MERGE -Uri $Uri -Headers $Headers -Body $Json -ContentType application/json
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }

  Write-Verbose -Message "Exit Function Merge-MyTableQuery"
}
#endregion function Merge-MyTableQuery

#region function Update-MyTableQuery
function Update-MyTableQuery ()
{
  <#
    .SYNOPSIS
      Add / Update a Storage Table Data Row
    .DESCRIPTION
      Add / Update a Storage Table Data Row
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER TableName
      Name of Storage Account Table
    .PARAMETER PartitionKey
      Table Partition Key
    .PARAMETER RowKey
      Table Row Key
    .PARAMETER Body
      Update Data
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      For ($A = 0; $A -le 9; $A++)
      {
        For ($B = 0; $B -le 9; $B++)
        {
          $Body = [ordered]@{
            "Text"                = ("Text Value {0}{1}" -f $A, $B)
            "Int32"               = $A
            "DateTime@odata.type" = "Edm.DateTime"
            "DateTime"            = (([DateTime]::Parse(("{0:00}/{1:00}/2021 {0:00}:{1:00}" -f ($A + 1), ($B + 1)))).ToUniversalTime().ToString("O"))
            "GUID@odata.type"     = "Edm.Guid"
            "GUID"                = ([Guid]::NewGuid())
            "Double@odata.type"   = "Edm.Double"
            "Double"              = ([Double]"$($A).$($B)")
          }
          #Update-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
          Update-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B) -Body $Body
        }
      }
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$TableName,
    [parameter(Mandatory = $True)]
    [String]$PartitionKey,
    [parameter(Mandatory = $True)]
    [String]$RowKey,
    [parameter(Mandatory = $True)]
    [HashTable]$Body,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Update-MyTableQuery"

  $Key = "PartitionKey='$($PartitionKey)',RowKey='$($RowKey)'"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Json = $Body | ConvertTo-Json
  $Headers = @{
    "x-ms-date"      = $GMTTime
    "x-ms-version"   = $Version
    "Accept"         = "application/Json;odata=fullmetadata"
    "Content-Length" = $Json.Length
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("$($GMTTime)`n/$($StorageAccount)/$($tableName)($($Key))")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))?$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri $Uri -Headers $Headers -Body $Json -ContentType application/json
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }

  Write-Verbose -Message "Exit Function Update-MyTableQuery"
}
#endregion function Update-MyTableQuery

#region function Remove-MyTableQuery
function Remove-MyTableQuery ()
{
  <#
    .SYNOPSIS
      Delete an Existing Storage Table Data Row
    .DESCRIPTION
      Delete an Existing Storage Table Data Row
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER TableName
      Name of Storage Account Table
    .PARAMETER PartitionKey
      Table Partition Key
    .PARAMETER RowKey
      Table Row Key
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      For ($A = 0; $A -le 9; $A++)
      {
        For ($B = 0; $B -le 9; $B++)
        {
          #Remove-MyTableQuery -StorageAccount $StorageAccount -SAS $SAS -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B)
          Remove-MyTableQuery -StorageAccount $StorageAccount -AccessKey $AccessKey -TableName $TableName -PartitionKey ("PKey{0}" -f $A) -RowKey ("RKey{0}" -f $B)
        }
      }
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$TableName,
    [parameter(Mandatory = $True)]
    [String]$PartitionKey,
    [parameter(Mandatory = $True)]
    [String]$RowKey,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Remove-MyTableQuery"

  $Key = "PartitionKey='$($PartitionKey)',RowKey='$($RowKey)'"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
    "Accept"       = "application/json;odata=fullmetadata"
    "If-Match"     = "*"
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("$($GMTTime)`n/$($StorageAccount)/$($tableName)($($Key))")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).table.core.windows.net/$($tableName)($($Key))?$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri $Uri -Headers $Headers -ContentType application/json
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }

  Write-Verbose -Message "Exit Function Remove-MyTableQuery"
}
#endregion function Remove-MyTableQuery

#endregion ******* Azure AD Storage Table Functions ********

#region ******* Azure AD Message Queue Functions ********

#region function Add-MyQueueMessage
function Add-MyQueueMessage ()
{
  <#
    .SYNOPSIS
      Add New Message to Queue
    .DESCRIPTION
      Add New Message to Queue
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER QueueName
      Name of Storage Account Table
    .PARAMETER Message
      Message to add to Queue
    .PARAMETER VisibilityTimeout
      Visibility Timeout
    .PARAMETER MessageTTL
      Number of Seconds till Message Expires
    .PARAMETER Encode
      Encode the text Message in Base64
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Add-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName -Message $Message
    .EXAMPLE
      Add-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName -Message $Message
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$QueueName,
    [parameter(Mandatory = $True)]
    [String]$Message,
    [ValidateRange(0, 604800)]
    [Long]$VisibilityTimeout = 1800,
    [ValidateRange(-1, 604800)]
    [Long]$MessageTTL = 604800,
    [Switch]$Encode,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Add-MyQueueMessage"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  if ($Encode.IsPresent)
  {
    $Body = "<QueueMessage><MessageText>$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($Message)))</MessageText></QueueMessage>"
  }
  else
  {
    $Body = "<QueueMessage><MessageText>$($Message)</MessageText></QueueMessage>"
  }
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages?visibilitytimeout=$($VisibilityTimeout)&messagettl=$($MessageTTL)"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("POST`n`napplication/x-www-form-urlencoded`n`nx-ms-date:$($GMTTime)`nx-ms-version:$($version)`n/$($StorageAccount)/$($QueueName)/messages")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages?visibilitytimeout=$($VisibilityTimeout)&messagettl=$($MessageTTL)&$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri $Uri -Headers $Headers -Body $Body -ContentType application/x-www-form-urlencoded
  if ($ReturnData.StatusCode -in @(201))
  {
    ([XML](($ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage
  }

  Write-Verbose -Message "Exit Function Add-MyQueueMessage"
}
#endregion function Add-MyQueueMessage

#region function Clear-MyQueueMessage
function Clear-MyQueueMessage ()
{
  <#
    .SYNOPSIS
      Clean all Messages from Queue
    .DESCRIPTION
      Clean all Messages from Queue
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER QueueName
      Name of Storage Account Table
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Clear-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName
    .EXAMPLE
      Clear-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$QueueName,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Clear-MyQueueMessage"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("DELETE`n`napplication/x-www-form-urlencoded`n`nx-ms-date:$($GMTTime)`nx-ms-version:$($version)`n/$($StorageAccount)/$($QueueName)/messages")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages?$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri $Uri -Headers $Headers -ContentType application/x-www-form-urlencoded
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }
  
  Write-Verbose -Message "Exit Function Clear-MyQueueMessage"
}
#endregion function Clear-MyQueueMessage

#region function Get-MyQueueMessage
function Get-MyQueueMessage ()
{
  <#
    .SYNOPSIS
      Get Message to Queue Messages
    .DESCRIPTION
      Get Message to Queue Messages
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER QueueName
      Name of Storage Account Table
    .PARAMETER NumMessages
      Number of Messages to Get
    .PARAMETER Peek
      Get Messages but don't flag them
    .PARAMETER Decode
      Decode the Base64 text Message
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Get-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName
    .EXAMPLE
      Get-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName -NumMessages $NumMessages -Decode
    .EXAMPLE
      Get-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName -NumMessages $NumMessages -Decode
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$QueueName,
    [ValidateRange(1, 32)]
    [Int]$NumMessages = 1,
    [Switch]$Peek,
    [Switch]$Decode,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Get-MyQueueMessage"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  if ($Peek.IsPresent)
  {
    $PeekOnly = "&peekonly=true"
  }
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages?numofmessages=$($NumMessages)$($PeekOnly)"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("GET`n`napplication/x-www-form-urlencoded`n`nx-ms-date:$($GMTTime)`nx-ms-version:$($version)`n/$($StorageAccount)/$($QueueName)/messages")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages?numofmessages=$($NumMessages)$($PeekOnly)&$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri $Uri -Headers $Headers -ContentType application/x-www-form-urlencoded
  if ($ReturnData.StatusCode -in @(200))
  {
    $Messages = @(([XML](($ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage)
    if ($Messages.Count)
    {
      if ($Decode.IsPresent)
      {
        $Messages | ForEach-Object -Process { $PSItem.MessageText = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(($PSItem.MessageText))) }
      }
      $Messages
    }
  }

  Write-Verbose -Message "Exit Function Get-MyQueueMessage"
}
#endregion function Get-MyQueueMessage

#region function Remove-MyQueueMessage
function Remove-MyQueueMessage ()
{
  <#
    .SYNOPSIS
      Delete message Queue messages
    .DESCRIPTION
      Delete message Queue messages
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER QueueName
      Name of Storage Account Table
    .PARAMETER MessageID
      ID of the Message
    .PARAMETER PopReceipt
      PopReceipt for the Message
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Remove-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt
    .EXAMPLE
      Remove-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$QueueName,
    [parameter(Mandatory = $True)]
    [String]$MessageID,
    [parameter(Mandatory = $True)]
    [String]$PopReceipt,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Remove-MyQueueMessage"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages/$($MessageID)?popreceipt=$($PopReceipt)"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("DELETE`n`napplication/x-www-form-urlencoded`n`nx-ms-date:$($GMTTime)`nx-ms-version:$($version)`n/$($StorageAccount)/$($QueueName)/messages/$($MessageID)")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages/$($MessageID)?popreceipt=$($PopReceipt)&$($SAS)"
  }
  $ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri $Uri -Headers $Headers -ContentType application/x-www-form-urlencoded
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }

  Write-Verbose -Message "Exit Function Remove-MyQueueMessage"
}
#endregion function Remove-MyQueueMessage

#region function Update-MyQueueMessage
function Update-MyQueueMessage ()
{
  <#
    .SYNOPSIS
      Add New Message to Queue
    .DESCRIPTION
      Add New Message to Queue
    .PARAMETER StorageAccount
      Name of the StorageAccount
    .PARAMETER AccessKey
      StorageAccount Access Key
    .PARAMETER SAS
      Shared Access Signature
    .PARAMETER QueueName
      Name of Storage Account Table
    .PARAMETER MessageID
      ID of the Message
    .PARAMETER PopReceipt
      PopReceipt for the Message
    .PARAMETER VisibilityTimeout
      Visibility Timeout
    .PARAMETER Version
      Storage Version
    .EXAMPLE
      Update-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt
    .EXAMPLE
      Update-MyQueueMessage -StorageAccount $StorageAccount -AccessKey $AccessKey -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt -VisibilityTimeout $VisibilityTimeout
    .EXAMPLE
      Update-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt
    .EXAMPLE
      Update-MyQueueMessage -StorageAccount $StorageAccount -SAS $SAS -QueueName $QueueName -MessageID $MessageID -PopReceipt $PopReceipt -VisibilityTimeout $VisibilityTimeout
    .NOTES
      Original Function By Ken Sweet

      7/30/2021 - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "SAS")]
  param (
    [parameter(Mandatory = $True)]
    [String]$StorageAccount,
    [parameter(Mandatory = $True, ParameterSetName = "AK")]
    [String]$AccessKey,
    [parameter(Mandatory = $True, ParameterSetName = "SAS")]
    [String]$SAS,
    [parameter(Mandatory = $True)]
    [String]$QueueName,
    [parameter(Mandatory = $True)]
    [String]$MessageID,
    [parameter(Mandatory = $True)]
    [String]$PopReceipt,
    [String]$Message,
    [ValidateRange(0, 604800)]
    [Long]$VisibilityTimeout = 1800,
    [String]$Version = "2020-10-02"
  )
  Write-Verbose -Message "Enter Function Update-MyQueueMessage"

  $GMTTime = ([DateTime]::Now).ToUniversalTime().ToString("R")
  $Headers = @{
    "x-ms-date"    = $GMTTime
    "x-ms-version" = $Version
  }
  if ($PSCmdlet.ParameterSetName -eq "AK")
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages/$($MessageID)?popreceipt=$($PopReceipt)&visibilitytimeout=$($VisibilityTimeout)"
    $HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()
    $HMACSHA.Key = [Convert]::FromBase64String($AccessKey)
    $Signature = [Convert]::ToBase64String($HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes("PUT`n`napplication/x-www-form-urlencoded`n`nx-ms-date:$($GMTTime)`nx-ms-version:$($version)`n/$($StorageAccount)/$($QueueName)/messages/$($MessageID)")))
    [Void]$Headers.Add("Authorization", "SharedKeyLite $($StorageAccount):$($Signature)")
  }
  else
  {
    $Uri = "https://$($StorageAccount).queue.core.windows.net/$($QueueName)/messages/$($MessageID)?popreceipt=$($PopReceipt)&visibilitytimeout=$($VisibilityTimeout)&$($SAS)"
  }
  if ($PSBoundParameters.ContainsKey("Message"))
  {
    $Body = "<QueueMessage><MessageText>$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($Message)))</MessageText></QueueMessage>"
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri $Uri -Headers $Headers -Body $Body -ContentType application/x-www-form-urlencoded
  }
  else
  {
    $ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri $Uri -Headers $Headers -ContentType application/x-www-form-urlencoded
  }
  if ($ReturnData.StatusCode -in @(204))
  {
    [PSCustomObject]@{ "Success" = $True }
  }
  else
  {
    [PSCustomObject]@{ "Success" = $False }
  }

  Write-Verbose -Message "Exit Function Update-MyQueueMessage"
}
#endregion function Update-MyQueueMessage


#endregion ******* Azure AD Message Queue Functions ********

#region ******* Service Now Rest API Functions ********
#region ******** Class SNGroup ********
Class SNGroup
{
  [String]$GroupID
  [String]$Group_Name
  [String]$Group_Description
  [String]$ParentID
  [String]$Parent_Name
  [String]$MgrID
  [String]$Mgr_FullName
  [String]$Mgr_FirstName
  [String]$Mgr_LastName
  [String]$Mgr_EMail

  SNGroup ([String]$GroupID, [String]$Group_Name, [String]$Group_Description, [String]$ParentID, [String]$Parent_Name, [String]$MgrID, [String]$Mgr_FullName, [String]$Mgr_FirstName, [String]$Mgr_LastName, [String]$Mgr_EMail)
  {
    $This.GroupID = $GroupID
    $This.Group_Name = $Group_Name
    $This.Group_Description = $Group_Description
    $This.ParentID = $ParentID
    $This.Parent_Name = $Parent_Name
    $This.MgrID = $MgrID
    $This.Mgr_FullName = $Mgr_FullName
    $This.Mgr_FirstName = $Mgr_FirstName
    $This.Mgr_LastName = $Mgr_LastName
    $This.Mgr_EMail = $Mgr_EMail
  }
}
#endregion ******** Class SNGroup ********

#region function Get-SNGroup
function Get-SNGroup()
{
  <#
    .SYNOPSIS
      Get SN Assignment Group from Service Now Web Portal
    .DESCRIPTION
      Get SN Assignment Group from Service Now Web Portal
    .PARAMETER Instance
      Service Now Instance Name
    .PARAMETER Name
    .PARAMETER ID
    .PARAMETER Credential
      Credentials users to connect to the Service Now Web Portal
    .EXAMPLE
      Get-SNGroup -Credential $Credential -ID $ID
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "SysID")]
  param (
    [parameter(Mandatory = $True)]
    [String]$Instance,
    [parameter(Mandatory = $True, ParameterSetName = "Name")]
    [String[]]$Name,
    [parameter(Mandatory = $True, ParameterSetName = "SysID")]
    [String[]]$ID,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-SNGroup Begin Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "Name"
      {
        $PropertyName = "name"
        break
      }
      "SysID"
      {
        $PropertyName = "sys_id"
        break
      }
    }

    Write-Verbose -Message "Exit Function Get-SNGroup Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-SNGroup Process Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "Name"
      {
        $Data = $Name
        break
      }
      "SysID"
      {
        $Data = $ID
        break
      }
    }

    ForEach ($Item in $Data)
    {
      $Body = @{
        "sysparm_query" = "$($PropertyName)=$($Item)"
        "sysparm_limit"  = "1"
        "sysparm_fields" = "sys_id, name, description, parent.sys_id, parent.name, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email"
      }

      $GroupResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri "https://$($Instance).service-now.com/api/now/table/sys_user_group" -Credential $Credential -Body $Body
      if (($GroupResult.StatusCode -eq 200) -and ($GroupResult.Headers."X-Total-Count"))
      {
        ($GroupResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New($PSItem.sys_id, $PSItem.name, $PSItem.description, $PSItem."parent.sys_id", $PSItem."parent.name", $PSItem."manager.sys_id", $PSItem."manager.name", $PSItem."manager.first_name", $PSItem."manager.last_name", $PSItem."manager.email") }
      }

      $GroupResult = $Null
    }

    Write-Verbose -Message "Exit Function Get-SNGroup Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Get-SNGroup End Block"

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Function Get-SNGroup End Block"
  }
}
#endregion function Get-SNGroup

#region ******** Class SNUser ********
Class SNUser
{
  [String]$UserID
  [String]$User_FullName
  [String]$User_FirstName
  [String]$User_LastName
  [String]$User_UPN
  [String]$User_UserID
  [String]$User_UserName
  [String]$User_EMail
  [String]$User_EmployeeID
  [String]$MgrID
  [String]$Mgr_FullName
  [String]$Mgr_FirstName
  [String]$Mgr_LastName
  [String]$Mgr_EMail
  [System.Collections.ArrayList]$Groups = [System.Collections.ArrayList]::New()

  SNUser ([String]$UserID, [String]$User_FullName, [String]$User_FirstName, [String]$User_LastName, [String]$User_UPN, [String]$User_UserID, [String]$User_UserName, [String]$User_EMail, [String]$User_EmployeeID, [String]$MgrID, [String]$Mgr_FullName, [String]$Mgr_FirstName, [String]$Mgr_LastName, [String]$Mgr_EMail)
  {
    $This.UserID = $UserID
    $This.User_FullName = $User_FullName
    $This.User_FirstName = $User_FirstName
    $This.User_LastName = $User_LastName
    $This.User_UPN = $User_UPN
    $This.User_UserID = $User_UserID
    $This.User_UserName = $User_UserName
    $This.User_EMail = $User_EMail
    $This.User_EmployeeID = $User_EmployeeID
    $This.MgrID = $MgrID
    $This.Mgr_FullName = $Mgr_FullName
    $This.Mgr_FirstName = $Mgr_FirstName
    $This.Mgr_LastName = $Mgr_LastName
    $This.Mgr_EMail = $Mgr_EMail
  }

  [Void] AddGroup ([String]$GroupID, [String]$Group_Name, [String]$Group_Description, [String]$ParentID, [String]$Parent_Name, [String]$MgrID, [String]$Mgr_FullName, [String]$Mgr_FirstName, [String]$Mgr_LastName, [String]$Mgr_EMail)
  {
    [Void]$This.Groups.Add([SNGroup]::New($GroupID, $Group_Name, $Group_Description, $ParentID, $Parent_Name, $MgrID, $Mgr_FullName, $Mgr_FirstName, $Mgr_LastName, $Mgr_EMail))
  }

}
#endregion ******** Class SNUser ********

#region function Get-SNUser
function Get-SNUser()
{
  <#
    .SYNOPSIS
      Get SN User from Service Now Web Portal
    .DESCRIPTION
      Get SN User from Service Now Web Portal
    .PARAMETER Instance
      Service Now Instance Name
    .PARAMETER UserID
    .PARAMETER UPN
    .PARAMETER EMail
    .PARAMETER EmployeeID
    .PARAMETER ID
    .PARAMETER Credential
      Credentials users to connect to the Service Now Web Portal
    .PARAMETER Groups
    .EXAMPLE
      Get-SNUser -UserName $ENV:UserName -Credential $Credential -Instance "psjhdev"
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "UserID")]
  param (
    [parameter(Mandatory = $True)]
    [String]$Instance,
    [parameter(Mandatory = $True, ParameterSetName = "UserName")]
    [String[]]$UserName,
    [parameter(Mandatory = $True, ParameterSetName = "UserID")]
    [String[]]$UserID,
    [parameter(Mandatory = $True, ParameterSetName = "UPN")]
    [String[]]$UPN,
    [parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, ParameterSetName = "EMail")]
    [String[]]$EMail,
    [parameter(Mandatory = $True, ParameterSetName = "EmployeeID")]
    [String[]]$EmployeeID,
    [parameter(Mandatory = $True, ParameterSetName = "SysID")]
    [String[]]$ID,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential,
    [Switch]$Groups
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-SNUser Begin Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "UserName"
      {
        $PropertyName = "user_name"
        break
      }
      "UserID"
      {
        $PropertyName = "u_samaccountname"
        break
      }
      "UPN"
      {
        $PropertyName = "u_userprincipalname"
        break
      }
      "EMail"
      {
        $PropertyName = "email"
        break
      }
      "EmployeeID"
      {
        $PropertyName = "employee_number"
        break
      }
      "SysID"
      {
        $PropertyName = "sys_id"
        break
      }
    }

    Write-Verbose -Message "Exit Function Get-SNUser Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-SNUser Process Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "UserName"
      {
        $Data = $UserName
        break
      }
      "UserID"
      {
        $Data = $UserID
        break
      }
      "UPN"
      {
        $Data = $UPN
        break
      }
      "EMail"
      {
        $Data = $EMail
        break
      }
      "EmployeeID"
      {
        $Data = $EmployeeID
        break
      }
      "SysID"
      {
        $Data = $ID
        break
      }
    }

    ForEach ($Item in $Data)
    {
      $Body = @{
        "sysparm_query" = "$($PropertyName)=$($Item)"
        "sysparm_limit" = "1"
        "sysparm_fields" = "sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email"
      }

      $UserResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri "https://$($Instance).service-now.com/api/now/table/sys_user" -Credential $Credential -Body $Body
      if (($UserResult.StatusCode -eq 200) -and ($UserResult.Headers."X-Total-Count"))
      {
        $User = ($UserResult.Content | ConvertFrom-Json).Result
        $ReturnData = [SNUser]::New($User.sys_id, $User.name, $User.first_name, $User.last_name, $User.u_userprincipalname, $User.u_samaccountname, $User.user_name, $User.email, $User.employee_number, $User."manager.sys_id", $User."manager.name", $User."manager.first_name", $User."manager.last_name", $User."manager.email")
        if ($Groups.IsPresent)
        {
          $Body = @{
            "user.sys_id" = "$($User.sys_id)"
            "sysparm_fields" = "group.sys_id, group.name, group.description, group.parent.sys_id, group.parent.name, group.manager.sys_id, group.manager.name, group.manager.first_name, group.manager.last_name, group.manager.email"
          }
          $MemberResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri "https://$($Instance).service-now.com/api/now/table/sys_user_grmember" -Body $Body -Credential $Credential
          if ($MemberResult.StatusCode -eq 200)
          {
            ($MemberResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { $ReturnData.AddGroup($PSItem."group.sys_id", $PSItem."group.name", $PSItem."group.description", $PSItem."group.parent.sys_id", $PSItem."group.parent.name", $PSItem."group.manager.sys_id", $PSItem."group.manager.name", $PSItem."group.manager.first_name", $PSItem."group.manager.last_name", $PSItem."group.manager.email") }
          }
        }
        $ReturnData

        $User = $Null
        $MemberResult = $Null
      }

      $UserResult = $Null
    }

    Write-Verbose -Message "Exit Function Get-SNUser Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Get-SNUser End Block"

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Function Get-SNUser End Block"
  }
}
#endregion function Get-SNUser

#region ******** Class SNAsset ********
Class SNAsset
{
  [String]$AssetID
  [String]$CMDBID
  [String]$ComputerName
  [String]$DomainName
  [String]$AssetTag
  [String]$SerialNumber
  [String]$DeviceRole
  [String]$Manufacturer
  [String]$Model
  [String]$Department
  [String]$CostCenter
  [String]$Location
  [String]$LocationID
  [String]$State
  [String]$Region
  [String]$Room
  [String]$Floor
  [String]$UserID
  [String]$User_FullName
  [String]$User_FirstName
  [String]$User_LastName
  [String]$User_UserID
  [String]$User_UserName
  [String]$User_EMail
  [String]$User_EmployeeID
  [String]$Mgr_FullName
  [String]$MgrID
  [String]$Mgr_FirstName
  [String]$Mgr_LastName
  [String]$Mgr_EMail
  [String]$SGroup
  [String]$SGroupID
  
  SNAsset ([String]$AssetID, [String]$CMDBID, [String]$ComputerName, [String]$DomainName, [String]$AssetTag, [String]$SerialNumber, [String]$DeviceRole, [String]$Manufacturer, [String]$Model, [String]$Department, [String]$CostCenter, [String]$Location, [String]$LocationID, [String]$State, [String]$Region, [String]$Room, [String]$Floor, [String]$SGroup, [String]$SGroupID)
  {
    $This.AssetID = $AssetID
    $This.CMDBID = $CMDBID
    $This.ComputerName = $ComputerName
    $This.DomainName = $DomainName
    $This.AssetTag = $AssetTag
    $This.SerialNumber = $SerialNumber
    $This.DeviceRole = $DeviceRole
    $This.Manufacturer = $Manufacturer
    $This.Model = $Model
    $This.Department = $Department
    $This.CostCenter = $CostCenter
    $This.Location = $Location
    $This.LocationID = $LocationID
    $This.State = $State
    $This.Region = $Region
    $This.Room = $Room
    $This.Floor = $Floor
    $This.SGroup = $SGroup
    $This.SGroupID = $SGroupID
  }
  
  [void] AddUser ([String]$UserID, [String]$User_FullName, [String]$User_FirstName, [String]$User_LastName, [String]$User_UserID, [String]$User_UserName, [String]$User_EMail, [String]$User_EmployeeID, [String]$MgrID, [String]$Mgr_FullName, [String]$Mgr_FirstName, [String]$Mgr_LastName, [String]$Mgr_EMail)
  {
    $This.UserID = $UserID
    $This.User_FullName = $User_FullName
    $This.User_FirstName = $User_FirstName
    $This.User_LastName = $User_LastName
    $This.User_UserID = $User_UserID
    $This.User_UserName = $User_UserName
    $This.User_EMail = $User_EMail
    $This.User_EmployeeID = $User_EmployeeID
    $This.MgrID = $MgrID
    $This.Mgr_FullName = $Mgr_FullName
    $This.Mgr_FirstName = $Mgr_FirstName
    $This.Mgr_LastName = $Mgr_LastName
    $This.Mgr_EMail = $Mgr_EMail
  }
}
#endregion ******** Class SNAsset ********

#region function Get-SNAsset
function Get-SNAsset()
{
  <#
    .SYNOPSIS
      Get PSJH Asset from Service Now Web Portal
    .DESCRIPTION
      Get PSJH Asset from Service Now Web Portal
    .PARAMETER Instance
      Service Now Instance Name
    .PARAMETER Computername
      Name of the Computer in the Asset Record
    .PARAMETER AssetTag
      Asset tag of the Computer in the Asset Record
    .PARAMETER SerialNumber
      Serial Number of the Computer in the Asset Record
    .PARAMETER Credential
      Credentials users to connect to the Service Now Web Portal
    .EXAMPLE
      Get-SNAsset -ComputerName "OLT0069191" -Credential $Credential -Instance "psjhdev"
      Get-SNAsset -ComputerName "OLT0069191", "WWA143874" -Credential $Credential -Instance "psjhdev"
    .EXAMPLE
      Get-SNAsset -AssetTag "WWA143874" -Credential $Credential -Instance "psjhdev"
      Get-SNAsset -AssetTag "WWA143874", "0069191" -Credential $Credential -Instance "psjhdev"
    .EXAMPLE
      Get-SNAsset -serialNumber "CNU33890G2" -Credential $Credential -Instance "psjhdev"
      Get-SNAsset -serialNumber "CNU33890G2", "CNU33890LQ" -Credential $Credential -Instance "psjhdev"
    .EXAMPLE
      "OLT0069191", "WWA143874" | Get-SNAsset -Credential $Credential -Instance "psjhdev"
    .NOTES
      Original Function By ken.sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "ComputerName")]
  param (
    [parameter(Mandatory = $False)]
    [String]$Instance = "psjh",
    [parameter(Mandatory = $True, ParameterSetName = "ComputerName")]
    [String[]]$ComputerName,
    [parameter(Mandatory = $True, ParameterSetName = "AssetTag")]
    [String[]]$AssetTag,
    [parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, ParameterSetName = "SerialNumber")]
    [String[]]$SerialNumber,
    [parameter(Mandatory = $True, ParameterSetName = "SysID")]
    [String[]]$ID,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-SNAsset Begin Block"
    
    Switch ($PSCmdlet.ParameterSetName)
    {
      "ComputerName"
      {
        $PropertyName = "ci.name"
        break
      }
      "AssetTag"
      {
        $PropertyName = "asset_tag"
        break
      }
      "SerialNumber"
      {
        $PropertyName = "serial_number"
        break
      }
      "SysID"
      {
        $PropertyName = "sys_id"
        Break
      }
    }
    
    Write-Verbose -Message "Exit Function Get-SNAsset Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-SNAsset Process Block"
    
    Switch ($PSCmdlet.ParameterSetName)
    {
      "ComputerName"
      {
        $Data = $ComputerName
        break
      }
      "AssetTag"
      {
        $Data = $AssetTag
        break
      }
      "SerialNumber"
      {
        $Data = $SerialNumber
        break
      }
      "ID"
      {
        $Data = $Id
        break
      }
    }
    
    ForEach ($Item in $Data)
    {
      $Body = @{
        "sysparm_query" = "$($PropertyName)=$($Item)"
        "sysparm_limit" = "1"
        "sysparm_fields" = "sys_id, asset_tag, serial_number, u_device_role, u_room, u_floor, StockRoom, substatus, reserved_for, assigned_to, ci.name, ci.dns_domain, ci.sys_id, department.name, department.id, location.name, location.sys_id, location.state, location.u_region.u_description, support_group.name, model.name, model.manufacturer.name, support_group.sys_id, support_group.name, stockroom"
      }
      
      $CompResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri "https://$($Instance).service-now.com/api/now/table/alm_hardware" -Credential $Credential -Body $Body
      if (($CompResult.StatusCode -eq 200) -and ($CompResult.Headers."X-Total-Count" -ne "0"))
      {
        $Comp = ($CompResult.Content | ConvertFrom-Json).Result
        $ReturnData = [SNAsset]::New($Comp.sys_id, $Comp."ci.sys_id", $Comp."ci.name", $Comp."ci.dns_domain", $Comp.asset_tag, $Comp.serial_number, $Comp.u_device_role, $Comp."model.manufacturer.name", $Comp."model.name", $Comp."department.name", $Comp."department.id", $Comp."location.name", $Comp."location.sys_id", $Comp."location.state", $Comp."location.u_region.u_description", $Comp.u_room, $Comp.u_floor, $Comp."support_group.name", $Comp."support_group.sys_id")
        if ((-not [String]::IsNullOrEmpty($Comp.StockRoom)) -and ($Comp.substatus -in @("reserved", "pending_install")))
        {
          if (-not [String]::IsNullOrEmpty($Comp.reserved_for))
          {
            $UserResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri $Comp.reserved_for.link -Credential $Credential -Body @{ "sysparm_fields" = "sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email" }
            if ($UserResult.StatusCode -eq 200)
            {
              $User = ($UserResult.Content | ConvertFrom-Json).Result
              $ReturnData.AddUser($User.Sys_id, $User.name, $User.first_name, $User.last_name, $User.u_samaccountname, $User.user_name, $User.email, $User.employee_number, $User."manager.sys_id", $User."manager.name", $User."manager.first_name", $User."manager.last_name", $User."manager.email")
            }
          }
        }
        else
        {
          if (-not [String]::IsNullOrEmpty($Comp.assigned_to))
          {
            $UserResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri $Comp.assigned_to.link -Credential $Credential -Body @{ "sysparm_fields" = "sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email" }
            if ($UserResult.StatusCode -eq 200)
            {
              $User = ($UserResult.Content | ConvertFrom-Json).Result
              $ReturnData.AddUser($User.Sys_id, $User.name, $User.first_name, $User.last_name, $User.u_samaccountname, $User.user_name, $User.email, $User.employee_number, $User."manager.sys_id", $User."manager.name", $User."manager.first_name", $User."manager.last_name", $User."manager.email")
            }
          }
        }
        
        $ReturnData
        
        $Computer = $Null
        $UserResult = $Null
        $User = $Null
      }
      $CompResult = $Null
    }
    
    Write-Verbose -Message "Exit Function Get-SNAsset Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Get-SNAsset End Block"
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Function Get-SNAsset End Block"
  }
}
#endregion function Get-SNAsset

#region ******** Class SNCMDBItem ********
Class SNCMDBItem
{
  [String]$CMDBID
  [String]$CMDB_Name

  SNCMDBItem ([String]$CMDBID, [String]$CMDB_Name)
  {
    $This.CMDBID = $CMDBID
    $This.CMDB_Name = $CMDB_Name
  }
}
#endregion ******** Class SNCMDBItem ********

#region function Get-SNCMDBItem
function Get-SNCMDBItem()
{
  <#
    .SYNOPSIS
      Get SN Configuration Item from Service Now Web Portal
    .DESCRIPTION
      Get SN Configuration Item from Service Now Web Portal
    .PARAMETER Instance
      Service Now Instance Name
    .PARAMETER Name
    .PARAMETER ID
    .PARAMETER Credential
      Credentials users to connect to the Service Now Web Portal
    .EXAMPLE
      Get-SNCMDBItem -Credential $Credential -ID $ID
    .NOTES
      Original Function By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "SysID")]
  param (
    [parameter(Mandatory = $True)]
    [String]$Instance,
    [parameter(Mandatory = $True, ParameterSetName = "Name")]
    [String[]]$Name,
    [parameter(Mandatory = $True, ParameterSetName = "SysID")]
    [String[]]$ID,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential
  )
  Begin
  {
    Write-Verbose -Message "Enter Function Get-SNCMDBItem Begin Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "Name"
      {
        $PropertyName = "name"
        break
      }
      "SysID"
      {
        $PropertyName = "sys_id"
        break
      }
    }

    Write-Verbose -Message "Exit Function Get-SNCMDBItem Begin Block"
  }
  Process
  {
    Write-Verbose -Message "Enter Function Get-SNCMDBItem Process Block"

    Switch ($PSCmdlet.ParameterSetName)
    {
      "Name"
      {
        $Data = $Name
        break
      }
      "SysID"
      {
        $Data = $ID
        break
      }
    }

    ForEach ($Item in $Data)
    {
      $Body = @{
        "sysparm_query" = "$($PropertyName)=$($Item)"
        "sysparm_limit"  = "1"
        "sysparm_fields" = "sys_id, name"
      }

      $CMDBItemResult = Invoke-WebRequest -UseBasicParsing -ContentType "application/json" -uri "https://$($Instance).service-now.com/api/now/table/cmdb_ci" -Credential $Credential -Body $Body
      if (($CMDBItemResult.StatusCode -eq 200) -and ($CMDBItemResult.Headers."X-Total-Count"))
      {
        ($CMDBItemResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBItem]::New($PSItem.sys_id, $PSItem.name) }
      }

      $CMDBItemResult = $Null
    }

    Write-Verbose -Message "Exit Function Get-SNCMDBItem Process Block"
  }
  End
  {
    Write-Verbose -Message "Enter Function Get-SNCMDBItem End Block"

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Function Get-SNCMDBItem End Block"
  }
}
#endregion function Get-SNCMDBItem

#region ******** Class SNNewIncident ********
Class SNNewIncident
{
  [String]$ID
  [String]$Number
  [Bool]$Success = $False

  SNNewIncident ()
  {
    $This.Success = $False
  }

  SNNewIncident ([String]$ID, [String]$Number)
  {
    $This.ID = $ID
    $This.Number = $Number
    $This.Success = $True
  }
}
#endregion ******** Class SNNewIncident ********

#region function Create-SNIncident
function Create-SNIncident ()
{
  <#
    .SYNOPSIS
      Create New Service Now Incident
    .DESCRIPTION
      Create New Service Now Incident
    .PARAMETER Instance
      Service Now Instance Name
    .PARAMETER AssignGroup
    .PARAMETER AssignUser
    .PARAMETER AffectedUser
    .PARAMETER Urgency
    .PARAMETER Impact
    .PARAMETER CMDBType
    .PARAMETER CMDBItem
    .PARAMETER Catagory
    .PARAMETER ShortDescription
    .PARAMETER Description
    .PARAMETER Credential
      Credentials users to connect to the Service Now Web Portal
    .EXAMPLE
      Create-SNIncident -AssignGroup $AssignGroup -AffectedUser $AffectedUser -CMDBItem $CMDBItem -Catagory $Catagory -ShortDescription $ShortDescription -Description $Description -Credential $Credential
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Instance,
    [parameter(Mandatory = $True)]
    [String]$AssignGroup,
    [parameter(Mandatory = $False)]
    [String]$AssignUser,
    [parameter(Mandatory = $True)]
    [String]$AffectedUser,
    [ValidateSet("1", "2", "3", "4", "5")]
    [String]$Urgency = "5",
    [ValidateSet("1", "2", "3", "4", "5")]
    [String]$Impact = "5",
    [ValidateSet("Application", "Device")]
    [String]$CMDBType = "Device",
    [parameter(Mandatory = $True)]
    [String]$CMDBItem,
    [parameter(Mandatory = $True)]
    [String]$Catagory,
    [parameter(Mandatory = $True)]
    [String]$ShortDescription,
    [parameter(Mandatory = $True)]
    [String]$Description,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential
  )
  Write-Verbose -Message "Enter Function Create-SNIncident"

  $Body = @{
    "assignment_group"      = $AssignGroup
    "short_description"     = $ShortDescription
    "description"           = $Description
    "u_affected_end_user"   = $AffectedUser
    "urgency"               = $Urgency
    "impact"                = $Impact
    "sysparm_display_value" = "true"
    "u_configuration_item_type" = $CMDBType
    "cmdb_ci"               = $CMDBItem
    "u_category"            = $Catagory
    "caller_id"             = $AffectedUser
  }

  if ($PSBoundParameters.ContainsKey("AssignUser"))
  {
    [Void]$Body.Add("assigned_to", $AssignUser)
  }

  Try
  {
    $IncidentResult = Invoke-WebRequest -UseBasicParsing -Credential $Credential -Method POST -Uri "https://psjh.service-now.com/api/now/table/incident?sysparm_display_value=true" -Body ($Body | ConvertTo-Json) -ContentType "application/json"
    if ($IncidentResult.StatusCode -eq 201)
    {
      $Incident = ($IncidentResult.Content | ConvertFrom-Json).Result
      [SNNewIncident]::New($Incident.sys_id, $Incident.Number)
    }
    else
    {
      [SNNewIncident]::New()
    }
  }
  Catch
  {
    [SNNewIncident]::New()
  }

  Write-Verbose -Message "Exit Function Create-SNIncident"
}
#endregion function Create-SNIncident

#endregion ******* Service Now Rest API Functions ********

#region ******** UMS Rest API Functions ********

#region function Connect-UMSRestAPI
function Connect-UMSRestAPI ()
{
  <#
    .SYNOPSIS
      Connect to UMS Rest API and Returns a Web Session Object
    .DESCRIPTION
      Connect to UMS Rest API and Returns a Web Session Object
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER Credential
      UMS Rest API Username and Password
    .EXAMPLE
      $WebSession = Connect-UMSRestAPI -ComputerName $ComputerName -Credential $Credential
      If ($WebSession.Cookies.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [PSCredential]$Credential
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Logon Uri
  $Uri = ("https://{0}:{1}/umsapi/v{2}/login" -f $ComputerName, $Port, $Version)
  
  # Logon / Authorization Header
  $Headers = @{
    "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$($Credential.Username):$($Credential.GetNetworkCredential().Password)"))
  }
  
  # Create new Web Session
  $WebSession = [Microsoft.Powershell.Commands.Webrequestsession]::New()
  
  Try
  {
    # Request WebSession Cookie
    $Response = Invoke-WebRequest -UseBasicParsing -Method Post -Uri $Uri -ContentType "application/json" -Headers $Headers
    if ($Response.StatusCode -eq 200)
    {
      # Return WebSession
      $TmpName, $TmpValue = @(($Response.Content | ConvertFrom-Json).Message -split "=")
      $TmpCookie = [System.Net.Cookie]::New($TmpName, $TmpValue, "/", $ComputerName)
      $WebSession.Cookies.Add($TmpCookie)
    }
  }
  Catch {}
  
  # Return Web Session Object
  $WebSession
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Connect-UMSRestAPI

#region function Get-UMSDevice
function Get-UMSDevice ()
{
  <#
    .SYNOPSIS
      Get List of Devices from UMS Rest API Server
    .DESCRIPTION
      Get List of Devices from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER Facets
      Specify what information the Rest API Call wil Return
  
      Short: Name, MAC, IP, Parent Folder
      OnLine: Short Info, OnLine Status
      Details: Short Info, OEM, Model, Serial, Hardware Info, IGEL OS Info
      Shadow: Short Info, VNC Password and Cert
      Children: Short Info
      Deviceattributes: Short Info
      Networkadapters: Short Info, NIC Info
    .PARAMETER DeviceID
      ID of th UMS Device
    .EXAMPLE
      $DeviceList = Get-UMSDevice -WebSession $WebSession -ComputerName $ComputerName
      If ($DeviceList.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $DeviceList = Get-UMSDevice -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID
      If ($DeviceList.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [ValidateSet("short", "details", "online", "shadow", "children", "deviceattributes", "networkadapters")]
    [String]$Facets = "short",
    [parameter(Mandatory = $True, ParameterSetName = "DeviceID")]
    [Int]$DeviceID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Specify Specific Device to Return
  if ($PSCmdlet.ParameterSetName -eq "DeviceID")
  {
    $TmpDevice = "/{0}" -f $DeviceID
  }
  else
  {
    $TmpDevice = $Null
  }
  
  # Set what information to return from Rest API Call
  $TmpFacets = "?facets={0}" -f $Facets
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession"  = $WebSession
    "Uri"         = ("https://{0}:{1}/umsapi/v{2}/{3}{4}{5}" -f $ComputerName, $Port, $Version, "thinclients", $TmpDevice, $TmpFacets)
    "Method"      = "Get"
    "ContentType" = "application/json"
  }
  
  Try
  {
    $Response = Invoke-WebRequest -UseBasicParsing @Params
    If ($Response.StatusCode -eq 200)
    {
      ,@($Response.Content | ConvertFrom-Json)
    }
    Else
    {
      ,@()
    }
  }
  Catch
  {
    ,@()
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-UMSDevice

#region function Get-UMSDirectories
function Get-UMSDirectories ()
{
  <#
    .SYNOPSIS
      Get List of Device Directories from UMS Rest API Server
    .DESCRIPTION
      Get List of Device Directories from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER Facets
      Specify what information the Rest API Call wil Return
  
      Children: Directory IDs
    .PARAMETER DirectoryID
      ID of the UMS Directory
    .EXAMPLE
      $DirList = Get-UMSDirectories -WebSession $WebSession -ComputerName $ComputerName
      If ($DirList.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $DirList = Get-UMSDirectories -WebSession $WebSession -ComputerName $ComputerName -DirectoryID $DirectoryID -Facets children
      If ($DirList.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [ValidateSet("children")]
    [String]$Facets,
    [parameter(Mandatory = $True, ParameterSetName = "DirectoryID")]
    [Int]$DirectoryID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Specify Specific Directory to Return
  if ($PSCmdlet.ParameterSetName -eq "DirectoryID")
  {
    $TmpDirectory = "/{0}" -f $DirectoryID
  }
  else
  {
    $TmpDirectory = $Null
  }
  
  # Set what information to return from Rest API Call
  if ($PSBoundParameters.ContainsKey("Facets"))
  {
    $TmpFacets = "?facets={0}" -f $Facets
  }
  else
  {
    $TmpFacets = $Null
  }
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}{4}{5}" -f $ComputerName, $Port, $Version, "directories/tcdirectories", $TmpDirectory, $TmpFacets)
    "Method"     = "Get"
    "ContentType" = "application/json"
  }
  
  Try
  {
    $Response = Invoke-WebRequest -UseBasicParsing @Params
    If ($Response.StatusCode -eq 200)
    {
      ,@($Response.Content | ConvertFrom-Json)
    }
    Else
    {
      ,@()
    }
  }
  Catch
  {
    ,@()
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-UMSDirectories

#region function Move-UMSDevice
function Move-UMSDevice ()
{
  <#
    .SYNOPSIS
      Get List of Devices from UMS Rest API Server
    .DESCRIPTION
      Get List of Devices from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER DeviceID
      ID of the UMS Device
    .PARAMETER DirectoryID
      ID of the UMS Directory
    .EXAMPLE
      $Result = Move-UMSDevice -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID -DirectoryID $DirectoryID
      If ($Result.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int[]]$DeviceID,
    [parameter(Mandatory = $True)]
    [Int]$DirectoryID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Create Update Request Data Payload
  $Body = [System.Collections.ArrayList]::New()
  foreach ($TmpID in $DeviceID)
  {
    $Body.Add(@{ "id" = $TmpID; "type" = "tc" }) | Out-Null
  }
  
  # Set Rest API Method Values
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}?operation=move" -f $ComputerName, $Port, $Version, "directories/tcdirectories", $DirectoryID)
    "Method"     = "Put"
    "Body"       = ( , $Body | ConvertTo-Json)
    "ContentType" = "application/json"
  }
  
  Try
  {
    # Make Rest API Call and Return Success Status
    $Response = Invoke-WebRequest -UseBasicParsing @Params
    If ($Response.StatusCode -eq 200)
    {
      $TmpMoves = $Response.Content | ConvertFrom-Json
      ForEach ($TmpMove In $TmpMoves)
      {
        [PSCustomObject]@{
          "DeviceID" = $TmpMove.id
          "Success"  = ($TmpMove.results -eq "successful")
          "Message"  = $TmpMove.results
        }
      }
    }
    Else
    {
      [PSCustomObject]@{
        "DeviceID" = 0
        "Success"  = $False
        "Message"  = "Failed to Move Device"
      }
    }
  }
  Catch
  {
    [PSCustomObject]@{
      "DeviceID" = -1
      "Success"  = $False
      "Message"  = $PSItem.Exception.Message
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Move-UMSDevice

#region function Remove-UMSDevice
function Remove-UMSDevice ()
{
  <#
    .SYNOPSIS
      Removes a Device from UMS Rest API Server
    .DESCRIPTION
      Removes a Device from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER DeviceID
      ID of th UMS Device
    .EXAMPLE
      $Response = Remove-UMSDevice -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID
      If ($Result.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int[]]$DeviceID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  foreach ($ID in $DeviceID)
  {
    # Make Rest API Call and Return the Information
    $Params = @{
      "WebSession" = $WebSession
      "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}/deletetcoffline" -f $ComputerName, $Port, $Version, "thinclients", $ID)
      "Method"     = "Delete"
      "ContentType" = "application/json"
    }
    
    Try
    {
      # Make Rest API Call and Return Success Status
      $Response = Invoke-WebRequest -UseBasicParsing @Params
      If ($Response.StatusCode -eq 200)
      {
        [PSCustomObject]@{
          "DeviceID" = $ID
          "Success"  = $True
          "Message"  = ($Response.Content | ConvertFrom-Json).Message
        }
      }
      Else
      {
        [PSCustomObject]@{
          "DeviceID" = $ID
          "Success"  = $False
          "Message"  = "Failed to Remove Device"
        }
      }
    }
    Catch
    {
      [PSCustomObject]@{
        "DeviceID" = $ID
        "Success"  = $False
        "Message"  = $PSItem.Exception.Message
      }
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Remove-UMSDevice

#region function Send-UMSDeviceComand
function Send-UMSDeviceComand ()
{
  <#
    .SYNOPSIS
      Get List of Devices from UMS Rest API Server
    .DESCRIPTION
      Get List of Devices from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER DeviceID
      ID of the UMS Device
    .PARAMETER Command
      Command to send to the UMS Device
    .EXAMPLE
      $Response = Send-UMSDeviceComand -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID -Command $Command
      ForEach ($TmpResponse In $Response)
      {
        If ($TmpResponse.Success)
        {
          Write-Host -Object "Success"
        }
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int[]]$DeviceID,
    [parameter(Mandatory = $True)]
    [ValidateSet("rebootX", "reboot", "shutdown", "wakeup", "settings2tc", "tcreset2facdefs")]
    [String]$Command
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Create Update Request Data Payload
  $Body = [System.Collections.ArrayList]::New()
  foreach ($TmpID in $DeviceID)
  {
    $Body.Add(@{ "id" = $TmpID; "type" = "tc" }) | Out-Null
  }
  
  # Set Rest API Method Values
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}?command={4}" -f $ComputerName, $Port, $Version, "thinclients", ($Command.ToLower()))
    "Method"     = "Post"
    "Body"       = ( , $Body | ConvertTo-Json)
    "ContentType" = "application/json"
  }
  
  Try
  {
    # Make Rest API Call and Return Success Status
    $Response = Invoke-WebRequest -UseBasicParsing @Params
    If ($Response.StatusCode -eq 200)
    {
      # Return Success Status
      ($Response.Content | ConvertFrom-Json).CommandExecList | ForEach-Object -Process { [PSCustomObject]@{ "Success" = ($PSItem.Message -eq "OK"); "id" = $PSItem.ID; "state" = $PSItem.State; "message" = $PSItem.Message } }
     }
    Else
    {
      [PSCustomObject]@{ "Success" = $False; "id" = 0; "state" = "FAILED"; "message" = "Failed to Execute $($Command) Command" }
    }
  }
  Catch
  {
    [PSCustomObject]@{ "Success" = $False; "id" = 0; "state" = "ERROR"; "message" = $PSItem.Exception.Message }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Send-UMSDeviceComand

#region function Update-UMSDevice
function Update-UMSDevice ()
{
  <#
    .SYNOPSIS
      Get List of Devices from UMS Rest API Server
    .DESCRIPTION
      Get List of Devices from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER Name
      New UMS Device Name
    .PARAMETER Site
      New UMS Device Site
    .PARAMETER Department
      New UMS Device Department
    .PARAMETER CostCenter
      New UMS Device CostCenter
    .PARAMETER LastIP
      New UMS Device LastIP
    .PARAMETER Comment
      New UMS Device Comment
    .PARAMETER AssetID
      New UMS Device AssetID
    .PARAMETER InserviceDate
      New UMS Device InserviceDate
    .PARAMETER SerialNumber
      New UMS Device SerialNumber
    .PARAMETER DeviceAttributes
      New UMS Device DeviceAttributes
    .EXAMPLE
      $Success = Update-UMSDevice -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID -Name $NewName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int]$DeviceID,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$Name,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$Site,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$Department,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$CostCenter,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$LastIP,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$Comment,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$AssetID,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$InserviceDate,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [String]$SerialNumber,
    [Parameter(ParameterSetName = "Update")]
    [ValidateNotNullOrEmpty()]
    [HashTable]$DeviceAttributes
    
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Create Update Request Data Payload
  $Body = @{ }
  foreach ($Key in $PSBoundParameters.Keys | Where-Object -FilterScript { $PSItem -in @("Name", "Site", "Department", "CostCenter", "LastIP", "Comment", "AssetID", "InserviceDate", "SerialNumber") })
  {
    $Body.Add($Key.ToLower(), $PSBoundParameters[$Key])
  }
  
  # Add Custom Device Attributes
  if ($PSBoundParameters.ContainsKey("DeviceAttributes"))
  {
    $Body.Add("deviceAttributes", [System.Collections.ArrayList]::New())
    foreach ($Key in $DeviceAttributes.Keys)
    {
      $Body.deviceAttributes.Add(@{ "identifier" = $Key.ToLower(); "value" = $DeviceAttributes[$Key] }) | Out-Null
    }
  }
  
  # Verify New Update Values were Passed
  if ($PSCmdlet.ParameterSetName -eq "Update")
  {
    # Set Rest API Method Values
    $Params = @{
      "WebSession" = $WebSession
      "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}" -f $ComputerName, $Port, $Version, "thinclients", $DeviceID)
      "Method"     = "Put"
      "Body"       = ($Body | ConvertTo-Json)
      "Headers"    = @{}
      "ContentType" = "application/json"
    }
    
    Try
    {
      # Make Rest API Call and Return Success Status
      $Response = Invoke-WebRequest -UseBasicParsing @Params
      If ($Response.StatusCode -eq 200)
      {
        # Return Success Status
        $TmpMessage = ($Response.Content | ConvertFrom-Json).Message
        [PSCustomObject]@{ "Success" = ($TmpMessage -eq "Update successful"); "Message" = $TmpMessage }
      }
      Else
      {
        # Return Failed Status
        [PSCustomObject]@{ "Success" = $False; "Message" = "Failed to Update Values" }
      }
    }
    Catch
    {
      # Return Failed Status
      [PSCustomObject]@{ "Success" = $False; "Message" = $PSItem.Exception.Message }
    }
  }
  else
  {
    # Return Failed Status
    [PSCustomObject]@{ "Success" = $False; "Message" = "No Updated Values" }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Update-UMSDevice

#region function Get-UMSProfile
function Get-UMSProfile ()
{
  <#
    .SYNOPSIS
      Get List of Profiles from UMS Rest API Server
    .DESCRIPTION
      Get List of Profiles from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER ProfileID
      ID of th UMS Profile
    .EXAMPLEs
      # Get All Profiles
      $ProfileList = Get-UMSProfile -WebSession $WebSession -ComputerName $ComputerName
  
      # Get Specific Profile
      $ProfileList = Get-UMSProfile -WebSession $WebSession -ComputerName $ComputerName -ProfileID $ProfileID
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True, ParameterSetName = "ProfileID")]
    [Int]$ProfileID
  )
  Write-Verbose -Message "Enter Function Get-UMSProfile"
  
  # Specify Specific Profile to Return
  if ($PSCmdlet.ParameterSetName -eq "ProfileID")
  {
    $TmpProfile = "/{0}" -f $ProfileID
  }
  else
  {
    $TmpProfile = $Null
  }
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}{4}" -f $ComputerName, $Port, $Version, "profiles", $TmpProfile)
    "Method"     = "Get"
  }
  Invoke-UMSRestMethod @Params
  
  Write-Verbose -Message "Exit Function Get-UMSProfile"
}
#endregion function Get-UMSProfile

#region function Get-UMSProfileDirectories
function Get-UMSProfileDirectories ()
{
  <#
    .SYNOPSIS
      Get List of Profile Directories from UMS Rest API Server
    .DESCRIPTION
      Get List of Profile Directories from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER Facets
      Specify what information the Rest API Call wil Return
  
      Children: Directory IDs
    .PARAMETER DirectoryID
      ID of the UMS Directory
    .EXAMPLEs
      # Get All Folders
      $DirList = Get-UMSProfileDirectories -WebSession $WebSession -ComputerName $ComputerName
  
      # Get Specific Folder with list of Child Folder ID's
      $DirList = Get-UMSProfileDirectories -WebSession $WebSession -ComputerName $ComputerName -DirectoryID $DirectoryID -Facets children
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [ValidateSet("children")]
    [String]$Facets,
    [parameter(Mandatory = $True, ParameterSetName = "DirectoryID")]
    [String]$DirectoryID
  )
  Write-Verbose -Message "Enter Function Get-UMSProfileDirectories"
  
  # Specify Specific Directory to Return
  if ($PSCmdlet.ParameterSetName -eq "DirectoryID")
  {
    $TmpDirectory = "/{0}" -f $DirectoryID
  }
  else
  {
    $TmpDirectory = $Null
  }
  
  # Set what information to return from Rest API Call
  if ($PSBoundParameters.ContainsKey("Facets"))
  {
    $TmpFacets = "?facets={0}" -f $Facets
  }
  else
  {
    $TmpFacets = $Null
  }
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}{4}{5}" -f $ComputerName, $Port, $Version, "directories/profiledirectories", $TmpDirectory, $TmpFacets)
    "Method"     = "Get"
  }
  Invoke-UMSRestMethod @Params
  
  Write-Verbose -Message "Exit Function Get-UMSProfileDirectories"
}
#endregion function Get-UMSProfileDirectories

#region function Get-UMSProfileAssignment
function Get-UMSProfileAssignment ()
{
  <#
    .SYNOPSIS
      Get list of Profile Assignments for a Device or a Diirectory
    .DESCRIPTION
      Get list of Profile Assignments for a Device or a Diirectory
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER DeviceID
      ID of the UMS Device to Get Profile Assignments for
    .PARAMETER DirectoryID
      ID of the UMS Device Directory to Get Profile Assignments for
    .EXAMPLEs
      # Get Profiles Assignments for Device
      Get-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -DeviceID $DeviceID
  
      # Get Profiles Assignments for Directory
      Get-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -DirectoryID $DirectoryID
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "Device")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True, ParameterSetName = "Device")]
    [Int]$DeviceID,
    [parameter(Mandatory = $True, ParameterSetName = "Directory")]
    [Int]$DirectoryID
  )
  Write-Verbose -Message "Enter Function Get-UMSProfileAssignment"
  
  # Get Assignments for a Device or a Directory
  if ($PSCmdlet.ParameterSetName -eq "Device")
  {
    $TmpID = $DeviceID
    $TmpType = "thinclients"
  }
  else
  {
    $TmpID = $DirectoryID
    $TmpType = "directories/tcdirectories"
  }
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}/assignments/profiles" -f $ComputerName, $Port, $Version, $TmpType, $TmpID)
    "Method"     = "Get"
  }
  Invoke-UMSRestMethod @Params
  
  Write-Verbose -Message "Exit Function Get-UMSProfileAssignment"
}
#endregion function Get-UMSProfileAssignment

#region function New-UMSProfileAssignment
function New-UMSProfileAssignment ()
{
  <#
    .SYNOPSIS
      Get List of Profiles from UMS Rest API Server
    .DESCRIPTION
      Get List of Profiles from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER ProfileID
      ID of th UMS Profile
    .PARAMETER DeviceID
      ID of the UMS Device to Assign the Profile To
    .PARAMETER DirectoryID
      ID of the UMS Device Directory to Assign the Profile To
    .EXAMPLEs
      # Assign Profile to a Device
      $ProfileList = New-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -ProfileID $ProfileID -DeviceID $DeviceID
  
      # Assign Profile to a Device Directory
      $ProfileList = New-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -ProfileID $ProfileID -DirectoryID $DirectoryID
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "Device")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int]$ProfileID,
    [parameter(Mandatory = $True, ParameterSetName = "Device")]
    [Int]$DeviceID,
    [parameter(Mandatory = $True, ParameterSetName = "Directory")]
    [Int]$DirectoryID
  )
  Write-Verbose -Message "Enter Function New-UMSProfileAssignment"
  
  # New Assignments for a Device or a Directory
  if ($PSCmdlet.ParameterSetName -eq "Device")
  {
    $TmpID = $DeviceID
    $TmpType = "tc"
    $TmpPath = "assignments/thinclients"
  }
  else
  {
    $TmpID = $DirectoryID
    $TmpType = "tcdirectory"
    $TmpPath = "assignments/tcdirectories"
  }
  
  # Create Update Request Data Payload
  $Body = [System.Collections.ArrayList]::New(@(@{ "assignee" = @{ "id" = $ProfileID; "type" = "profile" }; "receiver" = @{ "id" = $TmpID; "type" = $TmpType } }))
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}" -f $ComputerName, $Port, $Version, "profiles", $ProfileID, $TmpPath)
    "Method"     = "Put"
    "Body"       = (,$Body | ConvertTo-Json)
  }
  Try
  {
    # Make Rest API Call and Return Success Status
    $Response = Invoke-UMSRestMethod @Params
    # Return Success Status
    @{ "Success" = ($Result.Message -match "successfully") }
  }
  Catch
  {
    throw "Error Removing Profile Assignment"
    
    # Return Failed Status
    [PSCustomObject]@{ "Success" = $False }
  }
  
  Write-Verbose -Message "Exit Function New-UMSProfileAssignment"
}
#endregion function New-UMSProfileAssignment

#region function Remove-UMSProfileAssignment
function Remove-UMSProfileAssignment ()
{
  <#
    .SYNOPSIS
      Removed an Assigned profile from a Device or a Device Directory
    .DESCRIPTION
      Removed an Assigned profile from a Device or a Device Directory
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER ProfileID
      ID of th UMS Profile
    .PARAMETER DeviceID
      ID of the UMS Device to remove the Profile from
    .PARAMETER DirectoryID
      ID of the UMS Device Directory to remove the Profile from
    .EXAMPLEs
      # Remove Profile from a Device
      $ProfileList = Remove-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -ProfileID $ProfileID -DeviceID $DeviceID
  
      # Remove Profile from a Device Directory
      $ProfileList = Remove-UMSProfileAssignment -WebSession $WebSession -ComputerName $ComputerName -ProfileID $ProfileID -DirectoryID $DirectoryID
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "Device")]
  param (
    [parameter(Mandatory = $True)]
    [Microsoft.Powershell.Commands.Webrequestsession]$WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3,
    [parameter(Mandatory = $True)]
    [Int]$ProfileID,
    [parameter(Mandatory = $True, ParameterSetName = "Device")]
    [Int]$DeviceID,
    [parameter(Mandatory = $True, ParameterSetName = "Directory")]
    [Int]$DirectoryID
  )
  Write-Verbose -Message "Enter Function Remove-UMSProfileAssignment"
  
  # New Assignments for a Device or a Directory
  if ($PSCmdlet.ParameterSetName -eq "Device")
  {
    $TmpID = $DeviceID
    $TmpPath = "assignments/thinclients"
  }
  else
  {
    $TmpID = $DirectoryID
    $TmpPath = "assignments/tcdirectories"
  }
  
  # Make Rest API Call and Return the Information
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}/{6}" -f $ComputerName, $Port, $Version, "profiles", $ProfileID, $TmpPath, $TmpID)
    "Method"     = "Delete"
  }
  
  Try
  {
    # Make Rest API Call and Return Success Status
    $Response = Invoke-UMSRestMethod @Params
    # Return Success Status
    @{ "Success" = ($Result.Message -match "deleted profile assignment") }
  }
  Catch
  {
    throw "Error Removing Profile Assignment"
    
    # Return Failed Status
    [PSCustomObject]@{ "Success" = $False }
  }
  
  Write-Verbose -Message "Exit Function Remove-UMSProfileAssignment"
}
#endregion function Remove-UMSProfileAssignment

#region function Get-UMSStatus
function Get-UMSStatus ()
{
  <#
    .SYNOPSIS
      Get List of Devices from UMS Rest API Server
    .DESCRIPTION
      Get List of Devices from UMS Rest API Server
    .PARAMETER WebSession
      Web Session with Auth Cookie Returned from Connect-UMSRestAPI
    .PARAMETER ComputerName
      Name of UMS Rest API Web Server
    .PARAMETER Port
      UMS Web Server Port
    .PARAMETER Version
      UMS Rest API Version
    .PARAMETER 
    .EXAMPLEs
      Get-UMSStatus
    .NOTES
      Original Function By %YourName%
      
      %Date% - Initial Release
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [parameter(Mandatory = $True)]
    $WebSession,
    [parameter(Mandatory = $True)]
    [String]$ComputerName,
    [ValidateRange(0, 65535)]
    [Int]$Port = 8443,
    [ValidateSet(3)]
    [Int]$Version = 3
  )
  Write-Verbose -Message "Enter Function Get-UMSStatus"
  
  $Params = @{
    "WebSession" = $WebSession
    "Uri"        = ("https://{0}:{1}/umsapi/v{2}/{3}" -f $ComputerName, $Port, $Version, "serverstatus")
    "Method"     = "Get"
    "Headers"    = @{ }
  }
  $ReturnData = Invoke-UMSRestMethod @Params
  $ReturnData
  
  Write-Verbose -Message "Exit Function Get-UMSStatus"
}
#endregion function Get-UMSStatus

#endregion ******** UMS Rest API Functions ********

#region ******** Cyber Ark Rest API Functions ********

#region function Connect-MyCyberArk
Function Connect-MyCyberArk ()
{
  <#
    .SYNOPSIS
      Get Auth Token for Cyber Ark
    .DESCRIPTION
      Get Auth Token for Cyber Ark
    .PARAMETER ClientID
      Cyber Ark Client ID
    .PARAMETER ClientSecret
      Cyber Ark Client Secret
    .EXAMPLE
      $AuthToken = Connect-MyCyberArk -ClientID $ClientID -ClientSecret $ClientSecret
      If ($AuthToken.ExpiresIn -ne [DateTime]::MinValue)
      {
        Write-Host -Object "Cyber Ark Logon Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ClientID,
    [parameter(Mandatory = $True)]
    [String]$ClientSecret
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Set / Create Request Header
  $Headers = @{
    "content-type" = "application/x-www-form-urlencoded"
  }
  
  # Set / Creaste Request Body
  $Body = @{
    "grant_type"    = "client_credentials"
    "client_id"     = $ClientID
    "client_secret" = $ClientSecret
  }
  
  Try
  {
    # invoke Cyber Ark Login Rest API
    $Request = Invoke-WebRequest -UseBasicParsing -Method POST -Headers $Headers -Uri "https://aat4728.id.cyberark.cloud/oauth2/platformtoken" -Body $Body
    # Check / Verify Request Status Code
    If ($Request.StatusCode -eq 200)
    {
      # Generate Cyber Ark Auth Token
      $TmpToken = $Request.Content | ConvertFrom-Json
      @{
        "Content-Type"  = "application/json"
        "ExpiresIn"     = [DateTime]::Now.AddSeconds($TmpToken.expires_in)
        "Authorization" = "$($TmpToken.token_type) $($TmpToken.access_token)"
      }
    }
    Else
    {
      # Generate Failed Logon Auto Token
      @{
        "Content-Type"  = "Failed"
        "ExpiresIn"     = [DateTime]::MinValue
        "Authorization" = ""
      }
    }
  }
  Catch
  {
    # Generate Failed Logon Auto Token
    @{
      "Content-Type"  = "Error"
      "ExpiresIn"     = [DateTime]::MinValue
      "Authorization" = "$($PSItem.Exception.Message)"
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Connect-MyCyberArk

#region function Add-MyCyberArkAccount
Function Add-MyCyberArkAccount ()
{
  <#
    .SYNOPSIS
      Add New Account to a Cyber Ark Safe
    .DESCRIPTION
      Add New Account to a Cyber Ark Safe
    .PARAMETER AuthToken
      Cyber Ark Authentication Token
    .PARAMETER VaultName
      Name of the Cyber Ark Vault
    .PARAMETER SafeName
      Name of the Cyber Ark Safe
    .PARAMETER EntryName
      Name of the Cyber Ark Entry
    .PARAMETER DomainName
      Domain Name of the Account
    .PARAMETER UserName
      User Name of the Account
    .PARAMETER Password
      Password of the Account
    .PARAMETER Comment
      Comment for the Account
    .EXAMPLE
      $Result = Add-MyCyberArkAccount -AuthToken $AuthToken -VaultName $VaultName -SafeName $SafeName -UserName $UserName -Password $Password -DomainName $DomainName
      if ($Result.ID -ne "Error")
      {
        Write-Host -Object "Cyber Ark Add Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$VaultName,
    [parameter(Mandatory = $True)]
    [String]$SafeName,
    [parameter(Mandatory = $True)]
    [String]$EntryName,
    [parameter(Mandatory = $True)]
    [String]$DomainName,
    [parameter(Mandatory = $True)]
    [String]$UserName,
    [parameter(Mandatory = $True)]
    [String]$Password,
    [String]$Comment = "Kiosk User Account Added by '$([System.Environment]::UserDomainName)\$([System.Environment]::UserName)'"
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Set / Create Request Body
  $TmpAddUser = [Ordered]@{
    "name"                 = $EntryName
    "address"              = $DomainName
    "username"             = $UserName
    "platformId"           = "Autologon_Disable_rotation"
    "safeName"             = $SafeName
    "secretType"           = "password"
    "secret"               = $Password
    "secretManagement"     = @{
      "automaticManagementEnabled" = "False"
      "manualManagementReason"     = $Comment
    }
    "remoteMachinesAccess" = @{
      "remoteMachines"                   = $UserName
      "accessRestrictedToRemoteMachines" = "true"
    }
  }
  
  Try
  {
    # Invoke Cyber Ark Rest API
    $Uri = "https://$($VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/Accounts"
    $Results = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Method Post -Headers $AuthToken -Body ($TmpAddUser | ConvertTo-Json)
    # Check / Verify Request Status Code
    If ($Results.StatusCode -eq 201)
    {
      # Return Success Ststus
      $Results.Content | ConvertFrom-Json | ForEach-Object -Process { [MyCyberArkAccount]::New($PSItem.ID, $PSItem.Name, $PSItem.Address, $PSItem.UserName) }
    }
    Else
    {
      # Return Failed Stataus
      [MyCyberArkAccount]::New("Error", $Results.StatusCode, "Error", "Error")
    }
  }
  Catch
  {
    # Return Error Stataus
    [MyCyberArkAccount]::New("Error", "0", "Error", "$($PSItem.Exception.Message)")
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Add-MyCyberArkAccount

#region function Get-MyCyberArkAccount
Function Get-MyCyberArkAccount ()
{
  <#
    .SYNOPSIS
      Get list of Cyber Ark User Accounts
    .DESCRIPTION
      Get list of Cyber Ark User Accounts
    .PARAMETER AuthToken
      Cyber Ark Authentication Token
    .PARAMETER VaultName
      Name of the Cyber Ark Vault
    .PARAMETER SafeName
      Name of the Cyber Ark Safe
    .PARAMETER Modified
      Modified Time
    .PARAMETER Search
      Search Criteria
    .PARAMETER SearchType
      Search Type
    .PARAMETER SavedFilter
      Saved Cyber Ark Filter
    .PARAMETER Offset
      Offset, Skip X Number of Accounts
    .PARAMETER Limit
      Max Number of aqccounts to Return
    .PARAMETER Password
      Get Password
    .EXAMPLE
      $Accounts = Get-MyCyberArkAccount -AuthToken $AuthToken -VaultName $VaultName -SafeName $SafeName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Search")]
  Param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$VaultName,
    [parameter(Mandatory = $True)]
    [String]$SafeName,
    [DateTime]$Modified,
    [parameter(Mandatory = $False, ParameterSetName = "Search")]
    [String[]]$Search,
    [parameter(Mandatory = $False, ParameterSetName = "Search")]
    [ValidateSet("contains", "startswith")]
    [String]$SearchType = "contains",
    [parameter(Mandatory = $True, ParameterSetName = "SearchFilter")]
    [ValidateSet("Regular", "Recently", "New", "Link", "Deleted", "PolicyFailures", "AccessedByUsers", "ModifiedByUsers", "ModifiedByCPM", "DisabledPasswordByUserDisabledPasswordByCPM", "ScheduledForChange", "ScheduledForVerify", "ScheduledForReconcile", "SuccessfullyReconciled", "FailedChange", "FailedVerify", "FailedReconcile", "LockedOrNew", "Locked", "Favorites")]
    [String]$SavedFilter,
    [UInt16]$Offset = 0,
    [UInt16]$Limit = 100,
    [Switch]$GetPassword
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Create StringBuilder to Generate the Cyber Ark Rest API Query String
  $TmpSearch = [System.Text.StringBuilder]::New("filter=safename eq $($SafeName) and ModificationTime gte 0")
  If ($PSCmdlet.ParameterSetName -eq "Search")
  {
    # Add Search Criteria
    If ($PSBoundParameters.ContainsKey("Search"))
    {
      [Void]$TmpSearch.Append("&search=$($Search -join ' ')&searchType=$($SearchType)")
    }
  }
  Else
  {
    # Add Search Saved Filter
    [Void]$TmpSearch.Append("&savedfilter=$($SavedFilter)")
  }
  # Set Search Offset and Limit
  [Void]$TmpSearch.Append("&offset=$($offset)&limit=$($Limit)")
  
  # Invoke Cyber Ark Rest API
  $Uri = "https://$($VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts?$($TmpSearch.ToString())"
  $Results = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Method Get -Headers $AuthToken
  # Check / Verify Request Status Code
  If ($Results.StatusCode -eq 200)
  {
    # Process Returened Cyber Ark Records
    $TmpUsers = ($Results.Content | ConvertFrom-Json).Value
    ForEach ($TmpUser In $TmpUsers)
    {
      # Create Return Object
      $TmpAccount = [MyCyberArkAccount]::New($TmpUser.ID, $TmpUser.Name, $TmpUser.Address, $TmpUser.UserName, $TmpUser.CreatedTime, $TmpUser.secretManagement.lastModifiedTime)
      # Check if Get Password Switch was Passed
      If ($GetPassword.IsPresent)
      {
        # Generate Request URL and Body
        $PwdUri = "https://$($VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/$($TmpUser.id)/Password/Retrieve/"
        $PwdBody = @{
          "Reason"     = "Deployment Automation"
          "ActionType" = "Show"
        }
        # Invoke Cyber Ark Rest API
        $PwdResult = Invoke-WebRequest -UseBasicParsing -Uri $PwdUri -Method Post -Headers $AuthToken -Body ($PwdBody | ConvertTo-Json)
        # Check / Verify Request Status Code
        If ($PwdResult.StatusCode -eq 200)
        {
          # Check for and Get/AddPassword
          $TmpPword = [RegEx]::Match($PwdResult.Content, "^`"(?<Password>.+)`"$")
          If ($TmpPword.Groups["Password"].Success)
          {
            # Add Password
            $TmpAccount.AddPassword($TmpPword.Groups["Password"].Value)
          }
          Else
          {
            # Password Missing?
            $TmpAccount.AddPassword("Missing")
          }
        }
        Else
        {
          # Error Getting Password
          $TmpAccount.AddPassword("Error")
        }
      }
      # Return Cyber Ark Account To Pipeline
      $TmpAccount
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyCyberArkAccount

#region function Remove-MyCyberArkAccount
Function Remove-MyCyberArkAccount ()
{
  <#
    .SYNOPSIS
      Deletes a Cyber Ark User Account
    .DESCRIPTION
      Deletes a Cyber Ark User Account
    .PARAMETER AuthToken
      Cyber Ark Authentication Token
    .PARAMETER VaultName
      Cyber Ark Vault Name
    .PARAMETER ID
      Cyber Ark User ID
    .EXAMPLE
      $Results = Remove-MyCyberArkAccount -AuthToken $AuthToken -VaultName $VaultName -ID $ID
      If ($Result.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$VaultName,
    [parameter(Mandatory = $True)]
    [String[]]$ID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Process Cyber Ark IDs
  ForEach ($TmpID In $ID)
  {
    Try
    {
      # Invoke Cyber Ark Rest API
      $Uri = "https://$($VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts/$($TmpID)/"
      $Results = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Method Delete -Headers $AuthToken
      # Check / Verify Request Status Code
      If ($Results.StatusCode -eq 204)
      {
        # Return Success Status
        [PSCustomObject]@{
          "Success" = $True
          "ID"      = $TmpID
          "Message" = "Delete User was Successfull"
        }
      }
      Else
      {
        # Returen Failed Status
        [PSCustomObject]@{
          "Success" = $False
          "ID"      = $TmpID
          "Message" = "Delete User Failed"
        }
      }
    }
    Catch
    {
      # Return Error Status
      [PSCustomObject]@{
        "Success" = $False
        "ID"      = $TmpID
        "Message" = "Delete User: $($PSItem.Exception.Message)"
      }
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Remove-MyCyberArkAccount

#region function Update-MyCyberArkAccountPassword
Function Update-MyCyberArkAccountPassword ()
{
  <#
    .SYNOPSIS
      Updates the Password for Cyber Ark Accounts
    .DESCRIPTION
      Updates the Password for Cyber Ark Accounts
    .PARAMETER AuthToken
      Authentication Token from Connect-MyCyberArkVault
    .PARAMETER VaultName
      Name of the Cyber Ark Vault
    .PARAMETER ID
      Cyber Ark Account ID
    .PARAMETER Password
      New Password for the Cyber Ark Account
    .EXAMPLE
      $Status = Update-MyCyberArkAccountPassword -AuthToken $AuthToken -VaultName $VaultName -ID $ID -Password $Password
      If ($Status.Success)
      {
        # Password Updated
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Search")]
  Param (
    [parameter(Mandatory = $True)]
    [HashTable]$AuthToken,
    [parameter(Mandatory = $True)]
    [String]$VaultName,
    [parameter(Mandatory = $True)]
    [String[]]$ID,
    [parameter(Mandatory = $True)]
    [String]$Password
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  # Set / Create Request Body
  $TmpChange = @{
    "NewCredentials" = $Password
  }
  $TmpPwdBody = $TmpChange | ConvertTo-Json
  
  # process Cyber Ark IDs
  ForEach ($TmpID In $ID)
  {
    Try
    {
      # Invoke Cyber Ark Rest API
      $Uri = "https://$($VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/$($TmpID)/Password/Update/"
      $Results = Invoke-WebRequest -UseBasicParsing -Uri $Uri -Method Post -Headers $AuthToken -Body $TmpPwdBody
      # Check / Verify Request Status Code
      If ($Results.StatusCode -eq 200)
      {
        # Return Success Status
        [PSCustomObject]@{
          "Success" = $True
          "ID"      = $TmpID
          "Message" = "Password Update was Successfull"
        }
      }
      Else
      {
        # Return Failed Status
        [PSCustomObject]@{
          "Success" = $False
          "ID"      = $TmpID
          "Message" = "Password Update Failed"
        }
      }
    }
    Catch
    {
      # Return Error Status
      [PSCustomObject]@{
        "Success" = $False
        "ID"      = $TmpID
        "Message" = "Password Update: $($PSItem.Exception.Message)"
      }
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Update-MyCyberArkAccountPassword

#endregion ******** Cyber Ark Rest API Functions ********

#region ******** VPSX Server Functions ********

#region function Set-MyVPSXWebService
function Set-MyVPSXWebService ()
{
  <#
    .SYNOPSIS
      Sets the default VPSX Web Service Object
    .DESCRIPTION
      Sets the default VPSX Web Service Object
    .PARAMETER VPSXUri
      VPSX Server Soap Uri
    .PARAMETER passThru
      Return the Web Service Object
    .EXAMPLE
      Set-MyVPSXWebService -VPSXUri $VPSXUri
    .EXAMPLE
      $VPSXWebService = Set-MyVPSXWebService -VPSXUri $VPSXUri -PassThru
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$VPSXUri,
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $Script:VPSXWebService = New-WebServiceProxy -Uri $VPSXUri

  if ($PassThru.IsPresent)
  {
    $Script:VPSXWebService
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Set-MyVPSXWebService

#region function Set-MyVPSXWebService
function Set-MyVPSXWebService ()
{
  <#
    .SYNOPSIS
      Sets the default VPSX Web Service Object
    .DESCRIPTION
      Sets the default VPSX Web Service Object
    .PARAMETER VPSXUri
      VPSX Server Soap Uri
    .PARAMETER passThru
      Return the Web Service Object
    .EXAMPLE
      Set-MyVPSXWebService -VPSXUri $VPSXUri
    .EXAMPLE
      $VPSXWebService = Set-MyVPSXWebService -VPSXUri $VPSXUri -PassThru
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$VPSXUri,
    [Switch]$PassThru
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $Script:VPSXWebService = New-WebServiceProxy -Uri $VPSXUri

  if ($PassThru.IsPresent)
  {
    $Script:VPSXWebService
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Set-MyVPSXWebService

#region function Get-MyVPSXWebService
function Get-MyVPSXWebService ()
{
  <#
    .SYNOPSIS
      Get the default VPSX Web Service Object
    .DESCRIPTION
      Get the default VPSX Web Service Object
    .EXAMPLE
      $VPSXWebService = Get-MyVPSXWebService
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $Script:VPSXWebService

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyVPSXWebService

#region function Connect-MyVPSXSession
function Connect-MyVPSXSession ()
{
  <#
    .SYNOPSIS
      Login to VPSX Gateway and Return a Session ID
    .DESCRIPTION
      Login to VPSX Gateway and Return a Session ID
    .PARAMETER VPSXUri
      VPSX Server Soap Uri
    .PARAMETER VPSXWebService
      URL to VPSX Web Services
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .EXAMPLE
      $VPSXSessionID = Connect-MyVPSXSession -PSXUri $PSXUri -VPSXToken $VPSXToken
      if ($VPSXSessionID.Success)
      {
      Write-Host -Object "Success"
      }

      Make Initial Connection
    .EXAMPLE
      $VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken
      if ($VPSXSessionID.Success)
      {
      Write-Host -Object "Success"
      }

      Refresh Current Connection
    .EXAMPLE
      $VPSXSessionID = Connect-MyVPSXSession
      if ($VPSXSessionID.Success)
      {
      Write-Host -Object "Success"
      }

      Refresh Current Connection
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Refresh")]
  param (
    [parameter(Mandatory = $True, ParameterSetName = "Init")]
    [String]$VPSXUri,
    [parameter(Mandatory = $False, ParameterSetName = "Refresh")]
    [String]$VPSXWebService = $Script:VPSXWebService,
    [parameter(Mandatory = $True, ParameterSetName = "Init")]
    [parameter(Mandatory = $False, ParameterSetName = "Refresh")]
    [String]$VPSXToken = $Script:VPSXWebToken
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  If ($PSCmdlet.ParameterSetName -eq "Init")
  {
    Try
    {
      # Connect To UMS Web Services
      $Script:VPSXWebService = New-WebServiceProxy -Uri $VPSXUri
      $Script:VPSXWebToken = $VPSXToken
    }
    Catch
    {
      $Script:VPSXWebService = $Null
      $Script:VPSXWebToken = $Null
    }
  }

  Try
  {
    # Verify Connected to Web Services
    If (-not [String]::IsNullOrEmpty($Script:VPSXWebService.SoapVersion))
    {
      # Login to UMS Web Services
      $VPSXSessionID = $Script:VPSXWebService.Gateway_Logon($Null, $Script:VPSXWebToken)
    }
    Else
    {
      # Nissing Web Service
      $VPSXSessionID = $Null
    }
  }
  Catch
  {
    # Error Clear Session ID
    $VPSXSessionID = $Null
  }

  # Return Status / Session ID
  [PSCustomObject]@{ "Success" = (-not [String]::IsNullOrEmpty($VPSXSessionID)); "SessionID" = $VPSXSessionID }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Connect-MyVPSXSession

#region function Get-MyVPSXLocation
function Get-MyVPSXLocation ()
{
  <#
    .SYNOPSIS
      Get VPSX Locations
    .DESCRIPTION
      Get VPSX Locations
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Scroll
      Scroll Position
    .PARAMETER Maximum
      Maximum Number of Locations to Return
    .PARAMETER Location
      Locations to Return
    .EXAMPLE
      $Locations = Get-MyVPSXLocation
      if ($Locations.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Locations = Get-MyVPSXLocation -Scroll 0 -Maximum 100 -Location $Location
      if ($Locations.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Int]$Scroll = 0,
    [Int]$Maximum = 100,
    [String]$Location = $Null
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    # Get Location List
    $TmpLocations = [Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy1exe_vpsx_nlrswc2_exe_trid_VPSX.LCLST_Struct[]]::New($Maximum)
    $ChkCount = $VPSXWebService.VPS_GetLocations(($VPSXSessionID).SessionID, $Location, $Scroll, $Maximum, [Ref]$TmpLocations)
    if ($ChkCount -gt 0)
    {
      # Return Locations
      ,@($TmpLocations | Sort-Object -Property Loc | ForEach-Object -Process { [PSCustomObject]@{ "Location" = "$($PSItem.Loc)".ToUpper(); "HasChildren" = $PSItem.Child } })
    }
    else
    {
      # Return Empty Array
      ,@()
    }
  }
  else
  {
    # Return Empty Array
    ,@()
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyVPSXLocation

#region function Get-MyVPSXItem
function Get-MyVPSXItem ()
{
  <#
    .SYNOPSIS
      Get VPSX Items (Devices)
    .DESCRIPTION
      Get VPSX Items (Devices)
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Scroll
      Scroll Position
    .PARAMETER Maximum
      Maximum Number of Devices to Return
    .PARAMETER Item
      Name of Device to Return / Search For
    .PARAMETER Search
      Search for Device
    .EXAMPLE
      $Items = Get-MyVPSXItem -Device $Item
      if ($Items.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Locations = Get-MyVPSXItem -Scroll 0 -Maximum 100 -Item $Item -Search
      if ($Items.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Device")]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Scroll = 0,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Maximum = 100,
    [Parameter(Mandatory = $True, ParameterSetName = "Device")]
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [String]$Item = $Null,
    [Parameter(Mandatory = $True, ParameterSetName = "Search")]
    [Switch]$Search
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    # Get Device List
    if ($Search.IsPresent)
    {
      # Search for Device
      $TmpItems = @($VPSXWebService.VSPA_GetItems(($VPSXSessionID).SessionID, 1, $Item, $Maximum, $Scroll, $Null))
    }
    else
    {
      # Get Device List
      $TmpItems = @($VPSXWebService.VSPA_GetItems(($VPSXSessionID).SessionID, 1, $Null, 1, 0, $Item))
    }

    # Check Devices were Found
    if ($TmpItems.Count -gt 0)
    {
      # Return Devices
      ,@($TmpItems | ForEach-Object -Process { [PSCustomObject]@{ "Item" = $PSItem.Item; "Description" = $PSItem.Desc; "DefaultPrt" = $PSItem.DefaultPrt } })
    }
    else
    {
      # Return Empty Array
      ,@()
    }
  }
  else
  {
    # Return Empty Array
    ,@()
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyVPSXItem

#region function Add-MyVPSXItem
function Add-MyVPSXItem ()
{
  <#
    .SYNOPSIS
      Add a New Item / Device to the VPSX Server
    .DESCRIPTION
      Add a New Item / Device to the VPSX Server
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Item
      Name of Device to Add
    .PARAMETER Description
      Description of Device
    .EXAMPLE
      $Status = Add-MyVPSXItem -Item $Item -Description $Description
      if ($Status.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $True)]
    [String]$Item,
    [Parameter(Mandatory = $True)]
    [String]$Description
)
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    try
    {
      # Add Item / Device
      $VPSXWebService.VSPA_SetItem(($VPSXSessionID).SessionID, 1, $Item, $Description, 0)
      [PSCustomObject]@{ "Success" = $True; "Item" = $Item; "Description" = $Description; "Message" = "Item Added" }
    }
    catch
    {
      # Return Error
      [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Description" = $Description; "Message" = $PSItem.Exception.Message }
    }
  }
  else
  {
    # Return Failed
    [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Description" = $Description; "Message" = "Connection Failed" }
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Add-MyVPSXItem

#region function Remove-MyVPSXItem
Function Remove-MyVPSXItem ()
{
  <#
    .SYNOPSIS
      Removes an Item / Device from the VPSX Server
    .DESCRIPTION
      Removes an Item / Device from the VPSX Server
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Item
      Name of Device to Add
    .EXAMPLE
      $Status = Remove-MyVPSXItem -Item $Item
      if ($Status.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $True)]
    [String]$Item
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    try
    {
      # Add Item / Device
      $VPSXWebService.VSPA_RemoveItem(($VPSXSessionID).SessionID, 1, $Item)
      [PSCustomObject]@{ "Success" = $True; "Item" = $Item; "Message" = "Item Removed" }
    }
    catch
    {
      # Return Error
      [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Message" = $PSItem.Exception.Message }
    }
  }
  else
  {
    # Return Failed
    [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Message" = "Connection Failed" }
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Remove-MyVPSXItem

#region function Get-MyVPSXPrinter
function Get-MyVPSXPrinter ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Scroll
      Scroll Position
    .PARAMETER Maximum
      Maximum Number of Devices to Return
    .PARAMETER Printer
      Printer to Return / Search For
    .PARAMETER Location
      Location of Printers
    .PARAMETER Search
      Search for Printer
    .EXAMPLE
      $Printers = Get-MyVPSXPrinter -Printer $Printer
      if ($Printers.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Printers = Get-MyVPSXPrinter -Scroll 0 -Maximum 100 -Printer $Printer -Location $Location -Search
      if ($Printers.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Printer")]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Scroll = 0,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Maximum = 100,
    [Parameter(Mandatory = $True, ParameterSetName = "Printer")]
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [String]$Printer,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [String]$Location,
    [Parameter(Mandatory = $True, ParameterSetName = "Search")]
    [Switch]$Search
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    [Int]$FirstPrt = 0
    [Int]$LastPrt = 0
    [Int]$TotalPrt = 0

    # Get Device List
    if ($Search.IsPresent)
    {
      # Search for Printer
      $TmpPrinters = @($VPSXWebService.VPS_PrtList7(($VPSXSessionID).SessionID, $Printer, $Null, $Null, 0, $Maximum, $Scroll, $Null, $Null, $Null, $Null, $Null, $Null, $Null, $Null, $Null, $Location, [ref]$FirstPrt, [ref]$LastPrt, [ref]$TotalPrt))
    }
    else
    {
      # Get Printer List
      $TmpPrinters = @($VPSXWebService.VPS_PrtList7(($VPSXSessionID).SessionID, $Nullr, $Null, $Null, 0, 1, 0, $Null, $Null, $Null, $Null, $Null, $Null, $Null, $Null, $Printe, $Location, [ref]$FirstPrt, [ref]$LastPrt, [ref]$TotalPrt))
    }

    # Check Devices were Found
    if ($TotalPrt -gt 0)
    {
      # Return Devices
      ,@($TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ "Printer" = $PSItem.PrtName; "VPSID" = $PSItem.VPSID; "LongName" = $PSItem.PrtLName; "Department" = $PSItem.Dept; "Location" = "$($PSItem.Location)".ToUpper() } })
    }
    else
    {
      # Return Empty Array
      ,@()
    }
  }
  else
  {
    # Return Empty Array
    ,@()
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyVPSXPrinter

#region function Get-MyVPSXItemPrinter
Function Get-MyVPSXItemPrinter ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Scroll
      Scroll Position
    .PARAMETER Maximum
      Maximum Number of Devices to Return
    .PARAMETER Item
      Name of Device to Return pRINTERS FOR
    .PARAMETER Printer
      Printer to Return / Search For
    .PARAMETER Search
      Search for Printer
    .EXAMPLE
      $Printers = Get-MyVPSXItemPrinter -Item $Item -Printer $Printer
      if ($Printers.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item $Item -Search
      if ($Printers.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item $Item -Printer $Printer -Search
      if ($Printers.Count -gt 0)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Printer")]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Scroll = 0,
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [Int]$Maximum = 100,
    [Parameter(Mandatory = $True, ParameterSetName = "Printer")]
    [Parameter(Mandatory = $True, ParameterSetName = "Search")]
    [String]$Item = $Null,
    [Parameter(Mandatory = $True, ParameterSetName = "Printer")]
    [Parameter(Mandatory = $False, ParameterSetName = "Search")]
    [String]$Printer = $Null,
    [Parameter(Mandatory = $True, ParameterSetName = "Search")]
    [Switch]$Search
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    # Get Device List
    if ($Search.IsPresent)
    {
      # Search for Printer
      $TmpPrinters = @($VPSXWebService.VSPA_GetPrinters(($VPSXSessionID).SessionID, 1, $Item, $Printer, $Null, $Maximum, $Scroll, $Null))
    }
    else
    {
      # Get Printer List
      $TmpPrinters = @($VPSXWebService.VSPA_GetPrinters(($VPSXSessionID).SessionID, 1, $Item, $Null, $Null, 1, 0, $Printer))
    }

    # Check Devices were Found
    if ($TmpPrinters.Count -gt 0)
    {
      # Return Devices
      ,@($TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ "Printer" = $PSItem.Prt; "IsDefault" = $PSItem.IsDefault } })
    }
    else
    {
      # Return Empty Array
      ,@()
    }
  }
  else
  {
    # Return Empty Array
    ,@()
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyVPSXItemPrinter

#region function Add-MyVPSXItemPrinter
function Add-MyVPSXItemPrinter ()
{
  <#
    .SYNOPSIS
      Assign Printer to Item
    .DESCRIPTION
      Assign Printer to Item
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Item
      Name of Device to Add Printer to
    .PARAMETER Printer
      Printer to Assign to Device
    .PARAMETER Default
      Set Printer as Default
    .EXAMPLE
      $Status = Add-MyVPSXItemPrinter -Item $Item -Printer $Printer
      if ($Status.Success)
      {
        Write-Host -Object "Success"
      }
    .EXAMPLE
      $Status = Add-MyVPSXItemPrinter -Item $Item -Printer $Printer -Default
      if ($Status.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "ByValue")]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $True)]
    [String]$Item,
    [Parameter(Mandatory = $True)]
    [String]$Printer,
    [Switch]$Default
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    try
    {
      # Add Item / Device
      $VPSXWebService.VSPA_AddPrinter($VPSXSessionID, 1, $Item, $Printer, "VPS1", $Default.IsPresent)
      [PSCustomObject]@{ "Success" = $True; "Item" = $Item; "Printer" = $Printer; "Message" = "Printer Added" }
    }
    catch
    {
      # Return Error
      [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Printer" = $Printer; "Message" = $PSItem.Exception.Message }
    }
  }
  else
  {
    # Return Failed
    [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Printer" = $Printer; "Message" = "Connection Failed" }
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Add-MyVPSXItemPrinter

#region function Remove-MyVPSXItemPrinter
function Remove-MyVPSXItemPrinter ()
{
  <#
    .SYNOPSIS
      Assign Printer to Item
    .DESCRIPTION
      Assign Printer to Item
    .PARAMETER VPSXWebService
      VPSX Web Services Object
    .PARAMETER VPSXToken
      VPSX Token to Login to the Wev Services
    .PARAMETER Item
      Name of Device to Add Printer to
    .PARAMETER Printer
      Printer to Assign to Device
    .EXAMPLE
      $Status = Add-MyVPSXItemPrinter -Item $Item -Printer $Printer
      if ($Status.Success)
      {
        Write-Host -Object "Success"
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "ByValue")]
  param (
    [Object]$VPSXWebService = $Script:VPSXWebService,
    [String]$VPSXToken = $Script:VPSXWebToken,
    [Parameter(Mandatory = $True)]
    [String]$Item,
    [Parameter(Mandatory = $True)]
    [String]$Printer,
    [Switch]$Default
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  # Connect to VPSX Web Services
  if (($VPSXSessionID = Connect-MyVPSXSession -VPSXWebService $VPSXWebService -VPSXToken $VPSXToken).Success)
  {
    try
    {
      # Add Item / Device
      $VPSXWebService.VSPA_RemovePrinter($VPSXSessionID, 1, $Item, $Printer, "VPS1")
      [PSCustomObject]@{ "Success" = $True; "Item" = $Item; "Printer" = $Printer; "Message" = "Printer Removed" }
    }
    catch
    {
      # Return Error
      [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Printer" = $Printer; "Message" = $PSItem.Exception.Message }
    }
  }
  else
  {
    # Return Failed
    [PSCustomObject]@{ "Success" = $False; "Item" = $Item; "Printer" = $Printer; "Message" = "Connection Failed" }
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Remove-MyVPSXItemPrinter

#endregion ******** VPSX Server Functions ********

#region ******** Automation Account Functions ********

#region function Set-MyRunbookToken
Function Set-MyRunbookToken ()
{
  <#
    .SYNOPSIS
      Set the Runbook Automation Account Options
    .DESCRIPTION
      Set the Runbook Automation Account Options
    .PARAMETER AddMinutes
      Add Minutes to the Token Expiration
    .EXAMPLE
      $MyRunbookToken = Set-MyRunbookToken
      if ($MyRunbookToken.Success)
      {
        # Success!
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [UInt32]$AddMinutes = 15
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  Try
  {
    If ([String]::IsNullOrEmpty($Script:AAAuthToken.ExpiresOn) -or ($Script:AAAuthToken.ExpiresOn -le [DateTime]::Now.AddMinutes($AddMinutes)))
    {
      $AccessToken = Get-AzAccessToken -ResourceUrl "https://management.azure.com/" -AsSecureString
      $Script:AAAuthToken = @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer $([Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($AccessToken.Token)))"
        "ExpiresOn"     = ($AccessToken.ExpiresOn.LocalDateTime)
      }
    }
    
    [PSCustomObject]@{ "Success" = $True }
  }
  Catch
  {
    [PSCustomObject]@{ "Success" = $False }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Set-MyRunbookToken

#region function Get-MyRunbookToken
Function Get-MyRunbookToken ()
{
  <#
    .SYNOPSIS
      Set the Runbook Automation Account Options
    .DESCRIPTION
      Set the Runbook Automation Account Options
    .EXAMPLE
      $MyRunbookToken = Get-MyRunbookToken
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $Script:AAAuthToken
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyRunbookToken

#region function Set-MyRunbookOptions
Function Set-MyRunbookOptions ()
{
  <#
    .SYNOPSIS
      Set the Runbook Automation Account Options
    .DESCRIPTION
      Set the Runbook Automation Account Options
    .PARAMETER SubscriptionID
      Azure Subscriptuion ID
    .PARAMETER ResourceGroup
      Azure Resource Group Name
    .PARAMETER AutomationAccount
      Azure Automation Account Name
    .PARAMETER Runbook
      Azure Runbook Name
    .EXAMPLE
      Set-MyRunbookOptions -SubscriptionID $SubscriptionID -ResourceGroup $ResourceGroup -AutomationAccount $AutomationAccount -Runbook $Runbook
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$SubscriptionID = $Script:AASubscriptionID,
    [parameter(Mandatory = $True)]
    [String]$ResourceGroup = $Script:AAResourceGroup,
    [parameter(Mandatory = $True)]
    [String]$AutomationAccount = $Script:AAAutomationAccount,
    [parameter(Mandatory = $True)]
    [String]$Runbook = $Script:AARunbook
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $Script:AASubscriptionID = $SubscriptionID
  $Script:AAResourceGroup = $ResourceGroup
  $Script:AAAutomationAccount = $AutomationAccount
  $Script:AARunbook = $Runbook
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Set-MyRunbookOptions

#region function Get-MyRunbookOptions
function Get-MyRunbookOptions ()
{
  <#
    .SYNOPSIS
      Get the Set Runbook Automation Account Options
    .DESCRIPTION
      Get the Set Runbook Automation Account Options
    .EXAMPLE
      $RunbookOptions = Get-MyRunbookOptions
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  [PSCustomObject]@{
    "SubscriptionID"    = $Script:AASubscriptionID
    "ResourceGroup"     = $Script:AAResourceGroup
    "AutomationAccount" = $Script:AAAutomationAccount
    "Runbook"           = $Script:AARunbook
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyRunbookOptions

#region function Get-MyRunbookJob
function Get-MyRunbookJob ()
{
  <#
    .SYNOPSIS
      Get Runbook Jobs
    .DESCRIPTION
      Get Runbook Jobs
    .PARAMETER SubscriptionID
      Azure Subscriptuion ID
    .PARAMETER ResourceGroup
      Azure Resource Group Name
    .PARAMETER AutomationAccount
      Azure Automation Account Name
    .PARAMETER Runbook
      Azure Runbook Name
    .PARAMETER AuthToken
      Automation Account AuthToken
    .PARAMETER JobID
      Runbook Job JobID
    .PARAMETER Status
      Runbook Job Status
    .PARAMETER StatusComp
      Runbook Job Status Comparison
    .PARAMETER Create
      Runbook Jon Create Time
    .EXAMPLE
      $MyRunbookJob = Get-MyRunbookJob
    .EXAMPLE
      $MyRunbookJob = Get-MyRunbookJob -JobID $JobId
    .EXAMPLE
      $MyRunbookJob = Get-MyRunbookJob -Status $Status
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  param (
    [String]$SubscriptionID = $Script:AASubscriptionID,
    [String]$ResourceGroup = $Script:AAResourceGroup,
    [String]$AutomationAccount = $Script:AAAutomationAccount,
    [String]$Runbook = $Script:AARunbook,
    [Hashtable]$AuthToken = $Script:AAAuthToken,
    [parameter(Mandatory = $True, ParameterSetName = "ID")]
    [String]$JobID,
    [parameter(Mandatory = $True, ParameterSetName = "Search")]
    [ValidateSet("Activating", "Blocked", "Completed", "Disconnected", "Failed", "New", "Queued", "Removing", "Resuming", "Running", "Stopped", "Stopping", "Suspended", "Suspending")]
    [String]$Status,
    [parameter(Mandatory = $False, ParameterSetName = "Search")]
    [ValidateSet("eq", "ne")]
    [string]$StatusComp = "eq",
    [parameter(Mandatory = $False, ParameterSetName = "All")]
    [parameter(Mandatory = $False, ParameterSetName = "Search")]
    [DateTime]$Create = [DateTime]::Now.AddHours(-12)
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $Search = [System.Text.StringBuilder]::New()
  if ($PSCmdlet.ParameterSetName -ne "ID")
  {
    [Void]$Search.Append("`$filter=properties/creationTime ge $(($Create.ToUniversalTime()).ToString("O")) and properties/runbook/name eq '$($Runbook)'")
    If ($PSBoundParameters.ContainsKey("Status"))
    {
      [Void]$Search.Append(" and properties/status $($StatusComp) '$($Status)'")
    }
    [Void]$Search.Append("&")
  }
  
  $URI = "https://management.azure.com/subscriptions/$($SubscriptionID)/resourceGroups/$($ResourceGroup)/providers/Microsoft.Automation/automationAccounts/$($AutomationAccount)/jobs/$($JobID)?$($Search.ToString())api-version=2023-11-01"
  $Jobs = Invoke-WebRequest -Uri $URI -Method GET -ContentType "application/json" -Headers $AuthToken
  If ($Jobs.StatusCode -eq 200)
  {
    If ($PSCmdlet.ParameterSetName -eq "ID")
    {
      ($Jobs.Content | ConvertFrom-Json)
    }
    Else
    {
      ($Jobs.Content | ConvertFrom-Json).Value
    }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyRunbookJob

#region function Get-MyRunbookJobOutput
Function Get-MyRunbookJobOutput ()
{
  <#
    .SYNOPSIS
      Get Runbook Job Output
    .DESCRIPTION
      Get Runbook Job Output
    .PARAMETER SubscriptionID
      Azure Subscriptuion ID
    .PARAMETER ResourceGroup
      Azure Resource Group Name
    .PARAMETER AutomationAccount
      Azure Automation Account Name
    .PARAMETER AuthToken
      Automation Account AuthToken
    .PARAMETER JobID
      Runbook Job JobID
    .EXAMPLE
      $MyRunbookJobOutput = Get-MyRunbookJobOutput -JobID $JobId
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$SubscriptionID = $Script:AASubscriptionID,
    [String]$ResourceGroup = $Script:AAResourceGroup,
    [String]$AutomationAccount = $Script:AAAutomationAccount,
    [Hashtable]$AuthToken = $Script:AAAuthToken,
    [parameter(Mandatory = $True)]
    [String]$JobID
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $URI = "https://management.azure.com/subscriptions/$($SubscriptionID)/resourceGroups/$($ResourceGroup)/providers/Microsoft.Automation/automationAccounts/$($AutomationAccount)/jobs/$($JobID)/output?api-version=2023-11-01"
  $JobOutput = Invoke-WebRequest -Uri $URI -Method GET -ContentType "application/json" -Headers $AuthToken
  If ($JobOutput.StatusCode -eq 200)
  {
    $JobOutput.Content
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Get-MyRunbookJobOutput

#region function Send-MyRunbookJobCommand
Function Send-MyRunbookJobCommand ()
{
  <#
    .SYNOPSIS
      Send Comand to Runbook Job
    .DESCRIPTION
      Send Comand to Runbook Job
    .PARAMETER SubscriptionID
      Azure Subscriptuion ID
    .PARAMETER ResourceGroup
      Azure Resource Group Name
    .PARAMETER AutomationAccount
      Azure Automation Account Name
    .PARAMETER AuthToken
      Automation Account AuthToken
    .PARAMETER JobID
      Runbook Job JobID
    .PARAMETER Command
      Command to Send to the Runbook Job
    .EXAMPLE
      $MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID $JobId -Command "Susprend"
    .EXAMPLE
      $MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID $JobId -Command "Resume"
    .EXAMPLE
      $MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID $JobId -Command "Stop"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$SubscriptionID = $Script:AASubscriptionID,
    [String]$ResourceGroup = $Script:AAResourceGroup,
    [String]$AutomationAccount = $Script:AAAutomationAccount,
    [Hashtable]$AuthToken = $Script:AAAuthToken,
    [parameter(Mandatory = $True)]
    [String]$JobID,
    [parameter(Mandatory = $True)]
    [ValidateSet("Stop", "Susprend", "Resume")]
    [String]$Command
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $URI = "https://management.azure.com/subscriptions/$($SubscriptionID)/resourceGroups/$($ResourceGroup)/providers/Microsoft.Automation/automationAccounts/$($AutomationAccount)/jobs/$($JobID)/$($Command)?api-version=2023-11-01"
  $JobOutput = Invoke-WebRequest -Uri $URI -Method POST -ContentType "application/json" -Headers $AuthToken
  If ($JobOutput.StatusCode -eq 200)
  {
    [PSCustomObject]@{ "Success" = $True; "Command" = $Command }
  }
  Else
  {
    [PSCustomObject]@{ "Success" = $False; "Command" = $Command }
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Send-MyRunbookJobCommand

#region function Start-MyRunbookJob
Function Start-MyRunbookJob ()
{
  <#
    .SYNOPSIS
      Get Runbook Jobs
    .DESCRIPTION
      Get Runbook Jobs
    .PARAMETER SubscriptionID
      Azure Subscriptuion ID
    .PARAMETER ResourceGroup
      Azure Resource Group Name
    .PARAMETER AutomationAccount
      Azure Automation Account Name
    .PARAMETER Runbook
      Azure Runbook Name
    .PARAMETER AuthToken
      Automation Account AuthToken
    .PARAMETER JobName
      Runbook Job Name
    .PARAMETER RunOn
      Hybrid Worker Group
    .PARAMETER Parameters
      Parameters to Pass to the the RunBook Job
    .EXAMPLE
      $MyRunbookJob = Start-MyRunbookJob -RunOn $RunOn -Parameters $Parameters
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "All")]
  Param (
    [String]$SubscriptionID = $Script:AASubscriptionID,
    [String]$ResourceGroup = $Script:AAResourceGroup,
    [String]$AutomationAccount = $Script:AAAutomationAccount,
    [String]$Runbook = $Script:AARunbook,
    [Hashtable]$AuthToken = $Script:AAAuthToken,
    [String]$JobName = ([System.Guid]::NewGuid()).Guid,
    [String]$RunOn,
    [HashTable]$Parameters = @{}
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"
  
  $URI = "https://management.azure.com/subscriptions/$($SubscriptionID)/resourceGroups/$($ResourceGroup)/providers/Microsoft.Automation/automationAccounts/$($AutomationAccount)/jobs/$($JobName)?api-version=2023-11-01"
  $Body = @{
    "properties" = @{
      "runbook" = @{ "name" = $Runbook }
      "parameters" = $Parameters
      "runOn"   = $RunOn
    }
  }
  $NewJob = Invoke-WebRequest -Uri $URI -Method PUT -ContentType "application/json" -Headers $AuthToken -Body ($Body | ConvertTo-Json)
  If ($NewJob.StatusCode -eq 201)
  {
    ($NewJob.Content | ConvertFrom-Json)
  }
  
  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Start-MyRunbookJob

#endregion ******** Automation Account Functions ********

#endregion ================ My Custom Functions ================

#region >>>>>>>>>>>>>>>> My Common Dialogs <<<<<<<<<<<<<<<<

#region function Show-UserAlertDialog
Function Show-UserAlertDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-UserAlertDialog
    .DESCRIPTION
      Shows Show-UserAlertDialog
    .PARAMETER DialogTitle
    .PARAMETER Title
    .PARAMETER Message
    .PARAMETER Width
    .PARAMETER MsgType
    .EXAMPLE
      $Return = Show-UserAlertDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [String]$Title,
    [parameter(Mandatory = $True)]
    [String]$Message,
    [Int]$Width = 25,
    [ValidateSet("Good", "Warn", "Error", "Info")]
    [String]$MsgType = "Info"
  )
  Write-Verbose -Message "Enter Function Show-UserAlertDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** $UserAlertDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # $UserAlertDialog Form
  # ************************************************
  #region $UserAlertDialogForm = [System.Windows.Forms.Form]::New()
  $UserAlertDialogForm = [System.Windows.Forms.Form]::New()
  $UserAlertDialogForm.BackColor = [MyConfig]::Colors.TextBack
  $UserAlertDialogForm.Font = [MyConfig]::Font.Regular
  $UserAlertDialogForm.ForeColor = [MyConfig]::Colors.TextFore
  $UserAlertDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $UserAlertDialogForm.Icon = $FCGForm.Icon
  $UserAlertDialogForm.KeyPreview = $True
  $UserAlertDialogForm.MaximizeBox = $False
  $UserAlertDialogForm.MinimizeBox = $False
  $UserAlertDialogForm.Name = "UserAlertDialogForm"
  $UserAlertDialogForm.Owner = $FCGForm
  $UserAlertDialogForm.ShowInTaskbar = $False
  $UserAlertDialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $UserAlertDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $UserAlertDialogForm.Tag = @{ "Cancel" = $False; "Pause" = $False }
  $UserAlertDialogForm.Text = $DialogTitle
  #endregion $UserAlertDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-UserAlertDialogFormKeyDown ********
  Function Start-UserAlertDialogFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the UserAlertDialog Form Control
    .DESCRIPTION
      KeyDown Event for the UserAlertDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-UserAlertDialogFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$UserAlertDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $UserAlertDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$UserAlertDialogForm"
  }
  #endregion ******** Function Start-UserAlertDialogFormKeyDown ********
  $UserAlertDialogForm.add_KeyDown({ Start-UserAlertDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-UserAlertDialogFormShown ********
  Function Start-UserAlertDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $UserAlertDialog Form Control
      .DESCRIPTION
        Shown Event for the $UserAlertDialog Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-UserAlertDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$UserAlertDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$UserAlertDialogForm"
  }
  #endregion ******** Function Start-UserAlertDialogFormShown ********
  $UserAlertDialogForm.add_Shown({ Start-UserAlertDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for $UserAlertDialog Form ********
  
  # ************************************************
  # $UserAlertDialogMain Panel
  # ************************************************
  #region $UserAlertDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $UserAlertDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $UserAlertDialogForm.Controls.Add($UserAlertDialogMainPanel)
  $UserAlertDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $UserAlertDialogMainPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $UserAlertDialogMainPanel.Name = "UserAlertDialogMainPanel"
  $UserAlertDialogMainPanel.Size = [System.Drawing.Size]::New(($UserAlertDialogForm.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($UserAlertDialogForm.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))
  #endregion $UserAlertDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $UserAlertDialogMainPanel Controls ********
    
  #region $UserAlertDialogMainTitleLabel = [System.Windows.Forms.Label]::New()
  $UserAlertDialogMainTitleLabel = [System.Windows.Forms.Label]::New()
  $UserAlertDialogMainPanel.Controls.Add($UserAlertDialogMainTitleLabel)
  $UserAlertDialogMainTitleLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  
  Switch ($MsgType)
  {
    "Info"
    {
      $UserAlertDialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextInfo
      Break
    }
    "Good"
    {
      $UserAlertDialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextGood
      Break
    }
    "Warn"
    {
      $UserAlertDialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextWarn
      Break
    }
    "Error"
    {
      $UserAlertDialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextBad
      Break
    }
  }
  $UserAlertDialogMainTitleLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $UserAlertDialogMainTitleLabel.Font = [MyConfig]::Font.Title
  $UserAlertDialogMainTitleLabel.ForeColor = [MyConfig]::Colors.TextBack
  $UserAlertDialogMainTitleLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $UserAlertDialogMainTitleLabel.Name = "UserAlertDialogMainTitleLabel"
  $UserAlertDialogMainTitleLabel.Size = [System.Drawing.Size]::New(($UserAlertDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $UserAlertDialogMainTitleLabel.PreferredHeight)
  $UserAlertDialogMainTitleLabel.Text = $Title
  $UserAlertDialogMainTitleLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  #endregion $UserAlertDialogMainTitleLabel = [System.Windows.Forms.Label]::New()
  
  #region $UserAlertDialogMainMessageLabel = [System.Windows.Forms.Label]::New()
  $UserAlertDialogMainMessageLabel = [System.Windows.Forms.Label]::New()
  $UserAlertDialogMainPanel.Controls.Add($UserAlertDialogMainMessageLabel)
  $UserAlertDialogMainMessageLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $UserAlertDialogMainMessageLabel.BackColor = [MyConfig]::Colors.TextBack
  $UserAlertDialogMainMessageLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $UserAlertDialogMainMessageLabel.Font = [MyConfig]::Font.Bold
  $UserAlertDialogMainMessageLabel.ForeColor = [MyConfig]::Colors.TextFore
  $UserAlertDialogMainMessageLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($UserAlertDialogMainTitleLabel.Bottom + [MyConfig]::FormSpacer))
  $UserAlertDialogMainMessageLabel.Name = "UserAlertDialogMainMessageLabel"
  $UserAlertDialogMainMessageLabel.Size = [System.Drawing.Size]::New($UserAlertDialogMainTitleLabel.Width, ($UserAlertDialogMainTitleLabel.Width - ($UserAlertDialogMainMessageLabel.Top * 3)))
  $UserAlertDialogMainMessageLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $UserAlertDialogMainMessageLabel.Text = $Message
  #endregion $UserAlertDialogMainMessageLabel = [System.Windows.Forms.Label]::New()
  
  $UserAlertDialogMainPanel.ClientSize = [System.Drawing.Size]::New($UserAlertDialogMainPanel.ClientSize.Width, ($UserAlertDialogMainMessageLabel.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $UserAlertDialogMainPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  # ************************************************
  # $UserAlertDialogBtm Panel
  # ************************************************
  #region $UserAlertDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $UserAlertDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $UserAlertDialogForm.Controls.Add($UserAlertDialogBtmPanel)
  $UserAlertDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $UserAlertDialogBtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $UserAlertDialogMainPanel.Bottom)
  $UserAlertDialogBtmPanel.Name = "UserAlertDialogBtmPanel"
  $UserAlertDialogBtmPanel.Text = "$UserAlertDialogBtmPanel"
  #endregion $UserAlertDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $UserAlertDialogBtmPanel Controls ********
  
  $NumButtons = 3
  $TempSpace = [Math]::Floor($UserAlertDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $UserAlertDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $UserAlertDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $UserAlertDialogBtmPanel.Controls.Add($UserAlertDialogBtmMidButton)
  $UserAlertDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $UserAlertDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $UserAlertDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $UserAlertDialogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $UserAlertDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $UserAlertDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $UserAlertDialogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
  $UserAlertDialogBtmMidButton.Name = "UserAlertDialogBtmMidButton"
  $UserAlertDialogBtmMidButton.TabStop = $True
  $UserAlertDialogBtmMidButton.Text = "OK"
  $UserAlertDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $UserAlertDialogBtmMidButton.PreferredSize.Height)
  #endregion $UserAlertDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  $UserAlertDialogBtmPanel.ClientSize = [System.Drawing.Size]::New($UserAlertDialogMainPanel.ClientSize.Width, (($UserAlertDialogBtmPanel.Controls[$UserAlertDialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $UserAlertDialogBtmPanel Controls ********
  
  #$UserAlertDialogForm.ClientSize = [System.Drawing.Size]::New($UserAlertDialogForm.ClientSize.Width, ($UserAlertDialogForm.ClientSize.Height - ($UserAlertDialogMainPanel.ClientSize.Height - ($UserAlertDialogMainMessageLabel.Bottom + ([MyConfig]::FormSpacer * 2)))))
  
  $UserAlertDialogForm.ClientSize = [System.Drawing.Size]::New($UserAlertDialogForm.ClientSize.Width, $UserAlertDialogBtmPanel.Bottom)
  
  #endregion ******** Controls for $UserAlertDialog Form ********
  
  #endregion ================ End **** $UserAlertDialog **** End ================
  
  $DialogResult = $UserAlertDialogForm.ShowDialog($FCGForm)
  
  $UserAlertDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-UserAlertDialog"
}
#endregion function Show-UserAlertDialog

#region GetUserResponseDialog Result Class
Class GetUserResponseDialog
{
  [Bool]$Success
  [Object]$DialogResult
  
  GetUserResponseDialog ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }
}
#endregion GetUserResponseDialog Result Class

#region function Show-GetUserResponseDialog
Function Show-GetUserResponseDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetUserResponseDialog
    .DESCRIPTION
      Shows Show-GetUserResponseDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER Width
    .PARAMETER Icon
    .PARAMETER ButtonDefault
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetUserResponseDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "One")]
  Param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [String]$MessageText,
    [Int]$Width = 25,
    [System.Drawing.Icon]$Icon = [System.Drawing.SystemIcons]::Information,
    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonLeft,
    [parameter(Mandatory = $False, ParameterSetName = "One")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonMid = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonRight
  )
  Write-Verbose -Message "Enter Function Show-GetUserResponseDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** $GetUserResponseDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # $GetUserResponseDialog Form
  # ************************************************
  #region $GetUserResponseDialogForm = [System.Windows.Forms.Form]::New()
  $GetUserResponseDialogForm = [System.Windows.Forms.Form]::New()
  $GetUserResponseDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetUserResponseDialogForm.Font = [MyConfig]::Font.Regular
  $GetUserResponseDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetUserResponseDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetUserResponseDialogForm.Icon = $FCGForm.Icon
  $GetUserResponseDialogForm.KeyPreview = $AllowControl.IsPresent
  $GetUserResponseDialogForm.MaximizeBox = $False
  $GetUserResponseDialogForm.MinimizeBox = $False
  $GetUserResponseDialogForm.Name = "GetUserResponseDialogForm"
  $GetUserResponseDialogForm.Owner = $FCGForm
  $GetUserResponseDialogForm.ShowInTaskbar = $False
  $GetUserResponseDialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $GetUserResponseDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetUserResponseDialogForm.Tag = @{ "Cancel" = $False; "Pause" = $False }
  $GetUserResponseDialogForm.Text = $DialogTitle
  #endregion $GetUserResponseDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-GetUserResponseDialogFormKeyDown ********
  Function Start-GetUserResponseDialogFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the GetUserResponseDialog Form Control
    .DESCRIPTION
      KeyDown Event for the GetUserResponseDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-GetUserResponseDialogFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetUserResponseDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetUserResponseDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetUserResponseDialogForm"
  }
  #endregion ******** Function Start-GetUserResponseDialogFormKeyDown ********
  $GetUserResponseDialogForm.add_KeyDown({ Start-GetUserResponseDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetUserResponseDialogFormShown ********
  Function Start-GetUserResponseDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $GetUserResponseDialog Form Control
      .DESCRIPTION
        Shown Event for the $GetUserResponseDialog Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-GetUserResponseDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetUserResponseDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$GetUserResponseDialogForm"
  }
  #endregion ******** Function Start-GetUserResponseDialogFormShown ********
  $GetUserResponseDialogForm.add_Shown({ Start-GetUserResponseDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for $GetUserResponseDialog Form ********
  
  # ************************************************
  # $GetUserResponseDialogMain Panel
  # ************************************************
  #region $GetUserResponseDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetUserResponseDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetUserResponseDialogForm.Controls.Add($GetUserResponseDialogMainPanel)
  $GetUserResponseDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserResponseDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetUserResponseDialogMainPanel.Name = "GetUserResponseDialogMainPanel"
  $GetUserResponseDialogMainPanel.Text = "$GetUserResponseDialogMainPanel"
  #endregion $GetUserResponseDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetUserResponseDialogMainPanel Controls ********
  
  #region $GetUserResponseDialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()
  $GetUserResponseDialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()
  $GetUserResponseDialogMainPanel.Controls.Add($GetUserResponseDialogMainPictureBox)
  $GetUserResponseDialogMainPictureBox.AutoSize = $False
  $GetUserResponseDialogMainPictureBox.BackColor = [MyConfig]::Colors.Back
  $GetUserResponseDialogMainPictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserResponseDialogMainPictureBox.Image = $Icon
  $GetUserResponseDialogMainPictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $GetUserResponseDialogMainPictureBox.Name = "GetUserResponseDialogMainPictureBox"
  $GetUserResponseDialogMainPictureBox.Size = [System.Drawing.Size]::New(32, 32)
  $GetUserResponseDialogMainPictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage
  #endregion $GetUserResponseDialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()
  
  #region $GetUserResponseDialogMainLabel = [System.Windows.Forms.Label]::New()
  $GetUserResponseDialogMainLabel = [System.Windows.Forms.Label]::New()
  $GetUserResponseDialogMainPanel.Controls.Add($GetUserResponseDialogMainLabel)
  $GetUserResponseDialogMainLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserResponseDialogMainLabel.Font = [MyConfig]::Font.Regular
  $GetUserResponseDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
  $GetUserResponseDialogMainLabel.Location = [System.Drawing.Point]::New(($GetUserResponseDialogMainPictureBox.Right + [MyConfig]::FormSpacer), $GetUserResponseDialogMainPictureBox.Top)
  $GetUserResponseDialogMainLabel.Name = "GetUserResponseDialogMainLabel"
  $GetUserResponseDialogMainLabel.Size = [System.Drawing.Size]::New(($GetUserResponseDialogMainPanel.ClientSize.Width - ($GetUserResponseDialogMainLabel.Left + ([MyConfig]::FormSpacer * 3))), $GetUserResponseDialogMainPanel.ClientSize.Width)
  $GetUserResponseDialogMainLabel.Text = $MessageText
  $GetUserResponseDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $GetUserResponseDialogMainLabel = [System.Windows.Forms.Label]::New()
  
  # Returns the minimum size required to display the text
  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetUserResponseDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetUserResponseDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
  $GetUserResponseDialogMainLabel.Size = [System.Drawing.Size]::New(($GetUserResponseDialogMainPanel.ClientSize.Width - ($GetUserResponseDialogMainLabel.Left + ([MyConfig]::FormSpacer * 3))), ($TmpSize.Height + [MyConfig]::Font.Height))
  
  #endregion ******** $GetUserResponseDialogMainPanel Controls ********
  
  Switch ($PSCmdlet.ParameterSetName)
  {
    "One"
    {
      $GetUserResponseDialogButtons = 1
      Break
    }
    "Two"
    {
      $GetUserResponseDialogButtons = 2
      Break
    }
    "Three"
    {
      $GetUserResponseDialogButtons = 3
      Break
    }
  }
  
  # Evenly Space Buttons - Move Size to after Text
  # ************************************************
  # $GetUserResponseDialogBtm Panel
  # ************************************************
  #region $GetUserResponseDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetUserResponseDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetUserResponseDialogForm.Controls.Add($GetUserResponseDialogBtmPanel)
  $GetUserResponseDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserResponseDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetUserResponseDialogBtmPanel.Name = "GetUserResponseDialogBtmPanel"
  $GetUserResponseDialogBtmPanel.Text = "$GetUserResponseDialogBtmPanel"
  #endregion $GetUserResponseDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetUserResponseDialogBtmPanel Controls ********
  
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetUserResponseDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $GetUserResponseDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  If (($GetUserResponseDialogButtons -eq 2) -or ($GetUserResponseDialogButtons -eq 3))
  {
    $GetUserResponseDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
    $GetUserResponseDialogBtmPanel.Controls.Add($GetUserResponseDialogBtmLeftButton)
    $GetUserResponseDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
    $GetUserResponseDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $GetUserResponseDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
    $GetUserResponseDialogBtmLeftButton.DialogResult = $ButtonLeft
    $GetUserResponseDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
    $GetUserResponseDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $GetUserResponseDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
    $GetUserResponseDialogBtmLeftButton.Name = "GetUserResponseDialogBtmLeftButton"
    $GetUserResponseDialogBtmLeftButton.TabIndex = 0
    $GetUserResponseDialogBtmLeftButton.TabStop = $True
    $GetUserResponseDialogBtmLeftButton.Text = "&$($ButtonLeft.ToString())"
    $GetUserResponseDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetUserResponseDialogBtmLeftButton.PreferredSize.Height)
  }
  #endregion $GetUserResponseDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  
  #region $GetUserResponseDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  If (($GetUserResponseDialogButtons -eq 1) -or ($GetUserResponseDialogButtons -eq 3))
  {
    $GetUserResponseDialogBtmMidButton = [System.Windows.Forms.Button]::New()
    $GetUserResponseDialogBtmPanel.Controls.Add($GetUserResponseDialogBtmMidButton)
    $GetUserResponseDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
    $GetUserResponseDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $GetUserResponseDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
    $GetUserResponseDialogBtmMidButton.DialogResult = $ButtonMid
    $GetUserResponseDialogBtmMidButton.Font = [MyConfig]::Font.Bold
    $GetUserResponseDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $GetUserResponseDialogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
    $GetUserResponseDialogBtmMidButton.Name = "GetUserResponseDialogBtmMidButton"
    $GetUserResponseDialogBtmMidButton.TabStop = $True
    $GetUserResponseDialogBtmMidButton.Text = "&$($ButtonMid.ToString())"
    $GetUserResponseDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetUserResponseDialogBtmMidButton.PreferredSize.Height)
  }
  #endregion $GetUserResponseDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  #region $GetUserResponseDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  If (($GetUserResponseDialogButtons -eq 2) -or ($GetUserResponseDialogButtons -eq 3))
  {
    $GetUserResponseDialogBtmRightButton = [System.Windows.Forms.Button]::New()
    $GetUserResponseDialogBtmPanel.Controls.Add($GetUserResponseDialogBtmRightButton)
    $GetUserResponseDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
    $GetUserResponseDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $GetUserResponseDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
    $GetUserResponseDialogBtmRightButton.DialogResult = $ButtonRight
    $GetUserResponseDialogBtmRightButton.Font = [MyConfig]::Font.Bold
    $GetUserResponseDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $GetUserResponseDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetUserResponseDialogBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
    $GetUserResponseDialogBtmRightButton.Name = "GetUserResponseDialogBtmRightButton"
    $GetUserResponseDialogBtmRightButton.TabIndex = 1
    $GetUserResponseDialogBtmRightButton.TabStop = $True
    $GetUserResponseDialogBtmRightButton.Text = "&$($ButtonRight.ToString())"
    $GetUserResponseDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetUserResponseDialogBtmRightButton.PreferredSize.Height)
  }
  #endregion $GetUserResponseDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  
  $GetUserResponseDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetUserResponseDialogMainTextBox.Right + [MyConfig]::FormSpacer), (($GetUserResponseDialogBtmPanel.Controls[$GetUserResponseDialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetUserResponseDialogBtmPanel Controls ********
  
  $GetUserResponseDialogForm.ClientSize = [System.Drawing.Size]::New($GetUserResponseDialogForm.ClientSize.Width, ($GetUserResponseDialogForm.ClientSize.Height - ($GetUserResponseDialogMainPanel.ClientSize.Height - ([Math]::Max($GetUserResponseDialogMainPictureBox.Bottom, $GetUserResponseDialogMainLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))
  
  #endregion ******** Controls for $GetUserResponseDialog Form ********
  
  #endregion ================ End **** $GetUserResponseDialog **** End ================
  
  $DialogResult = $GetUserResponseDialogForm.ShowDialog($FCGForm)
  [GetUserResponseDialog]::New(($DialogResult -eq $ButtonDefault), $DialogResult)
  
  $GetUserResponseDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-GetUserResponseDialog"
}
#endregion function Show-GetUserResponseDialog

#region GetUserTextDialog Result Class
Class GetUserTextDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [String[]]$Items

  GetUserTextDialog ([Bool]$Success, [Object]$DialogResult, [String[]]$Items)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Items = $Items
  }
}
#endregion GetUserTextDialog Result Class

#region function Show-GetUserTextDialog
function Show-GetUserTextDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetUserTextDialog
    .DESCRIPTION
      Shows Show-GetUserTextDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER HintText
    .PARAMETER ValidChars
    .PARAMETER ValidOutput
    .PARAMETER Items
    .PARAMETER MaxLength
    .PARAMETER Width
    .PARAMETER Multi
    .PARAMETER Height
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetUserTextDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Single")]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText = "Status Message",
    [String]$HintText = "Enter Value Here",
    [String]$ValidChars = "[\s\w\d\.\-_,;]",
    [String]$ValidOutput = ".+",
    [String[]]$Items = @(),
    [Int]$MaxLength = [Int]::MaxValue,
    [Int]$Width = 35,
    [parameter(Mandatory = $True, ParameterSetName = "Multi")]
    [Switch]$Multi,
    [parameter(Mandatory = $False, ParameterSetName = "Multi")]
    [Int]$Height = 18,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-GetUserTextDialog"

  #region >>>>>>>>>>>>>>>> Begin **** GetUserTextDialog **** Begin <<<<<<<<<<<<<<<<

  # ************************************************
  # GetUserTextDialog Form
  # ************************************************
  #region $GetUserTextDialogForm = [System.Windows.Forms.Form]::New()
  $GetUserTextDialogForm = [System.Windows.Forms.Form]::New()
  $GetUserTextDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetUserTextDialogForm.Font = [MyConfig]::Font.Regular
  $GetUserTextDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetUserTextDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetUserTextDialogForm.Icon = $FCGForm.Icon
  $GetUserTextDialogForm.KeyPreview = $True
  $GetUserTextDialogForm.MaximizeBox = $False
  $GetUserTextDialogForm.MinimizeBox = $False
  if ($Multi.IsPresent)
  {
    $GetUserTextDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  }
  else
  {
    $GetUserTextDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  }
  $GetUserTextDialogForm.Name = "GetUserTextDialogForm"
  $GetUserTextDialogForm.Owner = $FCGForm
  $GetUserTextDialogForm.ShowInTaskbar = $False
  $GetUserTextDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetUserTextDialogForm.Text = $DialogTitle
  #endregion $GetUserTextDialogForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-GetUserTextDialogFormKeyDown ********
  function Start-GetUserTextDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetUserTextDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetUserTextDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetUserTextDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetUserTextDialogForm"

    [MyConfig]::AutoExit = 0
    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetUserTextDialogForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$GetUserTextDialogForm"
  }
  #endregion ******** Function Start-GetUserTextDialogFormKeyDown ********
  $GetUserTextDialogForm.add_KeyDown({ Start-GetUserTextDialogFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-GetUserTextDialogFormShown ********
  function Start-GetUserTextDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetUserTextDialog Form Control
      .DESCRIPTION
        Shown Event for the GetUserTextDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetUserTextDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetUserTextDialogForm"

    [MyConfig]::AutoExit = 0

    $GetUserTextDialogMainTextBox.DeselectAll()

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$GetUserTextDialogForm"
  }
  #endregion ******** Function Start-GetUserTextDialogFormShown ********
  $GetUserTextDialogForm.add_Shown({ Start-GetUserTextDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for GetUserTextDialog Form ********

  # ************************************************
  # GetUserTextDialogMain Panel
  # ************************************************
  #region $GetUserTextDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetUserTextDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetUserTextDialogForm.Controls.Add($GetUserTextDialogMainPanel)
  $GetUserTextDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserTextDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetUserTextDialogMainPanel.Name = "GetUserTextDialogMainPanel"
  $GetUserTextDialogMainPanel.Text = "GetUserTextDialogMainPanel"
  #endregion $GetUserTextDialogMainPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetUserTextDialogMainPanel Controls ********

  if ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $GetUserTextDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetUserTextDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetUserTextDialogMainPanel.Controls.Add($GetUserTextDialogMainLabel)
    $GetUserTextDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $GetUserTextDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $GetUserTextDialogMainLabel.Name = "GetUserTextDialogMainLabel"
    $GetUserTextDialogMainLabel.Size = [System.Drawing.Size]::New(($GetUserTextDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $GetUserTextDialogMainLabel.Text = $MessageText
    $GetUserTextDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $GetUserTextDialogMainLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetUserTextDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetUserTextDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $GetUserTextDialogMainLabel.Size = [System.Drawing.Size]::New(($GetUserTextDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $GetUserTextDialogMainLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }
  
  # ************************************************
  # GetUserTextDialogMain GroupBox
  # ************************************************
  #region $GetUserTextDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  $GetUserTextDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetUserTextDialogMainPanel.Controls.Add($GetUserTextDialogMainGroupBox)
  $GetUserTextDialogMainGroupBox.BackColor = [MyConfig]::Colors.Back
  $GetUserTextDialogMainGroupBox.Font = [MyConfig]::Font.Regular
  $GetUserTextDialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $GetUserTextDialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $GetUserTextDialogMainGroupBox.Name = "GetUserTextDialogMainGroupBox"
  $GetUserTextDialogMainGroupBox.Size = [System.Drawing.Size]::New(($GetUserTextDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($GetUserTextDialogMainPanel.ClientSize.Height - ($GetUserTextDialogMainGroupBox.Top + [MyConfig]::FormSpacer)))
  $GetUserTextDialogMainGroupBox.Text = $Null
  #endregion $GetUserTextDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  #region ******** $GetUserTextDialogMainGroupBox Controls ********
  
  #region $GetUserTextDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  $GetUserTextDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  $GetUserTextDialogMainGroupBox.Controls.Add($GetUserTextDialogMainTextBox)
  $GetUserTextDialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $GetUserTextDialogMainTextBox.AutoSize = $True
  $GetUserTextDialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack
  $GetUserTextDialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $GetUserTextDialogMainTextBox.Font = [MyConfig]::Font.Regular
  $GetUserTextDialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $GetUserTextDialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetUserTextDialogMainTextBox.MaxLength = $MaxLength
  $GetUserTextDialogMainTextBox.Multiline = $Multi.IsPresent
  $GetUserTextDialogMainTextBox.Name = "GetUserTextDialogMainTextBox"
  if ($Multi.IsPresent)
  {
    $GetUserTextDialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    If ($Items.Count)
    {
      $GetUserTextDialogMainTextBox.Lines = $Items
      $GetUserTextDialogMainTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items }
    }
    Else
    {
      $GetUserTextDialogMainTextBox.Lines = ""
      $GetUserTextDialogMainTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = $Items }
    }
    $GetUserTextDialogMainTextBox.Size = [System.Drawing.Size]::New(($GetUserTextDialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($GetUserTextDialogMainGroupBox.ClientSize.Height - ($GetUserTextDialogMainTextBox.Top + [MyConfig]::FormSpacer)))
  }
  else
  {
    $GetUserTextDialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None
    if ($Items.Count)
    {
      $GetUserTextDialogMainTextBox.Text = $Items[0]
      $GetUserTextDialogMainTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items[0] } 
    }
    else
    {
      $GetUserTextDialogMainTextBox.Text = ""
      $GetUserTextDialogMainTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = "" }
    }
    $GetUserTextDialogMainTextBox.Size = [System.Drawing.Size]::New(($GetUserTextDialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $GetUserTextDialogMainTextBox.PreferredHeight)
  }
  $GetUserTextDialogMainTextBox.TabIndex = 0
  $GetUserTextDialogMainTextBox.TabStop = $True
  $GetUserTextDialogMainTextBox.WordWrap = $False
  #endregion $GetUserTextDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  
  #region ******** Function Start-GetUserTextDialogMainTextBoxGotFocus ********
  Function Start-GetUserTextDialogMainTextBoxGotFocus
  {
  <#
    .SYNOPSIS
      GotFocus Event for the GetUserTextDialogMain TextBox Control
    .DESCRIPTION
      GotFocus Event for the GetUserTextDialogMain TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-GetUserTextDialogMainTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter GotFocus Event for `$GetUserTextDialogMainTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ($Sender.Tag.HintEnabled)
    {
      $Sender.Text = ""
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit GotFocus Event for `$GetUserTextDialogMainTextBox"
  }
  #endregion ******** Function Start-GetUserTextDialogMainTextBoxGotFocus ********
  $GetUserTextDialogMainTextBox.add_GotFocus({ Start-GetUserTextDialogMainTextBoxGotFocus -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetUserTextDialogMainTextBoxKeyDown ********
  function Start-GetUserTextDialogMainTextBoxKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetUserTextDialogMain TextBox Control
      .DESCRIPTION
        KeyDown Event for the GetUserTextDialogMain TextBox Control
      .PARAMETER Sender
        The TextBox Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the TextBox KeyDown Event
      .EXAMPLE
        Start-GetUserTextDialogMainTextBoxKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetUserTextDialogMainTextBox"

    [MyConfig]::AutoExit = 0
    
    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))
    {
      $GetUserTextDialogBtmLeftButton.PerformClick()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetUserTextDialogMainTextBox"
  }
  #endregion ******** Function Start-GetUserTextDialogMainTextBoxKeyDown ********
  $GetUserTextDialogMainTextBox.add_KeyDown({ Start-GetUserTextDialogMainTextBoxKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetUserTextDialogMainTextBoxKeyPress ********
  Function Start-GetUserTextDialogMainTextBoxKeyPress
  {
    <#
      .SYNOPSIS
        KeyPress Event for the GetUserTextDialogMain TextBox Control
      .DESCRIPTION
        KeyPress Event for the GetUserTextDialogMain TextBox Control
      .PARAMETER Sender
         The TextBox Control that fired the KeyPress Event
      .PARAMETER EventArg
         The Event Arguments for the TextBox KeyPress Event
      .EXAMPLE
         Start-GetUserTextDialogMainTextBoxKeyPress -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyPress Event for `$GetUserTextDialogMainTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (3, 8, 22, 24)))
    
    Write-Verbose -Message "Exit KeyPress Event for `$GetUserTextDialogMainTextBox"
  }
  #endregion ******** Function Start-GetUserTextDialogMainTextBoxKeyPress ********
  $GetUserTextDialogMainTextBox.add_KeyPress({Start-GetUserTextDialogMainTextBoxKeyPress -Sender $This -EventArg $PSItem})
  
  #region ******** Function Start-GetUserTextDialogMainTextBoxKeyUp ********
  Function Start-GetUserTextDialogMainTextBoxKeyUp
  {
  <#
    .SYNOPSIS
      KeyUp Event for the GetUserTextDialogMain TextBox Control
    .DESCRIPTION
      KeyUp Event for the GetUserTextDialogMain TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-GetUserTextDialogMainTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyUp Event for `$GetUserTextDialogMainTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)
    
    Write-Verbose -Message "Exit KeyUp Event for `$GetUserTextDialogMainTextBox"
  }
  #endregion ******** Function Start-GetUserTextDialogMainTextBoxKeyUp ********
  $GetUserTextDialogMainTextBox.add_KeyUp({ Start-GetUserTextDialogMainTextBoxKeyUp -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetUserTextDialogMainTextBoxLostFocus ********
  Function Start-GetUserTextDialogMainTextBoxLostFocus
  {
  <#
    .SYNOPSIS
      LostFocus Event for the GetUserTextDialogMain TextBox Control
    .DESCRIPTION
      LostFocus Event for the GetUserTextDialogMain TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-GetUserTextDialogMainTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter LostFocus Event for `$GetUserTextDialogMainTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
    {
      $Sender.Text = $Sender.Tag.HintText
      $Sender.Tag.HintEnabled = $True
      $Sender.Font = [MyConfig]::Font.Hint
      $Sender.ForeColor = [MyConfig]::Colors.TextHint
    }
    Else
    {
      $Sender.Tag.HintEnabled = $False
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit LostFocus Event for `$GetUserTextDialogMainTextBox"
  }
  #endregion ******** Function Start-GetUserTextDialogMainTextBoxLostFocus ********
  $GetUserTextDialogMainTextBox.add_LostFocus({ Start-GetUserTextDialogMainTextBoxLostFocus -Sender $This -EventArg $PSItem })
  
  $GetUserTextDialogMainGroupBox.ClientSize = [System.Drawing.Size]::New($GetUserTextDialogMainGroupBox.ClientSize.Width, ($GetUserTextDialogMainTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  
  #endregion ******** $GetUserTextDialogMainGroupBox Controls ********
  
  $TempClientSize = [System.Drawing.Size]::New(($GetUserTextDialogMainGroupBox.Right + [MyConfig]::FormSpacer), ($GetUserTextDialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $GetUserTextDialogMainPanel Controls ********

  # ************************************************
  # GetUserTextDialogBtm Panel
  # ************************************************
  #region $GetUserTextDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetUserTextDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetUserTextDialogForm.Controls.Add($GetUserTextDialogBtmPanel)
  $GetUserTextDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetUserTextDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetUserTextDialogBtmPanel.Name = "GetUserTextDialogBtmPanel"
  $GetUserTextDialogBtmPanel.Text = "GetUserTextDialogBtmPanel"
  #endregion $GetUserTextDialogBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetUserTextDialogBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetUserTextDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $GetUserTextDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmPanel.Controls.Add($GetUserTextDialogBtmLeftButton)
  $GetUserTextDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetUserTextDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetUserTextDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetUserTextDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetUserTextDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetUserTextDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetUserTextDialogBtmLeftButton.Name = "GetUserTextDialogBtmLeftButton"
  $GetUserTextDialogBtmLeftButton.TabIndex = 1
  $GetUserTextDialogBtmLeftButton.TabStop = $True
  $GetUserTextDialogBtmLeftButton.Text = $ButtonLeft
  $GetUserTextDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetUserTextDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetUserTextDialogBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetUserTextDialogBtmLeftButtonClick ********
  function Start-GetUserTextDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetUserTextDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetUserTextDialogBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetUserTextDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetUserTextDialogBtmLeftButton"

    [MyConfig]::AutoExit = 0

    If ((-not $GetUserTextDialogMainTextBox.Tag.HintEnabled) -and ("$($GetUserTextDialogMainTextBox.Text.Trim())".Length -gt 0))
    {
      $ChkOutput = $True
      ($GetUserTextDialogMainTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { $ChkOutput = ($ChkOutput -and $PSItem -match $ValidOutput) }
      If ($ChkOutput)
      {
        $GetUserTextDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($GetUserTextDialogForm, "Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
      }
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetUserTextDialogForm, "Missing Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$GetUserTextDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetUserTextDialogBtmLeftButtonClick ********
  $GetUserTextDialogBtmLeftButton.add_Click({ Start-GetUserTextDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $GetUserTextDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmPanel.Controls.Add($GetUserTextDialogBtmMidButton)
  $GetUserTextDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetUserTextDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetUserTextDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetUserTextDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetUserTextDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetUserTextDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetUserTextDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetUserTextDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetUserTextDialogBtmMidButton.Name = "GetUserTextDialogBtmMidButton"
  $GetUserTextDialogBtmMidButton.TabIndex = 2
  $GetUserTextDialogBtmMidButton.TabStop = $True
  $GetUserTextDialogBtmMidButton.Text = $ButtonMid
  $GetUserTextDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetUserTextDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetUserTextDialogBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetUserTextDialogBtmMidButtonClick ********
  function Start-GetUserTextDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetUserTextDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetUserTextDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetUserTextDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetUserTextDialogBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ($Multi.IsPresent)
    {
      $GetUserTextDialogMainTextBox.Lines = $GetUserTextDialogMainTextBox.Tag.Items
    }
    else
    {
      $GetUserTextDialogMainTextBox.Text = $GetUserTextDialogMainTextBox.Tag.Items
    }
    
    $GetUserTextDialogMainTextBox.Tag.HintEnabled = ($GetUserTextDialogMainTextBox.TextLength -gt 0)
    Start-GetUserTextDialogMainTextBoxLostFocus -Sender $GetUserTextDialogMainTextBox -EventArg "LostFocus"
    
    Write-Verbose -Message "Exit Click Event for `$GetUserTextDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetUserTextDialogBtmMidButtonClick ********
  $GetUserTextDialogBtmMidButton.add_Click({ Start-GetUserTextDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $GetUserTextDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetUserTextDialogBtmPanel.Controls.Add($GetUserTextDialogBtmRightButton)
  $GetUserTextDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetUserTextDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetUserTextDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetUserTextDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetUserTextDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetUserTextDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetUserTextDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetUserTextDialogBtmRightButton.Name = "GetUserTextDialogBtmRightButton"
  $GetUserTextDialogBtmRightButton.TabIndex = 3
  $GetUserTextDialogBtmRightButton.TabStop = $True
  $GetUserTextDialogBtmRightButton.Text = $ButtonRight
  $GetUserTextDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetUserTextDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetUserTextDialogBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetUserTextDialogBtmRightButtonClick ********
  function Start-GetUserTextDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetUserTextDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetUserTextDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetUserTextDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetUserTextDialogBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here
    
    $GetUserTextDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$GetUserTextDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetUserTextDialogBtmRightButtonClick ********
  $GetUserTextDialogBtmRightButton.add_Click({ Start-GetUserTextDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $GetUserTextDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetUserTextDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetUserTextDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $GetUserTextDialogBtmPanel Controls ********

  $GetUserTextDialogForm.ClientSize = [System.Drawing.Size]::New($GetUserTextDialogForm.ClientSize.Width, ($TempClientSize.Height + $GetUserTextDialogBtmPanel.Height))

  #endregion ******** Controls for GetUserTextDialog Form ********

  #endregion ================ End **** GetUserTextDialog **** End ================

  $DialogResult = $GetUserTextDialogForm.ShowDialog($FCGForm)
  If ($Multi.IsPresent)
  {
    [GetUserTextDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, (($GetUserTextDialogMainTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries)))
  }
  Else
  {
    [GetUserTextDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $GetUserTextDialogMainTextBox.Text)
  }
  
  $GetUserTextDialogForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-GetUserTextDialog"
}
#endregion function Show-GetUserTextDialog

#region GetMultiValueDialog Result Class
Class GetMultiValueDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [System.Collections.Specialized.OrderedDictionary]$OrderedItems
  
  GetMultiValueDialog ([Bool]$Success, [Object]$DialogResult, [System.Collections.Specialized.OrderedDictionary]$OrderedItems)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.OrderedItems = $OrderedItems
  }
}
#endregion GetMultiValueDialog Result Class

#region function Show-GetMultiValueDialog
Function Show-GetMultiValueDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetMultiValueDialog
    .DESCRIPTION
      Shows Show-GetMultiValueDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER ReturnTitle
    .PARAMETER OrderedItems
    .PARAMETER ValidCars
    .PARAMETER Width
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .PARAMETER AllRequired
    .EXAMPLE
      $Return = Show-GetMultiValueDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText,
    [String]$ReturnTitle,
    [parameter(Mandatory = $True)]
    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,
    [String]$ValidChars = "[\s\w\d\.\-_]",
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel",
    [Switch]$AllRequired
  )
  Write-Verbose -Message "Enter Function Show-GetMultiValueDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** GetMultiValueDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # GetMultiValueDialog Form
  # ************************************************
  #region $GetMultiValueDialogForm = [System.Windows.Forms.Form]::New()
  $GetMultiValueDialogForm = [System.Windows.Forms.Form]::New()
  $GetMultiValueDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetMultiValueDialogForm.Font = [MyConfig]::Font.Regular
  $GetMultiValueDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetMultiValueDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetMultiValueDialogForm.Icon = $FCGForm.Icon
  $GetMultiValueDialogForm.KeyPreview = $True
  $GetMultiValueDialogForm.MaximizeBox = $False
  $GetMultiValueDialogForm.MinimizeBox = $False
  $GetMultiValueDialogForm.Name = "GetMultiValueDialogForm"
  $GetMultiValueDialogForm.Owner = $FCGForm
  $GetMultiValueDialogForm.ShowInTaskbar = $False
  $GetMultiValueDialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $GetMultiValueDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetMultiValueDialogForm.Tag = $AllRequired.IsPresent
  $GetMultiValueDialogForm.Text = $DialogTitle
  #endregion $GetMultiValueDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-GetMultiValueDialogFormKeyDown ********
  Function Start-GetMultiValueDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetMultiValueDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetMultiValueDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetMultiValueDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetMultiValueDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetMultiValueDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetMultiValueDialogForm"
  }
  #endregion ******** Function Start-GetMultiValueDialogFormKeyDown ********
  $GetMultiValueDialogForm.add_KeyDown({ Start-GetMultiValueDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetMultiValueDialogFormShown ********
  Function Start-GetMultiValueDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetMultiValueDialog Form Control
      .DESCRIPTION
        Shown Event for the GetMultiValueDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetMultiValueDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetMultiValueDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$GetMultiValueDialogForm"
  }
  #endregion ******** Function Start-GetMultiValueDialogFormShown ********
  $GetMultiValueDialogForm.add_Shown({ Start-GetMultiValueDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for GetMultiValueDialog Form ********
  
  # ************************************************
  # GetMultiValueDialogMain Panel
  # ************************************************
  #region $GetMultiValueDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetMultiValueDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetMultiValueDialogForm.Controls.Add($GetMultiValueDialogMainPanel)
  $GetMultiValueDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetMultiValueDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetMultiValueDialogMainPanel.Name = "GetMultiValueDialogMainPanel"
  $GetMultiValueDialogMainPanel.Text = "GetMultiValueDialogMainPanel"
  #endregion $GetMultiValueDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetMultiValueDialogMainPanel Controls ********
  
  If ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $GetMultiValueDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetMultiValueDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetMultiValueDialogMainPanel.Controls.Add($GetMultiValueDialogMainLabel)
    $GetMultiValueDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $GetMultiValueDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $GetMultiValueDialogMainLabel.Name = "SearchTextMainLabel"
    $GetMultiValueDialogMainLabel.Size = [System.Drawing.Size]::New(($GetMultiValueDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $GetMultiValueDialogMainLabel.Text = $MessageText
    $GetMultiValueDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    #endregion $GetMultiValueDialogMainLabel = [System.Windows.Forms.Label]::New()
    
    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetMultiValueDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetMultiValueDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $GetMultiValueDialogMainLabel.Size = [System.Drawing.Size]::New(($GetMultiValueDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))
    
    $TempBottom = $GetMultiValueDialogMainLabel.Bottom
  }
  Else
  {
    $TempBottom = 0
  }
  
  # ************************************************
  # GetMultiValueDialog GroupBox
  # ************************************************
  #region $GetMultiValueDialogGroupBox = [System.Windows.Forms.GroupBox]::New()
  $GetMultiValueDialogGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetMultiValueDialogMainPanel.Controls.Add($GetMultiValueDialogGroupBox)
  $GetMultiValueDialogGroupBox.BackColor = [MyConfig]::Colors.Back
  $GetMultiValueDialogGroupBox.Font = [MyConfig]::Font.Bold
  $GetMultiValueDialogGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $GetMultiValueDialogGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $GetMultiValueDialogGroupBox.Name = "GetMultiValueDialogGroupBox"
  $GetMultiValueDialogGroupBox.Text = $ReturnTitle
  $GetMultiValueDialogGroupBox.Width = ($GetMultiValueDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))
  #endregion $GetMultiValueDialogGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  $TmpLabelWidth = 0
  $Count = 0
  ForEach ($Key In $OrderedItems.Keys)
  {
    #region $GetMultiValueDialogLabel = [System.Windows.Forms.Label]::New()
    $GetMultiValueDialogLabel = [System.Windows.Forms.Label]::New()
    $GetMultiValueDialogGroupBox.Controls.Add($GetMultiValueDialogLabel)
    $GetMultiValueDialogLabel.AutoSize = $True
    $GetMultiValueDialogLabel.BackColor = [MyConfig]::Colors.Back
    $GetMultiValueDialogLabel.Font = [MyConfig]::Font.Regular
    $GetMultiValueDialogLabel.ForeColor = [MyConfig]::Colors.Fore
    $GetMultiValueDialogLabel.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + (($GetMultiValueDialogLabel.PreferredHeight + [MyConfig]::FormSpacer) * $Count)))
    $GetMultiValueDialogLabel.Name = "$($Key)Label"
    $GetMultiValueDialogLabel.Tag = $Null
    $GetMultiValueDialogLabel.Text = "$($Key):"
    $GetMultiValueDialogLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomRight
    #endregion $GetMultiValueDialogLabel = [System.Windows.Forms.Label]::New()
    
    $TmpLabelWidth = [Math]::Max($TmpLabelWidth, $GetMultiValueDialogLabel.Width)
    $Count += 1
  }
  
  #region ******** Function Start-GetMultiValueDialogTextBoxGotFocus ********
  Function Start-GetMultiValueDialogTextBoxGotFocus
  {
  <#
    .SYNOPSIS
      GotFocus Event for the GetMultiValueDialog TextBox Control
    .DESCRIPTION
      GotFocus Event for the GetMultiValueDialog TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-GetMultiValueDialogTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter GotFocus Event for `$GetMultiValueDialogTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ($Sender.Tag.HintEnabled)
    {
      $Sender.Text = ""
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit GotFocus Event for `$GetMultiValueDialogTextBox"
  }
  #endregion ******** Function Start-GetMultiValueDialogTextBoxGotFocus ********
  #$GetMultiValueDialogTextBox.add_GotFocus({ Start-GetMultiValueDialogTextBoxGotFocus -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetMultiValueDialogMainTextBoxKeyDown ********
  function Start-GetMultiValueDialogMainTextBoxKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetMultiValueMain TextBox Control
      .DESCRIPTION
        KeyDown Event for the GetMultiValueMain TextBox Control
      .PARAMETER Sender
        The TextBox Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the TextBox KeyDown Event
      .EXAMPLE
        Start-GetMultiValueDialogMainTextBoxKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetMultiValueDialogTextBox"

    [MyConfig]::AutoExit = 0
    
    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))
    {
      $GetMultiValueDialogBtmLeftButton.PerformClick()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetMultiValueDialogTextBox"
  }
  #endregion ******** Function Start-GetMultiValueDialogMainTextBoxKeyDown ********
  #$GetMultiValueDialogTextBox.add_KeyDown({ Start-GetMultiValueDialogMainTextBoxKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetMultiValueDialogTextBoxKeyPress ********
  Function Start-GetMultiValueDialogTextBoxKeyPress
  {
    <#
      .SYNOPSIS
        KeyPress Event for the GetMultiValueDialog TextBox Control
      .DESCRIPTION
        KeyPress Event for the GetMultiValueDialog TextBox Control
      .PARAMETER Sender
         The TextBox Control that fired the KeyPress Event
      .PARAMETER EventArg
         The Event Arguments for the TextBox KeyPress Event
      .EXAMPLE
         Start-GetMultiValueDialogTextBoxKeyPress -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyPress Event for `$GetMultiValueDialogTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (3, 8, 22, 24)))
    
    Write-Verbose -Message "Exit KeyPress Event for `$GetMultiValueDialogTextBox"
  }
  #endregion ******** Function Start-GetMultiValueDialogTextBoxKeyPress ********
  #$GetMultiValueDialogTextBox.add_KeyPress({ Start-GetMultiValueDialogTextBoxKeyPress -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetMultiValueDialogTextBoxKeyUp ********
  Function Start-GetMultiValueDialogTextBoxKeyUp
  {
  <#
    .SYNOPSIS
      KeyUp Event for the GetMultiValueDialog TextBox Control
    .DESCRIPTION
      KeyUp Event for the GetMultiValueDialog TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-GetMultiValueDialogTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyUp Event for `$GetMultiValueDialogTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)
    
    Write-Verbose -Message "Exit KeyUp Event for `$GetMultiValueDialogTextBox"
  }
  #endregion ******** Function Start-GetMultiValueDialogTextBoxKeyUp ********
  #$GetMultiValueDialogTextBox.add_KeyUp({ Start-GetMultiValueDialogTextBoxKeyUp -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetMultiValueDialogTextBoxLostFocus ********
  Function Start-GetMultiValueDialogTextBoxLostFocus
  {
  <#
    .SYNOPSIS
      LostFocus Event for the GetMultiValueDialog TextBox Control
    .DESCRIPTION
      LostFocus Event for the GetMultiValueDialog TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-GetMultiValueDialogTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter LostFocus Event for `$GetMultiValueDialogTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
    {
      $Sender.Text = $Sender.Tag.HintText
      $Sender.Tag.HintEnabled = $True
      $Sender.Font = [MyConfig]::Font.Hint
      $Sender.ForeColor = [MyConfig]::Colors.TextHint
    }
    Else
    {
      $Sender.Tag.HintEnabled = $False
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit LostFocus Event for `$GetMultiValueDialogTextBox"
  }
  #endregion ******** Function Start-GetMultiValueDialogTextBoxLostFocus ********
  #$GetMultiValueDialogTextBox.add_LostFocus({ Start-GetMultiValueDialogTextBoxLostFocus -Sender $This -EventArg $PSItem })

  ForEach ($Key In $OrderedItems.Keys)
  {
    $TmpLabel = $GetMultiValueDialogGroupBox.Controls["$($Key)Label"]
    $TmpLabel.AutoSize = $False
    $TmpLabel.Size = [System.Drawing.Size]::New($TmpLabelWidth, $TmpLabel.PreferredHeight)
    
    #region $GetMultiValueDialogTextBox = [System.Windows.Forms.TextBox]::New()
    $GetMultiValueDialogTextBox = [System.Windows.Forms.TextBox]::New()
    $GetMultiValueDialogGroupBox.Controls.Add($GetMultiValueDialogTextBox)
    $GetMultiValueDialogTextBox.AutoSize = $False
    $GetMultiValueDialogTextBox.BackColor = [MyConfig]::Colors.TextBack
    $GetMultiValueDialogTextBox.Font = [MyConfig]::Font.Regular
    $GetMultiValueDialogTextBox.ForeColor = [MyConfig]::Colors.TextFore
    $GetMultiValueDialogTextBox.Location = [System.Drawing.Size]::New(($TmpLabel.Right + [MyConfig]::FormSpacer), $TmpLabel.Top)
    $GetMultiValueDialogTextBox.MaxLength = 25
    $GetMultiValueDialogTextBox.Name = "$($Key)"
    $GetMultiValueDialogTextBox.TabStop = $True
    $GetMultiValueDialogTextBox.Text = $OrderedItems[$Key]
    $GetMultiValueDialogTextBox.Tag = @{ "HintText" = "Enter Value for '$($Key)'"; "HintEnabled" = ($GetMultiValueDialogTextBox.TextLength -eq 0); "Value" = $OrderedItems[$Key] }
    $GetMultiValueDialogTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left
    $GetMultiValueDialogTextBox.Size = [System.Drawing.Size]::New(($GetMultiValueDialogGroupBox.ClientSize.Width - ($TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), $TmpLabel.Height)
    #endregion $GetMultiValueDialogTextBox = [System.Windows.Forms.TextBox]::New()
    
    $GetMultiValueDialogTextBox.add_GotFocus({ Start-GetMultiValueDialogTextBoxGotFocus -Sender $This -EventArg $PSItem})
    $GetMultiValueDialogTextBox.add_KeyDown({ Start-GetMultiValueDialogMainTextBoxKeyDown -Sender $This -EventArg $PSItem})
    $GetMultiValueDialogTextBox.add_KeyPress({Start-GetMultiValueDialogTextBoxKeyPress -Sender $This -EventArg $PSItem})
    $GetMultiValueDialogTextBox.add_KeyUp({ Start-GetMultiValueDialogTextBoxKeyUp -Sender $This -EventArg $PSItem})
    $GetMultiValueDialogTextBox.add_LostFocus({ Start-GetMultiValueDialogTextBoxLostFocus -Sender $This -EventArg $PSItem})
    Start-GetMultiValueDialogTextBoxLostFocus -Sender $GetMultiValueDialogTextBox -EventArg $EventArg
}
  
  $GetMultiValueDialogGroupBox.ClientSize = [System.Drawing.Size]::New($GetMultiValueDialogGroupBox.ClientSize.Width, (($GetMultiValueDialogGroupBox.Controls[$GetMultiValueDialogGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))
  
  $TempClientSize = [System.Drawing.Size]::New(($GetMultiValueDialogMainTextBox.Right + [MyConfig]::FormSpacer), ($GetMultiValueDialogGroupBox.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetMultiValueDialogMainPanel Controls ********
  
  # ************************************************
  # GetMultiValueDialogBtm Panel
  # ************************************************
  #region $GetMultiValueDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetMultiValueDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetMultiValueDialogForm.Controls.Add($GetMultiValueDialogBtmPanel)
  $GetMultiValueDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetMultiValueDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetMultiValueDialogBtmPanel.Name = "GetMultiValueDialogBtmPanel"
  $GetMultiValueDialogBtmPanel.Text = "GetMultiValueDialogBtmPanel"
  #endregion $GetMultiValueDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetMultiValueDialogBtmPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetMultiValueDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $GetMultiValueDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmPanel.Controls.Add($GetMultiValueDialogBtmLeftButton)
  $GetMultiValueDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetMultiValueDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetMultiValueDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetMultiValueDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetMultiValueDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetMultiValueDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetMultiValueDialogBtmLeftButton.Name = "GetMultiValueDialogBtmLeftButton"
  $GetMultiValueDialogBtmLeftButton.TabIndex = 1
  $GetMultiValueDialogBtmLeftButton.TabStop = $True
  $GetMultiValueDialogBtmLeftButton.Text = $ButtonLeft
  $GetMultiValueDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetMultiValueDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetMultiValueDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetMultiValueDialogBtmLeftButtonClick ********
  Function Start-GetMultiValueDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetMultiValueDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetMultiValueDialogBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetMultiValueDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetMultiValueDialogBtmLeftButton"
    
    [MyConfig]::AutoExit = 0
    
    $TmpValidCheck = $GetMultiValueDialogForm.Tag
    ForEach ($Key In @($OrderedItems.Keys))
    {
      $TmpItemValue = "$($GetMultiValueDialogGroupBox.Controls[$Key].Text)".Trim()
      $ChkItemValue = (-not (([String]::IsNullOrEmpty($TmpItemValue) -or $GetMultiValueDialogGroupBox.Controls[$Key].Tag.HintEnabled)))
      if ($ChkItemValue)
      {
        $OrderedItems[$Key] = $TmpItemValue
      }
      else
      {
        $OrderedItems[$Key] = $Null
      }
      
      if ($GetMultiValueDialogForm.Tag)
      {
        $TmpValidCheck = $ChkItemValue -and $TmpValidCheck
      }
      else
      {
        $TmpValidCheck = $ChkItemValue -or $TmpValidCheck
      }
    }
    
    If ($TmpValidCheck)
    {
      $GetMultiValueDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetMultiValueDialogForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetMultiValueDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetMultiValueDialogBtmLeftButtonClick ********
  $GetMultiValueDialogBtmLeftButton.add_Click({ Start-GetMultiValueDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetMultiValueDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmPanel.Controls.Add($GetMultiValueDialogBtmMidButton)
  $GetMultiValueDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetMultiValueDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetMultiValueDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetMultiValueDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetMultiValueDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetMultiValueDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetMultiValueDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetMultiValueDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetMultiValueDialogBtmMidButton.Name = "GetMultiValueDialogBtmMidButton"
  $GetMultiValueDialogBtmMidButton.TabIndex = 2
  $GetMultiValueDialogBtmMidButton.TabStop = $True
  $GetMultiValueDialogBtmMidButton.Text = $ButtonMid
  $GetMultiValueDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetMultiValueDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetMultiValueDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetMultiValueDialogBtmMidButtonClick ********
  Function Start-GetMultiValueDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetMultiValueDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetMultiValueDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetMultiValueDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetMultiValueDialogBtmMidButton"
    
    [MyConfig]::AutoExit = 0
    
    ForEach ($Key In @($OrderedItems.Keys))
    {
      $GetMultiValueDialogGroupBox.Controls[$Key].Text = $GetMultiValueDialogGroupBox.Controls[$Key].Tag.Value
      $GetMultiValueDialogGroupBox.Controls[$Key].Tag.HintEnabled = ($GetMultiValueDialogGroupBox.TextLength -eq 0)
      Start-GetMultiValueDialogTextBoxLostFocus -Sender $GetMultiValueDialogGroupBox.Controls[$Key] -EventArg $EventArg
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetMultiValueDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetMultiValueDialogBtmMidButtonClick ********
  $GetMultiValueDialogBtmMidButton.add_Click({ Start-GetMultiValueDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetMultiValueDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetMultiValueDialogBtmPanel.Controls.Add($GetMultiValueDialogBtmRightButton)
  $GetMultiValueDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetMultiValueDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetMultiValueDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetMultiValueDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetMultiValueDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetMultiValueDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetMultiValueDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetMultiValueDialogBtmRightButton.Name = "GetMultiValueDialogBtmRightButton"
  $GetMultiValueDialogBtmRightButton.TabIndex = 3
  $GetMultiValueDialogBtmRightButton.TabStop = $True
  $GetMultiValueDialogBtmRightButton.Text = $ButtonRight
  $GetMultiValueDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetMultiValueDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetMultiValueDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetMultiValueDialogBtmRightButtonClick ********
  Function Start-GetMultiValueDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetMultiValueDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetMultiValueDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetMultiValueDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetMultiValueDialogBtmRightButton"
    
    [MyConfig]::AutoExit = 0
    
    # Cancel Code Goes here
    
    $GetMultiValueDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    
    Write-Verbose -Message "Exit Click Event for `$GetMultiValueDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetMultiValueDialogBtmRightButtonClick ********
  $GetMultiValueDialogBtmRightButton.add_Click({ Start-GetMultiValueDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })
  
  $GetMultiValueDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetMultiValueDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetMultiValueDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetMultiValueDialogBtmPanel Controls ********
  
  $GetMultiValueDialogForm.ClientSize = [System.Drawing.Size]::New($GetMultiValueDialogForm.ClientSize.Width, ($TempClientSize.Height + $GetMultiValueDialogBtmPanel.Height))
  
  #endregion ******** Controls for GetMultiValueDialog Form ********
  
  #endregion ================ End **** GetMultiValueDialog **** End ================
  
  $DialogResult = $GetMultiValueDialogForm.ShowDialog($FCGForm)
  [GetMultiValueDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $OrderedItems)
  
  $GetMultiValueDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-GetMultiValueDialog"
}
#endregion function Show-GetMultiValueDialog

#region GetRadioChoiceDialog Result Class
Class GetRadioChoiceDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [String]$Item = $Null
  [Object]$Object = $Null

  GetRadioChoiceDialog ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }

  GetRadioChoiceDialog ([Bool]$Success, [Object]$DialogResult, [String]$Item, [Object]$Object)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
    $This.Object = $Object
  }
}
#endregion GetRadioChoiceDialog Result Class

#region function Show-GetRadioChoiceDialog
Function Show-GetRadioChoiceDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetRadioChoiceDialog
    .DESCRIPTION
      Shows Show-GetRadioChoiceDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER Selected
    .PARAMETER OrderedItems
    .PARAMETER Width
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetRadioChoiceDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText = "Status Message",
    [Object]$Selected = "",
    [parameter(Mandatory = $True)]
    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-GetRadioChoiceDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** GetRadioChoiceDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # GetRadioChoiceDialog Form
  # ************************************************
  #region $GetRadioChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetRadioChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetRadioChoiceDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetRadioChoiceDialogForm.Font = [MyConfig]::Font.Regular
  $GetRadioChoiceDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetRadioChoiceDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetRadioChoiceDialogForm.Icon = $FCGForm.Icon
  $GetRadioChoiceDialogForm.KeyPreview = $True
  $GetRadioChoiceDialogForm.MaximizeBox = $False
  $GetRadioChoiceDialogForm.MinimizeBox = $False
  $GetRadioChoiceDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $GetRadioChoiceDialogForm.Name = "GetRadioChoiceDialogForm"
  $GetRadioChoiceDialogForm.Owner = $FCGForm
  $GetRadioChoiceDialogForm.ShowInTaskbar = $False
  $GetRadioChoiceDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetRadioChoiceDialogForm.Text = $DialogTitle
  #endregion $GetRadioChoiceDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-GetRadioChoiceDialogFormKeyDown ********
  Function Start-GetRadioChoiceDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetRadioChoiceDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetRadioChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetRadioChoiceDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetRadioChoiceDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetRadioChoiceDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetRadioChoiceDialogForm"
  }
  #endregion ******** Function Start-GetRadioChoiceDialogFormKeyDown ********
  $GetRadioChoiceDialogForm.add_KeyDown({ Start-GetRadioChoiceDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetRadioChoiceDialogFormShown ********
  Function Start-GetRadioChoiceDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetRadioChoiceDialog Form Control
      .DESCRIPTION
        Shown Event for the GetRadioChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetRadioChoiceDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetRadioChoiceDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$GetRadioChoiceDialogForm"
  }
  #endregion ******** Function Start-GetRadioChoiceDialogFormShown ********
  $GetRadioChoiceDialogForm.add_Shown({ Start-GetRadioChoiceDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for GetRadioChoiceDialog Form ********
  
  # ************************************************
  # GetRadioChoiceDialogMain Panel
  # ************************************************
  #region $GetRadioChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetRadioChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetRadioChoiceDialogForm.Controls.Add($GetRadioChoiceDialogMainPanel)
  $GetRadioChoiceDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetRadioChoiceDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetRadioChoiceDialogMainPanel.Name = "GetRadioChoiceDialogMainPanel"
  #$GetRadioChoiceDialogMainPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)
  $GetRadioChoiceDialogMainPanel.Text = "GetRadioChoiceDialogMainPanel"
  #endregion $GetRadioChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetRadioChoiceDialogMainPanel Controls ********
  
  If ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $GetRadioChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetRadioChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetRadioChoiceDialogMainPanel.Controls.Add($GetRadioChoiceDialogMainLabel)
    $GetRadioChoiceDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $GetRadioChoiceDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $GetRadioChoiceDialogMainLabel.Name = "GetRadioChoiceDialogMainLabel"
    $GetRadioChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetRadioChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $GetRadioChoiceDialogMainLabel.Text = $MessageText
  $GetRadioChoiceDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $GetRadioChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    
    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetRadioChoiceDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetRadioChoiceDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $GetRadioChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetRadioChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))
    
    $TempBottom = $GetRadioChoiceDialogMainLabel.Bottom + [MyConfig]::FormSpacer
  }
  Else
  {
    $TempBottom = [MyConfig]::FormSpacer
  }
  
  # ************************************************
  # GetRadioChoiceDialogMain GroupBox
  # ************************************************
  #region $GetRadioChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  $GetRadioChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetRadioChoiceDialogMainPanel.Controls.Add($GetRadioChoiceDialogMainGroupBox)
  $GetRadioChoiceDialogMainGroupBox.BackColor = [MyConfig]::Colors.Back
  $GetRadioChoiceDialogMainGroupBox.Font = [MyConfig]::Font.Regular
  $GetRadioChoiceDialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $GetRadioChoiceDialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $GetRadioChoiceDialogMainGroupBox.Name = "GetRadioChoiceDialogMainGroupBox"
  $GetRadioChoiceDialogMainGroupBox.Size = [System.Drawing.Size]::New(($GetRadioChoiceDialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)
  $GetRadioChoiceDialogMainGroupBox.Text = $Null
  #endregion $GetRadioChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  #region ******** $GetRadioChoiceDialogMainGroupBox Controls ********
  
  $GetRadioChoiceNumber = 0
  $GroupBottom = [MyConfig]::Font.Height
  ForEach ($Key In $OrderedItems.Keys)
  {
    #region $GetRadioChoiceDialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()
    $GetRadioChoiceDialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()
    $GetRadioChoiceDialogMainGroupBox.Controls.Add($GetRadioChoiceDialogMainRadioButton)
    #$GetRadioChoiceDialogMainRadioButton.AutoCheck = $True
    $GetRadioChoiceDialogMainRadioButton.AutoSize = $True
    $GetRadioChoiceDialogMainRadioButton.BackColor = [MyConfig]::Colors.Back
    $GetRadioChoiceDialogMainRadioButton.Checked = ($OrderedItems[$Key] -eq $Selected)
    $GetRadioChoiceDialogMainRadioButton.Font = [MyConfig]::Font.Regular
    $GetRadioChoiceDialogMainRadioButton.ForeColor = [MyConfig]::Colors.LabelFore
    $GetRadioChoiceDialogMainRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)
    $GetRadioChoiceDialogMainRadioButton.Name = "RadioChoice$($GetRadioChoiceNumber)"
    $GetRadioChoiceDialogMainRadioButton.Tag = $OrderedItems[$Key]
    $GetRadioChoiceDialogMainRadioButton.Text = $Key
    #endregion $GetRadioChoiceDialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()
    
    $GroupBottom = ($GetRadioChoiceDialogMainRadioButton.Bottom + [MyConfig]::FormSpacer)
    $GetRadioChoiceNumber += 1
  }
  
  $GetRadioChoiceDialogMainGroupBox.ClientSize = [System.Drawing.Size]::New($GetRadioChoiceDialogMainGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetRadioChoiceDialogMainGroupBox Controls ********
  
  #endregion ******** $GetRadioChoiceDialogMainPanel Controls ********
  
  # ************************************************
  # GetRadioChoiceDialogBtm Panel
  # ************************************************
  #region $GetRadioChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetRadioChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetRadioChoiceDialogForm.Controls.Add($GetRadioChoiceDialogBtmPanel)
  $GetRadioChoiceDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetRadioChoiceDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetRadioChoiceDialogBtmPanel.Name = "GetRadioChoiceDialogBtmPanel"
  $GetRadioChoiceDialogBtmPanel.Text = "GetRadioChoiceDialogBtmPanel"
  #endregion $GetRadioChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetRadioChoiceDialogBtmPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetRadioChoiceDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $GetRadioChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmPanel.Controls.Add($GetRadioChoiceDialogBtmLeftButton)
  $GetRadioChoiceDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetRadioChoiceDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetRadioChoiceDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetRadioChoiceDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetRadioChoiceDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetRadioChoiceDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetRadioChoiceDialogBtmLeftButton.Name = "GetRadioChoiceDialogBtmLeftButton"
  $GetRadioChoiceDialogBtmLeftButton.TabIndex = 1
  $GetRadioChoiceDialogBtmLeftButton.TabStop = $True
  $GetRadioChoiceDialogBtmLeftButton.Text = $ButtonLeft
  $GetRadioChoiceDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetRadioChoiceDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetRadioChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetRadioChoiceDialogBtmLeftButtonClick ********
  Function Start-GetRadioChoiceDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetRadioChoiceDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetRadioChoiceDialogBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetRadioChoiceDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetRadioChoiceDialogBtmLeftButton"
    
    [MyConfig]::AutoExit = 0
    
    If (@($GetRadioChoiceDialogMainGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "RadioButton") -and $PSItem.Checked }).Count)
    {
      $GetRadioChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetRadioChoiceDialogForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetRadioChoiceDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetRadioChoiceDialogBtmLeftButtonClick ********
  $GetRadioChoiceDialogBtmLeftButton.add_Click({ Start-GetRadioChoiceDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetRadioChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmPanel.Controls.Add($GetRadioChoiceDialogBtmMidButton)
  $GetRadioChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetRadioChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetRadioChoiceDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetRadioChoiceDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetRadioChoiceDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetRadioChoiceDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetRadioChoiceDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetRadioChoiceDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetRadioChoiceDialogBtmMidButton.Name = "GetRadioChoiceDialogBtmMidButton"
  $GetRadioChoiceDialogBtmMidButton.TabIndex = 2
  $GetRadioChoiceDialogBtmMidButton.TabStop = $True
  $GetRadioChoiceDialogBtmMidButton.Text = $ButtonMid
  $GetRadioChoiceDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetRadioChoiceDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetRadioChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetRadioChoiceDialogBtmMidButtonClick ********
  Function Start-GetRadioChoiceDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetRadioChoiceDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetRadioChoiceDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetRadioChoiceDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetRadioChoiceDialogBtmMidButton"
    
    [MyConfig]::AutoExit = 0
    
    ForEach ($RadioButton In @($GetRadioChoiceDialogMainGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))
    {
      $RadioButton.Checked = ($RadioButton.Tag -eq $Selected)
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetRadioChoiceDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetRadioChoiceDialogBtmMidButtonClick ********
  $GetRadioChoiceDialogBtmMidButton.add_Click({ Start-GetRadioChoiceDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetRadioChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetRadioChoiceDialogBtmPanel.Controls.Add($GetRadioChoiceDialogBtmRightButton)
  $GetRadioChoiceDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetRadioChoiceDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetRadioChoiceDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetRadioChoiceDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetRadioChoiceDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetRadioChoiceDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetRadioChoiceDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetRadioChoiceDialogBtmRightButton.Name = "GetRadioChoiceDialogBtmRightButton"
  $GetRadioChoiceDialogBtmRightButton.TabIndex = 3
  $GetRadioChoiceDialogBtmRightButton.TabStop = $True
  $GetRadioChoiceDialogBtmRightButton.Text = $ButtonRight
  $GetRadioChoiceDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetRadioChoiceDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetRadioChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetRadioChoiceDialogBtmRightButtonClick ********
  Function Start-GetRadioChoiceDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetRadioChoiceDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetRadioChoiceDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetRadioChoiceDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetRadioChoiceDialogBtmRightButton"
    
    [MyConfig]::AutoExit = 0
    
    # Cancel Code Goes here
    
    $GetRadioChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    
    Write-Verbose -Message "Exit Click Event for `$GetRadioChoiceDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetRadioChoiceDialogBtmRightButtonClick ********
  $GetRadioChoiceDialogBtmRightButton.add_Click({ Start-GetRadioChoiceDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })
  
  $GetRadioChoiceDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetRadioChoiceDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetRadioChoiceDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetRadioChoiceDialogBtmPanel Controls ********
  
  $GetRadioChoiceDialogForm.ClientSize = [System.Drawing.Size]::New($GetRadioChoiceDialogForm.ClientSize.Width, ($GetRadioChoiceDialogMainGroupBox.Bottom + [MyConfig]::FormSpacer + $GetRadioChoiceDialogBtmPanel.Height))
  
  #endregion ******** Controls for GetRadioChoiceDialog Form ********
  
  #endregion ================ End **** GetRadioChoiceDialog **** End ================
  
  $DialogResult = $GetRadioChoiceDialogForm.ShowDialog($TESTForm)
  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $TempItem = $GetRadioChoiceDialogMainGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" -and $PSItem.Checked } | Select-Object -Property Text, Tag
    [GetRadioChoiceDialog]::New($True, $DialogResult, ($TempItem.Text), ($TempItem.Tag))
  }
  Else
  {
    [GetRadioChoiceDialog]::New($False, $DialogResult)
  }
  
  $GetRadioChoiceDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-GetRadioChoiceDialog"
}
#endregion function Show-GetRadioChoiceDialog

#region GetListViewChoiceDialog Result Class
Class GetListViewChoiceDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [Object]$Item

  GetListViewChoiceDialog ([Bool]$Success, [Object]$DialogResult, [Object]$Item)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
  }
}
#endregion GetListViewChoiceDialog Result Class

#region function Show-GetListViewChoiceDialog
function Show-GetListViewChoiceDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetListViewChoiceDialog
    .DESCRIPTION
      Shows Show-GetListViewChoiceDialog
    .PARAMETER DialogTitle
    .PARAMETER SelectText
    .PARAMETER MessageText
    .PARAMETER List
    .PARAMETER Property
    .PARAMETER Tooltip
    .PARAMETER Selected
    .PARAMETER Multi
    .PARAMETER Width
    .PARAMETER Height
    .PARAMETER Filter
    .PARAMETER Resize
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetListViewChoiceDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText = "Status Message",
    [parameter(Mandatory = $True)]
    [Object[]]$List = @(),
    [parameter(Mandatory = $True)]
    [String[]]$Property,
    [String]$Tooltip,
    [Object[]]$Selected = "xX NONE Xx",
    [Switch]$Multi,
    [Int]$Width = 50,
    [Int]$Height = 12,
    [Switch]$Filter,
    [Switch]$Resize,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-GetListViewChoiceDialog"

  #region >>>>>>>>>>>>>>>> Begin **** GetListViewChoiceDialog **** Begin <<<<<<<<<<<<<<<<

  # ************************************************
  # GetListViewChoiceDialog Form
  # ************************************************
  #region $GetListViewChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetListViewChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetListViewChoiceDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetListViewChoiceDialogForm.Font = [MyConfig]::Font.Regular
  $GetListViewChoiceDialogForm.ForeColor = [MyConfig]::Colors.Fore
  if ($Resize.IsPresent)
  {
    $GetListViewChoiceDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
  }
  else
  {
    $GetListViewChoiceDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  }
  $GetListViewChoiceDialogForm.Icon = $FCGForm.Icon
  $GetListViewChoiceDialogForm.KeyPreview = $True
  $GetListViewChoiceDialogForm.MaximizeBox = $False
  $GetListViewChoiceDialogForm.MinimizeBox = $False
  $GetListViewChoiceDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $GetListViewChoiceDialogForm.Name = "GetListViewChoiceDialogForm"
  $GetListViewChoiceDialogForm.Owner = $FCGForm
  $GetListViewChoiceDialogForm.ShowInTaskbar = $False
  $GetListViewChoiceDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetListViewChoiceDialogForm.Text = $DialogTitle
  #endregion $GetListViewChoiceDialogForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-GetListViewChoiceDialogFormKeyDown ********
  function Start-GetListViewChoiceDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetListViewChoiceDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetListViewChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetListViewChoiceDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetListViewChoiceDialogForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetListViewChoiceDialogForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$GetListViewChoiceDialogForm"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogFormKeyDown ********
  $GetListViewChoiceDialogForm.add_KeyDown({ Start-GetListViewChoiceDialogFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-GetListViewChoiceDialogFormShown ********
  function Start-GetListViewChoiceDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetListViewChoiceDialog Form Control
      .DESCRIPTION
        Shown Event for the GetListViewChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetListViewChoiceDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetListViewChoiceDialogForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$GetListViewChoiceDialogForm"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogFormShown ********
  $GetListViewChoiceDialogForm.add_Shown({ Start-GetListViewChoiceDialogFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for GetListViewChoiceDialog Form ********

  # ************************************************
  # GetListViewChoiceDialogMain Panel
  # ************************************************
  #region $GetListViewChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetListViewChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetListViewChoiceDialogForm.Controls.Add($GetListViewChoiceDialogMainPanel)
  $GetListViewChoiceDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetListViewChoiceDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetListViewChoiceDialogMainPanel.Name = "GetListViewChoiceDialogMainPanel"
  $GetListViewChoiceDialogMainPanel.Text = "GetListViewChoiceDialogMainPanel"
  #endregion $GetListViewChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetListViewChoiceDialogMainPanel Controls ********

  if ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $GetListViewChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetListViewChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetListViewChoiceDialogMainPanel.Controls.Add($GetListViewChoiceDialogMainLabel)
    $GetListViewChoiceDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $GetListViewChoiceDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $GetListViewChoiceDialogMainLabel.Name = "GetListViewChoiceDialogMainLabel"
    $GetListViewChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $GetListViewChoiceDialogMainLabel.Text = $MessageText
    $GetListViewChoiceDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $GetListViewChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    
    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetListViewChoiceDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetListViewChoiceDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $GetListViewChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $GetListViewChoiceDialogMainLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TempBottom = 0
  }

  #region $GetListViewChoiceDialogMainListView = [System.Windows.Forms.ListView]::New()
  $GetListViewChoiceDialogMainListView = [System.Windows.Forms.ListView]::New()
  $GetListViewChoiceDialogMainPanel.Controls.Add($GetListViewChoiceDialogMainListView)
  $GetListViewChoiceDialogMainListView.BackColor = [MyConfig]::Colors.TextBack
  $GetListViewChoiceDialogMainListView.CheckBoxes = $Multi.IsPresent
  $GetListViewChoiceDialogMainListView.Font = [MyConfig]::Font.Bold
  $GetListViewChoiceDialogMainListView.ForeColor = [MyConfig]::Colors.TextFore
  $GetListViewChoiceDialogMainListView.FullRowSelect = $True
  $GetListViewChoiceDialogMainListView.GridLines = $True
  $GetListViewChoiceDialogMainListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable
  $GetListViewChoiceDialogMainListView.HideSelection = $False
  $GetListViewChoiceDialogMainListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $GetListViewChoiceDialogMainListView.MultiSelect = $Multi.IsPresent
  $GetListViewChoiceDialogMainListView.Name = "LAUGetListViewChoiceDialogMainListView"
  $GetListViewChoiceDialogMainListView.OwnerDraw = $True
  $GetListViewChoiceDialogMainListView.ShowGroups = $False
  $GetListViewChoiceDialogMainListView.ShowItemToolTips = $PSBoundParameters.ContainsKey("ToolTip")
  $GetListViewChoiceDialogMainListView.Size = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * $Height))
  $GetListViewChoiceDialogMainListView.Text = "LAUGetListViewChoiceDialogMainListView"
  $GetListViewChoiceDialogMainListView.View = [System.Windows.Forms.View]::Details
  #endregion $GetListViewChoiceDialogMainListView = [System.Windows.Forms.ListView]::New()

  #region ******** Function Start-GetListViewChoiceDialogMainListViewDrawColumnHeader ********
  function Start-GetListViewChoiceDialogMainListViewDrawColumnHeader
  {
    <#
      .SYNOPSIS
        DrawColumnHeader Event for the GetListViewChoiceDialogMain ListView Control
      .DESCRIPTION
        DrawColumnHeader Event for the GetListViewChoiceDialogMain ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawColumnHeader Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawColumnHeader Event
      .EXAMPLE
         Start-GetListViewChoiceDialogMainListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawColumnHeader Event for `$GetListViewChoiceDialogMainListView"

    [MyConfig]::AutoExit = 0

    $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)
    $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))
    $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))

    Write-Verbose -Message "Exit DrawColumnHeader Event for `$GetListViewChoiceDialogMainListView"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogMainListViewDrawColumnHeader ********
  $GetListViewChoiceDialogMainListView.add_DrawColumnHeader({Start-GetListViewChoiceDialogMainListViewDrawColumnHeader -Sender $This -EventArg $PSItem})

  #region ******** Function Start-GetListViewChoiceDialogMainListViewDrawItem ********
  function Start-GetListViewChoiceDialogMainListViewDrawItem
  {
    <#
      .SYNOPSIS
        DrawItem Event for the GetListViewChoiceDialogMain ListView Control
      .DESCRIPTION
        DrawItem Event for the GetListViewChoiceDialogMain ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawItem Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawItem Event
      .EXAMPLE
         Start-GetListViewChoiceDialogMainListViewDrawItem -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawItem Event for `$GetListViewChoiceDialogMainListView"

    [MyConfig]::AutoExit = 0

    # Return to Default Draw
    $EventArg.DrawDefault = $True

    Write-Verbose -Message "Exit DrawItem Event for `$GetListViewChoiceDialogMainListView"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogMainListViewDrawItem ********
  $GetListViewChoiceDialogMainListView.add_DrawItem({Start-GetListViewChoiceDialogMainListViewDrawItem -Sender $This -EventArg $PSItem})

  #region ******** Function Start-GetListViewChoiceDialogMainListViewDrawSubItem ********
  function Start-GetListViewChoiceDialogMainListViewDrawSubItem
  {
    <#
      .SYNOPSIS
        DrawSubItem Event for the GetListViewChoiceDialogMain ListView Control
      .DESCRIPTION
        DrawSubItem Event for the GetListViewChoiceDialogMain ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawSubItem Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawSubItem Event
      .EXAMPLE
         Start-GetListViewChoiceDialogMainListViewDrawSubItem -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawSubItem Event for `$GetListViewChoiceDialogMainListView"

    [MyConfig]::AutoExit = 0

    # Return to Default Draw
    $EventArg.DrawDefault = $True

    Write-Verbose -Message "Exit DrawSubItem Event for `$GetListViewChoiceDialogMainListView"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogMainListViewDrawSubItem ********
  $GetListViewChoiceDialogMainListView.add_DrawSubItem({Start-GetListViewChoiceDialogMainListViewDrawSubItem -Sender $This -EventArg $PSItem})

  foreach ($PropName in $Property)
  {
    [Void]$GetListViewChoiceDialogMainListView.Columns.Add($PropName, -2)
  }
  [Void]$GetListViewChoiceDialogMainListView.Columns.Add(" ", ($GetListViewChoiceDialogForm.Width * 2))

  ForEach ($Item in $List)
  {
    ($GetListViewChoiceDialogMainListView.Items.Add(($ListViewItem = [System.Windows.Forms.ListViewItem]::New("$($Item.($Property[0]))")))).SubItems.AddRange(@($Property[1..99] | ForEach-Object -Process { "$($Item.($PSItem))" }))
    $ListViewItem.Name = "$($Item.($Property[0]))"
    $ListViewItem.Tag = $Item
    $ListViewItem.Tooltiptext = "$($Item.($Tooltip))"
    $ListViewItem.Selected = ($Item -in $Selected)
    $ListViewItem.Checked = ($Multi.IsPresent -and $ListViewItem.Selected)
    $ListViewItem.Font = [MyConfig]::Font.Regular
  }
  $GetListViewChoiceDialogMainListView.Tag = @($GetListViewChoiceDialogMainListView.Items)
  
  If ($Filter.IsPresent)
  {
    #region $GetListViewChoiceDialogFilterLabel = [System.Windows.Forms.Label]::New()
    $GetListViewChoiceDialogFilterLabel = [System.Windows.Forms.Label]::New()
    $GetListViewChoiceDialogMainPanel.Controls.Add($GetListViewChoiceDialogFilterLabel)
    $GetListViewChoiceDialogFilterLabel.AutoSize = $True
    $GetListViewChoiceDialogFilterLabel.BackColor = [MyConfig]::Colors.Back
    $GetListViewChoiceDialogFilterLabel.Font = [MyConfig]::Font.Regular
    $GetListViewChoiceDialogFilterLabel.ForeColor = [MyConfig]::Colors.Fore
    $GetListViewChoiceDialogFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($GetListViewChoiceDialogMainListView.Bottom + [MyConfig]::FormSpacer))
    $GetListViewChoiceDialogFilterLabel.Name = "GetListViewChoiceDialogFilterLabel"
    $GetListViewChoiceDialogFilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), $GetListViewChoiceDialogFilterLabel.PreferredHeight)
    $GetListViewChoiceDialogFilterLabel.Text = "Filter List:"
    $GetListViewChoiceDialogFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight
    #endregion $GetListViewChoiceDialogFilterLabel = [System.Windows.Forms.Label]::New()
    
    #region $GetListViewChoiceDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
    $GetListViewChoiceDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
    $GetListViewChoiceDialogMainPanel.Controls.Add($GetListViewChoiceDialogMainTextBox)
    $GetListViewChoiceDialogMainTextBox.AutoSize = $False
    $GetListViewChoiceDialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack
    $GetListViewChoiceDialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
    $GetListViewChoiceDialogMainTextBox.Font = [MyConfig]::Font.Regular
    $GetListViewChoiceDialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore
    $GetListViewChoiceDialogMainTextBox.Location = [System.Drawing.Point]::New(($GetListViewChoiceDialogFilterLabel.Right + [MyConfig]::FormSpacer), $GetListViewChoiceDialogFilterLabel.Top)
    $GetListViewChoiceDialogMainTextBox.MaxLength = 100
    $GetListViewChoiceDialogMainTextBox.Name = "GetListViewChoiceDialogMainTextBox"
    $GetListViewChoiceDialogMainTextBox.Size = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainListView.Right - $GetListViewChoiceDialogMainTextBox.Left), $GetListViewChoiceDialogFilterLabel.Height)
    #$GetListViewChoiceDialogMainTextBox.TabIndex = 0
    $GetListViewChoiceDialogMainTextBox.TabStop = $False
    $GetListViewChoiceDialogMainTextBox.Tag = @{ "HintText" = "Enter Text and Press [Enter] to Filter List Items."; "HintEnabled" = $True }
    $GetListViewChoiceDialogMainTextBox.Text = ""
    $GetListViewChoiceDialogMainTextBox.WordWrap = $False
    #endregion $GetListViewChoiceDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
    
    #region ******** Function Start-GetListViewChoiceDialogMainTextBoxGotFocus ********
    Function Start-GetListViewChoiceDialogMainTextBoxGotFocus
    {
      <#
        .SYNOPSIS
          GotFocus Event for the GetListViewChoiceDialogMain TextBox Control
        .DESCRIPTION
          GotFocus Event for the GetListViewChoiceDialogMain TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the GotFocus Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox GotFocus Event
        .EXAMPLE
           Start-GetListViewChoiceDialogMainTextBoxGotFocus -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter GotFocus Event for `$GetListViewChoiceDialogMainTextBox"
      
      [MyConfig]::AutoExit = 0
      
      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
      If ($Sender.Tag.HintEnabled)
      {
        $Sender.Text = ""
        $Sender.Font = [MyConfig]::Font.Regular
        $Sender.ForeColor = [MyConfig]::Colors.TextFore
      }
      
      Write-Verbose -Message "Exit GotFocus Event for `$GetListViewChoiceDialogMainTextBox"
    }
    #endregion ******** Function Start-GetListViewChoiceDialogMainTextBoxGotFocus ********
    $GetListViewChoiceDialogMainTextBox.add_GotFocus({ Start-GetListViewChoiceDialogMainTextBoxGotFocus -Sender $This -EventArg $PSItem })
    
    #region ******** Function Start-GetListViewChoiceDialogMainTextBoxKeyDown ********
    Function Start-GetListViewChoiceDialogMainTextBoxKeyDown
    {
      <#
        .SYNOPSIS
          KeyDown Event for the GetListViewChoiceDialogMain TextBox Control
        .DESCRIPTION
          KeyDown Event for the GetListViewChoiceDialogMain TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the KeyDown Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox KeyDown Event
        .EXAMPLE
           Start-GetListViewChoiceDialogMainTextBoxKeyDown -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter KeyDown Event for `$GetListViewChoiceDialogMainTextBox"
      
      [MyConfig]::AutoExit = 0
      
      If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
      {
        # Suppress KeyPress
        $EventArg.SuppressKeyPress = $True
        
        If ([String]::IsNullOrEmpty($Sender.Text.Trim()))
        {
          $GetListViewChoiceDialogMainListView.Items.Clear()
          $GetListViewChoiceDialogMainListView.Items.AddRange($GetListViewChoiceDialogMainListView.Tag)
        }
        else
        {
          $TmpNewList = @($GetListViewChoiceDialogMainListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $Sender.Text) -or ($PSItem.SubItems[1].Text -Match $Sender.Text) })
          $GetListViewChoiceDialogMainListView.Items.Clear()
          $GetListViewChoiceDialogMainListView.Items.AddRange($TmpNewList)
        }
      }
      
      Write-Verbose -Message "Exit KeyDown Event for `$GetListViewChoiceDialogMainTextBox"
    }
    #endregion ******** Function Start-GetListViewChoiceDialogMainTextBoxKeyDown ********
    $GetListViewChoiceDialogMainTextBox.add_KeyDown({ Start-GetListViewChoiceDialogMainTextBoxKeyDown -Sender $This -EventArg $PSItem })
    
    #region ******** Function Start-GetListViewChoiceDialogMainTextBoxLostFocus ********
    Function Start-GetListViewChoiceDialogMainTextBoxLostFocus
    {
      <#
        .SYNOPSIS
          LostFocus Event for the GetListViewChoiceDialogMain TextBox Control
        .DESCRIPTION
          LostFocus Event for the GetListViewChoiceDialogMain TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the LostFocus Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox LostFocus Event
        .EXAMPLE
           Start-GetListViewChoiceDialogMainTextBoxLostFocus -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter LostFocus Event for `$GetListViewChoiceDialogMainTextBox"
      
      [MyConfig]::AutoExit = 0
      
      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
      If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
      {
        $Sender.Text = $Sender.Tag.HintText
        $Sender.Tag.HintEnabled = $True
        $Sender.Font = [MyConfig]::Font.Hint
        $Sender.ForeColor = [MyConfig]::Colors.TextHint
        
        $GetListViewChoiceDialogMainListView.Items.Clear()
        $GetListViewChoiceDialogMainListView.Items.AddRange($GetListViewChoiceDialogMainListView.Tag)
      }
      Else
      {
        $Sender.Tag.HintEnabled = $False
        $Sender.Font = [MyConfig]::Font.Regular
        $Sender.ForeColor = [MyConfig]::Colors.TextFore
        
        $TmpNewList = @($GetListViewChoiceDialogMainListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $GetListViewChoiceDialogMainTextBox.Text) -or ($PSItem.SubItems[1].Text -Match $GetListViewChoiceDialogMainTextBox.Text) })
        $GetListViewChoiceDialogMainListView.Items.Clear()
        $GetListViewChoiceDialogMainListView.Items.AddRange($TmpNewList)
      }
      
      Write-Verbose -Message "Exit LostFocus Event for `$GetListViewChoiceDialogMainTextBox"
    }
    #endregion ******** Function Start-GetListViewChoiceDialogMainTextBoxLostFocus ********
    $GetListViewChoiceDialogMainTextBox.add_LostFocus({ Start-GetListViewChoiceDialogMainTextBoxLostFocus -Sender $This -EventArg $PSItem })
    
    Start-GetListViewChoiceDialogMainTextBoxLostFocus -Sender $GetListViewChoiceDialogMainTextBox -EventArg "Lost Focus"
    
    $TempClientSize = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainTextBox.Right + [MyConfig]::FormSpacer), ($GetListViewChoiceDialogMainTextBox.Bottom + [MyConfig]::FormSpacer))
  }
  Else
  {
    $TempClientSize = [System.Drawing.Size]::New(($GetListViewChoiceDialogMainListView.Right + [MyConfig]::FormSpacer), ($GetListViewChoiceDialogMainListView.Bottom + [MyConfig]::FormSpacer))
  }

  #endregion ******** $GetListViewChoiceDialogMainPanel Controls ********

  # ************************************************
  # GetListViewChoiceDialogBtm Panel
  # ************************************************
  #region $GetListViewChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetListViewChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetListViewChoiceDialogForm.Controls.Add($GetListViewChoiceDialogBtmPanel)
  $GetListViewChoiceDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetListViewChoiceDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetListViewChoiceDialogBtmPanel.Name = "GetListViewChoiceDialogBtmPanel"
  $GetListViewChoiceDialogBtmPanel.Text = "GetListViewChoiceDialogBtmPanel"
  #endregion $GetListViewChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetListViewChoiceDialogBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetListViewChoiceDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $GetListViewChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmPanel.Controls.Add($GetListViewChoiceDialogBtmLeftButton)
  $GetListViewChoiceDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetListViewChoiceDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetListViewChoiceDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetListViewChoiceDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetListViewChoiceDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetListViewChoiceDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetListViewChoiceDialogBtmLeftButton.Name = "GetListViewChoiceDialogBtmLeftButton"
  $GetListViewChoiceDialogBtmLeftButton.TabIndex = 1
  $GetListViewChoiceDialogBtmLeftButton.TabStop = $True
  $GetListViewChoiceDialogBtmLeftButton.Text = $ButtonLeft
  $GetListViewChoiceDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetListViewChoiceDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetListViewChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetListViewChoiceDialogBtmLeftButtonClick ********
  function Start-GetListViewChoiceDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetListViewChoiceDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetListViewChoiceDialogBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-GetListViewChoiceDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetListViewChoiceDialogBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if (($GetListViewChoiceDialogMainListView.SelectedItems.Count -and (-not $Multi.IsPresent)) -or ($GetListViewChoiceDialogMainListView.CheckedItems.Count -and $Multi.IsPresent))
    {
      $GetListViewChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetListViewChoiceDialogForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$GetListViewChoiceDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogBtmLeftButtonClick ********
  $GetListViewChoiceDialogBtmLeftButton.add_Click({ Start-GetListViewChoiceDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $GetListViewChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmPanel.Controls.Add($GetListViewChoiceDialogBtmMidButton)
  $GetListViewChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetListViewChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetListViewChoiceDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetListViewChoiceDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetListViewChoiceDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetListViewChoiceDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetListViewChoiceDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetListViewChoiceDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetListViewChoiceDialogBtmMidButton.Name = "GetListViewChoiceDialogBtmMidButton"
  $GetListViewChoiceDialogBtmMidButton.TabIndex = 2
  $GetListViewChoiceDialogBtmMidButton.TabStop = $True
  $GetListViewChoiceDialogBtmMidButton.Text = $ButtonMid
  $GetListViewChoiceDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetListViewChoiceDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetListViewChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetListViewChoiceDialogBtmMidButtonClick ********
  function Start-GetListViewChoiceDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetListViewChoiceDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetListViewChoiceDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetListViewChoiceDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetListViewChoiceDialogBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ([String]::IsNullOrEmpty($Selected))
    {
      $GetListViewChoiceDialogMainListView.SelectedItems.Clear()
      $GetListViewChoiceDialogMainListView.Items | ForEach-Object -Process { $PSItem.Checked = $False }
    }
    else
    {
      foreach ($Item in $GetListViewChoiceDialogMainListView.Items)
      {
        $Item.Selected = ($Item.Tag -in $Selected)
        $Item.Checked = ($Multi.IsPresent -and $Item.Selected)
      }
    }
    $GetListViewChoiceDialogMainListView.Refresh()
    $GetListViewChoiceDialogMainListView.Select()

    Write-Verbose -Message "Exit Click Event for `$GetListViewChoiceDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogBtmMidButtonClick ********
  $GetListViewChoiceDialogBtmMidButton.add_Click({ Start-GetListViewChoiceDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $GetListViewChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetListViewChoiceDialogBtmPanel.Controls.Add($GetListViewChoiceDialogBtmRightButton)
  $GetListViewChoiceDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetListViewChoiceDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetListViewChoiceDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetListViewChoiceDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetListViewChoiceDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetListViewChoiceDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetListViewChoiceDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetListViewChoiceDialogBtmRightButton.Name = "GetListViewChoiceDialogBtmRightButton"
  $GetListViewChoiceDialogBtmRightButton.TabIndex = 3
  $GetListViewChoiceDialogBtmRightButton.TabStop = $True
  $GetListViewChoiceDialogBtmRightButton.Text = $ButtonRight
  $GetListViewChoiceDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetListViewChoiceDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetListViewChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetListViewChoiceDialogBtmRightButtonClick ********
  function Start-GetListViewChoiceDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetListViewChoiceDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetListViewChoiceDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetListViewChoiceDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetListViewChoiceDialogBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $GetListViewChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$GetListViewChoiceDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetListViewChoiceDialogBtmRightButtonClick ********
  $GetListViewChoiceDialogBtmRightButton.add_Click({ Start-GetListViewChoiceDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $GetListViewChoiceDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetListViewChoiceDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetListViewChoiceDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $GetListViewChoiceDialogBtmPanel Controls ********

  $GetListViewChoiceDialogForm.ClientSize = [System.Drawing.Size]::New($GetListViewChoiceDialogForm.ClientSize.Width, ($TempClientSize.Height + $GetListViewChoiceDialogBtmPanel.Height))
  $GetListViewChoiceDialogForm.MinimumSize = $GetListViewChoiceDialogForm.Size
  $GetListViewChoiceDialogMainListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  If ($Filter.IsPresent)
  {
    $GetListViewChoiceDialogFilterLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom")
    $GetListViewChoiceDialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom, Right")
  }

  #endregion ******** Controls for GetListViewChoiceDialog Form ********

  #endregion ================ End **** GetListViewChoiceDialog **** End ================

  $DialogResult = $GetListViewChoiceDialogForm.ShowDialog($LAUForm)
  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    if ($Multi.IsPresent)
    {
      [GetListViewChoiceDialog]::New($True, $DialogResult, ($GetListViewChoiceDialogMainListView.CheckedItems | Select-Object -ExpandProperty "Tag"))
    }
    else
    {
      [GetListViewChoiceDialog]::New($True, $DialogResult, ($GetListViewChoiceDialogMainListView.SelectedItems | Select-Object -ExpandProperty "Tag"))
    }
  }
  else
  {
    [GetListViewChoiceDialog]::New($False, $DialogResult, "")
  }

  $GetListViewChoiceDialogForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-GetListViewChoiceDialog"
}
#endregion function Show-GetListViewChoiceDialog

#region GetComboChoiceDialog Result Class
Class GetComboChoiceDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [Object]$Item

  GetComboChoiceDialog ([Bool]$Success, [Object]$DialogResult, [Object]$Item)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
  }
}
#endregion GetComboChoiceDialog Result Class

#region function Show-GetComboChoiceDialog
function Show-GetComboChoiceDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetComboChoiceDialog
    .DESCRIPTION
      Shows Show-GetComboChoiceDialog
    .PARAMETER DialogTitle
    .PARAMETER SelectText
    .PARAMETER MessageText
    .PARAMETER Items
    .PARAMETER Sorted
    .PARAMETER DisplayMember
    .PARAMETER ValueMember
    .PARAMETER Selected
    .PARAMETER Width
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetComboChoiceDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText = "Status Message",
    [String]$SelectText = "Select Value",
    [parameter(Mandatory = $True)]
    [Object[]]$Items = @(),
    [Switch]$Sorted,
    [String]$DisplayMember = "Text",
    [String]$ValueMember = "Value",
    [Object]$Selected,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-GetComboChoiceDialog"

  #region >>>>>>>>>>>>>>>> Begin **** GetComboChoiceDialog **** Begin <<<<<<<<<<<<<<<<

  # ************************************************
  # GetComboChoiceDialog Form
  # ************************************************
  #region $GetComboChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetComboChoiceDialogForm = [System.Windows.Forms.Form]::New()
  $GetComboChoiceDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetComboChoiceDialogForm.Font = [MyConfig]::Font.Regular
  $GetComboChoiceDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetComboChoiceDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetComboChoiceDialogForm.Icon = $FCGForm.Icon
  $GetComboChoiceDialogForm.KeyPreview = $True
  $GetComboChoiceDialogForm.MaximizeBox = $False
  $GetComboChoiceDialogForm.MinimizeBox = $False
  $GetComboChoiceDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $GetComboChoiceDialogForm.Name = "GetComboChoiceDialogForm"
  $GetComboChoiceDialogForm.Owner = $FCGForm
  $GetComboChoiceDialogForm.ShowInTaskbar = $False
  $GetComboChoiceDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetComboChoiceDialogForm.Text = $DialogTitle
  #endregion $GetComboChoiceDialogForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-GetComboChoiceDialogFormKeyDown ********
  function Start-GetComboChoiceDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetComboChoiceDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetComboChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetComboChoiceDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetComboChoiceDialogForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetComboChoiceDialogForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$GetComboChoiceDialogForm"
  }
  #endregion ******** Function Start-GetComboChoiceDialogFormKeyDown ********
  $GetComboChoiceDialogForm.add_KeyDown({ Start-GetComboChoiceDialogFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-GetComboChoiceDialogFormShown ********
  function Start-GetComboChoiceDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetComboChoiceDialog Form Control
      .DESCRIPTION
        Shown Event for the GetComboChoiceDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetComboChoiceDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetComboChoiceDialogForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$GetComboChoiceDialogForm"
  }
  #endregion ******** Function Start-GetComboChoiceDialogFormShown ********
  $GetComboChoiceDialogForm.add_Shown({ Start-GetComboChoiceDialogFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for GetComboChoiceDialog Form ********

  # ************************************************
  # GetComboChoiceDialogMain Panel
  # ************************************************
  #region $GetComboChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetComboChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetComboChoiceDialogForm.Controls.Add($GetComboChoiceDialogMainPanel)
  $GetComboChoiceDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetComboChoiceDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetComboChoiceDialogMainPanel.Name = "GetComboChoiceDialogMainPanel"
  $GetComboChoiceDialogMainPanel.Text = "GetComboChoiceDialogMainPanel"
  #endregion $GetComboChoiceDialogMainPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetComboChoiceDialogMainPanel Controls ********

  if ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $GetComboChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetComboChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()
    $GetComboChoiceDialogMainPanel.Controls.Add($GetComboChoiceDialogMainLabel)
    $GetComboChoiceDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $GetComboChoiceDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $GetComboChoiceDialogMainLabel.Name = "GetComboChoiceDialogMainLabel"
    $GetComboChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetComboChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $GetComboChoiceDialogMainLabel.Text = $MessageText
    $GetComboChoiceDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $GetComboChoiceDialogMainLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetComboChoiceDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetComboChoiceDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $GetComboChoiceDialogMainLabel.Size = [System.Drawing.Size]::New(($GetComboChoiceDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $GetComboChoiceDialogMainLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }
  
  # ************************************************
  # GetComboChoiceDialogMain GroupBox
  # ************************************************
  #region $GetComboChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  $GetComboChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetComboChoiceDialogMainPanel.Controls.Add($GetComboChoiceDialogMainGroupBox)
  $GetComboChoiceDialogMainGroupBox.BackColor = [MyConfig]::Colors.Back
  $GetComboChoiceDialogMainGroupBox.Font = [MyConfig]::Font.Regular
  $GetComboChoiceDialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $GetComboChoiceDialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $GetComboChoiceDialogMainGroupBox.Name = "GetComboChoiceDialogMainGroupBox"
  $GetComboChoiceDialogMainGroupBox.Size = [System.Drawing.Size]::New(($GetComboChoiceDialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)
  $GetComboChoiceDialogMainGroupBox.Text = $Null
  #endregion $GetComboChoiceDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  #region ******** $GetComboChoiceDialogMainGroupBox Controls ********
  
  #region $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()
  $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()
  $GetComboChoiceDialogMainGroupBox.Controls.Add($GetComboChoiceComboBox)
  $GetComboChoiceComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $GetComboChoiceComboBox.AutoSize = $True
  $GetComboChoiceComboBox.BackColor = [MyConfig]::Colors.TextBack
  $GetComboChoiceComboBox.DisplayMember = $DisplayMember
  $GetComboChoiceComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
  $GetComboChoiceComboBox.Font = [MyConfig]::Font.Regular
  $GetComboChoiceComboBox.ForeColor = [MyConfig]::Colors.TextFore
  [void]$GetComboChoiceComboBox.Items.Add([PSCustomObject]@{ $DisplayMember = " - $($SelectText) - "; $ValueMember = " - $($SelectText) - "})
  $GetComboChoiceComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetComboChoiceComboBox.Name = "GetComboChoiceComboBox"
  $GetComboChoiceComboBox.SelectedIndex = 0
  $GetComboChoiceComboBox.Size = [System.Drawing.Size]::New(($GetComboChoiceDialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $GetComboChoiceComboBox.PreferredHeight)
  $GetComboChoiceComboBox.Sorted = $Sorted.IsPresent
  $GetComboChoiceComboBox.TabIndex = 0
  $GetComboChoiceComboBox.TabStop = $True
  $GetComboChoiceComboBox.Tag = $Null
  $GetComboChoiceComboBox.Text = "GetComboChoiceComboBox"
  $GetComboChoiceComboBox.ValueMember = $ValueMember
  #endregion $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()

  $GetComboChoiceComboBox.Items.AddRange($Items)

  if ($PSBoundParameters.ContainsKey("Selected"))
  {
    $GetComboChoiceComboBox.Tag = $Items | Where-Object -FilterScript { $PSItem -eq $Selected}
    $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag
  }
  else
  {
    $GetComboChoiceComboBox.SelectedIndex = 0
  }
  
  $GetComboChoiceDialogMainGroupBox.ClientSize = [System.Drawing.Size]::New($GetComboChoiceDialogMainGroupBox.ClientSize.Width, ($GetComboChoiceComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  
  #endregion ******** $GetComboChoiceDialogMainGroupBox Controls ********

  $TempClientSize = [System.Drawing.Size]::New(($GetComboChoiceDialogMainGroupBox.Right + [MyConfig]::FormSpacer), ($GetComboChoiceDialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $GetComboChoiceDialogMainPanel Controls ********

  # ************************************************
  # GetComboChoiceDialogBtm Panel
  # ************************************************
  #region $GetComboChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetComboChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetComboChoiceDialogForm.Controls.Add($GetComboChoiceDialogBtmPanel)
  $GetComboChoiceDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetComboChoiceDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetComboChoiceDialogBtmPanel.Name = "GetComboChoiceDialogBtmPanel"
  $GetComboChoiceDialogBtmPanel.Text = "GetComboChoiceDialogBtmPanel"
  #endregion $GetComboChoiceDialogBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $GetComboChoiceDialogBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetComboChoiceDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $GetComboChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmPanel.Controls.Add($GetComboChoiceDialogBtmLeftButton)
  $GetComboChoiceDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetComboChoiceDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboChoiceDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboChoiceDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetComboChoiceDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboChoiceDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetComboChoiceDialogBtmLeftButton.Name = "GetComboChoiceDialogBtmLeftButton"
  $GetComboChoiceDialogBtmLeftButton.TabIndex = 1
  $GetComboChoiceDialogBtmLeftButton.TabStop = $True
  $GetComboChoiceDialogBtmLeftButton.Text = $ButtonLeft
  $GetComboChoiceDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetComboChoiceDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetComboChoiceDialogBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetComboChoiceDialogBtmLeftButtonClick ********
  function Start-GetComboChoiceDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboChoiceDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetComboChoiceDialogBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-GetComboChoiceDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboChoiceDialogBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ($GetComboChoiceComboBox.SelectedIndex -gt 0)
    {
      $GetComboChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetComboChoiceDialogForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$GetComboChoiceDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetComboChoiceDialogBtmLeftButtonClick ********
  $GetComboChoiceDialogBtmLeftButton.add_Click({ Start-GetComboChoiceDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $GetComboChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmPanel.Controls.Add($GetComboChoiceDialogBtmMidButton)
  $GetComboChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetComboChoiceDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetComboChoiceDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboChoiceDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboChoiceDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetComboChoiceDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboChoiceDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetComboChoiceDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetComboChoiceDialogBtmMidButton.Name = "GetComboChoiceDialogBtmMidButton"
  $GetComboChoiceDialogBtmMidButton.TabIndex = 2
  $GetComboChoiceDialogBtmMidButton.TabStop = $True
  $GetComboChoiceDialogBtmMidButton.Text = $ButtonMid
  $GetComboChoiceDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetComboChoiceDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetComboChoiceDialogBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetComboChoiceDialogBtmMidButtonClick ********
  function Start-GetComboChoiceDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboChoiceDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetComboChoiceDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetComboChoiceDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboChoiceDialogBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ([String]::IsNullOrEmpty($GetComboChoiceComboBox.Tag))
    {
      $GetComboChoiceComboBox.SelectedIndex = 0
    }
    else
    {
      $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag
    }

    Write-Verbose -Message "Exit Click Event for `$GetComboChoiceDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetComboChoiceDialogBtmMidButtonClick ********
  $GetComboChoiceDialogBtmMidButton.add_Click({ Start-GetComboChoiceDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $GetComboChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetComboChoiceDialogBtmPanel.Controls.Add($GetComboChoiceDialogBtmRightButton)
  $GetComboChoiceDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetComboChoiceDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboChoiceDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboChoiceDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetComboChoiceDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboChoiceDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetComboChoiceDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetComboChoiceDialogBtmRightButton.Name = "GetComboChoiceDialogBtmRightButton"
  $GetComboChoiceDialogBtmRightButton.TabIndex = 3
  $GetComboChoiceDialogBtmRightButton.TabStop = $True
  $GetComboChoiceDialogBtmRightButton.Text = $ButtonRight
  $GetComboChoiceDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetComboChoiceDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetComboChoiceDialogBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-GetComboChoiceDialogBtmRightButtonClick ********
  function Start-GetComboChoiceDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboChoiceDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetComboChoiceDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetComboChoiceDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboChoiceDialogBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $GetComboChoiceDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$GetComboChoiceDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetComboChoiceDialogBtmRightButtonClick ********
  $GetComboChoiceDialogBtmRightButton.add_Click({ Start-GetComboChoiceDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $GetComboChoiceDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetComboChoiceDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetComboChoiceDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $GetComboChoiceDialogBtmPanel Controls ********

  $GetComboChoiceDialogForm.ClientSize = [System.Drawing.Size]::New($GetComboChoiceDialogForm.ClientSize.Width, ($TempClientSize.Height + $GetComboChoiceDialogBtmPanel.Height))
  
  #endregion ******** Controls for GetComboChoiceDialog Form ********

  #endregion ================ End **** GetComboChoiceDialog **** End ================

  $DialogResult = $GetComboChoiceDialogForm.ShowDialog()
  [GetComboChoiceDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $GetComboChoiceComboBox.SelectedItem)

  $GetComboChoiceDialogForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-GetComboChoiceDialog"
}
#endregion function Show-GetComboChoiceDialog

#region GetComboFilterDialog Result Class
Class GetComboFilterDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [HashTable]$Values
  
  GetComboFilterDialog ([Bool]$Success, [Object]$DialogResult, [HashTable]$Values)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Values = $Values
  }
}
#endregion GetComboFilterDialog Result Class

#region function Show-GetComboFilterDialog
Function Show-GetComboFilterDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-GetComboFilterDialog
    .DESCRIPTION
      Shows Show-GetComboFilterDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER Items
    .PARAMETER Properties
    .PARAMETER Selected
    .PARAMETER Width
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-GetComboFilterDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [String]$MessageText = "Status Message",
    [Object[]]$Items = @(),
    [String[]]$Properties,
    [HashTable]$Selected = @{},
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-GetComboFilterDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** GetComboFilterDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # GetComboFilterDialog Form
  # ************************************************
  #region $GetComboFilterDialogForm = [System.Windows.Forms.Form]::New()
  $GetComboFilterDialogForm = [System.Windows.Forms.Form]::New()
  $GetComboFilterDialogForm.BackColor = [MyConfig]::Colors.Back
  $GetComboFilterDialogForm.Font = [MyConfig]::Font.Regular
  $GetComboFilterDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $GetComboFilterDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $GetComboFilterDialogForm.Icon = $FCGForm.Icon
  $GetComboFilterDialogForm.KeyPreview = $True
  $GetComboFilterDialogForm.MaximizeBox = $False
  $GetComboFilterDialogForm.MinimizeBox = $False
  $GetComboFilterDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $GetComboFilterDialogForm.Name = "GetComboFilterDialogForm"
  $GetComboFilterDialogForm.Owner = $FCGForm
  $GetComboFilterDialogForm.ShowInTaskbar = $False
  $GetComboFilterDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $GetComboFilterDialogForm.Text = $DialogTitle
  #endregion $GetComboFilterDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-GetComboFilterDialogFormKeyDown ********
  Function Start-GetComboFilterDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetComboFilterDialog Form Control
      .DESCRIPTION
        KeyDown Event for the GetComboFilterDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-GetComboFilterDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$GetComboFilterDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $GetComboFilterDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$GetComboFilterDialogForm"
  }
  #endregion ******** Function Start-GetComboFilterDialogFormKeyDown ********
  $GetComboFilterDialogForm.add_KeyDown({ Start-GetComboFilterDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-GetComboFilterDialogFormShown ********
  Function Start-GetComboFilterDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the GetComboFilterDialog Form Control
      .DESCRIPTION
        Shown Event for the GetComboFilterDialog Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-GetComboFilterDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$GetComboFilterDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$GetComboFilterDialogForm"
  }
  #endregion ******** Function Start-GetComboFilterDialogFormShown ********
  $GetComboFilterDialogForm.add_Shown({ Start-GetComboFilterDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for GetComboFilterDialog Form ********
  
  # ************************************************
  # GetComboFilterDialogMain Panel
  # ************************************************
  #region $GetComboFilterDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetComboFilterDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $GetComboFilterDialogForm.Controls.Add($GetComboFilterDialogMainPanel)
  $GetComboFilterDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetComboFilterDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $GetComboFilterDialogMainPanel.Name = "GetComboFilterDialogMainPanel"
  $GetComboFilterDialogMainPanel.Text = "GetComboFilterDialogMainPanel"
  #endregion $GetComboFilterDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetComboFilterDialogMainPanel Controls ********
  
  #region $GetComboFilterDialogMainLabel = [System.Windows.Forms.Label]::New()
  $GetComboFilterDialogMainLabel = [System.Windows.Forms.Label]::New()
  $GetComboFilterDialogMainPanel.Controls.Add($GetComboFilterDialogMainLabel)
  $GetComboFilterDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
  $GetComboFilterDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $GetComboFilterDialogMainLabel.Name = "GetComboFilterDialogMainLabel"
  $GetComboFilterDialogMainLabel.Size = [System.Drawing.Size]::New(($GetComboFilterDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
  $GetComboFilterDialogMainLabel.Text = $MessageText
  $GetComboFilterDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $GetComboFilterDialogMainLabel = [System.Windows.Forms.Label]::New()
  
  # Returns the minimum size required to display the text
  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($GetComboFilterDialogMainLabel.Text, [MyConfig]::Font.Regular, $GetComboFilterDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
  $GetComboFilterDialogMainLabel.Size = [System.Drawing.Size]::New(($GetComboFilterDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))
  
  If ($PSBoundParameters.ContainsKey("Properties"))
  {
    $FilterOptionNames = $Properties
  }
  Else
  {
    $FilterOptionNames = ($Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name
  }
  
  # ************************************************
  # GetComboFilterDialogMain GroupBox
  # ************************************************
  #region $GetComboFilterDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  $GetComboFilterDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetComboFilterDialogMainPanel.Controls.Add($GetComboFilterDialogMainGroupBox)
  $GetComboFilterDialogMainGroupBox.BackColor = [MyConfig]::Colors.Back
  $GetComboFilterDialogMainGroupBox.Font = [MyConfig]::Font.Regular
  $GetComboFilterDialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $GetComboFilterDialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($GetComboFilterDialogMainLabel.Bottom + ([MyConfig]::FormSpacer * 2)))
  $GetComboFilterDialogMainGroupBox.Name = "GetComboFilterDialogMainGroupBox"
  $GetComboFilterDialogMainGroupBox.Size = [System.Drawing.Size]::New(($GetComboFilterDialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)
  $GetComboFilterDialogMainGroupBox.Text = $Null
  #endregion $GetComboFilterDialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  #region ******** $GetComboFilterDialogMainGroupBox Controls ********
  
  #region ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********
  Function Start-GetComboFilterComboBoxSelectedIndexChanged
  {
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control
    .DESCRIPTION
      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control
    .PARAMETER Sender
       The ComboBox Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ComboBox SelectedIndexChanged Event
    .EXAMPLE
       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ComboBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"
    
    [MyConfig]::AutoExit = 0
    
    $ValidItems = @($Items)
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidItems = @($ValidItems | Where-Object -FilterScript { $PSItem.($FilterOptionName) -like $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedItem.Value })
    }
    
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidItemNames = @($ValidItems | Select-Object -ExpandProperty $FilterOptionName -Unique)
      If ($FilterOptionName -ne $Sender.Name)
      {
        $RemoveList = @($GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { ($PSItem.Text -notin $ValidItemNames) -and ($PSItem.Value -ne "*") })
        ForEach ($RemoveItem In $RemoveList)
        {
          $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Items.Remove($RemoveItem)
        }
      }
      $HaveItemNames = @($GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)
      $AddList = @($GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Tag.Items | Where-Object -FilterScript { ($PSItem.Text -in $ValidItemNames) -and ($PSItem.Text -notin $HaveItemNames) })
      $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Items.AddRange($AddList)
    }
    
    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"
  }
  #endregion ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********
  
  $GroupBottom = [MyConfig]::Font.Height
  ForEach ($FilterOptionName In $FilterOptionNames)
  {
    #region $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()
    $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()
    $GetComboFilterDialogMainGroupBox.Controls.Add($TmpFilterComboBox)
    $TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
    $TmpFilterComboBox.AutoSize = $True
    $TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack
    $TmpFilterComboBox.DisplayMember = "Text"
    $TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
    $TmpFilterComboBox.Font = [MyConfig]::Font.Regular
    $TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore
    [void]$TmpFilterComboBox.Items.Add([PSCustomObject]@{ "Text" = " - Return All $($FilterOptionName) Values - "; "Value" = "*" })
    $TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $GroupBottom)
    $TmpFilterComboBox.Name = $FilterOptionName
    $TmpFilterComboBox.SelectedIndex = 0
    $TmpFilterComboBox.Size = [System.Drawing.Size]::New(($GetComboFilterDialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TmpFilterComboBox.PreferredHeight)
    $TmpFilterComboBox.Sorted = $True
    $TmpFilterComboBox.TabIndex = 0
    $TmpFilterComboBox.TabStop = $True
    $TmpFilterComboBox.Tag = $Null
    $TmpFilterComboBox.ValueMember = "Value"
    #endregion $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()
    
    $TmpFilterComboBox.SelectedIndex = 0
    $TmpFilterComboBox.Items.AddRange(@($Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty($PSITem.($FilterOptionName)) } | Sort-Object -Property $FilterOptionName -Unique | ForEach-Object -Process { [MyListItem]::New($PSITem.($FilterOptionName), $PSITem.($FilterOptionName)) }))
    $TmpFilterComboBox.Tag = @{ "Items" = @($TmpFilterComboBox.Items); "SelectedItem" = $Null }
    
    $TmpFilterComboBox.add_SelectedIndexChanged({ Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $This -EventArg $PSItem })
    
    $GroupBottom = ($TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)
  }
  
  $GetComboFilterDialogMainGroupBox.ClientSize = [System.Drawing.Size]::New($GetComboFilterDialogMainGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetComboFilterDialogMainGroupBox Controls ********
  
  ForEach ($FilterOptionName In $FilterOptionNames)
  {
    # $Sender
    If ($Selected.ContainsKey($FilterOptionName))
    {
      $TmpItem = $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { $PSItem.Value -eq $Selected.($FilterOptionName) }
      If (-not [String]::IsNullOrEmpty($TmpItem.Text))
      {
        $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedItem = $TmpItem
      }
    }
    $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Tag.SelectedItem = $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedItem
  }
  
  $TempClientSize = [System.Drawing.Size]::New(($GetComboFilterDialogMainGroupBox.Right + [MyConfig]::FormSpacer), ($GetComboFilterDialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetComboFilterDialogMainPanel Controls ********
  
  # ************************************************
  # GetComboFilterDialogBtm Panel
  # ************************************************
  #region $GetComboFilterDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetComboFilterDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $GetComboFilterDialogForm.Controls.Add($GetComboFilterDialogBtmPanel)
  $GetComboFilterDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $GetComboFilterDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $GetComboFilterDialogBtmPanel.Name = "GetComboFilterDialogBtmPanel"
  $GetComboFilterDialogBtmPanel.Text = "GetComboFilterDialogBtmPanel"
  #endregion $GetComboFilterDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $GetComboFilterDialogBtmPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($GetComboFilterDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $GetComboFilterDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmPanel.Controls.Add($GetComboFilterDialogBtmLeftButton)
  $GetComboFilterDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $GetComboFilterDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboFilterDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboFilterDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $GetComboFilterDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboFilterDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $GetComboFilterDialogBtmLeftButton.Name = "GetComboFilterDialogBtmLeftButton"
  $GetComboFilterDialogBtmLeftButton.TabIndex = 1
  $GetComboFilterDialogBtmLeftButton.TabStop = $True
  $GetComboFilterDialogBtmLeftButton.Text = $ButtonLeft
  $GetComboFilterDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $GetComboFilterDialogBtmLeftButton.PreferredSize.Height)
  #endregion $GetComboFilterDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetComboFilterDialogBtmLeftButtonClick ********
  Function Start-GetComboFilterDialogBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboFilterDialogBtmLeft Button Control
      .DESCRIPTION
        Click Event for the GetComboFilterDialogBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-GetComboFilterDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboFilterDialogBtmLeftButton"
    
    [MyConfig]::AutoExit = 0
    
    $ValidateClick = 0
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidateClick = $ValidateClick + $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedIndex
    }
    If ($ValidateClick -eq 0)
    {
      [Void][System.Windows.Forms.MessageBox]::Show($GetComboFilterDialogForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }
    Else
    {
      $GetComboFilterDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetComboFilterDialogBtmLeftButton"
  }
  #endregion ******** Function Start-GetComboFilterDialogBtmLeftButtonClick ********
  $GetComboFilterDialogBtmLeftButton.add_Click({ Start-GetComboFilterDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetComboFilterDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmPanel.Controls.Add($GetComboFilterDialogBtmMidButton)
  $GetComboFilterDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $GetComboFilterDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $GetComboFilterDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboFilterDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboFilterDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $GetComboFilterDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboFilterDialogBtmMidButton.Location = [System.Drawing.Point]::New(($GetComboFilterDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetComboFilterDialogBtmMidButton.Name = "GetComboFilterDialogBtmMidButton"
  $GetComboFilterDialogBtmMidButton.TabIndex = 2
  $GetComboFilterDialogBtmMidButton.TabStop = $True
  $GetComboFilterDialogBtmMidButton.Text = $ButtonMid
  $GetComboFilterDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $GetComboFilterDialogBtmMidButton.PreferredSize.Height)
  #endregion $GetComboFilterDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetComboFilterDialogBtmMidButtonClick ********
  Function Start-GetComboFilterDialogBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboFilterDialogBtmMid Button Control
      .DESCRIPTION
        Click Event for the GetComboFilterDialogBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetComboFilterDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboFilterDialogBtmMidButton"
    
    [MyConfig]::AutoExit = 0
    
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedIndex = 0
    }
    
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedItem = $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].Tag.SelectedItem
    }
    
    Write-Verbose -Message "Exit Click Event for `$GetComboFilterDialogBtmMidButton"
  }
  #endregion ******** Function Start-GetComboFilterDialogBtmMidButtonClick ********
  $GetComboFilterDialogBtmMidButton.add_Click({ Start-GetComboFilterDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })
  
  #region $GetComboFilterDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $GetComboFilterDialogBtmPanel.Controls.Add($GetComboFilterDialogBtmRightButton)
  $GetComboFilterDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $GetComboFilterDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $GetComboFilterDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $GetComboFilterDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $GetComboFilterDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $GetComboFilterDialogBtmRightButton.Location = [System.Drawing.Point]::New(($GetComboFilterDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $GetComboFilterDialogBtmRightButton.Name = "GetComboFilterDialogBtmRightButton"
  $GetComboFilterDialogBtmRightButton.TabIndex = 3
  $GetComboFilterDialogBtmRightButton.TabStop = $True
  $GetComboFilterDialogBtmRightButton.Text = $ButtonRight
  $GetComboFilterDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $GetComboFilterDialogBtmRightButton.PreferredSize.Height)
  #endregion $GetComboFilterDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-GetComboFilterDialogBtmRightButtonClick ********
  Function Start-GetComboFilterDialogBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the GetComboFilterDialogBtmRight Button Control
      .DESCRIPTION
        Click Event for the GetComboFilterDialogBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-GetComboFilterDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$GetComboFilterDialogBtmRightButton"
    
    [MyConfig]::AutoExit = 0
    
    $GetComboFilterDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    
    Write-Verbose -Message "Exit Click Event for `$GetComboFilterDialogBtmRightButton"
  }
  #endregion ******** Function Start-GetComboFilterDialogBtmRightButtonClick ********
  $GetComboFilterDialogBtmRightButton.add_Click({ Start-GetComboFilterDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })
  
  $GetComboFilterDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($GetComboFilterDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($GetComboFilterDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $GetComboFilterDialogBtmPanel Controls ********
  
  $GetComboFilterDialogForm.ClientSize = [System.Drawing.Size]::New($GetComboFilterDialogForm.ClientSize.Width, ($TempClientSize.Height + $GetComboFilterDialogBtmPanel.Height))
  
  #endregion ******** Controls for GetComboFilterDialog Form ********
  
  #endregion ================ End **** GetComboFilterDialog **** End ================
  
  $DialogResult = $GetComboFilterDialogForm.ShowDialog()
  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $TmpHash = [HashTable]::New()
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      [Void]$TmpHash.Add($FilterOptionName, $GetComboFilterDialogMainGroupBox.Controls[$FilterOptionName].SelectedItem.Value)
    }
    [GetComboFilterDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpHash)
  }
  Else
  {
    [GetComboFilterDialog]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @{ })
  }
  
  $GetComboFilterDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-GetComboFilterDialog"
}
#endregion function Show-GetComboFilterDialog

#region function Show-ChangeLogDialog
Function Show-ChangeLogDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-ChangeLogDialog
    .DESCRIPTION
      Shows Show-ChangeLogDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER ScriptBlock
    .PARAMETER Items
    .PARAMETER Width
    .PARAMETER Height
    .PARAMETER ButtonMid
    .PARAMETER AllowCancel
    .PARAMETER AutoClose
    .EXAMPLE
      $Return = Show-ChangeLogDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "Change Log - $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)",
    [parameter(Mandatory = $True)]
    [String]$ChangeText,
    [Int]$Width = 60,
    [Int]$Height = 30
  )
  Write-Verbose -Message "Enter Function Show-ChangeLogDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** ChangeLogDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # ChangeLogDialog Form
  # ************************************************
  #region $ChangeLogDialogForm = [System.Windows.Forms.Form]::New()
  $ChangeLogDialogForm = [System.Windows.Forms.Form]::New()
  $ChangeLogDialogForm.BackColor = [MyConfig]::Colors.Back
  $ChangeLogDialogForm.Font = [MyConfig]::Font.Regular
  $ChangeLogDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $ChangeLogDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ChangeLogDialogForm.Icon = $FCGForm.Icon
  $ChangeLogDialogForm.KeyPreview = $True
  $ChangeLogDialogForm.MaximizeBox = $False
  $ChangeLogDialogForm.MinimizeBox = $False
  $ChangeLogDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $ChangeLogDialogForm.Name = "ChangeLogDialogForm"
  $ChangeLogDialogForm.Owner = $FCGForm
  $ChangeLogDialogForm.ShowInTaskbar = $False
  $ChangeLogDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ChangeLogDialogForm.Tag = $False
  $ChangeLogDialogForm.Text = $Title
  #endregion $ChangeLogDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-ChangeLogDialogFormKeyDown ********
  Function Start-ChangeLogDialogFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the ChangeLogDialog Form Control
    .DESCRIPTION
      KeyDown Event for the ChangeLogDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-ChangeLogDialogFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ChangeLogDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $ChangeLogDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$ChangeLogDialogForm"
  }
  #endregion ******** Function Start-ChangeLogDialogFormKeyDown ********
  $ChangeLogDialogForm.add_KeyDown({ Start-ChangeLogDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-ChangeLogDialogFormShown ********
  Function Start-ChangeLogDialogFormShown
  {
    <#
     .SYNOPSIS
       Shown Event for the ChangeLogDialog Form Control
     .DESCRIPTION
       Shown Event for the ChangeLogDialog Form Control
     .PARAMETER Sender
        The Form Control that fired the Shown Event
     .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-ChangeLogDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ChangeLogDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    $ChangeLogDialogMainTextBox.AppendText($ChangeText)
    
    $ChangeLogDialogMainTextBox.SelectionLength = 0
    $ChangeLogDialogMainTextBox.SelectionStart = 0
    $ChangeLogDialogMainTextBox.ScrollToCaret()
    $ChangeLogDialogMainTextBox.Refresh()
    
    
    Write-Verbose -Message "Exit Shown Event for `$ChangeLogDialogForm"
  }
  #endregion ******** Function Start-ChangeLogDialogFormShown ********
  $ChangeLogDialogForm.add_Shown({ Start-ChangeLogDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for ChangeLogDialog Form ********
  
  # ************************************************
  # ChangeLogDialogMain Panel
  # ************************************************
  #region $ChangeLogDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogDialogForm.Controls.Add($ChangeLogDialogMainPanel)
  $ChangeLogDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ChangeLogDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ChangeLogDialogMainPanel.Name = "ChangeLogDialogMainPanel"
  $ChangeLogDialogMainPanel.Text = "ChangeLogDialogMainPanel"
  #endregion $ChangeLogDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $ChangeLogDialogMainPanel Controls ********
  
  #region $ChangeLogDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  $ChangeLogDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  $ChangeLogDialogMainPanel.Controls.Add($ChangeLogDialogMainTextBox)
  $ChangeLogDialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $ChangeLogDialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack
  $ChangeLogDialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $ChangeLogDialogMainTextBox.Font = [System.Drawing.Font]::New("Courier New", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)
  $ChangeLogDialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $ChangeLogDialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ChangeLogDialogMainTextBox.MaxLength = [Int]::MaxValue
  $ChangeLogDialogMainTextBox.Multiline = $True
  $ChangeLogDialogMainTextBox.Name = "ChangeLogDialogMainTextBox"
  $ChangeLogDialogMainTextBox.ReadOnly = $True
  $ChangeLogDialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
  $ChangeLogDialogMainTextBox.Size = [System.Drawing.Size]::New(($ChangeLogDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ChangeLogDialogMainPanel.ClientSize.Height - ($ChangeLogDialogMainTextBox.Top + [MyConfig]::FormSpacer)))
  $ChangeLogDialogMainTextBox.TabStop = $False
  $ChangeLogDialogMainTextBox.Text = $Null
  $ChangeLogDialogMainTextBox.WordWrap = $False
  #endregion $ChangeLogDialogMainTextBox = [System.Windows.Forms.TextBox]::New()
  
  #endregion ******** $ChangeLogDialogMainPanel Controls ********
  
  # ************************************************
  # ChangeLogDialogBtm Panel
  # ************************************************
  #region $ChangeLogDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogDialogForm.Controls.Add($ChangeLogDialogBtmPanel)
  $ChangeLogDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ChangeLogDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ChangeLogDialogBtmPanel.Name = "ChangeLogDialogBtmPanel"
  $ChangeLogDialogBtmPanel.Text = "ChangeLogDialogBtmPanel"
  #endregion $ChangeLogDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $ChangeLogDialogBtmPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ChangeLogDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $ChangeLogDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $ChangeLogDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $ChangeLogDialogBtmPanel.Controls.Add($ChangeLogDialogBtmMidButton)
  #$ChangeLogDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ChangeLogDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ChangeLogDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ChangeLogDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ChangeLogDialogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $ChangeLogDialogBtmMidButton.Enabled = $True
  $ChangeLogDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $ChangeLogDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ChangeLogDialogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), 0)
  $ChangeLogDialogBtmMidButton.Name = "ChangeLogDialogBtmMidButton"
  $ChangeLogDialogBtmMidButton.TabStop = $True
  $ChangeLogDialogBtmMidButton.Text = "&Ok"
  $ChangeLogDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ChangeLogDialogBtmMidButton.PreferredSize.Height)
  #endregion $ChangeLogDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  $ChangeLogDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($ChangeLogDialogMainTextBox.Right + [MyConfig]::FormSpacer), (($ChangeLogDialogBtmPanel.Controls[$ChangeLogDialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $ChangeLogDialogBtmPanel Controls ********
  
  #endregion ******** Controls for ChangeLogDialog Form ********
  
  #endregion ================ End **** ChangeLogDialog **** End ================
  
  $DialogResult = $ChangeLogDialogForm.ShowDialog($FCGForm)
  
  $ChangeLogDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-ChangeLogDialog"
}
#endregion function Show-ChangeLogDialog

#region MyStatusDialog Result Class
Class MyStatusDialog
{
  [Bool]$Success
  [Object]$DialogResult

  MyStatusDialog ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }
}
#endregion MyStatusDialog Result Class

#region function Show-MyStatusDialog
function Show-MyStatusDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-MyStatusDialog
    .DESCRIPTION
      Shows Show-MyStatusDialog
    .PARAMETER DialogTitle
    .PARAMETER MessageText
    .PARAMETER ScriptBlock
    .PARAMETER HashTable
    .PARAMETER Width
    .PARAMETER Height
    .PARAMETER ButtonDefault
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .PARAMETER AllowControl
    .PARAMETER AutoClose
    .PARAMETER AutoCloseWait
    .EXAMPLE
      $Return = Show-MyStatusDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Zero")]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$MessageText = "Status Message",
    [parameter(Mandatory = $True)]
    [ScriptBlock]$ScriptBlock = {},
    [HashTable]$HashTable = @{},
    [Int]$Width = 45,
    [Int]$Height = 30,
    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonLeft,
    [parameter(Mandatory = $True, ParameterSetName = "One")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonMid,
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonRight,
    [Switch]$AllowControl,
    [Switch]$AutoClose,
    [ValidateRange(0, 300)]
    [int]$AutoCloseWait = 10
  )
  Write-Verbose -Message "Enter Function Show-MyStatusDialog"

  #region >>>>>>>>>>>>>>>> Begin **** $MyStatusDialog **** Begin <<<<<<<<<<<<<<<<

  # ************************************************
  # $MyStatusDialog Form
  # ************************************************
  #region $MyStatusDialogForm = [System.Windows.Forms.Form]::New()
  $MyStatusDialogForm = [System.Windows.Forms.Form]::New()
  $MyStatusDialogForm.BackColor = [MyConfig]::Colors.Back
  $MyStatusDialogForm.Font = [MyConfig]::Font.Regular
  $MyStatusDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $MyStatusDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $MyStatusDialogForm.Icon = $FCGForm.Icon
  $MyStatusDialogForm.KeyPreview = $AllowControl.IsPresent
  $MyStatusDialogForm.MaximizeBox = $False
  $MyStatusDialogForm.MinimizeBox = $False
  $MyStatusDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $MyStatusDialogForm.Name = "MyStatusDialogForm"
  $MyStatusDialogForm.Owner = $FCGForm
  $MyStatusDialogForm.ShowInTaskbar = $False
  $MyStatusDialogForm.Size = $MyStatusDialogForm.MinimumSize
  $MyStatusDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $MyStatusDialogForm.Tag = @{ "Cancel" = $False; "Pause" = $False }
  $MyStatusDialogForm.Text = $DialogTitle
  #endregion $MyStatusDialogForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-MyStatusDialogFormKeyDown ********
  Function Start-MyStatusDialogFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the MyStatusDialog Form Control
    .DESCRIPTION
      KeyDown Event for the MyStatusDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-MyStatusDialogFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$MyStatusDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    If ($EventArg.Control -and $EventArg.Alt)
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -eq [System.Windows.Forms.Keys]::Back }
        {
          $Sender.Tag.Cancel = $True
          Break
        }
        { $PSItem -eq [System.Windows.Forms.Keys]::End }
        {
          $Sender.Tag.Cancel = $True
          Break
        }
      }
    }
    Else
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }
        {
          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)
          Break
        }
      }
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$MyStatusDialogForm"
  }
  #endregion ******** Function Start-MyStatusDialogFormKeyDown ********
  If ($AllowControl.IsPresent)
  {
    $MyStatusDialogForm.add_KeyDown({ Start-MyStatusDialogFormKeyDown -Sender $This -EventArg $PSItem })
  }

  #region ******** Function Start-MyStatusDialogFormShown ********
  function Start-MyStatusDialogFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $MyStatusDialog Form Control
      .DESCRIPTION
        Shown Event for the $MyStatusDialog Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-MyStatusDialogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$MyStatusDialogForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    If ([MyConfig]::Production)
    {
      # Disable Auto Exit Timer
      $FCGTimer.Enabled = $False
    }

    if ($PassHashTable)
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $MyStatusDialogMainRichTextBox, $HashTable
    }
    else
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $MyStatusDialogMainRichTextBox
    }

    If ([MyConfig]::Production)
    {
      # Re-enable Auto Exit Timer
      $FCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
    }

    switch ($MyStatusDialogButtons)
    {
      1
      {
        $MyStatusDialogBtmMidButton.Enabled = $True
        $MyStatusDialogBtmMidButton.DialogResult = $DialogResult
        Break
      }
      2
      {
        $MyStatusDialogBtmLeftButton.Enabled = $True
        $MyStatusDialogBtmRightButton.Enabled = $True
        Break
      }
      3
      {
        $MyStatusDialogBtmLeftButton.Enabled = $True
        $MyStatusDialogBtmMidButton.Enabled = $True
        $MyStatusDialogBtmRightButton.Enabled = $True
        Break
      }
    }

    if ((($DialogResult -eq $ButtonDefault) -and $AutoClose.IsPresent) -or ($MyStatusDialogButtons -eq 0))
    {
      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
      while ($StopWatch.ElapsedMilliseconds -le $AutoCloseWait)
      {
        [System.Threading.Thread]::Sleep(10)
        [System.Windows.Forms.Application]::DoEvents()
      }

      $MyStatusDialogForm.DialogResult = $DialogResult
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$MyStatusDialogForm"
  }
  #endregion ******** Function Start-MyStatusDialogFormShown ********
  $MyStatusDialogForm.add_Shown({Start-MyStatusDialogFormShown -Sender $This -EventArg $PSItem})

  #region ******** Controls for $MyStatusDialog Form ********

  # ************************************************
  # $MyStatusDialogMain Panel
  # ************************************************
  #region $MyStatusDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MyStatusDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MyStatusDialogForm.Controls.Add($MyStatusDialogMainPanel)
  $MyStatusDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MyStatusDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $MyStatusDialogMainPanel.Name = "MyStatusDialogMainPanel"
  $MyStatusDialogMainPanel.Text = "$MyStatusDialogMainPanel"
  #endregion $MyStatusDialogMainPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $MyStatusDialogMainPanel Controls ********

  if ($PSBoundParameters.ContainsKey("MessageText"))
  {
    #region $MyStatusDialogMainLabel = [System.Windows.Forms.Label]::New()
    $MyStatusDialogMainLabel = [System.Windows.Forms.Label]::New()
    $MyStatusDialogMainPanel.Controls.Add($MyStatusDialogMainLabel)
    $MyStatusDialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $MyStatusDialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $MyStatusDialogMainLabel.Name = "MyStatusDialogMainLabel"
    $MyStatusDialogMainLabel.Size = [System.Drawing.Size]::New(($MyStatusDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $MyStatusDialogMainLabel.Text = $MessageText
    $MyStatusDialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $MyStatusDialogMainLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($MyStatusDialogMainLabel.Text, [MyConfig]::Font.Regular, $MyStatusDialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $MyStatusDialogMainLabel.Size = [System.Drawing.Size]::New(($MyStatusDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $MyStatusDialogMainLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TempBottom = 0
  }

  #region $MyStatusDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $MyStatusDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $MyStatusDialogMainPanel.Controls.Add($MyStatusDialogMainRichTextBox)
  $MyStatusDialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $MyStatusDialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack
  $MyStatusDialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $MyStatusDialogMainRichTextBox.DetectUrls = $True
  $MyStatusDialogMainRichTextBox.Font = [MyConfig]::Font.Regular
  $MyStatusDialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $MyStatusDialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $MyStatusDialogMainRichTextBox.MaxLength = [Int]::MaxValue
  $MyStatusDialogMainRichTextBox.Multiline = $True
  $MyStatusDialogMainRichTextBox.Name = "MyStatusDialogMainRichTextBox"
  $MyStatusDialogMainRichTextBox.ReadOnly = $True
  $MyStatusDialogMainRichTextBox.Rtf = ""
  $MyStatusDialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both
  $MyStatusDialogMainRichTextBox.Size = [System.Drawing.Size]::New(($MyStatusDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($MyStatusDialogMainPanel.ClientSize.Height - ($MyStatusDialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))
  $MyStatusDialogMainRichTextBox.TabStop = $False
  $MyStatusDialogMainRichTextBox.Text = ""
  $MyStatusDialogMainRichTextBox.WordWrap = $False
  #endregion $MyStatusDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()

  #region ******** Function Start-MyStatusDialogMainRichTextBoxMouseDown ********
  Function Start-MyStatusDialogMainRichTextBoxMouseDown
  {
  <#
    .SYNOPSIS
      MouseDown Event for the MyStatusDialogMain RichTextBox Control
    .DESCRIPTION
      MouseDown Event for the MyStatusDialogMain RichTextBox Control
    .PARAMETER Sender
       The RichTextBox Control that fired the MouseDown Event
    .PARAMETER EventArg
       The Event Arguments for the RichTextBox MouseDown Event
    .EXAMPLE
       Start-MyStatusDialogMainRichTextBoxMouseDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.RichTextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter MouseDown Event for `$MyStatusDialogMainRichTextBox"
    
    [MyConfig]::AutoExit = 0
    
    $MyStatusDialogMainRichTextBox.SelectionLength = 0
    $MyStatusDialogMainRichTextBox.SelectionStart = $MyStatusDialogMainRichTextBox.TextLength
    
    Write-Verbose -Message "Exit MouseDown Event for `$MyStatusDialogMainRichTextBox"
  }
  #endregion ******** Function Start-MyStatusDialogMainRichTextBoxMouseDown ********
  $MyStatusDialogMainRichTextBox.add_MouseDown({ Start-MyStatusDialogMainRichTextBoxMouseDown -Sender $This -EventArg $PSItem })

  #endregion ******** $MyStatusDialogMainPanel Controls ********

  switch ($PSCmdlet.ParameterSetName)
  {
    "Zero"
    {
      $MyStatusDialogButtons = 0
      Break
    }
    "One"
    {
      $MyStatusDialogButtons = 1
      Break
    }
    "Two"
    {
      $MyStatusDialogButtons = 2
      Break
    }
    "Three"
    {
      $MyStatusDialogButtons = 3
      Break
    }
  }

  # Evenly Space Buttons - Move Size to after Text
  if ($MyStatusDialogButtons -gt 0)
  {
    # ************************************************
    # $MyStatusDialogBtm Panel
    # ************************************************
    #region $MyStatusDialogBtmPanel = [System.Windows.Forms.Panel]::New()
    $MyStatusDialogBtmPanel = [System.Windows.Forms.Panel]::New()
    $MyStatusDialogForm.Controls.Add($MyStatusDialogBtmPanel)
    $MyStatusDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
    $MyStatusDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
    $MyStatusDialogBtmPanel.Name = "MyStatusDialogBtmPanel"
    $MyStatusDialogBtmPanel.Text = "$MyStatusDialogBtmPanel"
    #endregion $MyStatusDialogBtmPanel = [System.Windows.Forms.Panel]::New()

    #region ******** $MyStatusDialogBtmPanel Controls ********

    $NumButtons = 3
    $TempSpace = [Math]::Floor($MyStatusDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
    $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
    $TempMod = $TempSpace % $NumButtons

    #region $MyStatusDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
    If (($MyStatusDialogButtons -eq 2) -or ($MyStatusDialogButtons -eq 3))
    {
      $MyStatusDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
      $MyStatusDialogBtmPanel.Controls.Add($MyStatusDialogBtmLeftButton)
      $MyStatusDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
      $MyStatusDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $MyStatusDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
      $MyStatusDialogBtmLeftButton.DialogResult = $ButtonLeft
      $MyStatusDialogBtmLeftButton.Enabled = $False
      $MyStatusDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
      $MyStatusDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $MyStatusDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
      $MyStatusDialogBtmLeftButton.Name = "MyStatusDialogBtmLeftButton"
      $MyStatusDialogBtmLeftButton.TabIndex = 0
      $MyStatusDialogBtmLeftButton.TabStop = $True
      $MyStatusDialogBtmLeftButton.Text = "&$($ButtonLeft.ToString())"
      $MyStatusDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $MyStatusDialogBtmLeftButton.PreferredSize.Height)
    }
    #endregion $MyStatusDialogBtmLeftButton = [System.Windows.Forms.Button]::New()

    #region $MyStatusDialogBtmMidButton = [System.Windows.Forms.Button]::New()
    If (($MyStatusDialogButtons -eq 1) -or ($MyStatusDialogButtons -eq 3))
    {
      $MyStatusDialogBtmMidButton = [System.Windows.Forms.Button]::New()
      $MyStatusDialogBtmPanel.Controls.Add($MyStatusDialogBtmMidButton)
      $MyStatusDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
      $MyStatusDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $MyStatusDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
      $MyStatusDialogBtmMidButton.DialogResult = $ButtonMid
      $MyStatusDialogBtmMidButton.Enabled = $False
      $MyStatusDialogBtmMidButton.Font = [MyConfig]::Font.Bold
      $MyStatusDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $MyStatusDialogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
      $MyStatusDialogBtmMidButton.Name = "MyStatusDialogBtmMidButton"
      $MyStatusDialogBtmMidButton.TabStop = $True
      $MyStatusDialogBtmMidButton.Text = "&$($ButtonMid.ToString())"
      $MyStatusDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $MyStatusDialogBtmMidButton.PreferredSize.Height)
    }
    #endregion $MyStatusDialogBtmMidButton = [System.Windows.Forms.Button]::New()

    #region $MyStatusDialogBtmRightButton = [System.Windows.Forms.Button]::New()
    If (($MyStatusDialogButtons -eq 2) -or ($MyStatusDialogButtons -eq 3))
    {
      $MyStatusDialogBtmRightButton = [System.Windows.Forms.Button]::New()
      $MyStatusDialogBtmPanel.Controls.Add($MyStatusDialogBtmRightButton)
      $MyStatusDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
      $MyStatusDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $MyStatusDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
      $MyStatusDialogBtmRightButton.DialogResult = $ButtonRight
      $MyStatusDialogBtmRightButton.Enabled = $False
      $MyStatusDialogBtmRightButton.Font = [MyConfig]::Font.Bold
      $MyStatusDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $MyStatusDialogBtmRightButton.Location = [System.Drawing.Point]::New(($MyStatusDialogBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
      $MyStatusDialogBtmRightButton.Name = "MyStatusDialogBtmRightButton"
      $MyStatusDialogBtmRightButton.TabIndex = 1
      $MyStatusDialogBtmRightButton.TabStop = $True
      $MyStatusDialogBtmRightButton.Text = "&$($ButtonRight.ToString())"
      $MyStatusDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $MyStatusDialogBtmRightButton.PreferredSize.Height)
    }
    #endregion $MyStatusDialogBtmRightButton = [System.Windows.Forms.Button]::New()

    $MyStatusDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($MyStatusDialogMainTextBox.Right + [MyConfig]::FormSpacer), (($MyStatusDialogBtmPanel.Controls[$MyStatusDialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

    #endregion ******** $MyStatusDialogBtmPanel Controls ********
  }

  #endregion ******** Controls for $MyStatusDialog Form ********

  #endregion ================ End **** $MyStatusDialog **** End ================

  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")
  $DialogResult = $MyStatusDialogForm.ShowDialog($FCGForm)
  [MyStatusDialog]::New(($DialogResult -eq $ButtonDefault), $DialogResult)

  $MyStatusDialogForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-MyStatusDialog"
}
#endregion function Show-MyStatusDialog

#region Function Write-RichTextBox
Function Write-RichTextBox
{
  <#
    .SYNOPSIS
      Write to RichTextBox
    .DESCRIPTION
      Write to RichTextBox
    .PARAMETER RichTextBox
    .PARAMETER TextFore
    .PARAMETER Font
    .PARAMETER Alignment
    .PARAMETER Text
    .PARAMETER BulletFore
    .PARAMETER NoNewLine
    .EXAMPLE
      Write-RichTextBox -RichTextBox $RichTextBox -Text $Text
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "NewLine")]
  param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $MyStatusDialogMainRichTextBox,
    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Windows.Forms.HorizontalAlignment]$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,
    [String]$Text,
    [parameter(Mandatory = $False, ParameterSetName = "NewLine")]
    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,
    [parameter(Mandatory = $True, ParameterSetName = "NoNewLine")]
    [Switch]$NoNewLine
  )
  $RichTextBox.SelectionLength = 0
  $RichTextBox.SelectionStart = $RichTextBox.TextLength
  $RichTextBox.SelectionAlignment = $Alignment
  $RichTextBox.SelectionFont = $Font
  $RichTextBox.SelectionColor = $TextFore
  $RichTextBox.AppendText($Text)
  if (-not $NoNewLine.IsPresent)
  {
    $RichTextBox.SelectionColor = $BulletFore
    $RichTextBox.AppendText("`r`n")
  }
  $RichTextBox.ScrollToCaret()
  $RichTextBox.Refresh()
}
#endregion Function Write-RichTextBox

#region Function Write-RichTextBoxValue
Function Write-RichTextBoxValue
{
  <#
    .SYNOPSIS
      Write Property Value to RichTextBox
    .DESCRIPTION
      Write Property Value to RichTextBox
    .PARAMETER RichTextBox
    .PARAMETER TextFore
    .PARAMETER ValueFore
    .PARAMETER BulletFore
    .PARAMETER Font
    .PARAMETER Text
    .PARAMETER Value
    .EXAMPLE
      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Text -Value $Value
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $MyStatusDialogMainRichTextBox,
    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Color]$ValueFore = [MyConfig]::Colors.TextInfo,
    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [Parameter(Mandatory = $True)]
    [String]$Text,
    [Parameter(Mandatory = $True)]
    [String]$Value
  )
  $RichTextBox.SelectionLength = 0
  $RichTextBox.SelectionStart = $RichTextBox.TextLength
  $RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left
  $RichTextBox.SelectionFont = $Font
  $RichTextBox.SelectionColor = $TextFore
  $RichTextBox.AppendText("$($Text)")
  $RichTextBox.SelectionColor = $BulletFore
  $RichTextBox.AppendText(": ")
  $RichTextBox.SelectionColor = $ValueFore
  $RichTextBox.AppendText("$($Value)")
  $RichTextBox.SelectionColor = $BulletFore
  $RichTextBox.AppendText("`r`n")
  $RichTextBox.ScrollToCaret()
  $RichTextBox.Refresh()
}
#endregion Function Write-RichTextBoxValue

#region Function Write-RichTextBoxError
Function Write-RichTextBoxError
{
  <#
    .SYNOPSIS
      Write Error Message to RichTextBox
    .DESCRIPTION
      Write Error Message to RichTextBox
    .PARAMETER RichTextBox
    .EXAMPLE
      Write-RichTextBoxError -RichTextBox $RichTextBox
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $MyStatusDialogMainRichTextBox
  )

  Write-RichTextBox -RichTextBox $RichTextBox -Text "Error: " -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox -Text $($Error[0].Exception.Message) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox

  Write-RichTextBox -RichTextBox $RichTextBox -Text "Code: " -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox -Text (($Error[0].InvocationInfo.Line).Trim()) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox

  Write-RichTextBox -RichTextBox $RichTextBox -Text "Line: " -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox -Text ($Error[0].InvocationInfo.ScriptLineNumber) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine
  Write-RichTextBox -RichTextBox $RichTextBox

}
#endregion Function Write-RichTextBoxError

#endregion ================ My Common Dialogs ================

#region ******** FCG Custom Commands ********

# --------------------------------------
# Get Form Control Classes and Functions
# --------------------------------------
#region Class MyFormControlParameter
Class MyFormControlParameter
{
  [String]$Parameter
  [String]$PropertyType
  
  MyFormControlParameter ([String]$Parameter, [String]$PropertyType)
  {
    $This.Parameter = [System.Globalization.CultureInfo]::CurrentCulture.TextInfo.ToTitleCase($Parameter)
    $This.PropertyType = $PropertyType
  }
}
#endregion Class MyFormControlParameter

#region Class MyFormControlConstructor
Class MyFormControlConstructor
{
  [List[MyFormControlParameter]]$Parameter = [List[MyFormControlParameter]]::New()
  
  MyFormControlConstructor ([MyFormControlParameter[]]$Parameter)
  {
    $This.Parameter.AddRange($Parameter)
  }
}
#endregion Class MyFormControlConstructor

#region Class MyFormControlProperty
Class MyFormControlProperty
{
  [String]$Name
  [String]$PropertyType
  [String]$BaseType
  [Object]$Default
  
  MyFormControlProperty ([String]$Name, [String]$PropertyType, [String]$BaseType, [Object]$Default)
  {
    $This.Name = $Name
    $This.PropertyType = $PropertyType
    $This.BaseType = $BaseType
    $This.Default = $Default
  }
}
#endregion Class MyFormControlProperty

#region Class MyFormControlItems
Class MyFormControlItems
{
  [String]$Medhod
  [List[MyFormControlParameter]]$Parameter = [List[MyFormControlParameter]]::New()
  
  MyFormControlItems ([String]$Medhod, [MyFormControlParameter[]]$Parameter)
  {
    $This.Medhod = $Medhod
    $This.Parameter.AddRange($Parameter)
  }
}
#endregion Class MyFormControlItems

#region Class MyFormControlEvent
Class MyFormControlEvent
{
  [String]$Name
  [String]$AddMethod
  [Bool]$IsFavorite
  
  MyFormControlEvent ([String]$Name, [String]$AddMethod, [Bool]$IsFavorite)
  {
    $This.Name = $Name
    $This.AddMethod = $AddMethod
    $This.IsFavorite = $IsFavorite
  }
}
#endregion Class MyFormControlEvent

#region Class MyFormControl
Class MyFormControl
{
  [String]$Name
  [String]$FullName
  [List[MyFormControlConstructor]]$Constructors = [List[MyFormControlConstructor]]::New()
  [List[MyFormControlProperty]]$Properties = [List[MyFormControlProperty]]::New()
  [List[MyFormControlItems]]$Items = [List[MyFormControlItems]]::New()
  [List[MyFormControlEvent]]$Events = [List[MyFormControlEvent]]::New()
  
  MyFormControl ([String]$Name, [String]$FullName)
  {
    $This.Name = $Name
    $This.FullName = $FullName
  }
}
#endregion Class MyFormControl

#region function Get-MyFormControls
function Get-MyFormControls ()
{
  <#
    .SYNOPSIS
      Get List of Windows Form Controls
    .DESCRIPTION
      Get List of Windows Form Controls
    .EXAMPLE
      Get-MyFormControls
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [HashTable]$FavEvents = @{}
  )
  Write-Verbose -Message "Enter Function Get-MyFormControls"
  
  # Get System.Windows.Forms.Form Assembly
  $Assembly = [System.Reflection.Assembly]::GetAssembly("System.Windows.Forms.Form")
  # Get List of Exported System.Windows.Forms Types
  $ExportedTypes = $Assembly.ExportedTypes | Where-Object -FilterScript { $PSitem.IsPublic -and $PSItem.IsClass -and (-not $PSItem.IsAbstract) -and ($PSItem.FullName -like "System.Windows.Forms*") } | Sort-Object -Property FullName
  # Check Each Expoted Type
  ForEach ($ExportedType in $ExportedTypes)
  {
    # Get Form Control Contructors
    $TmpConstructors = @($ExportedType.GetConstructors(("Instance", "Public")))
    if ((($ExportedType.GetInterface("IComponent")).IsPublic -or ($ExportedType.GetInterface("ISerializable")).IsPublic) -and ($TmpConstructors.Count -gt 0) -and (@($TmpConstructors | Where-Object -FilterScript { @($PSItem.GetParameters()).Count -eq 0 }).Count -eq 1))
    {
      # Create Form Control Return Value
      $RetValue = [MyFormControl]::New($ExportedType.Name, $ExportedType.FullName)
      # Get Form Control Constructors
      ForEach ($TmpConstructor In $TmpConstructors)
      {
        $RetValue.Constructors.Add([MyFormControlConstructor]::New(@($TmpConstructor.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
      }
      # Get Form Control Property List
      $TmpProperties = $ExportedType.GetProperties(("Instance", "Public")) | Where-Object -FilterScript { $PSItem.CanWrite } | Sort-Object -Property Name -Unique
      $TmpControl = $ExportedType::New()
      ForEach ($TmpProperty In $TmpProperties)
      {
        $RetValue.Properties.Add([MyFormControlProperty]::New($TmpProperty.Name, $TmpProperty.PropertyType.FullName, $TmpProperty.PropertyType.BaseType.FullName, $TmpControl.PSObject.Properties[$TmpProperty.Name].Value)) | Out-Null
      }
      Try { $TmpControl.Dispose() } Catch {}
      # Get Form Control Items - Add / AddRange Methods
      $TmpItems = $ExportedType.GetProperties(("Instance", "Public")) | Where-Object -FilterScript { $PSItem.Name -notin @("Controls", "DataBindings") -and (-not $PSItem.CanWrite) -and $PSItem.PropertyType.GetInterface("ICollection").IsPublic } | Sort-Object -Property Name -Unique
      ForEach ($TmpItem In $TmpItems)
      {
        ForEach ($TmpAddItem In @($TmpItem.PropertyType.GetDeclaredMethods("Add")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("Add", @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
        ForEach ($TmpAddItem In @($TmpItem.PropertyType.GetDeclaredMethods("AddRange")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("AddRange", @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
      }
      # Get Form Control Events
      $TmpEvents = @($ExportedType.GetEvents() | Sort-Object -Property Name -Unique)
      If ($FavEvents.ContainsKey($ExportedType.Name))
      {
        ForEach ($Event In $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, ($FavEvents[$ExportedType.Name] -contains $Event.Name))) | Out-Null
        }
      }
      Else
      {
        ForEach ($Event In $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, $False)) | Out-Null
        }
      }
      # Return Form Confrom Info
      $RetValue
    }
  }
  
  Write-Verbose -Message "Exit Function Get-MyFormControls"
}
#endregion function Get-MyFormControls


$Host.EnterNestedPrompt()

# ------------------------------
# My FCG Sample Dialog Functions
# ------------------------------
#region function Build-MyFCGBasicDialog
function Build-MyFCGBasicDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .PARAMETER MyControlType
    .EXAMPLE
      Build-MyFCGBasicDialog -MyScriptName $MyScriptName -MyControlName $MyDialogClass -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGBasicDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region MyDialogName Dialog Result Class
  $MyDialogClass = $MyDialogName.Replace("-", "")
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object[]]`$ReturnValue")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Object]`$DialogResult, [Object[]]`$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.ReturnValue = `$ReturnValue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyDialogName Dialog Result Class
  
  #region function MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function $($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupBoxText")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($MyDialogName) -DialogTitle `$DialogTitle -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($MyDialogName) -DialogTitle `$DialogTitle")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function $($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.TopMost = `$True")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Load({ Start-$($MyDialogName)FormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Move({ Start-$($MyDialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form
  
  Switch ($MyControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainGroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyDialogName)MainGroupBox.Controls[`$$($MyDialogName)MainGroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyDialogName)MainGroupBox.Controls[`$$($MyDialogName)MainGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyDialogName)MainPanel.Controls[`$$($MyDialogName)MainPanel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyDialogName)MainPanel.Controls[`$$($MyDialogName)MainPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainSplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Name = `"$($MyDialogName)MainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Text = `"$($MyDialogName)MainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }
  
  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmPanel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmLeftButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # OK Code Goes here")
  [Void]$StringBuilder.AppendLine("    [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyScriptName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmMidButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmMidButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Reset Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmRightButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmRightButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons
  
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnValue = @()")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$DialogResult, `$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function $($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  Write-Verbose -Message "Exit Function Build-MyFCGBasicDialog"
}
#endregion function Build-MyFCGBasicDialog

#region function Build-MyFCGAdvDialog
function Build-MyFCGAdvDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .PARAMETER MyControlType
    .EXAMPLE
      Build-MyFCGAdvDialog -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGAdvDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region MyDialogName Dialog Result Class
  $MyDialogName = $MyDialogName.Replace("-", "")
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyDialogName Dialog Result Class
  
  #region function MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function $($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupBoxText")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($MyDialogName) -DialogTitle `$DialogTitle -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($MyDialogName) -DialogTitle `$DialogTitle")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function $($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)Form.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Load({ Start-$($MyDialogName)FormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Move({ Start-$($MyDialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form
  
  Switch ($MyControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainGroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyDialogName)MainGroupBox.Controls[`$$($MyDialogName)MainGroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyDialogName)MainGroupBox.Controls[`$$($MyDialogName)MainGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyDialogName)MainPanel.Controls[`$$($MyDialogName)MainPanel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyDialogName)MainPanel.Controls[`$$($MyDialogName)MainPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainSplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Name = `"$($MyDialogName)MainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainSplitContainer.Text = `"$($MyDialogName)MainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }
  
  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($MyDialogName)Buttons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  #[Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # OK Code Goes here")
  [Void]$StringBuilder.AppendLine("    [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyScriptName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 1) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons
  
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$$($MyDialogName)Form.Tag -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function $($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  Write-Verbose -Message "Exit Function Build-MyFCGAdvDialog"
}
#endregion function Build-MyFCGAdvDialog


# Show Text/RichText Status Message Dialogs
#region function Build-MyFCGRichTextStatus
Function Build-MyFCGRichTextStatus ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGRichTextStatus -MyScriptName $MyScriptName -MyDialogName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGRichTextStatus"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region $($MyDialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($MyDialogName) Result Class
  
  #region Function Write-RichTextBox
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoNewLine")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `$Text")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NewLine`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$MyStatusDialogMainRichTextBox,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NewLine`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NoNewLine`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoNewLine")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionStart = `$RichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionAlignment = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionFont = `$Font")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$TextFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`$Text)")
  [Void]$StringBuilder.AppendLine("  if (-not `$NoNewLine.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Active()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBox
  
  #region Function Write-RichTextBoxValue
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Property Value to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Property Value to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `$Text -Value `$Value")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$MyStatusDialogMainRichTextBox,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ValueFore = [MyConfig]::Colors.TextInfo,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [AllowEmptyString()]")
  [Void]$StringBuilder.AppendLine("    [AllowNull()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionStart = `$RichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionFont = `$Font")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$TextFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"`$(`$Text)`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`": `")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$ValueFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"`$(`$Value)`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Active()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBoxValue
  
  #region Function Write-RichTextBoxError
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Error Message to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Error Message to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxError -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$$($MyDialogName)MainRichTextBox")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"ERROR`" -TextFore ([MyConfig]::Colors.TextBad) -Value (`$(`$Error[0].Exception.Message)) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"CODE`" -TextFore ([MyConfig]::Colors.TextBad) -Value ((`$Error[0].InvocationInfo.Line).Trim()) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"LINE`" -TextFore ([MyConfig]::Colors.TextBad) -Value (`$Error[0].InvocationInfo.ScriptLineNumber) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBoxError
  
  #region function Show-RichTextStatus
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoCloseWait")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = {},")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable = @{},")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoClose,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 60000)]")
  [Void]$StringBuilder.AppendLine("    [int]`$AutoCloseWait = 10")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$Show-$($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = `$$($MyDialogName)Form.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Back }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::End }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassHashTable)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyDialogName)MainRichTextBox, `$HashTable")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyDialogName)MainRichTextBox")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$$($MyDialogName)Buttons)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      1")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      2")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      3")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (((`$DialogResult -eq `$ButtonDefault) -and `$AutoClose.IsPresent) -or (`$$($MyDialogName)Buttons -eq 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("      while (`$StopWatch.Elapsed.TotalMilliseconds -le `$AutoCloseWait)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"`$$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainRichTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.DetectUrls = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Name = `"$($MyDialogName)MainRichTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Rtf = `"`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainRichTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainRichTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainRichTextBoxMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyDialogName)Main RichTextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyDialogName)Main RichTextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The RichTextBox Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the RichTextBox MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainRichTextBoxMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.RichTextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($MyDialogName)MainRichTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRichTextBox.SelectionStart = `$$($MyDialogName)MainRichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($MyDialogName)MainRichTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainRichTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.add_MouseDown({ Start-$($MyDialogName)MainRichTextBoxMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($MyDialogName)Buttons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Text = `"`$$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 1) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$Show-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PassHashTable = `$PSBoundParameters.ContainsKey(`"HashTable`")")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-RichTextStatus
  
  #region function Sample-RichTextStatus
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Sample-RichTextStatus")
  [Void]$StringBuilder.AppendLine("function Sample-RichTextStatus()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-RichTextStatus -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-RichTextStatus -RichTextBox `$RichTextBox -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Sample-RichTextStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Passed Values")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$HashTable.ContainsKey(`"ShowHeader`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$HashTable.ShowHeader")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # **************")
  [Void]$StringBuilder.AppendLine("  # RFT Formatting")
  [Void]$StringBuilder.AppendLine("  # **************")
  [Void]$StringBuilder.AppendLine("  # Permanate till Changed")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  # Resets After AppendText")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionCharOffset = 0")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionFont = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  # **********************")
  [Void]$StringBuilder.AppendLine("  # Update RichTextBox Text...")
  [Void]$StringBuilder.AppendLine("  # **********************")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -Text `"`$(`$RichTextBox.Parent.Parent.Text)`" -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Initialize StopWatch")
  [Void]$StringBuilder.AppendLine("    `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine(" }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Started Proccess List Data Here...`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel foreach (`$Key in `$HashTable.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Found Key`" -TextFore ([MyConfig]::Colors.TextInfo) -Value `"`$(`$Key) = `$(`$HashTable[`$Key])`" -ValueFore ([MyConfig]::Colors.TextGood) -NoNewLine")
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel For (`$Count = 1; `$Count -le 19; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"`$(`"X`" * `$Count)`" -TextFore ([MyConfig]::Colors.TextInfo) -Value `"Green`" -ValueFore ([MyConfig]::Colors.TextGood)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Pause Before Deployment")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Tag.Pause = `$True")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("  `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Pause to Review Status`" -Font ([MyConfig]::Font.Bold) -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Press 'Pause' to Continue with the Current Deployment`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"or Ctrl-Alt-Backspace to Exit / Cancel`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.Parent.Parent.Tag.Pause = `$False")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Display an Error Information")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Show Fake Error Message`"-TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Throw `"This is a Fake Error!`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write Error to Status Dialog")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBoxError -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Final Status Message")
  [Void]$StringBuilder.AppendLine("    Switch (`$DisplayResult)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"OK`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Success Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Cancel`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Error Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Abort`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Abort Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Final Status Message")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -TextFore `$FinalClr -Text `$FinalMsg")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Alignment `"Center`" -Text (`$StopWatch.Elapsed.ToString())")
  [Void]$StringBuilder.AppendLine("    `$StopWatch.Stop()")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return DialogResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Sample-RichTextStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Sample-RichTextStatus")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$HashTable = @{`"ShowHeader`" = `$True}")
  [Void]$StringBuilder.AppendLine("#`$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Sample-RichTextStatus -RichTextBox `$RichTextBox -HashTable `$HashTable }")
  [Void]$StringBuilder.AppendLine("#`$DialogResult = Show-RichTextStatus -ScriptBlock `$ScriptBlock -DialogTitle `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Sample-RichTextStatus
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  Write-Verbose -Message "Exit Function Build-MyFCGRichTextStatus"
}
#endregion function Build-MyFCGRichTextStatus

#region function Build-MyFCGTextBoxStatus
Function Build-MyFCGTextBoxStatus ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGTextBoxStatus -MyScriptName $MyScriptName -MyDialogName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGTextBoxStatus"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region $($MyDialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($MyDialogName) Result Class
  
  #region Function Write-TextBox
  [Void]$StringBuilder.AppendLine("#region Function Write-TextBox")
  [Void]$StringBuilder.AppendLine("Function Write-TextBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write to TextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write to TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoNewLine")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextFore `$TextFore -Text `$Text")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextBox]`$TextBox = `$$($MyDialogName)MainTextBox,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoNewLine")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$TextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$TextBox.SelectionStart = `$TextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$TextBox.AppendText(`"`$(`$Text)`")")
  [Void]$StringBuilder.AppendLine("  If (-not `$NoNewLine.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Parent.Parent.Active()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-TextBox")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-TextBox
  
  #region Function Write-TextBoxValue
  [Void]$StringBuilder.AppendLine("#region Function Write-TextBoxValue")
  [Void]$StringBuilder.AppendLine("Function Write-TextBoxValue")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Property Value to TextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Property Value to TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-TextBoxValue -TextBox `$TextBox -Text `$Text -Value `$Value")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextBox]`$TextBox = `$$($MyDialogName)MainTextBox,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [AllowEmptyString()]")
  [Void]$StringBuilder.AppendLine("    [AllowNull()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$TextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$TextBox.SelectionStart = `$TextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$TextBox.AppendText(`"`$(`$Text)`")")
  [Void]$StringBuilder.AppendLine("  `$TextBox.AppendText(`": `")")
  [Void]$StringBuilder.AppendLine("  `$TextBox.AppendText(`"`$(`$Value)`")")
  [Void]$StringBuilder.AppendLine("  `$TextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  `$TextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Parent.Parent.Active()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-TextBoxValue")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-TextBoxValue
  
  #region Function Write-TextBoxError
  [Void]$StringBuilder.AppendLine("#region Function Write-TextBoxError")
  [Void]$StringBuilder.AppendLine("Function Write-TextBoxError")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Error Message to TextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Error Message to TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-TextBoxError -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextBox]`$TextBox = `$$($MyDialogName)MainTextBox")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-TextBoxValue -TextBox `$TextBox -Text `"ERROR`" -Value (`$(`$Error[0].Exception.Message))")
  [Void]$StringBuilder.AppendLine("  Write-TextBoxValue -TextBox `$TextBox -Text `"CODE`" -Value ((`$Error[0].InvocationInfo.Line).Trim())")
  [Void]$StringBuilder.AppendLine("  Write-TextBoxValue -TextBox `$TextBox -Text `"LINE`" -Value (`$Error[0].InvocationInfo.ScriptLineNumber)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-TextBoxError")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-TextBoxError
  
  #region function Show-TextBoxStatus
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoCloseWait")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = {")
  [Void]$StringBuilder.AppendLine("    },")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable = @{")
  [Void]$StringBuilder.AppendLine("    },")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoClose,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 60000)]")
  [Void]$StringBuilder.AppendLine("    [int]`$AutoCloseWait = 10")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$Show-$($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = `$$($MyDialogName)Form.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = @{")
  [Void]$StringBuilder.AppendLine("    `"Cancel`" = `$False; `"Pause`" = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Back }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::End }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$PassHashTable)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyDialogName)MainTextBox, `$HashTable")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyDialogName)MainTextBox")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$$($MyDialogName)Buttons)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      1")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      2")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      3")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (((`$DialogResult -eq `$ButtonDefault) -and `$AutoClose.IsPresent) -or (`$$($MyDialogName)Buttons -eq 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("      While (`$StopWatch.Elapsed.TotalMilliseconds -le `$AutoCloseWait)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"`$$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Name = `"$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainTextBoxMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainTextBoxMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.SelectionStart = `$$($MyDialogName)MainTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_MouseDown({ Start-$($MyDialogName)MainTextBoxMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  If (`$$($MyDialogName)Buttons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Text = `"`$$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 1) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$Show-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PassHashTable = `$PSBoundParameters.ContainsKey(`"HashTable`")")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-TextBoxStatus
  
  #region function Sample-TextBoxStatus
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Sample-TextBoxStatus")
  [Void]$StringBuilder.AppendLine("Function Sample-TextBoxStatus()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-TextBoxStatus -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-TextBoxStatus -TextBox `$TextBox -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextBox]`$TextBox,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Sample-TextBoxStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Passed Values")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$HashTable.ContainsKey(`"ShowHeader`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$HashTable.ShowHeader")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox -Text `"`$(`$TextBox.Parent.Parent.Text)`"")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox -Text `"Started Proccess List Data Here...`"")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel ForEach (`$Key In `$HashTable.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox -Text `"Found List Item: `$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$TextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("        Write-TextBox -TextBox `$TextBox -Text `"Exiting - User Canceled`"")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$TextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$TextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$TextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        While (`$TextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$TextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel For (`$Count = 1; `$Count -le 19; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox -Text `"`$(`"X`" * `$Count)`" -NoNewLine")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox -Text `" - `" -NoNewLine")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox -Text `"Green`" -NoNewLine")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$TextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("        Write-TextBox -TextBox `$TextBox -Text `"Exiting - User Canceled`"")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$TextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$TextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$TextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        While (`$TextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$TextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Pause Before Deployment")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Parent.Parent.Tag.Pause = `$True")
  [Void]$StringBuilder.AppendLine("  `$TmpTitle = `$TextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox -Text `"Pause to Review Status`"")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox -Text `"Press 'Pause' to Continue with the Current Deployment`"")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox -Text `"or Ctrl-Alt-Backspace to Exit / Cancel`"")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  While (`$TextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$TextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TextBox.Parent.Parent.Tag.Pause = `$False")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("      Write-TextBox -TextBox `$TextBox -Text `"Exiting - User Canceled`"")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Display an Error Information")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox -Text `"Show Fake Error Message`"")
  [Void]$StringBuilder.AppendLine("  Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Throw `"This is a Fake Error!`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write Error to Status Dialog")
  [Void]$StringBuilder.AppendLine("    Write-TextBoxError -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Final Status Message")
  [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch (`$DisplayResult)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"OK`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Success Message Here!`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Cancel`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Error Message Here!`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Abort`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Abort Message Here!`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Final Status Message")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox -Text `$FinalMsg")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox -Text (`$StopWatch.Elapsed.ToString())")
  [Void]$StringBuilder.AppendLine("    `$StopWatch.Stop()")
  [Void]$StringBuilder.AppendLine("    Write-TextBox -TextBox `$TextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return DialogResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Sample-TextBoxStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Sample-TextBoxStatus")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$HashTable = @{`"ShowHeader`" = `$True}")
  [Void]$StringBuilder.AppendLine("#`$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Sample-TextBoxStatus -RichTextBox `$RichTextBox -HashTable `$HashTable }")
  [Void]$StringBuilder.AppendLine("#`$DialogResult = Show-TextBoxStatus -ScriptBlock `$ScriptBlock -DialogTitle `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Sample-TextBoxStatus
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  Write-Verbose -Message "Exit Function Build-MyFCGTextBoxStatus"
}
#endregion function Build-MyFCGTextBoxStatus

# Show Loading Progress Bar
#region function Build-MyFCGLoadProgressBar
Function Build-MyFCGLoadProgressBar ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGLoadProgressBar -MyScriptName $MyScriptName -MyDialogName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGLoadProgressBar"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region ShowLoadProgress Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion ShowLoadProgress Result Class
  
  #region function Show-LoadProgress
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle -ScriptBlock `$ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { },")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = `$$($MyDialogName)Form.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Back }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::End }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyDialogName)MainProgressBar, `$$($MyDialogName)ProgressLabel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"`$$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MessageLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.Name = `"$($MyDialogName)MessageLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MessageLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MessageLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MessageLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MessageLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)ProgressLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)ProgressLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.Name = `"$($MyDialogName)ProgressLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ProgressLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)ProgressLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainProgressBar)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainProgressBar.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainProgressBar.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)ProgressLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.Name = `"$($MyDialogName)MainProgressBar`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainProgressBar.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainProgressBar.Value = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainProgressBar.Visible = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainProgressBar.Width = (`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainPanel.ClientSize.Width, (`$$($MyDialogName)MainProgressBar.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, `$$($MyDialogName)MainPanel.ClientSize.Height)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$Show-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-LoadProgress
  
  #region function Sample-LoadProgressBar
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Sample-LoadProgressBar")
  [Void]$StringBuilder.AppendLine("Function Sample-LoadProgressBar()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProgressBar")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Label")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-LoadProgressBar -ProgressBar `$ProgressBar -Label `$Label")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ProgressBar]`$ProgressBar,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Label]`$Label")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Sample-LoadProgressBar`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Month Names")
  [Void]$StringBuilder.AppendLine("  `$MonthNames = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Starting ProgresBar Values")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Blocks")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Maximum = `$MonthNames.Count")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Minimum = 1")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Step = 1")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Value = 1")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  :UserCancel ForEach (`$MonthName In `$MonthNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Progress Information")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Label.Text = `$MonthName")
  [Void]$StringBuilder.AppendLine("    `$Label.Refresh()")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Month = `$(`$MonthName) - `$(`$ProgressBar.Value)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$ProgressBar.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("      Break UserCancel")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("    If (`$ProgressBar.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpTitle = `$ProgressBar.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("      `$ProgressBar.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("      While (`$ProgressBar.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$ProgressBar.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$ProgressBar.Increment(1)")
  [Void]$StringBuilder.AppendLine("    `$ProgressBar.Refresh()")
  [Void]$StringBuilder.AppendLine("    Start-Sleep -Milliseconds 1000")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return DialogResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Sample-LoadProgressBar`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Sample-LoadProgressBar")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]`$ProgressBar, [System.Windows.Forms.Label]`$Label) Sample-LoadProgressBar -ProgressBar `$ProgressBar -Label `$Label }")
  [Void]$StringBuilder.AppendLine("#`$DialogResult = Show-$($MyDialogName) -ScriptBlock `$ScriptBlock -DialogTitle `"Initializing `$([MyConfig]::ScriptName)`"")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Sample-LoadProgressBar
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  Write-Verbose -Message "Exit Function Build-MyFCGLoadProgressBar"
}
#endregion function Build-MyFCGLoadProgressBar

# Show Text Change Log Dialog
#region function Build-MyFCGShowChangeLog
Function Build-MyFCGShowChangeLog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptShow$($MyDialogName) -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowChangeLog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowCancel")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"Change Log - `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ChangeText,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("     .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("     .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("     .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("     .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.AppendText(`$ChangeText)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.SelectionStart = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Font = [System.Drawing.Font]::New(`"Courier New`", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Name = `"$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `"&Ok`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** Show-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGShowChangeLog"
}
#endregion function Build-MyFCGShowChangeLog

# Show Alert Message Dialog
#region function Build-MyFCGShowAlertMessage
Function Build-MyFCGShowAlertMessage ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGShowAlertMessage -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowAlertMessage"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MsgType")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Good`", `"Warn`", `"Error`", `"Info`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$MsgType = `"Info`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)Form.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)Form.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainTitleLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch (`$MsgType)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTitleLabel.BackColor = [MyConfig]::Colors.TextInfo")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTitleLabel.BackColor = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warn`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTitleLabel.BackColor = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTitleLabel.BackColor = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.ForeColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Name = `"$($MyDialogName)MainTitleLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)MainTitleLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTitleLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainMessageLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainTitleLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Name = `"$($MyDialogName)MainMessageLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Size = [System.Drawing.Size]::New(`$$($MyDialogName)MainTitleLabel.Width, (`$$($MyDialogName)MainTitleLabel.Width - (`$$($MyDialogName)MainMessageLabel.Top * 3)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainMessageLabel.Text = `$Message")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainPanel.ClientSize.Width, (`$$($MyDialogName)MainMessageLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$$($MyDialogName)MainPanel.Bottom)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"`$$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `"OK`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainPanel.ClientSize.Width, ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$$($MyDialogName)Form.ClientSize.Height - (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainMessageLabel.Bottom + ([MyConfig]::FormSpacer * 2)))))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, `$$($MyDialogName)BtmPanel.Bottom)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$Show-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGShowAlertMessage"
}
#endregion function Build-MyFCGShowAlertMessage

# Get User Response Dialog
#region function Build-MyFCGGetUserResponse
Function Build-MyFCGGetUserResponse ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGGetUserResponse -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetUserResponse"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon = [System.Drawing.SystemIcons]::Information,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"`$$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainPictureBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.Name = `"$($MyDialogName)MainPictureBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.Size = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New((`$$($MyDialogName)MainPictureBox.Right + [MyConfig]::FormSpacer), `$$($MyDialogName)MainPictureBox.Top)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - (`$$($MyDialogName)MainLabel.Left + ([MyConfig]::FormSpacer * 3))), `$$($MyDialogName)MainPanel.ClientSize.Width)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - (`$$($MyDialogName)MainLabel.Left + ([MyConfig]::FormSpacer * 3))), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"`$$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyDialogName)Buttons -eq 1) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyDialogName)Buttons -eq 2) -or (`$$($MyDialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyDialogName)BtmPanel.Controls[`$$($MyDialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$$($MyDialogName)Form.ClientSize.Height - (`$$($MyDialogName)MainPanel.ClientSize.Height - ([Math]::Max(`$$($MyDialogName)MainPictureBox.Bottom, `$$($MyDialogName)MainLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$Get-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGGetUserResponse"
}
#endregion function Build-MyFCGGetUserResponse

# Get User Inout Dialog
#region function Build-MyFCGGetUserTextInput
Function Build-MyFCGGetUserTextInput ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGGetUserTextInput -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetUserTextInput"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String[]]`$Items")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [String[]]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Show-$(v) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HintText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidChars")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidOutput")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Single`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$HintText = `"Enter Value Here`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_,;]`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidOutput = `".+`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxLength = [Int]::MaxValue,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 18,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.DeselectAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainGroupBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)MainTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.MaxLength = `$MaxLength")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Multiline = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.Name = `"$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("    If (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Lines = `$Items")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Lines = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainGroupBox.ClientSize.Height - (`$$($MyDialogName)MainTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None")
  [Void]$StringBuilder.AppendLine("    if (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Text = `$Items[0]")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items[0] } ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `"`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)MainTextBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainTextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainTextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_GotFocus({ Start-$($MyDialogName)MainTextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_KeyDown({ Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainTextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)MainTextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_KeyPress({Start-$($MyDialogName)MainTextBoxKeyPress -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainTextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainTextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_KeyUp({ Start-$($MyDialogName)MainTextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)MainTextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainTextBox.add_LostFocus({ Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$$($MyDialogName)MainTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ((-not `$$($MyDialogName)MainTextBox.Tag.HintEnabled) -and (`"`$(`$$($MyDialogName)MainTextBox.Text.Trim())`".Length -gt 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ChkOutput = `$True")
  [Void]$StringBuilder.AppendLine("      (`$$($MyDialogName)MainTextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { `$ChkOutput = (`$ChkOutput -and `$PSItem -match `$ValidOutput) }")
  [Void]$StringBuilder.AppendLine("      If (`$ChkOutput)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Lines = `$$($MyDialogName)MainTextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainTextBox.Text = `$$($MyDialogName)MainTextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Tag.HintEnabled = (`$$($MyDialogName)MainTextBox.TextLength -gt 0)")
  [Void]$StringBuilder.AppendLine("    Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$$($MyDialogName)MainTextBox -EventArg `"LostFocus`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** Get-$($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  If (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, ((`$$($MyDialogName)MainTextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyDialogName)MainTextBox.Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGGetUserTextInput"
}
#endregion function Build-MyFCGGetUserTextInput

# Show Script Information
#region function Build-MyFCGShowScriptInfo
Function Build-MyFCGShowScriptInfo ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGShowScriptInfo -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("WebBrowser", "RichTextBox")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowScriptInfo"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Info Topics
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Dialog Info Topics")
  [Void]$StringBuilder.AppendLine("")
  If ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("# Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmySZ15JUX5KaXJJZn4e0AwjiKw+UBvMhKQi")
    [Void]$StringBuilder.AppendLine("KCskI7NYAYh8KxUwtEKcALcYzgQaCfKOggIAU+uXZNoAAAA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoEhUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQAohQVwzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoERUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQDX1agEzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoExUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQC95xyezwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# Web Site / Pages")
    [Void]$StringBuilder.AppendLine("#`$InfoIntro = `"http://www.MyDomain.Local/Help/Intro,html`"")
    [Void]$StringBuilder.AppendLine("#`$Info01 = `"http://www.MyDomain.Local/Help/Topic01.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info02 = `"http://www.MyDomain.Local/Help/Topic02.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info03 = `"http://www.MyDomain.Local/Help/Topic03.html`"")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc")
    [Void]$StringBuilder.AppendLine("ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc")
    [Void]$StringBuilder.AppendLine("ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed RTF")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Topics = [Ordered]@{ }")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Content = [Ordered]@{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Topics.Add(`"InfoIntro`", `"Info Introduction`")")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Content.Add(`"InfoIntro`", `$InfoIntro)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Topics.Add(`"Info01`", `"Info Topic 01`")")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Content.Add(`"Info01`", `$Info01)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Topics.Add(`"Info02`", `"Info Topic 02`")")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Content.Add(`"Info02`", `$Info02)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Topics.Add(`"Info03`", `"Info Topic 03`")")
  [Void]$StringBuilder.AppendLine("`$$($MyDialogName)Content.Add(`"Info03`", `$Info03)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$InfoIntro = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info01 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info02 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info03 = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Dialog Info Topics")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Info Topics
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Show-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WindowsTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InfoTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DefInfoTopic")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$WindowTitle = `"`$([MyConfig]::ScriptName) Info`",")
  [Void]$StringBuilder.AppendLine("    [String]`$InfoTitle = `" << $($MyScriptName) Info Topics >> `",")
  [Void]$StringBuilder.AppendLine("    [String]`$DefInfoTopic = `"InfoIntro`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 24")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Move({ Start-$($MyDialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormResize ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormResize")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Resize Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Resize Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormResize -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Resize Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Resize Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormResize ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Resize({ Start-$($MyDialogName)FormResize -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Start-$($MyDialogName)LeftToolStripItemClick -Sender (`$$($MyDialogName)LeftMenuStrip.Items[`$DefInfoTopic]) -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  If ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainWebBrowser)")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.AllowWebBrowserDrop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.DocumentText = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.IsWebBrowserContextMenuEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.Name = `"$($MyDialogName)MainWebBrowser`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.ScriptErrorsSuppressed = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainWebBrowser.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainWebBrowser.WebBrowserShortcutsEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainRichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Name = `"$($MyDialogName)MainRichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Rtf = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyDialogName)MainPanel.ClientSize.Height - (`$$($MyDialogName)MainRichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainRichTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Left MenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)LeftMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MainMenuStrip = `$$($MyDialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.ImageList = `$$($MyScriptName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.Name = `"$($MyDialogName)LeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)LeftMenuStrip.Text = `"$($MyDialogName)LeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)LeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)LeftToolStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)Left ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)Left ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)LeftToolStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)LeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)BtmStatusStrip.Items[`"Status`"].Text = `"Showing: `$(`$Sender.Text)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Exit`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Default")
  [Void]$StringBuilder.AppendLine("      {")
  If ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainWebBrowser.DocumentText = `$Null")
    [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainWebBrowser.DocumentText = (Decode-MyData -Data `$$($MyDialogName)Content[`$Sender.Name] -AsString)")
    [Void]$StringBuilder.AppendLine("        #`$$($MyDialogName)MainWebBrowser.Navigate((`$$($MyDialogName)Content[`$Sender.Name]))")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainRichTextBox.Clear()")
    [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainRichTextBox.Rtf = (Decode-MyData -Data `$$($MyDialogName)Content[`$Sender.Name] -AsString)")
  }
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)LeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)LeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyDialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($MyDialogName)LeftMenuStrip -Text `$InfoTitle -Name `"Info Topics`" -Tag `"Info Topics`" -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyDialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  forEach (`$Key in `$$($MyDialogName)Topics.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (New-MenuItem -Menu `$$($MyDialogName)LeftMenuStrip -Text (`$$($MyDialogName)Topics[`$Key]) -Name `$Key -Tag `$Key -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"HelpIcon`" -PassThru).add_Click({ Start-$($MyDialogName)LeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyDialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($MyDialogName)LeftMenuStrip -Text `"E&xit`" -Name `"Exit`" -Tag `"Exit`" -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"ExitIcon`" -PassThru).add_Click({ Start-$($MyDialogName)LeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyDialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)TopPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.Dock = [System.Windows.Forms.DockStyle]::Top")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.Name = `"$($MyDialogName)TopPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.Text = `"$($MyDialogName)TopPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)TopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.Controls.Add(`$$($MyDialogName)TopLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.BackColor = [MyConfig]::Colors.TitleBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.ForeColor = [MyConfig]::Colors.TitleFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Name = `"$($MyDialogName)TopLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Text = `$WindowTitle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)TopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)TopLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)TopPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)TopPanel.ClientSize.Width, (`$$($MyDialogName)TopLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)TopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm StatusStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmStatusStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.ImageList = `$$($MyScriptName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.Name = `"$($MyDialogName)BtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmStatusStrip.Text = `"$($MyDialogName)BtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($MyDialogName)BtmStatusStrip -Text `"Status`" -Name `"Status`" -Tag `"Status`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGShowScriptInfo"
}
#endregion function Build-MyFCGShowScriptInfo

# Select / Browse Icon Files
#region function Build-MyFCGSelectIconFile
Function Build-MyFCGSelectIconFile ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGSelectIconFile -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGSelectIconFile"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region ******** $($MyDialogName) Result Class ********")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$IconPath")
  [Void]$StringBuilder.AppendLine("  [Int[]]`$IconIndex")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Object]`$DialogResult, [String]`$IconPath, [Int[]]`$IconIndex)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.IconPath = `$IconPath")
  [Void]$StringBuilder.AppendLine("    `$This.IconIndex = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyDialogName) Result Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Select-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FileMessage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconMessage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconPath")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Select-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$FileMessage = `"Selected Icon File / Library`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconMessage = `"File / Library Icons...`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconPath = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$IconIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(35, 60)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 38,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(25, 35)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 25,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)FormComponents = [System.ComponentModel.Container]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) ImageList")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)ImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ImageList = [System.Windows.Forms.ImageList]::New(`$$($MyDialogName)FormComponents)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ImageList.ImageSize = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)ImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Move({ Start-$($MyDialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconPath = `"`$(`$$($MyDialogName)MainFileTextBox.Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = @(`$$($MyDialogName)MainFileTextBox.Tag)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainIconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("        For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)ImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("          [Void](`$$($MyDialogName)MainIconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainIconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$$($MyDialogName)MainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$TempIconIndex | ForEach-Object -Process { `$$($MyDialogName)MainIconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$$($MyDialogName)MainIconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("            `$$($MyDialogName)MainIconListView.Select()")
  [Void]$StringBuilder.AppendLine("            `$$($MyDialogName)MainIconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainFileLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.Name = `"$($MyDialogName)MainFileLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.Text = `$FileMessage")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainFileButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.Name = `"$($MyDialogName)MainFileButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.Text = `"  &Browse...  `"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - (`$$($MyDialogName)MainFileButton.Width + [MyConfig]::FormSpacer)), (`$$($MyDialogName)MainFileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainFileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainFileButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)MainFile Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)MainFile Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainFileButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)MainFileButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.Title = `"Extact Icons`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.Filter = `"All Icon Files|*.ico;*.exe;*.dll|Icon Files|*.ico|EXE Files|*.exe|DLL Files|*.dll|All Files|*.*`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.FilterIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.FileName = `"`"")
  [Void]$StringBuilder.AppendLine("    If (`$$($MyScriptName)OpenFileDialog.ShowDialog(`$$($MyScriptName)Form) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)ImageList.Images.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainIconListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$TempIconPath = `"`$(`$$($MyScriptName)OpenFileDialog.FileName)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainIconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)ImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("        [Void](`$$($MyDialogName)MainIconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainIconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainFileTextBox.Text = `$TempIconPath")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainFileTextBox.Tag = @(-1)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)MainFileButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainFileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileButton.add_Click({ Start-$($MyDialogName)MainFileButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainFileTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainFileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Name = `"$($MyDialogName)MainFileTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Size = [System.Drawing.Size]::New(((`$$($MyDialogName)MainFileButton.Left - [MyConfig]::FormSpacer) - `$$($MyDialogName)MainFileTextBox.Left), `$$($MyDialogName)MainFileButton.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Text = `$IconPath")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.Tag = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainFileTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainIconLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainFileTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.Name = `"$($MyDialogName)MainIconLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.Text = `$IconMessage")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainIconListView)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.LabelWrap = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.LargeImageList = `$$($MyDialogName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainIconLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Name = `"$($MyDialogName)MainIconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ((`$$($MyDialogName)MainPanel.ClientSize.Height - [MyConfig]::FormSpacer) - `$$($MyDialogName)MainIconListView.Top))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Sorting = [System.Windows.Forms.SortOrder]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.Text = `"$($MyDialogName)MainIconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.View = [System.Windows.Forms.View]::LargeIcon")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainIconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainIconListViewSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($MyDialogName)MainIcon ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($MyDialogName)MainIcon ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ListView SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)MainIconListViewSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$$($MyDialogName)MainIconListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$$($MyDialogName)MainIconListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainIconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainIconListView.add_SelectedIndexChanged({ Start-$($MyDialogName)MainIconListViewSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($MyDialogName)MainIconListView.CheckedIndices.Count -and `$$($MyDialogName)MainIconListView.CheckBoxes) -or (`$$($MyDialogName)MainIconListView.SelectedIndices.Count -and (-not `$$($MyDialogName)MainIconListView.CheckBoxes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"No Icons Selected`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = `$$($MyDialogName)MainFileTextBox.Tag")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyDialogName)MainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainIconListView.CheckedIndices | ForEach-Object -Process { `$$($MyDialogName)MainIconListView.Items[`$PSItem].Checked = `$False }")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconIndex | ForEach-Object -Process { `$$($MyDialogName)MainIconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainIconListView.SelectedIndices.Clear()")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainIconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainIconListView.Select()")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainIconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 5")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyDialogName)MainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyDialogName)]::New(`$DialogResult, `$$($MyDialogName)MainFileTextBox.Text, `$$($MyDialogName)MainIconListView.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyDialogName)]::New(`$DialogResult, `$$($MyDialogName)MainFileTextBox.Text, `$$($MyDialogName)MainIconListView.SelectedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)FormComponents.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGSelectIconFile"
}
#endregion function Build-MyFCGSelectIconFile

# Get Multi Text Input
#region function Build-MyFCGMultiTextInput
Function Build-MyFCGMultiTextInput ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGMultiTextInput -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGMultiTextInput"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Specialized.OrderedDictionary]`$OrderedItems")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [System.Collections.Specialized.OrderedDictionary]`$OrderedItems)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.OrderedItems = `$OrderedItems")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReturnTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidCars")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllRequired")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText,")
  [Void]$StringBuilder.AppendLine("    [String]`$ReturnTitle,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_]`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllRequired")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Tag = `$AllRequired.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"SearchTextMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.Name = `"$($MyDialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.Text = `$ReturnTitle")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.Width = (`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TmpLabelWidth = 0")
  [Void]$StringBuilder.AppendLine("  `$Count = 0")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)GroupBox.Controls.Add(`$$($MyDialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + ((`$$($MyDialogName)Label.PreferredHeight + [MyConfig]::FormSpacer) * `$Count)))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.Name = `"`$(`$Key)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.Text = `"`$(`$Key):`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpLabelWidth = [Math]::Max(`$TmpLabelWidth, `$$($MyDialogName)Label.Width)")
  [Void]$StringBuilder.AppendLine("    `$Count += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)TextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)TextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)TextBox.add_GotFocus({ Start-$($MyDialogName)TextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)BtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)TextBox.add_KeyDown({ Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)TextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)TextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)TextBox.add_KeyPress({ Start-$($MyDialogName)TextBoxKeyPress -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)TextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)TextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)TextBox.add_KeyUp({ Start-$($MyDialogName)TextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)TextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyDialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)TextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyDialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)TextBox.add_LostFocus({ Start-$($MyDialogName)TextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel = `$$($MyDialogName)GroupBox.Controls[`"`$(`$Key)Label`"]")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.Size = [System.Drawing.Size]::New(`$TmpLabelWidth, `$TmpLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)GroupBox.Controls.Add(`$$($MyDialogName)TextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Location = [System.Drawing.Size]::New((`$TmpLabel.Right + [MyConfig]::FormSpacer), `$TmpLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.MaxLength = 25")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Name = `"`$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Text = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Tag = @{ `"HintText`" = `"Enter Value for '`$(`$Key)'`"; `"HintEnabled`" = (`$$($MyDialogName)TextBox.TextLength -eq 0); `"Value`" = `$OrderedItems[`$Key] }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)GroupBox.ClientSize.Width - (`$TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), `$TmpLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.add_GotFocus({ Start-$($MyDialogName)TextBoxGotFocus -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.add_KeyDown({ Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.add_KeyPress({Start-$($MyDialogName)TextBoxKeyPress -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.add_KeyUp({ Start-$($MyDialogName)TextBoxKeyUp -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)TextBox.add_LostFocus({ Start-$($MyDialogName)TextBoxLostFocus -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    Start-$($MyDialogName)TextBoxLostFocus -Sender `$$($MyDialogName)TextBox -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)GroupBox.ClientSize.Width, ((`$$($MyDialogName)GroupBox.Controls[`$$($MyDialogName)GroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpValidCheck = `$$($MyDialogName)Form.Tag")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItemValue = `"`$(`$$($MyDialogName)GroupBox.Controls[`$Key].Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$ChkItemValue = (-not (([String]::IsNullOrEmpty(`$TmpItemValue) -or `$$($MyDialogName)GroupBox.Controls[`$Key].Tag.HintEnabled)))")
  [Void]$StringBuilder.AppendLine("      if (`$ChkItemValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$TmpItemValue")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      if (`$$($MyDialogName)Form.Tag)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -and `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -or `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$TmpValidCheck)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)GroupBox.Controls[`$Key].Text = `$$($MyDialogName)GroupBox.Controls[`$Key].Tag.Value")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)GroupBox.Controls[`$Key].Tag.HintEnabled = (`$$($MyDialogName)GroupBox.TextLength -eq 0)")
  [Void]$StringBuilder.AppendLine("      Start-$($MyDialogName)TextBoxLostFocus -Sender `$$($MyDialogName)GroupBox.Controls[`$Key] -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$OrderedItems)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGMultiTextInput"
}
#endregion function Build-MyFCGMultiTextInput

# Get / Select ComboBox Option
#region function Build-MyFCGSelectComboBox
Function Build-MyFCGSelectComboBox ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGSelectComboBox -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGSelectComboBox"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MySelectOptionDialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MySelectOptionDialog Result Class
  
  #region function Show-MySelectOptionDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectText = `"Select Value`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)ComboBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  [void]`$$($MyDialogName)ComboBox.Items.Add([PSCustomObject]@{ `$DisplayMember = `" - `$(`$SelectText) - `"; `$ValueMember = `" - `$(`$SelectText) - `"})")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Name = `"$($MyDialogName)ComboBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)ComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Text = `"$($MyDialogName)ComboBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ComboBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ComboBox.Tag = `$Items | Where-Object -FilterScript { `$PSItem -eq `$Selected}")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ComboBox.SelectedItem = `$$($MyDialogName)ComboBox.Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$$($MyDialogName)ComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyDialogName)ComboBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$$($MyDialogName)ComboBox.Tag))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)ComboBox.SelectedItem = `$$($MyDialogName)ComboBox.Tag")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyDialogName)ComboBox.SelectedItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MySelectOptionDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGSelectComboBox"
}
#endregion function Build-MyFCGSelectComboBox

# Get / Select ComboBox Filter
#region function Build-MyFCGGetComboFilter
Function Build-MyFCGGetComboFilter ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGGetComboFilter -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetComboFilter"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$Values")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [HashTable]`$Values)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Values = `$Values")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Properties")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Selected = @{},")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Properties`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = `$Properties")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = (`$Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainLabel.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)ComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)ComboBoxSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ComboBox Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ComboBox SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyDialogName)ComboBoxSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ComboBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$ValidItems = @(`$Items)")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItems = @(`$ValidItems | Where-Object -FilterScript { `$PSItem.(`$FilterOptionName) -like `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedItem.Value })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItemNames = @(`$ValidItems | Select-Object -ExpandProperty `$FilterOptionName -Unique)")
  [Void]$StringBuilder.AppendLine("      If (`$FilterOptionName -ne `$Sender.Name)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveList = @(`$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { (`$PSItem.Text -notin `$ValidItemNames) -and (`$PSItem.Value -ne `"*`") })")
  [Void]$StringBuilder.AppendLine("        ForEach (`$RemoveItem In `$RemoveList)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Items.Remove(`$RemoveItem)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$HaveItemNames = @(`$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)")
  [Void]$StringBuilder.AppendLine("      `$AddList = @(`$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Tag.Items | Where-Object -FilterScript { (`$PSItem.Text -in `$ValidItemNames) -and (`$PSItem.Text -notin `$HaveItemNames) })")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Items.AddRange(`$AddList)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)ComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainGroupBox.Controls.Add(`$TmpFilterComboBox)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DisplayMember = `"Text`"")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    [void]`$TmpFilterComboBox.Items.Add([PSCustomObject]@{ `"Text`" = `" - Return All `$(`$FilterOptionName) Values - `"; `"Value`" = `"*`" })")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Name = `$FilterOptionName")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$TmpFilterComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Sorted = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ValueMember = `"Value`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Items.AddRange(@(`$Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty(`$PSITem.(`$FilterOptionName)) } | Sort-Object -Property `$FilterOptionName -Unique | ForEach-Object -Process { [MyListItem]::New(`$PSITem.(`$FilterOptionName), `$PSITem.(`$FilterOptionName)) }))")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = @{ `"Items`" = @(`$TmpFilterComboBox.Items); `"SelectedItem`" = `$Null }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.add_SelectedIndexChanged({ Start-$($MyDialogName)ComboBoxSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # `$Sender")
  [Void]$StringBuilder.AppendLine("    If (`$Selected.ContainsKey(`$FilterOptionName))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItem = `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { `$PSItem.Value -eq `$Selected.(`$FilterOptionName) }")
  [Void]$StringBuilder.AppendLine("      If (-not [String]::IsNullOrEmpty(`$TmpItem.Text))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedItem = `$TmpItem")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Tag.SelectedItem = `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$ValidateClick = 0")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidateClick = `$ValidateClick + `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedIndex")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    If (`$ValidateClick -eq 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedItem = `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].Tag.SelectedItem")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpHash = [HashTable]::New()")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpHash.Add(`$FilterOptionName, `$$($MyDialogName)MainGroupBox.Controls[`$FilterOptionName].SelectedItem.Value)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$TmpHash)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, @{ })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGGetComboFilter"
}
#endregion function Build-MyFCGGetComboFilter

# Get / Select RadioButton Options
#region function Build-MyFCGRadioButtonChoice
Function Build-MyFCGRadioButtonChoice ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGRadioButtonChoice -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGRadioButtonChoice"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$Item = `$Null")
  [Void]$StringBuilder.AppendLine("  [Object]`$Object = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [String]`$Item, [Object]`$Object)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("    `$This.Object = `$Object")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected = `"`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Number = 0")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)MainRadioButton)")
  [Void]$StringBuilder.AppendLine("    #`$$($MyDialogName)MainRadioButton.AutoCheck = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Checked = (`$OrderedItems[`$Key] -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Name = `"RadioChoice`$(`$$($MyDialogName)Number)`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Tag = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainRadioButton.Text = `$Key")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$$($MyDialogName)MainRadioButton.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Number += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (@(`$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { (`$PSItem.GetType().Name -eq `"RadioButton`") -and `$PSItem.Checked }).Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$RadioButton In @(`$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" }))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RadioButton.Checked = (`$RadioButton.Tag -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$TESTForm)")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempItem = `$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" -and `$PSItem.Checked } | Select-Object -Property Text, Tag")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$True, `$DialogResult, (`$TempItem.Text), (`$TempItem.Tag))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$False, `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGRadioButtonChoice"
}
#endregion function Build-MyFCGRadioButtonChoice

# Get / Select CheckBox Options
#region function Build-MyFCGCheckBoxChoice
Function Build-MyFCGCheckBoxChoice ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGCheckBoxChoice -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGCheckBoxChoice"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$Item = `$Null")
  [Void]$StringBuilder.AppendLine("  [Object]`$Object = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [String]`$Item, [Object]`$Object)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("    `$This.Object = `$Object")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Get-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected = `"`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyDialogName)MainPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Number = 0")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainCheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)MainCheckBox)")
  [Void]$StringBuilder.AppendLine("    #`$$($MyDialogName)MainCheckBox.AutoCheck = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Checked = (`$OrderedItems[`$Key] -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Name = `"RadioChoice`$(`$$($MyDialogName)Number)`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Tag = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainCheckBox.Text = `$Key")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainCheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$$($MyDialogName)MainCheckBox.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Number += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (@(`$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { (`$PSItem.GetType().Name -eq `"CheckBox`") -and `$PSItem.Checked }).Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$CheckBox In @(`$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" }))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$CheckBox.Checked = (`$CheckBox.Tag -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$TESTForm)")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempItem = `$$($MyDialogName)MainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" -and `$PSItem.Checked } | Select-Object -Property Text, Tag")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$True, `$DialogResult, (`$TempItem.Text), (`$TempItem.Tag))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$False, `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGCheckBoxChoice"
}
#endregion function Build-MyFCGCheckBoxChoice

# Get / Seelct ListView Option
#region function Build-MyFCGSelectListView
Function Build-MyFCGSelectListView ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyFCGSelectListView -MyScriptName $MyScriptName -MyControlName $MyDialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGSelectListView"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Select-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tooltip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resize")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Select-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$List = @(),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Property,")
  [Void]$StringBuilder.AppendLine("    [String]`$Tooltip,")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected = `"xX NONE Xx`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 50,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 12,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Resize,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  if (`$Resize.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainListView)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.FullRowSelect = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.GridLines = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Name = `"LAU$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.OwnerDraw = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.ShowItemToolTips = `$PSBoundParameters.ContainsKey(`"ToolTip`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Text = `"LAU$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.View = [System.Windows.Forms.View]::Details")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainListViewDrawColumnHeader")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)MainListViewDrawColumnHeader -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawColumnHeader Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), `$EventArg.Bounds)")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, `$EventArg.Bounds.Width, (`$EventArg.Bounds.Height - 1))")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawString(`$EventArg.Header.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), (`$EventArg.Bounds.X + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Y + ((`$EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawColumnHeader Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.add_DrawColumnHeader({Start-$($MyDialogName)MainListViewDrawColumnHeader -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainListViewDrawItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)MainListViewDrawItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawItem Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawItem Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.add_DrawItem({Start-$($MyDialogName)MainListViewDrawItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)MainListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)MainListViewDrawSubItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($MyDialogName)Main ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)MainListViewDrawSubItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawSubItem Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawSubItem Event for ```$$($MyDialogName)MainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)MainListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.add_DrawSubItem({Start-$($MyDialogName)MainListViewDrawSubItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  foreach (`$PropName in `$Property)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$$($MyDialogName)MainListView.Columns.Add(`$PropName, -2)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$$($MyDialogName)MainListView.Columns.Add(`" `", (`$$($MyDialogName)Form.Width * 2))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$List)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$$($MyDialogName)MainListView.Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`"`$(`$Item.(`$Property[0]))`")))).SubItems.AddRange(@(`$Property[1..99] | ForEach-Object -Process { `"`$(`$Item.(`$PSItem))`" }))")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Name = `"`$(`$Item.(`$Property[0]))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tag = `$Item")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tooltiptext = `"`$(`$Item.(`$Tooltip))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Selected = (`$Item -in `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Checked = (`$Multi.IsPresent -and `$ListViewItem.Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Tag = @(`$$($MyDialogName)MainListView.Items)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)FilterLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyDialogName)MainListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Name = `"$($MyDialogName)FilterLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), `$$($MyDialogName)FilterLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Text = `"Filter List:`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainTextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Location = [System.Drawing.Point]::New((`$$($MyDialogName)FilterLabel.Right + [MyConfig]::FormSpacer), `$$($MyDialogName)FilterLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.MaxLength = 100")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Name = `"$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainListView.Right - `$$($MyDialogName)MainTextBox.Left), `$$($MyDialogName)FilterLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #`$$($MyDialogName)MainTextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Tag = @{ `"HintText`" = `"Enter Text and Press [Enter] to Filter List Items.`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyDialogName)MainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyDialogName)MainTextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyDialogName)MainTextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyDialogName)MainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.add_GotFocus({ Start-$($MyDialogName)MainTextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyDialogName)MainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Suppress KeyPress")
  [Void]$StringBuilder.AppendLine("        `$EventArg.SuppressKeyPress = `$True")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$Sender.Text.Trim()))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)MainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)MainListView.Items.AddRange(`$$($MyDialogName)MainListView.Tag)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TmpNewList = @(`$$($MyDialogName)MainListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$Sender.Text) -or (`$PSItem.SubItems[1].Text -Match `$Sender.Text) })")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)MainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($MyDialogName)MainListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyDialogName)MainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.add_KeyDown({ Start-$($MyDialogName)MainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyDialogName)MainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyDialogName)MainTextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($MyDialogName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainListView.Items.AddRange(`$$($MyDialogName)MainListView.Tag)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$TmpNewList = @(`$$($MyDialogName)MainListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$$($MyDialogName)MainTextBox.Text) -or (`$PSItem.SubItems[1].Text -Match `$$($MyDialogName)MainTextBox.Text) })")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($MyDialogName)MainListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyDialogName)MainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyDialogName)MainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.add_LostFocus({ Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Start-$($MyDialogName)MainTextBoxLostFocus -Sender `$$($MyDialogName)MainTextBox -EventArg `"Lost Focus`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainTextBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainTextBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainListView.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($MyDialogName)MainListView.SelectedItems.Count -and (-not `$Multi.IsPresent)) -or (`$$($MyDialogName)MainListView.CheckedItems.Count -and `$Multi.IsPresent))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Selected))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainListView.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)MainListView.Items | ForEach-Object -Process { `$PSItem.Checked = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$Item in `$$($MyDialogName)MainListView.Items)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Item.Selected = (`$Item.Tag -in `$Selected)")
  [Void]$StringBuilder.AppendLine("        `$Item.Checked = (`$Multi.IsPresent -and `$Item.Selected)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainListView.Refresh()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainListView.Select()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = `$$($MyDialogName)Form.Size")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)FilterLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog(`$LAUForm)")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyDialogName)]::New(`$True, `$DialogResult, (`$$($MyDialogName)MainListView.CheckedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyDialogName)]::New(`$True, `$DialogResult, (`$$($MyDialogName)MainListView.SelectedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyDialogName)]::New(`$False, `$DialogResult, `"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGSelectListView"
}
#endregion function Build-MyFCGSelectListView


# Get / Select ListBox Option
#region function Build-MyFCGSelectListBox
Function Build-MyFCGSelectListBox ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGSelectListBox -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGSelectListBox"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MySelectOptionDialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MySelectOptionDialog Result Class
  
  #region function Show-MySelectOptionDialog
  [Void]$StringBuilder.AppendLine("#region function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Select-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Select-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectText = `"Select Value`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)ListBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.DropDownStyle = [System.Windows.Forms.ListBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  [void]`$$($MyDialogName)ListBox.Items.Add([PSCustomObject]@{ `$DisplayMember = `" - `$(`$SelectText) - `"; `$ValueMember = `" - `$(`$SelectText) - `"})")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Name = `"$($MyDialogName)ListBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)ListBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Text = `"$($MyDialogName)ListBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)ListBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ListBox.Tag = `$Items | Where-Object -FilterScript { `$PSItem -eq `$Selected}")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ListBox.SelectedItem = `$$($MyDialogName)ListBox.Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)ListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$$($MyDialogName)ListBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyDialogName)ListBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$$($MyDialogName)ListBox.Tag))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)ListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)ListBox.SelectedItem = `$$($MyDialogName)ListBox.Tag")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyDialogName)ListBox.SelectedItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MySelectOptionDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGSelectListBox"
}
#endregion function Build-MyFCGSelectListBox

# Get / Select CheckedListBox Option
#region function Build-MyFCGSelectCheckedListBox
Function Build-MyFCGSelectCheckedListBox ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyFCGSelectCheckedListBox -MyScriptName $MyScriptName -MyControlName $MyDialogName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyDialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGSelectCheckedListBox"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MySelectOptionDialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyDialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyDialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyDialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MySelectOptionDialog Result Class
  
  #region function Show-MySelectOptionDialog
  [Void]$StringBuilder.AppendLine("#region function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("function Select-$($MyDialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Select-$($MyDialogName) -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectText = `"Select Value`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyDialogName) **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Name = `"$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_KeyDown({ Start-$($MyDialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyDialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyDialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.add_Shown({ Start-$($MyDialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)MainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Name = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Text = `"$($MyDialogName)MainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Name = `"$($MyDialogName)MainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyDialogName)MainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyDialogName)MainLabel.Text, [MyConfig]::Font.Regular, `$$($MyDialogName)MainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)MainLabel.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyDialogName)MainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Main GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainPanel.Controls.Add(`$$($MyDialogName)MainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Name = `"$($MyDialogName)MainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)MainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.Controls.Add(`$$($MyDialogName)CheckedListBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.DropDownStyle = [System.Windows.Forms.CheckedListBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  [void]`$$($MyDialogName)CheckedListBox.Items.Add([PSCustomObject]@{ `$DisplayMember = `" - `$(`$SelectText) - `"; `$ValueMember = `" - `$(`$SelectText) - `"})")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Name = `"$($MyDialogName)CheckedListBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Size = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyDialogName)CheckedListBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Text = `"$($MyDialogName)CheckedListBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)CheckedListBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)CheckedListBox.Tag = `$Items | Where-Object -FilterScript { `$PSItem -eq `$Selected}")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)CheckedListBox.SelectedItem = `$$($MyDialogName)CheckedListBox.Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)CheckedListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)MainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)MainGroupBox.ClientSize.Width, (`$$($MyDialogName)CheckedListBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)MainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)MainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)MainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyDialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Controls.Add(`$$($MyDialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Name = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Text = `"$($MyDialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyDialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Name = `"$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyDialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyDialogName)CheckedListBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyDialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmLeftButton.add_Click({ Start-$($MyDialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Name = `"$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyDialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$$($MyDialogName)CheckedListBox.Tag))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)CheckedListBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyDialogName)CheckedListBox.SelectedItem = `$$($MyDialogName)CheckedListBox.Tag")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmMidButton.add_Click({ Start-$($MyDialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.Controls.Add(`$$($MyDialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyDialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Name = `"$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyDialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyDialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyDialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyDialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyDialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyDialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyDialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyDialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmRightButton.add_Click({ Start-$($MyDialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyDialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyDialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyDialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($MyDialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($MyDialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyDialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyDialogName) **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyDialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  [$($MyDialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyDialogName)CheckedListBox.SelectedItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyDialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Select-$($MyDialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Select-$($MyDialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MySelectOptionDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGSelectCheckedListBox"
}
#endregion function Build-MyFCGSelectCheckedListBox


# ----------------------
# Build Script Fucntions
# ----------------------
#region function Build-MyFCGScriptHeader
Function Build-MyFCGScriptHeader ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptHeader -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptHeader"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#  Script: $($MyScriptName)")
  [Void]$StringBuilder.AppendLine("# Version: 0.0.0.0")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("Change Log for $($MyScriptName)")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("0.0.0.0 - Initial Version")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#requires -version 5.0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("using namespace System.Windows.Forms")
  [Void]$StringBuilder.AppendLine("using namespace System.Drawing")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections.Specialized")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("  .PARAMETER <Parameter-Name>")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("  .NOTES")
  [Void]$StringBuilder.AppendLine("    My Script $($MyScriptName) Version 1.0 by $([System.Environment]::UserName) on $(([DateTime]::Now).ToString("MM/dd/yyyy"))")
  [Void]$StringBuilder.AppendLine("    Created with `"$([MyConfig]::ScriptName)`" Version $([MyConfig]::ScriptVersion)")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#[CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("#param (")
  [Void]$StringBuilder.AppendLine("#)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$VerbosePreference to 'SilentlyContinue' for Production Deployment")
  [Void]$StringBuilder.AppendLine("#`$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("`$VerbosePreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$DebugPreference for Production Deployment")
  [Void]$StringBuilder.AppendLine("`$DebugPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Hide Console Window Progress Bar")
  [Void]$StringBuilder.AppendLine("`$ProgressPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Clear Previous Error Messages")
  [Void]$StringBuilder.AppendLine("`$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Assemblies")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Drawing`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Enable Visual Styles")
  [Void]$StringBuilder.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Modules")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Import-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"ERROR: Unable to Load Module 'CimCmdlets'`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Enable Visual Styles")
  [Void]$StringBuilder.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptHeader"
}
#endregion function Build-MyFCGScriptHeader

#region function Build-MyFCGScriptConfig
Function Build-MyFCGScriptConfig ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptConfig -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptConfig"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Configuration ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class Colors")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Object]`$Back")
  [Void]$StringBuilder.AppendLine("  [Object]`$Fore")
  [Void]$StringBuilder.AppendLine("  [Object]`$LabelFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$ErrorFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TitleBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TitleFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$GroupFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextROBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextTitle")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextHint")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextBad")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextWarn")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextGood")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextInfo")
  [Void]$StringBuilder.AppendLine("  [Object]`$ButtonBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$ButtonFore")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Colors ([Object]`$Back, [Object]`$Fore, [Object]`$LabelFore, [Object]`$ErrorFore, [Object]`$TitleBack, [Object]`$TitleFore, [Object]`$GroupFore, [Object]`$TextBack, [Object]`$TextROBack, [Object]`$TextFore, [Object]`$TextTitle, [Object]`$TextHint, [Object]`$TextBad, [Object]`$TextWarn, [Object]`$TextGood, [Object]`$TextInfo, [Object]`$ButtonBack, [Object]`$ButtonFore)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Back = `$Back")
  [Void]$StringBuilder.AppendLine("    `$This.Fore = `$Fore")
  [Void]$StringBuilder.AppendLine("    `$This.LabelFore = `$LabelFore")
  [Void]$StringBuilder.AppendLine("    `$This.ErrorFore = `$ErrorFore")
  [Void]$StringBuilder.AppendLine("    `$This.TitleBack = `$TitleBack")
  [Void]$StringBuilder.AppendLine("    `$This.TitleFore = `$TitleFore")
  [Void]$StringBuilder.AppendLine("    `$This.GroupFore = `$GroupFore")
  [Void]$StringBuilder.AppendLine("    `$This.TextBack = `$TextBack")
  [Void]$StringBuilder.AppendLine("    `$This.TextROBack = `$TextROBack")
  [Void]$StringBuilder.AppendLine("    `$This.TextFore = `$TextFore")
  [Void]$StringBuilder.AppendLine("    `$This.TextTitle = `$TextTitle")
  [Void]$StringBuilder.AppendLine("    `$This.TextHint = `$TextHint")
  [Void]$StringBuilder.AppendLine("    `$This.TextBad = `$TextBad")
  [Void]$StringBuilder.AppendLine("    `$This.TextWarn = `$TextWarn")
  [Void]$StringBuilder.AppendLine("    `$This.TextGood = `$TextGood")
  [Void]$StringBuilder.AppendLine("    `$This.TextInfo = `$TextInfo")
  [Void]$StringBuilder.AppendLine("    `$This.ButtonBack = `$ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$This.ButtonFore = `$ButtonFore")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class Font")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Object]`$Regular")
  [Void]$StringBuilder.AppendLine("  [Object]`$Hint")
  [Void]$StringBuilder.AppendLine("  [Object]`$Bold")
  [Void]$StringBuilder.AppendLine("  [Object]`$Title")
  [Void]$StringBuilder.AppendLine("  [Single]`$Ratio")
  [Void]$StringBuilder.AppendLine("  [Single]`$Width")
  [Void]$StringBuilder.AppendLine("  [Single]`$Height")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Font ([Object]`$Regular, [Object]`$Hint, [Object]`$Bold, [Object]`$Title, [Single]`$Ratio, [Single]`$Width, [Single]`$Height)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Regular = `$Regular")
  [Void]$StringBuilder.AppendLine("    `$This.Hint = `$Hint")
  [Void]$StringBuilder.AppendLine("    `$This.Bold = `$Bold")
  [Void]$StringBuilder.AppendLine("    `$This.Title = `$Title")
  [Void]$StringBuilder.AppendLine("    `$This.Ratio = `$Ratio")
  [Void]$StringBuilder.AppendLine("    `$This.Width = `$Width")
  [Void]$StringBuilder.AppendLine("    `$This.Height = `$Height")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) MyConfig ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class MyConfig")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Default Form Run Mode")
  [Void]$StringBuilder.AppendLine("  static [bool]`$Production = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptName = `"My Script - $($MyScriptName)`"")
  [Void]$StringBuilder.AppendLine("  static [Version]`$ScriptVersion = [Version]::New(`"0.0.0.0`")")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptAuthor = `"kensw`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptRoot = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ConfigFile = `"`"")
  [Void]$StringBuilder.AppendLine("  static [PSCustomObject]`$ConfigData = [PSCustomObject]@{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Runtime Values")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$Is64Bit = ([IntPtr]::Size -eq 8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Settings")
  [Void]$StringBuilder.AppendLine("  static [Int]`$FormSpacer = 4")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinWidth = 60")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinHeight = 35")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Font")
  [Void]$StringBuilder.AppendLine("  static [String]`$FontFamily = `"Verdana`"")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontSize = 10")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontTitle = 1.5")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Azure Module Logon Information")
  [Void]$StringBuilder.AppendLine("  static [String]`$AZModuleName = `"Az.Accounts`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$AZModuleVersion = `"2.19.0`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Static [OrderedDictionary]`$RequiredModules = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Az.Accounts`" = `"4.0.2`"")
  [Void]$StringBuilder.AppendLine("    `"Az.KeyVault`" = `"6.3.1`"")
  [Void]$StringBuilder.AppendLine("    `"Az.Automation`" = `"1.11.1`"")
  [Void]$StringBuilder.AppendLine("    `"Microsoft.Graph.Authentication`" = `"2.28.0`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Azure Logon Information")
  [Void]$StringBuilder.AppendLine("  static [String]`$TenantID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$SubscriptionID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AADLogonInfo = `$Null")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AccessToken = `$Null")
  [Void]$StringBuilder.AppendLine("  static [HashTable]`$AuthToken = @{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Color Mode")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$DarkMode = ((Get-ITmproperty -Path `"Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize`" -ErrorAction `"SilentlyContinue`").AppsUseLightTheme -eq `"0`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Form Auto Exit")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExit = 0")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitMax = 60")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitTic = 60000")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Administrative Rights")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # KPI Event Logging")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  static [String]`$KPILogName = `"KPI Event Log`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Network / Internet")
  [Void]$StringBuilder.AppendLine("  static [__ComObject]`$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]`"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Script Credentials")
  [Void]$StringBuilder.AppendLine("  static [String]`$Domain = `"Domain`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$UserID = `"UserID`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$Password = `"P@ssw0rd`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default SMTP Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$SMTPServer = `"smtp.mydomain.local`"")
  [Void]$StringBuilder.AppendLine("  static [int]`$SMTPPort = 25")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default MEMCM Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMServer = `"MyMEMCM.MyDomain.Local`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMSite = `"XYZ`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMNamespace = `"Root\SMS\Site_XYZ`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Help / Issues Uri's")
  [Void]$StringBuilder.AppendLine("  static [String]`$HelpURL = `"https://www.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$BugURL = `"https://www.amazon.com/`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # CertKet for Cert Encryption")
  [Void]$StringBuilder.AppendLine("  static [String]`$CertKey = `"`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Web Browser File Path's")
  [Void]$StringBuilder.AppendLine("  static [String]`$EdgePath = (Get-ITmproperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ChromePath = (Get-ITmproperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Current DateTime Offset")
  [Void]$StringBuilder.AppendLine("  static [DateTimeOffset]`$DateTimeOffset = [System.DateTimeOffset]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [Colors]`$Colors")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [Font]`$Font")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) MyConfig ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Get Script Path")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty(`$HostInvocation))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$Script:MyInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$HostInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("If ([MyConfig]::DarkMode)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FromArgb(40, 40, 40), # Back")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DodgerBlue, # Fore [System.Drawing.Color]::LightCoral")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # LabelForr")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Red, # ErrorFoer")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # TitleFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # TitleBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # GroupFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # TextBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # TextROBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, #TextFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TextTitle")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gray, # TextHint")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FireBrick, # TextBad")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Sienna, # TextWarn")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::ForestGreen, # TextGood")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::CornflowerBlue, # TextInfo")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # ButtonBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black # ButtonFore")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("Else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # Back")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # Fore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # LabelFor")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Red, # ErrorFoer")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::LightBlue, # TitleFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TitleBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # GroupFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::White, # TextBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # TextROBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # TextFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TextTitle")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gray, # TextHint")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FireBrick, #TextBad")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Sienna, # TextWarn")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::ForestGreen, # TextGood")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::CornflowerBlue, # TextInfo")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # ButtonBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy) # ButtonFore")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Default Colors")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # Back")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # Fore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # LabelFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # ErrorFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # TitleFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # TitleBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # GroupFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Window, # #TextBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Window, # TextROBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextTitle")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::GrayText, # TextHint")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextBad")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextWarn")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextGood")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextInfo")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # ButtonBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText # ButtonFore")
  [Void]$StringBuilder.AppendLine(")")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#endregion Default Colors")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region ******** Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize")
  [Void]$StringBuilder.AppendLine(":FontCheck Do")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  `$TmpBoldFont = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)")
  [Void]$StringBuilder.AppendLine("  `$TmpGraphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)")
  [Void]$StringBuilder.AppendLine("  `$TmpMeasureString = `$TmpGraphics.MeasureString(`"X`", `$TmpBoldFont)")
  [Void]$StringBuilder.AppendLine("  If ((`$MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor(`$TmpMeasureString.Width))) -or (`$MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor(`$TmpMeasureString.Height))))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::FontSize = [MyConfig]::FontSize - .1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    break FontCheck")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("While (`$True)")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font = [Font]::New(([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)), ([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)), `$TmpBoldFont, ([System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Regular)), (`$TmpGraphics.DpiX / 96), ([Math]::Floor(`$TmpMeasureString.Width)), ([Math]::Ceiling(`$TmpMeasureString.Height)))")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = `$Null")
  [Void]$StringBuilder.AppendLine("`$TmpBoldFont = `$Null")
  [Void]$StringBuilder.AppendLine("`$TmpMeasureString = `$Null")
  [Void]$StringBuilder.AppendLine("`$TmpGraphics.Dispose()")
  [Void]$StringBuilder.AppendLine("`$TmpGraphics = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) Configuration  ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptConfig"
}
#endregion function Build-MyFCGScriptConfig

#region function Build-MyFCGScriptRuntime
Function Build-MyFCGScriptRuntime ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptRuntime -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptRuntime"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Runtime Values ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class MyRuntime")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ $($MyScriptName) Runtime  Values ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptRuntime"
}
#endregion function Build-MyFCGScriptRuntime

#region function Build-MyFCGScriptDefEnums
Function Build-MyFCGScriptDefEnums ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptDefEnums -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptDefEnums"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** My Default Enumerations ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** enum MyAnswer ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyAnswer")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Unknown = 0")
  [Void]$StringBuilder.AppendLine("  No      = 1")
  [Void]$StringBuilder.AppendLine("  Yes     = 2")
  [Void]$StringBuilder.AppendLine("  Maybe   = 3")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyAnswer ********
  
  #region ******** enum MyDigit ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("enum MyDigit")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Zero")
  [Void]$StringBuilder.AppendLine("  One")
  [Void]$StringBuilder.AppendLine("  Two")
  [Void]$StringBuilder.AppendLine("  Three")
  [Void]$StringBuilder.AppendLine("  Four")
  [Void]$StringBuilder.AppendLine("  Five")
  [Void]$StringBuilder.AppendLine("  Six")
  [Void]$StringBuilder.AppendLine("  Seven")
  [Void]$StringBuilder.AppendLine("  Eight")
  [Void]$StringBuilder.AppendLine("  Nine")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyDigit ********
  
  #region ******** enum MyBits ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyBits")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Bit01 = 0x00000001")
  [Void]$StringBuilder.AppendLine("  Bit02 = 0x00000002")
  [Void]$StringBuilder.AppendLine("  Bit03 = 0x00000004")
  [Void]$StringBuilder.AppendLine("  Bit04 = 0x00000008")
  [Void]$StringBuilder.AppendLine("  Bit05 = 0x00000010")
  [Void]$StringBuilder.AppendLine("  Bit06 = 0x00000020")
  [Void]$StringBuilder.AppendLine("  Bit07 = 0x00000040")
  [Void]$StringBuilder.AppendLine("  Bit08 = 0x00000080")
  [Void]$StringBuilder.AppendLine("  Bit09 = 0x00000100")
  [Void]$StringBuilder.AppendLine("  Bit10 = 0x00000200")
  [Void]$StringBuilder.AppendLine("  Bit11 = 0x00000400")
  [Void]$StringBuilder.AppendLine("  Bit12 = 0x00000800")
  [Void]$StringBuilder.AppendLine("  Bit13 = 0x00001000")
  [Void]$StringBuilder.AppendLine("  Bit14 = 0x00002000")
  [Void]$StringBuilder.AppendLine("  Bit15 = 0x00004000")
  [Void]$StringBuilder.AppendLine("  Bit16 = 0x00008000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyBits ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Default Enumerations ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptDefEnums"
}
#endregion function Build-MyFCGScriptDefEnums

#region function Build-MyFCGScriptDefClasses
Function Build-MyFCGScriptDefClasses ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptDefClasses -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptDefClasses"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** My Custom Class ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** MyListItem Class ********
  [Void]$StringBuilder.AppendLine("#region ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("Class MyListItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Text")
  [Void]$StringBuilder.AppendLine("  [Object]`$Value")
  [Void]$StringBuilder.AppendLine("  [Object]`$Tag")
  [Void]$StringBuilder.AppendLine("  [MyBits]`$Flags")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** MyListItem Class ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Custom Class ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptDefClasses"
}
#endregion function Build-MyFCGScriptDefClasses

#region function Build-MyFCGScriptWindowsAPIs
Function Build-MyFCGScriptWindowsAPIs ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptWindowsAPIs -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptWindowsAPIs"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Windows APIs ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Win API - [Console.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Show()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Console")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetConsoleWindow();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Hide()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 0);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Show()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 5);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("[System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
  [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Console.Window] ********
  
  #region ******** Win API - [ControlBox.Menu] ********
  [Void]$StringBuilder.AppendLine("#region ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [ControlBox.Menu]::DisableFormClose(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace ControlBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Menu")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    const int MF_BYPOSITION = 0x400;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int GetMenuItemCount(IntPtr hWnd);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void DisableFormClose(IntPtr hWnd)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr hMenu = GetSystemMenu(hWnd, false);")
  [Void]$StringBuilder.AppendLine("      int menuItemCount = GetMenuItemCount(hMenu);")
  [Void]$StringBuilder.AppendLine("      RemoveMenu(hMenu, menuItemCount - 1, MF_BYPOSITION);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [ControlBox.Menu] ********
  
  #region ******** Win API - [My.Screen] ********
  [Void]$StringBuilder.AppendLine("#region ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info = [My.Screen]::Info()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info.PWidth = Physical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.PHeight = Physical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.LWidth = Logical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.LHeight = Logical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.Scale = Scale")
  [Void]$StringBuilder.AppendLine("# `$Info.BitsPixel = Bits Per Pixel")
  [Void]$StringBuilder.AppendLine("# `$Info.Referesh = Refresh Rate")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace My")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("  using System.Drawing;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Specialized;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public static class Screen")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"gdi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    internal static extern int GetDeviceCaps(IntPtr hdc, int nIndex);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static OrderedDictionary Info()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      /// Get Primary Desktop")
  [Void]$StringBuilder.AppendLine("      IntPtr Desktop = (Graphics.FromHwnd(IntPtr.Zero)).GetHdc();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      OrderedDictionary MyScreen = new OrderedDictionary();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Physical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempPW = GetDeviceCaps(Desktop, 118);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PWidth`", TempPW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PHeight`", GetDeviceCaps(Desktop, 117));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Logical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempLW = GetDeviceCaps(Desktop, 8);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LWidth`", TempLW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LHeight`", GetDeviceCaps(Desktop, 10));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Screen Scale")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Scale`", ((float)TempPW / (float)TempLW));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Other Screen Info")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"BitsPixel`", GetDeviceCaps(Desktop, 12));")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Referesh`", GetDeviceCaps(Desktop, 116));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return MyScreen.AsReadOnly();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Drawing.dll`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [My.Screen] ********
  
  #region ******** Win API - [User.Desktop] ********
  [Void]$StringBuilder.AppendLine("#region ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [User.Desktop]::Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace User")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Desktop")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, string lParam, uint fuFlags, uint uTimeout, IntPtr lpdwResult);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr HWND_BROADCAST = new IntPtr(0xffff);")
  [Void]$StringBuilder.AppendLine("    private const int WM_SETTINGCHANGE = 0x1a;")
  [Void]$StringBuilder.AppendLine("    private const int SMTO_ABORTIFHUNG = 0x0002;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.Runtime.InteropServices.DllImport(`"Shell32.dll`")] ")
  [Void]$StringBuilder.AppendLine("    private static extern int SHChangeNotify(int eventId, int flags, IntPtr item1, IntPtr item2);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void Refresh()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, IntPtr.Zero, null, SMTO_ABORTIFHUNG, 100, IntPtr.Zero);")
  [Void]$StringBuilder.AppendLine("      SHChangeNotify(0x8000000, 0x1000, IntPtr.Zero, IntPtr.Zero);    ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [User.Desktop] ********
  
  #region ******** Win API - [Display.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::SetForegroundWindow(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_HIDE)")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_SHOW)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Enum ShowWindow")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  SW_HIDE = 0")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNORMAL = 1")
  [Void]$StringBuilder.AppendLine("  SW_MAXIMIZE = 3")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNOACTIVATE = 4")
  [Void]$StringBuilder.AppendLine("  SW_SHOW = 5")
  [Void]$StringBuilder.AppendLine("  SW_MINIMIZE = 6")
  [Void]$StringBuilder.AppendLine("  SW_SHOWMINNOACTIVE = 7")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNA = 8")
  [Void]$StringBuilder.AppendLine("  SW_RESTORE = 9")
  [Void]$StringBuilder.AppendLine("  SW_SHOWDEFAULT = 10")
  [Void]$StringBuilder.AppendLine("  SW_FORCEMINIMIZE = 11")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Display")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool SetForegroundWindow(IntPtr Handle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    public static extern bool ShowWindow(IntPtr Handle, int ShowOpt);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Display.Window] ********
  
  #region ******** Win API - [Extract.MyIcon] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$TempCount = [Extract.MyIcon]::IconCount(`"C:\Windows\System32\shell32.dll`")")
  [Void]$StringBuilder.AppendLine("#`$TempIcon = [Extract.MyIcon]::IconReturn(`"C:\Windows\System32\shell32.dll`", 1, `$False)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Drawing;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Extract")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class MyIcon")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyIcon(IntPtr hIcon);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"shell32.dll`", CharSet = CharSet.Auto)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static int IconCount(string FileName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return 0;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      Icon RetData = null;")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("        if (GetLarge)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in LIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in SIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return RetData;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return IconReturn(FileName, IconNum, false);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies System.Drawing -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - v ********
  
  #region ******** Win API - [Login.Sessions] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions()")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions(`"ComputerName`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace Login")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class Sessions")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    } ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    public struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public Int32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public String SessionName;")
  [Void]$StringBuilder.AppendLine("      public WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern IntPtr WTSOpenServer(string pServerName);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSCloseServer(IntPtr hServer);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern int WTSEnumerateSessions(System.IntPtr hServer, int Reserved, int Version, ref System.IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSFreeMemory(IntPtr pMemory);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return EnumSessions(System.Environment.MachineName, All);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (string ComputerName, bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Int32 Count = 0;")
  [Void]$StringBuilder.AppendLine("      IntPtr Computer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr SessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      Int32 DataSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      List<WTS_SESSION_INFO> SessionList = new List<WTS_SESSION_INFO>();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Computer = WTSOpenServer(ComputerName);")
  [Void]$StringBuilder.AppendLine("        if (Computer !=IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Int64 RetValue = WTSEnumerateSessions(Computer, 0, 1, ref SessionInfo, ref Count);")
  [Void]$StringBuilder.AppendLine("          if (RetValue != 0)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Int64 Start = (Int64)SessionInfo;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("            for (Int32 Index = 0; Index < Count; Index++)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              WTS_SESSION_INFO SessionData = (WTS_SESSION_INFO)Marshal.PtrToStructure((System.IntPtr)(Start + (DataSize * Index)), typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("              if ((SessionData.State == WTS_CONNECTSTATE_CLASS.WTSActive) | All)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                SessionList.Add(SessionData);")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          WTSFreeMemory(SessionInfo);")
  [Void]$StringBuilder.AppendLine("          WTSCloseServer(Computer);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return SessionList;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Login.Sessions] ********
  
  #region ******** Win API - [Impersonate.User] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Impersonate")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public enum LogonType")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_INTERACTIVE = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK = 3,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_BATCH = 4,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_SERVICE = 5,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_UNLOCK = 7,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK_CLEARTEXT = 8, // Win2K or higher")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NEW_CREDENTIALS = 9 // Win2K or higher")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public enum LogonProvider")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_DEFAULT = 0,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT35 = 1,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT40 = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT50 = 3")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class User")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true, CharSet = CharSet.Unicode)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr Token);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool CloseHandle(IntPtr hHandle);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Impersonate Example")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#`$UserToken = [IntPtr]::Zero")
  [Void]$StringBuilder.AppendLine("#if ([Impersonate.User]::LogonUser(`$UserID, `$Domain, `$Password, 2, 0, [Ref]`$UserToken))")
  [Void]$StringBuilder.AppendLine("#{")
  [Void]$StringBuilder.AppendLine("#  Try")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    `$Impersonate = [System.Security.Principal.WindowsIdentity]::Impersonate(`$UserToken)")
  [Void]$StringBuilder.AppendLine("#    #region ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#    #endregion ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  Finally")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    if (-not [String]::IsNullOrEmpty(`$Impersonate))")
  [Void]$StringBuilder.AppendLine("#    {")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate.Undo()")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate = `$Null")
  [Void]$StringBuilder.AppendLine("#    }")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  [Void]([Impersonate.User]::CloseHandle(`$UserToken))")
  [Void]$StringBuilder.AppendLine("#  `$UserToken = `$Null")
  [Void]$StringBuilder.AppendLine("#}")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#endregion Impersonate Example")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Impersonate.User] ********
  
  #region ******** Win API - [RunAs.CurrentUser] ********
  [Void]$StringBuilder.AppendLine("#region ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir, `$Visible)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace RunAs")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public static class CurrentUser")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NO_WINDOW = 0x08000000;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NEW_CONSOLE = 0x00000010;")
  [Void]$StringBuilder.AppendLine("    private const uint INVALID_SESSION_ID = 0xFFFFFFFF;")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr WTS_CURRENT_SERVER_HANDLE = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"CreateProcessAsUser`", SetLastError = true, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateProcessAsUser(IntPtr hToken, String lpApplicationName, String lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandle, uint dwCreationFlags, IntPtr lpEnvironment, String lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"DuplicateTokenEx`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DuplicateTokenEx(IntPtr ExistingTokenHandle, uint dwDesiredAccess, IntPtr lpThreadAttributes, int TokenType, int ImpersonationLevel, ref IntPtr DuplicateTokenHandle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateEnvironmentBlock(ref IntPtr lpEnvironment, IntPtr hToken, bool bInherit);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CloseHandle(IntPtr hSnapshot);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSQueryUserToken(uint SessionId, ref IntPtr phToken);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern int WTSEnumerateSessions(IntPtr hServer, int Reserved, int Version, ref IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SW")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SW_HIDE = 0,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_NORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINIMIZED = 2,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMAXIMIZED = 3,")
  [Void]$StringBuilder.AppendLine("      SW_MAXIMIZE = 3,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNOACTIVATE = 4,")
  [Void]$StringBuilder.AppendLine("      SW_SHOW = 5,")
  [Void]$StringBuilder.AppendLine("      SW_MINIMIZE = 6,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINNOACTIVE = 7,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNA = 8,")
  [Void]$StringBuilder.AppendLine("      SW_RESTORE = 9,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWDEFAULT = 10,")
  [Void]$StringBuilder.AppendLine("      SW_MAX = 10")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct PROCESS_INFORMATION")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public IntPtr hProcess;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hThread;")
  [Void]$StringBuilder.AppendLine("      public uint dwProcessId;")
  [Void]$StringBuilder.AppendLine("      public uint dwThreadId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SECURITY_IMPERSONATION_LEVEL")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SecurityAnonymous = 0,")
  [Void]$StringBuilder.AppendLine("      SecurityIdentification = 1,")
  [Void]$StringBuilder.AppendLine("      SecurityImpersonation = 2,")
  [Void]$StringBuilder.AppendLine("      SecurityDelegation = 3,")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct STARTUPINFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int cb;")
  [Void]$StringBuilder.AppendLine("      public String lpReserved;")
  [Void]$StringBuilder.AppendLine("      public String lpDesktop;")
  [Void]$StringBuilder.AppendLine("      public String lpTitle;")
  [Void]$StringBuilder.AppendLine("      public uint dwX;")
  [Void]$StringBuilder.AppendLine("      public uint dwY;")
  [Void]$StringBuilder.AppendLine("      public uint dwXSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwYSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwXCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwYCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwFillAttribute;")
  [Void]$StringBuilder.AppendLine("      public uint dwFlags;")
  [Void]$StringBuilder.AppendLine("      public short wShowWindow;")
  [Void]$StringBuilder.AppendLine("      public short cbReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr lpReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdInput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdOutput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdError;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum TOKEN_TYPE")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      TokenPrimary = 1,")
  [Void]$StringBuilder.AppendLine("      TokenImpersonation = 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public readonly UInt32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public readonly String pWinStationName;")
  [Void]$StringBuilder.AppendLine("      public readonly WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    // Gets the user token from the currently active session")
  [Void]$StringBuilder.AppendLine("    private static bool GetSessionUserToken(ref IntPtr phUserToken)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var bResult = false;")
  [Void]$StringBuilder.AppendLine("      var hImpersonationToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var activeSessionId = INVALID_SESSION_ID;")
  [Void]$StringBuilder.AppendLine("      var pSessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var sessionCount = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // Get a handle to the user access token for the current active session.")
  [Void]$StringBuilder.AppendLine("      if (WTSEnumerateSessions(WTS_CURRENT_SERVER_HANDLE, 0, 1, ref pSessionInfo, ref sessionCount) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        var arrayElementSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("        var current = pSessionInfo;")
  [Void]$StringBuilder.AppendLine("        for (var i = 0; i < sessionCount; i++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          var si = (WTS_SESSION_INFO)Marshal.PtrToStructure((IntPtr)current, typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("          current += arrayElementSize;")
  [Void]$StringBuilder.AppendLine("          if (si.State == WTS_CONNECTSTATE_CLASS.WTSActive)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            activeSessionId = si.SessionID;")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // If enumerating did not work, fall back to the old method")
  [Void]$StringBuilder.AppendLine("      if (activeSessionId == INVALID_SESSION_ID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        activeSessionId = WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (WTSQueryUserToken(activeSessionId, ref hImpersonationToken) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        // Convert the impersonation token to a primary token")
  [Void]$StringBuilder.AppendLine("        bResult = DuplicateTokenEx(hImpersonationToken, 0, IntPtr.Zero, (int)SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, (int)TOKEN_TYPE.TokenPrimary, ref phUserToken);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hImpersonationToken);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return bResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static uint StartProcessAsCurrentUser(string Application, string Arguments = null, string WorkingDir = null, bool visible = true)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var hUserToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var startInfo = new STARTUPINFO();")
  [Void]$StringBuilder.AppendLine("      startInfo.cb = Marshal.SizeOf(typeof(STARTUPINFO));")
  [Void]$StringBuilder.AppendLine("      var procInfo = new PROCESS_INFORMATION();")
  [Void]$StringBuilder.AppendLine("      var pEnv = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      uint ProcessID = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (GetSessionUserToken(ref hUserToken))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          uint dwCreationFlags = CREATE_UNICODE_ENVIRONMENT | (uint)(visible ? CREATE_NEW_CONSOLE : CREATE_NO_WINDOW);")
  [Void]$StringBuilder.AppendLine("          startInfo.wShowWindow = (short)(visible ? SW.SW_SHOW : SW.SW_HIDE);")
  [Void]$StringBuilder.AppendLine("          startInfo.lpDesktop = `"winsta0\\default`";")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if (CreateEnvironmentBlock(ref pEnv, hUserToken, false))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if (CreateProcessAsUser(hUserToken, Application, Arguments, IntPtr.Zero, IntPtr.Zero, false, dwCreationFlags, pEnv, WorkingDir, ref startInfo, out procInfo))")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              ProcessID = procInfo.dwProcessId;")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hUserToken);")
  [Void]$StringBuilder.AppendLine("        if (pEnv != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          DestroyEnvironmentBlock(pEnv);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hThread);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hProcess);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return ProcessID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [RunAs.CurrentUser] ********
  
  If ($False)
  {
    #region ******** Win API - [Elevate.UserRights] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::AddPrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::RemovePrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class UserRights")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", ExactSpelling = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool CloseHandle(IntPtr hHandle);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential, Pack = 1)]")
    [Void]$StringBuilder.AppendLine("    internal struct TokPriv1Luid")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("     public int Count;")
    [Void]$StringBuilder.AppendLine("     public long Luid;")
    [Void]$StringBuilder.AppendLine("     public int Attr;")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_DISABLED = 0x00000000;")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_ENABLED = 0x00000002;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_REQUIRED = 0x000F0000;")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_READ = 0x00020000;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ASSIGN_PRIMARY = 0x0001;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_DUPLICATE = 0x0002;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_IMPERSONATE = 0x0004;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY = 0x0008;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY_SOURCE = 0x0010;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_PRIVILEGES = 0x0020;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_GROUPS = 0x0040;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_DEFAULT = 0x0080;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_SESSIONID = 0x0100;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_READ = (STANDARD_RIGHTS_READ | TOKEN_QUERY);")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT | TOKEN_ADJUST_SESSIONID);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool AddPrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, false);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool RemovePrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, true);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal static bool AdjustPrivilege(string Privilege, bool Remove)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      try")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        bool retVal;")
    [Void]$StringBuilder.AppendLine("        TokPriv1Luid tp;")
    [Void]$StringBuilder.AppendLine("        IntPtr hproc = GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("        IntPtr htok = IntPtr.Zero;")
    [Void]$StringBuilder.AppendLine("        retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);")
    [Void]$StringBuilder.AppendLine("        tp.Count = 1;")
    [Void]$StringBuilder.AppendLine("        tp.Luid = 0;")
    [Void]$StringBuilder.AppendLine("        if (Remove)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_DISABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        else")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_ENABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        retVal = LookupPrivilegeValue(null, Privilege, ref tp.Luid);")
    [Void]$StringBuilder.AppendLine("        retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);")
    [Void]$StringBuilder.AppendLine("        if (htok != IntPtr.Zero)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          bool Ignore = CloseHandle(htok);")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        return retVal;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("      catch (Exception ex)")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        throw ex;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.UserRights] ********
    
    #region ******** Win API - [Elevate.Privilege] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(9)")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(9)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class Privilege")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"ntdll.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Enable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, true, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Disable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, false, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.Privilege] ********
  }
  
  #region ******** Win API - [MyAD.Stuff] ********
  [Void]$StringBuilder.AppendLine("#region ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [MyAD.Stuff]::GetSidString(([Byte[]]`$DirecitoryEntry.objectSid[0]))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyAD")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Stuff")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32`", CharSet = CharSet.Auto, SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    static extern bool ConvertSidToStringSid([MarshalAs(UnmanagedType.LPArray)] byte[] pSID, out IntPtr ptrSid);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static string GetSidString(byte[] sid)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr ptrSid;")
  [Void]$StringBuilder.AppendLine("      string sidString;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (!ConvertSidToStringSid(sid, out ptrSid))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new System.ComponentModel.Win32Exception();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        sidString = Marshal.PtrToStringAuto(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Marshal.FreeHGlobal(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return sidString;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [MyAD.Stuff] ********
  
  #region ******** Trust All Certs ********
  [Void]$StringBuilder.AppendLine("#region ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("  using System.Net;")
  [Void]$StringBuilder.AppendLine("  using System.Security.Cryptography.X509Certificates;")
  [Void]$StringBuilder.AppendLine("  public class TrustAllCertsPolicy : ICertificatePolicy ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("[Net.ServicePointManager]::CertificatePolicy = [TrustAllCertsPolicy]::New()")
  [Void]$StringBuilder.AppendLine("#endregion ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Trust All Certs ********
  
  #region ********* Get / Set LSA Auto Logon Password *********
  [Void]$StringBuilder.AppendLine("#region ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("using System.Text;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace LSA")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Secret")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_UNICODE_STRING")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public UInt16 Length;")
  [Void]$StringBuilder.AppendLine("      public UInt16 MaximumLength;")
  [Void]$StringBuilder.AppendLine("      public IntPtr Buffer;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_OBJECT_ATTRIBUTES")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int Length;")
  [Void]$StringBuilder.AppendLine("      public IntPtr RootDirectory;")
  [Void]$StringBuilder.AppendLine("      public LSA_UNICODE_STRING ObjectName;")
  [Void]$StringBuilder.AppendLine("      public uint Attributes;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityDescriptor;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityQualityOfService;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private enum LSA_AccessPolicy : long")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_LOCAL_INFORMATION = 0x00000001L,")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_AUDIT_INFORMATION = 0x00000002L,")
  [Void]$StringBuilder.AppendLine("      POLICY_GET_PRIVATE_INFORMATION = 0x00000004L,")
  [Void]$StringBuilder.AppendLine("      POLICY_TRUST_ADMIN = 0x00000008L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_ACCOUNT = 0x00000010L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_SECRET = 0x00000020L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_PRIVILEGE = 0x00000040L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x00000080L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_AUDIT_REQUIREMENTS = 0x00000100L,")
  [Void]$StringBuilder.AppendLine("      POLICY_AUDIT_LOG_ADMIN = 0x00000200L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SERVER_ADMIN = 0x00000400L,")
  [Void]$StringBuilder.AppendLine("      POLICY_LOOKUP_NAMES = 0x00000800L,")
  [Void]$StringBuilder.AppendLine("      POLICY_NOTIFICATION = 0x00001000L")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaRetrievePrivateData(IntPtr PolicyHandle, ref LSA_UNICODE_STRING KeyName, out IntPtr PrivateData);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaStorePrivateData(IntPtr policyHandle, ref LSA_UNICODE_STRING KeyName,ref LSA_UNICODE_STRING PrivateData);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaOpenPolicy(ref LSA_UNICODE_STRING SystemName, ref LSA_OBJECT_ATTRIBUTES ObjectAttributes, uint DesiredAccess, out IntPtr PolicyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaNtStatusToWinError(uint status);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaClose(IntPtr policyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaFreeMemory(IntPtr buffer);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private LSA_OBJECT_ATTRIBUTES ObjectAttributes;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING LocalSystem;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING SecretName;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = 0;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret (string ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (ComputerName.Length == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"ComputerName lenght zero`");")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = Marshal.StringToHGlobalUni(ComputerName);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = (UInt16)(ComputerName.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = (UInt16)((ComputerName.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private IntPtr GetLsaPolicy (LSA_AccessPolicy access)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaOpenPolicy (ref this.LocalSystem, ref this.ObjectAttributes, (uint)access, out LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaOpenPolicy failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void ReleaseLsaPolicy (IntPtr LsaPolicyHandle)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaClose(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaClose failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void FreeMemory(IntPtr Buffer)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaFreeMemory(Buffer);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaFreeMemory failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    public string GetSecret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr PrivateData = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_GET_PRIVATE_INFORMATION);")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaRetrievePrivateData(LsaPolicyHandle, ref SecretName, out PrivateData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"RetreivePrivateData failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = (LSA_UNICODE_STRING)Marshal.PtrToStructure(PrivateData, typeof(LSA_UNICODE_STRING));")
  [Void]$StringBuilder.AppendLine("      string Value = Marshal.PtrToStringAuto(LusSecretData.Buffer).Substring(0, (LusSecretData.Length / 2));")
  [Void]$StringBuilder.AppendLine("      FreeMemory (PrivateData);")
  [Void]$StringBuilder.AppendLine("      return Value;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool SetSecret (string Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      if (Value.Length > 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Create data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = Marshal.StringToHGlobalUni(Value);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = (UInt16)(Value.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = (UInt16)((Value.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Delete data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = 0;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_CREATE_SECRET);")
  [Void]$StringBuilder.AppendLine("      uint result = LsaStorePrivateData(LsaPolicyHandle, ref SecretName, ref LusSecretData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy (LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError (result);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return true;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return false;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ********* Get / Set LSA Auto Logon Password *********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Windows APIs ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptWindowsAPIs"
}
#endregion function Build-MyFCGScriptWindowsAPIs

#region function Build-MyFCGScriptFunctions
Function Build-MyFCGScriptFunctions ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptFunctions -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptFunctions"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** My Custom Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region **** Function Prompt ****
  [Void]$StringBuilder.AppendLine("#region Function Prompt")
  [Void]$StringBuilder.AppendLine("Function Prompt")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Console]::Title = `$PWD")
  [Void]$StringBuilder.AppendLine("  `"PS`$(`$PSVersionTable.PSVersion.Major)`$(`">`" * (`$NestedPromptLevel + 1)) `"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Prompt")
  [Void]$StringBuilder.AppendLine("")
  #endregion **** Function Prompt ****
  
  #region ******** Sample Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Verb-Noun
  [Void]$StringBuilder.AppendLine("#region function Verb-Noun")
  [Void]$StringBuilder.AppendLine("Function Verb-Noun ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-Noun -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verb-Noun`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verb-Noun`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-Noun")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-Noun
  
  #region function Verb-NounPiped
  [Void]$StringBuilder.AppendLine("#region function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("Function Verb-NounPiped()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-NounPiped -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Value | Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped Begin Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once when the Function Begins")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped End Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once whent he Function Ends")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-NounPiped
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Sample Functions ********
  
  #region ******* Microsoft Forms Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function New-MyListItem
  [Void]$StringBuilder.AppendLine("#region function New-MyListItem")
  [Void]$StringBuilder.AppendLine("function New-MyListItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MyListItem -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyListItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyListItem
  
  #region function New-TreeNode
  [Void]$StringBuilder.AppendLine("#region function New-TreeNode")
  [Void]$StringBuilder.AppendLine("function New-TreeNode()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TreeNode")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AtTop")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-TreeNode -TreeNode `$TreeNode -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$TreeNode,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$SelectedImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectedImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AtTop,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AddChild,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-TreeNode`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("  if (`$AddChild.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text, [System.Windows.Forms.TreeNode]::New(`"*`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AtTop.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Insert(0, `$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Add(`$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$Checked.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.NodeFont = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Index`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageIndex`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$SelectedImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Expand.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Expand()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-TreeNode`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TreeNode")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TreeNode
  
  #region function New-MenuItem
  [Void]$StringBuilder.AppendLine("#region function New-MenuItem")
  [Void]$StringBuilder.AppendLine("function New-MenuItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextImageRelation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuItem -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextImageRelation]`$TextImageRelation = `"ImageBeforeText`",")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("    if (`$Menu.DropDown.Items.Count -eq 1)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.BackColor = `$Menu.BackColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ForeColor = `$Menu.ForeColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ImageList = `$Menu.Owner.ImageList")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ShortcutKeys = `$ShortcutKeys")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = `$TextImageRelation")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuItem
  
  #region function New-MenuButton
  [Void]$StringBuilder.AppendLine("#region function New-MenuButton")
  [Void]$StringBuilder.AppendLine("function New-MenuButton()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuButton for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuButton for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuButton -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = [System.Windows.Forms.ToolStripButton]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Menu.Items.Add(`$TempMenuButton)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ShortcutKeys = `$ShortcutKeys")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuButton`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuButton")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuButton
  
  #region function New-MenuLabel
  [Void]$StringBuilder.AppendLine("#region function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("function New-MenuLabel()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuLabel -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleLeft`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuLabel`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Icon`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuLabel`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuLabel
  
  #region function New-MenuSeparator
  [Void]$StringBuilder.AppendLine("#region function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("function New-MenuSeparator()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MenuSeparator -Menu `$Menu")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuSeparator`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.Name = `"TempSeparator`"")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.Text = `"TempSeparator`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuSeparator`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuSeparator
  
  #region function New-ListViewItem
  [Void]$StringBuilder.AppendLine("#region function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("function New-ListViewItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IndentCount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Imagekey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewItem -ListView `$listView -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SubItems,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$IndentCount = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListViewGroup]`$Group,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$Group)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Index`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageIndex, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageKey, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.IndentCount = `$IndentCount")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SubItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.SubItems.AddRange(`$SubItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Items.Add(`$TempListViewItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewItem
  
  #region function New-ColumnHeader
  [Void]$StringBuilder.AppendLine("#region function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("function New-ColumnHeader()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ColumnHeader -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = -2,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ColumnHeader`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Columns.Add(`$TempColumnHeader)")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Text = `$Text")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Width = `$Width")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ColumnHeader`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ColumnHeader
  
  #region function New-ListViewGroup
  [Void]$StringBuilder.AppendLine("#region function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("function New-ListViewGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Header")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewGroup -Header `"Header`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Header,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = `"Left`",")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewGroup`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Groups.Add(`$TempListViewGroup)")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Header = `$Header")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Header")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.HeaderAlignment = `$Alignment")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewGroup`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewGroup
  
  #region Custom ListView Sort
  [Void]$StringBuilder.AppendLine("#region Custom ListView Sort")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Windows.Forms;")
  [Void]$StringBuilder.AppendLine("using System.Collections;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyCustom")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class ListViewSort : IComparer")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private int _Column = 0;")
  [Void]$StringBuilder.AppendLine("    private bool _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    private bool _Enable = true;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = 0;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column, bool Order)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = Order;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Column")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Column; }")
  [Void]$StringBuilder.AppendLine("      set { _Column = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Ascending")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Ascending; }")
  [Void]$StringBuilder.AppendLine("      set { _Ascending = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Enable")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Enable; }")
  [Void]$StringBuilder.AppendLine("      set { _Enable = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Compare(object RowX, object RowY)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (_Enable)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (_Ascending)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Windows.Forms`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion Custom ListView Sort")
  [Void]$StringBuilder.AppendLine("")
  #endregion Custom ListView Sort
  
  #region function New-TabPage
  [Void]$StringBuilder.AppendLine("#region function New-TabPage")
  [Void]$StringBuilder.AppendLine("function New-TabPage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabControl")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$TabPage = New-TabPage -TabControl  -Text `"Text`" -Tag `"Tag`" -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TabControl]`$TabControl,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-TabPage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = [System.Windows.Forms.TabPage]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  `$TabControl.Controls.Add(`$TempTabPage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Enabled = (-not `$Disabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-TabPage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TabPage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TabPage
  
  #region function Scale-MyForm
  [Void]$StringBuilder.AppendLine("#region function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("function Scale-MyForm()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Scale Form")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Scale Form")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scale")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Control -`$Scale")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control = `$$($MyScriptName)Form,")
  [Void]$StringBuilder.AppendLine("    [Single]`$Scale = 1")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Scale-MyForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Control -is [System.Windows.Forms.Form])")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Scale(`$Scale)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Control.Font = [System.Drawing.Font]::New(`$Control.Font.FontFamily, (`$Control.Font.Size * `$Scale), `$Control.Font.Style)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$Control.PSObject.Properties.Match(`"Items`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Control.Controls.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$ChildControl in `$Control.Controls)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Scale-MyForm -Control `$ChildControl -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Control.Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Item -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Scale-MyForm`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Scale-MyForm
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Microsoft Forms Functions ********
  
  #region ******* Active Directory Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyADForest
  [Void]$StringBuilder.AppendLine("#region function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("function Get-MyADForest ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Forest")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Forest")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADForest -Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADForest -Name `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Current")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADForest`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Forest")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADForest`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADForest
  
  #region function Get-MyADDomain
  [Void]$StringBuilder.AppendLine("#region function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("function Get-MyADDomain ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Domain")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Domain")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Computer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Name `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Computer`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Current")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADDomain`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domian]::GetDomain(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Computer`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADDomain`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADDomain
  
  #region function Get-MyADObject
  [Void]$StringBuilder.AppendLine("#region function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("function Get-MyADObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LDAPFilter")
  [Void]$StringBuilder.AppendLine("      AD Search LDAP Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PageSize")
  [Void]$StringBuilder.AppendLine("      Search Page Size")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SizeLimit")
  [Void]$StringBuilder.AppendLine("      Search Search Size")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchRoot")
  [Void]$StringBuilder.AppendLine("      Starting Search OU")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("      Name of DC or Domain to query")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchScope")
  [Void]$StringBuilder.AppendLine("      Search Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sort")
  [Void]$StringBuilder.AppendLine("      Sort Direction")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SortProperty")
  [Void]$StringBuilder.AppendLine("      Property to Sort By")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertiesToLoad")
  [Void]$StringBuilder.AppendLine("      Properties to Load")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when searching active directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject [<String>]")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject -filter [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$LDAPFilter = `"(objectClass=*)`",")
  [Void]$StringBuilder.AppendLine("    [Long]`$PageSize = 1000,")
  [Void]$StringBuilder.AppendLine("    [Long]`$SizeLimit = 1000,")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"LDAP://`$(`$([ADSI]'').distinguishedName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Base`", `"OneLevel`", `"Subtree`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SearchScope]`$SearchScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Ascending`", `"Descending`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SortDirection]`$Sort = `"Ascending`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SortProperty,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PropertiesToLoad,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADObject`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = [System.DirectoryServices.DirectorySearcher]::New(`$LDAPFilter, `$PropertiesToLoad, `$SearchScope)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.PageSize = `$PageSize")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.SizeLimit = `$SizeLimit")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$SearchRoot.ToUpper()")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$TempSearchRoot)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"(?:LDAP|GC)://*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot -replace `"(?<LG>(?:LDAP|GC)://)(?:[\w\d\.-]+/)?(?<DN>.+)`", `"```${LG}`$(`$ServerName)/```${DN}`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$ServerName)/`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot, (`$Credential.UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SortProperty`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.PropertyName = `$SortProperty")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.Direction = `$Sort")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.FindAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = `$Null")
  [Void]$StringBuilder.AppendLine("  `$MySearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADObject`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADObject
  
  #region function New-MyADUser
  [Void]$StringBuilder.AppendLine("#region function New-MyADUser")
  [Void]$StringBuilder.AppendLine("function New-MyADUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates a new User in Active Directory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates a new User in Active Directory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parent")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SamAccountName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserPrincipalName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FirstName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Enabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoExpire")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoChange")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyADUser -Parent `"OU=Users,OU=MyUsers,DC=MyDomain,DC=Local`" -SamAccountName `"MyTestUser`" -UserPrincipalName `"MyTestUser@MyDomain.Local`" -FirstName `"FirstName`" -MI `"M`" -LastName `"LastName`" -Description `"My Description`" -Password `"MyPassword`" -Enabled")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Basic function to create a User in Active Directory, needs input validation and error checking")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Parent,")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SamAccountName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserPrincipalName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$FirstName,")
  [Void]$StringBuilder.AppendLine("    [String]`$MI,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Enabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoExpire,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoChange,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyADUser`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"SearchRoot`"  = `$Parent;")
  [Void]$StringBuilder.AppendLine("    `"SearchScope`" = `"Base`";")
  [Void]$StringBuilder.AppendLine("    `"SizeLimit`"   = 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"ServerName`", `$ServerName)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ParentOU = (Get-MyADObject @Params).GetDirectoryEntry()")
  [Void]$StringBuilder.AppendLine("  `$New = `$ParentOU.Children.Add(`"CN=`$(`$SamAccountName)`", `"User`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"samaccountname`"].Add(`$SamAccountName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"userprincipalname`"].Add(`$UserPrincipalName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"givenname`"].Add(`$FirstName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"sn`"].Add(`$LastName)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MI`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"initials`"].Add(`$MI)")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName) `$(`$MI)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"description`"].Add(`$Description)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  if (`$Enabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.psbase.invokeset(`"AccountDisabled`", `"False`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.SetPassword(`$Password)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("  `$UACFlag = 0")
  [Void]$StringBuilder.AppendLine("  if (`$NoExpire.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x10000")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$NoChange.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x40")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New.Properties[`"userAccountControl`"].Value = ((`$New.Properties[`"userAccountControl`"].Value -band (-bnot 0x20)) -bor `$UACFlag)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyADUser`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyADUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyADUser
  
  #region function Translate-DomainName
  [Void]$StringBuilder.AppendLine("#region function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("function Translate-DomainName()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_1779 = 1")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL = 2")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_NT4 = 3")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DISPLAY = 4")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DOMAIN_SIMPLE = 5")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_GUID = 7")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_UNKNOWN = 8")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL_EX = 10")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByFQDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$FQDN")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Translate-DomainName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = New-Object -ComObject `"NameTranslate`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.Void]([System.__ComObject].InvokeMember(`"Init`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (3, `$Null)))")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (1, `$DN)))")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByFQDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (2, `"`$FQDN/`")))")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"DN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 1));")
  [Void]$StringBuilder.AppendLine("    `"FQDN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 2)).Trim('/');")
  [Void]$StringBuilder.AppendLine("    `"NetBIOS`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 3)).Trim('\')")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Translate-DomainName`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Translate-DomainName
  
  #region function Validate-MyADAccount
  [Void]$StringBuilder.AppendLine("#region function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("function Validate-MyADAccount()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Validates AD Credentials")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Validates AD Credentials")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Domain")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Domain <String> -UserName <String> -Password <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -UserName <String> -Password <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Password <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Domain,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Validate-MyADAccount`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.DirectoryServices.AccountManagement.ContextType`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void][System.Reflection.Assembly]::LoadWithPartialName(`"System.DirectoryServices.AccountManagement`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, ((`$Credential.GetNetworkCredential()).Domain)).ValidateCredentials(((`$Credential.GetNetworkCredential()).UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, `$Domain).ValidateCredentials(`$UserName, `$Password)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Validate-MyADAccount`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Validate-MyADAccount
  
  #region function Confirm-MyGroupMemberShip
  [Void]$StringBuilder.AppendLine("#region function Confirm-MyGroupMemberShip")
  [Void]$StringBuilder.AppendLine("Function Confirm-MyGroupMemberShip ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Confirms if User is a Member of a Group")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Confirms if User is a Member of a Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      User ID / Sam Account Name of user")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserRoot")
  [Void]$StringBuilder.AppendLine("      Search Root for the User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserScope")
  [Void]$StringBuilder.AppendLine("      Search Scope for User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserDN")
  [Void]$StringBuilder.AppendLine("      DN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupName")
  [Void]$StringBuilder.AppendLine("      Name of the Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupRoot")
  [Void]$StringBuilder.AppendLine("      Search Root for the Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupScope")
  [Void]$StringBuilder.AppendLine("      Search Scope for Group")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGroupMemberShip -UserID `$UserID -UserRoot `$UserRoot -GroupName `$GroupName -GroupRoot `$GroupRoot")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGroupMemberShip -UserDN `$UserDN -GroupName `$GroupName -GroupRoot `$GroupRoot")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID = [Environment]::UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserDN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupScope = `"SubTree`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Confirm-MyGroupMemberShip`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"UserID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Users DistinguishedName")
  [Void]$StringBuilder.AppendLine("      `$ChkADUser = ([adsisearcher]::New(`$UserRoot, `"(&(objectClass=user)(objectCategory=person)(samAccountName=`$(`$UserID)))`", @(`"DistinguishedName`"), `$UserScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Verify User was Found")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty(`$ChkADUser.Path))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Message = `"User Not Found`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$ChkADUser.Properties[`"distinguishedname`"][0]")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set UserDN")
  [Void]$StringBuilder.AppendLine("      `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify User DN is not Null")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$UserDN))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("    `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("    # Set Success Status")
  [Void]$StringBuilder.AppendLine("    `$Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Check AD is user is member of the Group")
  [Void]$StringBuilder.AppendLine("      `$ChkGroup = ([adsisearcher]::New(`$GroupRoot, `"(&(objectClass=group)(objectCategory=group)(name=`$(`$GroupName))(member:1.2.840.113556.1.4.1941:=`$(`$UserDN)))`", @(`"adspath`"), `$GroupScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = (-not [String]::IsNullOrEmpty(`$ChkGroup.Path))")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$True")
  [Void]$StringBuilder.AppendLine("      `$Message = `"Success`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$False")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"Success`"   = `$Success;")
  [Void]$StringBuilder.AppendLine("    `"Message`"    = `$Message;")
  [Void]$StringBuilder.AppendLine("    `"UserDN`"    = `$UserDN;")
  [Void]$StringBuilder.AppendLine("    `"GroupName`" = `$GroupName;")
  [Void]$StringBuilder.AppendLine("    `"IsMember`"  = `$IsMember")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Confirm-MyGroupMemberShip`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Confirm-MyGroupMemberShip")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Confirm-MyGroupMemberShip
  
  #region function Get-MyBitlockerKey
  [Void]$StringBuilder.AppendLine("#region function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("Function Get-MyBitlockerKey()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Bitlocker Keys")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Bitlocker Keys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PasswordID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DOmainFQDN")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyBitlockerKey -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$ComputerName | Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2024-07-21 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PasswordID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainFQDN = `"ad.providence.org`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"DC=ad,dc=providence,dc=org`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyBitlockerKey Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"CompName`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Computer In `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$CompObj = Get-MyADObject -SearchRoot `"GC://`$(`$DomainFQDN):3268`" -SearchScope `"Subtree`" -LDAPFilter `"(&(objectClass=user)(objectCategory=computer)(samaccounttype=805306369)(CN=`$(`$Computer)))`" -PropertiesToLoad `"distinguishedname`", `"adspath`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$CompObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$BLPasswords = Get-MyADObject -SearchRoot (`$CompObj.Properties[`"distinguishedname`"][0]) -SearchScope `"OneLevel`" -LDAPFilter `"(ObjectClass=msFVE-RecoveryInformation)`"")
  [Void]$StringBuilder.AppendLine("          ForEach (`$BLPassword In `$BLPasswords)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$DateTimeInfo = [RegEx]::Match(`$BLPassword.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("            If (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            Else")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$BLPassword.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$BLPassword.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$PassID In `$PasswordID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PassObj = Get-MyADObject -SearchRoot `$SearchRoot -Server `$DomainFQDN -SearchScope `"Subtree`" -LDAPFilter `"(&(ObjectClass=msFVE-RecoveryInformation)(Name=*`$(`$PassID)*))`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$PassObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `"Unknown`"; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$DateTimeInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("          If (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          `$CompNameInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `",CN=(?<Name>.{1,15}),OU=`")")
  [Void]$StringBuilder.AppendLine("          If (`$CompNameInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `$CompNameInfo.Groups[`"Name`"].Value")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `"Unknown`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$PassObj.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$PassObj.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyBitlockerKey Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyBitlockerKey
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Active Directory Functions ********
  
  #region ******* Database Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Invoke-MySQLCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("Function Invoke-MySQLCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes SQL Query or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes SQL Query or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SQLConnection")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"Select * From TableName`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"StoreProcedureName`" -SPValues @{ `"ID`" = 1; `"Value`" = `"Some Value`" }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SQLQuery`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.SqlClient.SqlConnection]`$SQLConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create new SQL Command")
  [Void]$StringBuilder.AppendLine("  `$SQLComand = [System.Data.SqlClient.SqlCommand]::New(`$Command, `$SQLConnection)")
  [Void]$StringBuilder.AppendLine("  # Check if Calling a Stored Procedure")
  [Void]$StringBuilder.AppendLine("  If (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    # Check if Parameters were passed for the Stored Procedure")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Stored Procedure Paramaters")
  [Void]$StringBuilder.AppendLine("      ForEach (`$SPValue In `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$SQLComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Return SQL Data")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter = [System.Data.SqlClient.SqlDataAdapter]::New(`$SQLComand)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$SQLDataAdapter.Fill(`$SQLDataSet)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Dispose of Objects")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$SQLComand.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MySQLCommand
  
  #region function Open-MySQLConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("Function Open-MySQLConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens Connection to SQL Server Database")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Opens Connection to SQL Server Database")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;Trusted_Connection=yes`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;User Id=UserName;Password=Password;`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Authentication='Active Directory Password';`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Import-Module -Name Az.Accounts")
  [Void]$StringBuilder.AppendLine("      `$ConnectInfo = Connect-AzAccount")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://database.windows.net`"")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -AccessToken `$AccessToken -ConnectionString `"Data Source=DBInstanceName.database.windows.net;Initial Catalog=DBName;Connect Timeout=900`"")
  [Void]$StringBuilder.AppendLine("      If (`$DBCon.State -ne `"Open`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Unable to Connect to SQL Server`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      24-12-11 Initial Relase")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString,")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Check if .Net Assembly is Loaded")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.SqlClient.SqlConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Load .Net Assembly")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create New SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.SqlClient.SqlConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    # Check is Azure Access Token was Passed")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"AccessToken`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Azure Access Token")
  [Void]$StringBuilder.AppendLine("      `$DBCon.AccessToken = `$AccessToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    # Open SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    # Return SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed to Open")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{")
  [Void]$StringBuilder.AppendLine("      `"State`" = [System.Data.ConnectionState]::Closed")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MySQLConnection
  
  #region function Open-MyOracleConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("function Open-MyOracleConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens Connection to Oracle Server Database")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Opens Connection to Oracle Server Database")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Open-MyOracleConnection -ConnectionString <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Open-MyOracleConnection`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.OracleClient.OracleConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.OracleClient.OracleConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{ `"State`" = [System.Data.ConnectionState]::Closed }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Open-MyOracleConnection`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MyOracleConnection
  
  #region function Invoke-MyOracleCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyOracleCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes Oracle Command or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes Oracle Command or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OracleConnection")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsDataTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Open-MyOracleConnection -ConnectionString <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.OracleClient.OracleConnection]`$OracleConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsDataTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyOracleCommand`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OracleComand = [System.Data.OracleClient.OracleCommand]::New(`$Command, `$OracleConnection)")
  [Void]$StringBuilder.AppendLine("  if (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SPValue in `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$OracleComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$AsDataTable.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleDataAdapter = [System.Data.OracleClient.OracleDataAdapter]::New(`$OracleComand)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("    [Void]`$OracleDataAdapter.Fill(`$OracleDataSet)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$TempDBReader = `$OracleComand.ExecuteReader())")
  [Void]$StringBuilder.AppendLine("    `$TempDBReader.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyOracleCommand`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyOracleCommand
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Database Functions ********
  
  #region ******* Encrypt / Encode Data Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Encode-MyData
  [Void]$StringBuilder.AppendLine("#region function Encode-MyData")
  [Void]$StringBuilder.AppendLine("function Encode-MyData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Data")
  [Void]$StringBuilder.AppendLine("      Data to Compress")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LineLength")
  [Void]$StringBuilder.AppendLine("      Max Line Length")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encode-MyData -Data `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Data,")
  [Void]$StringBuilder.AppendLine("    [Int]`$LineLength = 160")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encode-MyData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter = [System.IO.StreamWriter]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter.Write(`$Data)")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter.Close()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Code = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Line in @([System.Convert]::ToBase64String(`$MemoryStream.ToArray()) -split `"(?<=\G.{`$LineLength})(?=.)`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Code.AppendLine(`$Line)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Code.ToString()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = `$Null")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Code = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Line = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encode-MyData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encode-MyData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encode-MyData
  
  #region function Decode-MyData
  [Void]$StringBuilder.AppendLine("#region function Decode-MyData")
  [Void]$StringBuilder.AppendLine("function Decode-MyData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Decode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Decode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Data")
  [Void]$StringBuilder.AppendLine("      Data to Decompress")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Decode-MyData -Data `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Data,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Decode-MyData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$CompressedData = [System.Convert]::FromBase64String(`$Data)")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Write(`$CompressedData, 0, `$CompressedData.Length)")
  [Void]$StringBuilder.AppendLine("  [Void]`$MemoryStream.Seek(0, 0)")
  [Void]$StringBuilder.AppendLine("  `$StreamReader = [System.IO.StreamReader]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AsString.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$StreamReader.ReadToEnd()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("    `$Buffer = [System.Char[]]::New(4096)")
  [Void]$StringBuilder.AppendLine("    While (`$StreamReader.EndOfStream -eq `$False)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Bytes = `$StreamReader.Read(`$Buffer, 0, 4096)")
  [Void]$StringBuilder.AppendLine("      if (`$Bytes)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ArrayList.AddRange(`$Buffer[0 .. (`$Bytes - 1)])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$ArrayList")
  [Void]$StringBuilder.AppendLine("    `$ArrayList.Clear()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$StreamReader.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = `$Null")
  [Void]$StringBuilder.AppendLine("  `$StreamReader = `$Null")
  [Void]$StringBuilder.AppendLine("  `$CompressedData = `$Null")
  [Void]$StringBuilder.AppendLine("  `$ArrayList = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Buffer = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Bytes = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Decode-MyData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Decode-MyData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Decode-MyData
  
  #region Function Encrypt-MySensitiveData
  [Void]$StringBuilder.AppendLine("#region Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts / Decrypts Text String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts / Decrypts Text String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER String")
  [Void]$StringBuilder.AppendLine("      Plain Text or Encrypted String")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassPhrase")
  [Void]$StringBuilder.AppendLine("      Pass Phrase to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("      Salt to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashAlgorithm")
  [Void]$StringBuilder.AppendLine("      Hash Algorithm to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CipherMode")
  [Void]$StringBuilder.AppendLine("      Cipher Mode to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PaddingMode")
  [Void]$StringBuilder.AppendLine("      Padding Mode to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("      Switch to Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$EncryptedData = Encrypt-PMSensitiveData -String `$String -PassPhrase `$PassPhrase -Salt `$Pepper")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DecryptedData = Encrypt-PMSensitiveData -String `$String -PassPhrase `$PassPhrase -Salt `$Pepper -Decrypt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$String,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PassPhrase = `"PassPhrase`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Salt = `"Pepper`",")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.HashAlgorithmName]`$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.CipherMode]`$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.PaddingMode]`$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Cryptography AES Object")
  [Void]$StringBuilder.AppendLine("  `$Aes = [System.Security.Cryptography.Aes]::Create()")
  [Void]$StringBuilder.AppendLine("  `$Aes.Mode = `$CipherMode")
  [Void]$StringBuilder.AppendLine("  `$Aes.Padding = `$PaddingMode")
  [Void]$StringBuilder.AppendLine("  # Salt Needs to be at least 8 Characters")
  [Void]$StringBuilder.AppendLine("  `$SaltBytes = [System.Text.Encoding]::UTF8.GetBytes(`$Salt.PadRight(8, `"*`"))")
  [Void]$StringBuilder.AppendLine("  `$Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New(`$PassPhrase, `$SaltBytes, 8, `$HashAlgorithm).GetBytes(`$Aes.Key.Length)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Decrypt Encrypted Data")
  [Void]$StringBuilder.AppendLine("    `$DecodeBytes = [System.Convert]::FromBase64String(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Aes.IV = `$DecodeBytes[0..15]")
  [Void]$StringBuilder.AppendLine("    `$Decryptor = `$Aes.CreateDecryptor()")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::UTF8.GetString((`$Decryptor.TransformFinalBlock(`$DecodeBytes, 16, (`$DecodeBytes.Length - 16))))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Encrypt String Data")
  [Void]$StringBuilder.AppendLine("    `$EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Encryptor = `$Aes.CreateEncryptor()")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes = [System.Collections.ArrayList]::New(`$Aes.IV)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.AddRange(`$Encryptor.TransformFinalBlock(`$EncodeBytes, 0, `$EncodeBytes.Length))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedBytes)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.Clear()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Aes.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Encrypt-MySensitiveData
  
  #region function Encrypt-WithCert
  
  [Void]$StringBuilder.AppendLine("#region function Encrypt-WithCert")
  [Void]$StringBuilder.AppendLine("Function Encrypt-WithCert ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts Text Data used Info from Cert")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts Text Data used Info from Cert")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CertKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Universal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with Local Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -Salt `$Salt -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with Universal Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -Salt `$Salt -Universal -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with No Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      2024-02-14 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NoSalt`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CertKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Salt,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Universal,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encrypt-WithCert`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Cert = Get-ChildItem -Path `"Cert:\LocalMachine\Root\`$(`$CertKey)`"")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"WithSalt`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$Universal.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = @(`$TmpNotBefore.ToString(`"yyyyMMddhhmmss`"), `$TmpNotBefore.ToString(`"hhmmssyyyyMMdd`"), `$TmpNotAfter.ToString(`"yyyyMMddhhmmss`"), `$TmpNotAfter.ToString(`"hhmmssyyyyMMdd`"))[`$Salt]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = `$Cert.Subject")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Encrypt-MySensitiveData -PassPhrase (`$Cert.SerialNumber) -Salt `$SaltInit -String `$TextString -Decrypt:(`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encrypt-WithCert`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encrypt-WithCert")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encrypt-WithCert
  
  #region function Encrypt-MyTextString
  [Void]$StringBuilder.AppendLine("#region function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("function Encrypt-MyTextString()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts a Password for use in a Script")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts a Password for use in a Script")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("      Password to be Encrypted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProtectionScope")
  [Void]$StringBuilder.AppendLine("      Who can Decrypt")
  [Void]$StringBuilder.AppendLine("        Currentuser = = Specific User")
  [Void]$StringBuilder.AppendLine("        LocalMachine = = Any User")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncryptKey")
  [Void]$StringBuilder.AppendLine("      Option Extra Encryption Security")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encrypt-MyTextString -Password `"Password`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"LocalMachine`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ProtectionScope = `"CurrentUser`",")
  [Void]$StringBuilder.AppendLine("    [String]`$EncryptKey = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encrypt-MyTextString`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Security.Cryptography.ProtectedData`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Security`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"EncryptKey`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes(`$EncryptKey)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Convert]::FromBase64String(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect(`$EncryptedData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::ASCII.GetString(`$DecryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempData = [System.Text.Encoding]::ASCII.GetBytes(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect(`$TempData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encrypt-MyTextString`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encrypt-MyTextString
  
  #region function Decode-MySecureString
  [Void]$StringBuilder.AppendLine("#region function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("function Decode-MySecureString ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Decodes a SecureString")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Decodes a SecureString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SecureString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Decode-MySecureString -SecureString [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Security.SecureString]`$SecureString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-EnvironmentVariable`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$SecureString))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-EnvironmentVariable`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Decode-MySecureString
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Encrypt / Encode Data Functions ********
  
  #region ******* Logging / Events Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Write-MyLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogPath")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogFolder")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Context")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StackInfo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxSize")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OutHost")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorInfo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorGood")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorWarn")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorError")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Warning`" -Message `"This is My Warning Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Error`" -Message `"This is My Error Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"LogFolder`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = `"`$([System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName)).log`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SystemLog`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SystemLog,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Text`", `"Info`", `"Good`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [String]`$Component = `"`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Context = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Thread = `$PID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 16777216)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxSize = 52428800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$OutHost,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"LogFolder`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `$LogFolder")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"SystemLog`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$ENV:SystemRoot)\Logs\`$(`$LogFolder)`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$PSScriptRoot)\Logs`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (-not [System.IO.Directory]::Exists(`$LogPath))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.IO.Directory]::CreateDirectory(`$LogPath)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempFile = `"`$(`$LogPath)\`$LogName`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 2")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 3")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempDate = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (-not `$PSBoundParameters.ContainsKey(`"Component`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempSource = [System.IO.Path]::GetFileName(`$MyInvocation.ScriptName)")
  [Void]$StringBuilder.AppendLine("    `$Component = [System.IO.Path]::GetFileNameWithoutExtension(`$TempSource)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$TempFile) -and `$MaxSize -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (([System.IO.FileInfo]`$TempFile).Length -gt `$MaxSize)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempBackup = [System.IO.Path]::ChangeExtension(`$TempFile, `"lo_`")")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-Item -Force -Path `$TempBackup")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Rename-Item -Force -Path `$TempFile -NewName ([System.IO.Path]::GetFileName(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$OutHost.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object `"`$(`$TempDate.ToString(`"yy-MM-dd HH:mm:ss`")) - `$(`$Message)`" -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Add-Content -Encoding Ascii -Path `$TempFile -Value (`"<![LOG[{0}]LOG]!><time=```"{1}```" date=```"{2}```" component=```"{3}```" context=```"{4}```" type=```"{5}```" thread=```"{6}```" file=```"{7}```">`" -f `$Message, `$(`$TempDate.ToString(`"HH:mm:ss.fff+000`")), `$(`$TempDate.ToString(`"MM-dd-yyyy`")), `$Component, `$Context, `$TempSeverity, `$Thread, `$TempSource)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyLogFile
  
  #region function Write-MyPipelineLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyPipelineLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Info`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Info`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"`",")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Host -object `$Message -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyPipelineLogFile
  
  #region Create KPI Event Log
  [Void]$StringBuilder.AppendLine("#region Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("Try")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Refreshed on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("Catch")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Check if user has Local Admin Rights")
  [Void]$StringBuilder.AppendLine("  if (([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Event Log")
  [Void]$StringBuilder.AppendLine("    New-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`", `"Automation`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Created on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("")
  #endregion Create KPI Event Log
  
  #region function Write-KPIEvent
  [Void]$StringBuilder.AppendLine("#region function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("function Write-KPIEvent ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes an Event to the PSJH KPI Event Log")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Writes an Event to the PSJH KPI Event Log")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptVersion")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Source")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryType")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Category")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-KPIEvent -Source `$Source -EntryType `$EntryType -EventID `$EventID -Category `$Category -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptName = [MyConfig]::ScriptName,")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptVersion = [MyConfig]::ScriptVersion,")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = [MyConfig]::KPILogName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Utility`", `"Automation`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Source,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Information`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryType = `"Information`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$EventID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 32767)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Category = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName `$LogName -Source `$Source -EntryType `$EntryType -EventId `$EventID -Category `$Category -Message `"`$(`$ScriptName)|`$(`$ScriptVersion)|`$(`$Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-KPIEvent
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Logging / Events Functions ********
  
  #region ******* Generic / General Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Invoke-MyPause
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Pause Script for Specified Number of Seconds")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Pause Script for Specified Number of Seconds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Seconds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyPause [-Seconds `$Seconds]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Int]`$Seconds = 60,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { `$True }")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("    `$WaitCheck = `$ScriptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$TmpPause.Elapsed.TotalSeconds -lt `$Seconds) -and `$WaitCheck)")
  [Void]$StringBuilder.AppendLine("  `$TmpPause.Stop()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyPause
  
  #region function Set-MyClipboard
  [Void]$StringBuilder.AppendLine("#region function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("Function Set-MyClipboard()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Copies Object Data to the ClipBoard")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Copies Object Data to the ClipBoard")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowEvenBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowOddBack")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyClipBoard -Items `$Items -Title `"This is My Title`" -Property `"Property1`", `"Property2`", `"Property3`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Office`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items,")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"My Copied Data from PowerShell`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleBack = `"LightSteelBlue`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyBack = `"PowderBlue`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowEvenBack = `"White`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowOddBack = `"Gainsboro`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Init StringBuilding")
  [Void]$StringBuilder.AppendLine("    `$HTMLStringBuilder = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start HTML ClipBaord Data")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"Version:1.0``r``nStartHTML:000START``r``nEndHTML:00000END``r``nStartFragment:00FSTART``r``nEndFragment:0000FEND``r``n`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"000START`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<html><head><title>My Copied Data</title></head><body><!--StartFragment-->`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00FSTART`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Table Style")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<style>``r``n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$TitleFore); background: `$(`$TitleBack);}``r``n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$PropertyFore); background: `$(`$PropertyBack);}``r``n.Row0 {border: 1px solid black; border-collapse: collapse;color: `$(`$RowFore); background: `$(`$RowEvenBack);}``r``n.Row1 {border: 1px solid black; border-collapse: collapse; color: `$(`$RowFore); background: `$(`$RowOddBack);}``r``n</style>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start Build Table / Set Title")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<table><tr><th class=Title aligh=center colspan=`$(`$Properties.Count)>&nbsp;`$(`$Title)&nbsp;</th></tr>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Add Table Column / Property Names")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<tr>`$((`$Properties | ForEach-Object -Process { `"<td class=Property aligh=center>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join '')</tr>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start Row Count")
  [Void]$StringBuilder.AppendLine("    `$TmpRowCount = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpItemList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$HTMLStringBuilder.Append(`"<tr>`$((((`$Properties | ForEach-Object -Process { `$Item.(`$PSItem) }) | ForEach-Object -Process { `"<td class=Row`$(`$TmpRowCount)>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join ''))</tr>`")")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpItemList.Add((`$Item | Select-Object -Property `$Properties))")
  [Void]$StringBuilder.AppendLine("      `$TmpRowCount = (`$TmpRowCount + 1) % 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Close HTML Table")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"</table><br><br>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set End Clipboard Values")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"0000FEND`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<!--EndFragment--></body></html>`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00000END`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::Clear()")
  [Void]$StringBuilder.AppendLine("    `$DataObject = [System.Windows.Forms.DataObject]::New(`"Text`", (`$TmpItemList | Select-Object -Property `$Properties | ConvertTo-Csv -NoTypeInformation | Out-String))")
  [Void]$StringBuilder.AppendLine("    `$DataObject.SetData(`"HTML Format`", `$HTMLStringBuilder.ToString())")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::SetDataObject(`$DataObject)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyClipboard
  
  #region function Send-MyEMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("function Send-MyEMail()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends an E-mail")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sends an E-mail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPServer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPPort")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MsgFile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IsHTML")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Priority")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SMTPServer = [MyConfig]::SMTPServer,")
  [Void]$StringBuilder.AppendLine("    [Int]`$SMTPPort = [MyConfig]::SMTPPort,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, HelpMessage = `"Enter To`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter From`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Subject`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Message Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$IsHTML,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.Attachment[]]`$Attachment,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailPriority]`$Priority = `"Normal`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage = [System.Net.Mail.MailMessage]::New()")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.From = `$From")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Subject = `$Subject")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.IsBodyHtml = `$IsHTML")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Priority = `$Priority")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendCC in `$CC) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.CC.Add(`$SendCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendBCC in `$BCC) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.BCC.Add(`$SendBCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([System.IO.File]::Exists(`$Body)) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$([System.IO.File]::ReadAllText(`$Body))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$Body")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Attachment`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$AttachedFile in `$Attachment) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.Attachments.Add(`$AttachedFile)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.To.Clear()")
  [Void]$StringBuilder.AppendLine("    foreach (`$SendTo in `$To) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.To.Add(`$SendTo)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient = [System.Net.Mail.SmtpClient]::New(`$SMTPServer, `$SMTPPort)")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient.Send(`$MyMessage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyEMail
  
  #region function Show-MyWebReport
  [Void]$StringBuilder.AppendLine("#region function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Show-MyWebReport -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      10/5/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ReportURL")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyWebReport
  
  #region function Invoke-MyConCommand
  [Void]$StringBuilder.AppendLine("#region class MyConCommand")
  [Void]$StringBuilder.AppendLine("class MyConCommand")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Int]`$ExitCode")
  [Void]$StringBuilder.AppendLine("  [String]`$OutputTxt")
  [Void]$StringBuilder.AppendLine("  [String]`$ErrorMsg")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  MyConCommand ([Int]`$ExitCode, [String]`$OutputTxt, [String]`$ErrorMsg)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ExitCode = `$ExitCode")
  [Void]$StringBuilder.AppendLine("    `$This.OutputTxt = `$OutputTxt")
  [Void]$StringBuilder.AppendLine("    `$This.ErrorMsg = `$ErrorMsg")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyConCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes a Console Command and Returns the Exit Code")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes a Console Command and Returns the Exit Code")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to be Executed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Command line Parameters")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyConCommand -Command `"C:\Windows\System32\cmd.exe`" -Parameters `"/c Exit 1`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      09/19/2023 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [String]`$Parameters = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$Command))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PSI = [System.Diagnostics.ProcessStartInfo]::New(`$Command, `$Parameters)")
  [Void]$StringBuilder.AppendLine("    `$PSI.UseShellExecute = `$False")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardError = `$True")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardOutput = `$True")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Out = [System.Diagnostics.Process]::Start(`$PSI)")
  [Void]$StringBuilder.AppendLine("      `$Out.WaitForExit()")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(`$Out.ExitCode, `$Out.StandardOutput.ReadToEnd(), `$Out.StandardError.ReadToEnd())")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(-2, `$Null, `$Error[0].Message)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConCommand]::New(-1, `$Null, `"Command was not Found`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyConCommand
  
  #region function Test-MyClassLoaded
  [Void]$StringBuilder.AppendLine("#region function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("function Test-MyClassLoaded()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Custom Class")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$IsLoaded = Test-MyClassLoaded -Name `"CustomClass`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`$Name)).Type))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Test-MyClassLoaded
  
  #region function New-MyComObject
  [Void]$StringBuilder.AppendLine("#region function New-MyComObject")
  [Void]$StringBuilder.AppendLine("function New-MyComObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates Local and Remote COMObjects")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates Local and Remote COMObjects")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComObject")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -ComObject <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -ComputerName <String> -ComObject <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$COMObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Activator]::CreateInstance([Type]::GetTypeFromProgID(`$COMObject, `$ComputerName))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyComObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyComObject
  
  #region function ConvertTo-MyIconImage
  [Void]$StringBuilder.AppendLine("#region function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("function ConvertTo-MyIconImage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Convert Base 64 Encoded Imagesback to Icon / Image")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Convert Base 64 Encoded Imagesback to Icon / Image")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncodedImage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage -Image")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EncodedImage,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Image")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Image.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function ConvertTo-MyIconImage
  
  #region function Send-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Send-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Text Message to Remote or Local Computer or IP Address")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Text Message to Remote or Local Computer or IP Address")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      255.255.255.255 = Broadcast")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyTextMessage -Mesage [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"This is My Message`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$MessageBytes = [Text.Encoding]::ASCII.GetBytes(`"`$(`$Message)`")")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Send(`$MessageBytes, `$MessageBytes.Length, `$RemoteClient)")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Close()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyTextMessage
  
  #region function Listen-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Listen-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Listen for Text Message from Remote or Local Computer")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Listen for Text Message from Remote or Local Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      0.0.0.0 = Any")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New(`$Port)")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempRemoteClient = `$RemoteClient")
  [Void]$StringBuilder.AppendLine("    `$Message = `$UDPClient.Receive([ref]`$TempRemoteClient)")
  [Void]$StringBuilder.AppendLine("    `$DecodedMessage = [Text.Encoding]::ASCII.GetString(`$Message)")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object  `"Message From: `$(`$TempRemoteClient.Address) - `$(`$DecodedMessage)`"")
  [Void]$StringBuilder.AppendLine("  } While (`$True -and (`$DecodedMessage -ne `"Exit`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Listen-MyTextMessage
  
  #region ******** class TestMyWorkstation ********
  [Void]$StringBuilder.AppendLine("#region ******** class TestMyWorkstation ********")
  [Void]$StringBuilder.AppendLine("class TestMyWorkstation")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [String]`$FQDN = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Found = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$DomainMember = `$False")
  [Void]$StringBuilder.AppendLine("  [int]`$ProductType = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Model = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsMobile = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [Long]`$Memory = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$OperatingSystem = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$BuildNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Version = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$ServicePack = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Architecture = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Is64Bit = `$False;")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LocalDateTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$InstallDate = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LastBootUpTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [String]`$IPAddress = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Status = `"Off-Line`"")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  TestMyWorkstation ([String]`$IPAddress)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddComputerSystem ([String]`$TestName, [String]`$ComputerName, [Bool]`$DomainMember, [String]`$Domain, [String]`$Manufacturer, [String]`$Model, [String]`$UserName, [Long]`$Memory)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `"`$(`$ComputerName)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    `$This.DomainMember = `$DomainMember")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `"`$(`$Domain)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    if (`$DomainMember)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.FQDN = `"`$(`$ComputerName).`$(`$Domain)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    `$This.Memory = `$Memory")
  [Void]$StringBuilder.AppendLine("    `$This.Found = (`$ComputerName -eq @(`$TestName.Split(`".`"))[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddOperatingSystem ([int]`$ProductType, [String]`$OperatingSystem, [String]`$ServicePack, [String]`$BuildNumber, [String]`$Version, [String]`$Architecture, [DateTime]`$LocalDateTime, [DateTime]`$InstallDate, [DateTime]`$LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ProductType = `$ProductType")
  [Void]$StringBuilder.AppendLine("    `$This.OperatingSystem = `$OperatingSystem")
  [Void]$StringBuilder.AppendLine("    `$This.ServicePack = `$ServicePack")
  [Void]$StringBuilder.AppendLine("    `$This.BuildNumber = `$BuildNumber")
  [Void]$StringBuilder.AppendLine("    `$This.Version = `$Version")
  [Void]$StringBuilder.AppendLine("    `$This.Architecture = `$Architecture")
  [Void]$StringBuilder.AppendLine("    `$This.Is64Bit = (`$Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("    `$This.LocalDateTime = `$LocalDateTime")
  [Void]$StringBuilder.AppendLine("    `$This.InstallDate = `$InstallDate")
  [Void]$StringBuilder.AppendLine("    `$This.LastBootUpTime = `$LastBootUpTime")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddSerialNumber ([String]`$SerialNumber)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddIsMobile ([Long[]]`$ChassisTypes)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains `$ChassisTypes[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] UpdateStatus ([String]`$Status)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `$Status")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [TestMyWorkstation] SetEndTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    return `$This")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [TimeSpan] GetRunTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    return (`$This.EndTime - `$This.StartTime)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** class TestMyWorkstation ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** class TestMyWorkstation ********
  
  #region function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("#region function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("function Test-MyWorkstation()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("        `"Credential`"   = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("          :FoundMyWork foreach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if ([System.Net.NetworkInformation.Ping]::New().Send(`$IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject = [TestMyWorkstation]::New(`$IPAddress)")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Get ComputerSystem")
  [Void]$StringBuilder.AppendLine("              [Void](`$MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject.AddComputerSystem(`$Computer, (`$MyCompData.Name), (`$MyCompData.PartOfDomain), (`$MyCompData.Domain), (`$MyCompData.Manufacturer), (`$MyCompData.Model), (`$MyCompData.UserName), (`$MyCompData.TotalPhysicalMemory))")
  [Void]$StringBuilder.AppendLine("              `$MyCompData.Dispose()")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("              if (`$VerifyObject.Found)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyOSData = Get-WmiObject @Params -ClassName Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.AddOperatingSystem((`$MyOSData.ProductType), (`$MyOSData.Caption), (`$MyOSData.CSDVersion), (`$MyOSData.BuildNumber), (`$MyOSData.Version), (`$MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)))")
  [Void]$StringBuilder.AppendLine("                `$MyOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyBIOSData = Get-WmiObject @Params -ClassName Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddSerialNumber(`$MyBIOSData.SerialNumber)")
  [Void]$StringBuilder.AppendLine("                  `$MyBIOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyChassisData = Get-WmiObject @Params -ClassName Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddIsMobile(`$MyChassisData.ChassisTypes)")
  [Void]$StringBuilder.AppendLine("                  `$MyChassisData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              else")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.UpdateStatus(`"Wrong Workstation Name`")")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("              break FoundMyWork")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.UpdateStatus(`"Workstation Not in DNS`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.UpdateStatus(`"Invalid Computer Name`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set End Time and Return Results")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject.SetEndTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  end")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Test-MyWorkstation
  
  #region class MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("Class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [String]`$FQDN = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Found = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$DomainMember = `$False")
  [Void]$StringBuilder.AppendLine("  [int]`$ProductType = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Model = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsMobile = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [Long]`$Memory = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$OperatingSystem = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$BuildNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Version = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$ServicePack = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Architecture = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Is64Bit = `$False;")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LocalDateTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$InstallDate = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LastBootUpTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [String]`$IPAddress = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Status = `"Off-Line`"")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  MyWorkstationInfo ([String]`$ComputerName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.FQDN = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddComputerSystem ([String]`$TestName, [String]`$IPAddress, [String]`$ComputerName, [Bool]`$DomainMember, [String]`$Domain, [String]`$Manufacturer, [String]`$Model, [String]`$UserName, [Long]`$Memory)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `"`$(`$ComputerName)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.DomainMember = `$DomainMember")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `"`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    If (`$DomainMember)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.FQDN = `"`$(`$ComputerName).`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    `$This.Memory = `$Memory")
  [Void]$StringBuilder.AppendLine("    `$This.Found = (`$ComputerName -eq @(`$TestName.Split(`".`"))[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddOperatingSystem ([int]`$ProductType, [String]`$OperatingSystem, [String]`$ServicePack, [String]`$BuildNumber, [String]`$Version, [String]`$Architecture, [DateTime]`$LocalDateTime, [DateTime]`$InstallDate, [DateTime]`$LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ProductType = `$ProductType")
  [Void]$StringBuilder.AppendLine("    `$This.OperatingSystem = `$OperatingSystem")
  [Void]$StringBuilder.AppendLine("    `$This.ServicePack = `$ServicePack")
  [Void]$StringBuilder.AppendLine("    `$This.BuildNumber = `$BuildNumber")
  [Void]$StringBuilder.AppendLine("    `$This.Version = `$Version")
  [Void]$StringBuilder.AppendLine("    `$This.Architecture = `$Architecture")
  [Void]$StringBuilder.AppendLine("    `$This.Is64Bit = (`$Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("    `$This.LocalDateTime = `$LocalDateTime")
  [Void]$StringBuilder.AppendLine("    `$This.InstallDate = `$InstallDate")
  [Void]$StringBuilder.AppendLine("    `$This.LastBootUpTime = `$LastBootUpTime")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddSerialNumber ([String]`$SerialNumber)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddIsMobile ([Long[]]`$ChassisTypes)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains `$ChassisTypes[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] UpdateStatus ([String]`$Status)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `$Status")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [MyWorkstationInfo] SetEndTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    Return `$This")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [TimeSpan] GetRunTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Return (`$This.EndTime - `$This.StartTime)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion class MyWorkstationInfo
  
  #region function Get-MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("Function Get-MyWorkstationInfo()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyWorkstationInfo -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("        `"Credential`"   = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer In `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject = [MyWorkstationInfo]::New(`$Computer)")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # Validate ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("          :FoundMyWork ForEach (`$IPAddress In `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            If ([System.Net.NetworkInformation.Ping]::New().Send(`$IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Set Default Parms")
  [Void]$StringBuilder.AppendLine("              `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Get ComputerSystem")
  [Void]$StringBuilder.AppendLine("              [Void](`$MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject.AddComputerSystem(`$Computer, `$IPAddress, (`$MyCompData.Name), (`$MyCompData.PartOfDomain), (`$MyCompData.Domain), (`$MyCompData.Manufacturer), (`$MyCompData.Model), (`$MyCompData.UserName), (`$MyCompData.TotalPhysicalMemory))")
  [Void]$StringBuilder.AppendLine("              `$MyCompData.Dispose()")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("              If (`$VerifyObject.Found)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.AddOperatingSystem((`$MyOSData.ProductType), (`$MyOSData.Caption), (`$MyOSData.CSDVersion), (`$MyOSData.BuildNumber), (`$MyOSData.Version), (`$MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)))")
  [Void]$StringBuilder.AppendLine("                `$MyOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                If (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddSerialNumber(`$MyBIOSData.SerialNumber)")
  [Void]$StringBuilder.AppendLine("                  `$MyBIOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                If (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddIsMobile(`$MyChassisData.ChassisTypes)")
  [Void]$StringBuilder.AppendLine("                  `$MyChassisData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              Else")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.UpdateStatus(`"Wrong Workstation Name`")")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("              Break FoundMyWork")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.UpdateStatus(`"Workstation Not in DNS`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.UpdateStatus(`"Invalid Computer Name`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # Set End Time and Return Results")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject.SetEndTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyWorkstationInfo
  
  #region function Get-MyNetAdapterConStatus
  [Void]$StringBuilder.AppendLine("#region function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("function Get-MyNetAdapterConStatus ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyNetAdapterConStatus -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      2022/07/05 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PhysicalMediumTypeList = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\WMI`" -Query `"Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1`" | Select-Object -Property InstanceName, NdisPhysicalMediumType)")
  [Void]$StringBuilder.AppendLine("  `$NetworkAdapters = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\CimV2`" -Query `"Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2`" | Select-Object -ExpandProperty Name)")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Wired`" = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 0) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    `"Wireless`" = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 9) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyNetAdapterConStatus
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Generic / General Functions ********
  
  #region ******* Registry / Environement Variable Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Reset-MyRegKeyOwner
  [Void]$StringBuilder.AppendLine("#region function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("function Reset-MyRegKeyOwner ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Take Ownership of a Registry Key and Reset Access Rules")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Take Ownership of a Registry Key and Reset Access Rules")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Win32.RegistryKey]`$Hive = [Microsoft.Win32.Registry]::LocalMachine,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Key,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ResetAccess,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Recurse")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$User.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-545`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-544`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Key: `$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("  `$TempKey = `$Hive.OpenSubKey(`$Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)")
  [Void]$StringBuilder.AppendLine("  `$ACL = [System.Security.AccessControl.RegistrySecurity]::New()")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetOwner(`$NewOwner)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetAccessRuleProtection(`$False, `$False)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ResetAccess.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)")
  [Void]$StringBuilder.AppendLine("    `$Rule = [System.Security.AccessControl.RegistryAccessRule]::New(`$NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)")
  [Void]$StringBuilder.AppendLine("    `$ACL.ResetAccessRule(`$Rule)")
  [Void]$StringBuilder.AppendLine("    `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Recurse.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"Key`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"ResetAccess`")")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`")")
  [Void]$StringBuilder.AppendLine("    foreach (`$SubKey in @(`$TempKey.GetSubKeyNames()))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner @PSBoundParameters -Key `"`$(`$Key)\`$(`$SubKey)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Reset-MyRegKeyOwner
  
  #region function Set-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Set-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to write the values under. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The Data to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MultiValue")
  [Void]$StringBuilder.AppendLine("      Write Multiple values to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Write to the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Write to the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value `"Value`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value @(`"This`", `"That`") -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ")
  [Void]$StringBuilder.AppendLine("      Use @() or (,) when specifing the Value paramter value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value (,8) -Bitness `"64`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Number arrays are written to the registry as strings.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value 0 -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -MultiValue @{`"Name`" = `"MyName`"; `"Number`" = 4; `"Array`" = @(`"First`", 2, `"3rd`", 4)} -Computer -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Value,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$MultiValue,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the Registry Keys if Needed.")
  [Void]$StringBuilder.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `$RegPath -Name `"MyISScriptData`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Error Creating Registry Key : MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `"`$RegPath\MyISScriptData`" -Name `$Script)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Error Creating Registry Key : `$Script`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write the values to the registry.")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Multi`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$MultiValue.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$MultiValue[`$Key] -is [Array])")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = [String[]]`$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Key -Value `$Data)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Value -is [Array])")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = [String[]]`$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Name -Value `$Data)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyISScriptData
  
  #region function Get-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Get-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Get-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to read the values from. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to read")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Read from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Read from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Bitness `"32`" -Script `"ScriptName`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"64`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Path")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -eq `"64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RegPath = `"Registry::HKEY_CURRENT_USER\Software`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get the values from the registry.")
  [Void]$StringBuilder.AppendLine("  Get-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`" | Select-Object -Property `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyISScriptData
  
  #region function Remove-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Remove-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to remove. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Remove from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Remove from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer -Script `"ScriptName`" -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Remove the values from the registry.")
  [Void]$StringBuilder.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void](Remove-Item -Path `"`$RegPath\MyISScriptData\`$Script`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyISScriptData
  
  #region function Get-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Get-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable = `"%`",")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name like '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query `$Query")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-EnvironmentVariable
  
  #region function Set-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Set-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        New-CimInstance -CimSession `$CimSession -ClassName Win32_Environment -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value; `"UserName`" = `$UserName }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Set-CimInstance -InputObject `$Instance -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value } -PassThru")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-EnvironmentVariable
  
  #region function Remove-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Remove-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-CimInstance -InputObject `$Instance")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-EnvironmentVariable
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Registry / Environement Variable Functions ********
  
  #region ******* Import / Install Module Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Install-MyPackageProvider
  [Void]$StringBuilder.AppendLine("#region function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("function Install-MyPackageProvider ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Installs the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Installs the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The Name of the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyPackageProvider -Name `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$CommonParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Install-PackageProvider @CommonParams -Scope `$Scope -MinimumVersion `"`$(`$Version)`" -Force | Out-Null")
  [Void]$StringBuilder.AppendLine("      if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$True; `"Restart`" = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = `$True; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyPackageProvider
  
  #region function Install-MyModule
  [Void]$StringBuilder.AppendLine("#region function Install-MyModule")
  [Void]$StringBuilder.AppendLine("Function Install-MyModule ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Checks for, and Installs if Required, and Imports the Specified Module")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Checks for, and Installs if Required, and Imports the Specified Module")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Repository")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Install")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyModule -Name `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      12/09/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("      02/28/2024 - Update Parameters, Add Repository, Remove AcceptLicense")
  [Void]$StringBuilder.AppendLine("      05/23/2024 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Repository = `"sie-powershell`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install,")
  [Void]$StringBuilder.AppendLine("    [String]`$SourceLocation = `"https://artifactory.providence.org/artifactory/api/nuget/sie-powershell`",")
  [Void]$StringBuilder.AppendLine("    [String]`$PublishLocation = `"https://artifactory.providence.org/artifactory/api/nuget/sie-powershell-local`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Zero Verion for Checks")
  [Void]$StringBuilder.AppendLine("  `$ZeroVersion = [Version]::new(0, 0, 0, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Module Common Parameters")
  [Void]$StringBuilder.AppendLine("  `$GMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Install Module Parameters")
  [Void]$StringBuilder.AppendLine("  `$IMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Version`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IMParams.Add(`"RequiredVersion`", `$Version)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check if Module is Already Imported")
  [Void]$StringBuilder.AppendLine("  `$ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Installed Module Versions")
  [Void]$StringBuilder.AppendLine("    `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Check if Repo Exists")
  [Void]$StringBuilder.AppendLine("        `$ChkRepo = Get-PSRepository -Name `$Repository -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkRepo.Name))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Add Custom Repo")
  [Void]$StringBuilder.AppendLine("          Register-PSRepository -Name `$Repository -SourceLocation `$SourceLocation -PublishLocation `$PublishLocation -InstallationPolicy `"Trusted`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Install / Update Module")
  [Void]$StringBuilder.AppendLine("        Install-Module @IMParams -Repository `$Repository -Scope `$Scope -Force -AllowClobber | Out-Null")
  [Void]$StringBuilder.AppendLine("        If (`$Repository -ne `"PSGallery`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Remove Custom Repo")
  [Void]$StringBuilder.AppendLine("          Unregister-PSRepository -Name `$Repository")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Module Installed Failed")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install Failed`" }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Import Module")
  [Void]$StringBuilder.AppendLine("          Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("          # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("          `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("          If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Module Install / Import Succeeded")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Install / Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Failed`" }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Not Installed`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Import Module")
  [Void]$StringBuilder.AppendLine("      Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("      # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("      `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("      If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Import Succeeded")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Import Failed")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Import Failed`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Module Previously Imported")
  [Void]$StringBuilder.AppendLine("    If ((`$ChkInstalled.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Correct Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Correct Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Wrong Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Wrong Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyModule")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyModule
  
  #region function Install-MSALPS
  [Void]$StringBuilder.AppendLine("#region function Install-MSALPS")
  [Void]$StringBuilder.AppendLine("function Install-MSALPS ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MSALPS")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/21/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("      8/19/2021 - Change Write-Hosts to Status Messages")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MSALPS`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ((Install-MyModule -Name `"MSAL.PS`" -Version `"2.0.0.0`" -Scope `"AllUsers`").Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If ((Install-MyPackageProvider -Name `"NuGet`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install).Success)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If ((Install-MyModule -Name `"MSAL.PS`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install).Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # PackageProvider NuGet")
  [Void]$StringBuilder.AppendLine("      @{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MSALPS`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MSALPS")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MSALPS
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Import / Install Module Functions ********
  
  #region ******** Microsoft GraphAPI Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-UserToken
  [Void]$StringBuilder.AppendLine("#region function Get-UserToken")
  [Void]$StringBuilder.AppendLine("function Get-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -Interactive -ClientId `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`") -ExtraQueryParameters @{claims = '{`"access_token`" : {`"amr`": { `"values`": [`"mfa`"] }}}' }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UserToken
  
  #region function Refresh-UserToken
  [Void]$StringBuilder.AppendLine("#region function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("function Refresh-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -ForceRefresh -ClientId `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Refresh-UserToken
  
  #region function Get-MyOAuthApplicationToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Application OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Application OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyOAuthApplicationToken -TenantID `$TenantID -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"New`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    `"Scope`"         = `$Scope")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = Invoke-RestMethod -Uri `$Uri -Body `$Body -Method Post -ContentType `"application/x-www-form-urlencoded`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Successful Authentication")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthApplicationToken
  
  #region function Get-MyOAuthCertToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Certificate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Certificate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Certificate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthCertToken -TenantID `$TenantID -ClientID `$ClientID -Certificate `$Certificate")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Certificate,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Cert = Get-Item -Path `"Cert:\CurrentUser\My\`$(`$Certificate)`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create base64 hash of certificate")
  [Void]$StringBuilder.AppendLine("    `$CertHash = [System.Convert]::ToBase64String(`$Cert.GetCertHash()) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT timestamp for expiration")
  [Void]$StringBuilder.AppendLine("    `$StartDate = (Get-Date -Date `"1970-01-01T00:00:00Z`").ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    `$JWTExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End (Get-Date).ToUniversalTime().AddMinutes(2)).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$JWTExpiration = [math]::Round(`$JWTExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT validity start timestamp")
  [Void]$StringBuilder.AppendLine("    `$NotBeforeExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End ((Get-Date).ToUniversalTime())).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$NotBefore = [math]::Round(`$NotBeforeExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT header")
  [Void]$StringBuilder.AppendLine("    `$JWTHeader = @{")
  [Void]$StringBuilder.AppendLine("      alg = `"RS256`"")
  [Void]$StringBuilder.AppendLine("      typ = `"JWT`"")
  [Void]$StringBuilder.AppendLine("      # Use the CertHash and replace/strip to match web encoding of base64")
  [Void]$StringBuilder.AppendLine("      x5t = `$CertHash")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Convert header and payload to base64")
  [Void]$StringBuilder.AppendLine("    `$JWTHeaderToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTHeader | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedHeader = [System.Convert]::ToBase64String(`$JWTHeaderToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT payload")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoad = @{")
  [Void]$StringBuilder.AppendLine("      # What endpoint is allowed to use this JWT")
  [Void]$StringBuilder.AppendLine("      aud = `"https://login.microsoftonline.com/`$TenantID/oauth2/token`"")
  [Void]$StringBuilder.AppendLine("      # Expiration timestamp")
  [Void]$StringBuilder.AppendLine("      exp = `$JWTExpiration")
  [Void]$StringBuilder.AppendLine("      # Issuer = your application")
  [Void]$StringBuilder.AppendLine("      iss = `$ClientID")
  [Void]$StringBuilder.AppendLine("      # JWT ID: random guid")
  [Void]$StringBuilder.AppendLine("      jti = [guid]::NewGuid()")
  [Void]$StringBuilder.AppendLine("      # Not to be used before")
  [Void]$StringBuilder.AppendLine("      nbf = `$NotBefore")
  [Void]$StringBuilder.AppendLine("      # JWT Subject")
  [Void]$StringBuilder.AppendLine("      sub = `$ClientID")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoadToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTPayload | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedPayload = [System.Convert]::ToBase64String(`$JWTPayLoadToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join header and Payload with `".`" to create a valid (unsigned) JWT")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$EncodedHeader + `".`" + `$EncodedPayload")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Define RSA signature and hashing algorithm")
  [Void]$StringBuilder.AppendLine("    `$RSAPadding = [Security.Cryptography.RSASignaturePadding]::Pkcs1")
  [Void]$StringBuilder.AppendLine("    `$HashAlgorithm = [Security.Cryptography.HashAlgorithmName]::SHA256")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a signature of the JWT")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$Cert.PrivateKey.SignData([System.Text.Encoding]::UTF8.GetBytes(`$JWT), `$HashAlgorithm, `$RSAPadding)) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join the signature to the JWT with `".`"")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$JWT + `".`" + `$Signature")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a hash with body parameters")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      client_id             = `$ClientID")
  [Void]$StringBuilder.AppendLine("      client_assertion      = `$JWT")
  [Void]$StringBuilder.AppendLine("      client_assertion_type = `"urn:ietf:params:oauth:client-assertion-type:jwt-bearer`"")
  [Void]$StringBuilder.AppendLine("      scope                 = `$Scope")
  [Void]$StringBuilder.AppendLine("      grant_type            = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Use the self-generated JWT as Authorization")
  [Void]$StringBuilder.AppendLine("    `$Header = @{")
  [Void]$StringBuilder.AppendLine("      Authorization = `"Bearer `$JWT`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Splat the parameters for Invoke-Restmethod for cleaner code")
  [Void]$StringBuilder.AppendLine("    `$PostSplat = @{")
  [Void]$StringBuilder.AppendLine("      ContentType = 'application/x-www-form-urlencoded'")
  [Void]$StringBuilder.AppendLine("      Method      = 'POST'")
  [Void]$StringBuilder.AppendLine("      Body        = `$Body")
  [Void]$StringBuilder.AppendLine("      Uri         = `"https://login.microsoftonline.com/`$TenantID/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("      Headers     = `$Header")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((`$AuthResult = Invoke-RestMethod @PostSplat)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthCertToken
  
  #region function Get-MyOAuthDelegateToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Delegate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Delegate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Application")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthDelegateToken -TenantID `$TenantID -ClientID `$ClientID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Updated Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [String]`$RedirectUri = `"https://localhost`",")
  [Void]$StringBuilder.AppendLine("    [String]`$State = `"MyState`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Web.HttpUtility`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Web`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Windows.Forms.Form`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempRedirectUri = [System.Web.HttpUtility]::UrlEncode(`$RedirectUri)")
  [Void]$StringBuilder.AppendLine("  `$TempScope = [System.Web.HttpUtility]::UrlEncode((`$Scope -join `"%20`"))")
  [Void]$StringBuilder.AppendLine("  `$AuthUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/authorize?client_id=`$(`$ClientID)&state=`$(`$State)&redirect_uri=`$(`$TempRedirectUri)&scope=`$(`$TempScope)&response_type=code&response_mode=query`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Size = [System.Drawing.Size]::New(480, 680)")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopLevel = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopMost = `$True")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.add_Shown({ `$This.Activate() })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Controls.Add(`$OADWebBrowser)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Location = [System.Drawing.Point]::New(4, 4)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Size = [System.Drawing.Size]::New(472, 672)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.ScriptErrorsSuppressed = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Url = `$AuthUri")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.add_DocumentCompleted({ if (`$This.Url.Query -match `"error=[^&]*|code=[^&]*`") { `$This.Parent.Close() } })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.ShowDialog(`$$($MyScriptName)Form) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Code = [System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Code`"))))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      `"Error`"      = ([System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Error`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Authorized")
  [Void]$StringBuilder.AppendLine("    `$TokenUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"Client_ID`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("      `"Scope`"         = `$Scope")
  [Void]$StringBuilder.AppendLine("      `"Code`"          = `$Code")
  [Void]$StringBuilder.AppendLine("      `"Redirect_Uri`"  = `$RedirectUri")
  [Void]$StringBuilder.AppendLine("      `"Grant_Type`"    = `"authorization_code`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AuthResult = (Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$TokenUri -ContentType `"application/x-www-form-urlencoded`" -Body `$Body -ErrorAction SilentlyContinue).Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch {}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthDelegateToken
  
  #region function Get-MyOAuthUserToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get User OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get User OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EMail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PromptConsent")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -Credential `$Credential -TenantID `$TenantID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -EMail `$EMail -Password `$Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -EMail `$EMail -PromptConsent")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$AuthToken.ExpiresOn -gt [System.DateTimeOffset]::MinValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # You are Good")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Logon Failed!")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Credential`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID = `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$EMail,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PromptConsent,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Credential`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceUri = `"https://graph.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthUserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$AzureADModule = @(Get-Module -Name `"AzureAD`" -ListAvailable | Sort-Object -Property `"Version`" -Descending)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AzureADModule.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Credential`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Authority = `"https://login.microsoftonline.com/`$(`$TenantID)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Authority = `"https://login.microsoftonline.com/`$(`$EMail.Host)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadFrom(`"`$(`$AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.dll`")")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadFrom(`"`$(`$AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$AuthContext = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext]::New(`$Authority)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"AskPassword`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RedirectUri = `"urn:ietf:wg:oauth:2.0:oob`"")
  [Void]$StringBuilder.AppendLine("      `$PlatformParameters = [Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters]::New(`"Auto`")")
  [Void]$StringBuilder.AppendLine("      `$UserID = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier]::New((`$EMail.Address), `"OptionalDisplayableId`")")
  [Void]$StringBuilder.AppendLine("      if (`$PromptConsent.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$AuthResult = `$AuthContext.AcquireTokenAsync(`$ResourceUri, `$ClientID, `$RedirectUri, `$PlatformParameters, `$UserID, `"prompt=admin_consent`").Result")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$AuthResult = `$AuthContext.AcquireTokenAsync(`$ResourceUri, `$ClientID, `$RedirectUri, `$PlatformParameters, `$UserID).Result")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSCmdlet.ParameterSetName -eq `"Password`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New((`$EMail.Address), (ConvertTo-SecureString -String `$Password -AsPlainText -Force))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New((`$Credential.UserName), (`$Credential.Password))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$AuthResult = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions]::AcquireTokenAsync(`$AuthContext, `$ResourceUri, `$ClientID, `$UserCredentials).Result")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$AuthResult.AccessToken))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`" = [System.DateTimeOffset]::MinValue")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.AccessToken")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`"     = `$AuthResult.ExpiresOn")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Azure Module not Found")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"ExpiresOn`" = [System.DateTimeOffset]::MinValue")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthUserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthUserToken
  
  #region function Get-MyGraphQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderBy")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Skip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGraphQuery -AuthToken `$AuthToken -Resource `$Resource")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Count,")
  [Void]$StringBuilder.AppendLine("    [String]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [String]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$OrderBy,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 500,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Skip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MyFilters = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Count.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$count=true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$search=```"`$(`$Search)```"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"OrderBy`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$orderby=`$((`$OrderBy -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Skip`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$skip=`$(`$Skip)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Filter`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$filter=`$(`$Filter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Expand`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$expand=`$(`$Expand)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$MyFilters.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)?`$((`$MyFilters -join `"&`"))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGraphQuery
  
  #region function Get-MyGQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGQuery -AuthToken `$AuthToken -Resource `$Resource")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Wait = 100")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds `$Wait")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  While ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGQuery
  
  #region function Send-MyGraphMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("Function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Mail via Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Mail via Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UsedID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mention")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReplyTo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Importance")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Flagged")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeliveryReceipt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadReceipt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SaveToSent")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyGraphMail -Subject `$Subject -Body `$Body -To `$To -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      23/06/08 Add Mention Option")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Me`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"v1.0`", `"Beta`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UsedID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsText,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$Mention,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$ReplyTo,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Importance = `"Normal`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Flagged,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$DeliveryReceipt,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ReadReceipt,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachments,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SaveToSent")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Message = [Ordered]@{ `"Message`" = [Ordered]@{ `"Subject`" = `$Subject } }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$AsText.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"TEXT`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"HTML`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Body.Add(`"Content`", `$Body)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"Importance`", `$Importance)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isDeliveryReceiptRequested`", (`$DeliveryReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isReadReceiptRequested`", (`$ReadReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$Flagged.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"flag`", [Ordered]@{ `"flagStatus`" = `"flagged`" })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"dueDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"startDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"From`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"from`", [Ordered]@{ `"emailAddress`" = @{ `"address`" = (`$From.Address) } })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"toRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("  `$TO | ForEach-Object -Process { [Void]`$Message.Message.toRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"`$Mention`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Mentions`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$Mention | ForEach-Object -Process { [Void]`$Message.Message.Mentions.Add(@{ `"Mentioned`" = @{ `"name`" = (`$PSItem.Address); `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"ccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$CC | ForEach-Object -Process { [Void]`$Message.Message.ccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"bccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$BCC | ForEach-Object -Process { [Void]`$Message.Message.bccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"ReplyTo`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"replyTo`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$ReplyTo | ForEach-Object -Process { [Void]`$Message.Message.replyTo.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Attachments`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Attachments`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    ForEach (`$File In `$Attachments)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If ([System.IO.File]::Exists(`$File))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Base64Encode = [Convert]::ToBase64String(([System.IO.File]::ReadAllBytes(`$File)))")
  [Void]$StringBuilder.AppendLine("        [Void]`$Message.Message.attachments.Add([Ordered]@{ `"@odata.type`" = `"#microsoft.graph.fileAttachment`"; `"Name`" = ([System.IO.Path]::GetFileName(`$File)); `"contentType`" = `"MIME types`"; `"contentBytes`" = `"`$(`$Base64Encode)`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Add(`"saveToSentItems`", (`$SaveToSent.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Me`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/me/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/users/`$(`$UserID)/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Result = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Post -Body (`$Message | ConvertTo-Json -Depth 99)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (`$Result.StatusCode -eq 202) }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyGraphMail
  
  #region function Send-MSTeamNotification
  [Void]$StringBuilder.AppendLine("#region function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("function Send-MSTeamNotification ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send MS Teams WebHook Notification")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send MS Teams WebHook Notification")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebHookUri")
  [Void]$StringBuilder.AppendLine("      MS teams WebHoot Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ThemeColor")
  [Void]$StringBuilder.AppendLine("      Message Theme Coloe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Message Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subtitle")
  [Void]$StringBuilder.AppendLine("      Message Sub Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facts")
  [Void]$StringBuilder.AppendLine("      Facts to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("      Nine Test Images 1 - 9")
  [Void]$StringBuilder.AppendLine("      https://teamsnodesample.azurewebsites.net/static/img/image#.png")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Button")
  [Void]$StringBuilder.AppendLine("      Buttons to Display")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebHookURI = `"https://Web Hook URL`"")
  [Void]$StringBuilder.AppendLine("      `$Title = `"Title`"")
  [Void]$StringBuilder.AppendLine("      `$Subtitle = `"Subtitle`"")
  [Void]$StringBuilder.AppendLine("      `$Facts = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Fact 1 Name`" = `"Fact 1 Value`"")
  [Void]$StringBuilder.AppendLine("        `"Fact 2 Name`" = `"Fact 2 Value`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Buttons = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Button01`" = `"http://www.intel.com`"")
  [Void]$StringBuilder.AppendLine("        `"Button02`" = `"http://www.microsoft.com`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Send-MSTeamNotification -WebHookUri `$WebHookURI -Title `$Title -Subtitle `$Subtitle -Facts `$Facts -Button `$Buttons")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/28/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Simple`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$WebHookUri,")
  [Void]$StringBuilder.AppendLine("    [String]`$ThemeColor = `"0076D7`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subtitle,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Facts,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 9)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Image = 9,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Button`")]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Button")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JSon = [Ordered]@{}")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@type`", `"MessageCard`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@context`", `"http://schema.org/extensions`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"themeColor`", `$ThemeColor)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"summary`", `$Title)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"sections`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections.Add([Ordered]@{`"activityTitle`" = `$Title})")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activitySubtitle`", `$Subtitle)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Text`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"activityText`", `$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activityImage`", `"https://teamsnodesample.azurewebsites.net/static/img/image`$(`$Image).png`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"Text`", `$Message)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facts`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"facts`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Fact in `$Facts.Keys) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.Sections[0].Facts.Add(([Ordered]@{`"name`" = `$Fact; `"value`" = `$Facts[`$Fact]}))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"markdown`", `"true`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Button`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Add(`"potentialAction`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Btn in `$Button.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction.Add([Ordered]@{`"@type`" = `"OpenUri`"})")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"name`", `$Btn)")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"targets`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].targets.Add(@{`"os`" = `"default`"; `"uri`" = `$Button[`$Btn]})")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-RestMethod -Uri `$WebHookURI -Method Post -Body (`$JSon | ConvertTo-Json -Depth 99) -ContentType 'application/json' -ErrorAction `"SilentlyContinue`" | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MSTeamNotification
  
  #region function Verify-MyPIMRoleActived
  [Void]$StringBuilder.AppendLine("#region function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("Function Verify-MyPIMRoleActived ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activated")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activateds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleName")
  [Void]$StringBuilder.AppendLine("      Name of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleID")
  [Void]$StringBuilder.AppendLine("      ID of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      UPN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      ID is User Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Me*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMe = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/Me?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty(`$TmpMe.ID))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `$TmpMe.ID")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"UserName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpUser = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/users/`$(`$UserName)?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$TmpUser.ID))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `$TmpUser.ID")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -like `"*RoleName`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRole = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles?```$filter=DisplayName eq '`$(`$RoleName)'&```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("    `$RoleID = `$TmpRole.Value.ID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$RoleID) -or (`$UserID -eq `"UnknownUserID`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Role Not Found")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("      `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("      `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ChkRoleMember = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles/`$(`$RoleID)/Members?```$filter=id eq '`$(`$UserID)'&```$Select=ID,userPrincipalName`"")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$ChkRoleMember.Value.ID))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is Not a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$ChkRoleMember.Value.ID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$ChkRoleMember.Value.userPrincipalName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verify-MyPIMRoleActived
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Microsoft GraphAPI Functions ********
  
  #region ******** SharePoint Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MySPLists
  [Void]$StringBuilder.AppendLine("#region function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("function Get-MySPLists ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)?```$select=Id,Title,ListItemEntityTypeFullName,ItemCount,LastItemDeletedDate,LastItemModifiedDate,LastItemUserModifiedDate`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return List of SharePoint Lists")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return SharePoint List")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPLists
  
  #region function Get-MySPListFields
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("function Get-MySPListFields ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Fields?```$filter=ReadOnlyField eq false&```$select=Id,Title,StaticName,InternalName,Required,ReadOnlyField,EnforceUniqueValues,FieldTypeKind,TypeAsString,TypeDisplayName`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return List of SharePoint List Fields")
  [Void]$StringBuilder.AppendLine("    (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, StaticName, InternalName, Required, ReadOnlyField, EnforceUniqueValues, FieldTypeKind, TypeAsString, TypeDisplayName")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListFields
  
  #region function Get-MySPListItems
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItems ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Max Number of Items to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Fields")
  [Void]$StringBuilder.AppendLine("      Name of the Fields to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Created")
  [Void]$StringBuilder.AppendLine("      Date Item was Created")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Date Item was Modified")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      Return all List Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Created `"3/3/2023 10:00 am`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -Modified `"3/3/2023 11:45`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID 13")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 100,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Fields = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Created,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Configure Initial Rest API Query Uri")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Created`") -or `$PSBoundParameters.ContainsKey(`"Modified`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Created`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Created`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Created.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Modified`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Modified.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TmpFilter = `"&```$filter=`$(`$TmpValName) gt '`$(`$TmpTime)Z'`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items?```$top=`$(`$Top)&```$orderby=Modified desc`$(`$TmpFilter)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpData = (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Items Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData.results | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Item Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$TmpData.`"__next`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItems
  
  #region function New-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("function New-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of New Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = [Ordered]@{`"Title`" = `"New Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -Headers `$AuthToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return New SharePoint List Item")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MySPListItem
  
  #region function Update-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Update-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of Updated Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem = [Ordered]@{`"Title`" = `"Updated Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$MergeToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$MergeToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Patch -Uri `$Uri -Headers `$MergeToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Updated SharePoint List Item")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MySPListItem
  
  #region function Delete-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Delete-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$DeleteToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$DeleteToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Delete -Uri `$Uri -Headers `$DeleteToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Success")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$True}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$False}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Delete-MySPListItem
  
  #region function Get-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment = `"None`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/getByFileName('{0}')`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  foreach (`$FileName in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri (`$Uri -f `$FileName) -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Attachment Success")
  [Void]$StringBuilder.AppendLine("      if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d.Results | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItemAttachment
  
  #region function Add-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Add-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/add(FileName='{0}')`"")
  [Void]$StringBuilder.AppendLine("  foreach (`$FilePath in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri (`$Uri -f [System.IO.Path]::GetFileName(`$FilePath)) -Headers `$AuthToken -InFile `$FilePath -ContentType `"application/octet-stream`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Delete Success")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MySPListItemAttachment
  
  [Void]$StringBuilder.AppendLine("#endregion ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** SharePoint Rest API Functions ********
  
  #region ******** Azure AD Storage Table Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Query")
  [Void]$StringBuilder.AppendLine("      Storage Account Table Query")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Top Number of Rows to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("      Property Values to Select")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("   .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Query,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Query`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$ArrayList.Add(`"```$filter=`$(`$Query)`")")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ArrayList.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TableQuery = `"?`$(`$ArrayList -join `"&`")`"")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"?`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`$(`$SASJoin)`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$NextRecords = `"`$(`$SASJoin)NextPartitionKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextPartitionKey`"])&NextRowKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextRowKey`"])`"")
  [Void]$StringBuilder.AppendLine("        `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$ReturnData.StatusCode -eq 200) -and (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`")) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyTableQuery
  
  #region function Add-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Add-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/202{2} {0:00}:{1:00}:{3:00}`" -f (`$A + 1), (`$B + 1), `$A, (`$A  + `$B)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Add-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Add-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"PartitionKey`", `$PartitionKey)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"RowKey`", `$RowKey)")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (-not `$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Prefer`", `"return-no-content`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)()`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)()?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201, 204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json) | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyTableQuery
  
  #region function Merge-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Merge-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Merge-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Merge-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method MERGE -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Merge-MyTableQuery
  
  #region function Update-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Update-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Update-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Update-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  #[Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyTableQuery
  
  #region function Remove-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Remove-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          #Remove-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("          Remove-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"     = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyTableQuery
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Storage Table Functions ********
  
  #region ******** Azure AD Message Queue Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Add-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Add-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to add to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageTTL")
  [Void]$StringBuilder.AppendLine("      Number of Seconds till Message Expires")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Encode")
  [Void]$StringBuilder.AppendLine("      Encode the text Message in Base64")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(-1, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$MessageTTL = 604800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Encode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Encode.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$(`$Message)</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"POST``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyQueueMessage
  
  #region function Clear-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Clear-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Clear-MyQueueMessage
  
  #region function Get-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Get-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NumMessages")
  [Void]$StringBuilder.AppendLine("      Number of Messages to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Peek")
  [Void]$StringBuilder.AppendLine("      Get Messages but don't flag them")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decode")
  [Void]$StringBuilder.AppendLine("      Decode the Base64 text Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 32)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$NumMessages = 1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Peek,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Peek.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PeekOnly = `"&peekonly=true`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"GET``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(200))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Messages = @(([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage)")
  [Void]$StringBuilder.AppendLine("    if (`$Messages.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Decode.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Messages | ForEach-Object -Process { `$PSItem.MessageText = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((`$PSItem.MessageText))) }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Messages")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyQueueMessage
  
  #region function Remove-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Remove-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyQueueMessage
  
  #region function Update-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Update-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"PUT``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyQueueMessage
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Message Queue Functions ********
  
  #region ******* Service Now Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Service Now Rest API Functions ********")
  
  #region ******** Class SNGroup ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("Class SNGroup")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$GroupID")
  [Void]$StringBuilder.AppendLine("  [String]`$Group_Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Group_Description")
  [Void]$StringBuilder.AppendLine("  [String]`$ParentID")
  [Void]$StringBuilder.AppendLine("  [String]`$Parent_Name")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNGroup ([String]`$GroupID, [String]`$Group_Name, [String]`$Group_Description, [String]`$ParentID, [String]`$Parent_Name, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.GroupID = `$GroupID")
  [Void]$StringBuilder.AppendLine("    `$This.Group_Name = `$Group_Name")
  [Void]$StringBuilder.AppendLine("    `$This.Group_Description = `$Group_Description")
  [Void]$StringBuilder.AppendLine("    `$This.ParentID = `$ParentID")
  [Void]$StringBuilder.AppendLine("    `$This.Parent_Name = `$Parent_Name")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNGroup ********
  
  #region function Get-SNGroup
  [Void]$StringBuilder.AppendLine("#region function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("function Get-SNGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNGroup -Credential `$Credential -ID `$ID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name, description, parent.sys_id, parent.name, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$GroupResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_group`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$GroupResult.StatusCode -eq 200) -and (`$GroupResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$GroupResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New(`$PSItem.sys_id, `$PSItem.name, `$PSItem.description, `$PSItem.`"parent.sys_id`", `$PSItem.`"parent.name`", `$PSItem.`"manager.sys_id`", `$PSItem.`"manager.name`", `$PSItem.`"manager.first_name`", `$PSItem.`"manager.last_name`", `$PSItem.`"manager.email`") }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$GroupResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNGroup
  
  #region ******** Class SNUser ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("Class SNUser")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UPN")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  [System.Collections.ArrayList]`$Groups = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNUser ([String]`$UserID, [String]`$User_FullName, [String]`$User_FirstName, [String]`$User_LastName, [String]`$User_UPN, [String]`$User_UserID, [String]`$User_UserName, [String]`$User_EMail, [String]`$User_EmployeeID, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.UserID = `$UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_FullName = `$User_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.User_FirstName = `$User_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.User_LastName = `$User_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.User_UPN = `$User_UPN")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserID = `$User_UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserName = `$User_UserName")
  [Void]$StringBuilder.AppendLine("    `$This.User_EMail = `$User_EMail")
  [Void]$StringBuilder.AppendLine("    `$This.User_EmployeeID = `$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddGroup ([String]`$GroupID, [String]`$Group_Name, [String]`$Group_Description, [String]`$ParentID, [String]`$Parent_Name, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$This.Groups.Add([SNGroup]::New(`$GroupID, `$Group_Name, `$Group_Description, `$ParentID, `$Parent_Name, `$MgrID, `$Mgr_FullName, `$Mgr_FirstName, `$Mgr_LastName, `$Mgr_EMail))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNUser ********
  
  #region function Get-SNUser
  [Void]$StringBuilder.AppendLine("#region function Get-SNUser")
  [Void]$StringBuilder.AppendLine("function Get-SNUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UPN")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EMail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EmployeeID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNUser -UserName `$ENV:UserName -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPN`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UPN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"EMail`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EMail,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EmployeeID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Groups")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UserName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"user_name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_samaccountname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UPN`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"email`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"employee_number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UserName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserName")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UPN`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UPN")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EMail")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EmployeeID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`" = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$UserResult.StatusCode -eq 200) -and (`$UserResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNUser]::New(`$User.sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_userprincipalname, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("        if (`$Groups.IsPresent)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = @{")
  [Void]$StringBuilder.AppendLine("            `"user.sys_id`" = `"`$(`$User.sys_id)`"")
  [Void]$StringBuilder.AppendLine("            `"sysparm_fields`" = `"group.sys_id, group.name, group.description, group.parent.sys_id, group.parent.name, group.manager.sys_id, group.manager.name, group.manager.first_name, group.manager.last_name, group.manager.email`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          `$MemberResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_grmember`" -Body `$Body -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("          if (`$MemberResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            (`$MemberResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { `$ReturnData.AddGroup(`$PSItem.`"group.sys_id`", `$PSItem.`"group.name`", `$PSItem.`"group.description`", `$PSItem.`"group.parent.sys_id`", `$PSItem.`"group.parent.name`", `$PSItem.`"group.manager.sys_id`", `$PSItem.`"group.manager.name`", `$PSItem.`"group.manager.first_name`", `$PSItem.`"group.manager.last_name`", `$PSItem.`"group.manager.email`") }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MemberResult = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNUser
  
  #region ******** Class SNAsset ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("Class SNAsset")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetID")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDBID")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  [String]`$DomainName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetTag")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$DeviceRole")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer")
  [Void]$StringBuilder.AppendLine("  [String]`$Model")
  [Void]$StringBuilder.AppendLine("  [String]`$Department")
  [Void]$StringBuilder.AppendLine("  [String]`$CostCenter")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$LocationID")
  [Void]$StringBuilder.AppendLine("  [String]`$State")
  [Void]$StringBuilder.AppendLine("  [String]`$Region")
  [Void]$StringBuilder.AppendLine("  [String]`$Room")
  [Void]$StringBuilder.AppendLine("  [String]`$Floor")
  [Void]$StringBuilder.AppendLine("  [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroupID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNAsset ([String]`$AssetID, [String]`$CMDBID, [String]`$ComputerName, [String]`$DomainName, [String]`$AssetTag, [String]`$SerialNumber, [String]`$DeviceRole, [String]`$Manufacturer, [String]`$Model, [String]`$Department, [String]`$CostCenter, [String]`$Location, [String]`$LocationID, [String]`$State, [String]`$Region, [String]`$Room, [String]`$Floor, [String]`$SGroup, [String]`$SGroupID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.AssetID = `$AssetID")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBID = `$CMDBID")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$ComputerName")
  [Void]$StringBuilder.AppendLine("    `$This.DomainName = `$DomainName")
  [Void]$StringBuilder.AppendLine("    `$This.AssetTag = `$AssetTag")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `$This.DeviceRole = `$DeviceRole")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.Department = `$Department")
  [Void]$StringBuilder.AppendLine("    `$This.CostCenter = `$CostCenter")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$Location")
  [Void]$StringBuilder.AppendLine("    `$This.LocationID = `$LocationID")
  [Void]$StringBuilder.AppendLine("    `$This.State = `$State")
  [Void]$StringBuilder.AppendLine("    `$This.Region = `$Region")
  [Void]$StringBuilder.AppendLine("    `$This.Room = `$Room")
  [Void]$StringBuilder.AppendLine("    `$This.Floor = `$Floor")
  [Void]$StringBuilder.AppendLine("    `$This.SGroup = `$SGroup")
  [Void]$StringBuilder.AppendLine("    `$This.SGroupID = `$SGroupID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [void] AddUser ([String]`$UserID, [String]`$User_FullName, [String]`$User_FirstName, [String]`$User_LastName, [String]`$User_UserID, [String]`$User_UserName, [String]`$User_EMail, [String]`$User_EmployeeID, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.UserID = `$UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_FullName = `$User_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.User_FirstName = `$User_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.User_LastName = `$User_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserID = `$User_UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserName = `$User_UserName")
  [Void]$StringBuilder.AppendLine("    `$This.User_EMail = `$User_EMail")
  [Void]$StringBuilder.AppendLine("    `$This.User_EmployeeID = `$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNAsset ********
  
  #region function Get-SNAsset
  [Void]$StringBuilder.AppendLine("#region function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("function Get-SNAsset()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get PSJH Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get PSJH Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computername")
  [Void]$StringBuilder.AppendLine("      Name of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetTag")
  [Void]$StringBuilder.AppendLine("      Asset tag of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      Serial Number of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -ComputerName `"OLT0069191`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -ComputerName `"OLT0069191`", `"WWA143874`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -AssetTag `"WWA143874`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -AssetTag `"WWA143874`", `"0069191`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -serialNumber `"CNU33890G2`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -serialNumber `"CNU33890G2`", `"CNU33890LQ`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `"OLT0069191`", `"WWA143874`" | Get-SNAsset -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance = `"psjh`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTag`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$AssetTag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumber`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"ci.name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"asset_tag`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"serial_number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ComputerName")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$AssetTag")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Id")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`" = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, asset_tag, serial_number, u_device_role, u_room, u_floor, StockRoom, substatus, reserved_for, assigned_to, ci.name, ci.dns_domain, ci.sys_id, department.name, department.id, location.name, location.sys_id, location.state, location.u_region.u_description, support_group.name, model.name, model.manufacturer.name, support_group.sys_id, support_group.name, stockroom`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      `$CompResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/alm_hardware`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$CompResult.StatusCode -eq 200) -and (`$CompResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Comp = (`$CompResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNAsset]::New(`$Comp.sys_id, `$Comp.`"ci.sys_id`", `$Comp.`"ci.name`", `$Comp.`"ci.dns_domain`", `$Comp.asset_tag, `$Comp.serial_number, `$Comp.u_device_role, `$Comp.`"model.manufacturer.name`", `$Comp.`"model.name`", `$Comp.`"department.name`", `$Comp.`"department.id`", `$Comp.`"location.name`", `$Comp.`"location.sys_id`", `$Comp.`"location.state`", `$Comp.`"location.u_region.u_description`", `$Comp.u_room, `$Comp.u_floor, `$Comp.`"support_group.name`", `$Comp.`"support_group.sys_id`")")
  [Void]$StringBuilder.AppendLine("        if ((-not [String]::IsNullOrEmpty(`$Comp.StockRoom)) -and (`$Comp.substatus -in @(`"reserved`", `"pending_install`")))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (-not [String]::IsNullOrEmpty(`$Comp.reserved_for))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `$Comp.reserved_for.link -Credential `$Credential -Body @{ `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`" }")
  [Void]$StringBuilder.AppendLine("            if (`$UserResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("              `$ReturnData.AddUser(`$User.Sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (-not [String]::IsNullOrEmpty(`$Comp.assigned_to))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `$Comp.assigned_to.link -Credential `$Credential -Body @{ `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`" }")
  [Void]$StringBuilder.AppendLine("            if (`$UserResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("              `$ReturnData.AddUser(`$User.Sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$Computer = `$Null")
  [Void]$StringBuilder.AppendLine("        `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CompResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset End Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNAsset
  
  #region ******** Class SNCMDBItem ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBItem ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDBID")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDB_Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNCMDBItem ([String]`$CMDBID, [String]`$CMDB_Name)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBID = `$CMDBID")
  [Void]$StringBuilder.AppendLine("    `$This.CMDB_Name = `$CMDB_Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBItem ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBItem ********
  
  #region function Get-SNCMDBItem
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBItem")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN Configuration Item from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN Configuration Item from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNCMDBItem -Credential `$Credential -ID `$ID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$CMDBItemResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBItemResult.StatusCode -eq 200) -and (`$CMDBItemResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$CMDBItemResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBItem]::New(`$PSItem.sys_id, `$PSItem.name) }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$CMDBItemResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBItem
  
  #region ******** Class SNNewIncident ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNNewIncident ********")
  [Void]$StringBuilder.AppendLine("Class SNNewIncident")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ID")
  [Void]$StringBuilder.AppendLine("  [String]`$Number")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNNewIncident ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNNewIncident ([String]`$ID, [String]`$Number)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ID = `$ID")
  [Void]$StringBuilder.AppendLine("    `$This.Number = `$Number")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNNewIncident ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNNewIncident ********
  
  #region function Create-SNIncident
  [Void]$StringBuilder.AppendLine("#region function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("function Create-SNIncident ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Create New Service Now Incident")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Create New Service Now Incident")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignGroup")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignUser")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AffectedUser")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Urgency")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Impact")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CMDBType")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CMDBItem")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Catagory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortDescription")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Create-SNIncident -AssignGroup `$AssignGroup -AffectedUser `$AffectedUser -CMDBItem `$CMDBItem -Catagory `$Catagory -ShortDescription `$ShortDescription -Description `$Description -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignUser,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AffectedUser,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Urgency = `"5`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Impact = `"5`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Application`", `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$CMDBType = `"Device`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CMDBItem,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Catagory,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ShortDescription,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Create-SNIncident`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"assignment_group`"      = `$AssignGroup")
  [Void]$StringBuilder.AppendLine("    `"short_description`"     = `$ShortDescription")
  [Void]$StringBuilder.AppendLine("    `"description`"           = `$Description")
  [Void]$StringBuilder.AppendLine("    `"u_affected_end_user`"   = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("    `"urgency`"               = `$Urgency")
  [Void]$StringBuilder.AppendLine("    `"impact`"                = `$Impact")
  [Void]$StringBuilder.AppendLine("    `"sysparm_display_value`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    `"u_configuration_item_type`" = `$CMDBType")
  [Void]$StringBuilder.AppendLine("    `"cmdb_ci`"               = `$CMDBItem")
  [Void]$StringBuilder.AppendLine("    `"u_category`"            = `$Catagory")
  [Void]$StringBuilder.AppendLine("    `"caller_id`"             = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AssignUser`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Body.Add(`"assigned_to`", `$AssignUser)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IncidentResult = Invoke-WebRequest -UseBasicParsing -Credential `$Credential -Method POST -Uri `"https://psjh.service-now.com/api/now/table/incident?sysparm_display_value=true`" -Body (`$Body | ConvertTo-Json) -ContentType `"application/json`"")
  [Void]$StringBuilder.AppendLine("    if (`$IncidentResult.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Incident = (`$IncidentResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("      [SNNewIncident]::New(`$Incident.sys_id, `$Incident.Number)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [SNNewIncident]::New()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [SNNewIncident]::New()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Create-SNIncident`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Create-SNIncident
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Service Now Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Service Now Rest API Functions ********
  
  #region ******** UMS Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-UMSRestAPI
  [Void]$StringBuilder.AppendLine("#region function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("function Connect-UMSRestAPI ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Username and Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebSession = Connect-UMSRestAPI -ComputerName `$ComputerName -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      If (`$WebSession.Cookies.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Logon Uri")
  [Void]$StringBuilder.AppendLine("  `$Uri = (`"https://{0}:{1}/umsapi/v{2}/login`" -f `$ComputerName, `$Port, `$Version)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Logon / Authorization Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Basic `" + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(`"`$(`$Credential.Username):`$(`$Credential.GetNetworkCredential().Password)`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create new Web Session")
  [Void]$StringBuilder.AppendLine("  `$WebSession = [Microsoft.Powershell.Commands.Webrequestsession]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Request WebSession Cookie")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -ContentType `"application/json`" -Headers `$Headers")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return WebSession")
  [Void]$StringBuilder.AppendLine("      `$TmpName, `$TmpValue = @((`$Response.Content | ConvertFrom-Json).Message -split `"=`")")
  [Void]$StringBuilder.AppendLine("      `$TmpCookie = [System.Net.Cookie]::New(`$TmpName, `$TmpValue, `"/`", `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      `$WebSession.Cookies.Add(`$TmpCookie)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch {}")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Return Web Session Object")
  [Void]$StringBuilder.AppendLine("  `$WebSession")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-UMSRestAPI
  
  #region function Get-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Get-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Short: Name, MAC, IP, Parent Folder")
  [Void]$StringBuilder.AppendLine("      OnLine: Short Info, OnLine Status")
  [Void]$StringBuilder.AppendLine("      Details: Short Info, OEM, Model, Serial, Hardware Info, IGEL OS Info")
  [Void]$StringBuilder.AppendLine("      Shadow: Short Info, VNC Password and Cert")
  [Void]$StringBuilder.AppendLine("      Children: Short Info")
  [Void]$StringBuilder.AppendLine("      Deviceattributes: Short Info")
  [Void]$StringBuilder.AppendLine("      Networkadapters: Short Info, NIC Info")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"short`", `"details`", `"online`", `"shadow`", `"children`", `"deviceattributes`", `"networkadapters`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets = `"short`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DeviceID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Device to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DeviceID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `"/{0}`" -f `$DeviceID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`"  = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"         = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$TmpDevice, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"      = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDevice
  
  #region function Get-UMSDirectories
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDirectories")
  [Void]$StringBuilder.AppendLine("function Get-UMSDirectories ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Children: Directory IDs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectories -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectories -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID -Facets children")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"children`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DirectoryID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Directory to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DirectoryID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `"/{0}`" -f `$DirectoryID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facets`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$TmpDirectory, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDirectories")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDirectories
  
  #region function Move-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Move-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Move-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}?operation=move`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$DirectoryID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMoves = `$Response.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpMove In `$TmpMoves)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$TmpMove.id")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = (`$TmpMove.results -eq `"successful`")")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `$TmpMove.results")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = 0")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `"Failed to Move Device`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"DeviceID`" = -1")
  [Void]$StringBuilder.AppendLine("      `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Move-UMSDevice
  
  #region function Remove-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Remove-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Remove-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  foreach (`$ID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/deletetcoffline`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$ID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Delete`"")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$True")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `"Failed to Remove Device`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-UMSDevice
  
  #region function Send-UMSDeviceComand
  [Void]$StringBuilder.AppendLine("#region function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("function Send-UMSDeviceComand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to send to the UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Send-UMSDeviceComand -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Command `$Command")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpResponse In `$Response)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        If (`$TmpResponse.Success)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"rebootX`", `"reboot`", `"shutdown`", `"wakeup`", `"settings2tc`", `"tcreset2facdefs`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}?command={4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", (`$Command.ToLower()))")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Post`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Status")
  [Void]$StringBuilder.AppendLine("      (`$Response.Content | ConvertFrom-Json).CommandExecList | ForEach-Object -Process { [PSCustomObject]@{ `"Success`" = (`$PSItem.Message -eq `"OK`"); `"id`" = `$PSItem.ID; `"state`" = `$PSItem.State; `"message`" = `$PSItem.Message } }")
  [Void]$StringBuilder.AppendLine("     }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"FAILED`"; `"message`" = `"Failed to Execute `$(`$Command) Command`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"ERROR`"; `"message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-UMSDeviceComand
  
  #region function Update-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Update-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      New UMS Device Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Site")
  [Void]$StringBuilder.AppendLine("      New UMS Device Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Department")
  [Void]$StringBuilder.AppendLine("      New UMS Device Department")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CostCenter")
  [Void]$StringBuilder.AppendLine("      New UMS Device CostCenter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastIP")
  [Void]$StringBuilder.AppendLine("      New UMS Device LastIP")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      New UMS Device Comment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetID")
  [Void]$StringBuilder.AppendLine("      New UMS Device AssetID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InserviceDate")
  [Void]$StringBuilder.AppendLine("      New UMS Device InserviceDate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      New UMS Device SerialNumber")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceAttributes")
  [Void]$StringBuilder.AppendLine("      New UMS Device DeviceAttributes")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Success = Update-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Name `$NewName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Site,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Department,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$CostCenter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastIP,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssetID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$InserviceDate,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$DeviceAttributes")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = @{ }")
  [Void]$StringBuilder.AppendLine("  foreach (`$Key in `$PSBoundParameters.Keys | Where-Object -FilterScript { `$PSItem -in @(`"Name`", `"Site`", `"Department`", `"CostCenter`", `"LastIP`", `"Comment`", `"AssetID`", `"InserviceDate`", `"SerialNumber`") })")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`$Key.ToLower(), `$PSBoundParameters[`$Key])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add Custom Device Attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"DeviceAttributes`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`"deviceAttributes`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Key in `$DeviceAttributes.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body.deviceAttributes.Add(@{ `"identifier`" = `$Key.ToLower(); `"value`" = `$DeviceAttributes[`$Key] }) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify New Update Values were Passed")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Update`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$DeviceID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("      `"Body`"       = (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("      `"Headers`"    = @{}")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        `$TmpMessage = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = (`$TmpMessage -eq `"Update successful`"); `"Message`" = `$TmpMessage }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Failed to Update Values`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"No Updated Values`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-UMSDevice
  
  
  #region function Get-UMSProfile
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfile")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfile ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get All Profiles")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Get-UMSProfile -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Specific Profile")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Get-UMSProfile -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ProfileID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfile`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Profile to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"ProfileID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpProfile = `"/{0}`" -f `$ProfileID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpProfile = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$TmpProfile)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfile
  
  #region function Get-UMSProfileDirectories
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfileDirectories")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfileDirectories ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profile Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profile Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Children: Directory IDs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get All Folders")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSProfileDirectories -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Specific Folder with list of Child Folder ID's")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSProfileDirectories -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID -Facets children")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"children`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DirectoryID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfileDirectories`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Directory to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DirectoryID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `"/{0}`" -f `$DirectoryID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facets`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"directories/profiledirectories`", `$TmpDirectory, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfileDirectories`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfileDirectories")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfileDirectories
  
  #region function Get-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get list of Profile Assignments for a Device or a Diirectory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get list of Profile Assignments for a Device or a Diirectory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to Get Profile Assignments for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to Get Profile Assignments for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get Profiles Assignments for Device")
  [Void]$StringBuilder.AppendLine("      Get-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Profiles Assignments for Directory")
  [Void]$StringBuilder.AppendLine("      Get-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Get Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"directories/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/assignments/profiles`" -f `$ComputerName, `$Port, `$Version, `$TmpType, `$TmpID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfileAssignment
  
  #region function New-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function New-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function New-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to Assign the Profile To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to Assign the Profile To")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Assign Profile to a Device")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = New-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Assign Profile to a Device Directory")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = New-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # New Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"tc`"")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"tcdirectory`"")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New(@(@{ `"assignee`" = @{ `"id`" = `$ProfileID; `"type`" = `"profile`" }; `"receiver`" = @{ `"id`" = `$TmpID; `"type`" = `$TmpType } }))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$ProfileID, `$TmpPath)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = (,`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("    # Return Success Status")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = (`$Result.Message -match `"successfully`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"Error Removing Profile Assignment`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-UMSProfileAssignment
  
  #region function Remove-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function Remove-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function Remove-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removed an Assigned profile from a Device or a Device Directory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removed an Assigned profile from a Device or a Device Directory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to remove the Profile from")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to remove the Profile from")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Remove Profile from a Device")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Remove-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Remove Profile from a Device Directory")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Remove-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # New Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}/{6}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$ProfileID, `$TmpPath, `$TmpID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Delete`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("    # Return Success Status")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = (`$Result.Message -match `"deleted profile assignment`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"Error Removing Profile Assignment`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-UMSProfileAssignment
  
  #region function Get-UMSStatus
  [Void]$StringBuilder.AppendLine("#region function Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("function Get-UMSStatus ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    `$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSStatus`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}`" -f `$ComputerName, `$Port, `$Version, `"serverstatus`")")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"Headers`"    = @{ }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  `$ReturnData")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSStatus
  
  [Void]$StringBuilder.AppendLine("#endregion ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** UMS Rest API Functions ********
  
  #region ******** Cyber Ark Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-MyCyberArk
  [Void]$StringBuilder.AppendLine("#region function Connect-MyCyberArk")
  [Void]$StringBuilder.AppendLine("Function Connect-MyCyberArk ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client Secret")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Connect-MyCyberArk -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("      If (`$AuthToken.ExpiresIn -ne [DateTime]::MinValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Logon Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"content-type`" = `"application/x-www-form-urlencoded`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Creaste Request Body")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # invoke Cyber Ark Login Rest API")
  [Void]$StringBuilder.AppendLine("    `$Request = Invoke-WebRequest -UseBasicParsing -Method POST -Headers `$Headers -Uri `"https://aat4728.id.cyberark.cloud/oauth2/platformtoken`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Request.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Cyber Ark Auth Token")
  [Void]$StringBuilder.AppendLine("      `$TmpToken = `$Request.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::Now.AddSeconds(`$TmpToken.expires_in)")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`$(`$TmpToken.token_type) `$(`$TmpToken.access_token)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"Failed`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"Error`"")
  [Void]$StringBuilder.AppendLine("      `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"`$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-MyCyberArk")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-MyCyberArk
  
  #region function Add-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Add-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Add-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Entry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DomainName")
  [Void]$StringBuilder.AppendLine("      Domain Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      User Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Password of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      Comment for the Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Add-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName -UserName `$UserName -Password `$Password -DomainName `$DomainName")
  [Void]$StringBuilder.AppendLine("      if (`$Result.ID -ne `"Error`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Add Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment = `"Kiosk User Account Added by '`$([System.Environment]::UserDomainName)\`$([System.Environment]::UserName)'`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpAddUser = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"name`"                 = `$EntryName")
  [Void]$StringBuilder.AppendLine("    `"address`"              = `$DomainName")
  [Void]$StringBuilder.AppendLine("    `"username`"             = `$UserName")
  [Void]$StringBuilder.AppendLine("    `"platformId`"           = `"Autologon_Disable_rotation`"")
  [Void]$StringBuilder.AppendLine("    `"safeName`"             = `$SafeName")
  [Void]$StringBuilder.AppendLine("    `"secretType`"           = `"password`"")
  [Void]$StringBuilder.AppendLine("    `"secret`"               = `$Password")
  [Void]$StringBuilder.AppendLine("    `"secretManagement`"     = @{")
  [Void]$StringBuilder.AppendLine("      `"automaticManagementEnabled`" = `"False`"")
  [Void]$StringBuilder.AppendLine("      `"manualManagementReason`"     = `$Comment")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"remoteMachinesAccess`" = @{")
  [Void]$StringBuilder.AppendLine("      `"remoteMachines`"                   = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"accessRestrictedToRemoteMachines`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/Accounts`"")
  [Void]$StringBuilder.AppendLine("    `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body (`$TmpAddUser | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Results.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Ststus")
  [Void]$StringBuilder.AppendLine("      `$Results.Content | ConvertFrom-Json | ForEach-Object -Process { [MyCyberArkAccount]::New(`$PSItem.ID, `$PSItem.Name, `$PSItem.Address, `$PSItem.UserName) }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Stataus")
  [Void]$StringBuilder.AppendLine("      [MyCyberArkAccount]::New(`"Error`", `$Results.StatusCode, `"Error`", `"Error`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Error Stataus")
  [Void]$StringBuilder.AppendLine("    [MyCyberArkAccount]::New(`"Error`", `"0`", `"Error`", `"`$(`$PSItem.Exception.Message)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyCyberArkAccount
  
  #region function Get-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Get-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Get-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Modified Time")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchType")
  [Void]$StringBuilder.AppendLine("      Search Type")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SavedFilter")
  [Void]$StringBuilder.AppendLine("      Saved Cyber Ark Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Offset")
  [Void]$StringBuilder.AppendLine("      Offset, Skip X Number of Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Limit")
  [Void]$StringBuilder.AppendLine("      Max Number of aqccounts to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Get Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Accounts = Get-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"contains`", `"startswith`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchType = `"contains`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SearchFilter`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Regular`", `"Recently`", `"New`", `"Link`", `"Deleted`", `"PolicyFailures`", `"AccessedByUsers`", `"ModifiedByUsers`", `"ModifiedByCPM`", `"DisabledPasswordByUserDisabledPasswordByCPM`", `"ScheduledForChange`", `"ScheduledForVerify`", `"ScheduledForReconcile`", `"SuccessfullyReconciled`", `"FailedChange`", `"FailedVerify`", `"FailedReconcile`", `"LockedOrNew`", `"Locked`", `"Favorites`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SavedFilter,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Offset = 0,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Limit = 100,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$GetPassword")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create StringBuilder to Generate the Cyber Ark Rest API Query String")
  [Void]$StringBuilder.AppendLine("  `$TmpSearch = [System.Text.StringBuilder]::New(`"filter=safename eq `$(`$SafeName) and ModificationTime gte 0`")")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Search`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Criteria")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpSearch.Append(`"&search=`$(`$Search -join ' ')&searchType=`$(`$SearchType)`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Saved Filter")
  [Void]$StringBuilder.AppendLine("    [Void]`$TmpSearch.Append(`"&savedfilter=`$(`$SavedFilter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  # Set Search Offset and Limit")
  [Void]$StringBuilder.AppendLine("  [Void]`$TmpSearch.Append(`"&offset=`$(`$offset)&limit=`$(`$Limit)`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts?`$(`$TmpSearch.ToString())`"")
  [Void]$StringBuilder.AppendLine("  `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Get -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("  If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Process Returened Cyber Ark Records")
  [Void]$StringBuilder.AppendLine("    `$TmpUsers = (`$Results.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TmpUser In `$TmpUsers)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create Return Object")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount = [MyCyberArkAccount]::New(`$TmpUser.ID, `$TmpUser.Name, `$TmpUser.Address, `$TmpUser.UserName, `$TmpUser.CreatedTime, `$TmpUser.secretManagement.lastModifiedTime)")
  [Void]$StringBuilder.AppendLine("      # Check if Get Password Switch was Passed")
  [Void]$StringBuilder.AppendLine("      If (`$GetPassword.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Generate Request URL and Body")
  [Void]$StringBuilder.AppendLine("        `$PwdUri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpUser.id)/Password/Retrieve/`"")
  [Void]$StringBuilder.AppendLine("        `$PwdBody = @{")
  [Void]$StringBuilder.AppendLine("          `"Reason`"     = `"Deployment Automation`"")
  [Void]$StringBuilder.AppendLine("          `"ActionType`" = `"Show`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("        `$PwdResult = Invoke-WebRequest -UseBasicParsing -Uri `$PwdUri -Method Post -Headers `$AuthToken -Body (`$PwdBody | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("        # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("        If (`$PwdResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Check for and Get/AddPassword")
  [Void]$StringBuilder.AppendLine("          `$TmpPword = [RegEx]::Match(`$PwdResult.Content, `"^```"(?<Password>.+)```"`$`")")
  [Void]$StringBuilder.AppendLine("          If (`$TmpPword.Groups[`"Password`"].Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Add Password")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`$TmpPword.Groups[`"Password`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Password Missing?")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`"Missing`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Error Getting Password")
  [Void]$StringBuilder.AppendLine("          `$TmpAccount.AddPassword(`"Error`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Return Cyber Ark Account To Pipeline")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyCyberArkAccount
  
  #region function Remove-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Remove-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Remove-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Vault Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark User ID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Results = Remove-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts/`$(`$TmpID)/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Delete -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Returen Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Delete User: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyCyberArkAccount
  
  #region function Update-MyCyberArkAccountPassword
  [Void]$StringBuilder.AppendLine("#region function Update-MyCyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("Function Update-MyCyberArkAccountPassword ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Authentication Token from Connect-MyCyberArkVault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Account ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      New Password for the Cyber Ark Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-MyCyberArkAccountPassword -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID -Password `$Password")
  [Void]$StringBuilder.AppendLine("      If (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Password Updated")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpChange = @{")
  [Void]$StringBuilder.AppendLine("    `"NewCredentials`" = `$Password")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TmpPwdBody = `$TmpChange | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpID)/Password/Update/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body `$TmpPwdBody")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Password Update: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyCyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyCyberArkAccountPassword
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Cyber Ark Rest API Functions ********
  
  #region ******** VPSX Server Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Set-MyVPSXWebService
  [Void]$StringBuilder.AppendLine("#region function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Set-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER passThru")
  [Void]$StringBuilder.AppendLine("      Return the Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyVPSXWebService -VPSXUri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Set-MyVPSXWebService -VPSXUri `$VPSXUri -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyVPSXWebService
  
  #region function Get-MyVPSXWebService
  [Void]$StringBuilder.AppendLine("#region function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Set-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER passThru")
  [Void]$StringBuilder.AppendLine("      Return the Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyVPSXWebService -VPSXUri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Set-MyVPSXWebService -VPSXUri `$VPSXUri -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXWebService
  
  #region function Connect-MyVPSXSession
  [Void]$StringBuilder.AppendLine("#region function Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("function Connect-MyVPSXSession ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      URL to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession -PSXUri `$PSXUri -VPSXToken `$VPSXToken")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Make Initial Connection")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Refresh Current Connection")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Refresh Current Connection")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Init`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Init`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Init`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Connect To UMS Web Services")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebToken = `$VPSXToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebService = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebToken = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Verify Connected to Web Services")
  [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty(`$Script:VPSXWebService.SoapVersion))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Login to UMS Web Services")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = `$Script:VPSXWebService.Gateway_Logon(`$Null, `$Script:VPSXWebToken)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Nissing Web Service")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Error Clear Session ID")
  [Void]$StringBuilder.AppendLine("    `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status / Session ID")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (-not [String]::IsNullOrEmpty(`$VPSXSessionID)); `"SessionID`" = `$VPSXSessionID }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-MyVPSXSession
  
  #region function Get-MyVPSXLocation
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXLocation ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Locations to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Locations to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXLocation -Scroll 0 -Maximum 100 -Location `$Location")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [String]`$Location = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Location List")
  [Void]$StringBuilder.AppendLine("    `$TmpLocations = [Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy1exe_vpsx_nlrswc2_exe_trid_VPSX.LCLST_Struct[]]::New(`$Maximum)")
  [Void]$StringBuilder.AppendLine("    `$ChkCount = `$VPSXWebService.VPS_GetLocations((`$VPSXSessionID).SessionID, `$Location, `$Scroll, `$Maximum, [Ref]`$TmpLocations)")
  [Void]$StringBuilder.AppendLine("    if (`$ChkCount -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Locations")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpLocations | Sort-Object -Property Loc | ForEach-Object -Process { [PSCustomObject]@{ `"Location`" = `"`$(`$PSItem.Loc)`".ToUpper(); `"HasChildren`" = `$PSItem.Child } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXLocation
  
  #region function Get-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Items = Get-MyVPSXItem -Device `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXItem -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Device")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @(`$VPSXWebService.VSPA_GetItems((`$VPSXSessionID).SessionID, 1, `$Item, `$Maximum, `$Scroll, `$Null))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Device List")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @(`$VPSXWebService.VSPA_GetItems((`$VPSXSessionID).SessionID, 1, `$Null, 1, 0, `$Item))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TmpItems.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpItems | ForEach-Object -Process { [PSCustomObject]@{ `"Item`" = `$PSItem.Item; `"Description`" = `$PSItem.Desc; `"DefaultPrt`" = `$PSItem.DefaultPrt } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXItem
  
  #region function Add-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Add-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("function Add-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("      Description of Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItem -Item `$Item -Description `$Description")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description")
  [Void]$StringBuilder.AppendLine(")")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_SetItem((`$VPSXSessionID).SessionID, 1, `$Item, `$Description, 0)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `"Item Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyVPSXItem
  
  #region function Remove-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Remove-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("Function Remove-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Remove-MyVPSXItem -Item `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_RemoveItem((`$VPSXSessionID).SessionID, 1, `$Item)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Message`" = `"Item Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyVPSXItem
  
  #region function Get-MyVPSXPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXPrinter")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Location of Printers")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXPrinter -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXPrinter -Scroll 0 -Maximum 100 -Printer `$Printer -Location `$Location -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Int]`$FirstPrt = 0")
  [Void]$StringBuilder.AppendLine("    [Int]`$LastPrt = 0")
  [Void]$StringBuilder.AppendLine("    [Int]`$TotalPrt = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VPS_PrtList7((`$VPSXSessionID).SessionID, `$Printer, `$Null, `$Null, 0, `$Maximum, `$Scroll, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Location, [ref]`$FirstPrt, [ref]`$LastPrt, [ref]`$TotalPrt))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Printer List")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VPS_PrtList7((`$VPSXSessionID).SessionID, `$Nullr, `$Null, `$Null, 0, 1, 0, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Printe, `$Location, [ref]`$FirstPrt, [ref]`$LastPrt, [ref]`$TotalPrt))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TotalPrt -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ `"Printer`" = `$PSItem.PrtName; `"VPSID`" = `$PSItem.VPSID; `"LongName`" = `$PSItem.PrtLName; `"Department`" = `$PSItem.Dept; `"Location`" = `"`$(`$PSItem.Location)`".ToUpper() } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXPrinter
  
  #region function Get-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("Function Get-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return pRINTERS FOR")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Printer `$Printer -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VSPA_GetPrinters((`$VPSXSessionID).SessionID, 1, `$Item, `$Printer, `$Null, `$Maximum, `$Scroll, `$Null))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Printer List")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VSPA_GetPrinters((`$VPSXSessionID).SessionID, 1, `$Item, `$Null, `$Null, 1, 0, `$Printer))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TmpPrinters.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ `"Printer`" = `$PSItem.Prt; `"IsDefault`" = `$PSItem.IsDefault } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXItemPrinter
  
  #region function Add-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Add-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Add-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Default")
  [Void]$StringBuilder.AppendLine("      Set Printer as Default")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer -Default")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Default")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_AddPrinter(`$VPSXSessionID, 1, `$Item, `$Printer, `"VPS1`", `$Default.IsPresent)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Printer Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyVPSXItemPrinter
  
  #region function Remove-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Remove-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Remove-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Default")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_RemovePrinter(`$VPSXSessionID, 1, `$Item, `$Printer, `"VPS1`")")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Printer Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyVPSXItemPrinter
  
  [Void]$StringBuilder.AppendLine("#endregion ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** VPSX Server Functions ********
  
  #region ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Set-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AddMinutes")
  [Void]$StringBuilder.AppendLine("      Add Minutes to the Token Expiration")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("      if (`$MyRunbookToken.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success!")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [UInt32]`$AddMinutes = 15")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$Script:AAAuthToken.ExpiresOn) -or (`$Script:AAAuthToken.ExpiresOn -le [DateTime]::Now.AddMinutes(`$AddMinutes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://management.azure.com/`" -AsSecureString")
  [Void]$StringBuilder.AppendLine("      `$Script:AAAuthToken = @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `$([Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$AccessToken.Token)))`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`"     = (`$AccessToken.ExpiresOn.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookToken
  
  #region function Get-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAuthToken")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookToken
  
  #region function Set-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyRunbookOptions -SubscriptionID `$SubscriptionID -ResourceGroup `$ResourceGroup -AutomationAccount `$AutomationAccount -Runbook `$Runbook")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AASubscriptionID = `$SubscriptionID")
  [Void]$StringBuilder.AppendLine("  `$Script:AAResourceGroup = `$ResourceGroup")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAutomationAccount = `$AutomationAccount")
  [Void]$StringBuilder.AppendLine("  `$Script:AARunbook = `$Runbook")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookOptions
  
  #region function Get-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RunbookOptions = Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"SubscriptionID`"    = `$Script:AASubscriptionID")
  [Void]$StringBuilder.AppendLine("    `"ResourceGroup`"     = `$Script:AAResourceGroup")
  [Void]$StringBuilder.AppendLine("    `"AutomationAccount`" = `$Script:AAAutomationAccount")
  [Void]$StringBuilder.AppendLine("    `"Runbook`"           = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookOptions
  
  #region function Get-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Status")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StatusComp")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status Comparison")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Create")
  [Void]$StringBuilder.AppendLine("      Runbook Jon Create Time")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -Status `$Status")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Activating`", `"Blocked`", `"Completed`", `"Disconnected`", `"Failed`", `"New`", `"Queued`", `"Removing`", `"Resuming`", `"Running`", `"Stopped`", `"Stopping`", `"Suspended`", `"Suspending`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Status,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"eq`", `"ne`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$StatusComp = `"eq`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Create = [DateTime]::Now.AddHours(-12)")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Search = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -ne `"ID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"```$filter=properties/creationTime ge `$((`$Create.ToUniversalTime()).ToString(`"O`")) and properties/runbook/name eq '`$(`$Runbook)'`")")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Status`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$Search.Append(`" and properties/status `$(`$StatusComp) '`$(`$Status)'`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"&`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)?`$(`$Search.ToString())api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Jobs = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$Jobs.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"ID`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJob
  
  #region function Get-MyRunbookJobOutput
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookJobOutput ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobOutput = Get-MyRunbookJobOutput -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/output?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$JobOutput.Content")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJobOutput
  
  #region function Send-MyRunbookJobCommand
  [Void]$StringBuilder.AppendLine("#region function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("Function Send-MyRunbookJobCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to Send to the Runbook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Susprend`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Resume`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Stop`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Stop`", `"Susprend`", `"Resume`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/`$(`$Command)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method POST -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyRunbookJobCommand
  
  #region function Start-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("Function Start-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Runbook Job Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RunOn")
  [Void]$StringBuilder.AppendLine("      Hybrid Worker Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Parameters to Pass to the the RunBook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Start-MyRunbookJob -RunOn `$RunOn -Parameters `$Parameters")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = ([System.Guid]::NewGuid()).Guid,")
  [Void]$StringBuilder.AppendLine("    [String]`$RunOn,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Parameters = @{}")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobName)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"properties`" = @{")
  [Void]$StringBuilder.AppendLine("      `"runbook`" = @{ `"name`" = `$Runbook }")
  [Void]$StringBuilder.AppendLine("      `"parameters`" = `$Parameters")
  [Void]$StringBuilder.AppendLine("      `"runOn`"   = `$RunOn")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$NewJob = Invoke-WebRequest -Uri `$URI -Method PUT -ContentType `"application/json`" -Headers `$AuthToken -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("  If (`$NewJob.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$NewJob.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Start-MyRunbookJob
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Custom Functions ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptFunctions"
}
#endregion function Build-MyFCGScriptFunctions

#region function Build-MyFCGScriptMultiThread
Function Build-MyFCGScriptMultiThread ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptMultiThread -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptMultiThread"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Multiple Thread Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Custom Objects MyRSPool / MyRSJob  ********
  [Void]$StringBuilder.AppendLine("#region ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Management.Automation;")
  [Void]$StringBuilder.AppendLine("using System.Threading;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSJob")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;")
  [Void]$StringBuilder.AppendLine("  private System.String _PoolName;")
  [Void]$StringBuilder.AppendLine("  private System.Guid _PoolID;")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.PowerShell _PowerShell;")
  [Void]$StringBuilder.AppendLine("  private System.IAsyncResult _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("  private System.Object _InputObject = null;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSJob(System.String Name, System.Management.Automation.PowerShell PowerShell, System.IAsyncResult PowerShellAsyncResult, System.Object InputObject, System.String PoolName, System.Guid PoolID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _PoolName = PoolName;")
  [Void]$StringBuilder.AppendLine("    _PoolID = PoolID;")
  [Void]$StringBuilder.AppendLine("    _PowerShell = PowerShell;")
  [Void]$StringBuilder.AppendLine("    _PowerShellAsyncResult = PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    _InputObject = InputObject;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String PoolName")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolName;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid PoolID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PowerShell PowerShell")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSInvocationState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Exception Reason")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.Reason;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool HadErrors")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.HadErrors;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Command")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Commands.Commands[0].ToString();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.IAsyncResult PowerShellAsyncResult")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool IsCompleted")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult.IsCompleted;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Object InputObject")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _InputObject;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.DebugRecord> Debug")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Debug;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ErrorRecord> Error")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Error;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ProgressRecord> Progress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Progress;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.VerboseRecord> Verbose")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Verbose;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.WarningRecord> Warning")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Warning;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSPool")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;  ")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.Runspaces.RunspacePool _RunspacePool;")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Generic.List<MyRSJob> Jobs = new System.Collections.Generic.List<MyRSJob>();")
  [Void]$StringBuilder.AppendLine("  private System.Collections.Hashtable _SyncedHash;")
  [Void]$StringBuilder.AppendLine("  private System.Threading.Mutex _Mutex;  ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash, System.String Mutex) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("    _Mutex = new System.Threading.Mutex(false, Mutex);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Hashtable SyncedHash")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _SyncedHash;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Threading.Mutex Mutex")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Mutex;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePoolState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.RunspacePoolStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$Script:MyHiddenRSPool = [System.Collections.Generic.Dictionary[[String], [MyRSPool]]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Custom Objects MyRSPool / MyRSJob  ********
  
  #region ******** function Start-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Start-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Functions")
  [Void]$StringBuilder.AppendLine("      Functions to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variables")
  [Void]$StringBuilder.AppendLine("      Variables to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modules")
  [Void]$StringBuilder.AppendLine("      Modules to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PSSnapins")
  [Void]$StringBuilder.AppendLine("      PSSnapins to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Hashtable")
  [Void]$StringBuilder.AppendLine("      Synced Hasttable to pass values between threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mutex")
  [Void]$StringBuilder.AppendLine("      Protects access to a shared resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxJobs")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create the Default RunspacePool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPool = Start-MyRSPool -PoolName `$PoolName -MaxJobs `$MaxJobs -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create a New RunspacePool and Return the RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Functions,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Variables,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Modules,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PSSnapins,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Hashtable = @{ `"Enabled`" = `$True },")
  [Void]$StringBuilder.AppendLine("    [String]`$Mutex,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 64)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxJobs = 8,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # check if Runspace Pool already exists")
  [Void]$StringBuilder.AppendLine("  if (`$Script:MyHiddenRSPool.ContainsKey(`$PoolName))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Existing Runspace Pool")
  [Void]$StringBuilder.AppendLine("    [MyRSPool](`$Script:MyHiddenRSPool[`$PoolName])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Default Session State")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import Modules")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Modules`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSModule(`$Modules)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import PSSnapins")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"PSSnapins`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSSnapIn(`$PSSnapins, [Ref]`$Null)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Common Functions")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Functions`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Functions.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New(`$Key, `$Functions[`$Key])))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Default Variables")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Variables`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Variables.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`$Key, `$Variables[`$Key], `"`$Key = `$(`$Variables[`$Key])`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create and Open RunSpacePool")
  [Void]$StringBuilder.AppendLine("    `$SyncedHash = [Hashtable]::Synchronized(`$Hashtable)")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"SyncedHash`", `$SyncedHash, `"SyncedHash = Synced Hashtable`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Mutex`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"Mutex`", `$Mutex, `"Mutex = `$Mutex`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash, `$Mutex)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.ApartmentState = `"STA`"")
  [Void]$StringBuilder.AppendLine("    #`$RSPool.RunspacePool.ApartmentState = `"MTA`"")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.Open()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Script:MyHiddenRSPool.Add(`$PoolName, `$RSPool)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSPool ********
  
  #region ******** function Get-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Get-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get all RSPools")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"All`" {")
  [Void]$StringBuilder.AppendLine("        # Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$PoolName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern})")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$PoolID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********
  
  #region ******** function Close-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Close-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to clsoe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to close")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"RSPool`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Close RunspacePools, This will Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempPool in `$TempPools)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty(`$TempPool.Mutex))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Close()")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Dispose()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Close()")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool.Remove(`$TempPool.Name)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********
  
  #region ******** function Start-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Start-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to add new RunspacePool Jobs to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      Object / Value to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputParam")
  [Void]$StringBuilder.AppendLine("      Paramter to pass the Object / Value as")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      RunspacePool Job ScriptBock to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Common Paramaters to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSJob -ScriptBlock `$ScriptBlock -JobName `$JobName -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -RSPool `$RSPool -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolName `$PoolName -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolID `$PoolID -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$InputObject,")
  [Void]$StringBuilder.AppendLine("    [String]`$InputParam = `"InputObject`",")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = `"Job Name`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Parameters,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"RSPool`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPool = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Start-MyRSPool -PoolName `$PoolName -PassThru)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for New Jobs")
  [Void]$StringBuilder.AppendLine("    `$NewJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"InputObject`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Object in `$InputObject)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("        `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("        # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("        `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("        # Add Parameters")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameter(`$InputParam, `$Object)")
  [Void]$StringBuilder.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # set Job Name")
  [Void]$StringBuilder.AppendLine("        if ((`$Object -is [String]) -or (`$Object -is [ValueType]))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJobName = `"`$JobName - `$(`$Object)`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJobName = `$(`$Object.`$JobName)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        [Void]`$NewJobs.Add(([MyRSjob]::New(`$TempJobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Object, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("      `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("      # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("      `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("      # Add Parameters")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      [Void]`$NewJobs.Add(([MyRSjob]::New(`$JobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Null, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$NewJobs.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPool.Jobs.AddRange(`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      # Return Jobs only if New RunspacePool")
  [Void]$StringBuilder.AppendLine("      if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$NewJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSJob ********
  
  #region ******** function Get-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Pool`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolName `$PoolName)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"^JobName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job Name RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$JobName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"^JobID`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job ID RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$JobID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Get-MyRSJob ********
  
  #region ******** function Wait-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Wait-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      ScriptBlock to invoke while waiting")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      [System.Threading.Thread]::Sleep(250)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      TimeSpace to wait")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoWait")
  [Void]$StringBuilder.AppendLine("      No Wait, Return when any Job states changes to Stopped, Completed, or Failed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -RSPool `$RSPool -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolName `$PoolName -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolID `$PoolID -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(`"0:00:00`", `"8:00:00`")]")
  [Void]$StringBuilder.AppendLine("    [TimeSpan]`$Wait = `"0:05:00`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoWait,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"PassThru`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"PassThru`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Wait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Wait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"NoWait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"NoWait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ScriptBlock`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"ScriptBlock`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Wait Jobs")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](`$RSJob))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Wait for Jobs to be Finshed")
  [Void]$StringBuilder.AppendLine("    if (`$NoWait.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      While (@((`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -eq `$WaitJobs.Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Object[]]`$CheckJobs = `$WaitJobs.ToArray()")
  [Void]$StringBuilder.AppendLine("      `$Start = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("      While (@((`$CheckJobs = `$CheckJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -and ((([DateTime]::Now - `$Start) -le `$Wait) -or (`$Wait.Ticks -eq 0)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Completed Jobs")
  [Void]$StringBuilder.AppendLine("      [MyRSJob[]](`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -match `"Stopped|Completed|Failed`" })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Wait-MyRSJob ********
  
  #region ******** function Stop-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Stop-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Stop all Jobs that have not Finished")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Stop-MyRSJob ********
  
  #region ******** function Receive-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Receive-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoRemove")
  [Void]$StringBuilder.AppendLine("      Remove Jobs after Receiving Output")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -RSPool `$RSPool -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolName `$PoolName -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolID `$PoolID -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoRemove,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"AutoRemove`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"AutoRemove`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$PSBoundParameters.Add(`"State`", `"Completed`")")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Receive all Complted Jobs, Remove Job if Required")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.IsCompleted)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJob.PowerShell.EndInvoke(`$TempJob.PowerShellAsyncResult)")
  [Void]$StringBuilder.AppendLine("          # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("          [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$AutoRemove.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("      foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("        [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Receive-MyRSJob ********
  
  #region ******** function Remove-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Remove-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Force")
  [Void]$StringBuilder.AppendLine("      Force the Job to stop")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Force`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Force`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove all Jobs, Stop all Running if Forced")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Force -and `$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -match `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("        [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("    foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Remove-MyRSJob ********
  
  #region ******** RSPools Sample Code ********
  [Void]$StringBuilder.AppendLine("#region ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Test-Function")
  [Void]$StringBuilder.AppendLine("Function Test-Function")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Function -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, HelpMessage = `"Enter Value`", ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds (1000 * 5)")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: ```$Item = `$Item`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-Function")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Job `$ScriptBlock")
  [Void]$StringBuilder.AppendLine("`$ScriptBlock = {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      InputObject passed to script")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Script.ps1 -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Thread Script Variables")
  [Void]$StringBuilder.AppendLine("        [String]`$Mutex - Exist only if -Mutex was specified on the Start-MyRSPool command line")
  [Void]$StringBuilder.AppendLine("        [HashTable]`$SyncedHash - Always Exists, Default values `$SyncedHash.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$InputObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Generate Error Message to show in Error Buffer")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("  GenerateErrorMessage")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Enable Verbose logging")
  [Void]$StringBuilder.AppendLine("  `$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check is Thread is Enabled to Run")
  [Void]$StringBuilder.AppendLine("  if (`$SyncedHash.Enabled)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Call Imported Test Function")
  [Void]$StringBuilder.AppendLine("    Test-Function -Value `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check if a Mutex exist")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Mutex))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Open and wait for Mutex")
  [Void]$StringBuilder.AppendLine("      `$MyMutex = [System.Threading.Mutex]::OpenExisting(`$Mutex)")
  [Void]$StringBuilder.AppendLine("      [Void](`$MyMutex.WaitOne())")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Data to the Screen")
  [Void]$StringBuilder.AppendLine("    For (`$Count = 0; `$Count -le 8; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"```$InputObject = `$InputObject`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Release the Mutex if it Exists")
  [Void]$StringBuilder.AppendLine("    if (`$HasMutex)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMutex.ReleaseMutex()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: RSJob was Canceled`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region `$WaitScript")
  [Void]$StringBuilder.AppendLine("`$WaitScript = {")
  [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Completed `$(@(Get-MyRSJob | Where-Object -FilterScript { `$PSItem.State -eq 'Completed' }).Count) Jobs`"")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds 1000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("`$TestFunction = @{}")
  [Void]$StringBuilder.AppendLine("`$TestFunction.Add(`"Test-Function`", (Get-Command -Type Function -Name Test-Function).ScriptBlock)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Start and Get RSPool")
  [Void]$StringBuilder.AppendLine("`$RSPool = Start-MyRSPool -MaxJobs 8 -Functions `$TestFunction -PassThru #-Mutex `"TestMutex`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Create new RunspacePool and start 5 Jobs")
  [Void]$StringBuilder.AppendLine("1..10 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Add 5 new Jobs to an existing RunspacePool")
  [Void]$StringBuilder.AppendLine("11..20 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Disable Thread Script")
  [Void]$StringBuilder.AppendLine("#`$RSPool.SyncedHash.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Wait for all Jobs to Complete or Fail")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Wait-MyRSJob -SciptBlock `$WaitScript -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Receive Completed Jobs and Remove them")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Close RunspacePool")
  [Void]$StringBuilder.AppendLine("Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** RSPools Sample Code ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Multiple Thread Functions ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptMultiThread"
}
#endregion function Build-MyFCGScriptMultiThread

#region function Build-MyFCGScriptJobsThreads
Function Build-MyFCGScriptJobsThreads ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptJobsThreads -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptJobsThreads"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Jobs Multi Thread ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Job Thread ScriptBlock ********
  [Void]$StringBuilder.AppendLine("#region ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("`$ThreadScriptJob = {")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Default Job Data that is returned to the Main Script, Returned values cannot be `$Null, Emptry strings are OK")
  [Void]$StringBuilder.AppendLine("  `$JobData = [PSCustomObject]@{`"Status`" = `"Processing...`";")
  [Void]$StringBuilder.AppendLine("                               `"BeginTime`" = (Get-Date);")
  [Void]$StringBuilder.AppendLine("                               `"EndTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("                               `"ErrorMessage`" = `"`"}")
  [Void]$StringBuilder.AppendLine("")
  #region function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("  #region function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("  function Test-MyWorkstation()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      How Long to Wait for Job to be Completed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("      [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("      [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("      [ValidateRange(30, 300)]")
  [Void]$StringBuilder.AppendLine("      [Int]`$Wait = 120,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Begin")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("          `"Credential`" = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Process")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Used to Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Default Custom Object for the Verify Function to Return, Since it will always return a value I create the Object with the default error / failure values and update the poperties as needed")
  [Void]$StringBuilder.AppendLine("        #region ******** Custom Return Object `$VerifyObject ********")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"FQDN`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"Found`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"UserName`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Domain`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"DomainMember`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ProductType`" = 0;")
  [Void]$StringBuilder.AppendLine("          `"Manufacturer`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Model`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IsMobile`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"SerialNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Memory`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"OperatingSystem`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"BuildNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Version`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ServicePack`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Architecture`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Is64Bit`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"LocalDateTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"InstallDate`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"LastBootUpTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IPAddress`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Status`" = `"Off-Line`";")
  [Void]$StringBuilder.AppendLine("          `"Time`" = [TimeSpan]::Zero")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        #endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Try")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("            `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("            ForEach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # I think this is Faster than using Test-Connection")
  [Void]$StringBuilder.AppendLine("              if ((([System.Net.NetworkInformation.Ping]::New()).Send(`$IPAddress)).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Primary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("                # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Get Job Data")
  [Void]$StringBuilder.AppendLine("                  `$MyCompData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.ComputerName = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.PartOfDomain)")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)``.`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.UserName = `"`$(`$MyCompData.UserName)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Domain = `"`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.DomainMember = `$MyCompData.PartOfDomain")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Manufacturer = `"`$(`$MyCompData.Manufacturer)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Model = `"`$(`$MyCompData.Model)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Memory = `"`$(`$MyCompData.TotalPhysicalMemory)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.Name -eq @(`$Computer.Split(`".`", [System.StringSplitOptions]::RemoveEmptyEntries))[0])")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    # Found Corrct Workstation")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Found = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                    [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                    [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                    if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Get Job Data")
  [Void]$StringBuilder.AppendLine("                      `$MyOSData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ProductType = `$MyOSData.ProductType")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.OperatingSystem = `"`$(`$MyOSData.Caption)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ServicePack = `"`$(`$MyOSData.CSDVersion)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.BuildNumber = `"`$(`$MyOSData.BuildNumber)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Version = `"`$(`$MyOSData.Version)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Architecture = `$(if ([String]::IsNullOrEmpty(`$MyOSData.OSArchitecture)) { `"32-bit`" }")
  [Void]$StringBuilder.AppendLine("                        else { `"`$(`$MyOSData.OSArchitecture)`" })")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Is64Bit = (`$VerifyObject.Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LocalDateTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.InstallDate = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LastBootUpTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                    else")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Status = `"Verify Operating System Error`"")
  [Void]$StringBuilder.AppendLine("                      [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyBIOSJob = Get-WmiObject -AsJob @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyBIOSJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyBIOSJob.State -eq `"Completed`" -and `$MyBIOSJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyBIOSData = Get-Job -ID `$MyBIOSJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.SerialNumber = `"`$(`$MyBIOSData.SerialNumber)`"")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify SerialNumber Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyBIOSJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyChassisJob = Get-WmiObject -AsJob @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyChassisJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyChassisJob.State -eq `"Completed`" -and `$MyChassisJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyChassisData = Get-Job -ID `$MyChassisJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.IsMobile = `$(@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains ((`$MyChassisData.ChassisTypes)[0]))")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify is Mobile Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyChassisJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Status = `"Wrong Workstation Name`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                else")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Status = `"Verify Workstation Error`"")
  [Void]$StringBuilder.AppendLine("                  [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("                Break")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Catch")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("            `$VerifyObject.Status = `"Workstation Not in DNS`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.Status = `"Invalid Computer Name`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.Time = ([DateTime]::Now - `$StartTime)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Return Custom Object with Collected Verify Information")
  [Void]$StringBuilder.AppendLine("        Write-Output -InputObject `$VerifyObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Params = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyJob = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyCompData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyBIOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyChassisData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$StartTime = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    End")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion")
  #endregion function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ((`$VerifyData = Test-MyWorkstation -ComputerName `$ComputerName).Found)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Clear all Previous Error Messages")
  [Void]$StringBuilder.AppendLine("      `$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("          `$VerifyData is a Custom Object the has the following properties that you can use in your script")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          ComputerName    : This is the Name of the Computer that is found, may be different than expected computer name")
  [Void]$StringBuilder.AppendLine("          FQDN            : FQDN of Found Workstation")
  [Void]$StringBuilder.AppendLine("          Found           : True / False - This is True if the Workstation that was pinged was the expected Workstation")
  [Void]$StringBuilder.AppendLine("          UserName        : Domain\UserName of Logged on User, Will be Blank if user is Logged on via RDP")
  [Void]$StringBuilder.AppendLine("          Domain          : Domain \ WorkGroup Workstation is a member of")
  [Void]$StringBuilder.AppendLine("          DomainMember    : True if member of a Domain")
  [Void]$StringBuilder.AppendLine("          ProductType     : Product Type of Installed Operating system")
  [Void]$StringBuilder.AppendLine("          Manufacturer    : Manufacturer of Computer")
  [Void]$StringBuilder.AppendLine("          Model           : Model of Computer")
  [Void]$StringBuilder.AppendLine("          Memory          : Total Memory in Bytes")
  [Void]$StringBuilder.AppendLine("          OperatingSystem : Installed Operating System")
  [Void]$StringBuilder.AppendLine("          ServicePack     : Installed Service Pack")
  [Void]$StringBuilder.AppendLine("          BuildNumber     : Build Number of Operating System")
  [Void]$StringBuilder.AppendLine("          Architecture    : 32-Bit or 64-Bit")
  [Void]$StringBuilder.AppendLine("          LocalDateTime   : Date / Time on the Remote Workstation")
  [Void]$StringBuilder.AppendLine("          InstallDate     : Date / Time the Workstation was Imaged")
  [Void]$StringBuilder.AppendLine("          LastBootUpTime  : Date / Time the Workstation was Rebooted")
  [Void]$StringBuilder.AppendLine("          IPAddress       : IP Address of the Workstation")
  [Void]$StringBuilder.AppendLine("          Status          : On-Line, Wrong Name, Unknown, Off-Line, Error")
  [Void]$StringBuilder.AppendLine("          ErrorMessage    : Error Message if Any")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        ******** Begin Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is found")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # if your Script Completed Sucessfully set returned `$JabData.Status to `"Done`" so row will not be processed a second time")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `"Done`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        ******** End Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is not found")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `$VerifyData.Status")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set returned Error Information `$JabData.ErrorMessage to the Last Error Message")
  [Void]$StringBuilder.AppendLine("      `$JobData.ErrorMessage = `$VerifyData.ErrorMessage")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Returned Job Status to indicate an error")
  [Void]$StringBuilder.AppendLine("    `$JobData.Status = `"Error - Catch`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set returned Error Information `$JabData.ErrorMessage to the last Error Message")
  [Void]$StringBuilder.AppendLine("    `$JobData.ErrorMessage = `"`$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Date / Time Job Finished")
  [Void]$StringBuilder.AppendLine("  `$JobData.EndTime = (Get-Date)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #Return Job Data to the Main Script")
  [Void]$StringBuilder.AppendLine("  `$JobData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JobData = `$Null")
  [Void]$StringBuilder.AppendLine("  `$VerifyData = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Job Thread ScriptBlock ********
  
  #region function Process-ListViewItemsJobs - Job
  [Void]$StringBuilder.AppendLine("#region function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("function Process-ListViewItemsJobs()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("       The Script Block to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxThreads")
  [Void]$StringBuilder.AppendLine("      Maximum Threads to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      Process Checked ListView Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Process-ListViewItems [-Sender ```$MyFormListView] -Thread `$Thread [-MaxThreads 4] [-Checked]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$MyFormListView,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$Thread = `$ThreadscriptJob,")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxThreads = 4,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$ListView.Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$False ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$Checked)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.CheckedItems)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.Items | Where-Object -FilterScript { `$PSItem.SubItems[1].Text -ne `"Done`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = @{}")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$ItemList.Count - 1")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -le `$ItemCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Verbose -Message `"Break For Loop`"")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        Write-Verbose -Message `"Begin Job Thread - `$Count`"")
  [Void]$StringBuilder.AppendLine("        `$ThreadHash.Add(`"`$Count`", (Start-Job -ScriptBlock `$Thread -ArgumentList (`$ItemList[`$Count].Name) -Name `"`$Count`"))")
  [Void]$StringBuilder.AppendLine("        `$ItemList[`$Count].SubItems[1].Text = `"Processing...`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        While ((`$ThreadHash.Count -eq `$MaxThreads) -or (`$ThreadHash.Count -and (`$Count -eq `$ItemCount)))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Write-Verbose -Message `"Break Outter While Loop`"")
  [Void]$StringBuilder.AppendLine("            break")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          While (@(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Running`" }).Count -eq `$ThreadHash.Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("            if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Break Inner While Loop`"")
  [Void]$StringBuilder.AppendLine("              break")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FailedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { @(`"Running`", `"Completed`") -NotContains `$PSItem.State })).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FailedJob in `$FailedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FailedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Failed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `"Failed`"")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FailedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [Void](Remove-Job -Id `$FailedJob.ID -Force)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FinishedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Completed`"})).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FinishedJob in `$FinishedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FinishedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Completed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$JobData = Receive-Job -Id `$FinishedJob.ID -Wait -AutoRemoveJob ")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `$JobData.Status")
  [Void]$StringBuilder.AppendLine("              if (`$Checked)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$ItemList[`$ThreadNum].Checked = `$False")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FinishedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Begin Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("      [Void](Get-Job | Remove-Job -Force)")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"End Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Count = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemList = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ThreadNum = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$True")
  [Void]$StringBuilder.AppendLine("      `$ListView.Sort()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Process-ListViewItemsJobs - Job
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Jobs Multi Thread ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptJobsThreads"
}
#endregion function Build-MyFCGScriptJobsThreads




#endregion ******** FCG Custom Commands ********

#region >>>>>>>>>>>>>>>> FCG Custom Dialogs <<<<<<<<<<<<<<<<


# ---------------------------------------
# Sample Function Display Status Messages
# ---------------------------------------
#region function Display-MyStatusRichTextBox
function Display-MyStatusRichTextBox()
{
  <#
    .SYNOPSIS
      Display Utility Status Sample Function
    .DESCRIPTION
      Display Utility Status Sample Function
    .PARAMETER RichTextBox
    .PARAMETER HashTable
    .EXAMPLE
      Display-MyStatusRichTextBox -RichTextBox $RichTextBox
    .EXAMPLE
      Display-MyStatusRichTextBox -RichTextBox $RichTextBox -HashTable $HashTable
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.RichTextBox]$RichTextBox,
    [HashTable]$HashTable
  )
  Write-Verbose -Message "Enter Function Display-MyStatusRichTextBox"

  $DisplayResult = [System.Windows.Forms.DialogResult]::OK
  $RichTextBox.Refresh()

  If ($PSBoundParameters.ContainsKey("HashTable"))
  {
    If ($HashTable.ContainsKey("ShowHeader"))
    {
      $ShowHeader = $HashTable.ShowHeader
    }
    Else
    {
      $ShowHeader = $True
    }
  }
  Else
  {
    $ShowHeader = $True
  }

  # **************
  # RFT Formatting
  # **************
  # Permanate till Changed
  #$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left
  #$RichTextBox.SelectionBullet = $True
  #$RichTextBox.SelectionIndent = 10
  # Resets After AppendText
  #$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack
  #$RichTextBox.SelectionCharOffset = 0
  #$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore
  #$RichTextBox.SelectionFont = [MyConfig]::Font.Bold
  # **********************
  # Update RichTextBox Text...
  # **********************

  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False

  # Write KPI Event
  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"

  if ($ShowHeader)
  {
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)
    Write-RichTextBox -RichTextBox $RichTextBox

    # Initialize StopWatch
    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
 }

  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Started Proccess List Data Here..." -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True

  if ($PSBoundParameters.ContainsKey("HashTable"))
  {
    :UserCancel foreach ($Key in $HashTable.Keys)
    {
      Write-RichTextBox -RichTextBox $RichTextBox -Text "Found Key" -TextFore ([MyConfig]::Colors.TextInfo) -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox -Text ": " -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox -Text "$($Key) = $($HashTable[$Key])" -TextFore ([MyConfig]::Colors.TextGood) -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox
      # Check for Fast Exit
      [System.Windows.Forms.Application]::DoEvents()
      If ($RichTextBox.Parent.Parent.Tag.Cancel)
      {
        $RichTextBox.SelectionIndent = 10
        $RichTextBox.SelectionBullet = $False
        Write-RichTextBox -RichTextBox $RichTextBox
        Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center
        $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel
        Break UserCancel
      }
      # Pause Processing Loop
      If ($RichTextBox.Parent.Parent.Tag.Pause)
      {
        $TmpPause = $RichTextBox.SelectionBullet
        $TmpTitle = $RichTextBox.Parent.Parent.Text
        $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
        $RichTextBox.SelectionBullet = $False
        While ($RichTextBox.Parent.Parent.Tag.Pause)
        {
          [System.Threading.Thread]::Sleep(100)
          [System.Windows.Forms.Application]::DoEvents()
        }
        $RichTextBox.SelectionBullet = $TmpPause
        $RichTextBox.Parent.Parent.Text = $TmpTitle
      }
      Start-Sleep -Milliseconds 100
    }
  }
  else
  {
    :UserCancel For ($Count = 1; $Count -le 19; $Count++)
    {
      Write-RichTextBox -RichTextBox $RichTextBox -Text "$("X" * $Count)" -TextFore ([MyConfig]::Colors.TextInfo) -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox -Text " - " -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox -Text "Green" -TextFore ([MyConfig]::Colors.TextGood) -NoNewLine
      Write-RichTextBox -RichTextBox $RichTextBox
      # Check for Fast Exit
      [System.Windows.Forms.Application]::DoEvents()
      If ($RichTextBox.Parent.Parent.Tag.Cancel)
      {
        $RichTextBox.SelectionIndent = 10
        $RichTextBox.SelectionBullet = $False
        Write-RichTextBox -RichTextBox $RichTextBox
        Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center
        $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel
        Break UserCancel
      }
      # Pause Processing Loop
      If ($RichTextBox.Parent.Parent.Tag.Pause)
      {
        $TmpPause = $RichTextBox.SelectionBullet
        $TmpTitle = $RichTextBox.Parent.Parent.Text
        $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
        $RichTextBox.SelectionBullet = $False
        While ($RichTextBox.Parent.Parent.Tag.Pause)
        {
          [System.Threading.Thread]::Sleep(100)
          [System.Windows.Forms.Application]::DoEvents()
        }
        $RichTextBox.SelectionBullet = $TmpPause
        $RichTextBox.Parent.Parent.Text = $TmpTitle
      }
      Start-Sleep -Milliseconds 100
    }
  }

  # Pause Before Deployment
  $RichTextBox.Parent.Parent.Tag.Pause = $True
  $TmpPause = $RichTextBox.SelectionBullet
  $TmpTitle = $RichTextBox.Parent.Parent.Text
  $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
  $RichTextBox.SelectionBullet = $False

  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Pause to Review Status" -Font ([MyConfig]::Font.Bold) -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Press 'Pause' to Continue with the Current Deployment" -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox -Text "or Ctrl-Alt-Backspace to Exit / Cancel" -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox

  While ($RichTextBox.Parent.Parent.Tag.Pause)
  {
    [System.Threading.Thread]::Sleep(100)
    [System.Windows.Forms.Application]::DoEvents()
    If ($RichTextBox.Parent.Parent.Tag.Cancel)
    {
      $RichTextBox.Parent.Parent.Tag.Pause = $False
      $RichTextBox.SelectionIndent = 10
      $RichTextBox.SelectionBullet = $False
      Write-RichTextBox -RichTextBox $RichTextBox
      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center
      $DisplayResult = [System.Windows.Forms.DialogResult]::Cancel
    }
  }
  $RichTextBox.SelectionBullet = $TmpPause
  $RichTextBox.Parent.Parent.Text = $TmpTitle

  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Show Fake Error Message"-TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True

  if ($ShowHeader)
  {

    Try
    {
      Throw "This is a Fake Error!"
    }
    Catch
    {
      # Write Error to Status Dialog
      Write-RichTextBoxError -RichTextBox $RichTextBox
    }

    $RichTextBox.SelectionIndent = 10
    $RichTextBox.SelectionBullet = $False
    Write-RichTextBox -RichTextBox $RichTextBox

    if ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $FinalMsg = "Add Success Message Here!"
      $FinalClr = [MyConfig]::Colors.TextGood
    }
    else
    {
      $FinalMsg = "Add Error Message Here!"
      $FinalClr = [MyConfig]::Colors.TextBad
    }

    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg
    Write-RichTextBox -RichTextBox $RichTextBox

    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())
    Write-RichTextBox -RichTextBox $RichTextBox
  }

  $DisplayResult
  $DisplayResult = $Null

  Write-Verbose -Message "Exit Function Display-MyStatusRichTextBox"
}
#endregion function Display-MyStatusRichTextBox

# ---------------------------------
# Add Custom Display Status Message
# ---------------------------------
#region function Display-InitiliazeFCGUtility
Function Display-InitiliazeFCGUtility()
{
  <#
    .SYNOPSIS
      Display Utility Status Sample Function
    .DESCRIPTION
      Display Utility Status Sample Function
    .PARAMETER RichTextBox
    .PARAMETER HashTable
    .EXAMPLE
      Display-InitiliazeFCGUtility -RichTextBox $RichTextBox
    .EXAMPLE
      Display-InitiliazeFCGUtility -RichTextBox $RichTextBox -HashTable $HashTable
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.RichTextBox]$RichTextBox,
    [HashTable]$HashTable
  )
  Write-Verbose -Message "Enter Function Display-InitiliazeFCGUtility"
  
  $DisplayResult = [System.Windows.Forms.DialogResult]::OK
  $RichTextBox.Refresh()
  
  If ($PSBoundParameters.ContainsKey("HashTable"))
  {
    If ($HashTable.ContainsKey("ShowHeader"))
    {
      $ShowHeader = $HashTable.ShowHeader
    }
    Else
    {
      $ShowHeader = $True
    }
  }
  Else
  {
    $ShowHeader = $True
  }
  
  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False
  
  # Write KPI Event
  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"
  
  If ($ShowHeader)
  {
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)
    Write-RichTextBox -RichTextBox $RichTextBox
    
    # Initialize StopWatch
    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
  }
  
  
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Validate Runtime Parameters" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True
  
  #region ******** Validating Runtime Parameters ********
  
  # Script / Utility
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Utility" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Version" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)
  
  # Run From/As Info
  $TmpRunFrom = Get-WmiObject -Query "Select Name, Domain, PartOfDomain From Win32_ComputerSystem"
  If ($TmpRunFrom.PartOfDomain)
  {
    $TmpRunFromText = "$($TmpRunFrom.Name).$($TmpRunFrom.Domain)"
  }
  Else
  {
    $TmpRunFromText = "$($TmpRunFrom.Name)"
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run From" -Value $TmpRunFromText
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run As" -Value "$([Environment]::UserDomainName)\$([Environment]::UserName)"
  
  # Microsoft Entra Logon
  #Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Microsoft Entra Logon: " -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)
  
  # Logon Authentication
  If ([MyConfig]::CurrentUser.AuthenticationType -eq "CloudAP")
  {
    $TmpText = "Microsoft Entra"
  }
  Else
  {
    $TmpText = "Active Directory"
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Authentication" -Value "$($TmpText)"
  
  # Verify OS Architecture
  $TempRunOS = Get-WmiObject -Query "Select Caption, Version, OSArchitecture From Win32_OperatingSystem"
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Op Sys" -Value "$($TempRunOS.Caption)"
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Build" -Value "$($TempRunOS.Version)"
  
  # Verify AC Power
  $ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus
  If ([String]::IsNullOrEmpty($ChkBattery) -or ($ChkBattery -eq 2))
  {
    $TmpText = "Yes"
    $TmpColor = [MyConfig]::Colors.TextGood
  }
  Else
  {
    $TmpText = "No"
    $TmpColor = [MyConfig]::Colors.TextWarn
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "AC Power" -Value "$($TmpText)" -ValueFore $TmpColor
  
  # -------------------------
  # Display Passed Parameters
  # -------------------------
  $CheckParams = $Script:PSBoundParameters
  If ($CheckParams.Keys.Count)
  {
    Write-RichTextBox -RichTextBox $RichTextBox -Text "Runtime Parameters"
    ForEach ($Key In $CheckParams.Keys)
    {
      $RichTextBox.SelectionIndent = 30
      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Key -Value $($CheckParams[$Key])
    }
  }
  
  #endregion ******** Validating Runtime Parameters ********
  
  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Start Script Specific Init Here" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Config Step" -Value "Step Value"
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Config Step" -Value "Step Value"
  
  If ($ShowHeader)
  {
    $RichTextBox.SelectionIndent = 10
    $RichTextBox.SelectionBullet = $False
    Write-RichTextBox -RichTextBox $RichTextBox
    
    If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $FinalMsg = "Initialization was Successful"
      $FinalClr = [MyConfig]::Colors.TextGood
    }
    Else
    {
      $FinalMsg = "Initialization Failed"
      $FinalClr = [MyConfig]::Colors.TextBad
    }
    
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg
    Write-RichTextBox -RichTextBox $RichTextBox
    
    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())
    Write-RichTextBox -RichTextBox $RichTextBox
  }
  
  $DisplayResult
  $DisplayResult = $Null
  
  Write-Verbose -Message "Exit Function Display-InitiliazeFCGUtility"
}
#endregion function Display-InitiliazeFCGUtility



#endregion ================ FCG Custom Dialogs ================


#region >>>>>>>>>>>>>>>> Begin **** FCG **** Begin <<<<<<<<<<<<<<<<

#$Result = [System.Windows.Forms.MessageBox]::Show($FCGForm, "Message Text", [MyConfig]::ScriptName, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)

$FCGFormComponents = [System.ComponentModel.Container]::New()

#region $FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
$FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
#$FCGOpenFileDialog.AddExtension = $True
#$FCGOpenFileDialog.AutoUpgradeEnabled = $True
#$FCGOpenFileDialog.CheckFileExists = $True
#$FCGOpenFileDialog.CheckPathExists = $True
#$FCGOpenFileDialog.DefaultExt = ""
#$FCGOpenFileDialog.DereferenceLinks = $True
#$FCGOpenFileDialog.FileName = ""
#$FCGOpenFileDialog.Filter = ""
#$FCGOpenFileDialog.FilterIndex = 1
#$FCGOpenFileDialog.InitialDirectory = ""
#$FCGOpenFileDialog.Multiselect = $False
#$FCGOpenFileDialog.ReadOnlyChecked = $False
#$FCGOpenFileDialog.RestoreDirectory = $False
#$FCGOpenFileDialog.ShowHelp = $False
#$FCGOpenFileDialog.ShowReadOnly = $False
#$FCGOpenFileDialog.SupportMultiDottedExtensions = $False
#$FCGOpenFileDialog.Tag = [System.Object]::New()
#$FCGOpenFileDialog.Title = ""
#$FCGOpenFileDialog.ValidateNames = $True
#endregion $FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()

# How to Call / Use $FCGOpenFileDialog
#$FCGOpenFileDialog.FileName = ""
#$FCGOpenFileDialog.Filter = "CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
#$FCGOpenFileDialog.FilterIndex = 1
#$FCGOpenFileDialog.InitialDirectory = $PSScriptRoot
#$FCGOpenFileDialog.Multiselect = $False
#$FCGOpenFileDialog.Title = "Show this Title to the User"
#$FCGOpenFileDialog.Tag = $Null
#$Response = $FCGOpenFileDialog.ShowDialog()
#If ($Response = [System.Windows.Forms.DialogResult]::OK)
#{
#  # Do Work Here
#}

#$FCGOpenFileDialog.CustomPlaces.Add([System.String]$Path)
#$FCGOpenFileDialog.CustomPlaces.Add([System.Guid]$KnownFolderGuid)
#$FCGOpenFileDialog.BeginUpdate()
#$FCGOpenFileDialog.EndUpdate()


#region $FCGSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()
$FCGSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()
#$FCGSaveFileDialog.AddExtension = $True
#$FCGSaveFileDialog.AutoUpgradeEnabled = $True
#$FCGSaveFileDialog.CheckFileExists = $False
#$FCGSaveFileDialog.CheckPathExists = $True
#$FCGSaveFileDialog.CreatePrompt = $False
#$FCGSaveFileDialog.DefaultExt = ""
#$FCGSaveFileDialog.DereferenceLinks = $True
#$FCGSaveFileDialog.FileName = ""
#$FCGSaveFileDialog.Filter = ""
#$FCGSaveFileDialog.FilterIndex = 1
#$FCGSaveFileDialog.InitialDirectory = ""
#$FCGSaveFileDialog.OverwritePrompt = $True
#$FCGSaveFileDialog.RestoreDirectory = $False
#$FCGSaveFileDialog.ShowHelp = $False
#$FCGSaveFileDialog.SupportMultiDottedExtensions = $False
#$FCGSaveFileDialog.Tag = [System.Object]::New()
#$FCGSaveFileDialog.Title = ""
#$FCGSaveFileDialog.ValidateNames = $True
#endregion $FCGSaveFileDialog = [System.Windows.Forms.SaveFileDialog]::New()

# How to Call / Use $FCGSaveFileDialog
#$FCGSaveFileDialog.FileName = "")
#$FCGSaveFileDialog.Filter = "CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
#$FCGSaveFileDialog.FilterIndex = 1
#$FCGSaveFileDialog.InitialDirectory = $PSScriptRoot
#$FCGSaveFileDialog.Title = "Show this Title to the User"
#$FCGSaveFileDialog.Tag = $Null
#$Response = $FCGSaveFileDialog.ShowDialog()
#If ($Response = [System.Windows.Forms.DialogResult]::OK)
#{
#  # Do Work Here
#}

#$FCGSaveFileDialog.CustomPlaces.Add([System.String]$Path)
#$FCGSaveFileDialog.CustomPlaces.Add([System.Guid]$KnownFolderGuid)
#$FCGSaveFileDialog.BeginUpdate()
#$FCGSaveFileDialog.EndUpdate()


#region $FCGFolderBrowserDialog = [System.Windows.Forms.FolderBrowserDialog]::New()
$FCGFolderBrowserDialog = [System.Windows.Forms.FolderBrowserDialog]::New()
#$FCGFolderBrowserDialog.Description = ""
#$FCGFolderBrowserDialog.RootFolder = [System.Environment+SpecialFolder]::Desktop
#$FCGFolderBrowserDialog.SelectedPath = ""
#$FCGFolderBrowserDialog.ShowNewFolderButton = $True
#$FCGFolderBrowserDialog.Tag = [System.Object]::New()
#endregion $FCGFolderBrowserDialog = [System.Windows.Forms.FolderBrowserDialog]::New()

# How to Call / Use $FCGFolderBrowserDialog
#$FCGFolderBrowserDialog.Description = "Select a Random Folder"
#$FCGFolderBrowserDialog.RootFolder = [System.Environment+SpecialFolder]::Desktop
#$FCGFolderBrowserDialog.SelectedPath = "C:\Windows"
#$FCGFolderBrowserDialog.ShowNewFolderButton = $True
#$FCGFolderBrowserDialog.Tag = $Null
#$Response = $FCGFolderBrowserDialog.ShowDialog()
#If ($Response = [System.Windows.Forms.DialogResult]::OK)
#{
#  # Do Work Here
#}


#region $FCGToolTip = [System.Windows.Forms.ToolTip]::New()
$FCGToolTip = [System.Windows.Forms.ToolTip]::New($FCGFormComponents)
#$FCGToolTip.Active = $True
#$FCGToolTip.AutomaticDelay = 500
#$FCGToolTip.AutoPopDelay = 5000
#$FCGToolTip.BackColor = [MyConfig]::Colors.Back
#$FCGToolTip.ForeColor = [MyConfig]::Colors.Fore
#$FCGToolTip.InitialDelay = 500
#$FCGToolTip.IsBalloon = $False
#$FCGToolTip.OwnerDraw = $False
#$FCGToolTip.ReshowDelay = 100
#$FCGToolTip.ShowAlways = $False
#$FCGToolTip.StripAmpersands = $False
#$FCGToolTip.Tag = [System.Object]::New()
#$FCGToolTip.ToolTipIcon = [System.Windows.Forms.ToolTipIcon]::None
#$FCGToolTip.ToolTipTitle = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
#$FCGToolTip.UseAnimation = $True
#$FCGToolTip.UseFading = $True
#endregion $FCGToolTip = [System.Windows.Forms.ToolTip]::New()

#$FCGToolTip.SetToolTip($FormControl, "Form Control Help")

# ************************************************
# FCG ImageList
# ************************************************
#region $FCGImageList = [System.Windows.Forms.ImageList]::New()
$FCGImageList = [System.Windows.Forms.ImageList]::New($FCGFormComponents)
#$FCGImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth8Bit
#$FCGImageList.ImageSize = [System.Drawing.Size]::New(16, 16)
#$FCGImageList.ImageStream = [System.Windows.Forms.ImageListStreamer]::New()
#$FCGImageList.Tag = [System.Object]::New()
#$FCGImageList.TransparentColor = [System.Drawing.Color]::Color [Transparent]
#endregion $FCGImageList = [System.Windows.Forms.ImageList]::New()

#$FCGImageList.Images.Add([System.Drawing.Image]$Value, [System.Drawing.Color]$TransparentColor)
#$FCGImageList.Images.Add([System.Windows.Forms.ImageList+Original]$Original, [System.Windows.Forms.ImageList+ImageCollection+ImageInfo]$ImageInfo)
#$FCGImageList.Images.Add([System.String]$Key, [System.Drawing.Image]$Image)
#$FCGImageList.Images.Add([System.String]$Key, [System.Drawing.Icon]$Icon)
#$FCGImageList.Images.Add([System.Drawing.Icon]$Value)
#$FCGImageList.Images.Add([System.Drawing.Image]$Value)
#$FCGImageList.Images.AddRange([System.Drawing.Image[]]$Images)
#$FCGImageList.BeginUpdate()
#$FCGImageList.EndUpdate()


#region ******** FCG Custom Icons ********

#region ******** $FCGFormIcon ********
# Icons for Forms are 16x16
$FCGFormIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi3EhFIxzJm2Pejh/kHs5f5B7OX+Qezl/kHs5f5B7OX+Qezl/j3o4f4xz
KG2LciUUAAAAAAAAAAAAAAAAjXMkFpeGU+Soo6D/qKSi/6ikov+opKL/qKSi/6ikov+opKL/qKSi/6ikov+oo6D/mIZT5I93LRYAAAAAAAAAAJB3K3azrqz/v7u6/725uP+9ubj/vbm4/725uP+9ubj/vbm4/725
uP+9ubj/v7u6/7OurP+SejF2AAAAAAAAAACXgDuHw8C//3x4d/91cXD/dXFw/3VxcP91cXD/dXFw/3VxcP91cXD/dXFw/3x4d//DwL//mYNBhwAAAAAAAAAAmoQ/h7y5uP9xbWz/cW1s/3FtbP9xbWz/cW1s/3Ft
bP9xbWz/cW1s/3FtbP9xbWz/vLm4/52HRocAAAAAAAAAAJ6IQ4e9u7n/Z2Rj/3Bta/9oaWb/ZWNh/2VhYP9lYWD/ZWFg/2VhYP9lYWD/ZWFg/727uf+hjEqHAAAAAAAAAACijEeHv7y7/2hlZP+fnZz/b4d9/11f
XP9YVVT/WFVU/1hVVP9YVVT/WFVU/1hVVP+/vLv/pZBOhwAAAAAAAAAAppBLh8C9vP+DkZn/Noaw/410HP9KVWP/JlGg/0pIR/9KSEf/SkhH/0pIR/9KSEf/wL28/6mUUocAAAAAAAAAAKmTTofCv77/oqKh/6Wo
qP+Vkor/cXBw/1dZXf9LSEf/Q0A//0NAP/9IRUT/VFJQ/8K/vv+tmFaHAAAAAAAAAACkjEB24N7d/3Bubf95d3b/eXd2/3l3dv95d3b/eXd2/3l3dv95d3b/eXd2/3Bubf/g3t3/qJJKdgAAAAAAAAAAooo+FsS1
guTu7ev/5OPj/+Tj4//k4+P/5OPj/+Tj4//k4+P/5OPj/+Tj4//u7ev/xLWD5KmSSxYAAAAAAAAAAAAAAACljkQUqpRMbbmnan+6qGx/uqhsf7qobH+6qGx/uqhsf7qobH+5p2t/q5ZPbaiSShQAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQf//rEHAA6xBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQcADrEH//6xB//+sQQ==
"@
#endregion ******** $FCGFormIcon ********
$FCGImageList.Images.Add("FCGFormIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FCGFormIcon))))

#region ******** $ExitIcon ********
$ExitIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA
AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F
RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE
AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA
AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2
Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey
6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3
y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==
"@
#endregion ******** $ExitIcon ********
$FCGImageList.Images.Add("ExitIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExitIcon))))

#region ******** $HelpIcon ********
$HelpIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9
f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV
S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq
6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg
JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn
NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9
XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA
AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA
AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==
"@
#endregion ******** $HelpIcon ********
$FCGImageList.Images.Add("HelpIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($HelpIcon))))

#region ******** $BugIcon ********
$BugIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE/UHwBQ1VsAUNVaAFDVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFjYfAp57/oAfvf/AH/4/wBx7vkAVtp0AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVvYaSuR+P8jlv//DYX4/wB/+f8Acu//AHz2/gBV2GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABycHAgL2CxCyB86u4YbOL/BU7R/xd+8P8Jdu7/AELK/wB4
8/8AaejoKF2zCnFwcRwAAAAAAAAAAAAAAAAAAAAAdXJupTVdpY8tnvv/AkjO/wVLz/8lh/P/Ho35/w2D9/8Ah/7/AIH6/0Bfm7R0cW9zAAAAAAAAAAAAAAAAAAAAAGxudR08aKbzJ6b//y6g/P81of3/MJX4/yqT
+f8ilP3/AEnP/wBu7P83YqbXYmt9BgAAAAAAAAAAAAAAAAAAAAAAAAAAE2XNkheo//8npv//MaX//y+X+P8xl/r/MZz+/xp+7/8MiPr/CFrUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZ0W0Fpv7/CGrf/wtc
2P8qmfj/MJn5/xNl3v8ff+7/IpX+/wlX02MAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcltIZJSJAJD0/xKX9P8QjfH/IJr4/yua+f8MW9j/In3r/yWG8f9LZZWFbm9zSgAAAAAAAAAAAAAAAAAAAAB0cW5HZ2xzYSZe
luFPkLD/Inyv/yp1q/8ydaz/Onqu/zx4rf8yW5TbZmt0XnRxbjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRT1CZkI2M/2pmZf9jYF//XFlY/1RRUP9LSEf/RUNFjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABxbmsbbWpny3BtbPGCfn3/Y2Bf/1xZWP9UUVD/SUZF72xpZr1vbGkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXJvMmxpZjBVUlFMdXJy9oOAf/9tamn/UExM9ExIR0RsaWZKdHFuGAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9MSyVSTk55UExMd0pGRiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQfw/rEH4H6xB8A+sQcADrEHAA6xBwAOsQeAHrEHgB6xBwAOsQcADrEHwD6xB4AesQeAHrEH8P6xB//+sQQ==
"@
#endregion ******** $BugIcon ********
$FCGImageList.Images.Add("BugIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($BugIcon))))

#endregion ******** FCG Custom Icons ********


# ************************************************
# FCG Form
# ************************************************
#region $FCGForm = [System.Windows.Forms.Form]::New()
$FCGForm = [System.Windows.Forms.Form]::New()
#$FCGForm.AcceptButton = [System.Windows.Forms.IButtonControl]::New()
#$FCGForm.ActiveControl = [System.Windows.Forms.Control]::New()
#$FCGForm.AllowDrop = $False
#$FCGForm.AllowTransparency = $False
#$FCGForm.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
#$FCGForm.AutoScale = $True
#$FCGForm.AutoScaleBaseSize = [System.Drawing.Size]::New(5, 13)
#$FCGForm.AutoScaleDimensions = [System.Drawing.SizeF]::New(0, 0)
#$FCGForm.AutoScaleMode = [System.Windows.Forms.AutoScaleMode]::Inherit
#$FCGForm.AutoScroll = $False
#$FCGForm.AutoScrollMargin = [System.Drawing.Size]::New(0, 0)
#$FCGForm.AutoScrollMinSize = [System.Drawing.Size]::New(0, 0)
#$FCGForm.AutoScrollOffset = [System.Drawing.Point]::New(0, 0)
#$FCGForm.AutoScrollPosition = [System.Drawing.Point]::New(0, 0)
#$FCGForm.AutoSize = $False
#$FCGForm.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowOnly
#$FCGForm.AutoValidate = [System.Windows.Forms.AutoValidate]::EnablePreventFocusChange
$FCGForm.BackColor = [MyConfig]::Colors.Back
#$FCGForm.BackgroundImage = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageString)))
#$FCGForm.BackgroundImageLayout = [System.Windows.Forms.ImageLayout]::Tile
#$FCGForm.BindingContext = [System.Windows.Forms.BindingContext]::New()
#$FCGForm.Bounds = [System.Drawing.Rectangle]::New(0, 0, 300, 300)
#$FCGForm.CancelButton = [System.Windows.Forms.IButtonControl]::New()
#$FCGForm.Capture = $False
#$FCGForm.CausesValidation = $True
#$FCGForm.ClientSize = [System.Drawing.Size]::New(284, 261)
#$FCGForm.ContextMenu = [System.Windows.Forms.ContextMenu]::New()
#$FCGForm.ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$FCGForm.ControlBox = $True
#$FCGForm.Cursor = [System.Windows.Forms.Cursors]::Default
#$FCGForm.DesktopBounds = [System.Drawing.Rectangle]::New(0, 0, 300, 300)
#$FCGForm.DesktopLocation = [System.Drawing.Point]::New(0, 0)
#$FCGForm.DialogResult = [System.Windows.Forms.DialogResult]::None
#$FCGForm.Dock = [System.Windows.Forms.DockStyle]::None
#$FCGForm.Enabled = $True
$FCGForm.Font = [MyConfig]::Font.Regular
$FCGForm.ForeColor = [MyConfig]::Colors.Fore
#$FCGForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
#$FCGForm.Height = 300
#$FCGForm.HelpButton = $False
$FCGForm.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FCGFormIcon)))
#$FCGForm.ImeMode = [System.Windows.Forms.ImeMode]::NoControl
#$FCGForm.IsAccessible = $False
#$FCGForm.IsMdiContainer = $False
$FCGForm.KeyPreview = $True
#$FCGForm.Left = 0
#$FCGForm.Location = [System.Drawing.Point]::New(0, 0)
#$FCGForm.MainMenuStrip = [System.Windows.Forms.MenuStrip]::New()
#$FCGForm.Margin = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 3, [MyConfig]::FormSpacer, 3)
#$FCGForm.MaximizeBox = $True
#$FCGForm.MaximumSize = [System.Drawing.Size]::New(0, 0)
#$FCGForm.MdiParent = [System.Windows.Forms.Form]::New()
#$FCGForm.Menu = [System.Windows.Forms.MainMenu]::New()
#$FCGForm.MinimizeBox = $True
$FCGForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))
$FCGForm.Name = "FCGForm"
#$FCGForm.Opacity = 1
#$FCGForm.Owner = [System.Windows.Forms.Form]::New()
#$FCGForm.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)
#$FCGForm.Parent = [System.Windows.Forms.Control]::New()
#$FCGForm.Region = [System.Drawing.Region]::New()
#$FCGForm.RightToLeft = [System.Windows.Forms.RightToLeft]::No
#$FCGForm.RightToLeftLayout = $False
#$FCGForm.ShowIcon = $True
#$FCGForm.ShowInTaskbar = $True
#$FCGForm.Size = [System.Drawing.Size]::New(300, 300)
#$FCGForm.SizeGripStyle = [System.Windows.Forms.SizeGripStyle]::Auto
#$FCGForm.StartPosition = [System.Windows.Forms.FormStartPosition]::WindowsDefaultLocation
#$FCGForm.TabIndex = 0
#$FCGForm.TabStop = $True
#$FCGForm.Tag = (-not [MyConfig]::Production)
$FCGForm.Text = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
#$FCGForm.Top = 0
#$FCGForm.TopLevel = $True
#$FCGForm.TopMost = $False
#$FCGForm.TransparencyKey = [System.Drawing.Color]::Color [Empty]
#$FCGForm.UseWaitCursor = $False
#$FCGForm.Visible = $False
#$FCGForm.Width = 300
#$FCGForm.WindowState = [System.Windows.Forms.FormWindowState]::Normal
#endregion $FCGForm = [System.Windows.Forms.Form]::New()

#region ******** Function Start-FCGFormClosing ********
function Start-FCGFormClosing
{
  <#
    .SYNOPSIS
      Closing Event for the FCG Form Control
    .DESCRIPTION
      Closing Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Closing Event
    .PARAMETER EventArg
       The Event Arguments for the Form Closing Event
    .EXAMPLE
       Start-FCGFormClosing -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Closing Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 2 -Category 0 -Message "Exiting $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"

  if ([MyConfig]::Production)
  {
    # Show Console Window
    $Script:VerbosePreference = "Continue"
    $Script:DebugPreference = "Continue"

    [Void][Console.Window]::Show()
    [System.Console]::Title = "CLOSING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $FCGForm.Tag = $True
  }

  Write-Verbose -Message "Exit Closing Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormClosing ********
$FCGForm.add_Closing({Start-FCGFormClosing -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormKeyDown ********
function Start-FCGFormKeyDown
{
  <#
    .SYNOPSIS
      KeyDown Event for the FCG Form Control
    .DESCRIPTION
      KeyDown Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-FCGFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  If ($EventArg.Control -and $EventArg.Alt)
  {
    Switch ($EventArg.KeyCode)
    {
      "F10"
      {
        If ($FCGForm.Tag)
        {
          # Hide Console Window
          $Script:VerbosePreference = "SilentlyContinue"
          $Script:DebugPreference = "SilentlyContinue"
          [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
          [Void][Console.Window]::Hide()
          $FCGForm.Tag = $False
        }
        Else
        {
          # Show Console Window
          $Script:VerbosePreference = "Continue"
          $Script:DebugPreference = "Continue"
          [Void][Console.Window]::Show()
          [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
          $FCGForm.Tag = $True
        }
        $FCGForm.Activate()
        $FCGForm.Select()
        Break
      }
    }
  }
  Else
  {
    Switch ($EventArg.KeyCode)
    {
      "F1"
      {
        $FCGToolTip.Active = (-not $FCGToolTip.Active)
        $FCGBtmStatusStrip.Items["Status"].Text = "Enable / Disable My PS5 Form Code Generator ToolTips = $($FCGToolTip.Active)"
        Break
      }
      "F2"
      {
        $FCGBtmStatusStrip.Items["Status"].Text = "Show Change Log for $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
        $ScriptContents = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()
        $CLogStart = ($ScriptContents.IndexOf("<#") + 2)
        $CLogEnd = $ScriptContents.IndexOf("#>")
        Show-ChangeLogDialog -ChangeText ($ScriptContents.SubString($CLogStart, ($CLogEnd - $CLogStart)))
        Break
      }
    }
  }

  Write-Verbose -Message "Exit KeyDown Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormKeyDown ********
$FCGForm.add_KeyDown({Start-FCGFormKeyDown -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormLoad ********
function Start-FCGFormLoad
{
  <#
    .SYNOPSIS
      Load Event for the FCG Form Control
    .DESCRIPTION
      Load Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Load Event
    .PARAMETER EventArg
       The Event Arguments for the Form Load Event
    .EXAMPLE
       Start-FCGFormLoad -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Load Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea
  $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)
  $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)

  if ([MyConfig]::Production)
  {
    # Disable Control Close Menu / [X]
    #[ControlBox.Menu]::DisableFormClose($FCGForm.Handle)

    # Hide Console Window
    $Script:VerbosePreference = "SilentlyContinue"
    $Script:DebugPreference = "SilentlyContinue"

    [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    [Void][Console.Window]::Hide()
    $FCGForm.Tag = $False
  }
  else
  {
    [Void][Console.Window]::Show()
    [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $FCGForm.Tag = $True
  }

  Write-Verbose -Message "Exit Load Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormLoad ********
$FCGForm.add_Load({Start-FCGFormLoad -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormMove ********
function Start-FCGFormMove
{
  <#
    .SYNOPSIS
      Move Event for the FCG Form Control
    .DESCRIPTION
      Move Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Move Event
    .PARAMETER EventArg
       The Event Arguments for the Form Move Event
    .EXAMPLE
       Start-FCGFormMove -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Move Event for `$FCGForm"

  [MyConfig]::AutoExit = 0


  Write-Verbose -Message "Exit Move Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormMove ********
$FCGForm.add_Move({Start-FCGFormMove -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormResize ********
function Start-FCGFormResize
{
  <#
    .SYNOPSIS
      Resize Event for the FCG Form Control
    .DESCRIPTION
      Resize Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Resize Event
    .PARAMETER EventArg
       The Event Arguments for the Form Resize Event
    .EXAMPLE
       Start-FCGFormResize -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Resize Event for `$FCGForm"

  [MyConfig]::AutoExit = 0


  Write-Verbose -Message "Exit Resize Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormResize ********
$FCGForm.add_Resize({Start-FCGFormResize -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormShown ********
function Start-FCGFormShown
{
  <#
    .SYNOPSIS
      Shown Event for the FCG Form Control
    .DESCRIPTION
      Shown Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-FCGFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Shown Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  $Sender.Refresh()

  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 1 -Category 0 -Message "Begin Running $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"

  $HashTable = @{"ShowHeader" = $True}
  $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-InitiliazeFCGUtility -RichTextBox $RichTextBox -HashTable $HashTable }
  $DialogResult = Show-MyStatusDialog -ScriptBlock $ScriptBlock -DialogTitle "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable

  if ([MyConfig]::Production)
  {
    # Enable $FCGTimer
    $FCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
  }

  Write-Verbose -Message "Exit Shown Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormShown ********
$FCGForm.add_Shown({Start-FCGFormShown -Sender $This -EventArg $PSItem})


#region ******** Controls for FCG Form ********

#region $FCGTimer = [System.Windows.Forms.Timer]::New()
$FCGTimer = [System.Windows.Forms.Timer]::New($FCGFormComponents)
#$FCGTimer.Enabled = $False
$FCGTimer.Interval = [MyConfig]::AutoExitTic
#$FCGTimer.Tag = [System.Object]::New()
#endregion $FCGTimer = [System.Windows.Forms.Timer]::New()

#region ******** Function Start-FCGTimerTick ********
function Start-FCGTimerTick
{
  <#
    .SYNOPSIS
      Tick Event for the FCG Timer Control
    .DESCRIPTION
      Tick Event for the FCG Timer Control
    .PARAMETER Sender
       The Timer Control that fired the Tick Event
    .PARAMETER EventArg
       The Event Arguments for the Timer Tick Event
    .EXAMPLE
       Start-FCGTimerTick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Timer]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Tick Event for `$FCGTimer"

  [MyConfig]::AutoExit += 1
  Write-Verbose -Message "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)
  {
    $FCGForm.Close()
  }
  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)
  {
    $FCGBtmStatusStrip.Items["Status"].Text = "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  }

  #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit Tick Event for `$FCGTimer"
}
#endregion ******** Function Start-FCGTimerTick ********
$FCGTimer.add_Tick({Start-FCGTimerTick -Sender $This -EventArg $PSItem})


#region $FCGNotifyIcon = [System.Windows.Forms.NotifyIcon]::New()
$FCGNotifyIcon = [System.Windows.Forms.NotifyIcon]::New($FCGFormComponents)
#$FCGNotifyIcon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::None
#$FCGNotifyIcon.BalloonTipText = ""
#$FCGNotifyIcon.BalloonTipTitle = ""
#$FCGNotifyIcon.ContextMenu = [System.Windows.Forms.ContextMenu]::New()
#$FCGNotifyIcon.ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$FCGNotifyIcon.Icon = $FCGForm.Icon
#$FCGNotifyIcon.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($IconString)))
#$FCGNotifyIcon.Tag = [System.Object]::New()
$FCGNotifyIcon.Text = "FCGNotifyIcon"
#$FCGNotifyIcon.Visible = $False
#endregion $FCGNotifyIcon = [System.Windows.Forms.NotifyIcon]::New()

#region ******** Function Start-FCGNotifyIconMouseClick ********
function Start-FCGNotifyIconMouseClick
{
  <#
    .SYNOPSIS
      MouseClick Event for the FCG NotifyIcon Control
    .DESCRIPTION
      MouseClick Event for the FCG NotifyIcon Control
    .PARAMETER Sender
       The NotifyIcon Control that fired the MouseClick Event
    .PARAMETER EventArg
       The Event Arguments for the NotifyIcon MouseClick Event
    .EXAMPLE
       Start-FCGNotifyIconMouseClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.NotifyIcon]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter MouseClick Event for `$FCGNotifyIcon"

  [MyConfig]::AutoExit = 0

  #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit MouseClick Event for `$FCGNotifyIcon"
}
#endregion ******** Function Start-FCGNotifyIconMouseClick ********
$FCGNotifyIcon.add_MouseClick({Start-FCGNotifyIconMouseClick -Sender $This -EventArg $PSItem})


# ************************************************
# FCGMain SplitContainer
# ************************************************
#region $FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGForm.Controls.Add($FCGMainSplitContainer)
#$FCGMainSplitContainer.ActiveControl = [System.Windows.Forms.Control]::New()
#$FCGMainSplitContainer.AllowDrop = $False
#$FCGMainSplitContainer.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
#$FCGMainSplitContainer.AutoScaleDimensions = [System.Drawing.SizeF]::New(0, 0)
#$FCGMainSplitContainer.AutoScaleMode = [System.Windows.Forms.AutoScaleMode]::Inherit
#$FCGMainSplitContainer.AutoScroll = $False
#$FCGMainSplitContainer.AutoScrollMargin = [System.Drawing.Size]::New(0, 0)
#$FCGMainSplitContainer.AutoScrollMinSize = [System.Drawing.Size]::New(0, 0)
#$FCGMainSplitContainer.AutoScrollOffset = [System.Drawing.Point]::New(0, 0)
#$FCGMainSplitContainer.AutoScrollPosition = [System.Drawing.Point]::New(0, 0)
#$FCGMainSplitContainer.AutoSize = $False
#$FCGMainSplitContainer.AutoValidate = [System.Windows.Forms.AutoValidate]::EnablePreventFocusChange
#$FCGMainSplitContainer.BackColor = [MyConfig]::Colors.Back
#$FCGMainSplitContainer.BackgroundImage = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageString)))
#$FCGMainSplitContainer.BackgroundImageLayout = [System.Windows.Forms.ImageLayout]::Tile
#$FCGMainSplitContainer.BindingContext = [System.Windows.Forms.BindingContext]::New()
#$FCGMainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None
#$FCGMainSplitContainer.Bounds = [System.Drawing.Rectangle]::New(0, 0, 150, 100)
#$FCGMainSplitContainer.Capture = $False
#$FCGMainSplitContainer.CausesValidation = $True
#$FCGMainSplitContainer.ClientSize = [System.Drawing.Size]::New(150, 100)
#$FCGMainSplitContainer.ContextMenu = [System.Windows.Forms.ContextMenu]::New()
#$FCGMainSplitContainer.ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$FCGMainSplitContainer.Cursor = [System.Windows.Forms.Cursors]::Default
$FCGMainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill
#$FCGMainSplitContainer.Enabled = $True
#$FCGMainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None
#$FCGMainSplitContainer.Font = [MyConfig]::Font.Regular
#$FCGMainSplitContainer.ForeColor = [MyConfig]::Colors.Fore
#$FCGMainSplitContainer.Height = 100
#$FCGMainSplitContainer.ImeMode = [System.Windows.Forms.ImeMode]::NoControl
#$FCGMainSplitContainer.IsAccessible = $False
#$FCGMainSplitContainer.IsSplitterFixed = $False
#$FCGMainSplitContainer.Left = 0
#$FCGMainSplitContainer.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
#$FCGMainSplitContainer.Margin = [System.Windows.Forms.Padding]::New(3, 3, 3, 3)
#$FCGMainSplitContainer.MaximumSize = [System.Drawing.Size]::New(0, 0)
#$FCGMainSplitContainer.MinimumSize = [System.Drawing.Size]::New(0, 0)
$FCGMainSplitContainer.Name = "FCGMainSplitContainer"
#$FCGMainSplitContainer.Orientation = [System.Windows.Forms.Orientation]::Vertical
#$FCGMainSplitContainer.Padding = [System.Windows.Forms.Padding]::New(0, 0, 0, 0)
#$FCGMainSplitContainer.Panel1Collapsed = $False
#$FCGMainSplitContainer.Panel1MinSize = 25
#$FCGMainSplitContainer.Panel2Collapsed = $False
#$FCGMainSplitContainer.Panel2MinSize = 25
#$FCGMainSplitContainer.Parent = [System.Windows.Forms.Control]::New()
#$FCGMainSplitContainer.Region = [System.Drawing.Region]::New()
#$FCGMainSplitContainer.RightToLeft = [System.Windows.Forms.RightToLeft]::No
#$FCGMainSplitContainer.Size = [System.Drawing.Size]::New(150, 100)
#$FCGMainSplitContainer.SplitterDistance = 50
#$FCGMainSplitContainer.SplitterIncrement = 1
#$FCGMainSplitContainer.SplitterWidth = 4
#$FCGMainSplitContainer.TabIndex = 0
#$FCGMainSplitContainer.TabStop = $True
#$FCGMainSplitContainer.Tag = [System.Object]::New()
$FCGMainSplitContainer.Text = "FCGMainSplitContainer"
#$FCGMainSplitContainer.Top = 0
#$FCGMainSplitContainer.UseWaitCursor = $False
#$FCGMainSplitContainer.Visible = $True
#$FCGMainSplitContainer.Width = 150
#endregion $FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()

# ************************************************
# $FCGMainSplitContainer Panel1 Controls
# ************************************************
#region ******** $FCGMainSplitContainer Panel1 Controls ********

$FCGMainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)

#endregion ******** $FCGMainSplitContainer Panel1 Controls ********

# ************************************************
# $FCGMainSplitContainer Panel2 Controls
# ************************************************
#region ******** $FCGMainSplitContainer Panel2 Controls ********

$FCGMainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)

#endregion ******** $FCGMainSplitContainer Panel2 Controls ********


# ************************************************
# FCGTop MenuStrip
# ************************************************
#region $FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$FCGForm.Controls.Add($FCGTopMenuStrip)
$FCGForm.MainMenuStrip = $FCGTopMenuStrip
#$FCGTopMenuStrip.AllowDrop = $False
#$FCGTopMenuStrip.AllowItemReorder = $False
#$FCGTopMenuStrip.AllowMerge = $True
#$FCGTopMenuStrip.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
#$FCGTopMenuStrip.AutoScroll = $False
#$FCGTopMenuStrip.AutoScrollMargin = [System.Drawing.Size]::New(0, 0)
#$FCGTopMenuStrip.AutoScrollMinSize = [System.Drawing.Size]::New(0, 0)
#$FCGTopMenuStrip.AutoScrollOffset = [System.Drawing.Point]::New(0, 0)
#$FCGTopMenuStrip.AutoScrollPosition = [System.Drawing.Point]::New(0, 0)
#$FCGTopMenuStrip.AutoSize = $True
$FCGTopMenuStrip.BackColor = [MyConfig]::Colors.Back
#$FCGTopMenuStrip.BackgroundImage = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageString)))
#$FCGTopMenuStrip.BackgroundImageLayout = [System.Windows.Forms.ImageLayout]::Tile
#$FCGTopMenuStrip.BindingContext = [System.Windows.Forms.BindingContext]::New()
#$FCGTopMenuStrip.Bounds = [System.Drawing.Rectangle]::New(0, 0, 200, 24)
#$FCGTopMenuStrip.CanOverflow = $False
#$FCGTopMenuStrip.Capture = $False
#$FCGTopMenuStrip.CausesValidation = $False
#$FCGTopMenuStrip.ClientSize = [System.Drawing.Size]::New(200, 24)
#$FCGTopMenuStrip.ContextMenu = [System.Windows.Forms.ContextMenu]::New()
#$FCGTopMenuStrip.ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$FCGTopMenuStrip.Cursor = [System.Windows.Forms.Cursors]::Default
#$FCGTopMenuStrip.DefaultDropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::BelowRight
#$FCGTopMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Top
#$FCGTopMenuStrip.Enabled = $True
$FCGTopMenuStrip.Font = [MyConfig]::Font.Regular
$FCGTopMenuStrip.ForeColor = [MyConfig]::Colors.Fore
#$FCGTopMenuStrip.GripMargin = [System.Windows.Forms.Padding]::New(2, 2, 0, 2)
#$FCGTopMenuStrip.GripStyle = [System.Windows.Forms.ToolStripGripStyle]::Hidden
#$FCGTopMenuStrip.Height = 24
$FCGTopMenuStrip.ImageList = $FCGImageList
#$FCGTopMenuStrip.ImageScalingSize = [System.Drawing.Size]::New(16, 16)
#$FCGTopMenuStrip.ImeMode = [System.Windows.Forms.ImeMode]::NoControl
#$FCGTopMenuStrip.IsAccessible = $False
#$FCGTopMenuStrip.LayoutSettings = [System.Windows.Forms.LayoutSettings]::New()
#$FCGTopMenuStrip.LayoutStyle = [System.Windows.Forms.ToolStripLayoutStyle]::HorizontalStackWithOverflow
#$FCGTopMenuStrip.Left = 0
#$FCGTopMenuStrip.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
#$FCGTopMenuStrip.Margin = [System.Windows.Forms.Padding]::New(0, 0, 0, 0)
#$FCGTopMenuStrip.MaximumSize = [System.Drawing.Size]::New(0, 0)
#$FCGTopMenuStrip.MdiWindowListItem = [System.Windows.Forms.ToolStripMenuItem]::New()
#$FCGTopMenuStrip.MinimumSize = [System.Drawing.Size]::New(0, 0)
$FCGTopMenuStrip.Name = "FCGTopMenuStrip"
#$FCGTopMenuStrip.Padding = [System.Windows.Forms.Padding]::New(6, 2, 0, 2)
#$FCGTopMenuStrip.Parent = [System.Windows.Forms.Control]::New()
#$FCGTopMenuStrip.Region = [System.Drawing.Region]::New()
#$FCGTopMenuStrip.Renderer = [System.Windows.Forms.ToolStripRenderer]::New()
#$FCGTopMenuStrip.RenderMode = [System.Windows.Forms.ToolStripRenderMode]::ManagerRenderMode
#$FCGTopMenuStrip.RightToLeft = [System.Windows.Forms.RightToLeft]::No
#$FCGTopMenuStrip.ShowItemToolTips = $False
#$FCGTopMenuStrip.Size = [System.Drawing.Size]::New(200, 24)
#$FCGTopMenuStrip.Stretch = $True
#$FCGTopMenuStrip.TabIndex = 0
#$FCGTopMenuStrip.TabStop = $False
#$FCGTopMenuStrip.Tag = [System.Object]::New()
$FCGTopMenuStrip.Text = "FCGTopMenuStrip"
#$FCGTopMenuStrip.TextDirection = [System.Windows.Forms.ToolStripTextDirection]::Horizontal
#$FCGTopMenuStrip.Top = 0
#$FCGTopMenuStrip.UseWaitCursor = $False
#$FCGTopMenuStrip.Visible = $True
#$FCGTopMenuStrip.Width = 200
#endregion $FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()

#$FCGTopMenuStrip.Items.Add([System.String]$Text)
#$FCGTopMenuStrip.Items.Add([System.Drawing.Image]$Image)
#$FCGTopMenuStrip.Items.Add([System.String]$Text, [System.Drawing.Image]$Image)
#$FCGTopMenuStrip.Items.Add([System.String]$Text, [System.Drawing.Image]$Image, [System.EventHandler]$OnClick)
#$FCGTopMenuStrip.Items.Add([System.Windows.Forms.ToolStripItem]$Value)
#$FCGTopMenuStrip.Items.AddRange([System.Windows.Forms.ToolStripItem[]]$ToolStripItems)
#$FCGTopMenuStrip.Items.AddRange([System.Windows.Forms.ToolStripItemCollection]$ToolStripItems)
#$FCGTopMenuStrip.BeginUpdate()
#$FCGTopMenuStrip.EndUpdate()


#region ******** Function Start-FCGTopMenuStripItemClick ********
function Start-FCGTopMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGTop ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGTop ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGTopMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGTopMenuStripItem"

  [MyConfig]::AutoExit = 0

  Switch ($Sender.Name)
  {
    "AdvGroupBox"
    {
      $MyCode = Build-MyFCGAdvDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType GroupBox
      Break
    }
    "AdvGroupBox"
    {
      $MyCode = Build-MyFCGAdvDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType Panel
      Break
    }
    "AdvGroupBox"
    {
      $MyCode = Build-MyFCGAdvDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType SplitContainer
      Break
    }
    "BasicGroupBox"
    {
      $MyCode = Build-MyFCGBasicDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType GroupBox
      Break
    }
    "BasicGroupBox"
    {
      $MyCode = Build-MyFCGBasicDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType Panel
      Break
    }
    "BasicGroupBox"
    {
      $MyCode = Build-MyFCGBasicDialog -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType SplitContainer
      Break
    }
    "RichTextStatus"
    {
      $MyCode = Build-MyFCGRichTextStatus -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "TextBoxStatus"
    {
      $MyCode = Build-MyFCGTextBoxStatus -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ProgressBarStatus"
    {
      $MyCode = Build-MyFCGLoadProgressBar -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ChangeLog"
    {
      $MyCode = Build-MyFCGShowChangeLog -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "AlertMessage"
    {
      $MyCode = Build-MyFCGShowAlertMessage -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "UserResponse"
    {
      $MyCode = Build-MyFCGGetUserResponse -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "UserTextInput"
    {
      $MyCode = Build-MyFCGGetUserTextInput -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "MultiTextPrompt"
    {
      $MyCode = Build-MyFCGMultiTextInput -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "CheckBoxChoice"
    {
      $MyCode = Build-MyFCGCheckBoxChoice -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "RadioButtonChoice"
    {
      $MyCode = Build-MyFCGRadioButtonChoice -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ListviewChoice"
    {
      $MyCode = Build-MyFCGSelectListView -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ListBoxChoice"
    {
      $MyCode = Build-MyFCGSelectListBox -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "CheckedListBoxChoice"
    {
      $MyCode = Build-MyFCGSelectCheckedListBox -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ComboBoxChoice"
    {
      $MyCode = Build-MyFCGSelectComboBox -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "ComboBoxFilter"
    {
      $MyCode = Build-MyFCGGetComboFilter -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "SelectIcon"
    {
      $MyCode = Build-MyFCGSelectIconFile -MyScriptName $ScriptName -MyDialogName $DialogName
      Break
    }
    "InfoWebBrowser"
    {
      $MyCode = Build-MyFCGShowScriptInfo -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType "WebBrowser"
      Break
    }
    "InfoRichText"
    {
      $MyCode = Build-MyFCGShowScriptInfo -MyScriptName $ScriptName -MyDialogName $DialogName -MyControlType "RichTextBox"
      Break
    }
    "Help"
    {
      Show-MyWebReport -ReportURL ([MyConfig]::HelpURL)
      Break
    }
    "Exit"
    {
      if ([MyConfig]::Production)
      {
        $FCGForm.Close()
      }
      else
      {
        # **** Testing - Exit to Nested Prompt ****
        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"
        $Host.EnterNestedPrompt()
        # **** Testing - Exit to Nested Prompt ****
      }
      Break
    }
  }

  Write-Verbose -Message "Exit Click Event for `$FCGTopMenuStripItem"
}
#endregion ******** Function Start-FCGTopMenuStripItemClick ********

$FCGTopMenuStripItem = New-MenuItem -Menu $FCGTopMenuStrip -Text "Generate" -Name "Generate" -Tag "Generate" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru

$FCGTopSubMenuStripItem = New-MenuItem -Menu $FCGTopMenuStripItem -Text "&Form" -Name "Form" -Tag "Form" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Panel" -Name "Panel" -Tag "Panel" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&SplitContailer" -Name "SplitContailer" -Tag "SplitContailer" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

$FCGTopSubMenuStripItem = New-MenuItem -Menu $FCGTopMenuStripItem -Text "&Dialog" -Name "Dialog" -Tag "Dialog" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru

$FCGTopSubSubMenuStripItem = New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Templates" -Name "Templates" -Tag "Templates" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Advanced Dialog - GroupBox" -Name "AdvGroupBox" -Tag "AdvGroupBox" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Advanced Dialog - Panel" -Name "AdvPanel" -Tag "AdvPanel" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Advanced Dialog - SplitContainer" -Name "AdvSplitContainer" -Tag "AdvSplitContainer" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Basic Dialog - GroupBox" -Name "BasicGroupBox" -Tag "BasicGroupBox" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Basic Dialog - Panel" -Name "BasicPanel" -Tag "BasicPanel" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&Basic Dialog - SplitContainer" -Name "BasicSplitContainer" -Tag "BasicSplitContainer" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem

(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&RichText Status" -Name "RichTextStatus" -Tag "RichTextStatus" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&TextBox Status" -Name "TextBoxStatus" -Tag "TextBoxStatus" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&ProgressBar Status" -Name "ProgressBarStatus" -Tag "ProgressBarStatus" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Change Log" -Name "ChangeLog" -Tag "ChangeLog" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Alert Message" -Name "AlertMessage" -Tag "AlertMessage" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&User Response" -Name "UserResponse" -Tag "UserResponse" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&User Text Input" -Name "UserTextInput" -Tag "UserTextInput" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Multi Text Prompt" -Name "MultiTextPrompt" -Tag "MultiTextPrompt" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&RadioButton Choice" -Name "RadioButtonChoice" -Tag "RadioButtonChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&CheckBox Choice" -Name "CheckBoxChoice" -Tag "CheckBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&ListBox Choice" -Name "ListBoxChoice" -Tag "ListBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&CheckedListBox Choice" -Name "CheckedListBoxChoice" -Tag "CheckedListBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Listview Choice" -Name "ListviewChoice" -Tag "ListviewChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&ComboBox Choice" -Name "ComboBoxChoice" -Tag "ComboBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&ComboBox Filter" -Name "ComboBoxFilter" -Tag "ComboBoxFilter" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Select Icon" -Name "SelectIcon" -Tag "SelectIcon" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
$FCGTopSubSubMenuStripItem = New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "&Information" -Name "Information" -Tag "Information" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&WebBrowser" -Name "InfoWebBrowser" -Tag "InfoWebBrowser" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "&RichText" -Name "InfoRichText" -Tag "InfoRichText" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

(New-MenuItem -Menu $FCGTopMenuStripItem -Text "&Control" -Name "Control" -Tag "Control" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "&Event" -Name "Event" -Tag "Events" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "&Library" -Name "Library" -Tag "Library" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

New-MenuSeparator -Menu $FCGTopMenuStrip

#(New-MenuItem -Menu $FCGTopMenuStrip -Text "&Bug" -Name "Bug" -Tag "Bug" -DisplayStyle "ImageAndText" -ImageKey "BugIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStrip -Text "&Help" -Name "Help" -Tag "Help" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStrip -Text "E&xit" -Name "Exit" -Tag "Exit" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

# Right Dropdown
#$DropDownMenu = New-MenuItem -Menu $FCGTopMenuStrip -Text "DropDown Menu" -Name "DropMenu" -Tag "DropMenu" -DisplayStyle "ImageAndText" -TextImageRelation "TextBeforeImage" -ImageKey "FCGFormIcon" -PassThru
#$DropDownMenu.DropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::BelowRight
#$DropDownMenu.DropDown.RightToLeft = [System.Windows.Forms.RightToLeft]::No

# Sample Dialogs
#region ******** Function Start-FCGMySampleDialogsMenuStripItemClick ********
function Start-FCGMySampleDialogsMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGMySampleDialogs ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGMySampleDialogs ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGMySampleDialogsMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGMySampleDialogsMenuStripItem"

  [MyConfig]::AutoExit = 0

  Switch ($Sender.Name)
  {
    "Status01"
    {
      #region Show Status Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Status Dialog 01"
      $HashTable = @{"ShowHeader" = $True; "Name" = "Item Name"; "Value" = "Item Value"}
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-MyStatusRichTextBox -RichTextBox $RichTextBox -HashTable $HashTable }
      $CommandResult = Show-MyStatusDialog -ScriptBlock $ScriptBlock -DialogTitle "This is a Test Status 01" -ButtonMid "OK" -HashTable $HashTable -AllowControl
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Status Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult

        # Write KPI Event
        #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Successfull KPI Event"
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Status Dialog 01"

        # Write KPI Event
        #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Failed KPI Event"
      }
      #endregion Show Status Dialog 01
      Break
    }
    "Status02"
    {
      #region Show Status Dialog 02
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Status Dialog 02"
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-MyStatusRichTextBox -RichTextBox $RichTextBox }
      $CommandResult = Show-MyStatusDialog -ScriptBlock $ScriptBlock -DialogTitle "This is a Test Status 02" -ButtonMid "OK" -AllowControl
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Status Dialog 02"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult

        # Write KPI Event
        #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Successfull KPI Event"
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Status Dialog 02"

        # Write KPI Event
        #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Failed KPI Event"
      }
      #endregion Show Status Dialog 02
      Break
    }
    "UserAlert01"
    {
      #region Show User Alert 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show User Alert 01"
      # Write KPI Event
      #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Successfull KPI Event"
      Show-UserAlertDialog -Title "Message Alert Title" -Message "Display this Alert Message Text to the user." -MsgType "Info"
      # Success
      $FCGBtmStatusStrip.Items["Status"].Text = "Success Show User Alert 01"
      #endregion Show User Alert 01
      Break
    }
    "UserResponse01"
    {
      #region Show Get User Response 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get User Response 01"
      $CommandResult = Show-GetUserResponseDialog -MessageText "This is the Sample Message I wish to Display." -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get User Response 01 - $($CommandResult.DialogResult)"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get User Response 01 - $($CommandResult.DialogResult)"
      }
      #endregion Show Get User Response 01
      Break
    }
    "UserText01"
    {
      #region Show User Text Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show User Text Dialog 01"
      $CommandResult = Show-GetUserTextDialog -DialogTitle "This is User Text 01" -MessageText "Show this Message Prompt" -Items "Sample Text"
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success User Text Dialog 01 - $($CommandResult.Items[0])"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Items
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed User Text Dialog 01"
      }
      #endregion Show User Text Dialog 02
      Break
    }
    "UserText02"
    {
      #region Show User Text Dialog 02
      $FCGBtmStatusStrip.Items["Status"].Text = "Show User Text Dialog 02"
      $CommandResult = Show-GetUserTextDialog -DialogTitle "This is User Text 02" -MessageText "Show this Message Prompt" -Items @("Computer01", "Computer02", "Computer03") -Height 20 -Multi
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success User Text Dialog 02 - $($CommandResult.Items.Count) Items"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Items
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed User Text Dialog 02"
      }
      #endregion Show User Text Dialog 02
      Break
    }
    "MultiValue01"
    {
      #region Show Multi Value Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Multi Value Dialog 01"
      $OrderedItems = [Ordered]@{ "FirstName" = "John"; "LastName" = "Doe"; "Height" = "5' 11''"; "Weight" = "180 Lbs"}
      $CommandResult = Show-GetMultiValueDialog -DialogTitle "Multi Value Dialog 01" -MessageText "Show this Message Prompt" -OrderedItems $OrderedItems
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Multi Value Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.OrderedItems
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Multi Value Dialog 01"
      }
      #endregion Show Multi Value Dialog 01
      Break
    }
    "RadioChoice01"
    {
      #region Show Radio Choice Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Radio Choice Dialog 01"
      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4"}
      $CommandResult = Show-GetRadioChoiceDialog -DialogTitle "Radio Choice Dialog 01" -MessageText "Show this Message Prompt" -OrderedItems $OrderedItems -Selected $OrderedItems["Never Pick this Option."]
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Radio Choice Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Item
        # $CommandResult.Object
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Radio Choice Dialog 01"
      }
      #endregion Show Radio Choice Dialog 01
      Break
    }
    "ListViewChoice01"
    {
      #region Show ListView Choice Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show ListView Choice Dialog 01"
      $Functions = @(Get-ChildItem -Path "Function:\")
      $CommandResult = Show-GetListViewChoiceDialog -DialogTitle "ListView Choice Dialog 01" -MessageText "Show this Message Prompt" -List $Functions -Property "Name", "Version", "Source" -Selected ($Functions[2]) -Tooltip "Name"
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success ListView Choice Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed ListView Choice Dialog 01"
      }
      #endregion Show ListView Choice Dialog 01
      Break
    }
    "ListViewChoice02"
    {
      #region Show ListView Choice Dialog 02
      $FCGBtmStatusStrip.Items["Status"].Text = "Show ListView Choice Dialog 02"
      $Functions = @(Get-ChildItem -Path "Function:\")
      $CommandResult = Show-GetListViewChoiceDialog -DialogTitle "ListView Choice Dialog 01" -MessageText "Show this Message Prompt" -List $Functions -Property "Name", "Version", "Source" -Multi -Selected ($Functions[3..5])
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success ListView Choice Dialog 02"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed ListView Choice Dialog 02"
      }
      #endregion Show ListView Choice Dialog 02
      Break
    }
    "ComboChoice01"
    {
      #region Show Combo Choice Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Combo Choice Dialog 01"
      $Variables = @(Get-ChildItem -Path "Variable:\")
      $CommandResult = Show-GetComboChoiceDialog -DialogTitle "Combo Choice Dialog 01" -MessageText "Show this Message Prompt" -Items $Variables -DisplayMember "Name" -ValueMember "Value" -Selected ($Variables[4])
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Combo Choice Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Combo Choice Dialog 01"
      }
      #endregion Show Combo Choice Dialog 01
      Break
    }
    "ComboFilter01"
    {
      #region Show Combo Filter Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Combo Filter Dialog 01"
      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)
      $CommandResult = Show-GetComboFilterDialog -DialogTitle "Combo Filter Dialog 01" -MessageText "Show this Message Prompt" -Items $ServiceList -Properties Status, Name, StartType
      If ($CommandResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Combo Filter Dialog 01"
        Write-Host -Object ($CommandResult | Format-List -Property * | Out-String)
        # $CommandResult.Success
        # $CommandResult.DialogResult
        # $CommandResult.Values
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Combo Filter Dialog 01"
      }
      #endregion Show Combo Filter Dialog 01
      Break
    }
  }

  Write-Verbose -Message "Exit Click Event for `$FCGMySampleDialogsMenuStripItem"
}
#endregion ******** Function Start-FCGMySampleDialogsMenuStripItemClick ********

$FCGTopMenuStripItem = New-MenuItem -Menu $FCGTopMenuStrip -Text "FCG" -Name "FCG" -Tag "FCG" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Status Dialog - 01" -Name "Status01" -Tag "Status01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Status Dialog - 02" -Name "Status02" -Tag "Status02" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "User Alert Dialog - 01" -Name "UserAlert01" -Tag "UserAlert01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "User Response Dialog - 01" -Name "UserResponse01" -Tag "UserResponse01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "User Text Dialog - 01" -Name "UserText01" -Tag "UserText01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "User Text Dialog - 02" -Name "UserText02" -Tag "UserText01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Multi Value Dialog - 01" -Name "MultiValue01" -Tag "MultiValue01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Radio Choice Dialog - 01" -Name "RadioChoice01" -Tag "RadioChoice01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "ListView Choice Dialog - 01" -Name "ListViewChoice01" -Tag "ListViewChoice01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "ListView Choice Dialog - 02" -Name "ListViewChoice02" -Tag "ListViewChoice02" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Combo Choice Dialog - 01" -Name "ComboChoice01" -Tag "ComboChoice01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Combo Filter Dialog - 01" -Name "ComboFilter01" -Tag "ComboFilter01" -DisplayStyle "ImageAndText" -ImageKey "FCGFormIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })

# ************************************************
# FCGBtm StatusStrip
# ************************************************
#region $FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$FCGForm.Controls.Add($FCGBtmStatusStrip)
#$FCGForm.StatusStrip = $FCGBtmStatusStrip
#$FCGBtmStatusStrip.AllowDrop = $False
#$FCGBtmStatusStrip.AllowItemReorder = $False
#$FCGBtmStatusStrip.AllowMerge = $True
#$FCGBtmStatusStrip.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
#$FCGBtmStatusStrip.AutoScroll = $False
#$FCGBtmStatusStrip.AutoScrollMargin = [System.Drawing.Size]::New(0, 0)
#$FCGBtmStatusStrip.AutoScrollMinSize = [System.Drawing.Size]::New(0, 0)
#$FCGBtmStatusStrip.AutoScrollOffset = [System.Drawing.Point]::New(0, 0)
#$FCGBtmStatusStrip.AutoScrollPosition = [System.Drawing.Point]::New(0, 0)
#$FCGBtmStatusStrip.AutoSize = $True
$FCGBtmStatusStrip.BackColor = [MyConfig]::Colors.Back
#$FCGBtmStatusStrip.BackgroundImage = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageString)))
#$FCGBtmStatusStrip.BackgroundImageLayout = [System.Windows.Forms.ImageLayout]::Tile
#$FCGBtmStatusStrip.BindingContext = [System.Windows.Forms.BindingContext]::New()
#$FCGBtmStatusStrip.Bounds = [System.Drawing.Rectangle]::New(0, 0, 200, 22)
#$FCGBtmStatusStrip.CanOverflow = $False
#$FCGBtmStatusStrip.Capture = $False
#$FCGBtmStatusStrip.CausesValidation = $False
#$FCGBtmStatusStrip.ClientSize = [System.Drawing.Size]::New(200, 22)
#$FCGBtmStatusStrip.ContextMenu = [System.Windows.Forms.ContextMenu]::New()
#$FCGBtmStatusStrip.ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$FCGBtmStatusStrip.Cursor = [System.Windows.Forms.Cursors]::Default
#$FCGBtmStatusStrip.DefaultDropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::AboveRight
#$FCGBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom
#$FCGBtmStatusStrip.Enabled = $True
$FCGBtmStatusStrip.Font = [MyConfig]::Font.Regular
$FCGBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore
#$FCGBtmStatusStrip.GripMargin = [System.Windows.Forms.Padding]::New(2, 2, 2, 2)
#$FCGBtmStatusStrip.GripStyle = [System.Windows.Forms.ToolStripGripStyle]::Hidden
#$FCGBtmStatusStrip.Height = 22
$FCGBtmStatusStrip.ImageList = $FCGImageList
#$FCGBtmStatusStrip.ImageScalingSize = [System.Drawing.Size]::New(16, 16)
#$FCGBtmStatusStrip.ImeMode = [System.Windows.Forms.ImeMode]::NoControl
#$FCGBtmStatusStrip.IsAccessible = $False
#$FCGBtmStatusStrip.LayoutSettings = [System.Windows.Forms.LayoutSettings]::New()
#$FCGBtmStatusStrip.LayoutStyle = [System.Windows.Forms.ToolStripLayoutStyle]::Table
#$FCGBtmStatusStrip.Left = 0
#$FCGBtmStatusStrip.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
#$FCGBtmStatusStrip.Margin = [System.Windows.Forms.Padding]::New(0, 0, 0, 0)
#$FCGBtmStatusStrip.MaximumSize = [System.Drawing.Size]::New(0, 0)
#$FCGBtmStatusStrip.MinimumSize = [System.Drawing.Size]::New(0, 0)
$FCGBtmStatusStrip.Name = "FCGBtmStatusStrip"
#$FCGBtmStatusStrip.Padding = [System.Windows.Forms.Padding]::New(1, 0, 14, 0)
#$FCGBtmStatusStrip.Parent = [System.Windows.Forms.Control]::New()
#$FCGBtmStatusStrip.Region = [System.Drawing.Region]::New()
#$FCGBtmStatusStrip.Renderer = [System.Windows.Forms.ToolStripRenderer]::New()
#$FCGBtmStatusStrip.RenderMode = [System.Windows.Forms.ToolStripRenderMode]::System
#$FCGBtmStatusStrip.RightToLeft = [System.Windows.Forms.RightToLeft]::No
#$FCGBtmStatusStrip.ShowItemToolTips = $False
#$FCGBtmStatusStrip.Size = [System.Drawing.Size]::New(200, 22)
#$FCGBtmStatusStrip.SizingGrip = $True
#$FCGBtmStatusStrip.Stretch = $True
#$FCGBtmStatusStrip.TabIndex = 0
#$FCGBtmStatusStrip.TabStop = $False
#$FCGBtmStatusStrip.Tag = [System.Object]::New()
$FCGBtmStatusStrip.Text = "FCGBtmStatusStrip"
#$FCGBtmStatusStrip.TextDirection = [System.Windows.Forms.ToolStripTextDirection]::Horizontal
#$FCGBtmStatusStrip.Top = 0
#$FCGBtmStatusStrip.UseWaitCursor = $False
#$FCGBtmStatusStrip.Visible = $True
#$FCGBtmStatusStrip.Width = 200
#endregion $FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()

#$FCGBtmStatusStrip.Items.Add([System.String]$Text)
#$FCGBtmStatusStrip.Items.Add([System.Drawing.Image]$Image)
#$FCGBtmStatusStrip.Items.Add([System.String]$Text, [System.Drawing.Image]$Image)
#$FCGBtmStatusStrip.Items.Add([System.String]$Text, [System.Drawing.Image]$Image, [System.EventHandler]$OnClick)
#$FCGBtmStatusStrip.Items.Add([System.Windows.Forms.ToolStripItem]$Value)
#$FCGBtmStatusStrip.Items.AddRange([System.Windows.Forms.ToolStripItem[]]$ToolStripItems)
#$FCGBtmStatusStrip.Items.AddRange([System.Windows.Forms.ToolStripItemCollection]$ToolStripItems)
#$FCGBtmStatusStrip.BeginUpdate()
#$FCGBtmStatusStrip.EndUpdate()

New-MenuLabel -Menu $FCGBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"

#$FCGForm.ClientSize = [System.Drawing.Size]::New(($FCGForm.Controls[$FCGForm.Controls.Count - 1]).Right + [MyConfig]::FormSpacer, ($FCGForm.Controls[$FCGForm.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

#endregion ******** Controls for FCG Form ********

#endregion ================ End **** FCG **** End ================

#region ******** Start Form  ********
# *********************
# Add Form Code here...
# *********************
[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
if ([MyConfig]::Production)
{
  [Void][Console.Window]::Hide()
}

Try
{
  [System.Windows.Forms.Application]::Run($FCGForm)
}
Catch
{
  if (-not [MyConfig]::Production)
  {
    # **** Testing - Exit to Nested Prompt ****
    Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"
    #$Host.EnterNestedPrompt()
    # **** Testing - Exit to Nested Prompt ****
  }
}

$FCGOpenFileDialog.Dispose()
$FCGSaveFileDialog.Dispose()
$FCGFolderBrowserDialog.Dispose()
$FCGFormComponents.Dispose()
$FCGForm.Dispose()
# *********************
# Add Form Code here...
# *********************

#endregion ******** Start Form  ********


if ([MyConfig]::Production)
{
  [System.Environment]::Exit(0)
}
