# ----------------------------------------------------------------------------------------------------------------------
#  Script: My Form Code Generator
# ----------------------------------------------------------------------------------------------------------------------
<#
Change Log for FCG
------------------------------------------------------------------------------------------------
7.0.0.4 - Add Nomport Switch to Install-MyModule Function
          Add Send-HTMLList Function
          Update Start-MyRSJob Function
          Add Set Execution Policy in Start-MyRSPol
------------------------------------------------------------------------------------------------
7.0.0.3 - Update New-HTMLDateTime, New-HTMLDate, New-HTMLTime Functions to use DateTime
          Update Get-SNAsset Function - Add OS and OSVersion
          Update New-HTMLSelect Add Style Parameter
          Fix Typo in Build Basic & Advanced Dualogs
------------------------------------------------------------------------------------------------
7.0.0.2 - Add Help
          General Code Cleanup
          Remove Unused Functions
          Update Main Form Icon
          Fix Get Control Add Items Missing Property
          Add Large ImageList
          Change ImageList Name to Small Image List
          Update Show-ScriptInfo Function
          Add Copy / Clear Code Context Menu
------------------------------------------------------------------------------------------------
7.0.0.1 - Code Formating Bug Fixes
------------------------------------------------------------------------------------------------
7.0.0.0 - Initial Version
------------------------------------------------------------------------------------------------
#>

#requires -version 5.0

using namespace System.Windows.Forms
using namespace System.Drawing
using namespace System.Collections
using namespace System.Collections.Generic
using namespace System.Collections.Specialized

<#
  .SYNOPSIS
  .DESCRIPTION
  .PARAMETER <Parameter-Name>
  .EXAMPLE
  .NOTES
    My Script FCG Version 1.0 by kensw on 07/04/2025
    Created with "My PS5 Form Code Generator" Version 6.4.0.0
#>
#[CmdletBinding()]
#param (
#)

$ErrorActionPreference = "Stop"

# Set $VerbosePreference to 'SilentlyContinue' for Production Deployment
$VerbosePreference = "Continue"
$VerbosePreference = "SilentlyContinue"

# Set $DebugPreference for Production Deployment
$DebugPreference = "SilentlyContinue"

# Hide Console Window Progress Bar
$ProgressPreference = "SilentlyContinue"

# Clear Previous Error Messages
$Error.Clear()

# Pre-Load Required Modules
[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")

# Enable Visual Styles
[System.Windows.Forms.Application]::EnableVisualStyles()

#region ******** FCG Configuration ********

#region ******** FCG Default Colors ********"

Class Colors
{
  [Object]$Back
  [Object]$Fore
  [Object]$LabelFore
  [Object]$ErrorFore
  [Object]$TitleBack
  [Object]$TitleFore
  [Object]$GroupFore
  [Object]$TextBack
  [Object]$TextROBack
  [Object]$TextFore
  [Object]$TextTitle
  [Object]$TextHint
  [Object]$TextBad
  [Object]$TextWarn
  [Object]$TextGood
  [Object]$TextInfo
  [Object]$ButtonBack
  [Object]$ButtonFore

  Colors ([Object]$Back, [Object]$Fore, [Object]$LabelFore, [Object]$ErrorFore, [Object]$TitleBack, [Object]$TitleFore, [Object]$GroupFore, [Object]$TextBack, [Object]$TextROBack, [Object]$TextFore, [Object]$TextTitle, [Object]$TextHint, [Object]$TextBad, [Object]$TextWarn, [Object]$TextGood, [Object]$TextInfo, [Object]$ButtonBack, [Object]$ButtonFore)
  {
    $This.Back = $Back
    $This.Fore = $Fore
    $This.LabelFore = $LabelFore
    $This.ErrorFore = $ErrorFore
    $This.TitleBack = $TitleBack
    $This.TitleFore = $TitleFore
    $This.GroupFore = $GroupFore
    $This.TextBack = $TextBack
    $This.TextROBack = $TextROBack
    $This.TextFore = $TextFore
    $This.TextTitle = $TextTitle
    $This.TextHint = $TextHint
    $This.TextBad = $TextBad
    $This.TextWarn = $TextWarn
    $This.TextGood = $TextGood
    $This.TextInfo = $TextInfo
    $This.ButtonBack = $ButtonBack
    $This.ButtonFore = $ButtonFore
  }
}

#endregion ******** FCG Default Colors ********

#region ******** FCG Default Font ********"

Class Font
{
  [Object]$Regular
  [Object]$Hint
  [Object]$Bold
  [Object]$Title
  [Single]$Ratio
  [Single]$Width
  [Single]$Height

  Font ([Object]$Regular, [Object]$Hint, [Object]$Bold, [Object]$Title, [Single]$Ratio, [Single]$Width, [Single]$Height)
  {
    $This.Regular = $Regular
    $This.Hint = $Hint
    $This.Bold = $Bold
    $This.Title = $Title
    $This.Ratio = $Ratio
    $This.Width = $Width
    $This.Height = $Height
  }
}

#endregion ******** FCG Default Font ********

#region ******** FCG MyConfig ********"

Class MyConfig
{
  # Default Form Run Mode
  static [bool]$Production = $True

  static [String]$ScriptName = "Form Code Generator"
  static [Version]$ScriptVersion = [Version]::New("7.0.0.4")
  static [String]$ScriptAuthor = "Ken Sweet"

  # Script Configuration
  static [String]$ScriptRoot = ""
  static [String]$ConfigFile = ""
  static [PSCustomObject]$ConfigData = [PSCustomObject]@{ }

  # Script Runtime Values
  static [Bool]$Is64Bit = ([IntPtr]::Size -eq 8)

  # Default Form Settings
  static [Int]$FormSpacer = 4
  static [int]$FormMinWidth = 60
  static [int]$FormMinHeight = 35

  # Default Font
  static [String]$FontFamily = "Verdana"
  static [Single]$FontSize = 10
  static [Single]$FontTitle = 1.5

  # Default Form Color Mode
  static [Bool]$DarkMode = ((Get-ItemProperty -Path "Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -ErrorAction "SilentlyContinue").AppsUseLightTheme -eq "0")

  # Form Auto Exit
  static [Int]$AutoExit = 0
  static [Int]$AutoExitMax = 60
  static [Int]$AutoExitTic = 60000

  # Administrative Rights
  static [Bool]$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
  static [Bool]$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)

  # Network / Internet
  static [__ComObject]$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}"))

  # Web Browser File Path's
  static [String]$EdgePath = (Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe" -ErrorAction "SilentlyContinue")."(default)"
  static [String]$ChromePath = (Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe" -ErrorAction "SilentlyContinue")."(default)"

  # Current DateTime Offset
  static [DateTimeOffset]$DateTimeOffset = [System.DateTimeOffset]::Now

  static [Colors]$Colors

  static [Font]$Font
}

#endregion ******** FCG MyConfig ********"

# Get Script Path
if ([String]::IsNullOrEmpty($HostInvocation))
{
  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($Script:MyInvocation.MyCommand.Path)
}
else
{
  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName($HostInvocation.MyCommand.Path)
}

#region ******** FCG Default Colors ********


If ([MyConfig]::DarkMode)
{
  [MyConfig]::Colors = [Colors]::New(
    [System.Drawing.Color]::FromArgb(48, 48, 48), # Back
    [System.Drawing.Color]::DodgerBlue, # Fore [System.Drawing.Color]::LightCoral
    [System.Drawing.Color]::WhiteSmoke, # LabelForr
    [System.Drawing.Color]::Red, # ErrorFoer
    [System.Drawing.Color]::DarkGray, # TitleFore
    [System.Drawing.Color]::Black, # TitleBack
    [System.Drawing.Color]::WhiteSmoke, # GroupFore
    [System.Drawing.Color]::Gainsboro, # TextBack
    [System.Drawing.Color]::DarkGray, # TextROBack
    [System.Drawing.Color]::Black, #TextFore
    [System.Drawing.Color]::Navy, # TextTitle
    [System.Drawing.Color]::Gray, # TextHint
    [System.Drawing.Color]::FireBrick, # TextBad
    [System.Drawing.Color]::Sienna, # TextWarn
    [System.Drawing.Color]::ForestGreen, # TextGood
    [System.Drawing.Color]::CornflowerBlue, # TextInfo
    [System.Drawing.Color]::DarkGray, # ButtonBack
    [System.Drawing.Color]::Black # ButtonFore
  )
}
Else
{
  [MyConfig]::Colors = [Colors]::New(
    [System.Drawing.Color]::WhiteSmoke, # Back
    [System.Drawing.Color]::Navy, # Fore
    [System.Drawing.Color]::Black, # LabelFor
    [System.Drawing.Color]::Red, # ErrorFoer
    [System.Drawing.Color]::LightBlue, # TitleFore
    [System.Drawing.Color]::Navy, # TitleBack
    [System.Drawing.Color]::Navy, # GroupFore
    [System.Drawing.Color]::White, # TextBack
    [System.Drawing.Color]::Gainsboro, # TextROBack
    [System.Drawing.Color]::Black, # TextFore
    [System.Drawing.Color]::Navy, # TextTitle
    [System.Drawing.Color]::Gray, # TextHint
    [System.Drawing.Color]::FireBrick, #TextBad
    [System.Drawing.Color]::Sienna, # TextWarn
    [System.Drawing.Color]::ForestGreen, # TextGood
    [System.Drawing.Color]::CornflowerBlue, # TextInfo
    [System.Drawing.Color]::Gainsboro, # ButtonBack
    [System.Drawing.Color]::Navy) # ButtonFore
}

#endregion ******** FCG Default Colors ********

#region ******** FCG Default Font ********

$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize
:FontCheck Do
{
  $Bold = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)
  $Graphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)
  $MeasureString = $Graphics.MeasureString("X", $Bold)
  If (($MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor($MeasureString.Width))) -or ($MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor($MeasureString.Height))))
  {
    [MyConfig]::FontSize = [MyConfig]::FontSize - .1
  }
  Else
  {
    break FontCheck
  }
}
While ($True)
$Regular = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)
$Hint = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)
$Title = [System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Bold)
[MyConfig]::Font = [Font]::New($Regular, $Hint, $Bold, $Title, ($Graphics.DpiX / 96), ([Math]::Floor($MeasureString.Width)), ([Math]::Ceiling($MeasureString.Height)))
$MonitorSize = $Null
$Regular = $Null
$Hint = $Null
$Bold = $Null
$Title = $Null
$MeasureString = $Null
$Graphics.Dispose()
$Graphics = $Null

#endregion ******** FCG Default Font ********

#endregion ******** FCG Configuration  ********

#region ******** FCG Runtime Values ********

Class MyRuntime
{
  # Control Lookup Table
  Static [HashTable]$ControlLookup = @{}
  
  # Event Favorites
  static [HashTable]$FavEvents = @{
    "Button"           = @("Click")
    "CheckBox"         = @("CheckedChanged")
    "CheckedListBox"   = @("ItemCheck", "MouseDown", "SelectedIndexChanged")
    "ComboBox"         = @("SelectedIndexChanged")
    "ContextMenuStrip" = @("Opening")
    "Form"             = @("Closing", "KeyDown", "Load", "Move", "Resize", "Shown")
    "ListBox"          = @("MouseDown", "MouseDown", "SelectedIndexChanged")
    "ListView"         = @("ColumnClick", "DrawColumnHeader", "DrawItem", "DrawSubItem", "MouseDown")
    "MenuStrip"        = @("Opening")
    "NotifyIcon"       = @("MouseClick")
    "RadioButton"      = @("CheckedChanged")
    "TabControl"       = @("DrawItem")
    "TextBox"          = @("GotFocus", "KeyDown", "KeyPress", "KeyUp", "LostFocus", "MouseDown")
    "Timer"            = @("Tick")
    "TreeView"         = @("AfterSelect", "BeforeExpand", "MouseDown")
    "WebBrowser"       = @("NewWindow", "StatusTextChanged")
  }
}

#endregion ******** FCG Runtime  Values ********

#region ******** Windows APIs ********

#region ******** [Console.Window] ********

#[Void][Console.Window]::Hide()
#[Void][Console.Window]::Show()

$MyCode = @"
using System;
using System.Runtime.InteropServices;

namespace Console
{
  public class Window
  {
    [DllImport("Kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

    public static bool Hide()
    {
      return ShowWindowAsync(GetConsoleWindow(), 0);
    }

    public static bool Show()
    {
      return ShowWindowAsync(GetConsoleWindow(), 5);
    }
  }
}
"@
Add-Type -TypeDefinition $MyCode -Debug:$False
#endregion ******** [Console.Window] ********

[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
if ([MyConfig]::Production)
{
  [Void][Console.Window]::Hide()
}

#region ******** [Extract.MyIcon] ********

#$TempCount = [Extract.MyIcon]::IconCount("C:\Windows\System32\shell32.dll")
#$TempIcon = [Extract.MyIcon]::IconReturn("C:\Windows\System32\shell32.dll", 1, $False)

$MyCode = @"
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace Extract
{
  public class MyIcon
  {
    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DestroyIcon(IntPtr hIcon);

    [DllImport("shell32.dll", CharSet = CharSet.Auto)]
    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);

    public static int IconCount(string FileName)
    {
      try
      {
        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);
      }
      catch
      {
      }
      return 0;
    }

    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)
    {
      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
      Icon RetData = null;
      try
      {
        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);
        if (GetLarge)
        {
          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();
          }
        }
        else
        {
          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();
          }
        }
      }
      catch
      {
      }
      finally
      {
        foreach (IntPtr ptr in LIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
        foreach (IntPtr ptr in SIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
      }
      return RetData;
    }

    public static Icon IconReturn(string FileName, int IconNum)
    {
      return IconReturn(FileName, IconNum, false);
    }
  }
}
"@
Add-Type -TypeDefinition $MyCode -ReferencedAssemblies System.Drawing -Debug:$False
#endregion ******** [Extract.MyIcon] ********

#endregion ******** Windows APIs ********

#region ******** Functions Library ********

#region Function Prompt
Function Prompt
{
  [Console]::Title = $PWD
  "PS$($PSVersionTable.PSVersion.Major)$(">" * ($NestedPromptLevel + 1)) "
}
#endregion Function Prompt

#region function New-MyListItem
function New-MyListItem
{
  <#
    .SYNOPSIS
      Creates and adds a new list item to a ComboBox or ListBox control.
    .DESCRIPTION
      This function creates a new list item as a PSCustomObject with Text, Value, and Tag properties,
      and adds it to the Items collection of the specified ComboBox or ListBox control.
      Optionally, the new item can be returned via the PassThru switch.
    .PARAMETER Control
      The ComboBox or ListBox control to which the new item will be added. This parameter is mandatory.
    .PARAMETER Text
      The display text for the new list item. This parameter is mandatory.
    .PARAMETER Value
      The value associated with the new list item. This parameter is mandatory.
    .PARAMETER Tag
      An optional object to associate additional data with the new list item.
    .PARAMETER PassThru
      If specified, the function returns the newly created list item object instead of $null.
    .EXAMPLE
      New-MyListItem -Control $comboBox -Text "Option 1" -Value "1" -Tag "First Option"
      Adds a new item with text "Option 1", value "1", and tag "First Option" to the $comboBox control.
    .EXAMPLE
      $item = New-MyListItem -Control $listBox -Text "Item A" -Value "A" -PassThru
      Adds a new item to $listBox and returns the created item object.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param(
    [Parameter(Mandatory = $true)]
    [Object]$Control,
    [Parameter(Mandatory = $true)]
    [String]$Text,
    [Parameter(Mandatory = $true)]
    [String]$Value,
    [Object]$Tag,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $item = [PSCustomObject]@{
    Text  = $Text
    Value = $Value
    Tag   = $Tag
  }

  if ($PassThru)
  {
    $Control.Items.Add($item)
    $item
  }
  else
  {
    [Void]$Control.Items.Add($item)
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function New-MyListItem

#region function New-MenuItem
function New-MenuItem()
{
  <#
    .SYNOPSIS
      Creates and adds a new MenuItem to a Menu or ToolStrip control.
    .DESCRIPTION
      This function creates a new System.Windows.Forms.ToolStripMenuItem with the specified properties and adds it to the provided Menu or ToolStrip control.
      It supports customization of text, name, tooltip, icon, image index/key, text-image relation, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors.
      The new MenuItem can optionally be returned via the PassThru switch.
    .PARAMETER Menu
      The Menu or ToolStrip control to which the new MenuItem will be added. This parameter is mandatory.
    .PARAMETER Text
      The display text for the new MenuItem. This parameter is mandatory.
    .PARAMETER Name
      The name of the new MenuItem. If not specified, the Text value is used.
    .PARAMETER ToolTip
      The tooltip text to display when the mouse hovers over the MenuItem.
    .PARAMETER Icon
      The icon to display for the MenuItem. Used when specifying images by icon. Mandatory for the 'Icon' parameter set.
    .PARAMETER ImageIndex
      The index of the image to display for the MenuItem. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set.
    .PARAMETER ImageKey
      The key of the image to display for the MenuItem. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set.
    .PARAMETER TextImageRelation
      Specifies the position of the text and image relative to each other. Defaults to 'ImageBeforeText'.
    .PARAMETER DisplayStyle
      Specifies how the MenuItem displays its image and text. Defaults to 'Text'.
    .PARAMETER Alignment
      Specifies the alignment of the MenuItem's text and image. Defaults to 'MiddleCenter'.
    .PARAMETER Tag
      An object to associate additional data with the new MenuItem.
    .PARAMETER Disable
      If specified, disables the MenuItem (sets Enabled to $false).
    .PARAMETER Check
      If specified, sets the MenuItem's Checked property to $true.
    .PARAMETER ClickOnCheck
      If specified, enables the CheckOnClick property for the MenuItem.
    .PARAMETER ShortcutKeys
      Specifies the shortcut keys for the MenuItem. Defaults to 'None'.
    .PARAMETER Font
      The font to use for the MenuItem text. Defaults to [MyConfig]::Font.Regular.
    .PARAMETER BackColor
      The background color of the MenuItem. Defaults to [MyConfig]::Colors.Back.
    .PARAMETER ForeColor
      The foreground (text) color of the MenuItem. Defaults to [MyConfig]::Colors.Fore.
    .PARAMETER PassThru
      If specified, returns the newly created MenuItem object.
    .EXAMPLE
      $NewItem = New-MenuItem -Menu $menuStrip -Text "Open" -Tag "OpenFile"
      Adds a new MenuItem with text "Open" and tag "OpenFile" to $menuStrip.
    .EXAMPLE
      $item = New-MenuItem -Menu $contextMenu -Text "Save" -ImageIndex 2 -PassThru
      Adds a new MenuItem with an image at index 2 and returns the created MenuItem object.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]
    [Int]$ImageIndex,
    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]
    [String]$ImageKey,
    [parameter(Mandatory = $False, ParameterSetName = "Icon")]
    [parameter(Mandatory = $False, ParameterSetName = "ImageIndex")]
    [parameter(Mandatory = $False, ParameterSetName = "ImageKey")]
    [System.Windows.Forms.TextImageRelation]$TextImageRelation = "ImageBeforeText",
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",
    [Object]$Tag,
    [Switch]$Disable,
    [Switch]$Check,
    [Switch]$ClickOnCheck,
    [System.Windows.Forms.Keys]$ShortcutKeys = "None",
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  #region $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]
  $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New($Text)

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuItem)
    if ($Menu.DropDown.Items.Count -eq 1)
    {
      $Menu.DropDown.BackColor = $Menu.BackColor
      $Menu.DropDown.ForeColor = $Menu.ForeColor
      $Menu.DropDown.ImageList = $Menu.Owner.ImageList
    }
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuItem)
  }

  if ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuItem.Name = $Name
  }
  else
  {
    $TempMenuItem.Name = $Text
  }

  $TempMenuItem.ShortcutKeys = $ShortcutKeys
  $TempMenuItem.Tag = $Tag
  $TempMenuItem.ToolTipText = $ToolTip
  $TempMenuItem.TextAlign = $Alignment
  $TempMenuItem.Checked = $Check.IsPresent
  $TempMenuItem.CheckOnClick = $ClickOnCheck.IsPresent
  $TempMenuItem.DisplayStyle = $DisplayStyle
  $TempMenuItem.Enabled = (-not $Disable.IsPresent)

  $TempMenuItem.BackColor = $BackColor
  $TempMenuItem.ForeColor = $ForeColor
  $TempMenuItem.Font = $Font

  if ($PSCmdlet.ParameterSetName -eq "Default")
  {
    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  else
  {
    switch ($PSCmdlet.ParameterSetName)
    {
      "Icon"
      {
        $TempMenuItem.Image = $Icon
        break
      }
      "ImageIndex"
      {
        $TempMenuItem.ImageIndex = $ImageIndex
        break
      }
      "ImageKey"
      {
        $TempMenuItem.ImageKey = $ImageKey
        break
      }
    }
    $TempMenuItem.ImageAlign = $Alignment
    $TempMenuItem.TextImageRelation = $TextImageRelation
  }
  #endregion $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]

  if ($PassThru.IsPresent)
  {
    $TempMenuItem
  }

  $TempMenuItem = $Null

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function New-MenuItem

#region function New-MenuLabel
function New-MenuLabel()
{
  <#
    .SYNOPSIS
      Creates and adds a new MenuLabel (ToolStripLabel) to a Menu or ToolStrip control.
    .DESCRIPTION
      This function creates a new System.Windows.Forms.ToolStripLabel with the specified properties and adds it to the provided Menu or ToolStrip control.
      It supports customization of text, name, tooltip, icon, display style, alignment, tag, enabled/disabled state, font, and colors.
      The new MenuLabel can optionally be returned via the PassThru switch.
    .PARAMETER Menu
      The Menu or ToolStrip control to which the new MenuLabel will be added. This parameter is mandatory.
    .PARAMETER Text
      The display text for the new MenuLabel. This parameter is mandatory.
    .PARAMETER Name
      The name of the new MenuLabel. If not specified, the Text value is used.
    .PARAMETER ToolTip
      The tooltip text to display when the mouse hovers over the MenuLabel.
    .PARAMETER Icon
      The icon to display for the MenuLabel. If specified, the label will show the icon.
    .PARAMETER DisplayStyle
      Specifies how the MenuLabel displays its image and text. Defaults to 'Text'.
    .PARAMETER Alignment
      Specifies the alignment of the MenuLabel's text and image. Defaults to 'MiddleLeft'.
    .PARAMETER Tag
      An object to associate additional data with the new MenuLabel.
    .PARAMETER Disable
      If specified, disables the MenuLabel (sets Enabled to $false).
    .PARAMETER Font
      The font to use for the MenuLabel text. Defaults to [MyConfig]::Font.Regular.
    .PARAMETER BackColor
      The background color of the MenuLabel. Defaults to [MyConfig]::Colors.Back.
    .PARAMETER ForeColor
      The foreground (text) color of the MenuLabel. Defaults to [MyConfig]::Colors.Fore.
    .PARAMETER PassThru
      If specified, returns the newly created MenuLabel object.
    .EXAMPLE
      $NewItem = New-MenuLabel -Menu $menuStrip -Text "Info" -Tag "Information"
      Adds a new MenuLabel with text "Info" and tag "Information" to $menuStrip.
    .EXAMPLE
      $label = New-MenuLabel -Menu $contextMenu -Text "Help" -Icon $icon -PassThru
      Adds a new MenuLabel with an icon and returns the created MenuLabel object.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [System.Drawing.Icon]$Icon,
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleLeft",
    [Object]$Tag,
    [Switch]$Disable,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  #region $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]
  $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New($Text)

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuLabel)
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuLabel)
  }

  if ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuLabel.Name = $Name
  }
  else
  {
    $TempMenuLabel.Name = $Text
  }

  $TempMenuLabel.TextAlign = $Alignment
  $TempMenuLabel.Tag = $Tag
  $TempMenuLabel.ToolTipText = $ToolTip
  $TempMenuLabel.DisplayStyle = $DisplayStyle
  $TempMenuLabel.Enabled = (-not $Disable.IsPresent)

  $TempMenuLabel.BackColor = $BackColor
  $TempMenuLabel.ForeColor = $ForeColor
  $TempMenuLabel.Font = $Font

  if ($PSBoundParameters.ContainsKey("Icon"))
  {
    $TempMenuLabel.Image = $Icon
    $TempMenuLabel.ImageAlign = $Alignment
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText
  }
  else
  {
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  #endregion $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]

  if ($PassThru)
  {
    $TempMenuLabel
  }

  $TempMenuLabel = $Null

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function New-MenuLabel

#region function New-MenuSeparator
function New-MenuSeparator()
{
  <#
    .SYNOPSIS
      Creates and adds a new MenuSeparator (ToolStripSeparator) to a Menu or ToolStrip control.
    .DESCRIPTION
      This function creates a new System.Windows.Forms.ToolStripSeparator and adds it to the provided Menu or ToolStrip control.
      It supports customization of background and foreground colors.
      The separator is useful for visually grouping related menu items.
    .PARAMETER Menu
      The Menu or ToolStrip control to which the new MenuSeparator will be added. This parameter is mandatory.
    .PARAMETER BackColor
      The background color of the MenuSeparator. Defaults to [MyConfig]::Colors.Back.
    .PARAMETER ForeColor
      The foreground (line) color of the MenuSeparator. Defaults to [MyConfig]::Colors.Fore.
    .EXAMPLE
      New-MenuSeparator -Menu $Menu
      Adds a new separator to the specified $Menu control.
    .EXAMPLE
      New-MenuSeparator -Menu $contextMenu -BackColor ([System.Drawing.Color]::LightGray) -ForeColor ([System.Drawing.Color]::DarkGray)
      Adds a new separator to $contextMenu with custom colors.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  #region $TempSeparator = [System.Windows.Forms.ToolStripSeparator]
  $TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()

  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempSeparator)
  }
  else
  {
    [Void]$Menu.Items.Add($TempSeparator)
  }

  $TempSeparator.Name = "TempSeparator"

  $TempSeparator.BackColor = $BackColor
  $TempSeparator.ForeColor = $ForeColor
  #endregion $TempSeparator = [System.Windows.Forms.ToolStripSeparator]

  $TempSeparator = $Null

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function New-MenuSeparator

#region function Encode-MyData
function Encode-MyData()
{
  <#
    .SYNOPSIS
      Encodes or decodes data to and from Base64 format.
    .DESCRIPTION
      This function encodes a string to Base64 with optional line length, or decodes a Base64 string back to its original form.
      It supports output as a string or as an array of characters.
    .PARAMETER Data
      The string data to encode or decode. When encoding, this is the plain text to convert to Base64. When decoding, this is the Base64 string to convert back.
    .PARAMETER LineLength
      The maximum length of each line in the encoded Base64 output. Only used when encoding. Default is 160.
    .PARAMETER Decode
      Switch to indicate that the operation should decode the input Base64 string instead of encoding.
    .PARAMETER AsString
      When decoding, outputs the result as a string instead of an array of characters.
    .EXAMPLE
      Encode-MyData -Data "MySecret"
      Encodes the string "MySecret" to Base64.
    .EXAMPLE
      Encode-MyData -Data $Base64String -Decode
      Decodes the Base64 string back to its original value.
    .EXAMPLE
      Encode-MyData -Data $Base64String -Decode -AsString
      Decodes the Base64 string and returns the result as a string.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Encode")]
  param (
    [parameter(Mandatory = $True)]
    [String]$Data,
    [parameter(Mandatory = $False, ParameterSetName = "Encode")]
    [Int]$LineLength = 160,
    [parameter(Mandatory = $True, ParameterSetName = "Decode")]
    [Switch]$Decode,
    [parameter(Mandatory = $False, ParameterSetName = "Decode")]
    [Switch]$AsString
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $MemoryStream = [System.IO.MemoryStream]::New()

  if ($PSCmdlet.ParameterSetName -eq "Encode")
  {
    $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)
    $StreamWriter.Write($Data)
    $StreamWriter.Close()

    $Encoded = [System.Text.StringBuilder]::New()
    ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineLength})(?=.)"))
    {
      [Void]$Encoded.AppendLine($Line)
    }
    $Encoded.ToString()
    $MemoryStream.Close()
  }
  else
  {
    $CompressedData = [System.Convert]::FromBase64String($Data)
    $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)
    [Void]$MemoryStream.Seek(0, 0)
    $StreamReader = [System.IO.StreamReader]::New($MemoryStream, [System.Text.Encoding]::UTF8)

    if ($AsString.IsPresent)
    {
      $StreamReader.ReadToEnd()
    }
    else
    {
      $ArrayList = [System.Collections.ArrayList]::New()
      $Buffer = [System.Char[]]::New(4096)
      While ($StreamReader.EndOfStream -eq $False)
      {
        $Bytes = $StreamReader.Read($Buffer, 0, 4096)
        if ($Bytes)
        {
          $ArrayList.AddRange($Buffer[0 .. ($Bytes - 1)])
        }
      }
      $ArrayList
      $ArrayList.Clear()
    }
    $StreamReader.Close()
    $MemoryStream.Close()
  }

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Encode-MyData

#region function Convert-MyImageToBase64
function Convert-MyImageToBase64()
{
  <#
    .SYNOPSIS
      Converts an image or icon to a Base64-encoded text block for embedding in scripts.
    .DESCRIPTION
      This function converts an image file (such as .ico, .gif, .jpg, etc.) or a System.Drawing.Icon object into a Base64-encoded string, formatted for easy inclusion in PowerShell scripts.
      The output includes region markers and variable assignment for direct use. You can specify the output variable name and the maximum line length for the Base64 string.
    .PARAMETER ScriptName
      The name of the script or variable prefix to use in the generated code for referencing the image list. Optional.
    .PARAMETER Icon
      A System.Drawing.Icon object to convert to Base64. Use this parameter set to encode an icon object directly.
    .PARAMETER Path
      The file path to the image to convert. Supported formats include .ico, .gif, .jpg, and others supported by System.Drawing.Image.
    .PARAMETER Name
      The variable name to assign the Base64 string to in the generated code. This should be a valid PowerShell variable name.
    .PARAMETER LineSize
      The maximum number of characters per line in the Base64 output. Default is 160.
    .EXAMPLE
      Convert-MyImageToBase64 -Path "C:\Icons\myicon.ico" -Name "MyIcon"
      Converts the specified .ico file to a Base64 string and outputs PowerShell code assigning it to $MyIcon.
    .EXAMPLE
      $icon = [System.Drawing.Icon]::ExtractAssociatedIcon("C:\Windows\System32\notepad.exe")
      Convert-MyImageToBase64 -Icon $icon -Name "NotepadIcon"
      Converts the provided Icon object to Base64 and outputs PowerShell code assigning it to $NotepadIcon.
    .NOTES
      Original Function By Ken Sweet. Useful for embedding images or icons in PowerShell GUIs or scripts.
  #>
  [CmdletBinding(DefaultParameterSetName = "File")]
  Param (
    [String]$ScriptName,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "File")]
    [String]$Path,
    [parameter(Mandatory = $True)]
    [String]$Name,
    [int]$LineSize = 160
  )
  Write-Verbose -Message "Enter Function $($MyInvocation.MyCommand)"

  $Code = [System.Text.StringBuilder]::New()

  $ImageName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "").Replace("ico", "Icon")
  [Void]$Code.AppendLine("#region ******** `$$($ImageName) ********")
  [Void]$Code.AppendLine("`$$($ImageName) = @`"")
  $MemoryStream = [System.IO.MemoryStream]::New()
  if ($PSCmdlet.ParameterSetName -eq "File")
  {
    Switch ([System.IO.Path]::GetExtension($Path))
    {
      ".ico"
      {
        $Image = [System.Drawing.Icon]::New($Path)
        $Image.Save($MemoryStream)
        Break
      }
      ".gif"
      {
        $Image = [System.Drawing.Image]::FromFile($Path)
        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Gif)
        Break
      }
      Default
      {
        $Image = [System.Drawing.Image]::FromFile($Path)
        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Jpeg)
        Break
      }
    }
  }
  else
  {
    $Image = $Icon
    $Image.Save($MemoryStream)
  }
  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
  {
    [Void]$Code.AppendLine($Line)
  }
  $MemoryStream.Close()
  [Void]$Code.AppendLine("`"@")
  [Void]$Code.AppendLine("#endregion ******** `$$($ImageName) ********")
  if (([System.IO.Path]::GetExtension($path) -eq ".ico") -or ($PSCmdlet.ParameterSetName -eq "Icon"))
  {
    #[Void]$Code.AppendLine("#`$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")
    [Void]$Code.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"$($ImageName)`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName)))))")
  }
  else
  {
    [Void]$Code.AppendLine("#`$$($ScriptName)PictureBox.Image = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")
  }
  $Code.ToString()

  $Image = $Null
  $MemoryStream = $Null
  $Code = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function $($MyInvocation.MyCommand)"
}
#endregion function Convert-MyImageToBase64

#region function Encode-MyDataFile
function Encode-MyDataFile()
{
  <#
    .SYNOPSIS
      Compress String Data
    .DESCRIPTION
      Compress String Data
    .PARAMETER Text
      Text to Compress
    .EXAMPLE
      Encode-MyDataFile -Value "String"
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, HelpMessage = "Enter Path")]
    [String]$Path,
    [parameter(Mandatory = $True, HelpMessage = "Enter Name")]
    [String]$Name,
    [int]$LineSize = 160
  )
  Write-Verbose -Message "Enter Function Encode-MyDataFile"
  
  $EncodeName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "")
  $MemoryStream = [System.IO.MemoryStream]::New()
  $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)
  $StreamWriter.Write(([Char[]][System.IO.File]::ReadAllBytes($Path)))
  $StreamWriter.Close()
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  [Void]$StringBuilder.AppendLine("#region `$$EncodeName Encodeed Data")
  [Void]$StringBuilder.AppendLine("`$$EncodeName = @`"")
  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
  {
    [Void]$StringBuilder.AppendLine($Line)
  }
  $MemoryStream.Close()
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion `$$EncodeName Encodeed Data")
  [Void]$StringBuilder.AppendLine("#`$DecodedData = Decode-MyData -Data `$$EncodeName -AsString")
  [Void]$StringBuilder.AppendLine("#[System.IO.File]::WriteAllText(`$FilePath, `$DecodedData)")
  [Void]$StringBuilder.AppendLine("#`$DecodedData = Decode-MyData -Data `$$EncodeName")
  [Void]$StringBuilder.AppendLine("#[System.IO.File]::WriteAllBytes(`$FilePath, `$DecodedData)")
  [Void]$StringBuilder.AppendLine("")
  $StringBuilder.ToString()
  
  $EncodeName = $Null
  $MemoryStream = $Null
  $StreamWriter = $Null
  $StringBuilder = $Null
  $Line = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Encode-MyDataFile"
}
#endregion function Encode-MyDataFile

#endregion ******** Functions Library ********

#region ******** My Common Dialogs ********

# ---------------------------
# Show RichTextStatus Function
# ---------------------------
#region Function Write-RichTextBox
Function Write-RichTextBox
{
  <#
    .SYNOPSIS
      Write to RichTextBox
    .DESCRIPTION
      Write to RichTextBox
    .PARAMETER RichTextBox
    .PARAMETER TextFore
    .PARAMETER Font
    .PARAMETER Alignment
    .PARAMETER Text
    .PARAMETER BulletFore
    .PARAMETER NoNewLine
    .EXAMPLE
      Write-RichTextBox -RichTextBox $RichTextBox -Text $Text
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "NewLine")]
  param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,
    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Windows.Forms.HorizontalAlignment]$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,
    [String]$Text,
    [parameter(Mandatory = $False, ParameterSetName = "NewLine")]
    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,
    [parameter(Mandatory = $True, ParameterSetName = "NoNewLine")]
    [Switch]$NoNewLine
  )
  $RichTextBox.SelectionLength = 0
  $RichTextBox.SelectionStart = $RichTextBox.TextLength
  $RichTextBox.SelectionAlignment = $Alignment
  $RichTextBox.SelectionFont = $Font
  $RichTextBox.SelectionColor = $TextFore
  $RichTextBox.AppendText($Text)
  if (-not $NoNewLine.IsPresent)
  {
    $RichTextBox.SelectionColor = $BulletFore
    $RichTextBox.AppendText("`r`n")
  }
  $RichTextBox.ScrollToCaret()
  $RichTextBox.Refresh()
  $RichTextBox.Parent.Parent.Activate()
  [System.Windows.Forms.Application]::DoEvents()
}
#endregion Function Write-RichTextBox

#region Function Write-RichTextBoxValue
Function Write-RichTextBoxValue
{
  <#
    .SYNOPSIS
      Write Property Value to RichTextBox
    .DESCRIPTION
      Write Property Value to RichTextBox
    .PARAMETER RichTextBox
    .PARAMETER TextFore
    .PARAMETER ValueFore
    .PARAMETER BulletFore
    .PARAMETER Font
    .PARAMETER Text
    .PARAMETER Value
    .EXAMPLE
      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Text -Value $Value
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox,
    [System.Drawing.Color]$TextFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Color]$ValueFore = [MyConfig]::Colors.TextInfo,
    [System.Drawing.Color]$BulletFore = [MyConfig]::Colors.TextFore,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [Parameter(Mandatory = $True)]
    [String]$Text,
    [Parameter(Mandatory = $True)]
    [AllowEmptyString()]
    [AllowNull()]
    [String]$Value
  )
  $RichTextBox.SelectionLength = 0
  $RichTextBox.SelectionStart = $RichTextBox.TextLength
  $RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left
  $RichTextBox.SelectionFont = $Font
  $RichTextBox.SelectionColor = $TextFore
  $RichTextBox.AppendText("$($Text)")
  $RichTextBox.SelectionColor = $BulletFore
  $RichTextBox.AppendText(": ")
  $RichTextBox.SelectionColor = $ValueFore
  $RichTextBox.AppendText("$($Value)")
  $RichTextBox.SelectionColor = $BulletFore
  $RichTextBox.AppendText("`r`n")
  $RichTextBox.ScrollToCaret()
  $RichTextBox.Refresh()
  $RichTextBox.Parent.Parent.Activate()
  [System.Windows.Forms.Application]::DoEvents()
}
#endregion Function Write-RichTextBoxValue

#region Function Write-RichTextBoxError
Function Write-RichTextBoxError
{
  <#
    .SYNOPSIS
      Write Error Message to RichTextBox
    .DESCRIPTION
      Write Error Message to RichTextBox
    .PARAMETER RichTextBox
    .EXAMPLE
      Write-RichTextBoxError -RichTextBox $RichTextBox
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [System.Windows.Forms.RichTextBox]$RichTextBox = $RichTextStatusRichTextBox
  )
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "ERROR" -TextFore ([MyConfig]::Colors.TextBad) -Value ($($Error[0].Exception.Message)) -ValueFore ([MyConfig]::Colors.TextFore)
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "CODE" -TextFore ([MyConfig]::Colors.TextBad) -Value (($Error[0].InvocationInfo.Line).Trim()) -ValueFore ([MyConfig]::Colors.TextFore)
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "LINE" -TextFore ([MyConfig]::Colors.TextBad) -Value ($Error[0].InvocationInfo.ScriptLineNumber) -ValueFore ([MyConfig]::Colors.TextFore)
}
#endregion Function Write-RichTextBoxError

#region RichTextStatus Result Class
Class RichTextStatus
{
  [Bool]$Success
  [Object]$DialogResult

  RichTextStatus ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }
}
#endregion RichTextStatus Result Class

#region function Show-RichTextStatus
function Show-RichTextStatus ()
{
  <#
    .SYNOPSIS
      Shows Show-RichTextStatus
    .DESCRIPTION
      Shows Show-RichTextStatus
    .PARAMETER Title
      Title of the Status Mesage Dialog Window
    .PARAMETER ScriptBlock
      Script Block to Execure
    .PARAMETER HashTable
      HashTable of Paramerts to Pass to the ScriptBlock
    .PARAMETER Width
      Width of the Statts Message Dialog Window
    .PARAMETER Height
      Height of the Status Message Dialog Window
    .PARAMETER ButtonDefault
      The Default Selected Button
    .PARAMETER ButtonLeft
      The DialogResult of the Left Button
    .PARAMETER ButtonMid
      The DialogResult of the Middle Button
    .PARAMETER ButtonRight
      The DialogResult of the Right Button
    .PARAMETER AllowControl
      Enable Pause and Break out of Script Block
    .PARAMETER AutoClose
      Auto Close the Status Message Dialog Window
    .PARAMETER AutoCloseWait
      Number of MilliSeconds to wait Before Auto Closing the Dialog Window
    .EXAMPLE
      $HashTable = @{"ShowHeader" = $True}
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }
      $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Zero")]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [ScriptBlock]$ScriptBlock = { },
    [HashTable]$HashTable = @{ },
    [Int]$Width = 45,
    [Int]$Height = 30,
    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonLeft,
    [parameter(Mandatory = $True, ParameterSetName = "One")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonMid,
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonRight,
    [Switch]$AllowControl,
    [Switch]$AutoClose,
    [ValidateRange(0, 60000)]
    [int]$AutoCloseWait = 10
  )
  Write-Verbose -Message "Enter Function Show-RichTextStatus"

  #region ******** Begin **** $Show-RichTextStatus **** Begin ********

  # ************************************************
  # $RichTextStatus Form
  # ************************************************
  #region $RichTextStatusForm = [System.Windows.Forms.Form]::New()
  $RichTextStatusForm = [System.Windows.Forms.Form]::New()
  $RichTextStatusForm.BackColor = [MyConfig]::Colors.Back
  $RichTextStatusForm.Font = [MyConfig]::Font.Regular
  $RichTextStatusForm.ForeColor = [MyConfig]::Colors.Fore
  $RichTextStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $RichTextStatusForm.Icon = $FCGForm.Icon
  $RichTextStatusForm.KeyPreview = $AllowControl.IsPresent
  $RichTextStatusForm.MaximizeBox = $False
  $RichTextStatusForm.MinimizeBox = $False
  $RichTextStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $RichTextStatusForm.Name = "RichTextStatusForm"
  $RichTextStatusForm.Owner = $FCGForm
  $RichTextStatusForm.ShowInTaskbar = $False
  $RichTextStatusForm.Size = $RichTextStatusForm.MinimumSize
  $RichTextStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $RichTextStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $False }
  $RichTextStatusForm.Text = $Title
  #endregion $RichTextStatusForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-RichTextStatusFormKeyDown ********
  Function Start-RichTextStatusFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the RichTextStatus Form Control
    .DESCRIPTION
      KeyDown Event for the RichTextStatus Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-RichTextStatusFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$RichTextStatusForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.Control -and $EventArg.Alt)
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }
        {
          $Sender.Tag.Cancel = $True
          Break
        }
      }
    }
    Else
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }
        {
          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)
          Break
        }
        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }
        {
          if ($Sender.Tag.Finished)
          {
            $Sender.DialogResult = $ButtonDefault
          }
          Break
        }
      }
    }

    Write-Verbose -Message "Exit KeyDown Event for `$RichTextStatusForm"
  }
  #endregion ******** Function Start-RichTextStatusFormKeyDown ********
  If ($AllowControl.IsPresent)
  {
    $RichTextStatusForm.add_KeyDown({ Start-RichTextStatusFormKeyDown -Sender $This -EventArg $PSItem })
  }

  #region ******** Function Start-RichTextStatusFormShown ********
  function Start-RichTextStatusFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $RichTextStatus Form Control
      .DESCRIPTION
        Shown Event for the $RichTextStatus Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-RichTextStatusFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$RichTextStatusForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    If ([MyConfig]::Production)
    {
      # Disable Auto Exit Timer
      $FCGTimer.Enabled = $False
    }

    if ($PassHashTable)
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox, $HashTable
    }
    else
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $RichTextStatusRichTextBox
    }

    If ([MyConfig]::Production)
    {
      # Re-enable Auto Exit Timer
      $FCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
    }

    switch ($RichTextStatusButtons)
    {
      1
      {
        $RichTextStatusBtmMidButton.Enabled = $True
        $RichTextStatusBtmMidButton.DialogResult = $DialogResult
        Break
      }
      2
      {
        $RichTextStatusBtmLeftButton.Enabled = $True
        $RichTextStatusBtmRightButton.Enabled = $True
        Break
      }
      3
      {
        $RichTextStatusBtmLeftButton.Enabled = $True
        $RichTextStatusBtmMidButton.Enabled = $True
        $RichTextStatusBtmRightButton.Enabled = $True
        Break
      }
    }

    $Sender.Tag.Finished = $True

    if ((($DialogResult -eq $ButtonDefault) -and $AutoClose.IsPresent) -or ($RichTextStatusButtons -eq 0))
    {
      $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
      while ($StopWatch.Elapsed.TotalMilliseconds -le $AutoCloseWait)
      {
        [System.Threading.Thread]::Sleep(10)
        [System.Windows.Forms.Application]::DoEvents()
      }

      $Sender.DialogResult = $DialogResult
    }

    Write-Verbose -Message "Exit Shown Event for `$RichTextStatusForm"
  }
  #endregion ******** Function Start-RichTextStatusFormShown ********
  $RichTextStatusForm.add_Shown({ Start-RichTextStatusFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for $RichTextStatus Form ********

  # ************************************************
  # $RichTextStatus Panel
  # ************************************************
  #region $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()
  $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()
  $RichTextStatusForm.Controls.Add($RichTextStatusPanel)
  $RichTextStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $RichTextStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $RichTextStatusPanel.Name = "RichTextStatusPanel"
  #endregion $RichTextStatusPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $RichTextStatusPanel Controls ********

  #region $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $RichTextStatusPanel.Controls.Add($RichTextStatusRichTextBox)
  $RichTextStatusRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $RichTextStatusRichTextBox.BackColor = [MyConfig]::Colors.TextBack
  $RichTextStatusRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $RichTextStatusRichTextBox.DetectUrls = $True
  $RichTextStatusRichTextBox.Font = [MyConfig]::Font.Regular
  $RichTextStatusRichTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $RichTextStatusRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $RichTextStatusRichTextBox.MaxLength = [Int]::MaxValue
  $RichTextStatusRichTextBox.Multiline = $True
  $RichTextStatusRichTextBox.Name = "RichTextStatusRichTextBox"
  $RichTextStatusRichTextBox.ReadOnly = $True
  $RichTextStatusRichTextBox.Rtf = ""
  $RichTextStatusRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both
  $RichTextStatusRichTextBox.Size = [System.Drawing.Size]::New(($RichTextStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($RichTextStatusPanel.ClientSize.Height - ($RichTextStatusRichTextBox.Top + [MyConfig]::FormSpacer)))
  $RichTextStatusRichTextBox.TabStop = $False
  $RichTextStatusRichTextBox.WordWrap = $False
  #endregion $RichTextStatusRichTextBox = [System.Windows.Forms.RichTextBox]::New()

  #region ******** Function Start-RichTextStatusRichTextBoxMouseDown ********
  Function Start-RichTextStatusRichTextBoxMouseDown
  {
  <#
    .SYNOPSIS
      MouseDown Event for the RichTextStatus RichTextBox Control
    .DESCRIPTION
      MouseDown Event for the RichTextStatus RichTextBox Control
    .PARAMETER Sender
       The RichTextBox Control that fired the MouseDown Event
    .PARAMETER EventArg
       The Event Arguments for the RichTextBox MouseDown Event
    .EXAMPLE
       Start-RichTextStatusRichTextBoxMouseDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.RichTextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter MouseDown Event for `$RichTextStatusRichTextBox"

    [MyConfig]::AutoExit = 0

    $RichTextStatusRichTextBox.SelectionLength = 0
    $RichTextStatusRichTextBox.SelectionStart = $RichTextStatusRichTextBox.TextLength

    Write-Verbose -Message "Exit MouseDown Event for `$RichTextStatusRichTextBox"
  }
  #endregion ******** Function Start-RichTextStatusRichTextBoxMouseDown ********
  $RichTextStatusRichTextBox.add_MouseDown({ Start-RichTextStatusRichTextBoxMouseDown -Sender $This -EventArg $PSItem })

  #endregion ******** $RichTextStatusPanel Controls ********

  switch ($PSCmdlet.ParameterSetName)
  {
    "Zero"
    {
      $RichTextStatusButtons = 0
      Break
    }
    "One"
    {
      $RichTextStatusButtons = 1
      Break
    }
    "Two"
    {
      $RichTextStatusButtons = 2
      Break
    }
    "Three"
    {
      $RichTextStatusButtons = 3
      Break
    }
  }

  # Evenly Space Buttons - Move Size to after Text
  if ($RichTextStatusButtons -gt 0)
  {
    # ************************************************
    # $RichTextStatusBtm Panel
    # ************************************************
    #region $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()
    $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()
    $RichTextStatusForm.Controls.Add($RichTextStatusBtmPanel)
    $RichTextStatusBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
    $RichTextStatusBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
    $RichTextStatusBtmPanel.Name = "RichTextStatusBtmPanel"
    #endregion $RichTextStatusBtmPanel = [System.Windows.Forms.Panel]::New()

    #region ******** $RichTextStatusBtmPanel Controls ********

    $NumButtons = 3
    $TempSpace = [Math]::Floor($RichTextStatusBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
    $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
    $TempMod = $TempSpace % $NumButtons

    #region $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()
    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))
    {
      $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()
      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmLeftButton)
      $RichTextStatusBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
      $RichTextStatusBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $RichTextStatusBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
      $RichTextStatusBtmLeftButton.DialogResult = $ButtonLeft
      $RichTextStatusBtmLeftButton.Enabled = $False
      $RichTextStatusBtmLeftButton.Font = [MyConfig]::Font.Bold
      $RichTextStatusBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $RichTextStatusBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
      $RichTextStatusBtmLeftButton.Name = "RichTextStatusBtmLeftButton"
      $RichTextStatusBtmLeftButton.TabIndex = 0
      $RichTextStatusBtmLeftButton.TabStop = $True
      $RichTextStatusBtmLeftButton.Text = "&$($ButtonLeft.ToString())"
      $RichTextStatusBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmLeftButton.PreferredSize.Height)
      if ($ButtonLeft -eq $ButtonDefault)
      {
        $RichTextStatusBtmLeftButton.Select()
      }
    }
    #endregion $RichTextStatusBtmLeftButton = [System.Windows.Forms.Button]::New()

    #region $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()
    If (($RichTextStatusButtons -eq 1) -or ($RichTextStatusButtons -eq 3))
    {
      $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()
      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmMidButton)
      $RichTextStatusBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
      $RichTextStatusBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $RichTextStatusBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
      $RichTextStatusBtmMidButton.DialogResult = $ButtonMid
      $RichTextStatusBtmMidButton.Enabled = $False
      $RichTextStatusBtmMidButton.Font = [MyConfig]::Font.Bold
      $RichTextStatusBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $RichTextStatusBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
      $RichTextStatusBtmMidButton.Name = "RichTextStatusBtmMidButton"
      $RichTextStatusBtmMidButton.TabStop = $True
      $RichTextStatusBtmMidButton.Text = "&$($ButtonMid.ToString())"
      $RichTextStatusBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RichTextStatusBtmMidButton.PreferredSize.Height)
      if ($ButtonMid -eq $ButtonDefault)
      {
        $RichTextStatusBtmMidButton.Select()
      }
    }
    #endregion $RichTextStatusBtmMidButton = [System.Windows.Forms.Button]::New()

    #region $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()
    If (($RichTextStatusButtons -eq 2) -or ($RichTextStatusButtons -eq 3))
    {
      $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()
      $RichTextStatusBtmPanel.Controls.Add($RichTextStatusBtmRightButton)
      $RichTextStatusBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
      $RichTextStatusBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
      $RichTextStatusBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
      $RichTextStatusBtmRightButton.DialogResult = $ButtonRight
      $RichTextStatusBtmRightButton.Enabled = $False
      $RichTextStatusBtmRightButton.Font = [MyConfig]::Font.Bold
      $RichTextStatusBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
      $RichTextStatusBtmRightButton.Location = [System.Drawing.Point]::New(($RichTextStatusBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
      $RichTextStatusBtmRightButton.Name = "RichTextStatusBtmRightButton"
      $RichTextStatusBtmRightButton.TabIndex = 1
      $RichTextStatusBtmRightButton.TabStop = $True
      $RichTextStatusBtmRightButton.Text = "&$($ButtonRight.ToString())"
      $RichTextStatusBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RichTextStatusBtmRightButton.PreferredSize.Height)
      if ($ButtonRight -eq $ButtonDefault)
      {
        $RichTextStatusBtmRightButton.Select()
      }
    }
    #endregion $RichTextStatusBtmRightButton = [System.Windows.Forms.Button]::New()

    $RichTextStatusBtmPanel.ClientSize = [System.Drawing.Size]::New(($RichTextStatusTextBox.Right + [MyConfig]::FormSpacer), (($RichTextStatusBtmPanel.Controls[$RichTextStatusBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

    #endregion ******** $RichTextStatusBtmPanel Controls ********
  }

  #endregion ******** Controls for $RichTextStatus Form ********

  #endregion ******** End **** $Show-RichTextStatus **** End ********

  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")
  $DialogResult = $RichTextStatusForm.ShowDialog($FCGForm)
  [RichTextStatus]::New(($DialogResult -eq $ButtonDefault), $DialogResult)

  $RichTextStatusForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-RichTextStatus"
}
#endregion function Show-RichTextStatus

# ---------------------------------------
# Sample Function Display Status Messages
# ---------------------------------------
#region function Sample-RichTextStatus
function Sample-RichTextStatus()
{
  <#
    .SYNOPSIS
      Display Utility Status Sample Function
    .DESCRIPTION
      Display Utility Status Sample Function
    .PARAMETER RichTextBox
    .PARAMETER HashTable
      Passed Paramters HashTable
    .EXAMPLE
      Sample-RichTextStatus -RichTextBox $RichTextBox
    .EXAMPLE
      Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  param (
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.RichTextBox]$RichTextBox,
    [HashTable]$HashTable
  )
  Write-Verbose -Message "Enter Function Sample-RichTextStatus"

  $DisplayResult = [System.Windows.Forms.DialogResult]::OK
  $RichTextBox.Refresh()

  # Get Passed Values
  If ($HashTable.ContainsKey("ShowHeader"))
  {
    $ShowHeader = $HashTable.ShowHeader
  }
  Else
  {
    $ShowHeader = $True
  }

  # **************
  # RFT Formatting
  # **************
  # Permanate till Changed
  #$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left
  #$RichTextBox.SelectionBullet = $True
  #$RichTextBox.SelectionIndent = 10
  # Resets After AppendText
  #$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack
  #$RichTextBox.SelectionCharOffset = 0
  #$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore
  #$RichTextBox.SelectionFont = [MyConfig]::Font.Bold
  # **********************
  # Update RichTextBox Text...
  # **********************

  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False

  # Write KPI Event
  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"

  if ($ShowHeader)
  {
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)
    Write-RichTextBox -RichTextBox $RichTextBox
    
    # Update Status Message
    $FCGBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text
    
    # Initialize StopWatch
    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
  }

  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Started Proccess List Data Here..." -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True

  :UserCancel foreach ($Key in $HashTable.Keys)
  {
    Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Found Key" -TextFore ([MyConfig]::Colors.TextInfo) -Value "$($Key) = $($HashTable[$Key])" -ValueFore ([MyConfig]::Colors.TextGood)
    # Check for Fast Exit
    [System.Windows.Forms.Application]::DoEvents()
    If ($RichTextBox.Parent.Parent.Tag.Cancel)
    {
      $RichTextBox.SelectionIndent = 10
      $RichTextBox.SelectionBullet = $False
      Write-RichTextBox -RichTextBox $RichTextBox
      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center
      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort
      Break UserCancel
    }
    # Pause Processing Loop
    If ($RichTextBox.Parent.Parent.Tag.Pause)
    {
      $TmpPause = $RichTextBox.SelectionBullet
      $TmpTitle = $RichTextBox.Parent.Parent.Text
      $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
      $RichTextBox.SelectionBullet = $False
      While ($RichTextBox.Parent.Parent.Tag.Pause)
      {
        [System.Threading.Thread]::Sleep(100)
        [System.Windows.Forms.Application]::DoEvents()
      }
      $RichTextBox.SelectionBullet = $TmpPause
      $RichTextBox.Parent.Parent.Text = $TmpTitle
    }
    Start-Sleep -Milliseconds 100
  }

  # Pause Before Deployment
  $RichTextBox.Parent.Parent.Tag.Pause = $True
  $TmpPause = $RichTextBox.SelectionBullet
  $TmpTitle = $RichTextBox.Parent.Parent.Text
  $RichTextBox.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
  $RichTextBox.SelectionBullet = $False

  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Pause to Review Status" -Font ([MyConfig]::Font.Bold) -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Press 'Pause' to Continue with the Current Deployment" -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox -Text "or Ctrl-Alt-Backspace to Exit / Cancel" -Alignment Center
  Write-RichTextBox -RichTextBox $RichTextBox

  While ($RichTextBox.Parent.Parent.Tag.Pause)
  {
    [System.Threading.Thread]::Sleep(100)
    [System.Windows.Forms.Application]::DoEvents()
    If ($RichTextBox.Parent.Parent.Tag.Cancel)
    {
      $RichTextBox.Parent.Parent.Tag.Pause = $False
      $RichTextBox.SelectionIndent = 10
      $RichTextBox.SelectionBullet = $False
      Write-RichTextBox -RichTextBox $RichTextBox
      Write-RichTextBox -RichTextBox $RichTextBox -Text "Exiting - User Canceled" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center
      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort
    }
  }
  $RichTextBox.SelectionBullet = $TmpPause
  $RichTextBox.Parent.Parent.Text = $TmpTitle

  # Display an Error Information
  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Show Fake Error Message" -TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True
  Try
  {
    Throw "This is a Fake Error!"
  }
  Catch
  {
    # Write Error to Status Dialog
    Write-RichTextBoxError -RichTextBox $RichTextBox
  }

  if ($ShowHeader)
  {
    $RichTextBox.SelectionIndent = 10
    $RichTextBox.SelectionBullet = $False
    Write-RichTextBox -RichTextBox $RichTextBox

    # Set Final Status Message
    Switch ($DisplayResult)
    {
      "OK"
      {
        $FinalMsg = "Add Success Message Here!"
        $FinalClr = [MyConfig]::Colors.TextGood
        Break
      }
      "Cancel"
      {
        $FinalMsg = "Add Error Message Here!"
        $FinalClr = [MyConfig]::Colors.TextBad
        Break
      }
      "Abort"
      {
        $FinalMsg = "Add Abort Message Here!"
        $FinalClr = [MyConfig]::Colors.TextWarn
        Break
      }
    }

    # Write Final Status Message
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())
    Write-RichTextBox -RichTextBox $RichTextBox
    
    # Update Status Message
    $FCGBtmStatusStrip.Items["Status"].Text = $FinalMsg
    $StopWatch.Stop()
  }

  # Return DialogResult
  $DisplayResult
  $DisplayResult = $Null

  Write-Verbose -Message "Exit Function Sample-RichTextStatus"
}
#endregion function Sample-RichTextStatus

#$HashTable = @{"ShowHeader" = $True}
#$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }
#$DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable -AllowControl


# ---------------------------
# Show ProgressBarStatus Function
# ---------------------------
#region ProgressBarStatus Result Class
Class ProgressBarStatus
{
  [Bool]$Success
  [Object]$DialogResult
  ProgressBarStatus ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }
}
#endregion ProgressBarStatus Result Class

#region function Show-ProgressBarStatus
Function Show-ProgressBarStatus ()
{
  <#
    .SYNOPSIS
      Shows Show-ProgressBarStatus
    .DESCRIPTION
      Shows Show-ProgressBarStatus
    .PARAMETER Title
      Title of the Status Mesage Dialog Window
    .PARAMETER ScriptBlock
      Script Block to Execure
    .PARAMETER HashTable
      HashTable of Paramerts to Pass to the ScriptBlock
    .PARAMETER Width
      Width of the Statts Message Dialog Window
    .PARAMETER AllowControl
      Enable Pause and Break out of Script Block
    .EXAMPLE
      $HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label }
      $DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)"
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [ScriptBlock]$ScriptBlock = { },
    [HashTable]$HashTable = @{ },
    [Int]$Width = 45,
    [Switch]$AllowControl
  )
  Write-Verbose -Message "Enter Function Show-ProgressBarStatus"

  #region ******** Begin **** $ProgressBarStatus **** Begin ********

  # ************************************************
  # $ProgressBarStatus Form
  # ************************************************
  #region $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()
  $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()
  $ProgressBarStatusForm.BackColor = [MyConfig]::Colors.Back
  $ProgressBarStatusForm.Font = [MyConfig]::Font.Regular
  $ProgressBarStatusForm.ForeColor = [MyConfig]::Colors.Fore
  $ProgressBarStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ProgressBarStatusForm.Icon = $FCGForm.Icon
  $ProgressBarStatusForm.KeyPreview = $AllowControl.IsPresent
  $ProgressBarStatusForm.MaximizeBox = $False
  $ProgressBarStatusForm.MinimizeBox = $False
  $ProgressBarStatusForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $ProgressBarStatusForm.Name = "ProgressBarStatusForm"
  $ProgressBarStatusForm.Owner = $FCGForm
  $ProgressBarStatusForm.ShowInTaskbar = $False
  $ProgressBarStatusForm.Size = $ProgressBarStatusForm.MinimumSize
  $ProgressBarStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ProgressBarStatusForm.Tag = @{ "Cancel" = $False; "Pause" = $False; "Finished" = $True }
  $ProgressBarStatusForm.Text = $Title
  #endregion $ProgressBarStatusForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ProgressBarStatusFormKeyDown ********
  Function Start-ProgressBarStatusFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the ProgressBarStatus Form Control
    .DESCRIPTION
      KeyDown Event for the ProgressBarStatus Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-ProgressBarStatusFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ProgressBarStatusForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.Control -and $EventArg.Alt)
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }
        {
          $Sender.Tag.Cancel = $True
          Break
        }
      }
    }
    Else
    {
      Switch ($EventArg.KeyCode)
      {
        { $PSItem -eq [System.Windows.Forms.Keys]::Pause }
        {
          $Sender.Tag.Pause = (-not $Sender.Tag.Pause)
          Break
        }
        { $PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }
        {
          if ($Sender.Tag.Finished)
          {
            $Sender.DialogResult = [System.Windows.Forms.DialogResult]::OK
          }
          Break
        }
      }
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ProgressBarStatusForm"
  }
  #endregion ******** Function Start-ProgressBarStatusFormKeyDown ********
  If ($AllowControl.IsPresent)
  {
    $ProgressBarStatusForm.add_KeyDown({ Start-ProgressBarStatusFormKeyDown -Sender $This -EventArg $PSItem })
  }

  #region ******** Function Start-ProgressBarStatusFormShown ********
  Function Start-ProgressBarStatusFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $ProgressBarStatus Form Control
      .DESCRIPTION
        Shown Event for the $ProgressBarStatus Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-ProgressBarStatusFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ProgressBarStatusForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    If ([MyConfig]::Production)
    {
      # Disable Auto Exit Timer
      $FCGTimer.Enabled = $False
    }

    if ($PassHashTable)
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel, $HashTable
    }
    else
    {
      $DialogResult = Invoke-Command -ScriptBlock $ScriptBlock -ArgumentList $ProgressBarStatusProgressBar, $ProgressBarStatusLabel
    }

    $Sender.Tag.Finished = $True

    If ([MyConfig]::Production)
    {
      # Re-enable Auto Exit Timer
      $FCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
    }

    $ProgressBarStatusForm.DialogResult = $DialogResult

    Write-Verbose -Message "Exit Shown Event for `$ProgressBarStatusForm"
  }
  #endregion ******** Function Start-ProgressBarStatusFormShown ********
  $ProgressBarStatusForm.add_Shown({ Start-ProgressBarStatusFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for $ProgressBarStatus Form ********

  # ************************************************
  # $ProgressBarStatus Panel
  # ************************************************
  #region $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()
  $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()
  $ProgressBarStatusForm.Controls.Add($ProgressBarStatusPanel)
  $ProgressBarStatusPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ProgressBarStatusPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ProgressBarStatusPanel.Name = "ProgressBarStatusPanel"
  #endregion $ProgressBarStatusPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ProgressBarStatusPanel Controls ********

  #region $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()
  $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()
  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusLabel)
  $ProgressBarStatusLabel.Font = [MyConfig]::Font.Bold
  $ProgressBarStatusLabel.ForeColor = [MyConfig]::Colors.LabelFore
  $ProgressBarStatusLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ProgressBarStatusLabel.Name = "ProgressBarStatusLabel"
  $ProgressBarStatusLabel.Size = [System.Drawing.Size]::New(($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * 2))
  $ProgressBarStatusLabel.Text = $Null
  $ProgressBarStatusLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  #endregion $ProgressBarStatusLabel = [System.Windows.Forms.Label]::New()

  #region $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()
  $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()
  $ProgressBarStatusPanel.Controls.Add($ProgressBarStatusProgressBar)
  #$ProgressBarStatusProgressBar.AutoSize = $False
  $ProgressBarStatusProgressBar.BackColor = [MyConfig]::Colors.Back
  #$ProgressBarStatusProgressBar.Enabled = $True
  $ProgressBarStatusProgressBar.Font = [MyConfig]::Font.Regular
  $ProgressBarStatusProgressBar.ForeColor = [MyConfig]::Colors.Fore
  $ProgressBarStatusProgressBar.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ProgressBarStatusLabel.Bottom + [MyConfig]::FormSpacer))
  $ProgressBarStatusProgressBar.Name = "ProgressBarStatusProgressBar"
  $ProgressBarStatusProgressBar.TabStop = $False
  #$ProgressBarStatusProgressBar.Tag = [System.Object]::New()
  #$ProgressBarStatusProgressBar.Value = 0
  #$ProgressBarStatusProgressBar.Visible = $True
  $ProgressBarStatusProgressBar.Width = ($ProgressBarStatusPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))
  #endregion $ProgressBarStatusProgressBar = [System.Windows.Forms.ProgressBar]::New()

  $ProgressBarStatusPanel.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusPanel.ClientSize.Width, ($ProgressBarStatusProgressBar.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ProgressBarStatusPanel Controls ********

  $ProgressBarStatusForm.ClientSize = [System.Drawing.Size]::New($ProgressBarStatusForm.ClientSize.Width, $ProgressBarStatusPanel.ClientSize.Height)

  #endregion ******** Controls for $ProgressBarStatus Form ********

  #endregion ******** End **** $Show-ProgressBarStatus **** End ********

  $PassHashTable = $PSBoundParameters.ContainsKey("HashTable")
  $DialogResult = $ProgressBarStatusForm.ShowDialog($FCGForm)
  [ProgressBarStatus]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult)

  $ProgressBarStatusForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-ProgressBarStatus"
}
#endregion function Show-ProgressBarStatus

# ---------------------------------------
# Sample Function Display Status Messages
# ---------------------------------------
#region function Sample-ProgressBarStatus
Function Sample-ProgressBarStatus()
{
  <#
    .SYNOPSIS
      Display Utility Status Sample Function
    .DESCRIPTION
      Display Utility Status Sample Function
    .PARAMETER ProgressBar
      The Progress Bar
    .PARAMETER Label
      The Label to Indicate the Current Item being Proccessed
    .PARAMETER HashTable
      Passed Paramters HashTable
    .EXAMPLE
      Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.ProgressBar]$ProgressBar,
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.Label]$Label,
    [HashTable]$HashTable
  )
  Write-Verbose -Message "Enter Function Sample-ProgressBarStatus"

  $DisplayResult = [System.Windows.Forms.DialogResult]::OK
  $ProgressBar.Refresh()

  # Write KPI Event
  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"
  
  # Update Status Message
  $FCGBtmStatusStrip.Items["Status"].Text = $ProgressBar.Parent.Parent.Text
  
  # Month Names
  $Values = $HashTable.Values

  # Set Starting ProgresBar Values
  $ProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Blocks
  $ProgressBar.Maximum = $Values.Count
  $ProgressBar.Minimum = 1
  $ProgressBar.Step = 1
  $ProgressBar.Value = 1

  :UserCancel ForEach ($Value In $Values)
  {
    # Update Progress Information

    $Label.Text = $Value
    $Label.Refresh()

    # Check for Fast Exit
    [System.Windows.Forms.Application]::DoEvents()
    If ($ProgressBar.Parent.Parent.Tag.Cancel)
    {
      $DisplayResult = [System.Windows.Forms.DialogResult]::Abort
      Break UserCancel
    }

    # Pause Processing Loop
    If ($ProgressBar.Parent.Parent.Tag.Pause)
    {
      $TmpTitle = $ProgressBar.Parent.Parent.Text
      $ProgressBar.Parent.Parent.Text = "$($TmpTitle) - PAUSED!"
      While ($ProgressBar.Parent.Parent.Tag.Pause)
      {
        [System.Threading.Thread]::Sleep(100)
        [System.Windows.Forms.Application]::DoEvents()
      }
      $ProgressBar.Parent.Parent.Text = $TmpTitle
    }

    $ProgressBar.Increment(1)
    $ProgressBar.Refresh()
    Start-Sleep -Milliseconds 1000
  }
  
  # Update Status Message
  $FCGBtmStatusStrip.Items["Status"].Text = "Completed $($ProgressBar.Parent.Parent.Text)"
  
  # Return DialogResult
  $DisplayResult
  $DisplayResult = $Null

  Write-Verbose -Message "Exit Function Sample-ProgressBarStatus"
}
#endregion function Sample-ProgressBarStatus

#$HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}
#$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label }
#$DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)"


# --------------------------
# Show ChangeLog Function
# --------------------------
#region function Show-ChangeLog
Function Show-ChangeLog ()
{
  <#
    .SYNOPSIS
      Shows Show-ChangeLog
    .DESCRIPTION
      Shows Show-ChangeLog
    .PARAMETER Title
      Title of the Change Log Dialog Window
    .PARAMETER ChangeText
      Change Log Text
    .PARAMETER Width
      Width of Change Log Dialog Window
    .PARAMETER Height
      Height of Change Log Dialog Window
    .EXAMPLE
      $TmpContent = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()
      $CLogStart = ($TmpContent.IndexOf("<") + 3)
      $CLogEnd = ($TmpContent.IndexOf(">") - 1)
      Show-ChangeLog -ChangeText ($TmpContent.SubString($CLogStart, ($CLogEnd - $CLogStart)))
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "Change Log - $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)",
    [parameter(Mandatory = $True)]
    [String]$ChangeText,
    [Int]$Width = 60,
    [Int]$Height = 30
  )
  Write-Verbose -Message "Enter Function Show-ChangeLog"

  #region ******** Begin **** ChangeLog **** Begin ********

  # ************************************************
  # ChangeLog Form
  # ************************************************
  #region $ChangeLogForm = [System.Windows.Forms.Form]::New()
  $ChangeLogForm = [System.Windows.Forms.Form]::New()
  $ChangeLogForm.BackColor = [MyConfig]::Colors.Back
  $ChangeLogForm.Font = [MyConfig]::Font.Regular
  $ChangeLogForm.ForeColor = [MyConfig]::Colors.Fore
  $ChangeLogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ChangeLogForm.Icon = $FCGForm.Icon
  $ChangeLogForm.KeyPreview = $True
  $ChangeLogForm.MaximizeBox = $False
  $ChangeLogForm.MinimizeBox = $False
  $ChangeLogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $ChangeLogForm.Name = "ChangeLogForm"
  $ChangeLogForm.Owner = $FCGForm
  $ChangeLogForm.ShowInTaskbar = $False
  $ChangeLogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ChangeLogForm.Tag = $False
  $ChangeLogForm.Text = $Title
  #endregion $ChangeLogForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ChangeLogFormKeyDown ********
  Function Start-ChangeLogFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the ChangeLog Form Control
    .DESCRIPTION
      KeyDown Event for the ChangeLog Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-ChangeLogFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ChangeLogForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))
    {
      $ChangeLogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ChangeLogForm"
  }
  #endregion ******** Function Start-ChangeLogFormKeyDown ********
  $ChangeLogForm.add_KeyDown({ Start-ChangeLogFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ChangeLogFormShown ********
  Function Start-ChangeLogFormShown
  {
    <#
     .SYNOPSIS
       Shown Event for the ChangeLog Form Control
     .DESCRIPTION
       Shown Event for the ChangeLog Form Control
     .PARAMETER Sender
        The Form Control that fired the Shown Event
     .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-ChangeLogFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ChangeLogForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    $ChangeLogTextBox.AppendText($ChangeText)

    $ChangeLogTextBox.SelectionLength = 0
    $ChangeLogTextBox.SelectionStart = 0
    $ChangeLogTextBox.ScrollToCaret()
    $Sender.Refresh()
    $Sender.Activate()
    [System.Windows.Forms.Application]::DoEvents()

    Write-Verbose -Message "Exit Shown Event for `$ChangeLogForm"
  }
  #endregion ******** Function Start-ChangeLogFormShown ********
  $ChangeLogForm.add_Shown({ Start-ChangeLogFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ChangeLog Form ********

  # ************************************************
  # ChangeLog Panel
  # ************************************************
  #region $ChangeLogPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogForm.Controls.Add($ChangeLogPanel)
  $ChangeLogPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ChangeLogPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ChangeLogPanel.Name = "ChangeLogPanel"
  #endregion $ChangeLogPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ChangeLogPanel Controls ********

  #region $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()
  $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()
  $ChangeLogPanel.Controls.Add($ChangeLogTextBox)
  $ChangeLogTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $ChangeLogTextBox.BackColor = [MyConfig]::Colors.TextBack
  $ChangeLogTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $ChangeLogTextBox.Font = [System.Drawing.Font]::New("Courier New", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)
  $ChangeLogTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $ChangeLogTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ChangeLogTextBox.MaxLength = [Int]::MaxValue
  $ChangeLogTextBox.Multiline = $True
  $ChangeLogTextBox.Name = "ChangeLogTextBox"
  $ChangeLogTextBox.ReadOnly = $True
  $ChangeLogTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
  $ChangeLogTextBox.Size = [System.Drawing.Size]::New(($ChangeLogPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ChangeLogPanel.ClientSize.Height - ($ChangeLogTextBox.Top + [MyConfig]::FormSpacer)))
  $ChangeLogTextBox.TabStop = $False
  $ChangeLogTextBox.Text = $Null
  $ChangeLogTextBox.WordWrap = $False
  #endregion $ChangeLogTextBox = [System.Windows.Forms.TextBox]::New()

  #endregion ******** $ChangeLogPanel Controls ********

  # ************************************************
  # ChangeLogBtm Panel
  # ************************************************
  #region $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()
  $ChangeLogForm.Controls.Add($ChangeLogBtmPanel)
  $ChangeLogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ChangeLogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ChangeLogBtmPanel.Name = "ChangeLogBtmPanel"
  #endregion $ChangeLogBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ChangeLogBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ChangeLogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()
  $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()
  $ChangeLogBtmPanel.Controls.Add($ChangeLogBtmMidButton)
  $ChangeLogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ChangeLogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ChangeLogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ChangeLogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $ChangeLogBtmMidButton.Enabled = $True
  $ChangeLogBtmMidButton.Font = [MyConfig]::Font.Bold
  $ChangeLogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ChangeLogBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), 0)
  $ChangeLogBtmMidButton.Name = "ChangeLogBtmMidButton"
  $ChangeLogBtmMidButton.TabStop = $True
  $ChangeLogBtmMidButton.Text = "&Ok"
  $ChangeLogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ChangeLogBtmMidButton.PreferredSize.Height)
  #endregion $ChangeLogBtmMidButton = [System.Windows.Forms.Button]::New()

  $ChangeLogBtmPanel.ClientSize = [System.Drawing.Size]::New(($ChangeLogTextBox.Right + [MyConfig]::FormSpacer), (($ChangeLogBtmPanel.Controls[$ChangeLogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ChangeLogBtmPanel Controls ********

  #endregion ******** Controls for ChangeLog Form ********

  #endregion ******** End **** Show-ChangeLog **** End ********

  $DialogResult = $ChangeLogForm.ShowDialog($FCGForm)
  $ChangeLogForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-ChangeLog"
}
#endregion function Show-ChangeLog

# --------------------------
# Show AlertMessage Function
# --------------------------
#region function Show-AlertMessage
Function Show-AlertMessage ()
{
  <#
    .SYNOPSIS
      Shows Show-AlertMessage
    .DESCRIPTION
      Shows Show-AlertMessage
    .PARAMETER Title
      Title of the Change Log Dialog Window
    .PARAMETER Message
      Alert Message to Display
    .PARAMETER Width
      Width of Alert Message Dialog Window
    .PARAMETER MsgType
      Type of Alert Message to SHow
    .EXAMPLE
      Show-AlertMessage -Title "Example Alert" -Message "Show Success, Warning, Error, and Information Alert Messages"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$Title,
    [parameter(Mandatory = $True)]
    [String]$Message,
    [Int]$Width = 25,
    [ValidateSet("Success", "Warning", "Error", "Info")]
    [String]$MsgType = "Info"
  )
  Write-Verbose -Message "Enter Function Show-AlertMessage"

  #region ******** Begin **** $AlertMessage **** Begin ********

  # ************************************************
  # $AlertMessage Form
  # ************************************************
  #region $AlertMessageForm = [System.Windows.Forms.Form]::New()
  $AlertMessageForm = [System.Windows.Forms.Form]::New()
  $AlertMessageForm.BackColor = [MyConfig]::Colors.TextBack
  $AlertMessageForm.Font = [MyConfig]::Font.Regular
  $AlertMessageForm.ForeColor = [MyConfig]::Colors.TextFore
  $AlertMessageForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D

  switch ($MsgType)
  {
    "Success"
    {
      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Shield
      Break
    }
    "Warning"
    {
      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Warning
      Break
    }
    "Error"
    {
      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Error
      Break
    }
    "Info"
    {
      $AlertMessageForm.Icon = [System.Drawing.SystemIcons]::Information
      Break
    }
  }
  $AlertMessageForm.KeyPreview = $True
  $AlertMessageForm.MaximizeBox = $False
  $AlertMessageForm.MinimizeBox = $False
  $AlertMessageForm.Name = "AlertMessageForm"
  $AlertMessageForm.Owner = $FCGForm
  $AlertMessageForm.ShowInTaskbar = $False
  $AlertMessageForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $AlertMessageForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $AlertMessageForm.Tag = @{ "Cancel" = $False; "Pause" = $False }
  $AlertMessageForm.Text = $Title
  #endregion $AlertMessageForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-AlertMessageFormKeyDown ********
  Function Start-AlertMessageFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the AlertMessage Form Control
    .DESCRIPTION
      KeyDown Event for the AlertMessage Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-AlertMessageFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$AlertMessageForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))
    {
      $AlertMessageForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$AlertMessageForm"
  }
  #endregion ******** Function Start-AlertMessageFormKeyDown ********
  $AlertMessageForm.add_KeyDown({ Start-AlertMessageFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-AlertMessageFormShown ********
  Function Start-AlertMessageFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $AlertMessage Form Control
      .DESCRIPTION
        Shown Event for the $AlertMessage Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-AlertMessageFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$AlertMessageForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$AlertMessageForm"
  }
  #endregion ******** Function Start-AlertMessageFormShown ********
  $AlertMessageForm.add_Shown({ Start-AlertMessageFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for $AlertMessage Form ********

  # ************************************************
  # $AlertMessage Panel
  # ************************************************
  #region $AlertMessagePanel = [System.Windows.Forms.Panel]::New()
  $AlertMessagePanel = [System.Windows.Forms.Panel]::New()
  $AlertMessageForm.Controls.Add($AlertMessagePanel)
  $AlertMessagePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $AlertMessagePanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $AlertMessagePanel.Name = "AlertMessagePanel"
  $AlertMessagePanel.Size = [System.Drawing.Size]::New(($AlertMessageForm.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($AlertMessageForm.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))
  #endregion $AlertMessagePanel = [System.Windows.Forms.Panel]::New()

  #region ******** $AlertMessagePanel Controls ********

  #region $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()
  $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()
  $AlertMessagePanel.Controls.Add($AlertMessageTopLabel)
  $AlertMessageTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")

  Switch ($MsgType)
  {
    "Info"
    {
      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextInfo
      Break
    }
    "Success"
    {
      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextGood
      Break
    }
    "Warning"
    {
      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextWarn
      Break
    }
    "Error"
    {
      $AlertMessageTopLabel.BackColor = [MyConfig]::Colors.TextBad
      Break
    }
  }
  $AlertMessageTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $AlertMessageTopLabel.Font = [MyConfig]::Font.Title
  $AlertMessageTopLabel.ForeColor = [MyConfig]::Colors.TextBack
  $AlertMessageTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $AlertMessageTopLabel.Name = "AlertMessageTopLabel"
  $AlertMessageTopLabel.Size = [System.Drawing.Size]::New(($AlertMessagePanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $AlertMessageTopLabel.PreferredHeight)
  $AlertMessageTopLabel.Text = $Title
  $AlertMessageTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  #endregion $AlertMessageTopLabel = [System.Windows.Forms.Label]::New()

  #region $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()
  $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()
  $AlertMessagePanel.Controls.Add($AlertMessageBtmLabel)
  $AlertMessageBtmLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $AlertMessageBtmLabel.BackColor = [MyConfig]::Colors.TextBack
  $AlertMessageBtmLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $AlertMessageBtmLabel.Font = [MyConfig]::Font.Bold
  $AlertMessageBtmLabel.ForeColor = [MyConfig]::Colors.TextFore
  $AlertMessageBtmLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($AlertMessageTopLabel.Bottom + [MyConfig]::FormSpacer))
  $AlertMessageBtmLabel.Name = "AlertMessageBtmLabel"
  $AlertMessageBtmLabel.Size = [System.Drawing.Size]::New($AlertMessageTopLabel.Width, ($AlertMessageTopLabel.Width - ($AlertMessageBtmLabel.Top * 3)))
  $AlertMessageBtmLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $AlertMessageBtmLabel.Text = $Message
  #endregion $AlertMessageBtmLabel = [System.Windows.Forms.Label]::New()

  $AlertMessagePanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, ($AlertMessageBtmLabel.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $AlertMessagePanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  # ************************************************
  # $AlertMessageBtm Panel
  # ************************************************
  #region $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()
  $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()
  $AlertMessageForm.Controls.Add($AlertMessageBtmPanel)
  $AlertMessageBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $AlertMessageBtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $AlertMessagePanel.Bottom)
  $AlertMessageBtmPanel.Name = "AlertMessageBtmPanel"
  #endregion $AlertMessageBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $AlertMessageBtmPanel Controls ********

  $NumButtons = 3
  $TempSpace = [Math]::Floor($AlertMessageBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()
  $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()
  $AlertMessageBtmPanel.Controls.Add($AlertMessageBtmMidButton)
  $AlertMessageBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $AlertMessageBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $AlertMessageBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $AlertMessageBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
  $AlertMessageBtmMidButton.Font = [MyConfig]::Font.Bold
  $AlertMessageBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $AlertMessageBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
  $AlertMessageBtmMidButton.Name = "AlertMessageBtmMidButton"
  $AlertMessageBtmMidButton.TabStop = $True
  $AlertMessageBtmMidButton.Text = "OK"
  $AlertMessageBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $AlertMessageBtmMidButton.PreferredSize.Height)
  #endregion $AlertMessageBtmMidButton = [System.Windows.Forms.Button]::New()

  $AlertMessageBtmPanel.ClientSize = [System.Drawing.Size]::New($AlertMessagePanel.ClientSize.Width, (($AlertMessageBtmPanel.Controls[$AlertMessageBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $AlertMessageBtmPanel Controls ********

  $AlertMessageForm.ClientSize = [System.Drawing.Size]::New($AlertMessageForm.ClientSize.Width, $AlertMessageBtmPanel.Bottom)

  #endregion ******** Controls for $AlertMessage Form ********

  #endregion ******** End **** $Show-AlertMessage **** End ********

  $DialogResult = $AlertMessageForm.ShowDialog($FCGForm)
  $AlertMessageForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-AlertMessage"
}
#endregion function Show-AlertMessage

# --------------------------
# Get UserResponse Function
# --------------------------
#region UserResponse Result Class
Class UserResponse
{
  [Bool]$Success
  [Object]$DialogResult

  UserResponse ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }
}
#endregion UserResponse Result Class

#region function Get-UserResponse
Function Get-UserResponse ()
{
  <#
    .SYNOPSIS
      Shows Get-UserResponse
    .DESCRIPTION
      Shows Get-UserResponse
    .PARAMETER Title
      Title of the Get-Qwery Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Width
      Width of the UserResponse Dialog Window
    .PARAMETER Icon
      Message Icon
    .PARAMETER ButtonDefault
      The Default Button
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $DialogResult = Get-UserResponse -Title "Get User Text - Single" -Message "Show this Sample Message Prompt to the User" -Items "Sample Text"
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "One")]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [String]$Message,
    [Int]$Width = 25,
    [System.Drawing.Icon]$Icon = [System.Drawing.SystemIcons]::Information,
    [System.Windows.Forms.DialogResult]$ButtonDefault = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonLeft,
    [parameter(Mandatory = $False, ParameterSetName = "One")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonMid = "OK",
    [parameter(Mandatory = $True, ParameterSetName = "Two")]
    [parameter(Mandatory = $True, ParameterSetName = "Three")]
    [System.Windows.Forms.DialogResult]$ButtonRight
  )
  Write-Verbose -Message "Enter Function Get-UserResponse"

  #region ******** Begin **** $UserResponse **** Begin ********

  # ************************************************
  # $UserResponse Form
  # ************************************************
  #region $UserResponseForm = [System.Windows.Forms.Form]::New()
  $UserResponseForm = [System.Windows.Forms.Form]::New()
  $UserResponseForm.BackColor = [MyConfig]::Colors.Back
  $UserResponseForm.Font = [MyConfig]::Font.Regular
  $UserResponseForm.ForeColor = [MyConfig]::Colors.Fore
  $UserResponseForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $UserResponseForm.Icon = $FCGForm.Icon
  $UserResponseForm.KeyPreview = $AllowControl.IsPresent
  $UserResponseForm.MaximizeBox = $False
  $UserResponseForm.MinimizeBox = $False
  $UserResponseForm.Name = "UserResponseForm"
  $UserResponseForm.Owner = $FCGForm
  $UserResponseForm.ShowInTaskbar = $False
  $UserResponseForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $UserResponseForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $UserResponseForm.Tag = @{ "Cancel" = $False; "Pause" = $False }
  $UserResponseForm.Text = $Title
  #endregion $UserResponseForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-UserResponseFormKeyDown ********
  Function Start-UserResponseFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the UserResponse Form Control
    .DESCRIPTION
      KeyDown Event for the UserResponse Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-UserResponseFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$UserResponseForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Escape))
    {
      $UserResponseForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$UserResponseForm"
  }
  #endregion ******** Function Start-UserResponseFormKeyDown ********
  $UserResponseForm.add_KeyDown({ Start-UserResponseFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-UserResponseFormShown ********
  Function Start-UserResponseFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the $UserResponse Form Control
      .DESCRIPTION
        Shown Event for the $UserResponse Form Control
      .PARAMETER Sender
         The Form Control that fired the Shown Event
      .PARAMETER EventArg
         The Event Arguments for the Form Shown Event
      .EXAMPLE
         Start-UserResponseFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$UserResponseForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Write-Verbose -Message "Exit Shown Event for `$UserResponseForm"
  }
  #endregion ******** Function Start-UserResponseFormShown ********
  $UserResponseForm.add_Shown({ Start-UserResponseFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for $UserResponse Form ********

  # ************************************************
  # $UserResponse Panel
  # ************************************************
  #region $UserResponsePanel = [System.Windows.Forms.Panel]::New()
  $UserResponsePanel = [System.Windows.Forms.Panel]::New()
  $UserResponseForm.Controls.Add($UserResponsePanel)
  $UserResponsePanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $UserResponsePanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $UserResponsePanel.Name = "UserResponsePanel"
  #endregion $UserResponsePanel = [System.Windows.Forms.Panel]::New()

  #region ******** $UserResponsePanel Controls ********

  #region $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()
  $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()
  $UserResponsePanel.Controls.Add($UserResponsePictureBox)
  $UserResponsePictureBox.AutoSize = $False
  $UserResponsePictureBox.BackColor = [MyConfig]::Colors.Back
  $UserResponsePictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $UserResponsePictureBox.Image = $Icon
  $UserResponsePictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $UserResponsePictureBox.Name = "UserResponsePictureBox"
  $UserResponsePictureBox.Size = [System.Drawing.Size]::New(32, 32)
  $UserResponsePictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage
  #endregion $UserResponsePictureBox = [System.Windows.Forms.PictureBox]::New()

  #region $UserResponseLabel = [System.Windows.Forms.Label]::New()
  $UserResponseLabel = [System.Windows.Forms.Label]::New()
  $UserResponsePanel.Controls.Add($UserResponseLabel)
  $UserResponseLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $UserResponseLabel.Font = [MyConfig]::Font.Regular
  $UserResponseLabel.ForeColor = [MyConfig]::Colors.LabelFore
  $UserResponseLabel.Location = [System.Drawing.Point]::New(($UserResponsePictureBox.Right + [MyConfig]::FormSpacer), $UserResponsePictureBox.Top)
  $UserResponseLabel.Name = "UserResponseLabel"
  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), $UserResponsePanel.ClientSize.Width)
  $UserResponseLabel.Text = $Message
  $UserResponseLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $UserResponseLabel = [System.Windows.Forms.Label]::New()

  # Returns the minimum size required to display the text
  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($UserResponseLabel.Text, [MyConfig]::Font.Regular, $UserResponseLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
  $UserResponseLabel.Size = [System.Drawing.Size]::New(($UserResponsePanel.ClientSize.Width - ($UserResponseLabel.Left + ([MyConfig]::FormSpacer * 3))), ($TmpSize.Height + [MyConfig]::Font.Height))

  #endregion ******** $UserResponsePanel Controls ********

  Switch ($PSCmdlet.ParameterSetName)
  {
    "One"
    {
      $UserResponseButtons = 1
      Break
    }
    "Two"
    {
      $UserResponseButtons = 2
      Break
    }
    "Three"
    {
      $UserResponseButtons = 3
      Break
    }
  }

  # Evenly Space Buttons - Move Size to after Text
  # ************************************************
  # $UserResponseBtm Panel
  # ************************************************
  #region $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()
  $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()
  $UserResponseForm.Controls.Add($UserResponseBtmPanel)
  $UserResponseBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $UserResponseBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $UserResponseBtmPanel.Name = "UserResponseBtmPanel"
  #endregion $UserResponseBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $UserResponseBtmPanel Controls ********

  $NumButtons = 3
  $TempSpace = [Math]::Floor($UserResponseBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()
  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))
  {
    $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()
    $UserResponseBtmPanel.Controls.Add($UserResponseBtmLeftButton)
    $UserResponseBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
    $UserResponseBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $UserResponseBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
    $UserResponseBtmLeftButton.DialogResult = $ButtonLeft
    $UserResponseBtmLeftButton.Font = [MyConfig]::Font.Bold
    $UserResponseBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $UserResponseBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
    $UserResponseBtmLeftButton.Name = "UserResponseBtmLeftButton"
    $UserResponseBtmLeftButton.TabIndex = 0
    $UserResponseBtmLeftButton.TabStop = $True
    $UserResponseBtmLeftButton.Text = "&$($ButtonLeft.ToString())"
    $UserResponseBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmLeftButton.PreferredSize.Height)
    if ($ButtonLeft -eq $ButtonDefault)
    {
      $UserResponseBtmLeftButton.Select()
    }
  }
  #endregion $UserResponseBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()
  If (($UserResponseButtons -eq 1) -or ($UserResponseButtons -eq 3))
  {
    $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()
    $UserResponseBtmPanel.Controls.Add($UserResponseBtmMidButton)
    $UserResponseBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
    $UserResponseBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $UserResponseBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
    $UserResponseBtmMidButton.DialogResult = $ButtonMid
    $UserResponseBtmMidButton.Font = [MyConfig]::Font.Bold
    $UserResponseBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $UserResponseBtmMidButton.Location = [System.Drawing.Point]::New(($TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
    $UserResponseBtmMidButton.Name = "UserResponseBtmMidButton"
    $UserResponseBtmMidButton.TabStop = $True
    $UserResponseBtmMidButton.Text = "&$($ButtonMid.ToString())"
    $UserResponseBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $UserResponseBtmMidButton.PreferredSize.Height)
    if ($ButtonMid -eq $ButtonDefault)
    {
      $UserResponseBtmMidButton.Select()
    }
  }
  #endregion $UserResponseBtmMidButton = [System.Windows.Forms.Button]::New()

  #region $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()
  If (($UserResponseButtons -eq 2) -or ($UserResponseButtons -eq 3))
  {
    $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()
    $UserResponseBtmPanel.Controls.Add($UserResponseBtmRightButton)
    $UserResponseBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
    $UserResponseBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
    $UserResponseBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
    $UserResponseBtmRightButton.DialogResult = $ButtonRight
    $UserResponseBtmRightButton.Font = [MyConfig]::Font.Bold
    $UserResponseBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
    $UserResponseBtmRightButton.Location = [System.Drawing.Point]::New(($UserResponseBtmLeftButton.Right + $TempWidth + $TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)
    $UserResponseBtmRightButton.Name = "UserResponseBtmRightButton"
    $UserResponseBtmRightButton.TabIndex = 1
    $UserResponseBtmRightButton.TabStop = $True
    $UserResponseBtmRightButton.Text = "&$($ButtonRight.ToString())"
    $UserResponseBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $UserResponseBtmRightButton.PreferredSize.Height)
    if ($ButtonRight -eq $ButtonDefault)
    {
      $UserResponseBtmRightButton.Select()
    }
  }
  #endregion $UserResponseBtmRightButton = [System.Windows.Forms.Button]::New()

  $UserResponseBtmPanel.ClientSize = [System.Drawing.Size]::New(($UserResponseTextBox.Right + [MyConfig]::FormSpacer), (($UserResponseBtmPanel.Controls[$UserResponseBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $UserResponseBtmPanel Controls ********

  $UserResponseForm.ClientSize = [System.Drawing.Size]::New($UserResponseForm.ClientSize.Width, ($UserResponseForm.ClientSize.Height - ($UserResponsePanel.ClientSize.Height - ([Math]::Max($UserResponsePictureBox.Bottom, $UserResponseLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))

  #endregion ******** Controls for $UserResponse Form ********

  #endregion ******** End **** $Get-UserResponse **** End ********

  $DialogResult = $UserResponseForm.ShowDialog($FCGForm)
  [UserResponse]::New(($DialogResult -eq $ButtonDefault), $DialogResult)

  $UserResponseForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-UserResponse"
}
#endregion function Get-UserResponse

# -----------------------
# Get TextBoxInput Function
# -----------------------
#region TextBoxInput Result Class
Class TextBoxInput
{
  [Bool]$Success
  [Object]$DialogResult
  [String[]]$Items

  TextBoxInput ([Bool]$Success, [Object]$DialogResult, [String[]]$Items)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Items = $Items
  }
}
#endregion TextBoxInput Result Class

#region function Get-TextBoxInput
function Get-TextBoxInput ()
{
  <#
    .SYNOPSIS
      Shows Get-TextBoxInput
    .DESCRIPTION
      Shows Get-TextBoxInput
    .PARAMETER Title
      Title of the Get-TextBoxInput Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER HintText
      Hint Text to Display
    .PARAMETER ValidChars
      RegEx Allowed Valid Characters for Input
    .PARAMETER ValidOutput
      RegEx Validate Output Format
    .PARAMETER Items
      Default Items / Text
    .PARAMETER MaxLength
      Maximum Length of Text Input
    .PARAMETER Multi
      Allow Multiple Lines of TExt
    .PARAMETER NoDuplicates
      Do Not Allow Duplicate Values
    .PARAMETER Width
      Width of the Get-TextBoxInput Dialog Window
    .PARAMETER Height
      Height of the Get-TextBoxInput Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $DialogResult = Get-TextBoxInput -Title "Get User Text - Multi" -Message "Show this Sample Message Prompt to the User" -Multi -Items @("Computer Name 01", "Computer Name 02", "Computer Name 03")
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Single")]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [String]$HintText = "Enter Value Here",
    [String]$ValidChars = "[\s\w\d\.\-_,;]",
    [String]$ValidOutput = ".+",
    [String[]]$Items = @(),
    [Int]$MaxLength = [Int]::MaxValue,
    [Int]$Width = 35,
    [parameter(Mandatory = $True, ParameterSetName = "Multi")]
    [Switch]$Multi,
    [parameter(Mandatory = $True, ParameterSetName = "Multi")]
    [Switch]$NoDuplicates,
    [parameter(Mandatory = $False, ParameterSetName = "Multi")]
    [Int]$Height = 18,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Get-TextBoxInput"

  #region ******** Begin **** TextBoxInput **** Begin ********

  # ************************************************
  # TextBoxInput Form
  # ************************************************
  #region $TextBoxInputForm = [System.Windows.Forms.Form]::New()
  $TextBoxInputForm = [System.Windows.Forms.Form]::New()
  $TextBoxInputForm.BackColor = [MyConfig]::Colors.Back
  $TextBoxInputForm.Font = [MyConfig]::Font.Regular
  $TextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore
  $TextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $TextBoxInputForm.Icon = $PILForm.Icon
  $TextBoxInputForm.KeyPreview = $True
  $TextBoxInputForm.MaximizeBox = $False
  $TextBoxInputForm.MinimizeBox = $False
  if ($Multi.IsPresent)
  {
    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  }
  else
  {
    $TextBoxInputForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  }
  $TextBoxInputForm.Name = "TextBoxInputForm"
  $TextBoxInputForm.Owner = $PILForm
  $TextBoxInputForm.ShowInTaskbar = $False
  $TextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $TextBoxInputForm.Text = $Title
  #endregion $TextBoxInputForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-TextBoxInputFormKeyDown ********
  function Start-TextBoxInputFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the TextBoxInput Form Control
      .DESCRIPTION
        KeyDown Event for the TextBoxInput Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-TextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputForm"

    [MyConfig]::AutoExit = 0
    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $TextBoxInputForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputForm"
  }
  #endregion ******** Function Start-TextBoxInputFormKeyDown ********
  $TextBoxInputForm.add_KeyDown({ Start-TextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-TextBoxInputFormShown ********
  function Start-TextBoxInputFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the TextBoxInput Form Control
      .DESCRIPTION
        Shown Event for the TextBoxInput Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-TextBoxInputFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$TextBoxInputForm"

    [MyConfig]::AutoExit = 0

    $TextBoxInputTextBox.DeselectAll()

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$TextBoxInputForm"
  }
  #endregion ******** Function Start-TextBoxInputFormShown ********
  $TextBoxInputForm.add_Shown({ Start-TextBoxInputFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for TextBoxInput Form ********

  # ************************************************
  # TextBoxInput Panel
  # ************************************************
  #region $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()
  $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()
  $TextBoxInputForm.Controls.Add($TextBoxInputPanel)
  $TextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $TextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $TextBoxInputPanel.Name = "TextBoxInputPanel"
  #endregion $TextBoxInputPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $TextBoxInputPanel Controls ********

  if ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $TextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $TextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $TextBoxInputPanel.Controls.Add($TextBoxInputLabel)
    $TextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $TextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $TextBoxInputLabel.Name = "TextBoxInputLabel"
    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $TextBoxInputLabel.Text = $Message
    $TextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $TextBoxInputLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($TextBoxInputLabel.Text, [MyConfig]::Font.Regular, $TextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $TextBoxInputLabel.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $TextBoxInputLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }
  
  # ************************************************
  # TextBoxInput GroupBox
  # ************************************************
  #region $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()
  $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $TextBoxInputPanel.Controls.Add($TextBoxInputGroupBox)
  $TextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back
  $TextBoxInputGroupBox.Font = [MyConfig]::Font.Regular
  $TextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $TextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $TextBoxInputGroupBox.Name = "TextBoxInputGroupBox"
  $TextBoxInputGroupBox.Size = [System.Drawing.Size]::New(($TextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputPanel.ClientSize.Height - ($TextBoxInputGroupBox.Top + [MyConfig]::FormSpacer)))
  $TextBoxInputGroupBox.Text = $Null
  #endregion $TextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()
  
  #region ******** $TextBoxInputGroupBox Controls ********
  
  #region $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()
  $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()
  $TextBoxInputGroupBox.Controls.Add($TextBoxInputTextBox)
  $TextBoxInputTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $TextBoxInputTextBox.AutoSize = $True
  $TextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack
  $TextBoxInputTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $TextBoxInputTextBox.Font = [MyConfig]::Font.Regular
  $TextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $TextBoxInputTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $TextBoxInputTextBox.MaxLength = $MaxLength
  $TextBoxInputTextBox.Multiline = $Multi.IsPresent
  $TextBoxInputTextBox.Name = "TextBoxInputTextBox"
  if ($Multi.IsPresent)
  {
    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
    If ($Items.Count)
    {
      $TextBoxInputTextBox.Lines = $Items
      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items }
    }
    Else
    {
      $TextBoxInputTextBox.Lines = ""
      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = $Items }
    }
    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TextBoxInputGroupBox.ClientSize.Height - ($TextBoxInputTextBox.Top + [MyConfig]::FormSpacer)))
  }
  else
  {
    $TextBoxInputTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None
    if ($Items.Count)
    {
      $TextBoxInputTextBox.Text = $Items[0]
      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $False; "Items" = $Items[0] } 
    }
    else
    {
      $TextBoxInputTextBox.Text = ""
      $TextBoxInputTextBox.Tag = @{ "HintText" = $HintText; "HintEnabled" = $True; "Items" = "" }
    }
    $TextBoxInputTextBox.Size = [System.Drawing.Size]::New(($TextBoxInputGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TextBoxInputTextBox.PreferredHeight)
  }
  $TextBoxInputTextBox.TabIndex = 0
  $TextBoxInputTextBox.TabStop = $True
  $TextBoxInputTextBox.WordWrap = $False
  #endregion $TextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()
  
  #region ******** Function Start-TextBoxInputTextBoxGotFocus ********
  Function Start-TextBoxInputTextBoxGotFocus
  {
  <#
    .SYNOPSIS
      GotFocus Event for the TextBoxInput TextBox Control
    .DESCRIPTION
      GotFocus Event for the TextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-TextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter GotFocus Event for `$TextBoxInputTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ($Sender.Tag.HintEnabled)
    {
      $Sender.Text = ""
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit GotFocus Event for `$TextBoxInputTextBox"
  }
  #endregion ******** Function Start-TextBoxInputTextBoxGotFocus ********
  $TextBoxInputTextBox.add_GotFocus({ Start-TextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-TextBoxInputTextBoxKeyDown ********
  function Start-TextBoxInputTextBoxKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the TextBoxInput TextBox Control
      .DESCRIPTION
        KeyDown Event for the TextBoxInput TextBox Control
      .PARAMETER Sender
        The TextBox Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the TextBox KeyDown Event
      .EXAMPLE
        Start-TextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$TextBoxInputTextBox"

    [MyConfig]::AutoExit = 0
    
    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))
    {
      $TextBoxInputBtmLeftButton.PerformClick()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$TextBoxInputTextBox"
  }
  #endregion ******** Function Start-TextBoxInputTextBoxKeyDown ********
  $TextBoxInputTextBox.add_KeyDown({ Start-TextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-TextBoxInputTextBoxKeyPress ********
  Function Start-TextBoxInputTextBoxKeyPress
  {
    <#
      .SYNOPSIS
        KeyPress Event for the TextBoxInput TextBox Control
      .DESCRIPTION
        KeyPress Event for the TextBoxInput TextBox Control
      .PARAMETER Sender
         The TextBox Control that fired the KeyPress Event
      .PARAMETER EventArg
         The Event Arguments for the TextBox KeyPress Event
      .EXAMPLE
         Start-TextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyPress Event for `$TextBoxInputTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))
    
    Write-Verbose -Message "Exit KeyPress Event for `$TextBoxInputTextBox"
  }
  #endregion ******** Function Start-TextBoxInputTextBoxKeyPress ********
  $TextBoxInputTextBox.add_KeyPress({Start-TextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem})
  
  #region ******** Function Start-TextBoxInputTextBoxKeyUp ********
  Function Start-TextBoxInputTextBoxKeyUp
  {
  <#
    .SYNOPSIS
      KeyUp Event for the TextBoxInput TextBox Control
    .DESCRIPTION
      KeyUp Event for the TextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-TextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyUp Event for `$TextBoxInputTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)
    
    Write-Verbose -Message "Exit KeyUp Event for `$TextBoxInputTextBox"
  }
  #endregion ******** Function Start-TextBoxInputTextBoxKeyUp ********
  $TextBoxInputTextBox.add_KeyUp({ Start-TextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-TextBoxInputTextBoxLostFocus ********
  Function Start-TextBoxInputTextBoxLostFocus
  {
  <#
    .SYNOPSIS
      LostFocus Event for the TextBoxInput TextBox Control
    .DESCRIPTION
      LostFocus Event for the TextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-TextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter LostFocus Event for `$TextBoxInputTextBox"
    
    [MyConfig]::AutoExit = 0
    
    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
    {
      $Sender.Text = $Sender.Tag.HintText
      $Sender.Tag.HintEnabled = $True
      $Sender.Font = [MyConfig]::Font.Hint
      $Sender.ForeColor = [MyConfig]::Colors.TextHint
    }
    Else
    {
      $Sender.Tag.HintEnabled = $False
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }
    
    Write-Verbose -Message "Exit LostFocus Event for `$TextBoxInputTextBox"
  }
  #endregion ******** Function Start-TextBoxInputTextBoxLostFocus ********
  $TextBoxInputTextBox.add_LostFocus({ Start-TextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })
  
  $TextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($TextBoxInputGroupBox.ClientSize.Width, ($TextBoxInputTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  
  #endregion ******** $TextBoxInputGroupBox Controls ********
  
  $TempClientSize = [System.Drawing.Size]::New(($TextBoxInputGroupBox.Right + [MyConfig]::FormSpacer), ($TextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $TextBoxInputPanel Controls ********

  # ************************************************
  # TextBoxInputBtm Panel
  # ************************************************
  #region $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()
  $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()
  $TextBoxInputForm.Controls.Add($TextBoxInputBtmPanel)
  $TextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $TextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $TextBoxInputBtmPanel.Name = "TextBoxInputBtmPanel"
  #endregion $TextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $TextBoxInputBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($TextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmLeftButton)
  $TextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $TextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $TextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $TextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold
  $TextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $TextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $TextBoxInputBtmLeftButton.Name = "TextBoxInputBtmLeftButton"
  $TextBoxInputBtmLeftButton.TabIndex = 1
  $TextBoxInputBtmLeftButton.TabStop = $True
  $TextBoxInputBtmLeftButton.Text = $ButtonLeft
  $TextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmLeftButton.PreferredSize.Height)
  #endregion $TextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-TextBoxInputBtmLeftButtonClick ********
  function Start-TextBoxInputBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the TextBoxInputBtmLeft Button Control
      .DESCRIPTION
        Click Event for the TextBoxInputBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-TextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmLeftButton"

    [MyConfig]::AutoExit = 0

    If ((-not $TextBoxInputTextBox.Tag.HintEnabled) -and ("$($TextBoxInputTextBox.Text.Trim())".Length -gt 0))
    {
      $ChkOutput = $True
      ($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { $ChkOutput = ($ChkOutput -and $PSItem -match $ValidOutput) }
      If ($ChkOutput)
      {
        $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
      }
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($TextBoxInputForm, "Missing Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmLeftButton"
  }
  #endregion ******** Function Start-TextBoxInputBtmLeftButtonClick ********
  $TextBoxInputBtmLeftButton.add_Click({ Start-TextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmMidButton)
  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $TextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $TextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $TextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $TextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold
  $TextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $TextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $TextBoxInputBtmMidButton.Name = "TextBoxInputBtmMidButton"
  $TextBoxInputBtmMidButton.TabIndex = 2
  $TextBoxInputBtmMidButton.TabStop = $True
  $TextBoxInputBtmMidButton.Text = $ButtonMid
  $TextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $TextBoxInputBtmMidButton.PreferredSize.Height)
  #endregion $TextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-TextBoxInputBtmMidButtonClick ********
  function Start-TextBoxInputBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the TextBoxInputBtmMid Button Control
      .DESCRIPTION
        Click Event for the TextBoxInputBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-TextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ($Multi.IsPresent)
    {
      $TextBoxInputTextBox.Lines = $TextBoxInputTextBox.Tag.Items
    }
    else
    {
      $TextBoxInputTextBox.Text = $TextBoxInputTextBox.Tag.Items
    }
    
    $TextBoxInputTextBox.Tag.HintEnabled = ($TextBoxInputTextBox.TextLength -gt 0)
    Start-TextBoxInputTextBoxLostFocus -Sender $TextBoxInputTextBox -EventArg "LostFocus"
    
    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmMidButton"
  }
  #endregion ******** Function Start-TextBoxInputBtmMidButtonClick ********
  $TextBoxInputBtmMidButton.add_Click({ Start-TextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()
  $TextBoxInputBtmPanel.Controls.Add($TextBoxInputBtmRightButton)
  $TextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $TextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $TextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $TextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold
  $TextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $TextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($TextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $TextBoxInputBtmRightButton.Name = "TextBoxInputBtmRightButton"
  $TextBoxInputBtmRightButton.TabIndex = 3
  $TextBoxInputBtmRightButton.TabStop = $True
  $TextBoxInputBtmRightButton.Text = $ButtonRight
  $TextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $TextBoxInputBtmRightButton.PreferredSize.Height)
  #endregion $TextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-TextBoxInputBtmRightButtonClick ********
  function Start-TextBoxInputBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the TextBoxInputBtmRight Button Control
      .DESCRIPTION
        Click Event for the TextBoxInputBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-TextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$TextBoxInputBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here
    
    $TextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$TextBoxInputBtmRightButton"
  }
  #endregion ******** Function Start-TextBoxInputBtmRightButtonClick ********
  $TextBoxInputBtmRightButton.add_Click({ Start-TextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $TextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($TextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($TextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $TextBoxInputBtmPanel Controls ********

  $TextBoxInputForm.ClientSize = [System.Drawing.Size]::New($TextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $TextBoxInputBtmPanel.Height))

  #endregion ******** Controls for TextBoxInput Form ********

  #endregion ******** End **** Get-TextBoxInput **** End ********

  $DialogResult = $TextBoxInputForm.ShowDialog($PILForm)
  If ($Multi.IsPresent)
  {
    If ($NoDuplicates.IsPresent)
    {
      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries) | Select-Object -Unique)
    }
    Else
    {
      $TmpItems = @(($TextBoxInputTextBox.Text -replace "\s*[\n,;]+\s*", ",").Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))
    }
    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpItems)
  }
  Else
  {
    [TextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TextBoxInputTextBox.Text)
  }
  
  $TextBoxInputForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-TextBoxInput"
}
#endregion function Get-TextBoxInput

# ------------------------------
# Get MultiTextBoxInput Function
# ------------------------------
#region MultiTextBoxInput Result Class
Class MultiTextBoxInput
{
  [Bool]$Success
  [Object]$DialogResult
  [System.Collections.Specialized.OrderedDictionary]$OrderedItems

  MultiTextBoxInput ([Bool]$Success, [Object]$DialogResult, [System.Collections.Specialized.OrderedDictionary]$OrderedItems)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.OrderedItems = $OrderedItems
  }
}
#endregion MultiTextBoxInput Result Class

#region function Get-MultiTextBoxInput
Function Get-MultiTextBoxInput ()
{
  <#
    .SYNOPSIS
      Shows Get-MultiTextBoxInput
    .DESCRIPTION
      Shows Get-MultiTextBoxInput
    .PARAMETER Title
      Title of the Get-MultiTextBoxInput Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER ReturnTitle
      Title of Values Group Box
    .PARAMETER OrderedItems
      Ordered List (HashTable) if Names and Values
    .PARAMETER ValidCars
      Valid Inputy Chatacters
    .PARAMETER Width
      With if Get Multi Value Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .PARAMETER AllRequired
      All Values are Required
    .EXAMPLE
      $DialogResult = Get-MultiTextBoxInput -Title "Get Multi Text Input" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message,
    [String]$ReturnTitle,
    [parameter(Mandatory = $True)]
    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,
    [String]$ValidChars = "[\s\w\d\.\-_]",
    [Int]$MaxLength = [Int]::MaxValue,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel",
    [Switch]$AllRequired
  )
  Write-Verbose -Message "Enter Function Get-MultiTextBoxInput"

  #region ******** Begin **** MultiTextBoxInput **** Begin ********

  # ************************************************
  # MultiTextBoxInput Form
  # ************************************************
  #region $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()
  $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()
  $MultiTextBoxInputForm.BackColor = [MyConfig]::Colors.Back
  $MultiTextBoxInputForm.Font = [MyConfig]::Font.Regular
  $MultiTextBoxInputForm.ForeColor = [MyConfig]::Colors.Fore
  $MultiTextBoxInputForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $MultiTextBoxInputForm.Icon = $FCGForm.Icon
  $MultiTextBoxInputForm.KeyPreview = $True
  $MultiTextBoxInputForm.MaximizeBox = $False
  $MultiTextBoxInputForm.MinimizeBox = $False
  $MultiTextBoxInputForm.Name = "MultiTextBoxInputForm"
  $MultiTextBoxInputForm.Owner = $FCGForm
  $MultiTextBoxInputForm.ShowInTaskbar = $False
  $MultiTextBoxInputForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * 25))
  $MultiTextBoxInputForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $MultiTextBoxInputForm.Tag = $AllRequired.IsPresent
  $MultiTextBoxInputForm.Text = $Title
  #endregion $MultiTextBoxInputForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-MultiTextBoxInputFormKeyDown ********
  Function Start-MultiTextBoxInputFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the MultiTextBoxInput Form Control
      .DESCRIPTION
        KeyDown Event for the MultiTextBoxInput Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-MultiTextBoxInputFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $MultiTextBoxInputForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputForm"
  }
  #endregion ******** Function Start-MultiTextBoxInputFormKeyDown ********
  $MultiTextBoxInputForm.add_KeyDown({ Start-MultiTextBoxInputFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-MultiTextBoxInputFormShown ********
  Function Start-MultiTextBoxInputFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the MultiTextBoxInput Form Control
      .DESCRIPTION
        Shown Event for the MultiTextBoxInput Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-MultiTextBoxInputFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$MultiTextBoxInputForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$MultiTextBoxInputForm"
  }
  #endregion ******** Function Start-MultiTextBoxInputFormShown ********
  $MultiTextBoxInputForm.add_Shown({ Start-MultiTextBoxInputFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for MultiTextBoxInput Form ********

  # ************************************************
  # MultiTextBoxInput Panel
  # ************************************************
  #region $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()
  $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()
  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputPanel)
  $MultiTextBoxInputPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MultiTextBoxInputPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $MultiTextBoxInputPanel.Name = "MultiTextBoxInputPanel"
  $MultiTextBoxInputPanel.Text = "MultiTextBoxInputPanel"
  #endregion $MultiTextBoxInputPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $MultiTextBoxInputPanel Controls ********

  If ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputLabel)
    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $MultiTextBoxInputLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $MultiTextBoxInputLabel.Name = "SearchTextMainLabel"
    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $MultiTextBoxInputLabel.Text = $Message
    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($MultiTextBoxInputLabel.Text, [MyConfig]::Font.Regular, $MultiTextBoxInputLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $MultiTextBoxInputLabel.Size = [System.Drawing.Size]::New(($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $MultiTextBoxInputLabel.Bottom
  }
  Else
  {
    $TempBottom = 0
  }

  # ************************************************
  # MultiTextBoxInput GroupBox
  # ************************************************
  #region $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()
  $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $MultiTextBoxInputPanel.Controls.Add($MultiTextBoxInputGroupBox)
  $MultiTextBoxInputGroupBox.BackColor = [MyConfig]::Colors.Back
  $MultiTextBoxInputGroupBox.Font = [MyConfig]::Font.Bold
  $MultiTextBoxInputGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $MultiTextBoxInputGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $MultiTextBoxInputGroupBox.Name = "MultiTextBoxInputGroupBox"
  $MultiTextBoxInputGroupBox.Text = $ReturnTitle
  $MultiTextBoxInputGroupBox.Width = ($MultiTextBoxInputPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))
  #endregion $MultiTextBoxInputGroupBox = [System.Windows.Forms.GroupBox]::New()

  $TmpLabelWidth = 0
  $Count = 0
  ForEach ($Key In $OrderedItems.Keys)
  {
    #region $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()
    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputLabel)
    $MultiTextBoxInputLabel.AutoSize = $True
    $MultiTextBoxInputLabel.BackColor = [MyConfig]::Colors.Back
    $MultiTextBoxInputLabel.Font = [MyConfig]::Font.Regular
    $MultiTextBoxInputLabel.ForeColor = [MyConfig]::Colors.Fore
    $MultiTextBoxInputLabel.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + (($MultiTextBoxInputLabel.PreferredHeight + [MyConfig]::FormSpacer) * $Count)))
    $MultiTextBoxInputLabel.Name = "$($Key)Label"
    $MultiTextBoxInputLabel.Tag = $Null
    $MultiTextBoxInputLabel.Text = "$($Key):"
    $MultiTextBoxInputLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight
    #endregion $MultiTextBoxInputLabel = [System.Windows.Forms.Label]::New()

    $TmpLabelWidth = [Math]::Max($TmpLabelWidth, $MultiTextBoxInputLabel.Width)
    $Count += 1
  }

  #region ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********
  Function Start-MultiTextBoxInputTextBoxGotFocus
  {
  <#
    .SYNOPSIS
      GotFocus Event for the MultiTextBoxInput TextBox Control
    .DESCRIPTION
      GotFocus Event for the MultiTextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-MultiTextBoxInputTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter GotFocus Event for `$MultiTextBoxInputTextBox"

    [MyConfig]::AutoExit = 0

    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ($Sender.Tag.HintEnabled)
    {
      $Sender.Text = ""
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }

    Write-Verbose -Message "Exit GotFocus Event for `$MultiTextBoxInputTextBox"
  }
  #endregion ******** Function Start-MultiTextBoxInputTextBoxGotFocus ********

  #region ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********
  function Start-MultiTextBoxInputTextBoxKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the GetMultiValueMain TextBox Control
      .DESCRIPTION
        KeyDown Event for the GetMultiValueMain TextBox Control
      .PARAMETER Sender
        The TextBox Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the TextBox KeyDown Event
      .EXAMPLE
        Start-MultiTextBoxInputTextBoxKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$MultiTextBoxInputTextBox"

    [MyConfig]::AutoExit = 0

    if ((-not $Sender.Multiline) -and ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))
    {
      $MultiTextBoxInputBtmLeftButton.PerformClick()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$MultiTextBoxInputTextBox"
  }
  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyDown ********

  #region ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********
  Function Start-MultiTextBoxInputTextBoxKeyPress
  {
    <#
      .SYNOPSIS
        KeyPress Event for the MultiTextBoxInput TextBox Control
      .DESCRIPTION
        KeyPress Event for the MultiTextBoxInput TextBox Control
      .PARAMETER Sender
         The TextBox Control that fired the KeyPress Event
      .PARAMETER EventArg
         The Event Arguments for the TextBox KeyPress Event
      .EXAMPLE
         Start-MultiTextBoxInputTextBoxKeyPress -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyPress Event for `$MultiTextBoxInputTextBox"

    [MyConfig]::AutoExit = 0

    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))

    Write-Verbose -Message "Exit KeyPress Event for `$MultiTextBoxInputTextBox"
  }
  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyPress ********

  #region ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********
  Function Start-MultiTextBoxInputTextBoxKeyUp
  {
  <#
    .SYNOPSIS
      KeyUp Event for the MultiTextBoxInput TextBox Control
    .DESCRIPTION
      KeyUp Event for the MultiTextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-MultiTextBoxInputTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyUp Event for `$MultiTextBoxInputTextBox"

    [MyConfig]::AutoExit = 0

    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)

    Write-Verbose -Message "Exit KeyUp Event for `$MultiTextBoxInputTextBox"
  }
  #endregion ******** Function Start-MultiTextBoxInputTextBoxKeyUp ********

  #region ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********
  Function Start-MultiTextBoxInputTextBoxLostFocus
  {
  <#
    .SYNOPSIS
      LostFocus Event for the MultiTextBoxInput TextBox Control
    .DESCRIPTION
      LostFocus Event for the MultiTextBoxInput TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-MultiTextBoxInputTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.TextBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter LostFocus Event for `$MultiTextBoxInputTextBox"

    [MyConfig]::AutoExit = 0

    # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
    If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
    {
      $Sender.Text = $Sender.Tag.HintText
      $Sender.Tag.HintEnabled = $True
      $Sender.Font = [MyConfig]::Font.Hint
      $Sender.ForeColor = [MyConfig]::Colors.TextHint
    }
    Else
    {
      $Sender.Tag.HintEnabled = $False
      $Sender.Font = [MyConfig]::Font.Regular
      $Sender.ForeColor = [MyConfig]::Colors.TextFore
    }

    Write-Verbose -Message "Exit LostFocus Event for `$MultiTextBoxInputTextBox"
  }
  #endregion ******** Function Start-MultiTextBoxInputTextBoxLostFocus ********

  ForEach ($Key In $OrderedItems.Keys)
  {
    $TmpLabel = $MultiTextBoxInputGroupBox.Controls["$($Key)Label"]
    $TmpLabel.AutoSize = $False
    $TmpLabel.Size = [System.Drawing.Size]::New($TmpLabelWidth, $TmpLabel.PreferredHeight)

    #region $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()
    $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()
    $MultiTextBoxInputGroupBox.Controls.Add($MultiTextBoxInputTextBox)
    $MultiTextBoxInputTextBox.AutoSize = $False
    $MultiTextBoxInputTextBox.BackColor = [MyConfig]::Colors.TextBack
    $MultiTextBoxInputTextBox.Font = [MyConfig]::Font.Regular
    $MultiTextBoxInputTextBox.ForeColor = [MyConfig]::Colors.TextFore
    $MultiTextBoxInputTextBox.Location = [System.Drawing.Size]::New(($TmpLabel.Right + [MyConfig]::FormSpacer), $TmpLabel.Top)
    $MultiTextBoxInputTextBox.MaxLength = $MaxLength
    $MultiTextBoxInputTextBox.Name = "$($Key)"
    $MultiTextBoxInputTextBox.TabStop = $True
    $MultiTextBoxInputTextBox.Text = $OrderedItems[$Key]
    $MultiTextBoxInputTextBox.Tag = @{ "HintText" = "Enter Value for '$($Key)'"; "HintEnabled" = ($MultiTextBoxInputTextBox.TextLength -eq 0); "Value" = $OrderedItems[$Key] }
    $MultiTextBoxInputTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left
    $MultiTextBoxInputTextBox.Size = [System.Drawing.Size]::New(($MultiTextBoxInputGroupBox.ClientSize.Width - ($TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), $TmpLabel.Height)
    #endregion $MultiTextBoxInputTextBox = [System.Windows.Forms.TextBox]::New()

    $MultiTextBoxInputTextBox.add_GotFocus({ Start-MultiTextBoxInputTextBoxGotFocus -Sender $This -EventArg $PSItem})
    $MultiTextBoxInputTextBox.add_KeyDown({ Start-MultiTextBoxInputTextBoxKeyDown -Sender $This -EventArg $PSItem })
    $MultiTextBoxInputTextBox.add_KeyPress({ Start-MultiTextBoxInputTextBoxKeyPress -Sender $This -EventArg $PSItem })
    $MultiTextBoxInputTextBox.add_KeyUp({ Start-MultiTextBoxInputTextBoxKeyUp -Sender $This -EventArg $PSItem })
    $MultiTextBoxInputTextBox.add_LostFocus({ Start-MultiTextBoxInputTextBoxLostFocus -Sender $This -EventArg $PSItem })
    Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputTextBox -EventArg $EventArg
  }

  $MultiTextBoxInputGroupBox.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputGroupBox.ClientSize.Width, (($MultiTextBoxInputGroupBox.Controls[$MultiTextBoxInputGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))

  $TempClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputTextBox.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $MultiTextBoxInputPanel Controls ********

  # ************************************************
  # MultiTextBoxInputBtm Panel
  # ************************************************
  #region $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()
  $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()
  $MultiTextBoxInputForm.Controls.Add($MultiTextBoxInputBtmPanel)
  $MultiTextBoxInputBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MultiTextBoxInputBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $MultiTextBoxInputBtmPanel.Name = "MultiTextBoxInputBtmPanel"
  $MultiTextBoxInputBtmPanel.Text = "MultiTextBoxInputBtmPanel"
  #endregion $MultiTextBoxInputBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $MultiTextBoxInputBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($MultiTextBoxInputBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmLeftButton)
  $MultiTextBoxInputBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $MultiTextBoxInputBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MultiTextBoxInputBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MultiTextBoxInputBtmLeftButton.Font = [MyConfig]::Font.Bold
  $MultiTextBoxInputBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MultiTextBoxInputBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $MultiTextBoxInputBtmLeftButton.Name = "MultiTextBoxInputBtmLeftButton"
  $MultiTextBoxInputBtmLeftButton.TabIndex = 1
  $MultiTextBoxInputBtmLeftButton.TabStop = $True
  $MultiTextBoxInputBtmLeftButton.Text = $ButtonLeft
  $MultiTextBoxInputBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmLeftButton.PreferredSize.Height)
  #endregion $MultiTextBoxInputBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********
  Function Start-MultiTextBoxInputBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the MultiTextBoxInputBtmLeft Button Control
      .DESCRIPTION
        Click Event for the MultiTextBoxInputBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-MultiTextBoxInputBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmLeftButton"

    [MyConfig]::AutoExit = 0

    $TmpValidCheck = $MultiTextBoxInputForm.Tag
    ForEach ($Key In @($OrderedItems.Keys))
    {
      $TmpItemValue = "$($MultiTextBoxInputGroupBox.Controls[$Key].Text)".Trim()
      $ChkItemValue = (-not (([String]::IsNullOrEmpty($TmpItemValue) -or $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled)))
      if ($ChkItemValue)
      {
        $OrderedItems[$Key] = $TmpItemValue
      }
      else
      {
        $OrderedItems[$Key] = $Null
      }

      if ($MultiTextBoxInputForm.Tag)
      {
        $TmpValidCheck = $ChkItemValue -and $TmpValidCheck
      }
      else
      {
        $TmpValidCheck = $ChkItemValue -or $TmpValidCheck
      }
    }

    If ($TmpValidCheck)
    {
      $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($MultiTextBoxInputForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmLeftButton"
  }
  #endregion ******** Function Start-MultiTextBoxInputBtmLeftButtonClick ********
  $MultiTextBoxInputBtmLeftButton.add_Click({ Start-MultiTextBoxInputBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmMidButton)
  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $MultiTextBoxInputBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $MultiTextBoxInputBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MultiTextBoxInputBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MultiTextBoxInputBtmMidButton.Font = [MyConfig]::Font.Bold
  $MultiTextBoxInputBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MultiTextBoxInputBtmMidButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $MultiTextBoxInputBtmMidButton.Name = "MultiTextBoxInputBtmMidButton"
  $MultiTextBoxInputBtmMidButton.TabIndex = 2
  $MultiTextBoxInputBtmMidButton.TabStop = $True
  $MultiTextBoxInputBtmMidButton.Text = $ButtonMid
  $MultiTextBoxInputBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $MultiTextBoxInputBtmMidButton.PreferredSize.Height)
  #endregion $MultiTextBoxInputBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********
  Function Start-MultiTextBoxInputBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the MultiTextBoxInputBtmMid Button Control
      .DESCRIPTION
        Click Event for the MultiTextBoxInputBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-MultiTextBoxInputBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmMidButton"

    [MyConfig]::AutoExit = 0

    ForEach ($Key In @($OrderedItems.Keys))
    {
      $MultiTextBoxInputGroupBox.Controls[$Key].Text = $MultiTextBoxInputGroupBox.Controls[$Key].Tag.Value
      $MultiTextBoxInputGroupBox.Controls[$Key].Tag.HintEnabled = ($MultiTextBoxInputGroupBox.TextLength -eq 0)
      Start-MultiTextBoxInputTextBoxLostFocus -Sender $MultiTextBoxInputGroupBox.Controls[$Key] -EventArg $EventArg
    }

    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmMidButton"
  }
  #endregion ******** Function Start-MultiTextBoxInputBtmMidButtonClick ********
  $MultiTextBoxInputBtmMidButton.add_Click({ Start-MultiTextBoxInputBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()
  $MultiTextBoxInputBtmPanel.Controls.Add($MultiTextBoxInputBtmRightButton)
  $MultiTextBoxInputBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $MultiTextBoxInputBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MultiTextBoxInputBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MultiTextBoxInputBtmRightButton.Font = [MyConfig]::Font.Bold
  $MultiTextBoxInputBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MultiTextBoxInputBtmRightButton.Location = [System.Drawing.Point]::New(($MultiTextBoxInputBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $MultiTextBoxInputBtmRightButton.Name = "MultiTextBoxInputBtmRightButton"
  $MultiTextBoxInputBtmRightButton.TabIndex = 3
  $MultiTextBoxInputBtmRightButton.TabStop = $True
  $MultiTextBoxInputBtmRightButton.Text = $ButtonRight
  $MultiTextBoxInputBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $MultiTextBoxInputBtmRightButton.PreferredSize.Height)
  #endregion $MultiTextBoxInputBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********
  Function Start-MultiTextBoxInputBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the MultiTextBoxInputBtmRight Button Control
      .DESCRIPTION
        Click Event for the MultiTextBoxInputBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-MultiTextBoxInputBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MultiTextBoxInputBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $MultiTextBoxInputForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$MultiTextBoxInputBtmRightButton"
  }
  #endregion ******** Function Start-MultiTextBoxInputBtmRightButtonClick ********
  $MultiTextBoxInputBtmRightButton.add_Click({ Start-MultiTextBoxInputBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $MultiTextBoxInputBtmPanel.ClientSize = [System.Drawing.Size]::New(($MultiTextBoxInputBtmRightButton.Right + [MyConfig]::FormSpacer), ($MultiTextBoxInputBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $MultiTextBoxInputBtmPanel Controls ********

  $MultiTextBoxInputForm.ClientSize = [System.Drawing.Size]::New($MultiTextBoxInputForm.ClientSize.Width, ($TempClientSize.Height + $MultiTextBoxInputBtmPanel.Height))

  #endregion ******** Controls for MultiTextBoxInput Form ********

  #endregion ******** End **** MultiTextBoxInput **** End ********

  $DialogResult = $MultiTextBoxInputForm.ShowDialog($FCGForm)
  [MultiTextBoxInput]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $OrderedItems)

  $MultiTextBoxInputForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-MultiTextBoxInput"
}
#endregion function Get-MultiTextBoxInput

# ------------------------------
# Get RadioButtonOption Function
# ------------------------------
#region RadioButtonOption Result Class
Class RadioButtonOption
{
  [Bool]$Success
  [Object]$DialogResult
  [HashTable]$Item = @{}

  RadioButtonOption ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }

  RadioButtonOption ([Bool]$Success, [Object]$DialogResult, [HashTable]$Item)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
  }
}
#endregion RadioButtonOption Result Class

#region function Get-RadioButtonOption
Function Get-RadioButtonOption ()
{
  <#
    .SYNOPSIS
      Shows Get-RadioButtonOption
    .DESCRIPTION
      Shows Get-RadioButtonOption
    .PARAMETER Title
      Title of the Get-RadioButtonOption Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Selected
      Selected RadioButtonOption
    .PARAMETER OrderedItems
      Ordered List (HashTable) if Names and Values
    .PARAMETER Width
      With if Get Multi Value Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4"}
      $DialogResult = Get-RadioButtonOption -Title "RadioButton Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected "4"
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [Object]$Selected = "",
    [parameter(Mandatory = $True)]
    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Get-RadioButtonOption"

  #region ******** Begin **** RadioButtonOption **** Begin ********

  # ************************************************
  # RadioButtonOption Form
  # ************************************************
  #region $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()
  $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()
  $RadioButtonOptionForm.BackColor = [MyConfig]::Colors.Back
  $RadioButtonOptionForm.Font = [MyConfig]::Font.Regular
  $RadioButtonOptionForm.ForeColor = [MyConfig]::Colors.Fore
  $RadioButtonOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $RadioButtonOptionForm.Icon = $FCGForm.Icon
  $RadioButtonOptionForm.KeyPreview = $True
  $RadioButtonOptionForm.MaximizeBox = $False
  $RadioButtonOptionForm.MinimizeBox = $False
  $RadioButtonOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $RadioButtonOptionForm.Name = "RadioButtonOptionForm"
  $RadioButtonOptionForm.Owner = $FCGForm
  $RadioButtonOptionForm.ShowInTaskbar = $False
  $RadioButtonOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $RadioButtonOptionForm.Text = $Title
  #endregion $RadioButtonOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-RadioButtonOptionFormKeyDown ********
  Function Start-RadioButtonOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the RadioButtonOption Form Control
      .DESCRIPTION
        KeyDown Event for the RadioButtonOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-RadioButtonOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$RadioButtonOptionForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $RadioButtonOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$RadioButtonOptionForm"
  }
  #endregion ******** Function Start-RadioButtonOptionFormKeyDown ********
  $RadioButtonOptionForm.add_KeyDown({ Start-RadioButtonOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-RadioButtonOptionFormShown ********
  Function Start-RadioButtonOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the RadioButtonOption Form Control
      .DESCRIPTION
        Shown Event for the RadioButtonOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-RadioButtonOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$RadioButtonOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Write-Verbose -Message "Exit Shown Event for `$RadioButtonOptionForm"
  }
  #endregion ******** Function Start-RadioButtonOptionFormShown ********
  $RadioButtonOptionForm.add_Shown({ Start-RadioButtonOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for RadioButtonOption Form ********

  # ************************************************
  # RadioButtonOption Panel
  # ************************************************
  #region $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()
  $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()
  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionPanel)
  $RadioButtonOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $RadioButtonOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $RadioButtonOptionPanel.Name = "RadioButtonOptionPanel"
  #$RadioButtonOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)
  #endregion $RadioButtonOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $RadioButtonOptionPanel Controls ********

  If ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()
    $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()
    $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionLabel)
    $RadioButtonOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $RadioButtonOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $RadioButtonOptionLabel.Name = "RadioButtonOptionLabel"
    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $RadioButtonOptionLabel.Text = $Message
    $RadioButtonOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $RadioButtonOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($RadioButtonOptionLabel.Text, [MyConfig]::Font.Regular, $RadioButtonOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $RadioButtonOptionLabel.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $RadioButtonOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  Else
  {
    $TempBottom = [MyConfig]::FormSpacer
  }

  # ************************************************
  # RadioButtonOption GroupBox
  # ************************************************
  #region $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $RadioButtonOptionPanel.Controls.Add($RadioButtonOptionGroupBox)
  $RadioButtonOptionGroupBox.BackColor = [MyConfig]::Colors.Back
  $RadioButtonOptionGroupBox.Font = [MyConfig]::Font.Regular
  $RadioButtonOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $RadioButtonOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $RadioButtonOptionGroupBox.Name = "RadioButtonOptionGroupBox"
  $RadioButtonOptionGroupBox.Size = [System.Drawing.Size]::New(($RadioButtonOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)
  $RadioButtonOptionGroupBox.Text = $Null
  #endregion $RadioButtonOptionGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $RadioButtonOptionGroupBox Controls ********

  $RadioButtonOptionNumber = 0
  $GroupBottom = [MyConfig]::Font.Height
  ForEach ($Key In $OrderedItems.Keys)
  {
    #region $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()
    $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()
    $RadioButtonOptionGroupBox.Controls.Add($RadioButtonOptionRadioButton)
    #$RadioButtonOptionRadioButton.AutoCheck = $True
    $RadioButtonOptionRadioButton.AutoSize = $True
    $RadioButtonOptionRadioButton.BackColor = [MyConfig]::Colors.Back
    $RadioButtonOptionRadioButton.Checked = ($OrderedItems[$Key] -eq $Selected)
    $RadioButtonOptionRadioButton.Font = [MyConfig]::Font.Regular
    $RadioButtonOptionRadioButton.ForeColor = [MyConfig]::Colors.LabelFore
    $RadioButtonOptionRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)
    $RadioButtonOptionRadioButton.Name = "RadioChoice$($RadioButtonOptionNumber)"
    $RadioButtonOptionRadioButton.Tag = $OrderedItems[$Key]
    $RadioButtonOptionRadioButton.Text = $Key
    #endregion $RadioButtonOptionRadioButton = [System.Windows.Forms.RadioButton]::New()

    $GroupBottom = ($RadioButtonOptionRadioButton.Bottom + [MyConfig]::FormSpacer)
    $RadioButtonOptionNumber += 1
  }

  $RadioButtonOptionGroupBox.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))

  #endregion ******** $RadioButtonOptionGroupBox Controls ********

  #endregion ******** $RadioButtonOptionPanel Controls ********

  # ************************************************
  # RadioButtonOptionBtm Panel
  # ************************************************
  #region $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $RadioButtonOptionForm.Controls.Add($RadioButtonOptionBtmPanel)
  $RadioButtonOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $RadioButtonOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $RadioButtonOptionBtmPanel.Name = "RadioButtonOptionBtmPanel"
  #endregion $RadioButtonOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $RadioButtonOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($RadioButtonOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmLeftButton)
  $RadioButtonOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $RadioButtonOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $RadioButtonOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $RadioButtonOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $RadioButtonOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $RadioButtonOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $RadioButtonOptionBtmLeftButton.Name = "RadioButtonOptionBtmLeftButton"
  $RadioButtonOptionBtmLeftButton.TabIndex = 1
  $RadioButtonOptionBtmLeftButton.TabStop = $True
  $RadioButtonOptionBtmLeftButton.Text = $ButtonLeft
  $RadioButtonOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmLeftButton.PreferredSize.Height)
  #endregion $RadioButtonOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********
  Function Start-RadioButtonOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the RadioButtonOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the RadioButtonOptionBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-RadioButtonOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    If (@($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "RadioButton") -and $PSItem.Checked }).Count -eq 1)
    {
      $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    Else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($RadioButtonOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmLeftButton"
  }
  #endregion ******** Function Start-RadioButtonOptionBtmLeftButtonClick ********
  $RadioButtonOptionBtmLeftButton.add_Click({ Start-RadioButtonOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmMidButton)
  $RadioButtonOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $RadioButtonOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $RadioButtonOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $RadioButtonOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $RadioButtonOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $RadioButtonOptionBtmMidButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $RadioButtonOptionBtmMidButton.Name = "RadioButtonOptionBtmMidButton"
  $RadioButtonOptionBtmMidButton.TabIndex = 2
  $RadioButtonOptionBtmMidButton.TabStop = $True
  $RadioButtonOptionBtmMidButton.Text = $ButtonMid
  $RadioButtonOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $RadioButtonOptionBtmMidButton.PreferredSize.Height)
  #endregion $RadioButtonOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-RadioButtonOptionBtmMidButtonClick ********
  Function Start-RadioButtonOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the RadioButtonOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the RadioButtonOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-RadioButtonOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    ForEach ($RadioButton In @($RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))
    {
      $RadioButton.Checked = ($RadioButton.Tag -eq $Selected)
    }

    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmMidButton"
  }
  #endregion ******** Function Start-RadioButtonOptionBtmMidButtonClick ********
  $RadioButtonOptionBtmMidButton.add_Click({ Start-RadioButtonOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $RadioButtonOptionBtmPanel.Controls.Add($RadioButtonOptionBtmRightButton)
  $RadioButtonOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $RadioButtonOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $RadioButtonOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $RadioButtonOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $RadioButtonOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $RadioButtonOptionBtmRightButton.Location = [System.Drawing.Point]::New(($RadioButtonOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $RadioButtonOptionBtmRightButton.Name = "RadioButtonOptionBtmRightButton"
  $RadioButtonOptionBtmRightButton.TabIndex = 3
  $RadioButtonOptionBtmRightButton.TabStop = $True
  $RadioButtonOptionBtmRightButton.Text = $ButtonRight
  $RadioButtonOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $RadioButtonOptionBtmRightButton.PreferredSize.Height)
  #endregion $RadioButtonOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-RadioButtonOptionBtmRightButtonClick ********
  Function Start-RadioButtonOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the RadioButtonOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the RadioButtonOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-RadioButtonOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$RadioButtonOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $RadioButtonOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$RadioButtonOptionBtmRightButton"
  }
  #endregion ******** Function Start-RadioButtonOptionBtmRightButtonClick ********
  $RadioButtonOptionBtmRightButton.add_Click({ Start-RadioButtonOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $RadioButtonOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($RadioButtonOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($RadioButtonOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $RadioButtonOptionBtmPanel Controls ********

  $RadioButtonOptionForm.ClientSize = [System.Drawing.Size]::New($RadioButtonOptionForm.ClientSize.Width, ($RadioButtonOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $RadioButtonOptionBtmPanel.Height))

  #endregion ******** Controls for RadioButtonOption Form ********

  #endregion ******** End **** RadioButtonOption **** End ********

  $DialogResult = $RadioButtonOptionForm.ShowDialog($FCGForm)
  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $TempItem = @{}
    $RadioButtonOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItem.Add($PSItem.Text, $PSItem.Tag) }
    [RadioButtonOption]::New($True, $DialogResult, $TempItem)
  }
  Else
  {
    [RadioButtonOption]::New($False, $DialogResult)
  }

  $RadioButtonOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-RadioButtonOption"
}
#endregion function Get-RadioButtonOption

# ------------------------------
# Get CheckBoxOption Function
# ------------------------------
#region CheckBoxOption Result Class
Class CheckBoxOption
{
  [Bool]$Success
  [Object]$DialogResult
  [HashTable]$Items = @{}

  CheckBoxOption ([Bool]$Success, [Object]$DialogResult)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
  }

  CheckBoxOption ([Bool]$Success, [Object]$DialogResult, [HashTable]$Items)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Items = $Items
  }
}
#endregion CheckBoxOption Result Class

#region function Get-CheckBoxOption
Function Get-CheckBoxOption ()
{
  <#
    .SYNOPSIS
      Shows Get-CheckBoxOption
    .DESCRIPTION
      Shows Get-CheckBoxOption
    .PARAMETER Title
      Title of the Get-MultiTextBoxInput Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Selected
      Selected Items
    .PARAMETER OrderedItems
      Ordered List (HashTable) if Names and Values
    .PARAMETER Width
      With if Get Multi Value Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4" }
      $DialogResult = Get-CheckBoxOption -Title "Get CheckBox Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected @("1", "4") -Required
      if ($DialogResult.Success)
      {
        # Success
      }
      else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [Object[]]$Selected = @(),
    [parameter(Mandatory = $True)]
    [System.Collections.Specialized.OrderedDictionary]$OrderedItems,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel",
    [Switch]$Required
  )
  Write-Verbose -Message "Enter Function Get-CheckBoxOption"

  #region ******** Begin **** CheckBoxOption **** Begin ********

  # ************************************************
  # CheckBoxOption Form
  # ************************************************
  #region $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()
  $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()
  $CheckBoxOptionForm.BackColor = [MyConfig]::Colors.Back
  $CheckBoxOptionForm.Font = [MyConfig]::Font.Regular
  $CheckBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore
  $CheckBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $CheckBoxOptionForm.Icon = $FCGForm.Icon
  $CheckBoxOptionForm.KeyPreview = $True
  $CheckBoxOptionForm.MaximizeBox = $False
  $CheckBoxOptionForm.MinimizeBox = $False
  $CheckBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $CheckBoxOptionForm.Name = "CheckBoxOptionForm"
  $CheckBoxOptionForm.Owner = $FCGForm
  $CheckBoxOptionForm.ShowInTaskbar = $False
  $CheckBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $CheckBoxOptionForm.Text = $Title
  #endregion $CheckBoxOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-CheckBoxOptionFormKeyDown ********
  Function Start-CheckBoxOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the CheckBoxOption Form Control
      .DESCRIPTION
        KeyDown Event for the CheckBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-CheckBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$CheckBoxOptionForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $CheckBoxOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$CheckBoxOptionForm"
  }
  #endregion ******** Function Start-CheckBoxOptionFormKeyDown ********
  $CheckBoxOptionForm.add_KeyDown({ Start-CheckBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-CheckBoxOptionFormShown ********
  Function Start-CheckBoxOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the CheckBoxOption Form Control
      .DESCRIPTION
        Shown Event for the CheckBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-CheckBoxOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$CheckBoxOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Write-Verbose -Message "Exit Shown Event for `$CheckBoxOptionForm"
  }
  #endregion ******** Function Start-CheckBoxOptionFormShown ********
  $CheckBoxOptionForm.add_Shown({ Start-CheckBoxOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for CheckBoxOption Form ********

  # ************************************************
  # CheckBoxOption Panel
  # ************************************************
  #region $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionPanel)
  $CheckBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $CheckBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $CheckBoxOptionPanel.Name = "CheckBoxOptionPanel"
  #$CheckBoxOptionPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)
  #endregion $CheckBoxOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $CheckBoxOptionPanel Controls ********

  If ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionLabel)
    $CheckBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $CheckBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $CheckBoxOptionLabel.Name = "CheckBoxOptionLabel"
    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $CheckBoxOptionLabel.Text = $Message
    $CheckBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $CheckBoxOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $CheckBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $CheckBoxOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  Else
  {
    $TempBottom = [MyConfig]::FormSpacer
  }

  # ************************************************
  # CheckBoxOption GroupBox
  # ************************************************
  #region $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $CheckBoxOptionPanel.Controls.Add($CheckBoxOptionGroupBox)
  $CheckBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back
  $CheckBoxOptionGroupBox.Font = [MyConfig]::Font.Regular
  $CheckBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $CheckBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $CheckBoxOptionGroupBox.Name = "CheckBoxOptionGroupBox"
  $CheckBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)
  $CheckBoxOptionGroupBox.Text = $Null
  #endregion $CheckBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $CheckBoxOptionGroupBox Controls ********

  $CheckBoxOptionNumber = 0
  $GroupBottom = [MyConfig]::Font.Height
  ForEach ($Key In $OrderedItems.Keys)
  {
    #region $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()
    $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()
    $CheckBoxOptionGroupBox.Controls.Add($CheckBoxOptionCheckBox)
    #$CheckBoxOptionCheckBox.AutoCheck = $True
    $CheckBoxOptionCheckBox.AutoSize = $True
    $CheckBoxOptionCheckBox.BackColor = [MyConfig]::Colors.Back
    $CheckBoxOptionCheckBox.Checked = ($OrderedItems[$Key] -in $Selected)
    $CheckBoxOptionCheckBox.Font = [MyConfig]::Font.Regular
    $CheckBoxOptionCheckBox.ForeColor = [MyConfig]::Colors.LabelFore
    $CheckBoxOptionCheckBox.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), $GroupBottom)
    $CheckBoxOptionCheckBox.Name = "CheckBox$($CheckBoxOptionNumber)"
    $CheckBoxOptionCheckBox.Tag = $OrderedItems[$Key]
    $CheckBoxOptionCheckBox.Text = $Key
    #endregion $CheckBoxOptionCheckBox = [System.Windows.Forms.CheckBox]::New()

    $GroupBottom = ($CheckBoxOptionCheckBox.Bottom + [MyConfig]::FormSpacer)
    $CheckBoxOptionNumber += 1
  }

  $CheckBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))

  #endregion ******** $CheckBoxOptionGroupBox Controls ********

  #endregion ******** $CheckBoxOptionPanel Controls ********

  # ************************************************
  # CheckBoxOptionBtm Panel
  # ************************************************
  #region $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $CheckBoxOptionForm.Controls.Add($CheckBoxOptionBtmPanel)
  $CheckBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $CheckBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $CheckBoxOptionBtmPanel.Name = "CheckBoxOptionBtmPanel"
  #endregion $CheckBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $CheckBoxOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($CheckBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmLeftButton)
  $CheckBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $CheckBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $CheckBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $CheckBoxOptionBtmLeftButton.Name = "CheckBoxOptionBtmLeftButton"
  $CheckBoxOptionBtmLeftButton.TabIndex = 1
  $CheckBoxOptionBtmLeftButton.TabStop = $True
  $CheckBoxOptionBtmLeftButton.Text = $ButtonLeft
  $CheckBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmLeftButton.PreferredSize.Height)
  #endregion $CheckBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********
  Function Start-CheckBoxOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckBoxOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the CheckBoxOptionBtmLeft Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-CheckBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ($Required.IsPresent)
    {
      If (@($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { ($PSItem.GetType().Name -eq "CheckBox") -and $PSItem.Checked }).Count -gt 0)
      {
        $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($CheckBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
      }
    }
    else
    {
      $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }

    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmLeftButton"
  }
  #endregion ******** Function Start-CheckBoxOptionBtmLeftButtonClick ********
  $CheckBoxOptionBtmLeftButton.add_Click({ Start-CheckBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmMidButton)
  $CheckBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $CheckBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $CheckBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $CheckBoxOptionBtmMidButton.Name = "CheckBoxOptionBtmMidButton"
  $CheckBoxOptionBtmMidButton.TabIndex = 2
  $CheckBoxOptionBtmMidButton.TabStop = $True
  $CheckBoxOptionBtmMidButton.Text = $ButtonMid
  $CheckBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckBoxOptionBtmMidButton.PreferredSize.Height)
  #endregion $CheckBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckBoxOptionBtmMidButtonClick ********
  Function Start-CheckBoxOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckBoxOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the CheckBoxOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-CheckBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    ForEach ($CheckBox In @($CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "RadioChoice*" }))
    {
      $CheckBox.Checked = ($CheckBox.Tag -in $Selected)
    }

    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmMidButton"
  }
  #endregion ******** Function Start-CheckBoxOptionBtmMidButtonClick ********
  $CheckBoxOptionBtmMidButton.add_Click({ Start-CheckBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $CheckBoxOptionBtmPanel.Controls.Add($CheckBoxOptionBtmRightButton)
  $CheckBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $CheckBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $CheckBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $CheckBoxOptionBtmRightButton.Name = "CheckBoxOptionBtmRightButton"
  $CheckBoxOptionBtmRightButton.TabIndex = 3
  $CheckBoxOptionBtmRightButton.TabStop = $True
  $CheckBoxOptionBtmRightButton.Text = $ButtonRight
  $CheckBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckBoxOptionBtmRightButton.PreferredSize.Height)
  #endregion $CheckBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckBoxOptionBtmRightButtonClick ********
  Function Start-CheckBoxOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckBoxOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the CheckBoxOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-CheckBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By CDUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckBoxOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $CheckBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$CheckBoxOptionBtmRightButton"
  }
  #endregion ******** Function Start-CheckBoxOptionBtmRightButtonClick ********
  $CheckBoxOptionBtmRightButton.add_Click({ Start-CheckBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $CheckBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $CheckBoxOptionBtmPanel Controls ********

  $CheckBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckBoxOptionForm.ClientSize.Width, ($CheckBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer + $CheckBoxOptionBtmPanel.Height))

  #endregion ******** Controls for CheckBoxOption Form ********

  #endregion ******** End **** CheckBoxOption **** End ********

  $DialogResult = $CheckBoxOptionForm.ShowDialog($FCGForm)
  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $TempItems = @{}
    $CheckBoxOptionGroupBox.Controls | Where-Object -FilterScript { $PSItem.Name -Like "CheckBox*" -and $PSItem.Checked } | ForEach-Object -Process { $TempItems.Add($PSItem.Text, $PSItem.Tag) }
    [CheckBoxOption]::New($True, $DialogResult, $TempItems)
  }
  Else
  {
    [CheckBoxOption]::New($False, $DialogResult)
  }

  $CheckBoxOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-CheckBoxOption"
}
#endregion function Get-CheckBoxOption

# ------------------------------
# Get ListBoxOption Function
# ------------------------------
#region ListBoxOption Result Class
Class ListBoxOption
{
  [Bool]$Success
  [Object]$DialogResult
  [Object[]]$Items

  ListBoxOption ([Bool]$Success, [Object]$DialogResult, [Object[]]$Items)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Items = $Items
  }
}
#endregion ListBoxOption Result Class

#region function Get-ListBoxOption
function Get-ListBoxOption ()
{
  <#
    .SYNOPSIS
      Shows Get-ListBoxOption
    .DESCRIPTION
      Shows Get-ListBoxOption
    .PARAMETER Title
      Title of the Get-MultiTextBoxInput Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Items
      Items to show in the ListView
    .PARAMETER Sorted
      Sort ListView
    .PARAMETER Multi
      Allow Selecting Multiple Items
    .PARAMETER DisplayMember
      Name of the Property to Display in the ListBox
    .PARAMETER ValueMember
      Name of the Property for the Value
    .PARAMETER Selected
      Default Selected ListBox Items
    .PARAMETER Width
      Width of ListBoxOption Dialog Window
    .PARAMETER Height
      Height of ListBoxOption Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $Items = Get-Service
      $DialogResult = Get-ListBoxOption -Title "Get ListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7] -Multi
      If ($DialogResult.Success)
      {
        # Success
      }
      Else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [parameter(Mandatory = $True)]
    [Object[]]$Items = @(),
    [Switch]$Sorted,
    [Switch]$Multi,
    [String]$DisplayMember = "Text",
    [String]$ValueMember = "Value",
    [Object[]]$Selected,
    [Int]$Width = 25,
    [Int]$Height = 20,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel",
    [Switch]$Required
  )
  Write-Verbose -Message "Enter Function Get-ListBoxOption"

  #region ******** Begin **** ListBoxOption **** Begin ********

  # ************************************************
  # ListBoxOption Form
  # ************************************************
  #region $ListBoxOptionForm = [System.Windows.Forms.Form]::New()
  $ListBoxOptionForm = [System.Windows.Forms.Form]::New()
  $ListBoxOptionForm.BackColor = [MyConfig]::Colors.Back
  $ListBoxOptionForm.Font = [MyConfig]::Font.Regular
  $ListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore
  $ListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ListBoxOptionForm.Icon = $FCGForm.Icon
  $ListBoxOptionForm.KeyPreview = $True
  $ListBoxOptionForm.MaximizeBox = $False
  $ListBoxOptionForm.MinimizeBox = $False
  $ListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $ListBoxOptionForm.Name = "ListBoxOptionForm"
  $ListBoxOptionForm.Owner = $FCGForm
  $ListBoxOptionForm.ShowInTaskbar = $False
  $ListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ListBoxOptionForm.Text = $Title
  #endregion $ListBoxOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ListBoxOptionFormKeyDown ********
  function Start-ListBoxOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the ListBoxOption Form Control
      .DESCRIPTION
        KeyDown Event for the ListBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-ListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ListBoxOptionForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $ListBoxOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ListBoxOptionForm"
  }
  #endregion ******** Function Start-ListBoxOptionFormKeyDown ********
  $ListBoxOptionForm.add_KeyDown({ Start-ListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ListBoxOptionFormShown ********
  function Start-ListBoxOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the ListBoxOption Form Control
      .DESCRIPTION
        Shown Event for the ListBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-ListBoxOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ListBoxOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Write-Verbose -Message "Exit Shown Event for `$ListBoxOptionForm"
  }
  #endregion ******** Function Start-ListBoxOptionFormShown ********
  $ListBoxOptionForm.add_Shown({ Start-ListBoxOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ListBoxOption Form ********

  # ************************************************
  # ListBoxOption Panel
  # ************************************************
  #region $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $ListBoxOptionForm.Controls.Add($ListBoxOptionPanel)
  $ListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ListBoxOptionPanel.Name = "ListBoxOptionPanel"
  #endregion $ListBoxOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ListBoxOptionPanel Controls ********

  if ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $ListBoxOptionPanel.Controls.Add($ListBoxOptionLabel)
    $ListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $ListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $ListBoxOptionLabel.Name = "ListBoxOptionLabel"
    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $ListBoxOptionLabel.Text = $Message
    $ListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $ListBoxOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $ListBoxOptionLabel.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $ListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }

  # ************************************************
  # ListBoxOption GroupBox
  # ************************************************
  #region $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $ListBoxOptionPanel.Controls.Add($ListBoxOptionGroupBox)
  $ListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back
  $ListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular
  $ListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $ListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $ListBoxOptionGroupBox.Name = "ListBoxOptionGroupBox"
  $ListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($ListBoxOptionPanel.Height - ($ListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))
  #endregion $ListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $ListBoxOptionGroupBox Controls ********

  #region $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()
  $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()
  $ListBoxOptionGroupBox.Controls.Add($ListBoxOptionListBox)
  $ListBoxOptionListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $ListBoxOptionListBox.AutoSize = $True
  $ListBoxOptionListBox.BackColor = [MyConfig]::Colors.TextBack
  $ListBoxOptionListBox.DisplayMember = $DisplayMember
  $ListBoxOptionListBox.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ListBoxOptionListBox.Font = [MyConfig]::Font.Regular
  $ListBoxOptionListBox.ForeColor = [MyConfig]::Colors.TextFore
  $ListBoxOptionListBox.Name = "ListBoxOptionListBox"
  if ($Multi.IsPresent)
  {
    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended
  }
  else
  {
    $ListBoxOptionListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One
  }
  $ListBoxOptionListBox.Sorted = $Sorted.IsPresent
  $ListBoxOptionListBox.TabIndex = 0
  $ListBoxOptionListBox.TabStop = $True
  $ListBoxOptionListBox.Tag = $Null
  $ListBoxOptionListBox.ValueMember = $ValueMember
  #endregion $ListBoxOptionListBox = [System.Windows.Forms.ListBox]::New()

  $ListBoxOptionListBox.Items.AddRange($Items)
  if ($PSBoundParameters.ContainsKey("Selected"))
  {
    if ($Multi.IsPresent)
    {
      $ListBoxOptionListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected} )
    }
    else
    {
      $ListBoxOptionListBox.Tag = @($Items | Select-Object -First 1 )
    }
    $ListBoxOptionListBox.SelectedItems.Clear()
    $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }
  }
  else
  {
    $ListBoxOptionListBox.Tag = @()
  }
  
  #region ******** Function Start-ListBoxOptionListBoxMouseDown ********
  function Start-ListBoxOptionListBoxMouseDown
  {
    <#
      .SYNOPSIS
        MouseDown Event for the IDP TreeView Control
      .DESCRIPTION
        MouseDown Event for the IDP TreeView Control
      .PARAMETER Sender
         The TreeView Control that fired the MouseDown Event
      .PARAMETER EventArg
         The Event Arguments for the TreeView MouseDown Event
      .EXAMPLE
         Start-ListBoxOptionListBoxMouseDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter MouseDown Event for `$ListBoxOptionListBox"

    [MyConfig]::AutoExit = 0

    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)
    {
      if ($ListBoxOptionListBox.Items.Count -gt 0)
      {
        $ListBoxOptionContextMenuStrip.Show($ListBoxOptionListBox, $EventArg.Location)
      }
    }

    Write-Verbose -Message "Exit MouseDown Event for `$ListBoxOptionListBox"
  }
  #endregion ******** Function Start-ListBoxOptionListBoxMouseDown ********
  if ($Multi.IsPresent)
  {
    $ListBoxOptionListBox.add_MouseDown({ Start-ListBoxOptionListBoxMouseDown -Sender $This -EventArg $PSItem })
  }
  
  $ListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ListBoxOptionGroupBox.ClientSize.Width, ($ListBoxOptionListBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  
  # ************************************************
  # ListBoxOption ContextMenuStrip
  # ************************************************
  #region $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  #$ListBoxOptionListView.Controls.Add($ListBoxOptionContextMenuStrip)
  $ListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back
  #$ListBoxOptionContextMenuStrip.Enabled = $True
  $ListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular
  $ListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
  $ListBoxOptionContextMenuStrip.ImageList = $FCGSmallImageList
  $ListBoxOptionContextMenuStrip.Name = "ListBoxOptionContextMenuStrip"
  #endregion $ListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

  #region ******** Function Start-ListBoxOptionContextMenuStripOpening ********
  function Start-ListBoxOptionContextMenuStripOpening
  {
    <#
      .SYNOPSIS
        Opening Event for the ListBoxOption ContextMenuStrip Control
      .DESCRIPTION
        Opening Event for the ListBoxOption ContextMenuStrip Control
      .PARAMETER Sender
         The ContextMenuStrip Control that fired the Opening Event
      .PARAMETER EventArg
         The Event Arguments for the ContextMenuStrip Opening Event
      .EXAMPLE
         Start-ListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ContextMenuStrip]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Opening Event for `$ListBoxOptionContextMenuStrip"

    [MyConfig]::AutoExit = 0

    #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

    Write-Verbose -Message "Exit Opening Event for `$ListBoxOptionContextMenuStrip"
  }
  #endregion ******** Function Start-ListBoxOptionContextMenuStripOpening ********
  $ListBoxOptionContextMenuStrip.add_Opening({Start-ListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})

  #region ******** Function Start-ListBoxOptionContextMenuStripItemClick ********
  function Start-ListBoxOptionContextMenuStripItemClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListBoxOption ToolStripItem Control
      .DESCRIPTION
        Click Event for the ListBoxOption ToolStripItem Control
      .PARAMETER Sender
         The ToolStripItem Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the ToolStripItem Click Event
      .EXAMPLE
         Start-ListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ToolStripItem]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionContextMenuStripItem"

    [MyConfig]::AutoExit = 0
    
    switch ($Sender.Name)
    {
      "SelectAll"
      {
        @($ListBoxOptionListBox.Items) | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }
        Break
      }
      "UnSelectAll"
      {
        $ListBoxOptionListBox.SelectedItems.Clear()
        Break
      }
    }

    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionContextMenuStripItem"
  }
  #endregion ******** Function Start-ListBoxOptionContextMenuStripItemClick ********
  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Select All" -Name "SelectAll" -Tag "SelectAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})
  (New-MenuItem -Menu $ListBoxOptionContextMenuStrip -Text "Unselect All" -Name "UnSelectAll" -Tag "UnSelectAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})

  #endregion ******** $ListBoxOptionGroupBox Controls ********

  $TempClientSize = [System.Drawing.Size]::New(($ListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ListBoxOptionPanel Controls ********

  # ************************************************
  # ListBoxOptionBtm Panel
  # ************************************************
  #region $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ListBoxOptionForm.Controls.Add($ListBoxOptionBtmPanel)
  $ListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ListBoxOptionBtmPanel.Name = "ListBoxOptionBtmPanel"
  #endregion $ListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ListBoxOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmLeftButton)
  $ListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $ListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $ListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ListBoxOptionBtmLeftButton.Name = "ListBoxOptionBtmLeftButton"
  $ListBoxOptionBtmLeftButton.TabIndex = 1
  $ListBoxOptionBtmLeftButton.TabStop = $True
  $ListBoxOptionBtmLeftButton.Text = $ButtonLeft
  $ListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmLeftButton.PreferredSize.Height)
  #endregion $ListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListBoxOptionBtmLeftButtonClick ********
  function Start-ListBoxOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListBoxOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the ListBoxOptionBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-ListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ($ListBoxOptionListBox.SelectedIndex -gt 0)
    {
      $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($ListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmLeftButton"
  }
  #endregion ******** Function Start-ListBoxOptionBtmLeftButtonClick ********
  $ListBoxOptionBtmLeftButton.add_Click({ Start-ListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmMidButton)
  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $ListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ListBoxOptionBtmMidButton.Name = "ListBoxOptionBtmMidButton"
  $ListBoxOptionBtmMidButton.TabIndex = 2
  $ListBoxOptionBtmMidButton.TabStop = $True
  $ListBoxOptionBtmMidButton.Text = $ButtonMid
  $ListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListBoxOptionBtmMidButton.PreferredSize.Height)
  #endregion $ListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListBoxOptionBtmMidButtonClick ********
  function Start-ListBoxOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListBoxOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the ListBoxOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    $ListBoxOptionListBox.SelectedItems.Clear()
    if ($ListBoxOptionListBox.Tag.Count -gt 0)
    {
      $ListBoxOptionListBox.Tag | ForEach-Object -Process { $ListBoxOptionListBox.SelectedItems.Add($PSItem) }
    }

    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmMidButton"
  }
  #endregion ******** Function Start-ListBoxOptionBtmMidButtonClick ********
  $ListBoxOptionBtmMidButton.add_Click({ Start-ListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ListBoxOptionBtmPanel.Controls.Add($ListBoxOptionBtmRightButton)
  $ListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $ListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $ListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ListBoxOptionBtmRightButton.Name = "ListBoxOptionBtmRightButton"
  $ListBoxOptionBtmRightButton.TabIndex = 3
  $ListBoxOptionBtmRightButton.TabStop = $True
  $ListBoxOptionBtmRightButton.Text = $ButtonRight
  $ListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListBoxOptionBtmRightButton.PreferredSize.Height)
  #endregion $ListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListBoxOptionBtmRightButtonClick ********
  function Start-ListBoxOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListBoxOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the ListBoxOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListBoxOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $ListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$ListBoxOptionBtmRightButton"
  }
  #endregion ******** Function Start-ListBoxOptionBtmRightButtonClick ********
  $ListBoxOptionBtmRightButton.add_Click({ Start-ListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $ListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ListBoxOptionBtmPanel Controls ********

  $ListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListBoxOptionBtmPanel.Height))

  #endregion ******** Controls for ListBoxOption Form ********

  #endregion ******** End **** ListBoxOption **** End ********

  $DialogResult = $ListBoxOptionForm.ShowDialog()
  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $ListBoxOptionListBox.SelectedItems)
  }
  else
  {
    [ListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())
  }

  $ListBoxOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-ListBoxOption"
}
#endregion function Get-ListBoxOption

# --------------------------------
# Get CheckedListBoxOption Function
# --------------------------------
#region CheckedListBoxOption Result Class
Class CheckedListBoxOption
{
  [Bool]$Success
  [Object]$DialogResult
  [Object[]]$Items

  CheckedListBoxOption ([Bool]$Success, [Object]$DialogResult, [Object[]]$Items)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Items = $Items
  }
}
#endregion CheckedListBoxOption Result Class

#region function Get-CheckedListBoxOption
function Get-CheckedListBoxOption ()
{
  <#
    .SYNOPSIS
      Shows Get-CheckedListBoxOption
    .DESCRIPTION
      Shows Get-CheckedListBoxOption
    .PARAMETER Title
      Title of the Get-MultiTextBoxInput Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Items
      Items to show in the ListView
    .PARAMETER Sorted
      Sort ListView
    .PARAMETER DisplayMember
      Name of the Property to Display in the CheckedListBox
    .PARAMETER ValueMember
      Name of the Property for the Value
    .PARAMETER Selected
      Default Selected CheckedListBox Items
    .PARAMETER Width
      Width of CheckedListBoxOption Dialog Window
    .PARAMETER Height
      Height of CheckedListBoxOption Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $Items = Get-Service
      $DialogResult = CheckedGet-CheckedListBoxOption -Title "Get CheckListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7]
      If ($DialogResult.Success)
      {
        # Success
      }
      Else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [parameter(Mandatory = $True)]
    [Object[]]$Items = @(),
    [Switch]$Sorted,
    [String]$DisplayMember = "Text",
    [String]$ValueMember = "Value",
    [Object[]]$Selected,
    [Int]$Width = 25,
    [Int]$Height = 20,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel",
    [Switch]$Required
  )
  Write-Verbose -Message "Enter Function Get-CheckedListBoxOption"

  #region ******** Begin **** CheckedListBoxOption **** Begin ********

  # ************************************************
  # CheckedListBoxOption Form
  # ************************************************
  #region $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()
  $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()
  $CheckedListBoxOptionForm.BackColor = [MyConfig]::Colors.Back
  $CheckedListBoxOptionForm.Font = [MyConfig]::Font.Regular
  $CheckedListBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore
  $CheckedListBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $CheckedListBoxOptionForm.Icon = $FCGForm.Icon
  $CheckedListBoxOptionForm.KeyPreview = $True
  $CheckedListBoxOptionForm.MaximizeBox = $False
  $CheckedListBoxOptionForm.MinimizeBox = $False
  $CheckedListBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $CheckedListBoxOptionForm.Name = "CheckedListBoxOptionForm"
  $CheckedListBoxOptionForm.Owner = $FCGForm
  $CheckedListBoxOptionForm.ShowInTaskbar = $False
  $CheckedListBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $CheckedListBoxOptionForm.Text = $Title
  #endregion $CheckedListBoxOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-CheckedListBoxOptionFormKeyDown ********
  function Start-CheckedListBoxOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the CheckedListBoxOption Form Control
      .DESCRIPTION
        KeyDown Event for the CheckedListBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-CheckedListBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$CheckedListBoxOptionForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $CheckedListBoxOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$CheckedListBoxOptionForm"
  }
  #endregion ******** Function Start-CheckedListBoxOptionFormKeyDown ********
  $CheckedListBoxOptionForm.add_KeyDown({ Start-CheckedListBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-CheckedListBoxOptionFormShown ********
  function Start-CheckedListBoxOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the CheckedListBoxOption Form Control
      .DESCRIPTION
        Shown Event for the CheckedListBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-CheckedListBoxOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$CheckedListBoxOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Write-Verbose -Message "Exit Shown Event for `$CheckedListBoxOptionForm"
  }
  #endregion ******** Function Start-CheckedListBoxOptionFormShown ********
  $CheckedListBoxOptionForm.add_Shown({ Start-CheckedListBoxOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for CheckedListBoxOption Form ********

  # ************************************************
  # CheckedListBoxOption Panel
  # ************************************************
  #region $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionPanel)
  $CheckedListBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $CheckedListBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $CheckedListBoxOptionPanel.Name = "CheckedListBoxOptionPanel"
  #endregion $CheckedListBoxOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $CheckedListBoxOptionPanel Controls ********

  if ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionLabel)
    $CheckedListBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $CheckedListBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $CheckedListBoxOptionLabel.Name = "CheckedListBoxOptionLabel"
    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $CheckedListBoxOptionLabel.Text = $Message
    $CheckedListBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $CheckedListBoxOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($CheckedListBoxOptionLabel.Text, [MyConfig]::Font.Regular, $CheckedListBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $CheckedListBoxOptionLabel.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $CheckedListBoxOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }

  # ************************************************
  # CheckedListBoxOption GroupBox
  # ************************************************
  #region $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $CheckedListBoxOptionPanel.Controls.Add($CheckedListBoxOptionGroupBox)
  $CheckedListBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back
  $CheckedListBoxOptionGroupBox.Font = [MyConfig]::Font.Regular
  $CheckedListBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $CheckedListBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $CheckedListBoxOptionGroupBox.Name = "CheckedListBoxOptionGroupBox"
  $CheckedListBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($CheckedListBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), ($CheckedListBoxOptionPanel.Height - ($CheckedListBoxOptionGroupBox.Top + [MyConfig]::FormSpacer)))
  #endregion $CheckedListBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $CheckedListBoxOptionGroupBox Controls ********

  #region $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
  $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
  $CheckedListBoxOptionGroupBox.Controls.Add($CheckedListBoxOptionCheckedListBox)
  $CheckedListBoxOptionCheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $CheckedListBoxOptionCheckedListBox.AutoSize = $True
  $CheckedListBoxOptionCheckedListBox.BackColor = [MyConfig]::Colors.TextBack
  $CheckedListBoxOptionCheckedListBox.CheckOnClick = $True
  $CheckedListBoxOptionCheckedListBox.DisplayMember = $DisplayMember
  $CheckedListBoxOptionCheckedListBox.Dock = [System.Windows.Forms.DockStyle]::Fill
  $CheckedListBoxOptionCheckedListBox.Font = [MyConfig]::Font.Regular
  $CheckedListBoxOptionCheckedListBox.ForeColor = [MyConfig]::Colors.TextFore
  $CheckedListBoxOptionCheckedListBox.Name = "CheckedListBoxOptionCheckedListBox"
  $CheckedListBoxOptionCheckedListBox.Sorted = $Sorted.IsPresent
  $CheckedListBoxOptionCheckedListBox.TabIndex = 0
  $CheckedListBoxOptionCheckedListBox.TabStop = $True
  $CheckedListBoxOptionCheckedListBox.Tag = $Null
  $CheckedListBoxOptionCheckedListBox.ValueMember = $ValueMember
  #endregion $CheckedListBoxOptionCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()

  $CheckedListBoxOptionCheckedListBox.Items.AddRange($Items)

  if ($PSBoundParameters.ContainsKey("Selected"))
  {
    $CheckedListBoxOptionCheckedListBox.Tag = @($Items | Where-Object -FilterScript { $PSItem -in $Selected})
    $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }
  }
  else
  {
    $CheckedListBoxOptionCheckedListBox.Tag = @()
  }

  #region ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********
  function Start-CheckedListBoxOptionCheckedListBoxMouseDown
  {
    <#
      .SYNOPSIS
        MouseDown Event for the IDP TreeView Control
      .DESCRIPTION
        MouseDown Event for the IDP TreeView Control
      .PARAMETER Sender
         The TreeView Control that fired the MouseDown Event
      .PARAMETER EventArg
         The Event Arguments for the TreeView MouseDown Event
      .EXAMPLE
         Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.CheckedListBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter MouseDown Event for `$CheckedListBoxOptionCheckedListBox"

    [MyConfig]::AutoExit = 0

    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)
    {
      if ($CheckedListBoxOptionCheckedListBox.Items.Count -gt 0)
      {
        $CheckedListBoxOptionContextMenuStrip.Show($CheckedListBoxOptionCheckedListBox, $EventArg.Location)
      }
    }

    Write-Verbose -Message "Exit MouseDown Event for `$CheckedListBoxOptionCheckedListBox"
  }
  #endregion ******** Function Start-CheckedListBoxOptionCheckedListBoxMouseDown ********
  $CheckedListBoxOptionCheckedListBox.add_MouseDown({ Start-CheckedListBoxOptionCheckedListBoxMouseDown -Sender $This -EventArg $PSItem })

  $CheckedListBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionGroupBox.ClientSize.Width, ($CheckedListBoxOptionCheckedListBox.Bottom + ([MyConfig]::FormSpacer * 2)))

  # ************************************************
  # CheckedListBoxOption ContextMenuStrip
  # ************************************************
  #region $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  #$CheckedListBoxOptionListView.Controls.Add($CheckedListBoxOptionContextMenuStrip)
  $CheckedListBoxOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back
  #$CheckedListBoxOptionContextMenuStrip.Enabled = $True
  $CheckedListBoxOptionContextMenuStrip.Font = [MyConfig]::Font.Regular
  $CheckedListBoxOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
  $CheckedListBoxOptionContextMenuStrip.ImageList = $FCGSmallImageList
  $CheckedListBoxOptionContextMenuStrip.Name = "CheckedListBoxOptionContextMenuStrip"
  #endregion $CheckedListBoxOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

  #region ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********
  function Start-CheckedListBoxOptionContextMenuStripOpening
  {
    <#
      .SYNOPSIS
        Opening Event for the CheckedListBoxOption ContextMenuStrip Control
      .DESCRIPTION
        Opening Event for the CheckedListBoxOption ContextMenuStrip Control
      .PARAMETER Sender
         The ContextMenuStrip Control that fired the Opening Event
      .PARAMETER EventArg
         The Event Arguments for the ContextMenuStrip Opening Event
      .EXAMPLE
         Start-CheckedListBoxOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ContextMenuStrip]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Opening Event for `$CheckedListBoxOptionContextMenuStrip"

    [MyConfig]::AutoExit = 0

    #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

    Write-Verbose -Message "Exit Opening Event for `$CheckedListBoxOptionContextMenuStrip"
  }
  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripOpening ********
  $CheckedListBoxOptionContextMenuStrip.add_Opening({Start-CheckedListBoxOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})

  #region ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********
  function Start-CheckedListBoxOptionContextMenuStripItemClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckedListBoxOption ToolStripItem Control
      .DESCRIPTION
        Click Event for the CheckedListBoxOption ToolStripItem Control
      .PARAMETER Sender
         The ToolStripItem Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the ToolStripItem Click Event
      .EXAMPLE
         Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ToolStripItem]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionContextMenuStripItem"

    [MyConfig]::AutoExit = 0

    switch ($Sender.Name)
    {
      "CheckAll"
      {
        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)
        (0..$($CheckedListBoxOptionCheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { $PSItem -notin $TmpCheckedItems } | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $True) }
        Break
      }
      "UnCheckAll"
      {
        $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)
        $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }
        Break
      }
    }

    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionContextMenuStripItem"
  }
  #endregion ******** Function Start-CheckedListBoxOptionContextMenuStripItemClick ********
  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})
  (New-MenuItem -Menu $CheckedListBoxOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-CheckedListBoxOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})

  #endregion ******** $CheckedListBoxOptionGroupBox Controls ********

  $TempClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $CheckedListBoxOptionPanel Controls ********

  # ************************************************
  # CheckedListBoxOptionBtm Panel
  # ************************************************
  #region $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $CheckedListBoxOptionForm.Controls.Add($CheckedListBoxOptionBtmPanel)
  $CheckedListBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $CheckedListBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $CheckedListBoxOptionBtmPanel.Name = "CheckedListBoxOptionBtmPanel"
  #endregion $CheckedListBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $CheckedListBoxOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($CheckedListBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmLeftButton)
  $CheckedListBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $CheckedListBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckedListBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckedListBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $CheckedListBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckedListBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $CheckedListBoxOptionBtmLeftButton.Name = "CheckedListBoxOptionBtmLeftButton"
  $CheckedListBoxOptionBtmLeftButton.TabIndex = 1
  $CheckedListBoxOptionBtmLeftButton.TabStop = $True
  $CheckedListBoxOptionBtmLeftButton.Text = $ButtonLeft
  $CheckedListBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmLeftButton.PreferredSize.Height)
  #endregion $CheckedListBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********
  function Start-CheckedListBoxOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckedListBoxOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the CheckedListBoxOptionBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ($CheckedListBoxOptionCheckedListBox.CheckedItems.Count -gt 0)
    {
      $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($CheckedListBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmLeftButton"
  }
  #endregion ******** Function Start-CheckedListBoxOptionBtmLeftButtonClick ********
  $CheckedListBoxOptionBtmLeftButton.add_Click({ Start-CheckedListBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmMidButton)
  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $CheckedListBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $CheckedListBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckedListBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckedListBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $CheckedListBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckedListBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $CheckedListBoxOptionBtmMidButton.Name = "CheckedListBoxOptionBtmMidButton"
  $CheckedListBoxOptionBtmMidButton.TabIndex = 2
  $CheckedListBoxOptionBtmMidButton.TabStop = $True
  $CheckedListBoxOptionBtmMidButton.Text = $ButtonMid
  $CheckedListBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $CheckedListBoxOptionBtmMidButton.PreferredSize.Height)
  #endregion $CheckedListBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********
  function Start-CheckedListBoxOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckedListBoxOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the CheckedListBoxOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-CheckedListBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    $TmpCheckedItems = @($CheckedListBoxOptionCheckedListBox.CheckedIndices)
    $TmpCheckedItems | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($PSItem, $False) }
    if ($CheckedListBoxOptionCheckedListBox.Tag.Count -gt 0)
    {
      $CheckedListBoxOptionCheckedListBox.Tag | ForEach-Object -Process { $CheckedListBoxOptionCheckedListBox.SetItemChecked($CheckedListBoxOptionCheckedListBox.Items.IndexOf($PSItem), $True) }
    }

    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmMidButton"
  }
  #endregion ******** Function Start-CheckedListBoxOptionBtmMidButtonClick ********
  $CheckedListBoxOptionBtmMidButton.add_Click({ Start-CheckedListBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $CheckedListBoxOptionBtmPanel.Controls.Add($CheckedListBoxOptionBtmRightButton)
  $CheckedListBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $CheckedListBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $CheckedListBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $CheckedListBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $CheckedListBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $CheckedListBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($CheckedListBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $CheckedListBoxOptionBtmRightButton.Name = "CheckedListBoxOptionBtmRightButton"
  $CheckedListBoxOptionBtmRightButton.TabIndex = 3
  $CheckedListBoxOptionBtmRightButton.TabStop = $True
  $CheckedListBoxOptionBtmRightButton.Text = $ButtonRight
  $CheckedListBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $CheckedListBoxOptionBtmRightButton.PreferredSize.Height)
  #endregion $CheckedListBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********
  function Start-CheckedListBoxOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the CheckedListBoxOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the CheckedListBoxOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-CheckedListBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$CheckedListBoxOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $CheckedListBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$CheckedListBoxOptionBtmRightButton"
  }
  #endregion ******** Function Start-CheckedListBoxOptionBtmRightButtonClick ********
  $CheckedListBoxOptionBtmRightButton.add_Click({ Start-CheckedListBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $CheckedListBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($CheckedListBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($CheckedListBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $CheckedListBoxOptionBtmPanel Controls ********

  $CheckedListBoxOptionForm.ClientSize = [System.Drawing.Size]::New($CheckedListBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $CheckedListBoxOptionBtmPanel.Height))

  #endregion ******** Controls for CheckedListBoxOption Form ********

  #endregion ******** End **** CheckedListBoxOption **** End ********

  $DialogResult = $CheckedListBoxOptionForm.ShowDialog()
  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $CheckedListBoxOptionCheckedListBox.CheckedItems)
  }
  else
  {
    [CheckedListBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @())
  }

  $CheckedListBoxOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-CheckedListBoxOption"
}
#endregion function Get-CheckedListBoxOption

# --------------------------------
# Get ComboBoxOption Function
# --------------------------------
#region ComboBoxOption Result Class
Class ComboBoxOption
{
  [Bool]$Success
  [Object]$DialogResult
  [Object]$Item

  ComboBoxOption ([Bool]$Success, [Object]$DialogResult, [Object]$Item)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
  }
}
#endregion ComboBoxOption Result Class

#region function Get-ComboBoxOption
function Get-ComboBoxOption ()
{
  <#
    .SYNOPSIS
      Shows Get-ComboBoxOption
    .DESCRIPTION
      Shows Get-ComboBoxOption
    .PARAMETER Title
      Title of the Get-ComboBoxOption Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Items
      Items to show in the ComboBox
    .PARAMETER Sorted
      Sort ComboBox
    .PARAMETER SelectText
      The Default Selected Item when no Value is Selected
    .PARAMETER DisplayMember
      Name of the Property to Display in the CheckedListBox
    .PARAMETER ValueMember
      Name of the Property for the Value
    .PARAMETER Selected
      Default Selected ComboBox Item
    .PARAMETER Width
      Width of ComboBoxOption Dialog Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $Variables = @(Get-ChildItem -Path "Variable:\")
      $DialogResult = Get-ComboBoxOption -Title "Combo Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Variables -DisplayMember "Name" -ValueMember "Value" -Selected ($Variables[4])
      If ($DialogResult.Success)
      {
        # Success
      }
      Else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [parameter(Mandatory = $True)]
    [Object[]]$Items = @(),
    [Switch]$Sorted,
    [String]$SelectText = "Select Value",
    [String]$DisplayMember = "Text",
    [String]$ValueMember = "Value",
    [Object]$Selected,
    [Int]$Width = 35,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Get-ComboBoxOption"

  #region ******** Begin **** ComboBoxOption **** Begin ********

  # ************************************************
  # ComboBoxOption Form
  # ************************************************
  #region $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()
  $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()
  $ComboBoxOptionForm.BackColor = [MyConfig]::Colors.Back
  $ComboBoxOptionForm.Font = [MyConfig]::Font.Regular
  $ComboBoxOptionForm.ForeColor = [MyConfig]::Colors.Fore
  $ComboBoxOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ComboBoxOptionForm.Icon = $FCGForm.Icon
  $ComboBoxOptionForm.KeyPreview = $True
  $ComboBoxOptionForm.MaximizeBox = $False
  $ComboBoxOptionForm.MinimizeBox = $False
  $ComboBoxOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $ComboBoxOptionForm.Name = "ComboBoxOptionForm"
  $ComboBoxOptionForm.Owner = $FCGForm
  $ComboBoxOptionForm.ShowInTaskbar = $False
  $ComboBoxOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ComboBoxOptionForm.Text = $Title
  #endregion $ComboBoxOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ComboBoxOptionFormKeyDown ********
  function Start-ComboBoxOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the ComboBoxOption Form Control
      .DESCRIPTION
        KeyDown Event for the ComboBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-ComboBoxOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxOptionForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $ComboBoxOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxOptionForm"
  }
  #endregion ******** Function Start-ComboBoxOptionFormKeyDown ********
  $ComboBoxOptionForm.add_KeyDown({ Start-ComboBoxOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ComboBoxOptionFormShown ********
  function Start-ComboBoxOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the ComboBoxOption Form Control
      .DESCRIPTION
        Shown Event for the ComboBoxOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-ComboBoxOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ComboBoxOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$ComboBoxOptionForm"
  }
  #endregion ******** Function Start-ComboBoxOptionFormShown ********
  $ComboBoxOptionForm.add_Shown({ Start-ComboBoxOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ComboBoxOption Form ********

  # ************************************************
  # ComboBoxOption Panel
  # ************************************************
  #region $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionPanel)
  $ComboBoxOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ComboBoxOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ComboBoxOptionPanel.Name = "ComboBoxOptionPanel"
  #endregion $ComboBoxOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ComboBoxOptionPanel Controls ********

  if ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()
    $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionLabel)
    $ComboBoxOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $ComboBoxOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $ComboBoxOptionLabel.Name = "ComboBoxOptionLabel"
    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $ComboBoxOptionLabel.Text = $Message
    $ComboBoxOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $ComboBoxOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxOptionLabel.Text, [MyConfig]::Font.Regular, $ComboBoxOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $ComboBoxOptionLabel.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TmpBottom = $ComboBoxOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TmpBottom = 0
  }

  # ************************************************
  # ComboBoxOption GroupBox
  # ************************************************
  #region $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $ComboBoxOptionPanel.Controls.Add($ComboBoxOptionGroupBox)
  $ComboBoxOptionGroupBox.BackColor = [MyConfig]::Colors.Back
  $ComboBoxOptionGroupBox.Font = [MyConfig]::Font.Regular
  $ComboBoxOptionGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $ComboBoxOptionGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TmpBottom + [MyConfig]::FormSpacer))
  $ComboBoxOptionGroupBox.Name = "ComboBoxOptionGroupBox"
  $ComboBoxOptionGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)
  #endregion $ComboBoxOptionGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $ComboBoxOptionGroupBox Controls ********

  #region $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()
  $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()
  $ComboBoxOptionGroupBox.Controls.Add($GetComboChoiceComboBox)
  $GetComboChoiceComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
  $GetComboChoiceComboBox.AutoSize = $True
  $GetComboChoiceComboBox.BackColor = [MyConfig]::Colors.TextBack
  $GetComboChoiceComboBox.DisplayMember = $DisplayMember
  $GetComboChoiceComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
  $GetComboChoiceComboBox.Font = [MyConfig]::Font.Regular
  $GetComboChoiceComboBox.ForeColor = [MyConfig]::Colors.TextFore
  [void]$GetComboChoiceComboBox.Items.Add([PSCustomObject]@{ $DisplayMember = " - $($SelectText) - "; $ValueMember = " - $($SelectText) - "})
  $GetComboChoiceComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $GetComboChoiceComboBox.Name = "GetComboChoiceComboBox"
  $GetComboChoiceComboBox.SelectedIndex = 0
  $GetComboChoiceComboBox.Size = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $GetComboChoiceComboBox.PreferredHeight)
  $GetComboChoiceComboBox.Sorted = $Sorted.IsPresent
  $GetComboChoiceComboBox.TabIndex = 0
  $GetComboChoiceComboBox.TabStop = $True
  $GetComboChoiceComboBox.Tag = $Null
  $GetComboChoiceComboBox.ValueMember = $ValueMember
  #endregion $GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()

  $GetComboChoiceComboBox.Items.AddRange($Items)

  if ($PSBoundParameters.ContainsKey("Selected"))
  {
    $GetComboChoiceComboBox.Tag = $Items | Where-Object -FilterScript { $PSItem -eq $Selected}
    $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag
  }
  else
  {
    $GetComboChoiceComboBox.SelectedIndex = 0
  }

  $ComboBoxOptionGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionGroupBox.ClientSize.Width, ($GetComboChoiceComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))

  #endregion ******** $ComboBoxOptionGroupBox Controls ********

  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxOptionGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ComboBoxOptionPanel Controls ********

  # ************************************************
  # ComboBoxOptionBtm Panel
  # ************************************************
  #region $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxOptionForm.Controls.Add($ComboBoxOptionBtmPanel)
  $ComboBoxOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ComboBoxOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ComboBoxOptionBtmPanel.Name = "ComboBoxOptionBtmPanel"
  #endregion $ComboBoxOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ComboBoxOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ComboBoxOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmLeftButton)
  $ComboBoxOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $ComboBoxOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $ComboBoxOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ComboBoxOptionBtmLeftButton.Name = "ComboBoxOptionBtmLeftButton"
  $ComboBoxOptionBtmLeftButton.TabIndex = 1
  $ComboBoxOptionBtmLeftButton.TabStop = $True
  $ComboBoxOptionBtmLeftButton.Text = $ButtonLeft
  $ComboBoxOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmLeftButton.PreferredSize.Height)
  #endregion $ComboBoxOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********
  function Start-ComboBoxOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the ComboBoxOptionBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-ComboBoxOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ($GetComboChoiceComboBox.SelectedIndex -gt 0)
    {
      $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmLeftButton"
  }
  #endregion ******** Function Start-ComboBoxOptionBtmLeftButtonClick ********
  $ComboBoxOptionBtmLeftButton.add_Click({ Start-ComboBoxOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmMidButton)
  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ComboBoxOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ComboBoxOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $ComboBoxOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ComboBoxOptionBtmMidButton.Name = "ComboBoxOptionBtmMidButton"
  $ComboBoxOptionBtmMidButton.TabIndex = 2
  $ComboBoxOptionBtmMidButton.TabStop = $True
  $ComboBoxOptionBtmMidButton.Text = $ButtonMid
  $ComboBoxOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxOptionBtmMidButton.PreferredSize.Height)
  #endregion $ComboBoxOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxOptionBtmMidButtonClick ********
  function Start-ComboBoxOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the ComboBoxOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ComboBoxOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ([String]::IsNullOrEmpty($GetComboChoiceComboBox.Tag))
    {
      $GetComboChoiceComboBox.SelectedIndex = 0
    }
    else
    {
      $GetComboChoiceComboBox.SelectedItem = $GetComboChoiceComboBox.Tag
    }

    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmMidButton"
  }
  #endregion ******** Function Start-ComboBoxOptionBtmMidButtonClick ********
  $ComboBoxOptionBtmMidButton.add_Click({ Start-ComboBoxOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ComboBoxOptionBtmPanel.Controls.Add($ComboBoxOptionBtmRightButton)
  $ComboBoxOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $ComboBoxOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $ComboBoxOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ComboBoxOptionBtmRightButton.Name = "ComboBoxOptionBtmRightButton"
  $ComboBoxOptionBtmRightButton.TabIndex = 3
  $ComboBoxOptionBtmRightButton.TabStop = $True
  $ComboBoxOptionBtmRightButton.Text = $ButtonRight
  $ComboBoxOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxOptionBtmRightButton.PreferredSize.Height)
  #endregion $ComboBoxOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxOptionBtmRightButtonClick ********
  function Start-ComboBoxOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the ComboBoxOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ComboBoxOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $ComboBoxOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$ComboBoxOptionBtmRightButton"
  }
  #endregion ******** Function Start-ComboBoxOptionBtmRightButtonClick ********
  $ComboBoxOptionBtmRightButton.add_Click({ Start-ComboBoxOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $ComboBoxOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ComboBoxOptionBtmPanel Controls ********

  $ComboBoxOptionForm.ClientSize = [System.Drawing.Size]::New($ComboBoxOptionForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxOptionBtmPanel.Height))

  #endregion ******** Controls for ComboBoxOption Form ********

  #endregion ******** End **** ComboBoxOption **** End ********

  $DialogResult = $ComboBoxOptionForm.ShowDialog()
  [ComboBoxOption]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $GetComboChoiceComboBox.SelectedItem)

  $ComboBoxOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-ComboBoxOption"
}
#endregion function Get-ComboBoxOption

# --------------------------------
# Get ComboBoxFilter Function
# --------------------------------
#region ******** ComboBoxFilterItem Class ********
Class ComboBoxFilterItem
{
  [String]$Text
  [Object]$Value
  
  ComboBoxFilterItem ([String]$Text, [Object]$Value)
  {
    $This.Text = $Text
    $This.Value = $Value
  }
}
#endregion ******** ComboBoxFilterItem Class ********

#region ComboBoxFilter Result Class
Class ComboBoxFilter
{
  [Bool]$Success
  [Object]$DialogResult
  [HashTable]$Values

  ComboBoxFilter ([Bool]$Success, [Object]$DialogResult, [HashTable]$Values)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Values = $Values
  }
}
#endregion ComboBoxFilter Result Class

#region function Get-ComboBoxFilter
Function Get-ComboBoxFilter ()
{
  <#
    .SYNOPSIS
      Shows Get-ComboBoxFilter
    .DESCRIPTION
      Shows Get-ComboBoxFilter
    .PARAMETER Title
      Title of the Get-ComboBoxFilter Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Items
      Items to show in the ComboBox
    .PARAMETER Properties
      Name of the Properties to Filter On
    .PARAMETER Selected
      Default Selected ComboBox Values
    .PARAMETER Width
      Width of ComboBoxFilter Dialog Window
    .PARAMETER NoFilter
      Do Not Filter ComBox Items from other Selected ComboBox Items
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)
      $DialogResult = Get-ComboBoxFilter -Title "Combo Filter Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $ServiceList -Properties Status, Name, StartType
      If ($DialogResult.Success)
      {
        # Success
      }
      Else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [parameter(Mandatory = $True)]
    [String]$Message = "Status Message",
    [Object[]]$Items = @(),
    [String[]]$Properties,
    [HashTable]$Selected = @{},
    [Int]$Width = 35,
    [Switch]$NoFilter,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Get-ComboBoxFilter"

  #region ******** Begin **** ComboBoxFilter **** Begin ********

  # ************************************************
  # ComboBoxFilter Form
  # ************************************************
  #region $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()
  $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()
  $ComboBoxFilterForm.BackColor = [MyConfig]::Colors.Back
  $ComboBoxFilterForm.Font = [MyConfig]::Font.Regular
  $ComboBoxFilterForm.ForeColor = [MyConfig]::Colors.Fore
  $ComboBoxFilterForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $ComboBoxFilterForm.Icon = $FCGForm.Icon
  $ComboBoxFilterForm.KeyPreview = $True
  $ComboBoxFilterForm.MaximizeBox = $False
  $ComboBoxFilterForm.MinimizeBox = $False
  $ComboBoxFilterForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $ComboBoxFilterForm.Name = "ComboBoxFilterForm"
  $ComboBoxFilterForm.Owner = $FCGForm
  $ComboBoxFilterForm.ShowInTaskbar = $False
  $ComboBoxFilterForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ComboBoxFilterForm.Text = $Title
  #endregion $ComboBoxFilterForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ComboBoxFilterFormKeyDown ********
  Function Start-ComboBoxFilterFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the ComboBoxFilter Form Control
      .DESCRIPTION
        KeyDown Event for the ComboBoxFilter Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-ComboBoxFilterFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ComboBoxFilterForm"

    [MyConfig]::AutoExit = 0

    If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $ComboBoxFilterForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ComboBoxFilterForm"
  }
  #endregion ******** Function Start-ComboBoxFilterFormKeyDown ********
  $ComboBoxFilterForm.add_KeyDown({ Start-ComboBoxFilterFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ComboBoxFilterFormShown ********
  Function Start-ComboBoxFilterFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the ComboBoxFilter Form Control
      .DESCRIPTION
        Shown Event for the ComboBoxFilter Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-ComboBoxFilterFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ComboBoxFilterForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$ComboBoxFilterForm"
  }
  #endregion ******** Function Start-ComboBoxFilterFormShown ********
  $ComboBoxFilterForm.add_Shown({ Start-ComboBoxFilterFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ComboBoxFilter Form ********

  # ************************************************
  # ComboBoxFilter Panel
  # ************************************************
  #region $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterPanel)
  $ComboBoxFilterPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ComboBoxFilterPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ComboBoxFilterPanel.Name = "ComboBoxFilterPanel"
  #endregion $ComboBoxFilterPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ComboBoxFilterPanel Controls ********

  #region $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()
  $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()
  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterLabel)
  $ComboBoxFilterLabel.ForeColor = [MyConfig]::Colors.LabelFore
  $ComboBoxFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $ComboBoxFilterLabel.Name = "ComboBoxFilterLabel"
  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
  $ComboBoxFilterLabel.Text = $Message
  $ComboBoxFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $ComboBoxFilterLabel = [System.Windows.Forms.Label]::New()

  # Returns the minimum size required to display the text
  $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ComboBoxFilterLabel.Text, [MyConfig]::Font.Regular, $ComboBoxFilterLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
  $ComboBoxFilterLabel.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

  If ($PSBoundParameters.ContainsKey("Properties"))
  {
    $FilterOptionNames = $Properties
  }
  Else
  {
    $FilterOptionNames = ($Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name
  }

  # ************************************************
  # ComboBoxFilter GroupBox
  # ************************************************
  #region $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()
  $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()
  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
  $ComboBoxFilterPanel.Controls.Add($ComboBoxFilterGroupBox)
  $ComboBoxFilterGroupBox.BackColor = [MyConfig]::Colors.Back
  $ComboBoxFilterGroupBox.Font = [MyConfig]::Font.Regular
  $ComboBoxFilterGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
  $ComboBoxFilterGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ComboBoxFilterLabel.Bottom + ([MyConfig]::FormSpacer * 2)))
  $ComboBoxFilterGroupBox.Name = "ComboBoxFilterGroupBox"
  $ComboBoxFilterGroupBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)
  #endregion $ComboBoxFilterGroupBox = [System.Windows.Forms.GroupBox]::New()

  #region ******** $ComboBoxFilterGroupBox Controls ********

  #region ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********
  Function Start-GetComboFilterComboBoxSelectedIndexChanged
  {
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control
    .DESCRIPTION
      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control
    .PARAMETER Sender
       The ComboBox Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ComboBox SelectedIndexChanged Event
    .EXAMPLE
       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ComboBox]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"

    [MyConfig]::AutoExit = 0

    $ValidItems = @($Items)
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidItems = @($ValidItems | Where-Object -FilterScript { $PSItem.($FilterOptionName) -like $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value })
    }

    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidItemNames = @($ValidItems | Select-Object -ExpandProperty $FilterOptionName -Unique)
      If ($FilterOptionName -ne $Sender.Name)
      {
        $RemoveList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { ($PSItem.Text -notin $ValidItemNames) -and ($PSItem.Value -ne "*") })
        ForEach ($RemoveItem In $RemoveList)
        {
          $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.Remove($RemoveItem)
        }
      }
      $HaveItemNames = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)
      $AddList = @($ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.Items | Where-Object -FilterScript { ($PSItem.Text -in $ValidItemNames) -and ($PSItem.Text -notin $HaveItemNames) })
      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items.AddRange($AddList)
    }

    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$GetSiteComboChoiceComboBox"
  }
  #endregion ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********

  $GroupBottom = [MyConfig]::Font.Height
  ForEach ($FilterOptionName In $FilterOptionNames)
  {
    #region $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()
    $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()
    $ComboBoxFilterGroupBox.Controls.Add($TmpFilterComboBox)
    $TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom")
    $TmpFilterComboBox.AutoSize = $True
    $TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack
    $TmpFilterComboBox.DisplayMember = "Text"
    $TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
    $TmpFilterComboBox.Font = [MyConfig]::Font.Regular
    $TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore
    [void]$TmpFilterComboBox.Items.Add([PSCustomObject]@{ "Text" = " - Return All $($FilterOptionName) Values - "; "Value" = "*" })
    $TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, $GroupBottom)
    $TmpFilterComboBox.Name = $FilterOptionName
    $TmpFilterComboBox.SelectedIndex = 0
    $TmpFilterComboBox.Size = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $TmpFilterComboBox.PreferredHeight)
    $TmpFilterComboBox.Sorted = $True
    $TmpFilterComboBox.TabIndex = 0
    $TmpFilterComboBox.TabStop = $True
    $TmpFilterComboBox.Tag = $Null
    $TmpFilterComboBox.ValueMember = "Value"
    #endregion $TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()

    $TmpFilterComboBox.SelectedIndex = 0
    $TmpFilterComboBox.Items.AddRange(@($Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty($PSITem.($FilterOptionName)) } | Sort-Object -Property $FilterOptionName -Unique | ForEach-Object -Process { [ComboBoxFilterItem]::New($PSITem.($FilterOptionName), $PSITem.($FilterOptionName)) }))
    $TmpFilterComboBox.Tag = @{ "Items" = @($TmpFilterComboBox.Items); "SelectedItem" = $Null }

    if (-not $NoFilter.IsPresent)
    {
      $TmpFilterComboBox.add_SelectedIndexChanged({ Start-GetComboFilterComboBoxSelectedIndexChanged -Sender $This -EventArg $PSItem })
    }

    $GroupBottom = ($TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)
  }

  $ComboBoxFilterGroupBox.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterGroupBox.ClientSize.Width, ($GroupBottom + [MyConfig]::FormSpacer))

  #endregion ******** $ComboBoxFilterGroupBox Controls ********

  ForEach ($FilterOptionName In $FilterOptionNames)
  {
    # $Sender
    If ($Selected.ContainsKey($FilterOptionName))
    {
      $TmpItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Items | Where-Object -FilterScript { $PSItem.Value -eq $Selected.($FilterOptionName) }
      If (-not [String]::IsNullOrEmpty($TmpItem.Text))
      {
        $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $TmpItem
      }
    }
    $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem
  }

  $TempClientSize = [System.Drawing.Size]::New(($ComboBoxFilterGroupBox.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterGroupBox.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ComboBoxFilterPanel Controls ********

  # ************************************************
  # ComboBoxFilterBtm Panel
  # ************************************************
  #region $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()
  $ComboBoxFilterForm.Controls.Add($ComboBoxFilterBtmPanel)
  $ComboBoxFilterBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ComboBoxFilterBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ComboBoxFilterBtmPanel.Name = "ComboBoxFilterBtmPanel"
  #endregion $ComboBoxFilterBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ComboBoxFilterBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ComboBoxFilterBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmLeftButton)
  $ComboBoxFilterBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $ComboBoxFilterBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxFilterBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxFilterBtmLeftButton.Font = [MyConfig]::Font.Bold
  $ComboBoxFilterBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxFilterBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ComboBoxFilterBtmLeftButton.Name = "ComboBoxFilterBtmLeftButton"
  $ComboBoxFilterBtmLeftButton.TabIndex = 1
  $ComboBoxFilterBtmLeftButton.TabStop = $True
  $ComboBoxFilterBtmLeftButton.Text = $ButtonLeft
  $ComboBoxFilterBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmLeftButton.PreferredSize.Height)
  #endregion $ComboBoxFilterBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********
  Function Start-ComboBoxFilterBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxFilterBtmLeft Button Control
      .DESCRIPTION
        Click Event for the ComboBoxFilterBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-ComboBoxFilterBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmLeftButton"

    [MyConfig]::AutoExit = 0

    $ValidateClick = 0
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ValidateClick = $ValidateClick + $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex
    }
    If ($ValidateClick -eq 0)
    {
      [Void][System.Windows.Forms.MessageBox]::Show($ComboBoxFilterForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }
    Else
    {
      $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }

    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmLeftButton"
  }
  #endregion ******** Function Start-ComboBoxFilterBtmLeftButtonClick ********
  $ComboBoxFilterBtmLeftButton.add_Click({ Start-ComboBoxFilterBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmMidButton)
  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ComboBoxFilterBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ComboBoxFilterBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxFilterBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxFilterBtmMidButton.Font = [MyConfig]::Font.Bold
  $ComboBoxFilterBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxFilterBtmMidButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ComboBoxFilterBtmMidButton.Name = "ComboBoxFilterBtmMidButton"
  $ComboBoxFilterBtmMidButton.TabIndex = 2
  $ComboBoxFilterBtmMidButton.TabStop = $True
  $ComboBoxFilterBtmMidButton.Text = $ButtonMid
  $ComboBoxFilterBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ComboBoxFilterBtmMidButton.PreferredSize.Height)
  #endregion $ComboBoxFilterBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxFilterBtmMidButtonClick ********
  Function Start-ComboBoxFilterBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxFilterBtmMid Button Control
      .DESCRIPTION
        Click Event for the ComboBoxFilterBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ComboBoxFilterBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmMidButton"

    [MyConfig]::AutoExit = 0

    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedIndex = 0
    }

    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem = $ComboBoxFilterGroupBox.Controls[$FilterOptionName].Tag.SelectedItem
    }

    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmMidButton"
  }
  #endregion ******** Function Start-ComboBoxFilterBtmMidButtonClick ********
  $ComboBoxFilterBtmMidButton.add_Click({ Start-ComboBoxFilterBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()
  $ComboBoxFilterBtmPanel.Controls.Add($ComboBoxFilterBtmRightButton)
  $ComboBoxFilterBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $ComboBoxFilterBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ComboBoxFilterBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ComboBoxFilterBtmRightButton.Font = [MyConfig]::Font.Bold
  $ComboBoxFilterBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ComboBoxFilterBtmRightButton.Location = [System.Drawing.Point]::New(($ComboBoxFilterBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ComboBoxFilterBtmRightButton.Name = "ComboBoxFilterBtmRightButton"
  $ComboBoxFilterBtmRightButton.TabIndex = 3
  $ComboBoxFilterBtmRightButton.TabStop = $True
  $ComboBoxFilterBtmRightButton.Text = $ButtonRight
  $ComboBoxFilterBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ComboBoxFilterBtmRightButton.PreferredSize.Height)
  #endregion $ComboBoxFilterBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ComboBoxFilterBtmRightButtonClick ********
  Function Start-ComboBoxFilterBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ComboBoxFilterBtmRight Button Control
      .DESCRIPTION
        Click Event for the ComboBoxFilterBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ComboBoxFilterBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    Param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ComboBoxFilterBtmRightButton"

    [MyConfig]::AutoExit = 0

    $ComboBoxFilterForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$ComboBoxFilterBtmRightButton"
  }
  #endregion ******** Function Start-ComboBoxFilterBtmRightButtonClick ********
  $ComboBoxFilterBtmRightButton.add_Click({ Start-ComboBoxFilterBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $ComboBoxFilterBtmPanel.ClientSize = [System.Drawing.Size]::New(($ComboBoxFilterBtmRightButton.Right + [MyConfig]::FormSpacer), ($ComboBoxFilterBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ComboBoxFilterBtmPanel Controls ********

  $ComboBoxFilterForm.ClientSize = [System.Drawing.Size]::New($ComboBoxFilterForm.ClientSize.Width, ($TempClientSize.Height + $ComboBoxFilterBtmPanel.Height))

  #endregion ******** Controls for ComboBoxFilter Form ********

  #endregion ******** End **** ComboBoxFilter **** End ********

  $DialogResult = $ComboBoxFilterForm.ShowDialog()
  If ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    $TmpHash = [HashTable]::New()
    ForEach ($FilterOptionName In $FilterOptionNames)
    {
      [Void]$TmpHash.Add($FilterOptionName, $ComboBoxFilterGroupBox.Controls[$FilterOptionName].SelectedItem.Value)
    }
    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, $TmpHash)
  }
  Else
  {
    [ComboBoxFilter]::New(($DialogResult -eq [System.Windows.Forms.DialogResult]::OK), $DialogResult, @{ })
  }

  $ComboBoxFilterForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-ComboBoxFilter"
}
#endregion function Get-ComboBoxFilter

# --------------------------------
# Get ListViewOption Function
# --------------------------------
#region ListViewOption Result Class
Class ListViewOption
{
  [Bool]$Success
  [Object]$DialogResult
  [Object]$Item

  ListViewOption ([Bool]$Success, [Object]$DialogResult, [Object]$Item)
  {
    $This.Success = $Success
    $This.DialogResult = $DialogResult
    $This.Item = $Item
  }
}
#endregion ListViewOption Result Class

#region function Get-ListViewOption
function Get-ListViewOption ()
{
  <#
    .SYNOPSIS
      Shows Get-ListViewOption
    .DESCRIPTION
      Shows Get-ListViewOption
    .PARAMETER Title
      Title of the Get-ListViewOption Dialog Window
    .PARAMETER Message
      Message to Show
    .PARAMETER Items
      Items to show in the ListVieww
    .PARAMETER Property
      Name of the Properties to Display
    .PARAMETER Tooltip
      ToolTip to Displays
    .PARAMETER SelectText
      Selected Text
    .PARAMETER Selected
      Selected ListView Items
    .PARAMETER Multi
      Allow Select Multiple Rows
    .PARAMETER Width
      Width of ListView Dialog Window
    .PARAMETER Height
      Height of ListView Dialog Window
    .PARAMETER Filter
      Show Filter TextBox
    .PARAMETER Resize
      Make ListView Dialog Window ReSixeable
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $Functions = @(Get-ChildItem -Path "Function:\")
      $DialogResult = Get-ListViewOption -Title "ListView Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Functions -Property "Name", "Version", "Source" -Selected ($Functions[2]) -Tooltip "Show this ToolTip" -Resize -Multi
      If ($DialogResult.Success)
      {
        # Success
      }
      Else
      {
        # Failed
      }
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$Message = "Status Message",
    [parameter(Mandatory = $True)]
    [Object[]]$Items = @(),
    [parameter(Mandatory = $True)]
    [String[]]$Property,
    [String]$Tooltip,
    [Object[]]$Selected = "xX NONE Xx",
    [Switch]$Multi,
    [Int]$Width = 50,
    [Int]$Height = 12,
    [Switch]$Filter,
    [Switch]$Resize,
    [Switch]$Required,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Get-ListViewOption"

  #region ******** Begin **** ListViewOption **** Begin ********

  # ************************************************
  # ListViewOption Form
  # ************************************************
  #region $ListViewOptionForm = [System.Windows.Forms.Form]::New()
  $ListViewOptionForm = [System.Windows.Forms.Form]::New()
  $ListViewOptionForm.BackColor = [MyConfig]::Colors.Back
  $ListViewOptionForm.Font = [MyConfig]::Font.Regular
  $ListViewOptionForm.ForeColor = [MyConfig]::Colors.Fore
  if ($Resize.IsPresent)
  {
    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
  }
  else
  {
    $ListViewOptionForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  }
  $ListViewOptionForm.Icon = $FCGForm.Icon
  $ListViewOptionForm.KeyPreview = $True
  $ListViewOptionForm.MaximizeBox = $False
  $ListViewOptionForm.MinimizeBox = $False
  $ListViewOptionForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), 0)
  $ListViewOptionForm.Name = "ListViewOptionForm"
  $ListViewOptionForm.Owner = $FCGForm
  $ListViewOptionForm.ShowInTaskbar = $False
  $ListViewOptionForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ListViewOptionForm.Text = $Title
  #endregion $ListViewOptionForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ListViewOptionFormKeyDown ********
  function Start-ListViewOptionFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the ListViewOption Form Control
      .DESCRIPTION
        KeyDown Event for the ListViewOption Form Control
      .PARAMETER Sender
        The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
        The Event Arguments for the Form KeyDown Event
      .EXAMPLE
        Start-ListViewOptionFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $ListViewOptionForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionForm"
  }
  #endregion ******** Function Start-ListViewOptionFormKeyDown ********
  $ListViewOptionForm.add_KeyDown({ Start-ListViewOptionFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ListViewOptionFormShown ********
  function Start-ListViewOptionFormShown
  {
    <#
      .SYNOPSIS
        Shown Event for the ListViewOption Form Control
      .DESCRIPTION
        Shown Event for the ListViewOption Form Control
      .PARAMETER Sender
        The Form Control that fired the Shown Event
      .PARAMETER EventArg
        The Event Arguments for the Form Shown Event
      .EXAMPLE
        Start-ListViewOptionFormShown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ListViewOptionForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$ListViewOptionForm"
  }
  #endregion ******** Function Start-ListViewOptionFormShown ********
  $ListViewOptionForm.add_Shown({ Start-ListViewOptionFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ListViewOption Form ********

  # ************************************************
  # ListViewOption Panel
  # ************************************************
  #region $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()
  $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()
  $ListViewOptionForm.Controls.Add($ListViewOptionPanel)
  $ListViewOptionPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ListViewOptionPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ListViewOptionPanel.Name = "ListViewOptionPanel"
  $ListViewOptionPanel.Text = "ListViewOptionPanel"
  #endregion $ListViewOptionPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ListViewOptionPanel Controls ********

  if ($PSBoundParameters.ContainsKey("Message"))
  {
    #region $ListViewOptionLabel = [System.Windows.Forms.Label]::New()
    $ListViewOptionLabel = [System.Windows.Forms.Label]::New()
    $ListViewOptionPanel.Controls.Add($ListViewOptionLabel)
    $ListViewOptionLabel.ForeColor = [MyConfig]::Colors.LabelFore
    $ListViewOptionLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
    $ListViewOptionLabel.Name = "ListViewOptionLabel"
    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)
    $ListViewOptionLabel.Text = $Message
    $ListViewOptionLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
    #endregion $ListViewOptionLabel = [System.Windows.Forms.Label]::New()

    # Returns the minimum size required to display the text
    $TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText($ListViewOptionLabel.Text, [MyConfig]::Font.Regular, $ListViewOptionLabel.Size, ([System.Windows.Forms.TextFormatFlags]("Top", "Left", "WordBreak")))
    $ListViewOptionLabel.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($TmpSize.Height + [MyConfig]::Font.Height))

    $TempBottom = $ListViewOptionLabel.Bottom + [MyConfig]::FormSpacer
  }
  else
  {
    $TempBottom = 0
  }

  #region $ListViewOptionListView = [System.Windows.Forms.ListView]::New()
  $ListViewOptionListView = [System.Windows.Forms.ListView]::New()
  $ListViewOptionPanel.Controls.Add($ListViewOptionListView)
  $ListViewOptionListView.BackColor = [MyConfig]::Colors.TextBack
  $ListViewOptionListView.CheckBoxes = $Multi.IsPresent
  $ListViewOptionListView.Font = [MyConfig]::Font.Bold
  $ListViewOptionListView.ForeColor = [MyConfig]::Colors.TextFore
  $ListViewOptionListView.FullRowSelect = $True
  $ListViewOptionListView.GridLines = $True
  $ListViewOptionListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable
  $ListViewOptionListView.HideSelection = $False
  $ListViewOptionListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($TempBottom + [MyConfig]::FormSpacer))
  $ListViewOptionListView.MultiSelect = $Multi.IsPresent
  $ListViewOptionListView.Name = "LAUListViewOptionListView"
  $ListViewOptionListView.OwnerDraw = $True
  $ListViewOptionListView.ShowGroups = $False
  $ListViewOptionListView.ShowItemToolTips = $PSBoundParameters.ContainsKey("ToolTip")
  $ListViewOptionListView.Size = [System.Drawing.Size]::New(($ListViewOptionPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * $Height))
  $ListViewOptionListView.Text = "LAUListViewOptionListView"
  $ListViewOptionListView.View = [System.Windows.Forms.View]::Details
  #endregion $ListViewOptionListView = [System.Windows.Forms.ListView]::New()

  #region ******** Function Start-ListViewOptionListViewDrawColumnHeader ********
  function Start-ListViewOptionListViewDrawColumnHeader
  {
    <#
      .SYNOPSIS
        DrawColumnHeader Event for the ListViewOption ListView Control
      .DESCRIPTION
        DrawColumnHeader Event for the ListViewOption ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawColumnHeader Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawColumnHeader Event
      .EXAMPLE
         Start-ListViewOptionListViewDrawColumnHeader -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawColumnHeader Event for `$ListViewOptionListView"

    [MyConfig]::AutoExit = 0

    $EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), $EventArg.Bounds)
    $EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), $EventArg.Bounds.X, $EventArg.Bounds.Y, $EventArg.Bounds.Width, ($EventArg.Bounds.Height - 1))
    $EventArg.Graphics.DrawString($EventArg.Header.Text, $Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), ($EventArg.Bounds.X + [MyConfig]::FormSpacer), ($EventArg.Bounds.Y + (($EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))

    Write-Verbose -Message "Exit DrawColumnHeader Event for `$ListViewOptionListView"
  }
  #endregion ******** Function Start-ListViewOptionListViewDrawColumnHeader ********
  $ListViewOptionListView.add_DrawColumnHeader({Start-ListViewOptionListViewDrawColumnHeader -Sender $This -EventArg $PSItem})

  #region ******** Function Start-ListViewOptionListViewDrawItem ********
  function Start-ListViewOptionListViewDrawItem
  {
    <#
      .SYNOPSIS
        DrawItem Event for the ListViewOption ListView Control
      .DESCRIPTION
        DrawItem Event for the ListViewOption ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawItem Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawItem Event
      .EXAMPLE
         Start-ListViewOptionListViewDrawItem -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawItem Event for `$ListViewOptionListView"

    [MyConfig]::AutoExit = 0

    # Return to Default Draw
    $EventArg.DrawDefault = $True

    Write-Verbose -Message "Exit DrawItem Event for `$ListViewOptionListView"
  }
  #endregion ******** Function Start-ListViewOptionListViewDrawItem ********
  $ListViewOptionListView.add_DrawItem({Start-ListViewOptionListViewDrawItem -Sender $This -EventArg $PSItem})

  #region ******** Function Start-ListViewOptionListViewDrawSubItem ********
  function Start-ListViewOptionListViewDrawSubItem
  {
    <#
      .SYNOPSIS
        DrawSubItem Event for the ListViewOption ListView Control
      .DESCRIPTION
        DrawSubItem Event for the ListViewOption ListView Control
      .PARAMETER Sender
         The ListView Control that fired the DrawSubItem Event
      .PARAMETER EventArg
         The Event Arguments for the ListView DrawSubItem Event
      .EXAMPLE
         Start-ListViewOptionListViewDrawSubItem -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By kensw
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter DrawSubItem Event for `$ListViewOptionListView"

    [MyConfig]::AutoExit = 0

    # Return to Default Draw
    $EventArg.DrawDefault = $True

    Write-Verbose -Message "Exit DrawSubItem Event for `$ListViewOptionListView"
  }
  #endregion ******** Function Start-ListViewOptionListViewDrawSubItem ********
  $ListViewOptionListView.add_DrawSubItem({Start-ListViewOptionListViewDrawSubItem -Sender $This -EventArg $PSItem})

  #region ******** Function Start-ListViewOptionListViewMouseDown ********
  function Start-ListViewOptionListViewMouseDown
  {
    <#
      .SYNOPSIS
        MouseDown Event for the IDP TreeView Control
      .DESCRIPTION
        MouseDown Event for the IDP TreeView Control
      .PARAMETER Sender
         The TreeView Control that fired the MouseDown Event
      .PARAMETER EventArg
         The Event Arguments for the TreeView MouseDown Event
      .EXAMPLE
         Start-ListViewOptionListViewMouseDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter MouseDown Event for `$ListViewOptionListView"

    [MyConfig]::AutoExit = 0

    If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)
    {
      if ($ListViewOptionListView.Items.Count -gt 0)
      {
        $ListViewOptionContextMenuStrip.Show($ListViewOptionListView, $EventArg.Location)
      }
    }

    Write-Verbose -Message "Exit MouseDown Event for `$ListViewOptionListView"
  }
  #endregion ******** Function Start-ListViewOptionListViewMouseDown ********
  $ListViewOptionListView.add_MouseDown({ Start-ListViewOptionListViewMouseDown -Sender $This -EventArg $PSItem })


  foreach ($PropName in $Property)
  {
    [Void]$ListViewOptionListView.Columns.Add($PropName, -2)
  }
  [Void]$ListViewOptionListView.Columns.Add(" ", ($ListViewOptionForm.Width * 2))

  ForEach ($Item in $Items)
  {
    ($ListViewOptionListView.Items.Add(($ListViewItem = [System.Windows.Forms.ListViewItem]::New("$($Item.($Property[0]))")))).SubItems.AddRange(@($Property[1..99] | ForEach-Object -Process { "$($Item.($PSItem))" }))
    $ListViewItem.Name = "$($Item.($Property[0]))"
    $ListViewItem.Tag = $Item
    $ListViewItem.Tooltiptext = "$($Item.($Tooltip))"
    $ListViewItem.Selected = ($Item -in $Selected)
    $ListViewItem.Checked = ($Multi.IsPresent -and $ListViewItem.Selected)
    $ListViewItem.Font = [MyConfig]::Font.Regular
  }
  $ListViewOptionListView.Tag = @($ListViewOptionListView.Items)

  If ($Filter.IsPresent)
  {
    #region $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()
    $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()
    $ListViewOptionPanel.Controls.Add($ListViewOptionFilterLabel)
    $ListViewOptionFilterLabel.AutoSize = $True
    $ListViewOptionFilterLabel.BackColor = [MyConfig]::Colors.Back
    $ListViewOptionFilterLabel.Font = [MyConfig]::Font.Regular
    $ListViewOptionFilterLabel.ForeColor = [MyConfig]::Colors.Fore
    $ListViewOptionFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))
    $ListViewOptionFilterLabel.Name = "ListViewOptionFilterLabel"
    $ListViewOptionFilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), $ListViewOptionFilterLabel.PreferredHeight)
    $ListViewOptionFilterLabel.Text = "Filter List:"
    $ListViewOptionFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight
    #endregion $ListViewOptionFilterLabel = [System.Windows.Forms.Label]::New()

    #region $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()
    $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()
    $ListViewOptionPanel.Controls.Add($ListViewOptionTextBox)
    $ListViewOptionTextBox.AutoSize = $False
    $ListViewOptionTextBox.BackColor = [MyConfig]::Colors.TextBack
    $ListViewOptionTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
    $ListViewOptionTextBox.Font = [MyConfig]::Font.Regular
    $ListViewOptionTextBox.ForeColor = [MyConfig]::Colors.TextFore
    $ListViewOptionTextBox.Location = [System.Drawing.Point]::New(($ListViewOptionFilterLabel.Right + [MyConfig]::FormSpacer), $ListViewOptionFilterLabel.Top)
    $ListViewOptionTextBox.MaxLength = 100
    $ListViewOptionTextBox.Name = "ListViewOptionTextBox"
    $ListViewOptionTextBox.Size = [System.Drawing.Size]::New(($ListViewOptionListView.Right - $ListViewOptionTextBox.Left), $ListViewOptionFilterLabel.Height)
    #$ListViewOptionTextBox.TabIndex = 0
    $ListViewOptionTextBox.TabStop = $False
    $ListViewOptionTextBox.Tag = @{ "HintText" = "Enter Text and Press [Enter] to Filter List Items."; "HintEnabled" = $True }
    $ListViewOptionTextBox.Text = ""
    $ListViewOptionTextBox.WordWrap = $False
    #endregion $ListViewOptionTextBox = [System.Windows.Forms.TextBox]::New()

    #region ******** Function Start-ListViewOptionTextBoxGotFocus ********
    Function Start-ListViewOptionTextBoxGotFocus
    {
      <#
        .SYNOPSIS
          GotFocus Event for the ListViewOption TextBox Control
        .DESCRIPTION
          GotFocus Event for the ListViewOption TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the GotFocus Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox GotFocus Event
        .EXAMPLE
           Start-ListViewOptionTextBoxGotFocus -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter GotFocus Event for `$ListViewOptionTextBox"

      [MyConfig]::AutoExit = 0

      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
      If ($Sender.Tag.HintEnabled)
      {
        $Sender.Text = ""
        $Sender.Font = [MyConfig]::Font.Regular
        $Sender.ForeColor = [MyConfig]::Colors.TextFore
      }

      Write-Verbose -Message "Exit GotFocus Event for `$ListViewOptionTextBox"
    }
    #endregion ******** Function Start-ListViewOptionTextBoxGotFocus ********
    $ListViewOptionTextBox.add_GotFocus({ Start-ListViewOptionTextBoxGotFocus -Sender $This -EventArg $PSItem })

    #region ******** Function Start-ListViewOptionTextBoxKeyDown ********
    Function Start-ListViewOptionTextBoxKeyDown
    {
      <#
        .SYNOPSIS
          KeyDown Event for the ListViewOption TextBox Control
        .DESCRIPTION
          KeyDown Event for the ListViewOption TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the KeyDown Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox KeyDown Event
        .EXAMPLE
           Start-ListViewOptionTextBoxKeyDown -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter KeyDown Event for `$ListViewOptionTextBox"

      [MyConfig]::AutoExit = 0

      If ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
      {
        # Suppress KeyPress
        $EventArg.SuppressKeyPress = $True

        If ([String]::IsNullOrEmpty($Sender.Text.Trim()))
        {
          $ListViewOptionListView.Items.Clear()
          $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)
        }
        else
        {
          $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $Sender.Text) -or ($PSItem.SubItems[1].Text -Match $Sender.Text) })
          $ListViewOptionListView.Items.Clear()
          $ListViewOptionListView.Items.AddRange($TmpNewList)
        }
      }

      Write-Verbose -Message "Exit KeyDown Event for `$ListViewOptionTextBox"
    }
    #endregion ******** Function Start-ListViewOptionTextBoxKeyDown ********
    $ListViewOptionTextBox.add_KeyDown({ Start-ListViewOptionTextBoxKeyDown -Sender $This -EventArg $PSItem })

    #region ******** Function Start-ListViewOptionTextBoxLostFocus ********
    Function Start-ListViewOptionTextBoxLostFocus
    {
      <#
        .SYNOPSIS
          LostFocus Event for the ListViewOption TextBox Control
        .DESCRIPTION
          LostFocus Event for the ListViewOption TextBox Control
        .PARAMETER Sender
           The TextBox Control that fired the LostFocus Event
        .PARAMETER EventArg
           The Event Arguments for the TextBox LostFocus Event
        .EXAMPLE
           Start-ListViewOptionTextBoxLostFocus -Sender $Sender -EventArg $EventArg
        .NOTES
          Original Function By ken.sweet
      #>
      [CmdletBinding()]
      Param (
        [parameter(Mandatory = $True)]
        [System.Windows.Forms.TextBox]$Sender,
        [parameter(Mandatory = $True)]
        [Object]$EventArg
      )
      Write-Verbose -Message "Enter LostFocus Event for `$ListViewOptionTextBox"

      [MyConfig]::AutoExit = 0

      # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
      If ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
      {
        $Sender.Text = $Sender.Tag.HintText
        $Sender.Tag.HintEnabled = $True
        $Sender.Font = [MyConfig]::Font.Hint
        $Sender.ForeColor = [MyConfig]::Colors.TextHint

        $ListViewOptionListView.Items.Clear()
        $ListViewOptionListView.Items.AddRange($ListViewOptionListView.Tag)
      }
      Else
      {
        $Sender.Tag.HintEnabled = $False
        $Sender.Font = [MyConfig]::Font.Regular
        $Sender.ForeColor = [MyConfig]::Colors.TextFore

        $TmpNewList = @($ListViewOptionListView.Tag | Where-Object -FilterScript { ($PSItem.Text -Match $ListViewOptionTextBox.Text) -or ($PSItem.SubItems[1].Text -Match $ListViewOptionTextBox.Text) })
        $ListViewOptionListView.Items.Clear()
        $ListViewOptionListView.Items.AddRange($TmpNewList)
      }

      Write-Verbose -Message "Exit LostFocus Event for `$ListViewOptionTextBox"
    }
    #endregion ******** Function Start-ListViewOptionTextBoxLostFocus ********
    $ListViewOptionTextBox.add_LostFocus({ Start-ListViewOptionTextBoxLostFocus -Sender $This -EventArg $PSItem })

    Start-ListViewOptionTextBoxLostFocus -Sender $ListViewOptionTextBox -EventArg "Lost Focus"

    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionTextBox.Right + [MyConfig]::FormSpacer), ($ListViewOptionTextBox.Bottom + [MyConfig]::FormSpacer))
  }
  Else
  {
    $TempClientSize = [System.Drawing.Size]::New(($ListViewOptionListView.Right + [MyConfig]::FormSpacer), ($ListViewOptionListView.Bottom + [MyConfig]::FormSpacer))
  }

  # ************************************************
  # ListViewOption ContextMenuStrip
  # ************************************************
  #region $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
  #$ListViewOptionListView.Controls.Add($ListViewOptionContextMenuStrip)
  $ListViewOptionContextMenuStrip.BackColor = [MyConfig]::Colors.Back
  #$ListViewOptionContextMenuStrip.Enabled = $True
  $ListViewOptionContextMenuStrip.Font = [MyConfig]::Font.Regular
  $ListViewOptionContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
  $ListViewOptionContextMenuStrip.ImageList = $FCGSmallImageList
  $ListViewOptionContextMenuStrip.Name = "ListViewOptionContextMenuStrip"
  #endregion $ListViewOptionContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

  #region ******** Function Start-ListViewOptionContextMenuStripOpening ********
  function Start-ListViewOptionContextMenuStripOpening
  {
    <#
      .SYNOPSIS
        Opening Event for the ListViewOption ContextMenuStrip Control
      .DESCRIPTION
        Opening Event for the ListViewOption ContextMenuStrip Control
      .PARAMETER Sender
         The ContextMenuStrip Control that fired the Opening Event
      .PARAMETER EventArg
         The Event Arguments for the ContextMenuStrip Opening Event
      .EXAMPLE
         Start-ListViewOptionContextMenuStripOpening -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ContextMenuStrip]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Opening Event for `$ListViewOptionContextMenuStrip"

    [MyConfig]::AutoExit = 0

    #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

    Write-Verbose -Message "Exit Opening Event for `$ListViewOptionContextMenuStrip"
  }
  #endregion ******** Function Start-ListViewOptionContextMenuStripOpening ********
  $ListViewOptionContextMenuStrip.add_Opening({Start-ListViewOptionContextMenuStripOpening -Sender $This -EventArg $PSItem})

  #region ******** Function Start-ListViewOptionContextMenuStripItemClick ********
  function Start-ListViewOptionContextMenuStripItemClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListViewOption ToolStripItem Control
      .DESCRIPTION
        Click Event for the ListViewOption ToolStripItem Control
      .PARAMETER Sender
         The ToolStripItem Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the ToolStripItem Click Event
      .EXAMPLE
         Start-ListViewOptionContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By ken.sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ToolStripItem]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListViewOptionContextMenuStripItem"

    [MyConfig]::AutoExit = 0

    switch ($Sender.Name)
    {
      "CheckAll"
      {
        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { -not $PSItem.Checked })
        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $True }
        Break
      }
      "UnCheckAll"
      {
        $TmpChecked = @($ListViewOptionListView.Items | Where-Object -FilterScript { $PSItem.Checked })
        $TmpChecked | ForEach-Object -Process { $PSItem.Checked = $False }
        Break
      }
    }

    Write-Verbose -Message "Exit Click Event for `$ListViewOptionContextMenuStripItem"
  }
  #endregion ******** Function Start-ListViewOptionContextMenuStripItemClick ********
  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})
  (New-MenuItem -Menu $ListViewOptionContextMenuStrip -Text "Uncheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({Start-ListViewOptionContextMenuStripItemClick -Sender $This -EventArg $PSItem})

  #endregion ******** $ListViewOptionPanel Controls ********

  # ************************************************
  # ListViewOptionBtm Panel
  # ************************************************
  #region $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()
  $ListViewOptionForm.Controls.Add($ListViewOptionBtmPanel)
  $ListViewOptionBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ListViewOptionBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ListViewOptionBtmPanel.Name = "ListViewOptionBtmPanel"
  #endregion $ListViewOptionBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ListViewOptionBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($ListViewOptionBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmLeftButton)
  $ListViewOptionBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $ListViewOptionBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListViewOptionBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListViewOptionBtmLeftButton.Font = [MyConfig]::Font.Bold
  $ListViewOptionBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListViewOptionBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ListViewOptionBtmLeftButton.Name = "ListViewOptionBtmLeftButton"
  $ListViewOptionBtmLeftButton.TabIndex = 1
  $ListViewOptionBtmLeftButton.TabStop = $True
  $ListViewOptionBtmLeftButton.Text = $ButtonLeft
  $ListViewOptionBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmLeftButton.PreferredSize.Height)
  #endregion $ListViewOptionBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListViewOptionBtmLeftButtonClick ********
  function Start-ListViewOptionBtmLeftButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListViewOptionBtmLeft Button Control
      .DESCRIPTION
        Click Event for the ListViewOptionBtmLeft Button Control
      .PARAMETER Sender
         The Button Control that fired the Click Event
      .PARAMETER EventArg
         The Event Arguments for the Button Click Event
      .EXAMPLE
         Start-ListViewOptionBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if ((($ListViewOptionListView.CheckedItems.Count -gt 0) -and ((-not $Multi.IsPresent) -or $Multi.IsPresent)) -or (-not $Required.IsPresent))
    {
      $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($ListViewOptionForm, "Missing or Invalid Value.", [MyConfig]::ScriptName, "OK", "Warning")
    }

    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmLeftButton"
  }
  #endregion ******** Function Start-ListViewOptionBtmLeftButtonClick ********
  $ListViewOptionBtmLeftButton.add_Click({ Start-ListViewOptionBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmMidButton)
  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ListViewOptionBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $ListViewOptionBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListViewOptionBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListViewOptionBtmMidButton.Font = [MyConfig]::Font.Bold
  $ListViewOptionBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListViewOptionBtmMidButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ListViewOptionBtmMidButton.Name = "ListViewOptionBtmMidButton"
  $ListViewOptionBtmMidButton.TabIndex = 2
  $ListViewOptionBtmMidButton.TabStop = $True
  $ListViewOptionBtmMidButton.Text = $ButtonMid
  $ListViewOptionBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $ListViewOptionBtmMidButton.PreferredSize.Height)
  #endregion $ListViewOptionBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListViewOptionBtmMidButtonClick ********
  function Start-ListViewOptionBtmMidButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListViewOptionBtmMid Button Control
      .DESCRIPTION
        Click Event for the ListViewOptionBtmMid Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ListViewOptionBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmMidButton"

    [MyConfig]::AutoExit = 0

    if ([String]::IsNullOrEmpty($Selected))
    {
      $ListViewOptionListView.SelectedItems.Clear()
      $ListViewOptionListView.Items | ForEach-Object -Process { $PSItem.Checked = $False }
    }
    else
    {
      foreach ($Item in $ListViewOptionListView.Items)
      {
        $Item.Selected = ($Item.Tag -in $Selected)
        $Item.Checked = ($Multi.IsPresent -and $Item.Selected)
      }
    }
    $ListViewOptionListView.Refresh()
    $ListViewOptionListView.Select()

    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmMidButton"
  }
  #endregion ******** Function Start-ListViewOptionBtmMidButtonClick ********
  $ListViewOptionBtmMidButton.add_Click({ Start-ListViewOptionBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()
  $ListViewOptionBtmPanel.Controls.Add($ListViewOptionBtmRightButton)
  $ListViewOptionBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $ListViewOptionBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $ListViewOptionBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $ListViewOptionBtmRightButton.Font = [MyConfig]::Font.Bold
  $ListViewOptionBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $ListViewOptionBtmRightButton.Location = [System.Drawing.Point]::New(($ListViewOptionBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $ListViewOptionBtmRightButton.Name = "ListViewOptionBtmRightButton"
  $ListViewOptionBtmRightButton.TabIndex = 3
  $ListViewOptionBtmRightButton.TabStop = $True
  $ListViewOptionBtmRightButton.Text = $ButtonRight
  $ListViewOptionBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $ListViewOptionBtmRightButton.PreferredSize.Height)
  #endregion $ListViewOptionBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-ListViewOptionBtmRightButtonClick ********
  function Start-ListViewOptionBtmRightButtonClick
  {
    <#
      .SYNOPSIS
        Click Event for the ListViewOptionBtmRight Button Control
      .DESCRIPTION
        Click Event for the ListViewOptionBtmRight Button Control
      .PARAMETER Sender
        The Button Control that fired the Click Event
      .PARAMETER EventArg
        The Event Arguments for the Button Click Event
      .EXAMPLE
        Start-ListViewOptionBtmRightButtonClick -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By MyUserName)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ListViewOptionBtmRightButton"

    [MyConfig]::AutoExit = 0

    # Cancel Code Goes here

    $ListViewOptionForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$ListViewOptionBtmRightButton"
  }
  #endregion ******** Function Start-ListViewOptionBtmRightButtonClick ********
  $ListViewOptionBtmRightButton.add_Click({ Start-ListViewOptionBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $ListViewOptionBtmPanel.ClientSize = [System.Drawing.Size]::New(($ListViewOptionBtmRightButton.Right + [MyConfig]::FormSpacer), ($ListViewOptionBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ListViewOptionBtmPanel Controls ********

  $ListViewOptionForm.ClientSize = [System.Drawing.Size]::New($ListViewOptionForm.ClientSize.Width, ($TempClientSize.Height + $ListViewOptionBtmPanel.Height))
  $ListViewOptionForm.MinimumSize = $ListViewOptionForm.Size
  $ListViewOptionListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  If ($Filter.IsPresent)
  {
    $ListViewOptionFilterLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom")
    $ListViewOptionTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Left, Bottom, Right")
  }

  #endregion ******** Controls for ListViewOption Form ********

  #endregion ******** End **** ListViewOption **** End ********

  $DialogResult = $ListViewOptionForm.ShowDialog($FCGForm)
  if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
  {
    if ($Multi.IsPresent)
    {
      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.CheckedItems | Select-Object -ExpandProperty "Tag"))
    }
    else
    {
      [ListViewOption]::New($True, $DialogResult, ($ListViewOptionListView.SelectedItems | Select-Object -ExpandProperty "Tag"))
    }
  }
  else
  {
    [ListViewOption]::New($False, $DialogResult, "")
  }

  $ListViewOptionForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Get-ListViewOption"
}
#endregion function Get-ListViewOption

# --------------------------------
# Extract System Icon Function
# --------------------------------
#region ******** SystemIcon Result Class ********
Class SystemIcon
{
  [Bool]$Success
  [Object]$DialogResult
  [String]$IconPath
  [Int[]]$IconIndex

  SystemIcon ([Object]$DialogResult)
  {
    $This.Success = $False
    $This.DialogResult = $DialogResult
  }

  SystemIcon ([Object]$DialogResult, [String]$IconPath, [Int[]]$IconIndex)
  {
    $This.Success = $True
    $This.DialogResult = $DialogResult
    $This.IconPath = $IconPath
    $This.IconIndex = $IconIndex
  }
}
#endregion ******** SystemIcon Result Class ********

#region function Export-SystemIcon
function Export-SystemIcon ()
{
  <#
    .SYNOPSIS
      Shows Export-SystemIcon
    .DESCRIPTION
      Shows Export-SystemIcon
    .PARAMETER Title
      Title of the Export-SystemIcon Window
    .PARAMETER FileMessage
      Text to show above Selected Icon Libtary
    .PARAMETER IconMessage
      Text to show above Icons
    .PARAMETER IconPath
      Name / Path to Icon Libary File
    .PARAMETER IconIndex
      Icon Number in Icon Libary
    .PARAMETER Multi
      Allow select Multiple icons
    .PARAMETER Width
      Width of Export-SystemIcon Window
    .PARAMETER Height
      Height of Export-SystemIcon Window
    .PARAMETER ButtonLeft
      Left Button DaialogResult
    .PARAMETER ButtonMid
      Missing Button DaialogResult
    .PARAMETER ButtonRight
      Right Button DaialogResult
    .EXAMPLE
      $Return = Export-SystemIcon -Title $Title
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$FileMessage = "Selected Icon File / Library",
    [String]$IconMessage = "File / Library Icons...",
    [String]$IconPath = "",
    [Int[]]$IconIndex = -1,
    [Switch]$Multi,
    [ValidateRange(35, 60)]
    [Int]$Width = 30,
    [ValidateRange(25, 35)]
    [Int]$Height = 25,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Export-SystemIcon"

  #region ******** Begin **** SystemIcon **** Begin ********

  $SystemIconFormComponents = [System.ComponentModel.Container]::New()

  # ************************************************
  # SystemIcon ImageList
  # ************************************************
  #region $SystemIconImageList = [System.Windows.Forms.ImageList]::New()
  $SystemIconImageList = [System.Windows.Forms.ImageList]::New($SystemIconFormComponents)
  $SystemIconImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit
  $SystemIconImageList.ImageSize = [System.Drawing.Size]::New(32, 32)
  #endregion $SystemIconImageList = [System.Windows.Forms.ImageList]::New()

  # ************************************************
  # SystemIcon Form
  # ************************************************
  #region $SystemIconForm = [System.Windows.Forms.Form]::New()
  $SystemIconForm = [System.Windows.Forms.Form]::New()
  $SystemIconForm.BackColor = [MyConfig]::Colors.Back
  $SystemIconForm.Font = [MyConfig]::Font.Regular
  $SystemIconForm.ForeColor = [MyConfig]::Colors.Fore
  $SystemIconForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $SystemIconForm.Icon = $FCGForm.Icon
  $SystemIconForm.KeyPreview = $True
  $SystemIconForm.MaximizeBox = $False
  $SystemIconForm.MinimizeBox = $False
  $SystemIconForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $SystemIconForm.Name = "SystemIconForm"
  $SystemIconForm.Owner = $FCGForm
  $SystemIconForm.ShowInTaskbar = $False
  $SystemIconForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $SystemIconForm.Text = $Title
  #endregion $SystemIconForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-SystemIconFormKeyDown ********
  function Start-SystemIconFormKeyDown
  {
  <#
    .SYNOPSIS
      KeyDown Event for the SystemIcon Form Control
    .DESCRIPTION
      KeyDown Event for the SystemIcon Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-SystemIconFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$SystemIconForm"

    [MyConfig]::AutoExit = 0

    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $SystemIconForm.Close()
    }

    Write-Verbose -Message "Exit KeyDown Event for `$SystemIconForm"
  }
  #endregion ******** Function Start-SystemIconFormKeyDown ********
  $SystemIconForm.add_KeyDown({ Start-SystemIconFormKeyDown -Sender $This -EventArg $PSItem })

  #region ******** Function Start-SystemIconFormMove ********
  function Start-SystemIconFormMove
  {
  <#
    .SYNOPSIS
      Move Event for the SystemIcon Form Control
    .DESCRIPTION
      Move Event for the SystemIcon Form Control
    .PARAMETER Sender
       The Form Control that fired the Move Event
    .PARAMETER EventArg
       The Event Arguments for the Form Move Event
    .EXAMPLE
       Start-SystemIconFormMove -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Move Event for `$SystemIconForm"

    [MyConfig]::AutoExit = 0

    Write-Verbose -Message "Exit Move Event for `$SystemIconForm"
  }
  #endregion ******** Function Start-SystemIconFormMove ********
  $SystemIconForm.add_Move({ Start-SystemIconFormMove -Sender $This -EventArg $PSItem })

  #region ******** Function Start-SystemIconFormShown ********
  function Start-SystemIconFormShown
  {
  <#
    .SYNOPSIS
      Shown Event for the SystemIcon Form Control
    .DESCRIPTION
      Shown Event for the SystemIcon Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-SystemIconFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$SystemIconForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    $TempIconPath = "$($SystemIconFileTextBox.Text)".Trim()
    $TempIconIndex = @($SystemIconFileTextBox.Tag)

    if (-not [String]::IsNullOrEmpty($TempIconPath))
    {
      if ([System.IO.File]::Exists($TempIconPath))
      {
        $TempIconCount = [Extract.MyIcon]::IconCount($TempIconPath)
        $SystemIconIconListView.BeginUpdate()
        For ($Count = 0; $Count -lt $TempIconCount; $Count++)
        {
          $SystemIconImageList.Images.Add(([Extract.MyIcon]::IconReturn($TempIconPath, $Count, $True)))
          [Void]($SystemIconIconListView.Items.Add("$("{0:###00}" -f $Count)", $Count))
        }
        $SystemIconIconListView.EndUpdate()

        if ($SystemIconIconListView.CheckBoxes)
        {
          if ($TempIconIndex.Count -and ($TempIconIndex[0] -gt -1))
          {
            $TempIconIndex | ForEach-Object -Process { $SystemIconIconListView.Items[$PSItem].Checked = $True }
          }
        }
        else
        {
          if ($TempIconIndex[0] -gt -1)
          {
            $SystemIconIconListView.Items[$TempIconIndex[0]].Selected = $True
            $SystemIconIconListView.Select()
            $SystemIconIconListView.Items[$TempIconIndex[0]].EnsureVisible()
          }
        }
      }
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Shown Event for `$SystemIconForm"
  }
  #endregion ******** Function Start-SystemIconFormShown ********
  $SystemIconForm.add_Shown({ Start-SystemIconFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for SystemIcon Form ********

  # ************************************************
  # SystemIcon Panel
  # ************************************************
  #region $SystemIconPanel = [System.Windows.Forms.Panel]::New()
  $SystemIconPanel = [System.Windows.Forms.Panel]::New()
  $SystemIconForm.Controls.Add($SystemIconPanel)
  $SystemIconPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $SystemIconPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $SystemIconPanel.Name = "SystemIconPanel"
  #endregion $SystemIconPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $SystemIconPanel Controls ********

  #region $SystemIconFileLabel = [System.Windows.Forms.Label]::New()
  $SystemIconFileLabel = [System.Windows.Forms.Label]::New()
  $SystemIconPanel.Controls.Add($SystemIconFileLabel)
  $SystemIconFileLabel.AutoSize = $True
  $SystemIconFileLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $SystemIconFileLabel.Name = "SystemIconFileLabel"
  $SystemIconFileLabel.TabStop = $False
  $SystemIconFileLabel.Text = $FileMessage
  $SystemIconFileLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $SystemIconFileLabel = [System.Windows.Forms.Label]::New()

  #region $SystemIconFileButton = [System.Windows.Forms.Button]::New()
  $SystemIconFileButton = [System.Windows.Forms.Button]::New()
  $SystemIconPanel.Controls.Add($SystemIconFileButton)
  $SystemIconFileButton.AutoSize = $True
  $SystemIconFileButton.BackColor = [MyConfig]::Colors.ButtonBack
  $SystemIconFileButton.Font = [MyConfig]::Font.Bold
  $SystemIconFileButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $SystemIconFileButton.Name = "SystemIconFileButton"
  $SystemIconFileButton.TabIndex = 0
  $SystemIconFileButton.TabStop = $True
  $SystemIconFileButton.Text = "  &Browse...  "
  $SystemIconFileButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $SystemIconFileButton.Location = [System.Drawing.Point]::New(($SystemIconPanel.ClientSize.Width - ($SystemIconFileButton.Width + [MyConfig]::FormSpacer)), ($SystemIconFileLabel.Bottom + [MyConfig]::FormSpacer))
  #endregion $SystemIconFileButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-SystemIconFileButtonClick ********
  function Start-SystemIconFileButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the SystemIconFile Button Control
    .DESCRIPTION
      Click Event for the SystemIconFile Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-SystemIconFileButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$SystemIconFileButton"

    [MyConfig]::AutoExit = 0

    $FCGOpenFileDialog.Title = "Extact Icons"
    $FCGOpenFileDialog.Filter = "All Icon Files|*.ico;*.exe;*.dll|Icon Files|*.ico|EXE Files|*.exe|DLL Files|*.dll|All Files|*.*"
    $FCGOpenFileDialog.FilterIndex = 0
    $FCGOpenFileDialog.FileName = ""
    If ($FCGOpenFileDialog.ShowDialog($FCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $FCGOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($FCGOpenFileDialog.FileName)
      $SystemIconImageList.Images.Clear()
      $SystemIconIconListView.Items.Clear()

      $TempIconPath = "$($FCGOpenFileDialog.FileName)".Trim()
      $TempIconCount = [Extract.MyIcon]::IconCount($TempIconPath)
      $SystemIconIconListView.BeginUpdate()
      For ($Count = 0; $Count -lt $TempIconCount; $Count++)
      {
        $SystemIconImageList.Images.Add(([Extract.MyIcon]::IconReturn($TempIconPath, $Count, $True)))
        [Void]($SystemIconIconListView.Items.Add("$("{0:###00}" -f $Count)", $Count))
      }
      $SystemIconIconListView.EndUpdate()
      $SystemIconFileTextBox.Text = $TempIconPath
      $SystemIconFileTextBox.Tag = @(-1)
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Click Event for `$SystemIconFileButton"
  }
  #endregion ******** Function Start-SystemIconFileButtonClick ********
  $SystemIconFileButton.add_Click({ Start-SystemIconFileButtonClick -Sender $This -EventArg $PSItem })

  #region $SystemIconFileTextBox = [System.Windows.Forms.TextBox]::New()
  $SystemIconFileTextBox = [System.Windows.Forms.TextBox]::New()
  $SystemIconPanel.Controls.Add($SystemIconFileTextBox)
  $SystemIconFileTextBox.AutoSize = $False
  $SystemIconFileTextBox.BackColor = [MyConfig]::Colors.TextBack
  $SystemIconFileTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $SystemIconFileTextBox.Font = [MyConfig]::Font.Regular
  $SystemIconFileTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $SystemIconFileTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($SystemIconFileLabel.Bottom + [MyConfig]::FormSpacer))
  $SystemIconFileTextBox.Name = "SystemIconFileTextBox"
  $SystemIconFileTextBox.ReadOnly = $True
  $SystemIconFileTextBox.Size = [System.Drawing.Size]::New((($SystemIconFileButton.Left - [MyConfig]::FormSpacer) - $SystemIconFileTextBox.Left), $SystemIconFileButton.Height)
  $SystemIconFileTextBox.TabStop = $False
  $SystemIconFileTextBox.Text = $IconPath
  $SystemIconFileTextBox.Tag = $IconIndex
  $SystemIconFileTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left
  $SystemIconFileTextBox.WordWrap = $False
  #endregion $SystemIconFileTextBox = [System.Windows.Forms.TextBox]::New()

  #region $SystemIconIconLabel = [System.Windows.Forms.Label]::New()
  $SystemIconIconLabel = [System.Windows.Forms.Label]::New()
  $SystemIconPanel.Controls.Add($SystemIconIconLabel)
  $SystemIconIconLabel.AutoSize = $True
  $SystemIconIconLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($SystemIconFileTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  $SystemIconIconLabel.Name = "SystemIconIconLabel"
  $SystemIconIconLabel.TabStop = $False
  $SystemIconIconLabel.Text = $IconMessage
  $SystemIconIconLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $SystemIconIconLabel = [System.Windows.Forms.Label]::New()

  #region $SystemIconIconListView = [System.Windows.Forms.ListView]::New()
  $SystemIconIconListView = [System.Windows.Forms.ListView]::New()
  $SystemIconPanel.Controls.Add($SystemIconIconListView)
  $SystemIconIconListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  $SystemIconIconListView.BackColor = [MyConfig]::Colors.TextBack
  $SystemIconIconListView.CheckBoxes = $Multi.IsPresent
  $SystemIconIconListView.Font = [MyConfig]::Font.Bold
  $SystemIconIconListView.ForeColor = [MyConfig]::Colors.TextFore
  $SystemIconIconListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::None
  $SystemIconIconListView.HideSelection = $False
  $SystemIconIconListView.LabelWrap = $False
  $SystemIconIconListView.LargeImageList = $SystemIconImageList
  $SystemIconIconListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($SystemIconIconLabel.Bottom + [MyConfig]::FormSpacer))
  $SystemIconIconListView.MultiSelect = $Multi.IsPresent
  $SystemIconIconListView.Name = "SystemIconIconListView"
  $SystemIconIconListView.ShowGroups = $False
  $SystemIconIconListView.Size = [System.Drawing.Size]::New(($SystemIconPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (($SystemIconPanel.ClientSize.Height - [MyConfig]::FormSpacer) - $SystemIconIconListView.Top))
  $SystemIconIconListView.Sorting = [System.Windows.Forms.SortOrder]::None
  $SystemIconIconListView.TabIndex = 1
  $SystemIconIconListView.TabStop = $True
  $SystemIconIconListView.Text = "SystemIconIconListView"
  $SystemIconIconListView.View = [System.Windows.Forms.View]::LargeIcon
  #endregion $SystemIconIconListView = [System.Windows.Forms.ListView]::New()

  #region ******** Function Start-SystemIconIconListViewSelectedIndexChanged ********
  function Start-SystemIconIconListViewSelectedIndexChanged
  {
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the SystemIconIcon ListView Control
    .DESCRIPTION
      SelectedIndexChanged Event for the SystemIconIcon ListView Control
    .PARAMETER Sender
       The ListView Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ListView SelectedIndexChanged Event
    .EXAMPLE
       Start-SystemIconIconListViewSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$SystemIconIconListView"

    [MyConfig]::AutoExit = 0

    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$SystemIconIconListView"
  }
  #endregion ******** Function Start-SystemIconIconListViewSelectedIndexChanged ********
  $SystemIconIconListView.add_SelectedIndexChanged({ Start-SystemIconIconListViewSelectedIndexChanged -Sender $This -EventArg $PSItem })

  #endregion ******** $SystemIconPanel Controls ********

  # ************************************************
  # SystemIconBtm Panel
  # ************************************************
  #region $SystemIconBtmPanel = [System.Windows.Forms.Panel]::New()
  $SystemIconBtmPanel = [System.Windows.Forms.Panel]::New()
  $SystemIconForm.Controls.Add($SystemIconBtmPanel)
  $SystemIconBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $SystemIconBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $SystemIconBtmPanel.Name = "SystemIconBtmPanel"
  #endregion $SystemIconBtmPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $SystemIconBtmPanel Controls ********

  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($SystemIconBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons

  #region $SystemIconBtmLeftButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmLeftButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmPanel.Controls.Add($SystemIconBtmLeftButton)
  $SystemIconBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $SystemIconBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $SystemIconBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $SystemIconBtmLeftButton.Font = [MyConfig]::Font.Bold
  $SystemIconBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $SystemIconBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $SystemIconBtmLeftButton.Name = "SystemIconBtmLeftButton"
  $SystemIconBtmLeftButton.TabIndex = 2
  $SystemIconBtmLeftButton.TabStop = $True
  $SystemIconBtmLeftButton.Text = $ButtonLeft
  $SystemIconBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $SystemIconBtmLeftButton.PreferredSize.Height)
  #endregion $SystemIconBtmLeftButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-SystemIconBtmLeftButtonClick ********
  function Start-SystemIconBtmLeftButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the SystemIconBtmLeft Button Control
    .DESCRIPTION
      Click Event for the SystemIconBtmLeft Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-SystemIconBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$SystemIconBtmLeftButton"

    [MyConfig]::AutoExit = 0

    if (($SystemIconIconListView.CheckedIndices.Count -and $SystemIconIconListView.CheckBoxes) -or ($SystemIconIconListView.SelectedIndices.Count -and (-not $SystemIconIconListView.CheckBoxes)))
    {
      $SystemIconForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($SystemIconForm, "No Icons Selected", [MyConfig]::ScriptName, "OK", "Warning")
    }


    Write-Verbose -Message "Exit Click Event for `$SystemIconBtmLeftButton"
  }
  #endregion ******** Function Start-SystemIconBtmLeftButtonClick ********
  $SystemIconBtmLeftButton.add_Click({ Start-SystemIconBtmLeftButtonClick -Sender $This -EventArg $PSItem })

  #region $SystemIconBtmMidButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmMidButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmPanel.Controls.Add($SystemIconBtmMidButton)
  $SystemIconBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $SystemIconBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $SystemIconBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $SystemIconBtmMidButton.Font = [MyConfig]::Font.Bold
  $SystemIconBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $SystemIconBtmMidButton.Location = [System.Drawing.Point]::New(($SystemIconBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $SystemIconBtmMidButton.Name = "SystemIconBtmMidButton"
  $SystemIconBtmMidButton.TabIndex = 3
  $SystemIconBtmMidButton.TabStop = $True
  $SystemIconBtmMidButton.Text = $ButtonMid
  $SystemIconBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $SystemIconBtmMidButton.PreferredSize.Height)
  #endregion $SystemIconBtmMidButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-SystemIconBtmMidButtonClick ********
  function Start-SystemIconBtmMidButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the SystemIconBtmMid Button Control
    .DESCRIPTION
      Click Event for the SystemIconBtmMid Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-SystemIconBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$SystemIconBtmMidButton"

    [MyConfig]::AutoExit = 0

    $TempIconIndex = $SystemIconFileTextBox.Tag
    if ($SystemIconIconListView.CheckBoxes)
    {
      $SystemIconIconListView.CheckedIndices | ForEach-Object -Process { $SystemIconIconListView.Items[$PSItem].Checked = $False }
      if ($TempIconIndex.Count -and ($TempIconIndex[0] -gt -1))
      {
        $TempIconIndex | ForEach-Object -Process { $SystemIconIconListView.Items[$PSItem].Checked = $True }
      }
    }
    else
    {
      $SystemIconIconListView.SelectedIndices.Clear()
      if ($TempIconIndex[0] -gt -1)
      {
        $SystemIconIconListView.Items[$TempIconIndex[0]].Selected = $True
        $SystemIconIconListView.Select()
        $SystemIconIconListView.Items[$TempIconIndex[0]].EnsureVisible()
      }
    }

    Write-Verbose -Message "Exit Click Event for `$SystemIconBtmMidButton"
  }
  #endregion ******** Function Start-SystemIconBtmMidButtonClick ********
  $SystemIconBtmMidButton.add_Click({ Start-SystemIconBtmMidButtonClick -Sender $This -EventArg $PSItem })

  #region $SystemIconBtmRightButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmRightButton = [System.Windows.Forms.Button]::New()
  $SystemIconBtmPanel.Controls.Add($SystemIconBtmRightButton)
  $SystemIconBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $SystemIconBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $SystemIconBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $SystemIconBtmRightButton.Font = [MyConfig]::Font.Bold
  $SystemIconBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $SystemIconBtmRightButton.Location = [System.Drawing.Point]::New(($SystemIconBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $SystemIconBtmRightButton.Name = "SystemIconBtmRightButton"
  $SystemIconBtmRightButton.TabIndex = 5
  $SystemIconBtmRightButton.TabStop = $True
  $SystemIconBtmRightButton.Text = $ButtonRight
  $SystemIconBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $SystemIconBtmRightButton.PreferredSize.Height)
  #endregion $SystemIconBtmRightButton = [System.Windows.Forms.Button]::New()

  #region ******** Function Start-SystemIconBtmRightButtonClick ********
  function Start-SystemIconBtmRightButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the SystemIconBtmRight Button Control
    .DESCRIPTION
      Click Event for the SystemIconBtmRight Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-SystemIconBtmRightButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$SystemIconBtmRightButton"

    [MyConfig]::AutoExit = 0

    $SystemIconForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    Write-Verbose -Message "Exit Click Event for `$SystemIconBtmRightButton"
  }
  #endregion ******** Function Start-SystemIconBtmRightButtonClick ********
  $SystemIconBtmRightButton.add_Click({ Start-SystemIconBtmRightButtonClick -Sender $This -EventArg $PSItem })

  $SystemIconBtmPanel.ClientSize = [System.Drawing.Size]::New(($SystemIconBtmRightButton.Right + [MyConfig]::FormSpacer), ($SystemIconBtmRightButton.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $SystemIconBtmPanel Controls ********

  #endregion ******** Controls for SystemIcon Form ********

  #endregion ******** End **** SystemIcon **** End ********

  if (($DialogResult = $SystemIconForm.ShowDialog($FCGForm)) -eq [System.Windows.Forms.DialogResult]::OK)
  {
    if ($SystemIconIconListView.CheckBoxes)
    {
      [SystemIcon]::New($DialogResult, $SystemIconFileTextBox.Text, $SystemIconIconListView.CheckedIndices)
    }
    else
    {
      [SystemIcon]::New($DialogResult, $SystemIconFileTextBox.Text, $SystemIconIconListView.SelectedIndices)
    }
  }
  else
  {
    [SystemIcon]::New($DialogResult)
  }

  $SystemIconFormComponents.Dispose()
  $SystemIconForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Export-SystemIcon"
}
#endregion function Export-SystemIcon

# --------------------------------
# Show Script Information Function
# --------------------------------
#region ScriptInfo Info Topics

#region $InfoIntro Compressed RTF
$InfoIntro = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc
ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=
"@
#endregion $InfoIntro Compressed RTF

#region $Info01 Compressed RTF
$Info01 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc
ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=
"@
#endregion $Info01 Compressed RTF

#region $Info02 Compressed RTF
$Info02 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K
XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA
"@
#endregion $Info02 Compressed RTF

#region $Info03 Compressed RTF
$Info03 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K
XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA
"@
#endregion $Info03 Compressed RTF

$ScriptInfoTopics = [Ordered]@{}
$ScriptInfoTopics.Add("InfoIntro", @{"Name" = "Info Introduction"; "Data" = $InfoIntro; "Type" = "Base64"})
$ScriptInfoTopics.Add("Info01", @{"Name" = "Info Topic 01"; "Data" = $Info01; "Type" = "Base64"})
$ScriptInfoTopics.Add("Info02", @{"Name" = "Info Topic 02"; "Data" = $Info02; "Type" = "Base64"})
$ScriptInfoTopics.Add("Info03", @{"Name" = "Info Topic 03"; "Data" = $Info03; "Type" = "Base64"})

$InfoIntro = $Null
$Info01 = $Null
$Info02 = $Null
$Info03 = $Null

#endregion ScriptInfo Dialog Info Topics

#region function Show-ScriptInfo
function Show-ScriptInfo ()
{
  <#
    .SYNOPSIS
      Shows Show-ScriptInfo
    .DESCRIPTION
      Shows Show-ScriptInfo
    .PARAMETER Title
      Show-ScriptInfo Window Title
    .PARAMETER InfoTitle
      Title of Into Topics
    .PARAMETER Topics
      Orders List of Tpoic to Display
    .PARAMETER DefInfoTopic
      Default Infomration Topic
    .PARAMETER Width
      Width of the Show-ScriptInfo Window
    .PARAMETER Height
      Height of the Show-ScriptInfo Window
    .EXAMPLE
      $Return = Show-ScriptInfo -Topics $Topics
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$Title = "$([MyConfig]::ScriptName)",
    [String]$InfoTitle = " << FCG Info Topics >> ",
    [String]$DefInfoTopic = "InfoIntro",
    [System.Collections.Specialized.OrderedDictionary]$Topics = $ScriptInfoTopics,
    [Int]$Width = 60,
    [Int]$Height = 24
  )
  Write-Verbose -Message "Enter Function Show-ScriptInfo"

  #region ******** Begin **** ScriptInfo **** Begin ********

  # ************************************************
  # ScriptInfo Form
  # ************************************************
  #region $ScriptInfoForm = [System.Windows.Forms.Form]::New()
  $ScriptInfoForm = [System.Windows.Forms.Form]::New()
  $ScriptInfoForm.BackColor = [MyConfig]::Colors.Back
  $ScriptInfoForm.Font = [MyConfig]::Font.Regular
  $ScriptInfoForm.ForeColor = [MyConfig]::Colors.Fore
  $ScriptInfoForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
  $ScriptInfoForm.Icon = $FCGForm.Icon
  $ScriptInfoForm.MaximizeBox = $False
  $ScriptInfoForm.MinimizeBox = $False
  $ScriptInfoForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $ScriptInfoForm.Name = "ScriptInfoForm"
  $ScriptInfoForm.Owner = $FCGForm
  $ScriptInfoForm.ShowInTaskbar = $False
  $ScriptInfoForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $ScriptInfoForm.Text = $Title
  #endregion $ScriptInfoForm = [System.Windows.Forms.Form]::New()

  #region ******** Function Start-ScriptInfoFormMove ********
  function Start-ScriptInfoFormMove
  {
    <#
      .SYNOPSIS
        Move Event for the ScriptInfo Form Control
      .DESCRIPTION
        Move Event for the ScriptInfo Form Control
      .PARAMETER Sender
        The Form Control that fired the Move Event
      .PARAMETER EventArg
        The Event Arguments for the Form Move Event
      .EXAMPLE
        Start-ScriptInfoFormMove -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Move Event for `$ScriptInfoForm"

    [MyConfig]::AutoExit = 0

    Write-Verbose -Message "Exit Move Event for `$ScriptInfoForm"
  }
  #endregion ******** Function Start-ScriptInfoFormMove ********
  $ScriptInfoForm.add_Move({ Start-ScriptInfoFormMove -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ScriptInfoFormResize ********
  function Start-ScriptInfoFormResize
  {
    <#
      .SYNOPSIS
        Resize Event for the ScriptInfo Form Control
      .DESCRIPTION
        Resize Event for the ScriptInfo Form Control
      .PARAMETER Sender
        The Form Control that fired the Resize Event
      .PARAMETER EventArg
        The Event Arguments for the Form Resize Event
      .EXAMPLE
        Start-ScriptInfoFormResize -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Resize Event for `$ScriptInfoForm"

    [MyConfig]::AutoExit = 0

    Write-Verbose -Message "Exit Resize Event for `$ScriptInfoForm"
  }
  #endregion ******** Function Start-ScriptInfoFormResize ********
  $ScriptInfoForm.add_Resize({ Start-ScriptInfoFormResize -Sender $This -EventArg $PSItem })

  #region ******** Function Start-ScriptInfoFormShown ********
  function Start-ScriptInfoFormShown
  {
  <#
    .SYNOPSIS
      Shown Event for the ScriptInfo Form Control
    .DESCRIPTION
      Shown Event for the ScriptInfo Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-ScriptInfoFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$ScriptInfoForm"

    [MyConfig]::AutoExit = 0

    $Sender.Refresh()

    Start-ScriptInfoLeftToolStripItemClick -Sender ($ScriptInfoLeftMenuStrip.Items[$DefInfoTopic]) -EventArg $EventArg

    Write-Verbose -Message "Exit Shown Event for `$ScriptInfoForm"
  }
  #endregion ******** Function Start-ScriptInfoFormShown ********
  $ScriptInfoForm.add_Shown({ Start-ScriptInfoFormShown -Sender $This -EventArg $PSItem })

  #region ******** Controls for ScriptInfo Form ********

  # ************************************************
  # ScriptInfo Panel
  # ************************************************
  #region $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()
  $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()
  $ScriptInfoForm.Controls.Add($ScriptInfoPanel)
  $ScriptInfoPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ScriptInfoPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $ScriptInfoPanel.Name = "ScriptInfoPanel"
  #endregion $ScriptInfoPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ScriptInfoPanel Controls ********

  #region $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $ScriptInfoPanel.Controls.Add($ScriptInfoRichTextBox)
  $ScriptInfoRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  $ScriptInfoRichTextBox.BackColor = [MyConfig]::Colors.TextBack
  $ScriptInfoRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $ScriptInfoRichTextBox.DetectUrls = $True
  $ScriptInfoRichTextBox.Font = [MyConfig]::Font.Regular
  $ScriptInfoRichTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $ScriptInfoRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ScriptInfoRichTextBox.MaxLength = [Int]::MaxValue
  $ScriptInfoRichTextBox.Multiline = $True
  $ScriptInfoRichTextBox.Name = "ScriptInfoRichTextBox"
  $ScriptInfoRichTextBox.ReadOnly = $True
  $ScriptInfoRichTextBox.Rtf = ""
  $ScriptInfoRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Vertical
  $ScriptInfoRichTextBox.Size = [System.Drawing.Size]::New(($ScriptInfoPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($ScriptInfoPanel.ClientSize.Height - ($ScriptInfoRichTextBox.Top + [MyConfig]::FormSpacer)))
  $ScriptInfoRichTextBox.TabStop = $False
  $ScriptInfoRichTextBox.Text = ""
  $ScriptInfoRichTextBox.WordWrap = $True
  #endregion $ScriptInfoRichTextBox = [System.Windows.Forms.RichTextBox]::New()

  #endregion ******** $ScriptInfoPanel Controls ********

  # ************************************************
  # ScriptInfoLeft MenuStrip
  # ************************************************
  #region $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()
  $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()
  $ScriptInfoForm.Controls.Add($ScriptInfoLeftMenuStrip)
  $ScriptInfoForm.MainMenuStrip = $ScriptInfoLeftMenuStrip
  $ScriptInfoLeftMenuStrip.BackColor = [MyConfig]::Colors.Back
  $ScriptInfoLeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left
  $ScriptInfoLeftMenuStrip.Font = [MyConfig]::Font.Regular
  $ScriptInfoLeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore
  $ScriptInfoLeftMenuStrip.ImageList = $FCGSmallImageList
  $ScriptInfoLeftMenuStrip.Name = "ScriptInfoLeftMenuStrip"
  $ScriptInfoLeftMenuStrip.ShowItemToolTips = $True
  $ScriptInfoLeftMenuStrip.Text = "ScriptInfoLeftMenuStrip"
  #endregion $ScriptInfoLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()

  #region ******** Function Start-ScriptInfoLeftToolStripItemClick ********
  function Start-ScriptInfoLeftToolStripItemClick
  {
  <#
    .SYNOPSIS
      Click Event for the ScriptInfoLeft ToolStripItem Control
    .DESCRIPTION
      Click Event for the ScriptInfoLeft ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-ScriptInfoLeftToolStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ToolStripItem]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$ScriptInfoLeftToolStripItem"

    [MyConfig]::AutoExit = 0

    $ScriptInfoBtmStatusStrip.Items["Status"].Text = "Showing: $($Sender.Text)"

    Switch ($Sender.Name)
    {
      "Exit"
      {
        $ScriptInfoForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
        Break
      }
      Default
      {
        $ScriptInfoRichTextBox.Clear()
        Switch ($Sender.Tag.Type)
        {
          "None"
          {
            $ScriptInfoRichTextBox.Rtf = $Sender.Tag.Data
            Break
          }
          "Base64"
          {
            $ScriptInfoRichTextBox.Rtf = Encode-MyData -Data ($Sender.Tag.Data) -AsString -Decode
            Break
          }
          "Compress"
          {
            $ScriptInfoRichTextBox.Rtf = Compress-MyData -Data ($Sender.Tag.Data) -Decompress -AsString
            Break
          }
        }
        $ScriptInfoRichTextBox.SelectAll()
        $ScriptInfoRichTextBox.SelectionIndent = 10
        $ScriptInfoRichTextBox.SelectionLength = 0
        Break
      }
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()

    Write-Verbose -Message "Exit Click Event for `$ScriptInfoLeftToolStripItem"
  }
  #endregion ******** Function Start-ScriptInfoLeftToolStripItemClick ********

  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip
  New-MenuLabel -Menu $ScriptInfoLeftMenuStrip -Text $InfoTitle -Name "Info Topics" -Tag "Info Topics" -Font ([MyConfig]::Font.Bold)
  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip

  forEach ($Key in $Topics.Keys)
  {
    (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text ($Topics[$Key].Name) -Name $Key -Tag @{"Data" = $Topics[$Key].Data; "Type" = $Topics[$Key].Type} -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })
  }

  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip
  (New-MenuItem -Menu $ScriptInfoLeftMenuStrip -Text "E&xit" -Name "Exit" -Tag "Exit" -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({ Start-ScriptInfoLeftToolStripItemClick -Sender $This -EventArg $PSItem })
  New-MenuSeparator -Menu $ScriptInfoLeftMenuStrip

  #region $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()
  $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()
  $ScriptInfoForm.Controls.Add($ScriptInfoTopPanel)
  $ScriptInfoTopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $ScriptInfoTopPanel.Dock = [System.Windows.Forms.DockStyle]::Top
  $ScriptInfoTopPanel.Name = "ScriptInfoTopPanel"
  #endregion $ScriptInfoTopPanel = [System.Windows.Forms.Panel]::New()

  #region ******** $ScriptInfoTopPanel Controls ********

  #region $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()
  $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()
  $ScriptInfoTopPanel.Controls.Add($ScriptInfoTopLabel)
  $ScriptInfoTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $ScriptInfoTopLabel.BackColor = [MyConfig]::Colors.TitleBack
  $ScriptInfoTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $ScriptInfoTopLabel.Font = [MyConfig]::Font.Title
  $ScriptInfoTopLabel.ForeColor = [MyConfig]::Colors.TitleFore
  $ScriptInfoTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $ScriptInfoTopLabel.Name = "ScriptInfoTopLabel"
  $ScriptInfoTopLabel.Text = $Title
  $ScriptInfoTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $ScriptInfoTopLabel.Size = [System.Drawing.Size]::New(($ScriptInfoTopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $ScriptInfoTopLabel.PreferredHeight)
  #endregion $ScriptInfoTopLabel = [System.Windows.Forms.Label]::New()

  $ScriptInfoTopPanel.ClientSize = [System.Drawing.Size]::New($ScriptInfoTopPanel.ClientSize.Width, ($ScriptInfoTopLabel.Bottom + [MyConfig]::FormSpacer))

  #endregion ******** $ScriptInfoTopPanel Controls ********

  # ************************************************
  # ScriptInfoBtm StatusStrip
  # ************************************************
  #region $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
  $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
  $ScriptInfoForm.Controls.Add($ScriptInfoBtmStatusStrip)
  $ScriptInfoBtmStatusStrip.BackColor = [MyConfig]::Colors.Back
  $ScriptInfoBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $ScriptInfoBtmStatusStrip.Font = [MyConfig]::Font.Regular
  $ScriptInfoBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore
  $ScriptInfoBtmStatusStrip.ImageList = $FCGSmallImageList
  $ScriptInfoBtmStatusStrip.Name = "ScriptInfoBtmStatusStrip"
  $ScriptInfoBtmStatusStrip.ShowItemToolTips = $True
  $ScriptInfoBtmStatusStrip.Text = "ScriptInfoBtmStatusStrip"
  #endregion $ScriptInfoBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()

  New-MenuLabel -Menu $ScriptInfoBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"

  #endregion ******** Controls for ScriptInfo Form ********

  #endregion ******** End **** ScriptInfo **** End ********

  [Void]$ScriptInfoForm.ShowDialog($FCGForm)

  $ScriptInfoForm.Dispose()

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Show-ScriptInfo"
}
#endregion function Show-ScriptInfo

#endregion ******** My Common Dialogs ********

#region ******** FCG Custom Commands ********<<
# --------------------------------------
# Get Form Control Classes and Functions
# --------------------------------------
#region Class MyFormControlParameter
Class MyFormControlParameter
{
  [String]$Name
  [String]$ParameterType

  MyFormControlParameter ([String]$Name, [String]$ParameterType)
  {
    $This.Name = [System.Globalization.CultureInfo]::CurrentCulture.TextInfo.ToTitleCase($Name)
    $This.ParameterType = $ParameterType
  }
}
#endregion Class MyFormControlParameter

#region Class MyFormControlConstructor
Class MyFormControlConstructor
{
  [List[MyFormControlParameter]]$Parameter = [List[MyFormControlParameter]]::New()

  MyFormControlConstructor ([MyFormControlParameter[]]$Parameter)
  {
    $This.Parameter.AddRange($Parameter)
  }
}
#endregion Class MyFormControlConstructor

#region Class MyFormControlProperty
Class MyFormControlProperty
{
  [String]$Name
  [String]$PropertyType
  [String]$BaseType
  [Object]$Default

  MyFormControlProperty ([String]$Name, [String]$PropertyType, [String]$BaseType, [Object]$Default)
  {
    $This.Name = $Name
    $This.PropertyType = $PropertyType
    $This.BaseType = $BaseType
    $This.Default = $Default
  }
}
#endregion Class MyFormControlProperty

#region Class MyFormControlItems
Class MyFormControlItems
{
  [String]$Method
  [String]$Property
  [List[MyFormControlParameter]]$Parameter = [List[MyFormControlParameter]]::New()

  MyFormControlItems ([String]$Method, [String]$Property, [MyFormControlParameter[]]$Parameter)
  {
    $This.Method = $Method
    $This.Property = $Property
    $This.Parameter.AddRange($Parameter)
  }
}
#endregion Class MyFormControlItems

#region Class MyFormControlEvent
Class MyFormControlEvent
{
  [String]$Name
  [String]$AddMethod
  [Bool]$IsFavorite

  MyFormControlEvent ([String]$Name, [String]$AddMethod, [Bool]$IsFavorite)
  {
    $This.Name = $Name
    $This.AddMethod = $AddMethod
    $This.IsFavorite = $IsFavorite
  }
}
#endregion Class MyFormControlEvent

#region Class MyFormControl
Class MyFormControl
{
  [String]$Name
  [String]$FullName
  [List[MyFormControlConstructor]]$Constructors = [List[MyFormControlConstructor]]::New()
  [List[MyFormControlProperty]]$Properties = [List[MyFormControlProperty]]::New()
  [List[MyFormControlItems]]$Items = [List[MyFormControlItems]]::New()
  [List[MyFormControlEvent]]$Events = [List[MyFormControlEvent]]::New()

  MyFormControl ([String]$Name, [String]$FullName)
  {
    $This.Name = $Name
    $This.FullName = $FullName
  }
}
#endregion Class MyFormControl

#region function Get-MyFormControls
function Get-MyFormControls ()
{
  <#
    .SYNOPSIS
      Get List of Windows Form Controls.
    .DESCRIPTION
      Retrieves a list of Windows Forms controls, including their constructors, properties, items, and events.
      Useful for inspecting available controls and their metadata in the System.Windows.Forms namespace.
    .PARAMETER FavEvents
      A hashtable mapping control names to arrays of favorite event names. Used to mark certain events as favorites in the output.
    .EXAMPLE
      Get-MyFormControls
      Retrieves all Windows Forms controls and their metadata.
    .EXAMPLE
      Get-MyFormControls -FavEvents @{ Button = @('Click', 'MouseEnter') }
      Retrieves all controls, marking the 'Click' and 'MouseEnter' events as favorites for the Button control.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [HashTable]$FavEvents = @{}
  )
  Write-Verbose -Message "Enter Function Get-MyFormControls"

  # Get System.Windows.Forms.Form Assembly
  $Assembly = [System.Reflection.Assembly]::GetAssembly("System.Windows.Forms.Form")
  # Get List of Exported System.Windows.Forms Types
  $ExportedTypes = $Assembly.ExportedTypes | Where-Object -FilterScript { $PSitem.IsPublic -and $PSItem.IsClass -and (-not $PSItem.IsAbstract) -and ($PSItem.FullName -like "System.Windows.Forms*") } | Sort-Object -Property FullName
  # Check Each Expoted Type
  foreach ($ExportedType in $ExportedTypes)
  {
    # Get Form Control Contructors
    $TmpConstructors = @($ExportedType.GetConstructors(("Instance, Public")))
    if ((($ExportedType.GetInterface("IComponent")).IsPublic -or ($ExportedType.GetInterface("ISerializable")).IsPublic) -and ($TmpConstructors.Count -gt 0) -and (@($TmpConstructors | Where-Object -FilterScript { @($PSItem.GetParameters()).Count -eq 0 }).Count -eq 1))
    {
      # Create Form Control Return Value
      $RetValue = [MyFormControl]::New($ExportedType.Name, $ExportedType.FullName)
      # Get Form Control Constructors
      foreach ($TmpConstructor in $TmpConstructors)
      {
        $RetValue.Constructors.Add([MyFormControlConstructor]::New(@($TmpConstructor.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
      }
      # Get Form Control Property List
      $TmpProperties = $ExportedType.GetProperties(("Instance, Public")) | Where-Object -FilterScript { $PSItem.CanWrite } | Sort-Object -Property Name -Unique
      $TmpControl = $ExportedType::New()
      foreach ($TmpProperty in $TmpProperties)
      {
        $RetValue.Properties.Add([MyFormControlProperty]::New($TmpProperty.Name, $TmpProperty.PropertyType.FullName, $TmpProperty.PropertyType.BaseType.FullName, $TmpControl.PSObject.Properties[$TmpProperty.Name].Value)) | Out-Null
      }
      try { $TmpControl.Dispose() } catch {}
      # Get Form Control Items - Add / AddRange Methods
      $TmpItems = $ExportedType.GetProperties(("Instance, Public")) | Where-Object -FilterScript { $PSItem.Name -notin @("Controls", "DataBindings") -and (-not $PSItem.CanWrite) -and $PSItem.PropertyType.GetInterface("ICollection").IsPublic } | Sort-Object -Property Name -Unique
      foreach ($TmpItem in $TmpItems)
      {
        foreach ($TmpAddItem in @($TmpItem.PropertyType.GetDeclaredMethods("Add")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("Add", $TmpItem.Name, @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
        foreach ($TmpAddItem in @($TmpItem.PropertyType.GetDeclaredMethods("AddRange")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("AddRange", $TmpItem.Name, @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
      }
      # Get Form Control Events
      $TmpEvents = @($ExportedType.GetEvents() | Sort-Object -Property Name -Unique)
      if ($FavEvents.ContainsKey($ExportedType.Name))
      {
        foreach ($Event in $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, ($FavEvents[$ExportedType.Name] -contains $Event.Name))) | Out-Null
        }
      }
      else
      {
        foreach ($Event in $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, $False)) | Out-Null
        }
      }
      # Return Form Confrom Info
      $RetValue
    }
  }

  Write-Verbose -Message "Exit Function Get-MyFormControls"
}
#endregion function Get-MyFormControls

# -----------------------------
# My FCG Build Dialog Functions
# -----------------------------
#region **** My FCG Build Dialog Functions ****

# Basic / Advanced Dialog Templates
#region function Build-MyFCGBasicDialog
function Build-MyFCGBasicDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .PARAMETER ControlType
    .EXAMPLE
      Build-MyFCGBasicDialog -ScriptName $ScriptName -ControlName $MyDialogClass -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$ControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGBasicDialog"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  #region DialogName Dialog Result Class
  $MyDialogClass = $DialogName.Replace("-", "")
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object[]]`$ReturnValue")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Object]`$DialogResult, [Object[]]`$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.ReturnValue = `$ReturnValue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion DialogName Dialog Result Class

  #region function ControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function $($DialogName)")
  [Void]$StringBuilder.AppendLine("function $($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows $($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows $($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the $($DialogName) Window")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupBoxText")
    [Void]$StringBuilder.AppendLine("      Title of the $($DialogName) GroupBox")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Statts $($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of the Status $($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Left Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Middle Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Right Button")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($DialogName) -Title `$Title -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($DialogName) -Title `$Title")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function $($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")

  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.TopMost = `$True")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Load({ Start-$($DialogName)FormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Move({ Start-$($DialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form

  Switch ($ControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)GroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($DialogName)GroupBox.Controls[`$$($DialogName)GroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($DialogName)GroupBox.Controls[`$$($DialogName)GroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Text = `"$($DialogName)Panel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.ClientSize = [System.Drawing.Size]::New((`$(`$$($DialogName)Panel.Controls[`$$($DialogName)Panel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($DialogName)Panel.Controls[`$$($DialogName)Panel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)SplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Name = `"$($DialogName)SplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Text = `"$($DialogName)SplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)SplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)SplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)SplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)SplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }

  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmPanel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Text = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmLeftButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # OK Code Goes here")
  [Void]$StringBuilder.AppendLine("    [Void][System.Windows.Forms.MessageBox]::Show(`$$($ScriptName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmMidButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmMidButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Reset Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmRightButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)BtmRightButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons

  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnValue = @()")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$DialogResult, `$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function $($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function $($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function ControlNameDialog

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  Write-Verbose -Message "Exit Function Build-MyFCGBasicDialog"
}
#endregion function Build-MyFCGBasicDialog

#region function Build-MyFCGAdvDialog
function Build-MyFCGAdvDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .PARAMETER ControlType
    .EXAMPLE
      Build-MyFCGAdvDialog -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$ControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGAdvDialog"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  #region DialogName Dialog Result Class
  $DialogName = $DialogName.Replace("-", "")
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion DialogName Dialog Result Class

  #region function ControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function $($DialogName)")
  [Void]$StringBuilder.AppendLine("function $($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows $($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows $($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the $($DialogName) Window")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupBoxText")
    [Void]$StringBuilder.AppendLine("      Title of the $($DialogName) GroupBox")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Statts $($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of the Status $($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Left Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Middle Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Right Button")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($DialogName) -Title `$Title -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = $($DialogName) -Title `$Title")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  if ($ControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function $($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")

  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Form.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Load({ Start-$($DialogName)FormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Move({ Start-$($DialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form

  Switch ($ControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)GroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($DialogName)GroupBox.Controls[`$$($DialogName)GroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($DialogName)GroupBox.Controls[`$$($DialogName)GroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Text = `"$($DialogName)Panel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.ClientSize = [System.Drawing.Size]::New((`$(`$$($DialogName)Panel.Controls[`$$($DialogName)Panel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($DialogName)Panel.Controls[`$$($DialogName)Panel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($DialogName) SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)SplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Name = `"$($DialogName)SplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($DialogName)SplitContainer.Text = `"$($DialogName)SplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)SplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)SplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)SplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)SplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($DialogName)SplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)SplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }

  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($DialogName)Buttons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Text = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  #[Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # OK Code Goes here")
  [Void]$StringBuilder.AppendLine("    [Void][System.Windows.Forms.MessageBox]::Show(`$$($ScriptName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 1) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), ((`$$($DialogName)BtmPanel.Controls[`$$($DialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons

  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$$($DialogName)Form.Tag -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function $($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function $($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function ControlNameDialog

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  Write-Verbose -Message "Exit Function Build-MyFCGAdvDialog"
}
#endregion function Build-MyFCGAdvDialog

# Show RichText Status Message Dialogs
#region function Build-MyFCGRichTextStatus
Function Build-MyFCGRichTextStatus ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .EXAMPLE
      Build-MyFCGRichTextStatus -ScriptName $ScriptName -DialogName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGRichTextStatus"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.AppendLine("# ---------------------------")
  [Void]$StringBuilder.AppendLine("# Show $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ---------------------------")

  #region Function Write-RichTextBox
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoNewLine")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `$Text")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NewLine`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$$($DialogName)RichTextBox,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NewLine`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NoNewLine`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoNewLine")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionStart = `$RichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionAlignment = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionFont = `$Font")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$TextFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`$Text)")
  [Void]$StringBuilder.AppendLine("  if (-not `$NoNewLine.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Activate()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBox

  #region Function Write-RichTextBoxValue
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Property Value to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Property Value to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `$Text -Value `$Value")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$$($DialogName)RichTextBox,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ValueFore = [MyConfig]::Colors.TextInfo,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [AllowEmptyString()]")
  [Void]$StringBuilder.AppendLine("    [AllowNull()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionStart = `$RichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionFont = `$Font")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$TextFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"`$(`$Text)`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`": `")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$ValueFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"`$(`$Value)`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionColor = `$BulletFore")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.AppendText(`"``r``n`")")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Activate()")
  [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBoxValue")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBoxValue

  #region Function Write-RichTextBoxError
  [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Write Error Message to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Write Error Message to RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxError -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox = `$$($DialogName)RichTextBox")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"ERROR`" -TextFore ([MyConfig]::Colors.TextBad) -Value (`$(`$Error[0].Exception.Message)) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"CODE`" -TextFore ([MyConfig]::Colors.TextBad) -Value ((`$Error[0].InvocationInfo.Line).Trim()) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"LINE`" -TextFore ([MyConfig]::Colors.TextBad) -Value (`$Error[0].InvocationInfo.ScriptLineNumber) -ValueFore ([MyConfig]::Colors.TextFore)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBoxError")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Write-RichTextBoxError

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Show-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      Script Block to Execure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("      HashTable of Paramerts to Pass to the ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("      The Default Selected Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Left Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Middle Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      The DialogResult of the Right Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("      Enable Pause and Break out of Script Block")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("      Auto Close the Status Message Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoCloseWait")
  [Void]$StringBuilder.AppendLine("      Number of MilliSeconds to wait Before Auto Closing the Dialog Window")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$HashTable = @{`"ShowHeader`" = `$True}")
  [Void]$StringBuilder.AppendLine("      `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Sample-RichTextStatus -RichTextBox `$RichTextBox -HashTable `$HashTable }")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Show-$($DialogName) -ScriptBlock `$ScriptBlock -Title `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { },")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable = @{ },")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoClose,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 60000)]")
  [Void]$StringBuilder.AppendLine("    [int]`$AutoCloseWait = 10")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** `$Show-$($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Size = `$$($DialogName)Form.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False; `"Finished`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$Sender.Tag.Finished)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Sender.DialogResult = `$ButtonDefault")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($ScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassHashTable)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($DialogName)RichTextBox, `$HashTable")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($DialogName)RichTextBox")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($ScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$$($DialogName)Buttons)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      1")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmMidButton.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      2")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      3")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.Finished = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (((`$DialogResult -eq `$ButtonDefault) -and `$AutoClose.IsPresent) -or (`$$($DialogName)Buttons -eq 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("      while (`$StopWatch.Elapsed.TotalMilliseconds -le `$AutoCloseWait)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$Sender.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)RichTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.DetectUrls = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Name = `"$($DialogName)RichTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Rtf = `"`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.ClientSize.Height - (`$$($DialogName)RichTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)RichTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)RichTextBoxMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($DialogName) RichTextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($DialogName) RichTextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The RichTextBox Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the RichTextBox MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)RichTextBoxMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.RichTextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($DialogName)RichTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RichTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RichTextBox.SelectionStart = `$$($DialogName)RichTextBox.TextLength")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($DialogName)RichTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)RichTextBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.add_MouseDown({ Start-$($DialogName)RichTextBoxMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($DialogName)Buttons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("      if (`$ButtonLeft -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmLeftButton.Select()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 1) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("      if (`$ButtonMid -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmMidButton.Select()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("      if (`$ButtonRight -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)BtmRightButton.Select()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), ((`$$($DialogName)BtmPanel.Controls[`$$($DialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** `$Show-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PassHashTable = `$PSBoundParameters.ContainsKey(`"HashTable`")")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-$($DialogName)

  #region function Sample-RichTextStatus
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Sample-RichTextStatus")
  [Void]$StringBuilder.AppendLine("function Sample-RichTextStatus()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("      Passed Paramters HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-RichTextStatus -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-RichTextStatus -RichTextBox `$RichTextBox -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Sample-RichTextStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Passed Values")
  [Void]$StringBuilder.AppendLine("  If (`$HashTable.ContainsKey(`"ShowHeader`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$HashTable.ShowHeader")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # **************")
  [Void]$StringBuilder.AppendLine("  # RFT Formatting")
  [Void]$StringBuilder.AppendLine("  # **************")
  [Void]$StringBuilder.AppendLine("  # Permanate till Changed")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  # Resets After AppendText")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionBackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionCharOffset = 0")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  #`$RichTextBox.SelectionFont = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  # **********************")
  [Void]$StringBuilder.AppendLine("  # Update RichTextBox Text...")
  [Void]$StringBuilder.AppendLine("  # **********************")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -Text `"`$(`$RichTextBox.Parent.Parent.Text)`" -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Update Status Message")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Initialize StopWatch")
  [Void]$StringBuilder.AppendLine("    `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Started Proccess List Data Here...`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  :UserCancel foreach (`$Key in `$HashTable.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Found Key`" -TextFore ([MyConfig]::Colors.TextInfo) -Value `"`$(`$Key) = `$(`$HashTable[`$Key])`" -ValueFore ([MyConfig]::Colors.TextGood)")
  [Void]$StringBuilder.AppendLine("    # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("      Break UserCancel")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("    If (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("      `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("      While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Pause Before Deployment")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Tag.Pause = `$True")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("  `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Pause to Review Status`" -Font ([MyConfig]::Font.Bold) -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Press 'Pause' to Continue with the Current Deployment`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"or Ctrl-Alt-Backspace to Exit / Cancel`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.Parent.Parent.Tag.Pause = `$False")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Display an Error Information")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Show Fake Error Message`" -TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Throw `"This is a Fake Error!`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write Error to Status Dialog")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBoxError -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Final Status Message")
  [Void]$StringBuilder.AppendLine("    Switch (`$DisplayResult)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"OK`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Success Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Cancel`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Error Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"Abort`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$FinalMsg = `"Add Abort Message Here!`"")
  [Void]$StringBuilder.AppendLine("        `$FinalClr = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Final Status Message")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -TextFore `$FinalClr -Text `$FinalMsg")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Alignment `"Center`" -Text (`$StopWatch.Elapsed.ToString())")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Update Status Message")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `$FinalMsg")
  [Void]$StringBuilder.AppendLine("    `$StopWatch.Stop()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return DialogResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Sample-RichTextStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Sample-RichTextStatus")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$HashTable = @{`"ShowHeader`" = `$True}")
  [Void]$StringBuilder.AppendLine("#`$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Sample-RichTextStatus -RichTextBox `$RichTextBox -HashTable `$HashTable }")
  [Void]$StringBuilder.AppendLine("#`$DialogResult = Show-$($DialogName) -ScriptBlock `$ScriptBlock -Title `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable -AllowControl")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Sample-RichTextStatus

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGRichTextStatus"
}
#endregion function Build-MyFCGRichTextStatus

# Show Loading Progress Bar
#region function Build-MyFCGProgressBarStatus
Function Build-MyFCGProgressBarStatus ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .EXAMPLE
      Build-MyFCGProgressBarStatus -ScriptName $ScriptName -DialogName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGProgressBarStatus"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.AppendLine("# ---------------------------")
  [Void]$StringBuilder.AppendLine("# Show $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ---------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      Script Block to Execure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("      HashTable of Paramerts to Pass to the ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("      Enable Pause and Break out of Script Block")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$HashTable = @{`"Values`" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}")
  [Void]$StringBuilder.AppendLine("      `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]`$ProgressBar, [System.Windows.Forms.Label]`$Label) Sample-ProgressBarStatus -ProgressBar `$ProgressBar -Label `$Label }")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Show-$($DialogName) -ScriptBlock `$ScriptBlock -Title `"Initializing `$([MyConfig]::ScriptName)`"")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { },")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable = @{ },")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** `$$($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Size = `$$($DialogName)Form.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False; `"Finished`" = `$True }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -in ([System.Windows.Forms.Keys]::Back, [System.Windows.Forms.Keys]::End) }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape) }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$Sender.Tag.Finished)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Sender.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($ScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if (`$PassHashTable)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($DialogName)ProgressBar, `$$($DialogName)Label, `$HashTable")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($DialogName)ProgressBar, `$$($DialogName)Label")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.Finished = `$True")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($ScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)ProgressBar)")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ProgressBar.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ProgressBar.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.Name = `"$($DialogName)ProgressBar`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ProgressBar.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ProgressBar.Value = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ProgressBar.Visible = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ProgressBar.Width = (`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ProgressBar = [System.Windows.Forms.ProgressBar]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Panel.ClientSize.Width, (`$$($DialogName)ProgressBar.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, `$$($DialogName)Panel.ClientSize.Height)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** `$Show-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$PassHashTable = `$PSBoundParameters.ContainsKey(`"HashTable`")")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-$($DialogName)

  #region function Sample-ProgressBarStatus
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Sample-ProgressBarStatus")
  [Void]$StringBuilder.AppendLine("Function Sample-ProgressBarStatus()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProgressBar")
  [Void]$StringBuilder.AppendLine("      The Progress Bar")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Label")
  [Void]$StringBuilder.AppendLine("      The Label to Indicate the Current Item being Proccessed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("      Passed Paramters HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Sample-ProgressBarStatus -ProgressBar `$ProgressBar -Label `$Label")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ProgressBar]`$ProgressBar,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Label]`$Label,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Sample-ProgressBarStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Update Status Message")
  [Void]$StringBuilder.AppendLine("  `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `$ProgressBar.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Month Names")
  [Void]$StringBuilder.AppendLine("  `$Values = `$HashTable.Values")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Starting ProgresBar Values")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Blocks")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Maximum = `$Values.Count")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Minimum = 1")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Step = 1")
  [Void]$StringBuilder.AppendLine("  `$ProgressBar.Value = 1")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  :UserCancel ForEach (`$Value In `$Values)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Progress Information")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Label.Text = `$Value")
  [Void]$StringBuilder.AppendLine("    `$Label.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$ProgressBar.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Abort")
  [Void]$StringBuilder.AppendLine("      Break UserCancel")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("    If (`$ProgressBar.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpTitle = `$ProgressBar.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("      `$ProgressBar.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("      While (`$ProgressBar.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$ProgressBar.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$ProgressBar.Increment(1)")
  [Void]$StringBuilder.AppendLine("    `$ProgressBar.Refresh()")
  [Void]$StringBuilder.AppendLine("    Start-Sleep -Milliseconds 1000")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Update Status Message")
  [Void]$StringBuilder.AppendLine("  `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Completed `$(`$ProgressBar.Parent.Parent.Text)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return DialogResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Sample-ProgressBarStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Sample-ProgressBarStatus")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$HashTable = @{`"Values`" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}")
  [Void]$StringBuilder.AppendLine("#`$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]`$ProgressBar, [System.Windows.Forms.Label]`$Label) Sample-ProgressBarStatus -ProgressBar `$ProgressBar -Label `$Label }")
  [Void]$StringBuilder.AppendLine("#`$DialogResult = Show-$($DialogName) -ScriptBlock `$ScriptBlock -Title `"Initializing `$([MyConfig]::ScriptName)`"")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Sample-ProgressBarStatus

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGProgressBarStatus"
}
#endregion function Build-MyFCGProgressBarStatus

# Show Text Change Log Dialog
#region function Build-MyFCGShowChangeLog
Function Build-MyFCGShowChangeLog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyScriptShow$($DialogName) -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowChangeLog"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# --------------------------")
  [Void]$StringBuilder.AppendLine("# Show $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------")

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ChangeText")
  [Void]$StringBuilder.AppendLine("      Change Log Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$TmpContent = (`$Script:MyInvocation.MyCommand.ScriptBlock).ToString()")
  [Void]$StringBuilder.AppendLine("      `$CLogStart = (`$TmpContent.IndexOf(`"<`") + 3)")
  [Void]$StringBuilder.AppendLine("      `$CLogEnd = (`$TmpContent.IndexOf(`">`") - 1)")
  [Void]$StringBuilder.AppendLine("      Show-$($DialogName) -ChangeText (`$TmpContent.SubString(`$CLogStart, (`$CLogEnd - `$CLogStart)))")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"Change Log - `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ChangeText,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("     .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("     .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("     .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("     .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.AppendText(`$ChangeText)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.SelectionStart = 0")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    `$Sender.Activate()")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)TextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Font = [System.Drawing.Font]::New(`"Courier New`", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Name = `"$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.ClientSize.Height - (`$$($DialogName)TextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `"&Ok`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), ((`$$($DialogName)BtmPanel.Controls[`$$($DialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** Show-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGShowChangeLog"
}
#endregion function Build-MyFCGShowChangeLog

# Show Alert Message Dialog
#region function Build-MyFCGShowAlertMessage
Function Build-MyFCGShowAlertMessage ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGShowAlertMessage -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowAlertMessage"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# --------------------------")
  [Void]$StringBuilder.AppendLine("# Show $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------")

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Show-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Alert Message to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Show-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MsgType")
  [Void]$StringBuilder.AppendLine("      Type of Alert Message to SHow")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Show-$($DialogName) -Title `"Example Alert`" -Message `"Show Success, Warning, Error, and Information Alert Messages`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Success`", `"Warning`", `"Error`", `"Info`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$MsgType = `"Info`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** `$$($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$MsgType)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Success`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Icon = [System.Drawing.SystemIcons]::Shield")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Icon = [System.Drawing.SystemIcons]::Warning")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Icon = [System.Drawing.SystemIcons]::Error")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Icon = [System.Drawing.SystemIcons]::Information")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Enter, [System.Windows.Forms.Keys]::Space, [System.Windows.Forms.Keys]::Escape))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Size = [System.Drawing.Size]::New((`$$($DialogName)Form.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Form.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)TopLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$MsgType)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TopLabel.BackColor = [MyConfig]::Colors.TextInfo")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Success`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TopLabel.BackColor = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TopLabel.BackColor = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TopLabel.BackColor = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.ForeColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Name = `"$($DialogName)TopLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($DialogName)TopLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)BtmLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)TopLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Name = `"$($DialogName)BtmLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Size = [System.Drawing.Size]::New(`$$($DialogName)TopLabel.Width, (`$$($DialogName)TopLabel.Width - (`$$($DialogName)BtmLabel.Top * 3)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLabel.Text = `$Message")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Panel.ClientSize.Width, (`$$($DialogName)BtmLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$$($DialogName)Panel.Bottom)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `"OK`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Panel.ClientSize.Width, ((`$$($DialogName)BtmPanel.Controls[`$$($DialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, `$$($DialogName)BtmPanel.Bottom)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** `$Show-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGShowAlertMessage"
}
#endregion function Build-MyFCGShowAlertMessage

# Get User Response Dialog
#region function Build-MyFCGGetUserResponse
Function Build-MyFCGGetUserResponse ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetUserResponse -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetUserResponse"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# --------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("      Message Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("      The Default Button")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Get User Text - Single`" -Message `"Show this Sample Message Prompt to the User`" -Items `"Sample Text`"")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon = [System.Drawing.SystemIcons]::Information,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** `$$($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -in ([System.Windows.Forms.Keys]::Escape))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)PictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)PictureBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.Name = `"$($DialogName)PictureBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.Size = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)PictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)PictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Location = [System.Drawing.Point]::New((`$$($DialogName)PictureBox.Right + [MyConfig]::FormSpacer), `$$($DialogName)PictureBox.Top)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - (`$$($DialogName)Label.Left + ([MyConfig]::FormSpacer * 3))), `$$($DialogName)Panel.ClientSize.Width)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - (`$$($DialogName)Label.Left + ([MyConfig]::FormSpacer * 3))), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Buttons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    if (`$ButtonLeft -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.Select()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($DialogName)Buttons -eq 1) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    if (`$ButtonMid -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmMidButton.Select()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($DialogName)Buttons -eq 2) -or (`$$($DialogName)Buttons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    if (`$ButtonRight -eq `$ButtonDefault)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmRightButton.Select()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), ((`$$($DialogName)BtmPanel.Controls[`$$($DialogName)BtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$$($DialogName)Form.ClientSize.Height - (`$$($DialogName)Panel.ClientSize.Height - ([Math]::Max(`$$($DialogName)PictureBox.Bottom, `$$($DialogName)Label.Bottom) + ([MyConfig]::FormSpacer * 2)))))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** `$Get-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetUserResponse"
}
#endregion function Build-MyFCGGetUserResponse

# Get User Inout Dialog
#region function Build-MyFCGGetTextBoxInput
Function Build-MyFCGGetTextBoxInput ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetTextBoxInput -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetTextBoxInput"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# -----------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# -----------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String[]]`$Items")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [String[]]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HintText")
  [Void]$StringBuilder.AppendLine("      Hint Text to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidChars")
  [Void]$StringBuilder.AppendLine("      RegEx Allowed Valid Characters for Input")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidOutput")
  [Void]$StringBuilder.AppendLine("      RegEx Validate Output Format")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Default Items / Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Maximum Length of Text Input")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("      Allow Multiple Lines of TExt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoDuplicates")
  [Void]$StringBuilder.AppendLine("      Do Not Allow Duplicate Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Get User Text - Multi`" -Message `"Show this Sample Message Prompt to the User`" -Multi -Items @(`"Computer Name 01`", `"Computer Name 02`", `"Computer Name 03`")")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Single`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$HintText = `"Enter Value Here`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_,;]`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidOutput = `".+`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxLength = [Int]::MaxValue,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoDuplicates,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 18,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.DeselectAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.ClientSize.Height - (`$$($DialogName)GroupBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)TextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.MaxLength = `$MaxLength")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Multiline = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.Name = `"$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("    If (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Lines = `$Items")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Lines = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)GroupBox.ClientSize.Height - (`$$($DialogName)TextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None")
  [Void]$StringBuilder.AppendLine("    if (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Text = `$Items[0]")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items[0] } ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `"`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($DialogName)TextBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.add_GotFocus({ Start-$($DialogName)TextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)TextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)TextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.add_KeyDown({ Start-$($DialogName)TextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)TextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.add_KeyPress({Start-$($DialogName)TextBoxKeyPress -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.add_KeyUp({ Start-$($DialogName)TextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TextBox.add_LostFocus({ Start-$($DialogName)TextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$$($DialogName)TextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ((-not `$$($DialogName)TextBox.Tag.HintEnabled) -and (`"`$(`$$($DialogName)TextBox.Text.Trim())`".Length -gt 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ChkOutput = `$True")
  [Void]$StringBuilder.AppendLine("      (`$$($DialogName)TextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { `$ChkOutput = (`$ChkOutput -and `$PSItem -match `$ValidOutput) }")
  [Void]$StringBuilder.AppendLine("      If (`$ChkOutput)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Lines = `$$($DialogName)TextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)TextBox.Text = `$$($DialogName)TextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Tag.HintEnabled = (`$$($DialogName)TextBox.TextLength -gt 0)")
  [Void]$StringBuilder.AppendLine("    Start-$($DialogName)TextBoxLostFocus -Sender `$$($DialogName)TextBox -EventArg `"LostFocus`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** Get-$($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  If (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$NoDuplicates.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @((`$$($DialogName)TextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries) | Select-Object -Unique)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @((`$$($DialogName)TextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$TmpItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($DialogName)TextBox.Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetTextBoxInput"
}
#endregion function Build-MyFCGGetTextBoxInput

# Get Multi Text Input
#region function Build-MyFCGMultiTextBoxInput
Function Build-MyFCGMultiTextBoxInput ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGMultiTextBoxInput -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGMultiTextBoxInput"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# ------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Specialized.OrderedDictionary]`$OrderedItems")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [System.Collections.Specialized.OrderedDictionary]`$OrderedItems)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.OrderedItems = `$OrderedItems")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReturnTitle")
  [Void]$StringBuilder.AppendLine("      Title of Values Group Box")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("      Ordered List (HashTable) if Names and Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidCars")
  [Void]$StringBuilder.AppendLine("      Valid Inputy Chatacters")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      With of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllRequired")
  [Void]$StringBuilder.AppendLine("      All Values are Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Get Multi Text Input`" -Message `"Show this Sample Message Prompt to the User`" -OrderedItems `$OrderedItems -AllRequired")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [String]`$ReturnTitle,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_]`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllRequired")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Tag = `$AllRequired.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Text = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"SearchTextMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($DialogName)Label.Bottom")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$ReturnTitle")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Width = (`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TmpLabelWidth = 0")
  [Void]$StringBuilder.AppendLine("  `$Count = 0")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + ((`$$($DialogName)Label.PreferredHeight + [MyConfig]::FormSpacer) * `$Count)))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"`$(`$Key)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `"`$(`$Key):`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpLabelWidth = [Math]::Max(`$TmpLabelWidth, `$$($DialogName)Label.Width)")
  [Void]$StringBuilder.AppendLine("    `$Count += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)TextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the GetMultiValueMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the GetMultiValueMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)TextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)BtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)TextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)TextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)TextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel = `$$($DialogName)GroupBox.Controls[`"`$(`$Key)Label`"]")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.Size = [System.Drawing.Size]::New(`$TmpLabelWidth, `$TmpLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)TextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Location = [System.Drawing.Size]::New((`$TmpLabel.Right + [MyConfig]::FormSpacer), `$TmpLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.MaxLength = 25")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Name = `"`$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Text = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `"Enter Value for '`$(`$Key)'`"; `"HintEnabled`" = (`$$($DialogName)TextBox.TextLength -eq 0); `"Value`" = `$OrderedItems[`$Key] }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.ClientSize.Width - (`$TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), `$TmpLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_GotFocus({ Start-$($DialogName)TextBoxGotFocus -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_KeyDown({ Start-$($DialogName)TextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_KeyPress({ Start-$($DialogName)TextBoxKeyPress -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_KeyUp({ Start-$($DialogName)TextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_LostFocus({ Start-$($DialogName)TextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    Start-$($DialogName)TextBoxLostFocus -Sender `$$($DialogName)TextBox -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, ((`$$($DialogName)GroupBox.Controls[`$$($DialogName)GroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Text = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpValidCheck = `$$($DialogName)Form.Tag")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItemValue = `"`$(`$$($DialogName)GroupBox.Controls[`$Key].Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$ChkItemValue = (-not (([String]::IsNullOrEmpty(`$TmpItemValue) -or `$$($DialogName)GroupBox.Controls[`$Key].Tag.HintEnabled)))")
  [Void]$StringBuilder.AppendLine("      if (`$ChkItemValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$TmpItemValue")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$$($DialogName)Form.Tag)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -and `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -or `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$TmpValidCheck)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)GroupBox.Controls[`$Key].Text = `$$($DialogName)GroupBox.Controls[`$Key].Tag.Value")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)GroupBox.Controls[`$Key].Tag.HintEnabled = (`$$($DialogName)GroupBox.TextLength -eq 0)")
  [Void]$StringBuilder.AppendLine("      Start-$($DialogName)TextBoxLostFocus -Sender `$$($DialogName)GroupBox.Controls[`$Key] -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$OrderedItems)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGMultiTextBoxInput"
}
#endregion function Build-MyFCGMultiTextBoxInput

# Get / Select RadioButton Options
#region function Build-MyFCGRadioButtonOption
Function Build-MyFCGRadioButtonOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .EXAMPLE
      Build-MyFCGRadioButtonOption -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGRadioButtonOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.AppendLine("# ------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$Item = @{}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [HashTable]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Selected $($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("      Ordered List (HashTable) if Names and Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      With if Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$OrderedItems = [Ordered]@{ `"First Choice in the List.`" = `"1`"; `"Pick this Item!`" = `"2`"; `"No, Pick this one!!`" = `"3`"; `"Never Pick this Option.`" = `"4`"}")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"RadioButton Option`" -Message `"Show this Sample Message Prompt to the User`" -OrderedItems `$OrderedItems -Selected `"4`"")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected = `"`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Number = 0")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)RadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)RadioButton)")
  [Void]$StringBuilder.AppendLine("    #`$$($DialogName)RadioButton.AutoCheck = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Checked = (`$OrderedItems[`$Key] -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Name = `"RadioChoice`$(`$$($DialogName)Number)`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Tag = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)RadioButton.Text = `$Key")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)RadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$$($DialogName)RadioButton.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Number += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (@(`$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { (`$PSItem.GetType().Name -eq `"RadioButton`") -and `$PSItem.Checked }).Count -eq 1)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$RadioButton In @(`$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" }))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RadioButton.Checked = (`$RadioButton.Tag -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempItem = @{}")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" -and `$PSItem.Checked } | ForEach-Object -Process { `$TempItem.Add(`$PSItem.Text, `$PSItem.Tag) }")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$True, `$DialogResult, `$TempItem)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$False, `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGRadioButtonOption"
}
#endregion function Build-MyFCGRadioButtonOption

# Get / Select CheckBox Options
#region function Build-MyFCGCheckBoxOption
Function Build-MyFCGCheckBoxOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .EXAMPLE
      Build-MyFCGCheckBoxOption -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGCheckBoxOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.AppendLine("# ------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$Items = @{}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [HashTable]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Selected Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("      Ordered List (HashTable) if Names and Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      With of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$OrderedItems = [Ordered]@{ `"First Choice in the List.`" = `"1`"; `"Pick this Item!`" = `"2`"; `"No, Pick this one!!`" = `"3`"; `"Never Pick this Option.`" = `"4`" }")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Get CheckBox Option`" -Message `"Show this Sample Message Prompt to the User`" -OrderedItems `$OrderedItems -Selected @(`"1`", `"4`") -Required")
  [Void]$StringBuilder.AppendLine("      if (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected = @(),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Required")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)Panel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Number = 0")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)CheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)CheckBox)")
  [Void]$StringBuilder.AppendLine("    #`$$($DialogName)CheckBox.AutoCheck = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Checked = (`$OrderedItems[`$Key] -in `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Name = `"CheckBox`$(`$$($DialogName)Number)`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Tag = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckBox.Text = `$Key")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)CheckBox = [System.Windows.Forms.CheckBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$$($DialogName)CheckBox.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Number += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Required.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If (@(`$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { (`$PSItem.GetType().Name -eq `"CheckBox`") -and `$PSItem.Checked }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$CheckBox In @(`$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" }))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$CheckBox.Checked = (`$CheckBox.Tag -in `$Selected)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempItems = @{}")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"CheckBox*`" -and `$PSItem.Checked } | ForEach-Object -Process { `$TempItems.Add(`$PSItem.Text, `$PSItem.Tag) }")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$True, `$DialogResult, `$TempItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$False, `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGCheckBoxOption"
}
#endregion function Build-MyFCGCheckBoxOption

# Get / Select ListBox Option
#region function Build-MyFCGGetListBoxOption
Function Build-MyFCGGetListBoxOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetListBoxOption -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetListBoxOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# ------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# ------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object[]]`$Items")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object[]]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class
  
  #region function Get-ListBoxOption
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Items to show in the ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("      Sort ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("      Allow Selecting Multiple Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property to Display in the ListBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property for the Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Default Selected ListBox Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Middle Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Items = Get-Service")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Get ListBox Option`" -Message `"Show this Sample Message Prompt to the User`" -DisplayMember `"DisplayName`" -ValueMember `"Name`" -Items `$Items -Selected `$Items[1, 3, 5, 7] -Multi")
  [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 20,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Required")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.Height - (`$$($DialogName)GroupBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)ListBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Name = `"$($DialogName)ListBox`"")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ListBox = [System.Windows.Forms.ListBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ListBox.Tag = @(`$Items | Where-Object -FilterScript { `$PSItem -in `$Selected} )")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ListBox.Tag = @(`$Items | Select-Object -First 1 )")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.Tag | ForEach-Object -Process { `$$($DialogName)ListBox.SelectedItems.Add(`$PSItem) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.Tag = @()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ListBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ListBoxMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TreeView Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TreeView MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ListBoxMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($DialogName)ListBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$$($DialogName)ListBox.Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ContextMenuStrip.Show(`$$($DialogName)ListBox, `$EventArg.Location)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($DialogName)ListBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ListBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.add_MouseDown({ Start-$($DialogName)ListBoxMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$$($DialogName)ListBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) ContextMenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ListView.Controls.Add(`$$($DialogName)ContextMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ContextMenuStrip.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ImageList = `$$($ScriptName)SmallImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Name = `"$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripOpening")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ContextMenuStrip Control that fired the Opening Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ContextMenuStrip Opening Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripOpening -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ContextMenuStrip]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #`$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"`$(`$Sender.Name)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.add_Opening({Start-$($DialogName)ContextMenuStripOpening -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SelectAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @(`$$($DialogName)ListBox.Items) | ForEach-Object -Process { `$$($DialogName)ListBox.SelectedItems.Add(`$PSItem) }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UnSelectAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ListBox.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Select All`" -Name `"SelectAll`" -Tag `"SelectAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"CheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Unselect All`" -Name `"UnSelectAll`" -Tag `"UnSelectAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"UncheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)ListBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListBox.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)ListBox.Tag.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ListBox.Tag | ForEach-Object -Process { `$$($DialogName)ListBox.SelectedItems.Add(`$PSItem) }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($DialogName)ListBox.SelectedItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, @())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)
  
  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetListBoxOption"
}
#endregion function Build-MyFCGGetListBoxOption

# Get / Select CheckedListBox Option
#region function Build-MyFCGGetCheckedListBoxOption
Function Build-MyFCGGetCheckedListBoxOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetCheckedListBoxOption -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetCheckedListBoxOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********


  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object[]]`$Items")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object[]]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Items to show in the ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("      Sort ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property to Display in the CheckedListBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property for the Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Default Selected CheckedListBox Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Items = Get-Service")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = CheckedGet-$($DialogName) -Title `"Get CheckListBox Option`" -Message `"Show this Sample Message Prompt to the User`" -DisplayMember `"DisplayName`" -ValueMember `"Name`" -Items `$Items -Selected `$Items[1, 3, 5, 7]")
  [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 20,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Required")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.Height - (`$$($DialogName)GroupBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Controls.Add(`$$($DialogName)CheckedListBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.CheckOnClick = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Name = `"$($DialogName)CheckedListBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)CheckedListBox = [System.Windows.Forms.CheckedListBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckedListBox.Tag = @(`$Items | Where-Object -FilterScript { `$PSItem -in `$Selected})")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckedListBox.Tag | ForEach-Object -Process { `$$($DialogName)CheckedListBox.SetItemChecked(`$$($DialogName)CheckedListBox.Items.IndexOf(`$PSItem), `$True) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)CheckedListBox.Tag = @()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)CheckedListBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)CheckedListBoxMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TreeView Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TreeView MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)CheckedListBoxMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.CheckedListBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($DialogName)CheckedListBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$$($DialogName)CheckedListBox.Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ContextMenuStrip.Show(`$$($DialogName)CheckedListBox, `$EventArg.Location)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($DialogName)CheckedListBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)CheckedListBoxMouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)CheckedListBox.add_MouseDown({ Start-$($DialogName)CheckedListBoxMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$$($DialogName)CheckedListBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) ContextMenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ListView.Controls.Add(`$$($DialogName)ContextMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ContextMenuStrip.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ImageList = `$$($ScriptName)SmallImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Name = `"$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripOpening")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ContextMenuStrip Control that fired the Opening Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ContextMenuStrip Opening Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripOpening -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ContextMenuStrip]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #`$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"`$(`$Sender.Name)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.add_Opening({Start-$($DialogName)ContextMenuStripOpening -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"CheckAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpCheckedItems = @(`$$($DialogName)CheckedListBox.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("        (0..`$(`$$($DialogName)CheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { `$PSItem -notin `$TmpCheckedItems } | ForEach-Object -Process { `$$($DialogName)CheckedListBox.SetItemChecked(`$PSItem, `$True) }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UnCheckAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpCheckedItems = @(`$$($DialogName)CheckedListBox.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("        `$TmpCheckedItems | ForEach-Object -Process { `$$($DialogName)CheckedListBox.SetItemChecked(`$PSItem, `$False) }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Check All`" -Name `"CheckAll`" -Tag `"CheckAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"CheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Uncheck All`" -Name `"UnCheckAll`" -Tag `"UnCheckAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"UncheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)CheckedListBox.CheckedItems.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpCheckedItems = @(`$$($DialogName)CheckedListBox.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("    `$TmpCheckedItems | ForEach-Object -Process { `$$($DialogName)CheckedListBox.SetItemChecked(`$PSItem, `$False) }")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)CheckedListBox.Tag.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)CheckedListBox.Tag | ForEach-Object -Process { `$$($DialogName)CheckedListBox.SetItemChecked(`$$($DialogName)CheckedListBox.Items.IndexOf(`$PSItem), `$True) }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($DialogName)CheckedListBox.CheckedItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, @())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetCheckedListBoxOption"
}
#endregion function Build-MyFCGGetCheckedListBoxOption

# Get / Select ComboBox Option
#region function Build-MyFCGGetComboBoxOption
Function Build-MyFCGGetComboBoxOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetComboBoxOption -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetComboBoxOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Items to show in the ComboBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("      Sort ComboBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("      The Default Selected Item when no Value is Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property to Display in the CheckedListBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("      Name of the Property for the Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Default Selected ComboBox Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Variables = @(Get-ChildItem -Path `"Variable:\`")")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Combo Choice Dialog 01`" -Message `"Show this Sample Message Prompt to the User`" -Items `$Variables -DisplayMember `"Name`" -ValueMember `"Value`" -Selected (`$Variables[4])")
  [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectText = `"Select Value`",")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Controls.Add(`$GetComboChoiceComboBox)")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  [void]`$GetComboChoiceComboBox.Items.Add([PSCustomObject]@{ `$DisplayMember = `" - `$(`$SelectText) - `"; `$ValueMember = `" - `$(`$SelectText) - `"})")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Name = `"GetComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Size = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$GetComboChoiceComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$GetComboChoiceComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GetComboChoiceComboBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$GetComboChoiceComboBox.Tag = `$Items | Where-Object -FilterScript { `$PSItem -eq `$Selected}")
  [Void]$StringBuilder.AppendLine("    `$GetComboChoiceComboBox.SelectedItem = `$GetComboChoiceComboBox.Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$GetComboChoiceComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$GetComboChoiceComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$GetComboChoiceComboBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$GetComboChoiceComboBox.Tag))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$GetComboChoiceComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$GetComboChoiceComboBox.SelectedItem = `$GetComboChoiceComboBox.Tag")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$GetComboChoiceComboBox.SelectedItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetComboBoxOption"
}
#endregion function Build-MyFCGGetComboBoxOption

# Get / Select ComboBox Filter
#region function Build-MyFCGGetComboBoxFilter
Function Build-MyFCGGetComboBoxFilter ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGGetComboBoxFilter -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetComboBoxFilter"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------------")
  
  #region ComboBoxFilterItem Class
  [Void]$StringBuilder.AppendLine("#region ComboBoxFilterItem Class")
  [Void]$StringBuilder.AppendLine("Class ComboBoxFilterItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Text")
  [Void]$StringBuilder.AppendLine("  [Object]`$Value")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  ComboBoxFilterItem ([String]`$Text, [Object]`$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ComboBoxFilterItem Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion ComboBoxFilterItem Class
  
  #region ComboBoxFilter Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$Values")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [HashTable]`$Values)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Values = `$Values")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion ComboBoxFilter Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("Function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Items to show in the ComboBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Properties")
  [Void]$StringBuilder.AppendLine("      Name of the Properties to Filter On")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Default Selected ComboBox Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoFilter")
  [Void]$StringBuilder.AppendLine("      Do Not Filter ComBox Items from other Selected ComboBox Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"Combo Filter Dialog 01`" -Message `"Show this Sample Message Prompt to the User`" -Items `$ServiceList -Properties Status, Name, StartType")
  [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Selected = @{},")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoFilter,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Properties`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = `$Properties")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = (`$Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)GroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)Label.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Name = `"$($DialogName)GroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)GroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  Function Start-GetComboFilterComboBoxSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ComboBox Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ComboBox SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-GetComboFilterComboBoxSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ComboBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$ValidItems = @(`$Items)")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItems = @(`$ValidItems | Where-Object -FilterScript { `$PSItem.(`$FilterOptionName) -like `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedItem.Value })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItemNames = @(`$ValidItems | Select-Object -ExpandProperty `$FilterOptionName -Unique)")
  [Void]$StringBuilder.AppendLine("      If (`$FilterOptionName -ne `$Sender.Name)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveList = @(`$$($DialogName)GroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { (`$PSItem.Text -notin `$ValidItemNames) -and (`$PSItem.Value -ne `"*`") })")
  [Void]$StringBuilder.AppendLine("        ForEach (`$RemoveItem In `$RemoveList)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)GroupBox.Controls[`$FilterOptionName].Items.Remove(`$RemoveItem)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$HaveItemNames = @(`$$($DialogName)GroupBox.Controls[`$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)")
  [Void]$StringBuilder.AppendLine("      `$AddList = @(`$$($DialogName)GroupBox.Controls[`$FilterOptionName].Tag.Items | Where-Object -FilterScript { (`$PSItem.Text -in `$ValidItemNames) -and (`$PSItem.Text -notin `$HaveItemNames) })")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)GroupBox.Controls[`$FilterOptionName].Items.AddRange(`$AddList)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-GetComboFilterComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls.Add(`$TmpFilterComboBox)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DisplayMember = `"Text`"")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    [void]`$TmpFilterComboBox.Items.Add([PSCustomObject]@{ `"Text`" = `" - Return All `$(`$FilterOptionName) Values - `"; `"Value`" = `"*`" })")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Name = `$FilterOptionName")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Size = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$TmpFilterComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Sorted = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ValueMember = `"Value`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Items.AddRange(@(`$Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty(`$PSITem.(`$FilterOptionName)) } | Sort-Object -Property `$FilterOptionName -Unique | ForEach-Object -Process { [ComboBoxFilterItem]::New(`$PSITem.(`$FilterOptionName), `$PSITem.(`$FilterOptionName)) }))")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = @{ `"Items`" = @(`$TmpFilterComboBox.Items); `"SelectedItem`" = `$Null }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (-not `$NoFilter.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpFilterComboBox.add_SelectedIndexChanged({ Start-GetComboFilterComboBoxSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)GroupBox.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)GroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)GroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # `$Sender")
  [Void]$StringBuilder.AppendLine("    If (`$Selected.ContainsKey(`$FilterOptionName))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItem = `$$($DialogName)GroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { `$PSItem.Value -eq `$Selected.(`$FilterOptionName) }")
  [Void]$StringBuilder.AppendLine("      If (-not [String]::IsNullOrEmpty(`$TmpItem.Text))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedItem = `$TmpItem")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)GroupBox.Controls[`$FilterOptionName].Tag.SelectedItem = `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)GroupBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)GroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$ValidateClick = 0")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidateClick = `$ValidateClick + `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedIndex")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    If (`$ValidateClick -eq 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedItem = `$$($DialogName)GroupBox.Controls[`$FilterOptionName].Tag.SelectedItem")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpHash = [HashTable]::New()")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpHash.Add(`$FilterOptionName, `$$($DialogName)GroupBox.Controls[`$FilterOptionName].SelectedItem.Value)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$TmpHash)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, @{ })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetComboBoxFilter"
}
#endregion function Build-MyFCGGetComboBoxFilter

# Get / Seelct ListView Option
#region function Build-MyFCGGetListViewOption
Function Build-MyFCGGetListViewOption ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .PARAMETER ControlName
    .EXAMPLE
      Build-MyFCGGetListViewOption -ScriptName $ScriptName -ControlName $DialogName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGGetListViewOption"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********


  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Get $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------------")

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Get-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Get-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to Show")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      Items to show in the ListVieww")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("      Name of the Properties to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tooltip")
  [Void]$StringBuilder.AppendLine("      ToolTip to Displays")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("      Selected Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("      Selected ListView Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("      Allow Select Multiple Rows")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of Get-$($DialogName) Dialog Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("      Show Filter TextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resize")
  [Void]$StringBuilder.AppendLine("      Make Get-$($DialogName) Dialog Window ReSixeable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Functions = @(Get-ChildItem -Path `"Function:\`")")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Get-$($DialogName) -Title `"ListView Choice Dialog 01`" -Message `"Show this Sample Message Prompt to the User`" -Items `$Functions -Property `"Name`", `"Version`", `"Source`" -Selected (`$Functions[2]) -Tooltip `"Show this ToolTip`" -Resize -Multi")
  [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Failed")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Property,")
  [Void]$StringBuilder.AppendLine("    [String]`$Tooltip,")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected = `"xX NONE Xx`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 50,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 12,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Resize,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  if (`$Resize.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Text = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)Label)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Name = `"$($DialogName)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Text = `$Message")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)Label = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$TmpSize = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($DialogName)Label.Text, [MyConfig]::Font.Regular, `$$($DialogName)Label.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Label.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$TmpSize.Height + [MyConfig]::Font.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($DialogName)Label.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)ListView)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.FullRowSelect = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.GridLines = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Name = `"LAU$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.OwnerDraw = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.ShowItemToolTips = `$PSBoundParameters.ContainsKey(`"ToolTip`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Text = `"LAU$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.View = [System.Windows.Forms.View]::Details")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ListViewDrawColumnHeader")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ListViewDrawColumnHeader -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawColumnHeader Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), `$EventArg.Bounds)")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, `$EventArg.Bounds.Width, (`$EventArg.Bounds.Height - 1))")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawString(`$EventArg.Header.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), (`$EventArg.Bounds.X + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Y + ((`$EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawColumnHeader Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.add_DrawColumnHeader({Start-$($DialogName)ListViewDrawColumnHeader -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ListViewDrawItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ListViewDrawItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawItem Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawItem Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.add_DrawItem({Start-$($DialogName)ListViewDrawItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ListViewDrawSubItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($DialogName) ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ListViewDrawSubItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawSubItem Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawSubItem Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.add_DrawSubItem({Start-$($DialogName)ListViewDrawSubItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ListViewMouseDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ListViewMouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        MouseDown Event for the IDP TreeView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TreeView Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TreeView MouseDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ListViewMouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$$($DialogName)ListView.Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ContextMenuStrip.Show(`$$($DialogName)ListView, `$EventArg.Location)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($DialogName)ListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ListViewMouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.add_MouseDown({ Start-$($DialogName)ListViewMouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  foreach (`$PropName in `$Property)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$$($DialogName)ListView.Columns.Add(`$PropName, -2)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$$($DialogName)ListView.Columns.Add(`" `", (`$$($DialogName)Form.Width * 2))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$$($DialogName)ListView.Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`"`$(`$Item.(`$Property[0]))`")))).SubItems.AddRange(@(`$Property[1..99] | ForEach-Object -Process { `"`$(`$Item.(`$PSItem))`" }))")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Name = `"`$(`$Item.(`$Property[0]))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tag = `$Item")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tooltiptext = `"`$(`$Item.(`$Tooltip))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Selected = (`$Item -in `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Checked = (`$Multi.IsPresent -and `$ListViewItem.Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Tag = @(`$$($DialogName)ListView.Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)FilterLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)ListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Name = `"$($DialogName)FilterLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), `$$($DialogName)FilterLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Text = `"Filter List:`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)FilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Panel.Controls.Add(`$$($DialogName)TextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Location = [System.Drawing.Point]::New((`$$($DialogName)FilterLabel.Right + [MyConfig]::FormSpacer), `$$($DialogName)FilterLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.MaxLength = 100")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Name = `"$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)ListView.Right - `$$($DialogName)TextBox.Left), `$$($DialogName)FilterLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #`$$($DialogName)TextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Tag = @{ `"HintText`" = `"Enter Text and Press [Enter] to Filter List Items.`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($DialogName)TextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($DialogName)TextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($DialogName)TextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit GotFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($DialogName)TextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_GotFocus({ Start-$($DialogName)TextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($DialogName)TextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($DialogName)TextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Suppress KeyPress")
  [Void]$StringBuilder.AppendLine("        `$EventArg.SuppressKeyPress = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$Sender.Text.Trim()))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)ListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)ListView.Items.AddRange(`$$($DialogName)ListView.Tag)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TmpNewList = @(`$$($DialogName)ListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$Sender.Text) -or (`$PSItem.SubItems[1].Text -Match `$Sender.Text) })")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)ListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)ListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($DialogName)TextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_KeyDown({ Start-$($DialogName)TextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($DialogName)TextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($DialogName) TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($DialogName)TextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ListView.Items.AddRange(`$$($DialogName)ListView.Tag)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$TmpNewList = @(`$$($DialogName)ListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$$($DialogName)TextBox.Text) -or (`$PSItem.SubItems[1].Text -Match `$$($DialogName)TextBox.Text) })")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit LostFocus Event for ```$$($DialogName)TextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($DialogName)TextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.add_LostFocus({ Start-$($DialogName)TextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Start-$($DialogName)TextBoxLostFocus -Sender `$$($DialogName)TextBox -EventArg `"Lost Focus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)TextBox.Right + [MyConfig]::FormSpacer), (`$$($DialogName)TextBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($DialogName)ListView.Right + [MyConfig]::FormSpacer), (`$$($DialogName)ListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) ContextMenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ListView.Controls.Add(`$$($DialogName)ContextMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  #`$$($DialogName)ContextMenuStrip.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.ImageList = `$$($ScriptName)SmallImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.Name = `"$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripOpening")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Opening Event for the $($DialogName) ContextMenuStrip Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ContextMenuStrip Control that fired the Opening Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ContextMenuStrip Opening Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripOpening -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ContextMenuStrip]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #`$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"`$(`$Sender.Name)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Opening Event for ```$$($DialogName)ContextMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripOpening ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ContextMenuStrip.add_Opening({Start-$($DialogName)ContextMenuStripOpening -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)ContextMenuStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName) ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)ContextMenuStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"CheckAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpChecked = @(`$$($DialogName)ListView.Items | Where-Object -FilterScript { -not `$PSItem.Checked })")
  [Void]$StringBuilder.AppendLine("        `$TmpChecked | ForEach-Object -Process { `$PSItem.Checked = `$True }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UnCheckAll`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpChecked = @(`$$($DialogName)ListView.Items | Where-Object -FilterScript { `$PSItem.Checked })")
  [Void]$StringBuilder.AppendLine("        `$TmpChecked | ForEach-Object -Process { `$PSItem.Checked = `$False }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)ContextMenuStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)ContextMenuStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Check All`" -Name `"CheckAll`" -Tag `"CheckAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"CheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)ContextMenuStrip -Text `"Uncheck All`" -Name `"UnCheckAll`" -Tag `"UnCheckAll`" -DisplayStyle `"ImageAndText`" -ImageKey `"UncheckIcon`" -PassThru).add_Click({Start-$($DialogName)ContextMenuStripItemClick -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (((`$$($DialogName)ListView.CheckedItems.Count -gt 0) -and ((-not `$Multi.IsPresent) -or `$Multi.IsPresent)) -or (-not `$Required.IsPresent))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Selected))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ListView.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ListView.Items | ForEach-Object -Process { `$PSItem.Checked = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$Item in `$$($DialogName)ListView.Items)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Item.Selected = (`$Item.Tag -in `$Selected)")
  [Void]$StringBuilder.AppendLine("        `$Item.Checked = (`$Multi.IsPresent -and `$Item.Selected)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListView.Refresh()")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)ListView.Select()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)Form.ClientSize.Width, (`$TempClientSize.Height + `$$($DialogName)BtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = `$$($DialogName)Form.Size")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)FilterLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)TextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($DialogName)]::New(`$True, `$DialogResult, (`$$($DialogName)ListView.CheckedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($DialogName)]::New(`$True, `$DialogResult, (`$$($DialogName)ListView.SelectedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$False, `$DialogResult, `"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-$($DialogName)

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGGetListViewOption"
}
#endregion function Build-MyFCGGetListViewOption

# Select / Browse Icon Files
#region function Build-MyFCGExtractSystemIcon
Function Build-MyFCGExtractSystemIcon ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGExtractSystemIcon -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGExtractSystemIcon"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  #region $($DialogName) Result Class
  [Void]$StringBuilder.AppendLine("#region ******** $($DialogName) Result Class ********")
  [Void]$StringBuilder.AppendLine("Class $($DialogName)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$IconPath")
  [Void]$StringBuilder.AppendLine("  [Int[]]`$IconIndex")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($DialogName) ([Object]`$DialogResult, [String]`$IconPath, [Int[]]`$IconIndex)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.IconPath = `$IconPath")
  [Void]$StringBuilder.AppendLine("    `$This.IconIndex = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($DialogName) Result Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Result Class

  #region function Extract-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Extract-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Extract-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Extract-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Extract-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Title of the Extract-$($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FileMessage")
  [Void]$StringBuilder.AppendLine("      Text to show above Selected Icon Libtary")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconMessage")
  [Void]$StringBuilder.AppendLine("      Text to show above Icons")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconPath")
  [Void]$StringBuilder.AppendLine("      Name / Path to Icon Libary File")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconIndex")
  [Void]$StringBuilder.AppendLine("      Icon Number in Icon Libary")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("      Allow select Multiple icons")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of Extract-$($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of Extract-$($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("      Left Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("      Missing Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("      Right Button DaialogResult")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Extract-$($DialogName) -Title `$Title")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$FileMessage = `"Selected Icon File / Library`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconMessage = `"File / Library Icons...`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconPath = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$IconIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(35, 60)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 30,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(25, 35)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 25,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Extract-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FormComponents = [System.ComponentModel.Container]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) ImageList")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)ImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ImageList = [System.Windows.Forms.ImageList]::New(`$$($DialogName)FormComponents)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)ImageList.ImageSize = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)ImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_KeyDown({ Start-$($DialogName)FormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Move({ Start-$($DialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconPath = `"`$(`$$($DialogName)FileTextBox.Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = @(`$$($DialogName)FileTextBox.Tag)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)IconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("        For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($DialogName)ImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("          [Void](`$$($DialogName)IconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)IconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$$($DialogName)IconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$TempIconIndex | ForEach-Object -Process { `$$($DialogName)IconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$$($DialogName)IconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("            `$$($DialogName)IconListView.Select()")
  [Void]$StringBuilder.AppendLine("            `$$($DialogName)IconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)FileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)FileLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.Name = `"$($DialogName)FileLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.Text = `$FileMessage")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)FileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)FileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)FileButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.Name = `"$($DialogName)FileButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.Text = `"  &Browse...  `"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.Location = [System.Drawing.Point]::New((`$$($DialogName)Panel.ClientSize.Width - (`$$($DialogName)FileButton.Width + [MyConfig]::FormSpacer)), (`$$($DialogName)FileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)FileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FileButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)File Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)File Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FileButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)FileButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)OpenFileDialog.Title = `"Extact Icons`"")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)OpenFileDialog.Filter = `"All Icon Files|*.ico;*.exe;*.dll|Icon Files|*.ico|EXE Files|*.exe|DLL Files|*.dll|All Files|*.*`"")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)OpenFileDialog.FilterIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($ScriptName)OpenFileDialog.FileName = `"`"")
  [Void]$StringBuilder.AppendLine("    If (`$$($ScriptName)OpenFileDialog.ShowDialog(`$$($ScriptName)Form) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($ScriptName)OpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($$($ScriptName)OpenFileDialog.FileName)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)ImageList.Images.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)IconListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$TempIconPath = `"`$(`$$($ScriptName)OpenFileDialog.FileName)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)IconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)ImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("        [Void](`$$($DialogName)IconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)IconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)FileTextBox.Text = `$TempIconPath")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)FileTextBox.Tag = @(-1)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)FileButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileButton.add_Click({ Start-$($DialogName)FileButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)FileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)FileTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)FileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Name = `"$($DialogName)FileTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Size = [System.Drawing.Size]::New(((`$$($DialogName)FileButton.Left - [MyConfig]::FormSpacer) - `$$($DialogName)FileTextBox.Left), `$$($DialogName)FileButton.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Text = `$IconPath")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.Tag = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FileTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)FileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)IconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)IconLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)FileTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.Name = `"$($DialogName)IconLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.Text = `$IconMessage")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)IconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)IconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)IconListView)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.LabelWrap = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.LargeImageList = `$$($DialogName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($DialogName)IconLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Name = `"$($DialogName)IconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ((`$$($DialogName)Panel.ClientSize.Height - [MyConfig]::FormSpacer) - `$$($DialogName)IconListView.Top))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Sorting = [System.Windows.Forms.SortOrder]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.Text = `"$($DialogName)IconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.View = [System.Windows.Forms.View]::LargeIcon")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)IconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)IconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)IconListViewSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($DialogName)Icon ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($DialogName)Icon ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ListView SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)IconListViewSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$$($DialogName)IconListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$$($DialogName)IconListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)IconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)IconListView.add_SelectedIndexChanged({ Start-$($DialogName)IconListViewSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Name = `"$($DialogName)BtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($DialogName)BtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Name = `"$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)BtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($DialogName)IconListView.CheckedIndices.Count -and `$$($DialogName)IconListView.CheckBoxes) -or (`$$($DialogName)IconListView.SelectedIndices.Count -and (-not `$$($DialogName)IconListView.CheckBoxes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($DialogName)Form, `"No Icons Selected`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmLeftButton.add_Click({ Start-$($DialogName)BtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Name = `"$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($DialogName)BtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)BtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = `$$($DialogName)FileTextBox.Tag")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)IconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)IconListView.CheckedIndices | ForEach-Object -Process { `$$($DialogName)IconListView.Items[`$PSItem].Checked = `$False }")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconIndex | ForEach-Object -Process { `$$($DialogName)IconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($DialogName)IconListView.SelectedIndices.Clear()")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)IconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)IconListView.Select()")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)IconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmMidButton.add_Click({ Start-$($DialogName)BtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.Controls.Add(`$$($DialogName)BtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Location = [System.Drawing.Point]::New((`$$($DialogName)BtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Name = `"$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabIndex = 5")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($DialogName)BtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)BtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)BtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)BtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)BtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)BtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmRightButton.add_Click({ Start-$($DialogName)BtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($DialogName)BtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($DialogName)BtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)BtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$$($DialogName)IconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($DialogName)]::New(`$DialogResult, `$$($DialogName)FileTextBox.Text, `$$($DialogName)IconListView.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($DialogName)]::New(`$DialogResult, `$$($DialogName)FileTextBox.Text, `$$($DialogName)IconListView.SelectedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($DialogName)]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)FormComponents.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Extract-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Extract-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Select-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGExtractSystemIcon"
}
#endregion function Build-MyFCGExtractSystemIcon

# Show Script Information
#region function Build-MyFCGShowScriptInfo
Function Build-MyFCGShowScriptInfo ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER ScriptName
    .EXAMPLE
      Build-MyFCGShowScriptInfo -ScriptName $ScriptName -ControlName $DialogName -ControlType $ControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [parameter(Mandatory = $True)]
    [String]$DialogName,
    [parameter(Mandatory = $True)]
    [ValidateSet("WebBrowser", "RichTextBox")]
    [String]$ControlType
  )
  Write-Verbose -Message "Enter Function Build-MyFCGShowScriptInfo"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ********* My Code ********

  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Show $($DialogName) Function")
  [Void]$StringBuilder.AppendLine("# --------------------------------")

  #region $($DialogName) Info Topics
  [Void]$StringBuilder.AppendLine("#region $($DialogName) Info Topics")
  [Void]$StringBuilder.AppendLine("")
  If ($ControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("# Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmySZ15JUX5KaXJJZn4e0AwjiKw+UBvMhKQi")
    [Void]$StringBuilder.AppendLine("KCskI7NYAYh8KxUwtEKcALcYzgQaCfKOggIAU+uXZNoAAAA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoEhUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQAohQVwzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoERUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQDX1agEzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoExUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQC95xyezwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# Web Site / Pages")
    [Void]$StringBuilder.AppendLine("#`$InfoIntro = `"http://www.MyDomain.Local/Help/Intro,html`"")
    [Void]$StringBuilder.AppendLine("#`$Info01 = `"http://www.MyDomain.Local/Help/Topic01.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info02 = `"http://www.MyDomain.Local/Help/Topic02.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info03 = `"http://www.MyDomain.Local/Help/Topic03.html`"")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc")
    [Void]$StringBuilder.AppendLine("ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc")
    [Void]$StringBuilder.AppendLine("ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed RTF")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($DialogName)Topics = [Ordered]@{}")
  [Void]$StringBuilder.AppendLine("`$$($DialogName)Topics.Add(`"InfoIntro`", @{`"Name`" = `"Info Introduction`"; `"Data`" = `$InfoIntro; `"Type`" = `"Base64`"})")
  [Void]$StringBuilder.AppendLine("`$$($DialogName)Topics.Add(`"Info01`", @{`"Name`" = `"Info Topic 01`"; `"Data`" = `$Info01; `"Type`" = `"Base64`"})")
  [Void]$StringBuilder.AppendLine("`$$($DialogName)Topics.Add(`"Info02`", @{`"Name`" = `"Info Topic 02`"; `"Data`" = `$Info02; `"Type`" = `"Base64`"})")
  [Void]$StringBuilder.AppendLine("`$$($DialogName)Topics.Add(`"Info03`", @{`"Name`" = `"Info Topic 03`"; `"Data`" = `$Info03; `"Type`" = `"Base64`"})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$InfoIntro = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info01 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info02 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info03 = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion $($DialogName) Dialog Info Topics")
  [Void]$StringBuilder.AppendLine("")
  #endregion $($DialogName) Info Topics

  #region function Show-$($DialogName)
  [Void]$StringBuilder.AppendLine("#region function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("function Show-$($DialogName) ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Show-$($DialogName) Window Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InfoTitle")
  [Void]$StringBuilder.AppendLine("      Title of Into Topics")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Topics")
  [Void]$StringBuilder.AppendLine("      Orders List of Tpoic to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DefInfoTopic")
  [Void]$StringBuilder.AppendLine("      Default Infomration Topic")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Width of the Show-$($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Height of the Show-$($DialogName) Window")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($DialogName) -Topics `$Topics")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$InfoTitle = `" << $($ScriptName) Info Topics >> `",")
  [Void]$StringBuilder.AppendLine("    [String]`$DefInfoTopic = `"InfoIntro`",")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Topics = `$$($DialogName)Topics,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 24")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Begin **** $($DialogName) **** Begin ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Icon = `$$($ScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Name = `"$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Owner = `$$($ScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Form = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Move({ Start-$($DialogName)FormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormResize ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormResize")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Resize Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Resize Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($DialogName)FormResize -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Resize Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Resize Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormResize ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Resize({ Start-$($DialogName)FormResize -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)FormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($DialogName) Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)FormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Start-$($DialogName)LeftToolStripItemClick -Sender (`$$($DialogName)LeftMenuStrip.Items[`$DefInfoTopic]) -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($DialogName)Form`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)FormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.add_Shown({ Start-$($DialogName)FormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName) Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)Panel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Name = `"$($DialogName)Panel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)Panel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  If ($ControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)WebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)WebBrowser)")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.AllowWebBrowserDrop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.DocumentText = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.IsWebBrowserContextMenuEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.Name = `"$($DialogName)WebBrowser`"")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.ScriptErrorsSuppressed = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.ClientSize.Height - (`$$($DialogName)WebBrowser.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)WebBrowser.WebBrowserShortcutsEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)WebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)Panel.Controls.Add(`$$($DialogName)RichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Name = `"$($DialogName)RichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Rtf = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Vertical")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Size = [System.Drawing.Size]::New((`$$($DialogName)Panel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($DialogName)Panel.ClientSize.Height - (`$$($DialogName)RichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($DialogName)RichTextBox.WordWrap = `$True")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)RichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)Panel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Left MenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)LeftMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.MainMenuStrip = `$$($DialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.ImageList = `$$($ScriptName)SmallImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.Name = `"$($DialogName)LeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)LeftMenuStrip.Text = `"$($DialogName)LeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)LeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($DialogName)LeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($DialogName)LeftToolStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)Left ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($DialogName)Left ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($DialogName)LeftToolStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($DialogName)LeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($DialogName)BtmStatusStrip.Items[`"Status`"].Text = `"Showing: `$(`$Sender.Text)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Exit`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($DialogName)Form.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Default")
  [Void]$StringBuilder.AppendLine("      {")
  If ($ControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("        `$$($DialogName)WebBrowser.DocumentText = `$Null")
    [Void]$StringBuilder.AppendLine("        Switch (`$Sender.Tag.Type)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          `"None`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("           `$$($DialogName)WebBrowser.DocumentText = `$Sender.Tag.Data")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("          `"Base64`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("           `$$($DialogName)WebBrowser.DocumentText = Encode-MyData -Data (`$Sender.Tag.Data) -AsString -Decode")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("          `"Compress`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("            `$$($DialogName)WebBrowser.DocumentText = Compress-MyData -Data (`$Sender.Tag.Data) -Decompress -AsString")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        `$$($DialogName)WebBrowser.Navigate((`$$($DialogName)Content[`$Sender.Name]))")
  }
  Else
  {
    [Void]$StringBuilder.AppendLine("        `$$($DialogName)RichTextBox.Clear()")
    [Void]$StringBuilder.AppendLine("        Switch (`$Sender.Tag.Type)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          `"None`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("            `$$($DalogName)RichTextBox.Rtf = `$Sender.Tag.Data")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("          `"Base64`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("            `$$($DalogName)RichTextBox.Rtf = Encode-MyData -Data (`$Sender.Tag.Data) -AsString -Decode")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("          `"Compress`"")
    [Void]$StringBuilder.AppendLine("          {")
    [Void]$StringBuilder.AppendLine("            `$$($DalogName)RichTextBox.Rtf = Compress-MyData -Data (`$Sender.Tag.Data) -Decompress -AsString")
    [Void]$StringBuilder.AppendLine("            Break")
    [Void]$StringBuilder.AppendLine("          }")
    [Void]$StringBuilder.AppendLine("        `$$($DalogName)RichTextBox.SelectAll()")
    [Void]$StringBuilder.AppendLine("        `$$($DalogName)RichTextBox.SelectionIndent = 10")
    [Void]$StringBuilder.AppendLine("        `$$($DalogName)RichTextBox.SelectionLength = 0")
    [Void]$StringBuilder.AppendLine("        }")
  }
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($DialogName)LeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($DialogName)LeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($DialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($DialogName)LeftMenuStrip -Text `$InfoTitle -Name `"Info Topics`" -Tag `"Info Topics`" -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($DialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  forEach (`$Key in `$Topics.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (New-MenuItem -Menu `$$($DialogName)LeftMenuStrip -Text (`$Topics[`$Key].Name) -Name `$Key -Tag @{`"Data`" = `$Topics[`$Key].Data; `"Type`" = `$Topics[`$Key].Type} -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"HelpIcon`" -PassThru).add_Click({ Start-$($DialogName)LeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($DialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($DialogName)LeftMenuStrip -Text `"E&xit`" -Name `"Exit`" -Tag `"Exit`" -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"ExitIcon`" -PassThru).add_Click({ Start-$($DialogName)LeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($DialogName)LeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)TopPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel.Dock = [System.Windows.Forms.DockStyle]::Top")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel.Name = `"$($DialogName)TopPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)TopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($DialogName)TopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel.Controls.Add(`$$($DialogName)TopLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.BackColor = [MyConfig]::Colors.TitleBack")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.ForeColor = [MyConfig]::Colors.TitleFore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Name = `"$($DialogName)TopLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopLabel.Size = [System.Drawing.Size]::New((`$$($DialogName)TopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($DialogName)TopLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)TopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)TopPanel.ClientSize = [System.Drawing.Size]::New(`$$($DialogName)TopPanel.ClientSize.Width, (`$$($DialogName)TopLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($DialogName)TopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($DialogName)Btm StatusStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($DialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Controls.Add(`$$($DialogName)BtmStatusStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.ImageList = `$$($ScriptName)SmallImageList")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.Name = `"$($DialogName)BtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)BtmStatusStrip.Text = `"$($DialogName)BtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($DialogName)BtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($DialogName)BtmStatusStrip -Text `"Status`" -Name `"Status`" -Tag `"Status`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($DialogName) Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** End **** $($DialogName) **** End ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$$($DialogName)Form.ShowDialog(`$$($ScriptName)Form)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($DialogName)Form.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($DialogName)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($DialogName)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-$($DialogName)

  #endregion ********* My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGShowScriptInfo"
}
#endregion function Build-MyFCGShowScriptInfo

#endregion **** My FCG Build Dialog Functions ****

# ----------------------
# Build Script Fucntions
# ----------------------
#region **** Build Script Fucntions ****

#region function Build-MyFCGScriptHeader
Function Build-MyFCGScriptHeader ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptHeader -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptHeader"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#  Script: $($ScriptName)")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("Change Log for $($ScriptName)")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("0.0.0.0 - Initial Version")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#requires -version 5.0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("using namespace System.Windows.Forms")
  [Void]$StringBuilder.AppendLine("using namespace System.Drawing")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections.Generic")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections.Specialized")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("  .PARAMETER <Parameter-Name>")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("  .NOTES")
  [Void]$StringBuilder.AppendLine("    My Script $($ScriptName) Version 1.0 by $([System.Environment]::UserName) on $(([DateTime]::Now).ToString("MM/dd/yyyy"))")
  [Void]$StringBuilder.AppendLine("    Created with `"$([MyConfig]::ScriptName)`" Version $([MyConfig]::ScriptVersion)")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#[CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("#param (")
  [Void]$StringBuilder.AppendLine("#)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$VerbosePreference to 'SilentlyContinue' for Production Deployment")
  [Void]$StringBuilder.AppendLine("`$VerbosePreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("#`$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$DebugPreference for Production Deployment")
  [Void]$StringBuilder.AppendLine("`$DebugPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Hide Console Window Progress Bar")
  [Void]$StringBuilder.AppendLine("`$ProgressPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Clear Previous Error Messages")
  [Void]$StringBuilder.AppendLine("`$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Assemblies")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Drawing`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Enable Visual Styles")
  [Void]$StringBuilder.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Modules")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Import-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"ERROR: Unable to Load Module 'CimCmdlets'`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptHeader"
}
#endregion function Build-MyFCGScriptHeader

#region function Build-MyFCGScriptConfig
Function Build-MyFCGScriptConfig ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptConfig -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptConfig"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Configuration ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** $($ScriptName) Default Colors ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class Colors")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Object]`$Back")
  [Void]$StringBuilder.AppendLine("  [Object]`$Fore")
  [Void]$StringBuilder.AppendLine("  [Object]`$LabelFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$ErrorFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TitleBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TitleFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$GroupFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextROBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextFore")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextTitle")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextHint")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextBad")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextWarn")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextGood")
  [Void]$StringBuilder.AppendLine("  [Object]`$TextInfo")
  [Void]$StringBuilder.AppendLine("  [Object]`$ButtonBack")
  [Void]$StringBuilder.AppendLine("  [Object]`$ButtonFore")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Colors ([Object]`$Back, [Object]`$Fore, [Object]`$LabelFore, [Object]`$ErrorFore, [Object]`$TitleBack, [Object]`$TitleFore, [Object]`$GroupFore, [Object]`$TextBack, [Object]`$TextROBack, [Object]`$TextFore, [Object]`$TextTitle, [Object]`$TextHint, [Object]`$TextBad, [Object]`$TextWarn, [Object]`$TextGood, [Object]`$TextInfo, [Object]`$ButtonBack, [Object]`$ButtonFore)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Back = `$Back")
  [Void]$StringBuilder.AppendLine("    `$This.Fore = `$Fore")
  [Void]$StringBuilder.AppendLine("    `$This.LabelFore = `$LabelFore")
  [Void]$StringBuilder.AppendLine("    `$This.ErrorFore = `$ErrorFore")
  [Void]$StringBuilder.AppendLine("    `$This.TitleBack = `$TitleBack")
  [Void]$StringBuilder.AppendLine("    `$This.TitleFore = `$TitleFore")
  [Void]$StringBuilder.AppendLine("    `$This.GroupFore = `$GroupFore")
  [Void]$StringBuilder.AppendLine("    `$This.TextBack = `$TextBack")
  [Void]$StringBuilder.AppendLine("    `$This.TextROBack = `$TextROBack")
  [Void]$StringBuilder.AppendLine("    `$This.TextFore = `$TextFore")
  [Void]$StringBuilder.AppendLine("    `$This.TextTitle = `$TextTitle")
  [Void]$StringBuilder.AppendLine("    `$This.TextHint = `$TextHint")
  [Void]$StringBuilder.AppendLine("    `$This.TextBad = `$TextBad")
  [Void]$StringBuilder.AppendLine("    `$This.TextWarn = `$TextWarn")
  [Void]$StringBuilder.AppendLine("    `$This.TextGood = `$TextGood")
  [Void]$StringBuilder.AppendLine("    `$This.TextInfo = `$TextInfo")
  [Void]$StringBuilder.AppendLine("    `$This.ButtonBack = `$ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$This.ButtonFore = `$ButtonFore")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Default Colors ********

  #region ******** $($ScriptName) Default Font ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class Font")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Object]`$Regular")
  [Void]$StringBuilder.AppendLine("  [Object]`$Hint")
  [Void]$StringBuilder.AppendLine("  [Object]`$Bold")
  [Void]$StringBuilder.AppendLine("  [Object]`$Title")
  [Void]$StringBuilder.AppendLine("  [Single]`$Ratio")
  [Void]$StringBuilder.AppendLine("  [Single]`$Width")
  [Void]$StringBuilder.AppendLine("  [Single]`$Height")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Font ([Object]`$Regular, [Object]`$Hint, [Object]`$Bold, [Object]`$Title, [Single]`$Ratio, [Single]`$Width, [Single]`$Height)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Regular = `$Regular")
  [Void]$StringBuilder.AppendLine("    `$This.Hint = `$Hint")
  [Void]$StringBuilder.AppendLine("    `$This.Bold = `$Bold")
  [Void]$StringBuilder.AppendLine("    `$This.Title = `$Title")
  [Void]$StringBuilder.AppendLine("    `$This.Ratio = `$Ratio")
  [Void]$StringBuilder.AppendLine("    `$This.Width = `$Width")
  [Void]$StringBuilder.AppendLine("    `$This.Height = `$Height")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Default Font ********

  #region ******** $($ScriptName) MyConfig ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) MyConfig ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class MyConfig")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Default Form Run Mode")
  [Void]$StringBuilder.AppendLine("  static [bool]`$Production = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptName = `"My Script - $($ScriptName)`"")
  [Void]$StringBuilder.AppendLine("  static [Version]`$ScriptVersion = [Version]::New(`"0.0.0.0`")")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptAuthor = `"$([System.Environment]::UserName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptRoot = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ConfigFile = `"`"")
  [Void]$StringBuilder.AppendLine("  static [PSCustomObject]`$ConfigData = [PSCustomObject]@{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Runtime Values")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$Is64Bit = ([IntPtr]::Size -eq 8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Settings")
  [Void]$StringBuilder.AppendLine("  static [Int]`$FormSpacer = 4")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinWidth = 60")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinHeight = 35")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Font")
  [Void]$StringBuilder.AppendLine("  static [String]`$FontFamily = `"Verdana`"")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontSize = 10")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontTitle = 1.5")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Static [OrderedDictionary]`$RequiredModules = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Az.Accounts`" = `"4.0.2`"")
  [Void]$StringBuilder.AppendLine("    `"Az.KeyVault`" = `"6.3.1`"")
  [Void]$StringBuilder.AppendLine("    `"Az.Automation`" = `"1.11.1`"")
  [Void]$StringBuilder.AppendLine("    `"Microsoft.Graph.Authentication`" = `"2.28.0`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Azure Logon Information")
  [Void]$StringBuilder.AppendLine("  static [String]`$TenantID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$SubscriptionID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AADLogonInfo = `$Null")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AccessToken = `$Null")
  [Void]$StringBuilder.AppendLine("  static [HashTable]`$AuthToken = @{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Color Mode")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$DarkMode = ((Get-Itemproperty -Path `"Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize`" -ErrorAction `"SilentlyContinue`").AppsUseLightTheme -eq `"0`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Form Auto Exit")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExit = 0")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitMax = 60")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitTic = 60000")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Administrative Rights")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # KPI Event Logging")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  static [String]`$KPILogName = `"KPI Event Log`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Network / Internet")
  [Void]$StringBuilder.AppendLine("  static [__ComObject]`$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]`"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Script Credentials")
  [Void]$StringBuilder.AppendLine("  static [String]`$Domain = `"Domain`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$UserID = `"UserID`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$Password = `"P@ssw0rd`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default SMTP Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$SMTPServer = `"smtp.mydomain.local`"")
  [Void]$StringBuilder.AppendLine("  static [int]`$SMTPPort = 25")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default MEMCM Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMServer = `"MyMEMCM.MyDomain.Local`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMSite = `"XYZ`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMNamespace = `"Root\SMS\Site_XYZ`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Help / Issues Uri's")
  [Void]$StringBuilder.AppendLine("  static [String]`$HelpURL = `"https://www.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$BugURL = `"https://www.amazon.com/`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # CertKet for Cert Encryption")
  [Void]$StringBuilder.AppendLine("  static [String]`$CertKey = `"`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Web Browser File Path's")
  [Void]$StringBuilder.AppendLine("  static [String]`$EdgePath = (Get-Itemproperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ChromePath = (Get-Itemproperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Current DateTime Offset")
  [Void]$StringBuilder.AppendLine("  static [DateTimeOffset]`$DateTimeOffset = [System.DateTimeOffset]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [Colors]`$Colors")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [Font]`$Font")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) MyConfig ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Get Script Path")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty(`$HostInvocation))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$Script:MyInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$HostInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) MyConfig ********

  #region ******** $($ScriptName) Default Colors ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("If ([MyConfig]::DarkMode)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FromArgb(48, 48, 48), # Back")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DodgerBlue, # Fore [System.Drawing.Color]::LightCoral")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # LabelForr")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Red, # ErrorFoer")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # TitleFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # TitleBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # GroupFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # TextBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # TextROBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, #TextFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TextTitle")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gray, # TextHint")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FireBrick, # TextBad")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Sienna, # TextWarn")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::ForestGreen, # TextGood")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::CornflowerBlue, # TextInfo")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::DarkGray, # ButtonBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black # ButtonFore")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("Else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::WhiteSmoke, # Back")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # Fore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # LabelFor")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Red, # ErrorFoer")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::LightBlue, # TitleFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TitleBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # GroupFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::White, # TextBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # TextROBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Black, # TextFore")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy, # TextTitle")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gray, # TextHint")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::FireBrick, #TextBad")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Sienna, # TextWarn")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::ForestGreen, # TextGood")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::CornflowerBlue, # TextInfo")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Gainsboro, # ButtonBack")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]::Navy) # ButtonFore")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Default Colors")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Colors = [Colors]::New(")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # Back")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # Fore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # LabelFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # ErrorFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # TitleFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # TitleBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText, # GroupFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Window, # #TextBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Window, # TextROBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextFore")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextTitle")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::GrayText, # TextHint")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextBad")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextWarn")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextGood")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::WindowText, # TextInfo")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::Control, # ButtonBack")
  [Void]$StringBuilder.AppendLine("  [System.Drawing.SystemColors]::ControlText # ButtonFore")
  [Void]$StringBuilder.AppendLine(")")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#endregion Default Colors")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Default Colors ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Default Colors ********
  
  #region ******** $($ScriptName) Default Font ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize")
  [Void]$StringBuilder.AppendLine(":FontCheck Do")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  `$Bold = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)")
  [Void]$StringBuilder.AppendLine("  `$Graphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)")
  [Void]$StringBuilder.AppendLine("  `$MeasureString = `$Graphics.MeasureString(`"X`", `$Bold)")
  [Void]$StringBuilder.AppendLine("  If ((`$MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor(`$MeasureString.Width))) -or (`$MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor(`$MeasureString.Height))))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::FontSize = [MyConfig]::FontSize - .1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    break FontCheck")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("While (`$True)")
  [Void]$StringBuilder.AppendLine("`$Regular = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)")
  [Void]$StringBuilder.AppendLine("`$Hint = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)")
  [Void]$StringBuilder.AppendLine("`$Title = [System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Bold)")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font = [Font]::New(`$Regular, `$Hint, `$Bold, `$Title, (`$Graphics.DpiX / 96), ([Math]::Floor(`$MeasureString.Width)), ([Math]::Ceiling(`$MeasureString.Height)))")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = `$Null")
  [Void]$StringBuilder.AppendLine("`$Regular = `$Null")
  [Void]$StringBuilder.AppendLine("`$Hint = `$Null")
  [Void]$StringBuilder.AppendLine("`$Bold = `$Null")
  [Void]$StringBuilder.AppendLine("`$Title = `$Null")
  [Void]$StringBuilder.AppendLine("`$MeasureString = `$Null")
  [Void]$StringBuilder.AppendLine("`$Graphics.Dispose()")
  [Void]$StringBuilder.AppendLine("`$Graphics = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Default Font ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Default Font ********
  
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Configuration  ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** $($ScriptName) Custom Config Classes ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Custom Config Classes ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Custom Config Classes ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Custom Config Classes ********
  
  #region ******** $($ScriptName) Runtime Values ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Runtime Values ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class MyRuntime")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Static [String]`$Property = `"Value`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Runtime  Values ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $($ScriptName) Runtime Values ********

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptConfig"
}
#endregion function Build-MyFCGScriptConfig

#region function Build-MyFCGScriptDefEnums
Function Build-MyFCGScriptDefEnums ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptDefEnums -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptDefEnums"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** My Default Enumerations ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** enum MyAnswer ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyAnswer")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Unknown = 0")
  [Void]$StringBuilder.AppendLine("  No      = 1")
  [Void]$StringBuilder.AppendLine("  Yes     = 2")
  [Void]$StringBuilder.AppendLine("  Maybe   = 3")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyAnswer ********

  #region ******** enum MyDigit ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("enum MyDigit")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Zero")
  [Void]$StringBuilder.AppendLine("  One")
  [Void]$StringBuilder.AppendLine("  Two")
  [Void]$StringBuilder.AppendLine("  Three")
  [Void]$StringBuilder.AppendLine("  Four")
  [Void]$StringBuilder.AppendLine("  Five")
  [Void]$StringBuilder.AppendLine("  Six")
  [Void]$StringBuilder.AppendLine("  Seven")
  [Void]$StringBuilder.AppendLine("  Eight")
  [Void]$StringBuilder.AppendLine("  Nine")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyDigit ********

  #region ******** enum MyBits ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyBits")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Bit01 = 0x00000001")
  [Void]$StringBuilder.AppendLine("  Bit02 = 0x00000002")
  [Void]$StringBuilder.AppendLine("  Bit03 = 0x00000004")
  [Void]$StringBuilder.AppendLine("  Bit04 = 0x00000008")
  [Void]$StringBuilder.AppendLine("  Bit05 = 0x00000010")
  [Void]$StringBuilder.AppendLine("  Bit06 = 0x00000020")
  [Void]$StringBuilder.AppendLine("  Bit07 = 0x00000040")
  [Void]$StringBuilder.AppendLine("  Bit08 = 0x00000080")
  [Void]$StringBuilder.AppendLine("  Bit09 = 0x00000100")
  [Void]$StringBuilder.AppendLine("  Bit10 = 0x00000200")
  [Void]$StringBuilder.AppendLine("  Bit11 = 0x00000400")
  [Void]$StringBuilder.AppendLine("  Bit12 = 0x00000800")
  [Void]$StringBuilder.AppendLine("  Bit13 = 0x00001000")
  [Void]$StringBuilder.AppendLine("  Bit14 = 0x00002000")
  [Void]$StringBuilder.AppendLine("  Bit15 = 0x00004000")
  [Void]$StringBuilder.AppendLine("  Bit16 = 0x00008000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyBits ********

  [Void]$StringBuilder.AppendLine("#endregion ******** My Default Enumerations ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptDefEnums"
}
#endregion function Build-MyFCGScriptDefEnums

#region function Build-MyFCGScriptDefClasses
Function Build-MyFCGScriptDefClasses ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptDefClasses -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptDefClasses"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** My Custom Class ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** MyListItem Class ********
  [Void]$StringBuilder.AppendLine("#region ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("Class MyListItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Text")
  [Void]$StringBuilder.AppendLine("  [Object]`$Value")
  [Void]$StringBuilder.AppendLine("  [Object]`$Tag")
  [Void]$StringBuilder.AppendLine("  [MyBits]`$Flags")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** MyListItem Class ********

  [Void]$StringBuilder.AppendLine("#endregion ******** My Custom Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptDefClasses"
}
#endregion function Build-MyFCGScriptDefClasses

#region function Build-MyFCGScriptWindowsAPIs
Function Build-MyFCGScriptWindowsAPIs ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptWindowsAPIs -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptWindowsAPIs"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Windows APIs ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** Win API - [Console.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Show()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Console")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetConsoleWindow();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Hide()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 0);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Show()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 5);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("[System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
  [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Console.Window] ********

  #region ******** Win API - [ControlBox.Menu] ********
  [Void]$StringBuilder.AppendLine("#region ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [ControlBox.Menu]::DisableFormClose(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace ControlBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Menu")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    const int MF_BYPOSITION = 0x400;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int GetMenuItemCount(IntPtr hWnd);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void DisableFormClose(IntPtr hWnd)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr hMenu = GetSystemMenu(hWnd, false);")
  [Void]$StringBuilder.AppendLine("      int menuItemCount = GetMenuItemCount(hMenu);")
  [Void]$StringBuilder.AppendLine("      RemoveMenu(hMenu, menuItemCount - 1, MF_BYPOSITION);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [ControlBox.Menu] ********

  #region ******** Win API - [My.Screen] ********
  [Void]$StringBuilder.AppendLine("#region ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info = [My.Screen]::Info()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info.PWidth = Physical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.PHeight = Physical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.LWidth = Logical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.LHeight = Logical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.Scale = Scale")
  [Void]$StringBuilder.AppendLine("# `$Info.BitsPixel = Bits Per Pixel")
  [Void]$StringBuilder.AppendLine("# `$Info.Referesh = Refresh Rate")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace My")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("  using System.Drawing;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Specialized;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public static class Screen")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"gdi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    internal static extern int GetDeviceCaps(IntPtr hdc, int nIndex);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static OrderedDictionary Info()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      /// Get Primary Desktop")
  [Void]$StringBuilder.AppendLine("      IntPtr Desktop = (Graphics.FromHwnd(IntPtr.Zero)).GetHdc();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      OrderedDictionary MyScreen = new OrderedDictionary();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Physical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempPW = GetDeviceCaps(Desktop, 118);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PWidth`", TempPW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PHeight`", GetDeviceCaps(Desktop, 117));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Logical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempLW = GetDeviceCaps(Desktop, 8);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LWidth`", TempLW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LHeight`", GetDeviceCaps(Desktop, 10));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Screen Scale")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Scale`", ((float)TempPW / (float)TempLW));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Other Screen Info")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"BitsPixel`", GetDeviceCaps(Desktop, 12));")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Referesh`", GetDeviceCaps(Desktop, 116));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return MyScreen.AsReadOnly();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Drawing.dll`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [My.Screen] ********

  #region ******** Win API - [User.Desktop] ********
  [Void]$StringBuilder.AppendLine("#region ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [User.Desktop]::Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace User")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Desktop")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, string lParam, uint fuFlags, uint uTimeout, IntPtr lpdwResult);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr HWND_BROADCAST = new IntPtr(0xffff);")
  [Void]$StringBuilder.AppendLine("    private const int WM_SETTINGCHANGE = 0x1a;")
  [Void]$StringBuilder.AppendLine("    private const int SMTO_ABORTIFHUNG = 0x0002;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.Runtime.InteropServices.DllImport(`"Shell32.dll`")] ")
  [Void]$StringBuilder.AppendLine("    private static extern int SHChangeNotify(int eventId, int flags, IntPtr item1, IntPtr item2);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void Refresh()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, IntPtr.Zero, null, SMTO_ABORTIFHUNG, 100, IntPtr.Zero);")
  [Void]$StringBuilder.AppendLine("      SHChangeNotify(0x8000000, 0x1000, IntPtr.Zero, IntPtr.Zero);    ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [User.Desktop] ********

  #region ******** Win API - [Display.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::SetForegroundWindow(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_HIDE)")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_SHOW)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Enum ShowWindow")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  SW_HIDE = 0")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNORMAL = 1")
  [Void]$StringBuilder.AppendLine("  SW_MAXIMIZE = 3")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNOACTIVATE = 4")
  [Void]$StringBuilder.AppendLine("  SW_SHOW = 5")
  [Void]$StringBuilder.AppendLine("  SW_MINIMIZE = 6")
  [Void]$StringBuilder.AppendLine("  SW_SHOWMINNOACTIVE = 7")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNA = 8")
  [Void]$StringBuilder.AppendLine("  SW_RESTORE = 9")
  [Void]$StringBuilder.AppendLine("  SW_SHOWDEFAULT = 10")
  [Void]$StringBuilder.AppendLine("  SW_FORCEMINIMIZE = 11")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Display")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool SetForegroundWindow(IntPtr Handle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    public static extern bool ShowWindow(IntPtr Handle, int ShowOpt);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Display.Window] ********

  #region ******** Win API - [Extract.MyIcon] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$TempCount = [Extract.MyIcon]::IconCount(`"C:\Windows\System32\shell32.dll`")")
  [Void]$StringBuilder.AppendLine("#`$TempIcon = [Extract.MyIcon]::IconReturn(`"C:\Windows\System32\shell32.dll`", 1, `$False)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Drawing;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Extract")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class MyIcon")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyIcon(IntPtr hIcon);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"shell32.dll`", CharSet = CharSet.Auto)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static int IconCount(string FileName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return 0;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      Icon RetData = null;")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("        if (GetLarge)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in LIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in SIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return RetData;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return IconReturn(FileName, IconNum, false);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies System.Drawing -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Extract.MyIcon] ********

  #region ******** Win API - [Login.Sessions] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions()")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions(`"ComputerName`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace Login")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class Sessions")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    } ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    public struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public Int32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public String SessionName;")
  [Void]$StringBuilder.AppendLine("      public WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern IntPtr WTSOpenServer(string pServerName);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSCloseServer(IntPtr hServer);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern int WTSEnumerateSessions(System.IntPtr hServer, int Reserved, int Version, ref System.IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSFreeMemory(IntPtr pMemory);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return EnumSessions(System.Environment.MachineName, All);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (string ComputerName, bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Int32 Count = 0;")
  [Void]$StringBuilder.AppendLine("      IntPtr Computer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr SessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      Int32 DataSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      List<WTS_SESSION_INFO> SessionList = new List<WTS_SESSION_INFO>();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Computer = WTSOpenServer(ComputerName);")
  [Void]$StringBuilder.AppendLine("        if (Computer !=IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Int64 RetValue = WTSEnumerateSessions(Computer, 0, 1, ref SessionInfo, ref Count);")
  [Void]$StringBuilder.AppendLine("          if (RetValue != 0)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Int64 Start = (Int64)SessionInfo;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("            for (Int32 Index = 0; Index < Count; Index++)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              WTS_SESSION_INFO SessionData = (WTS_SESSION_INFO)Marshal.PtrToStructure((System.IntPtr)(Start + (DataSize * Index)), typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("              if ((SessionData.State == WTS_CONNECTSTATE_CLASS.WTSActive) | All)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                SessionList.Add(SessionData);")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          WTSFreeMemory(SessionInfo);")
  [Void]$StringBuilder.AppendLine("          WTSCloseServer(Computer);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return SessionList;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Login.Sessions] ********

  #region ******** Win API - [Impersonate.User] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Impersonate")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public enum LogonType")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_INTERACTIVE = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK = 3,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_BATCH = 4,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_SERVICE = 5,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_UNLOCK = 7,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK_CLEARTEXT = 8, // Win2K or higher")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NEW_CREDENTIALS = 9 // Win2K or higher")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public enum LogonProvider")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_DEFAULT = 0,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT35 = 1,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT40 = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT50 = 3")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class User")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true, CharSet = CharSet.Unicode)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr Token);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool CloseHandle(IntPtr hHandle);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Impersonate Example")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#`$UserToken = [IntPtr]::Zero")
  [Void]$StringBuilder.AppendLine("#if ([Impersonate.User]::LogonUser(`$UserID, `$Domain, `$Password, 2, 0, [Ref]`$UserToken))")
  [Void]$StringBuilder.AppendLine("#{")
  [Void]$StringBuilder.AppendLine("#  Try")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    `$Impersonate = [System.Security.Principal.WindowsIdentity]::Impersonate(`$UserToken)")
  [Void]$StringBuilder.AppendLine("#    #region ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#    #endregion ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  Finally")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    if (-not [String]::IsNullOrEmpty(`$Impersonate))")
  [Void]$StringBuilder.AppendLine("#    {")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate.Undo()")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate = `$Null")
  [Void]$StringBuilder.AppendLine("#    }")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  [Void]([Impersonate.User]::CloseHandle(`$UserToken))")
  [Void]$StringBuilder.AppendLine("#  `$UserToken = `$Null")
  [Void]$StringBuilder.AppendLine("#}")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#endregion Impersonate Example")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Impersonate.User] ********

  #region ******** Win API - [RunAs.CurrentUser] ********
  [Void]$StringBuilder.AppendLine("#region ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir, `$Visible)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace RunAs")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public static class CurrentUser")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NO_WINDOW = 0x08000000;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NEW_CONSOLE = 0x00000010;")
  [Void]$StringBuilder.AppendLine("    private const uint INVALID_SESSION_ID = 0xFFFFFFFF;")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr WTS_CURRENT_SERVER_HANDLE = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"CreateProcessAsUser`", SetLastError = true, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateProcessAsUser(IntPtr hToken, String lpApplicationName, String lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandle, uint dwCreationFlags, IntPtr lpEnvironment, String lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"DuplicateTokenEx`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DuplicateTokenEx(IntPtr ExistingTokenHandle, uint dwDesiredAccess, IntPtr lpThreadAttributes, int TokenType, int ImpersonationLevel, ref IntPtr DuplicateTokenHandle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateEnvironmentBlock(ref IntPtr lpEnvironment, IntPtr hToken, bool bInherit);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CloseHandle(IntPtr hSnapshot);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSQueryUserToken(uint SessionId, ref IntPtr phToken);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern int WTSEnumerateSessions(IntPtr hServer, int Reserved, int Version, ref IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SW")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SW_HIDE = 0,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_NORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINIMIZED = 2,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMAXIMIZED = 3,")
  [Void]$StringBuilder.AppendLine("      SW_MAXIMIZE = 3,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNOACTIVATE = 4,")
  [Void]$StringBuilder.AppendLine("      SW_SHOW = 5,")
  [Void]$StringBuilder.AppendLine("      SW_MINIMIZE = 6,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINNOACTIVE = 7,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNA = 8,")
  [Void]$StringBuilder.AppendLine("      SW_RESTORE = 9,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWDEFAULT = 10,")
  [Void]$StringBuilder.AppendLine("      SW_MAX = 10")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct PROCESS_INFORMATION")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public IntPtr hProcess;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hThread;")
  [Void]$StringBuilder.AppendLine("      public uint dwProcessId;")
  [Void]$StringBuilder.AppendLine("      public uint dwThreadId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SECURITY_IMPERSONATION_LEVEL")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SecurityAnonymous = 0,")
  [Void]$StringBuilder.AppendLine("      SecurityIdentification = 1,")
  [Void]$StringBuilder.AppendLine("      SecurityImpersonation = 2,")
  [Void]$StringBuilder.AppendLine("      SecurityDelegation = 3,")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct STARTUPINFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int cb;")
  [Void]$StringBuilder.AppendLine("      public String lpReserved;")
  [Void]$StringBuilder.AppendLine("      public String lpDesktop;")
  [Void]$StringBuilder.AppendLine("      public String lpTitle;")
  [Void]$StringBuilder.AppendLine("      public uint dwX;")
  [Void]$StringBuilder.AppendLine("      public uint dwY;")
  [Void]$StringBuilder.AppendLine("      public uint dwXSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwYSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwXCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwYCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwFillAttribute;")
  [Void]$StringBuilder.AppendLine("      public uint dwFlags;")
  [Void]$StringBuilder.AppendLine("      public short wShowWindow;")
  [Void]$StringBuilder.AppendLine("      public short cbReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr lpReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdInput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdOutput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdError;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum TOKEN_TYPE")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      TokenPrimary = 1,")
  [Void]$StringBuilder.AppendLine("      TokenImpersonation = 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public readonly UInt32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public readonly String pWinStationName;")
  [Void]$StringBuilder.AppendLine("      public readonly WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    // Gets the user token from the currently active session")
  [Void]$StringBuilder.AppendLine("    private static bool GetSessionUserToken(ref IntPtr phUserToken)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var bResult = false;")
  [Void]$StringBuilder.AppendLine("      var hImpersonationToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var activeSessionId = INVALID_SESSION_ID;")
  [Void]$StringBuilder.AppendLine("      var pSessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var sessionCount = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // Get a handle to the user access token for the current active session.")
  [Void]$StringBuilder.AppendLine("      if (WTSEnumerateSessions(WTS_CURRENT_SERVER_HANDLE, 0, 1, ref pSessionInfo, ref sessionCount) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        var arrayElementSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("        var current = pSessionInfo;")
  [Void]$StringBuilder.AppendLine("        for (var i = 0; i < sessionCount; i++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          var si = (WTS_SESSION_INFO)Marshal.PtrToStructure((IntPtr)current, typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("          current += arrayElementSize;")
  [Void]$StringBuilder.AppendLine("          if (si.State == WTS_CONNECTSTATE_CLASS.WTSActive)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            activeSessionId = si.SessionID;")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // If enumerating did not work, fall back to the old method")
  [Void]$StringBuilder.AppendLine("      if (activeSessionId == INVALID_SESSION_ID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        activeSessionId = WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (WTSQueryUserToken(activeSessionId, ref hImpersonationToken) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        // Convert the impersonation token to a primary token")
  [Void]$StringBuilder.AppendLine("        bResult = DuplicateTokenEx(hImpersonationToken, 0, IntPtr.Zero, (int)SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, (int)TOKEN_TYPE.TokenPrimary, ref phUserToken);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hImpersonationToken);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return bResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static uint StartProcessAsCurrentUser(string Application, string Arguments = null, string WorkingDir = null, bool visible = true)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var hUserToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var startInfo = new STARTUPINFO();")
  [Void]$StringBuilder.AppendLine("      startInfo.cb = Marshal.SizeOf(typeof(STARTUPINFO));")
  [Void]$StringBuilder.AppendLine("      var procInfo = new PROCESS_INFORMATION();")
  [Void]$StringBuilder.AppendLine("      var pEnv = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      uint ProcessID = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (GetSessionUserToken(ref hUserToken))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          uint dwCreationFlags = CREATE_UNICODE_ENVIRONMENT | (uint)(visible ? CREATE_NEW_CONSOLE : CREATE_NO_WINDOW);")
  [Void]$StringBuilder.AppendLine("          startInfo.wShowWindow = (short)(visible ? SW.SW_SHOW : SW.SW_HIDE);")
  [Void]$StringBuilder.AppendLine("          startInfo.lpDesktop = `"winsta0\\default`";")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if (CreateEnvironmentBlock(ref pEnv, hUserToken, false))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if (CreateProcessAsUser(hUserToken, Application, Arguments, IntPtr.Zero, IntPtr.Zero, false, dwCreationFlags, pEnv, WorkingDir, ref startInfo, out procInfo))")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              ProcessID = procInfo.dwProcessId;")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hUserToken);")
  [Void]$StringBuilder.AppendLine("        if (pEnv != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          DestroyEnvironmentBlock(pEnv);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hThread);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hProcess);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return ProcessID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [RunAs.CurrentUser] ********

  If ($False)
  {
    #region ******** Win API - [Elevate.UserRights] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::AddPrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::RemovePrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class UserRights")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", ExactSpelling = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool CloseHandle(IntPtr hHandle);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential, Pack = 1)]")
    [Void]$StringBuilder.AppendLine("    internal struct TokPriv1Luid")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("     public int Count;")
    [Void]$StringBuilder.AppendLine("     public long Luid;")
    [Void]$StringBuilder.AppendLine("     public int Attr;")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_DISABLED = 0x00000000;")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_ENABLED = 0x00000002;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_REQUIRED = 0x000F0000;")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_READ = 0x00020000;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ASSIGN_PRIMARY = 0x0001;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_DUPLICATE = 0x0002;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_IMPERSONATE = 0x0004;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY = 0x0008;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY_SOURCE = 0x0010;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_PRIVILEGES = 0x0020;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_GROUPS = 0x0040;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_DEFAULT = 0x0080;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_SESSIONID = 0x0100;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_READ = (STANDARD_RIGHTS_READ | TOKEN_QUERY);")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT | TOKEN_ADJUST_SESSIONID);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool AddPrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, false);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool RemovePrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, true);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal static bool AdjustPrivilege(string Privilege, bool Remove)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      try")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        bool retVal;")
    [Void]$StringBuilder.AppendLine("        TokPriv1Luid tp;")
    [Void]$StringBuilder.AppendLine("        IntPtr hproc = GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("        IntPtr htok = IntPtr.Zero;")
    [Void]$StringBuilder.AppendLine("        retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);")
    [Void]$StringBuilder.AppendLine("        tp.Count = 1;")
    [Void]$StringBuilder.AppendLine("        tp.Luid = 0;")
    [Void]$StringBuilder.AppendLine("        if (Remove)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_DISABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        else")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_ENABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        retVal = LookupPrivilegeValue(null, Privilege, ref tp.Luid);")
    [Void]$StringBuilder.AppendLine("        retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);")
    [Void]$StringBuilder.AppendLine("        if (htok != IntPtr.Zero)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          bool Ignore = CloseHandle(htok);")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        return retVal;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("      catch (Exception ex)")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        throw ex;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.UserRights] ********

    #region ******** Win API - [Elevate.Privilege] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(9)")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(9)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class Privilege")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"ntdll.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Enable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, true, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Disable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, false, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.Privilege] ********
  }

  #region ******** Win API - [MyAD.Stuff] ********
  [Void]$StringBuilder.AppendLine("#region ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [MyAD.Stuff]::GetSidString(([Byte[]]`$DirecitoryEntry.objectSid[0]))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyAD")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Stuff")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32`", CharSet = CharSet.Auto, SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    static extern bool ConvertSidToStringSid([MarshalAs(UnmanagedType.LPArray)] byte[] pSID, out IntPtr ptrSid);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static string GetSidString(byte[] sid)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr ptrSid;")
  [Void]$StringBuilder.AppendLine("      string sidString;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (!ConvertSidToStringSid(sid, out ptrSid))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new System.ComponentModel.Win32Exception();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        sidString = Marshal.PtrToStringAuto(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Marshal.FreeHGlobal(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return sidString;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [MyAD.Stuff] ********

  #region ******** Trust All Certs ********
  [Void]$StringBuilder.AppendLine("#region ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("  using System.Net;")
  [Void]$StringBuilder.AppendLine("  using System.Security.Cryptography.X509Certificates;")
  [Void]$StringBuilder.AppendLine("  public class TrustAllCertsPolicy : ICertificatePolicy ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("[Net.ServicePointManager]::CertificatePolicy = [TrustAllCertsPolicy]::New()")
  [Void]$StringBuilder.AppendLine("#endregion ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Trust All Certs ********

  #region ********* Get / Set LSA Auto Logon Password *********
  [Void]$StringBuilder.AppendLine("#region ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("using System.Text;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace LSA")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Secret")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_UNICODE_STRING")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public UInt16 Length;")
  [Void]$StringBuilder.AppendLine("      public UInt16 MaximumLength;")
  [Void]$StringBuilder.AppendLine("      public IntPtr Buffer;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_OBJECT_ATTRIBUTES")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int Length;")
  [Void]$StringBuilder.AppendLine("      public IntPtr RootDirectory;")
  [Void]$StringBuilder.AppendLine("      public LSA_UNICODE_STRING ObjectName;")
  [Void]$StringBuilder.AppendLine("      public uint Attributes;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityDescriptor;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityQualityOfService;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private enum LSA_AccessPolicy : long")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_LOCAL_INFORMATION = 0x00000001L,")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_AUDIT_INFORMATION = 0x00000002L,")
  [Void]$StringBuilder.AppendLine("      POLICY_GET_PRIVATE_INFORMATION = 0x00000004L,")
  [Void]$StringBuilder.AppendLine("      POLICY_TRUST_ADMIN = 0x00000008L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_ACCOUNT = 0x00000010L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_SECRET = 0x00000020L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_PRIVILEGE = 0x00000040L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x00000080L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_AUDIT_REQUIREMENTS = 0x00000100L,")
  [Void]$StringBuilder.AppendLine("      POLICY_AUDIT_LOG_ADMIN = 0x00000200L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SERVER_ADMIN = 0x00000400L,")
  [Void]$StringBuilder.AppendLine("      POLICY_LOOKUP_NAMES = 0x00000800L,")
  [Void]$StringBuilder.AppendLine("      POLICY_NOTIFICATION = 0x00001000L")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaRetrievePrivateData(IntPtr PolicyHandle, ref LSA_UNICODE_STRING KeyName, out IntPtr PrivateData);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaStorePrivateData(IntPtr policyHandle, ref LSA_UNICODE_STRING KeyName,ref LSA_UNICODE_STRING PrivateData);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaOpenPolicy(ref LSA_UNICODE_STRING SystemName, ref LSA_OBJECT_ATTRIBUTES ObjectAttributes, uint DesiredAccess, out IntPtr PolicyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaNtStatusToWinError(uint status);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaClose(IntPtr policyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaFreeMemory(IntPtr buffer);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private LSA_OBJECT_ATTRIBUTES ObjectAttributes;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING LocalSystem;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING SecretName;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = 0;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret (string ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (ComputerName.Length == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"ComputerName lenght zero`");")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = Marshal.StringToHGlobalUni(ComputerName);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = (UInt16)(ComputerName.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = (UInt16)((ComputerName.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private IntPtr GetLsaPolicy (LSA_AccessPolicy access)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaOpenPolicy (ref this.LocalSystem, ref this.ObjectAttributes, (uint)access, out LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaOpenPolicy failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void ReleaseLsaPolicy (IntPtr LsaPolicyHandle)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaClose(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaClose failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void FreeMemory(IntPtr Buffer)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaFreeMemory(Buffer);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaFreeMemory failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    public string GetSecret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr PrivateData = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_GET_PRIVATE_INFORMATION);")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaRetrievePrivateData(LsaPolicyHandle, ref SecretName, out PrivateData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"RetreivePrivateData failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = (LSA_UNICODE_STRING)Marshal.PtrToStructure(PrivateData, typeof(LSA_UNICODE_STRING));")
  [Void]$StringBuilder.AppendLine("      string Value = Marshal.PtrToStringAuto(LusSecretData.Buffer).Substring(0, (LusSecretData.Length / 2));")
  [Void]$StringBuilder.AppendLine("      FreeMemory (PrivateData);")
  [Void]$StringBuilder.AppendLine("      return Value;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool SetSecret (string Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      if (Value.Length > 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Create data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = Marshal.StringToHGlobalUni(Value);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = (UInt16)(Value.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = (UInt16)((Value.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Delete data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = 0;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_CREATE_SECRET);")
  [Void]$StringBuilder.AppendLine("      uint result = LsaStorePrivateData(LsaPolicyHandle, ref SecretName, ref LusSecretData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy (LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError (result);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return true;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return false;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ********* Get / Set LSA Auto Logon Password *********

  [Void]$StringBuilder.AppendLine("#endregion ******** Windows APIs ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptWindowsAPIs"
}
#endregion function Build-MyFCGScriptWindowsAPIs

#region function Build-MyFCGScriptFunctions
Function Build-MyFCGScriptFunctions ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptFunctions -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptFunctions"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Functions Library ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region **** Function Prompt ****
  [Void]$StringBuilder.AppendLine("#region Function Prompt")
  [Void]$StringBuilder.AppendLine("Function Prompt")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Console]::Title = `$PWD")
  [Void]$StringBuilder.AppendLine("  `"PS`$(`$PSVersionTable.PSVersion.Major)`$(`">`" * (`$NestedPromptLevel + 1)) `"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Prompt")
  [Void]$StringBuilder.AppendLine("")
  #endregion **** Function Prompt ****
  
  #region ******** Sample Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Verb-Noun
  [Void]$StringBuilder.AppendLine("#region function Verb-Noun")
  [Void]$StringBuilder.AppendLine("Function Verb-Noun ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-Noun -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-Noun")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-Noun
  
  #region function Verb-NounPiped
  [Void]$StringBuilder.AppendLine("#region function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("Function Verb-NounPiped()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-NounPiped -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Value | Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once when the Function Begins")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) End Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once whent he Function Ends")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-NounPiped
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Sample Functions ********
  
  #region ******* Microsoft Forms Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function New-MyListItem
  [Void]$StringBuilder.AppendLine("#region function New-MyListItem")
  [Void]$StringBuilder.AppendLine("function New-MyListItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new list item to a ComboBox or ListBox control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new list item as a PSCustomObject with Text, Value, and Tag properties,")
  [Void]$StringBuilder.AppendLine("      and adds it to the Items collection of the specified ComboBox or ListBox control.")
  [Void]$StringBuilder.AppendLine("      Optionally, the new item can be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("      The ComboBox or ListBox control to which the new item will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new list item. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The value associated with the new list item. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An optional object to associate additional data with the new list item.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, the function returns the newly created list item object instead of `$null.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyListItem -Control `$comboBox -Text `"Option 1`" -Value `"1`" -Tag `"First Option`"")
  [Void]$StringBuilder.AppendLine("      Adds a new item with text `"Option 1`", value `"1`", and tag `"First Option`" to the `$comboBox control.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$item = New-MyListItem -Control `$listBox -Text `"Item A`" -Value `"A`" -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new item to `$listBox and returns the created item object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$true)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$true)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$true)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$item = [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    Text  = `$Text")
  [Void]$StringBuilder.AppendLine("    Value = `$Value")
  [Void]$StringBuilder.AppendLine("    Tag   = `$Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Items.Add(`$item)")
  [Void]$StringBuilder.AppendLine("    `$item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Control.Items.Add(`$item)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyListItem
  
  #region function New-TreeNode
  [Void]$StringBuilder.AppendLine("#region function New-TreeNode")
  [Void]$StringBuilder.AppendLine("function New-TreeNode")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new TreeNode to a TreeView or another TreeNode.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.TreeNode with the specified properties and adds it to the provided parent TreeNode or TreeView. ")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, tag, font, colors, images, tooltip, checked state, and expansion. ")
  [Void]$StringBuilder.AppendLine("      The node can be inserted at the top or as a child node, and optionally returned via PassThru.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TreeNode")
  [Void]$StringBuilder.AppendLine("      The parent TreeNode or TreeView to which the new node will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new TreeNode. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new TreeNode. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new TreeNode.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the TreeNode text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the TreeNode. Defaults to [MyConfig]::Colors.TextBack.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the TreeNode. Defaults to [MyConfig]::Colors.TextFore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display for the TreeNode. Used when specifying images by index.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display when the TreeNode is selected. Used with ImageIndex parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display for the TreeNode. Used when specifying images by key.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectedImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display when the TreeNode is selected. Used with ImageKey parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the TreeNode.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AtTop")
  [Void]$StringBuilder.AppendLine("      If specified, inserts the new TreeNode at the top of the parent node's collection.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      If specified, sets the TreeNode's Checked property to `$true.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("      If specified, expands the new TreeNode after adding it.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AddChild")
  [Void]$StringBuilder.AppendLine("      If specified, adds a dummy child node to the new TreeNode (useful for lazy loading).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created TreeNode object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-TreeNode -TreeNode `$TreeNode -Text `"Node1`" -Tag `"Data`"")
  [Void]$StringBuilder.AppendLine("      Adds a new TreeNode with text `"Node1`" and tag `"Data`" to `$TreeNode.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$node = New-TreeNode -TreeNode `$TreeNode -Text `"Node2`" -Checked -Expand -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a checked and expanded node, and returns the created TreeNode object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$TreeNode,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$SelectedImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectedImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AtTop,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AddChild,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("  if (`$AddChild.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text, [System.Windows.Forms.TreeNode]::New(`"*`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AtTop.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Insert(0, `$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Add(`$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Checked.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.NodeFont = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Index`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageIndex`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$SelectedImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Expand.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Expand()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TreeNode")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TreeNode
  
  #region function New-MenuItem
  [Void]$StringBuilder.AppendLine("#region function New-MenuItem")
  [Void]$StringBuilder.AppendLine("function New-MenuItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new MenuItem to a Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ToolStripMenuItem with the specified properties and adds it to the provided Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, tooltip, icon, image index/key, text-image relation, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors.")
  [Void]$StringBuilder.AppendLine("      The new MenuItem can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("      The Menu or ToolStrip control to which the new MenuItem will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new MenuItem. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new MenuItem. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the MenuItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("      The icon to display for the MenuItem. Used when specifying images by icon. Mandatory for the 'Icon' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display for the MenuItem. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display for the MenuItem. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextImageRelation")
  [Void]$StringBuilder.AppendLine("      Specifies the position of the text and image relative to each other. Defaults to 'ImageBeforeText'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("      Specifies how the MenuItem displays its image and text. Defaults to 'Text'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("      Specifies the alignment of the MenuItem's text and image. Defaults to 'MiddleCenter'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new MenuItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("      If specified, disables the MenuItem (sets Enabled to `$false).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("      If specified, sets the MenuItem's Checked property to `$true.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("      If specified, enables the CheckOnClick property for the MenuItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("      Specifies the shortcut keys for the MenuItem. Defaults to 'None'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the MenuItem text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the MenuItem. Defaults to [MyConfig]::Colors.Back.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the MenuItem. Defaults to [MyConfig]::Colors.Fore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created MenuItem object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuItem -Menu `$menuStrip -Text `"Open`" -Tag `"OpenFile`"")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuItem with text `"Open`" and tag `"OpenFile`" to `$menuStrip.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$item = New-MenuItem -Menu `$contextMenu -Text `"Save`" -ImageIndex 2 -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuItem with an image at index 2 and returns the created MenuItem object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextImageRelation]`$TextImageRelation = `"ImageBeforeText`",")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("    if (`$Menu.DropDown.Items.Count -eq 1)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.BackColor = `$Menu.BackColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ForeColor = `$Menu.ForeColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ImageList = `$Menu.Owner.ImageList")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ShortcutKeys = `$ShortcutKeys")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = `$TextImageRelation")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuItem
  
  #region function New-MenuButton
  [Void]$StringBuilder.AppendLine("#region function New-MenuButton")
  [Void]$StringBuilder.AppendLine("function New-MenuButton()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new MenuButton (ToolStripButton) to a Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ToolStripButton with the specified properties and adds it to the provided Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, tooltip, icon, image index/key, display style, alignment, tag, enabled/disabled state, checked state, shortcut keys, font, and colors.")
  [Void]$StringBuilder.AppendLine("      The new MenuButton can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("      The Menu or ToolStrip control to which the new MenuButton will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new MenuButton. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new MenuButton. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the MenuButton.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("      The icon to display for the MenuButton. Used when specifying images by icon. Mandatory for the 'Icon' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display for the MenuButton. Used when specifying images by index. Mandatory for the 'ImageIndex' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display for the MenuButton. Used when specifying images by key. Mandatory for the 'ImageKey' parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("      Specifies how the MenuButton displays its image and text. Defaults to 'Text'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("      Specifies the alignment of the MenuButton's text and image. Defaults to 'MiddleCenter'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new MenuButton.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("      If specified, disables the MenuButton (sets Enabled to `$false).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("      If specified, sets the MenuButton's Checked property to `$true.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("      If specified, enables the CheckOnClick property for the MenuButton.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("      Specifies the shortcut keys for the MenuButton. Defaults to 'None'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the MenuButton text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the MenuButton. Defaults to [MyConfig]::Colors.Back.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the MenuButton. Defaults to [MyConfig]::Colors.Fore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created MenuButton object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuButton -Menu `$toolStrip -Text `"Run`" -Tag `"RunAction`"")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuButton with text `"Run`" and tag `"RunAction`" to `$toolStrip.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$button = New-MenuButton -Menu `$toolStrip -Text `"Save`" -ImageIndex 1 -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuButton with an image at index 1 and returns the created MenuButton object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextImageRelation]`$TextImageRelation = `"ImageBeforeText`",")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = [System.Windows.Forms.ToolStripButton]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Menu.Items.Add(`$TempMenuButton)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.TextImageRelation = `$TextImageRelation")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Size = `$Menu.ImageScalingSize")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -ne `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuButton")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuButton
  
  #region function New-MenuLabel
  [Void]$StringBuilder.AppendLine("#region function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("function New-MenuLabel()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new MenuLabel (ToolStripLabel) to a Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ToolStripLabel with the specified properties and adds it to the provided Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, tooltip, icon, display style, alignment, tag, enabled/disabled state, font, and colors.")
  [Void]$StringBuilder.AppendLine("      The new MenuLabel can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("      The Menu or ToolStrip control to which the new MenuLabel will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new MenuLabel. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new MenuLabel. If not specified, the Text value is used.  ")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the MenuLabel.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("      The icon to display for the MenuLabel. If specified, the label will show the icon.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("      Specifies how the MenuLabel displays its image and text. Defaults to 'Text'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("      Specifies the alignment of the MenuLabel's text and image. Defaults to 'MiddleLeft'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new MenuLabel.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("      If specified, disables the MenuLabel (sets Enabled to `$false).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the MenuLabel text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the MenuLabel. Defaults to [MyConfig]::Colors.Back.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the MenuLabel. Defaults to [MyConfig]::Colors.Fore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created MenuLabel object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuLabel -Menu `$menuStrip -Text `"Info`" -Tag `"Information`"")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuLabel with text `"Info`" and tag `"Information`" to `$menuStrip.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$label = New-MenuLabel -Menu `$contextMenu -Text `"Help`" -Icon `$icon -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new MenuLabel with an icon and returns the created MenuLabel object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleLeft`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Icon`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuLabel
  
  #region function New-MenuSeparator
  [Void]$StringBuilder.AppendLine("#region function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("function New-MenuSeparator()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new MenuSeparator (ToolStripSeparator) to a Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ToolStripSeparator and adds it to the provided Menu or ToolStrip control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of background and foreground colors.")
  [Void]$StringBuilder.AppendLine("      The separator is useful for visually grouping related menu items.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("      The Menu or ToolStrip control to which the new MenuSeparator will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the MenuSeparator. Defaults to [MyConfig]::Colors.Back.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (line) color of the MenuSeparator. Defaults to [MyConfig]::Colors.Fore.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MenuSeparator -Menu `$Menu")
  [Void]$StringBuilder.AppendLine("      Adds a new separator to the specified `$Menu control.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MenuSeparator -Menu `$contextMenu -BackColor ([System.Drawing.Color]::LightGray) -ForeColor ([System.Drawing.Color]::DarkGray)")
  [Void]$StringBuilder.AppendLine("      Adds a new separator to `$contextMenu with custom colors.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.Name = `"TempSeparator`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuSeparator
  
  #region function New-ListViewItem
  [Void]$StringBuilder.AppendLine("#region function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("function New-ListViewItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new ListViewItem to a ListView control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ListViewItem with the specified properties and adds it to the provided ListView control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, subitems, tag, indentation, group, tooltip, checked state, font, colors, and image (by index or key).")
  [Void]$StringBuilder.AppendLine("      The new ListViewItem can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("      The ListView control to which the new ListViewItem will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the ListViewItem. Defaults to [MyConfig]::Colors.TextBack.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the ListViewItem. Defaults to [MyConfig]::Colors.TextFore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the ListViewItem text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new ListViewItem. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new ListViewItem. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubItems")
  [Void]$StringBuilder.AppendLine("      An array of strings to add as subitems to the ListViewItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new ListViewItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IndentCount")
  [Void]$StringBuilder.AppendLine("      The number of indentation levels to apply to the ListViewItem. Only used with ImageIndex or ImageKey parameter sets.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display for the ListViewItem. Used when specifying images by index.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display for the ListViewItem. Used when specifying images by key.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Group")
  [Void]$StringBuilder.AppendLine("      The ListViewGroup to which the new ListViewItem will be added.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the ListViewItem.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      If specified, sets the ListViewItem's Checked property to `$true.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created ListViewItem object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewItem -ListView `$listView -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("      Adds a new ListViewItem with text `"Text`" and tag `"Tag`" to `$listView.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$item = New-ListViewItem -ListView `$listView -Text `"Item1`" -ImageIndex 2 -SubItems @(`"Sub1`",`"Sub2`") -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new ListViewItem with an image at index 2 and subitems, and returns the created ListViewItem object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SubItems,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$IndentCount = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListViewGroup]`$Group,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$Group)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Index`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageIndex, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageKey, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.IndentCount = `$IndentCount")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SubItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.SubItems.AddRange(`$SubItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Items.Add(`$TempListViewItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewItem
  
  #region function New-ColumnHeader
  [Void]$StringBuilder.AppendLine("#region function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("function New-ColumnHeader()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new ColumnHeader to a ListView control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ColumnHeader with the specified properties and adds it to the provided ListView control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of the header text, name, tag, and width. The new ColumnHeader can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("      The ListView control to which the new ColumnHeader will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new ColumnHeader. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new ColumnHeader. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new ColumnHeader.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      The width of the new ColumnHeader in pixels. Defaults to -2 (auto size).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created ColumnHeader object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ColumnHeader -ListView `$listView -Text `"Name`" -Tag `"UserName`"")
  [Void]$StringBuilder.AppendLine("      Adds a new ColumnHeader with text `"Name`" and tag `"UserName`" to `$listView.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$col = New-ColumnHeader -ListView `$listView -Text `"Date`" -Width 120 -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new ColumnHeader with text `"Date`" and width 120 pixels, and returns the created ColumnHeader object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = -2,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Columns.Add(`$TempColumnHeader)")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Text = `$Text")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Width = `$Width")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ColumnHeader
  
  #region function New-ListViewGroup
  [Void]$StringBuilder.AppendLine("#region function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("function New-ListViewGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new ListViewGroup to a ListView control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.ListViewGroup with the specified properties and adds it to the provided ListView control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of the group header, name, tag, and alignment. The new ListViewGroup can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("      The ListView control to which the new ListViewGroup will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Header")
  [Void]$StringBuilder.AppendLine("      The display header text for the new ListViewGroup. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new ListViewGroup. If not specified, the Header value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new ListViewGroup.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("      The alignment of the group header text. Defaults to 'Left'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created ListViewGroup object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewGroup -ListView `$listView -Header `"Header`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("      Adds a new ListViewGroup with header `"Header`" and tag `"Tag`" to `$listView.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$group = New-ListViewGroup -ListView `$listView -Header `"Group1`" -Name `"GroupOne`" -Alignment Center -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new ListViewGroup with header `"Group1`", name `"GroupOne`", centered alignment, and returns the created group object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Header,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = `"Left`",")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Groups.Add(`$TempListViewGroup)")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Header = `$Header")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Header")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.HeaderAlignment = `$Alignment")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewGroup
  
  #region function New-TabPage
  [Void]$StringBuilder.AppendLine("#region function New-TabPage")
  [Void]$StringBuilder.AppendLine("function New-TabPage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates and adds a new TabPage to a TabControl control.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new System.Windows.Forms.TabPage with the specified properties and adds it to the provided TabControl control.")
  [Void]$StringBuilder.AppendLine("      It supports customization of text, name, tag, tooltip, font, colors, image (by index or key), and enabled/disabled state.")
  [Void]$StringBuilder.AppendLine("      The new TabPage can optionally be returned via the PassThru switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabControl")
  [Void]$StringBuilder.AppendLine("      The TabControl control to which the new TabPage will be added. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("      The background color of the TabPage. Defaults to [MyConfig]::Colors.TextBack.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color of the TabPage. Defaults to [MyConfig]::Colors.TextFore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("      The font to use for the TabPage text. Defaults to [MyConfig]::Font.Regular.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      The display text for the new TabPage. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the new TabPage. If not specified, the Text value is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("      An object to associate additional data with the new TabPage.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("      The index of the image to display for the TabPage. Used when specifying images by index.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("      The key of the image to display for the TabPage. Used when specifying images by key.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("      The tooltip text to display when the mouse hovers over the TabPage.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      If specified, disables the TabPage (sets Enabled to `$false).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      If specified, returns the newly created TabPage object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$TabPage = New-TabPage -TabControl `$tabControl -Text `"General`" -Tag `"GeneralSettings`" -PassThru")
  [Void]$StringBuilder.AppendLine("      Adds a new TabPage with text `"General`" and tag `"GeneralSettings`" to `$tabControl and returns the created TabPage object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TabControl]`$TabControl,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = [System.Windows.Forms.TabPage]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  `$TabControl.Controls.Add(`$TempTabPage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Enabled = (-not `$Disabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TabPage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TabPage
  
  #region function Scale-MyForm
  [Void]$StringBuilder.AppendLine("#region function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("function Scale-MyForm()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Scales a Windows Forms control and its child controls by a specified factor.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function recursively scales the size and font of a Windows Forms control (such as a Form, Panel, GroupBox, etc.) and all its child controls by the specified scale factor. ")
  [Void]$StringBuilder.AppendLine("      It is useful for DPI scaling or dynamically resizing UI elements to accommodate different display settings or user preferences.")
  [Void]$StringBuilder.AppendLine("      The function handles controls with child controls in the Controls collection, as well as controls with an Items collection (such as ListBox, ComboBox, etc.).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("      The Windows Forms control to scale. This can be a Form or any control derived from System.Windows.Forms.Control. ")
  [Void]$StringBuilder.AppendLine("      If not specified, defaults to the global variable `$FCGForm.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scale")
  [Void]$StringBuilder.AppendLine("      The scaling factor to apply to the control and its children. ")
  [Void]$StringBuilder.AppendLine("      For example, a value of 1.25 increases size by 25%, while 0.8 reduces size by 20%. ")
  [Void]$StringBuilder.AppendLine("      The default value is 1 (no scaling).")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Form -Scale 1.5")
  [Void]$StringBuilder.AppendLine("      Scales the specified form and all its child controls by 150%.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Scale 0.9")
  [Void]$StringBuilder.AppendLine("      Scales the default form (`$FCGForm) and all its child controls by 90%.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      Recursively scales all controls, including those with an Items collection.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control = `$FCGForm,")
  [Void]$StringBuilder.AppendLine("    [Single]`$Scale = 1")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Control -is [System.Windows.Forms.Form])")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Scale(`$Scale)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Control.Font = [System.Drawing.Font]::New(`$Control.Font.FontFamily, (`$Control.Font.Size * `$Scale), `$Control.Font.Style)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$Control.PSObject.Properties.Match(`"Items`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Control.Controls.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$ChildControl in `$Control.Controls)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Scale-MyForm -Control `$ChildControl -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    foreach (`$Item in `$Control.Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Item -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Scale-MyForm
  
  #region My Custom ListView Sort
  [Void]$StringBuilder.AppendLine("#region Custom ListView Sort")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Windows.Forms;")
  [Void]$StringBuilder.AppendLine("using System.Collections;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyCustom")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class ListViewSort : IComparer")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private int _Column = 0;")
  [Void]$StringBuilder.AppendLine("    private bool _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    private bool _Enable = true;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = 0;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column, bool Order)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = Order;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Column")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Column; }")
  [Void]$StringBuilder.AppendLine("      set { _Column = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Ascending")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Ascending; }")
  [Void]$StringBuilder.AppendLine("      set { _Ascending = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Enable")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Enable; }")
  [Void]$StringBuilder.AppendLine("      set { _Enable = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Compare(object RowX, object RowY)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (_Enable)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (_Ascending)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Windows.Forms`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion My Custom ListView Sort")
  [Void]$StringBuilder.AppendLine("")
  #endregion My Custom ListView Sort
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Microsoft Forms Functions ********
  
  #region ******* Active Directory Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyADForest
  [Void]$StringBuilder.AppendLine("#region function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("function Get-MyADForest ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Gets information about an Active Directory Forest.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Retrieves the Active Directory Forest object either for the current forest or for a specified forest name.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the Active Directory forest to retrieve. This parameter is mandatory when using the `"Name`" parameter set.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      PS C:\> Get-MyADForest")
  [Void]$StringBuilder.AppendLine("      Retrieves the current Active Directory forest.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      PS C:\> Get-MyADForest -Name `"contoso.com`"")
  [Void]$StringBuilder.AppendLine("      Retrieves the Active Directory forest with the name `"contoso.com`".")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Forest")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADForest
  
  #region function Get-MyADDomain
  [Void]$StringBuilder.AppendLine("#region function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("function Get-MyADDomain ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Gets information about an Active Directory Domain.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Retrieves the Active Directory Domain object either for the current domain, a specified domain name, or the domain associated with the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the Active Directory domain to retrieve. This parameter is mandatory when using the `"Name`" parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Switch parameter. If specified, retrieves the Active Directory domain associated with the local computer. This parameter is mandatory when using the `"Computer`" parameter set.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      PS C:\> Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("      Retrieves the current Active Directory domain.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      PS C:\> Get-MyADDomain -Computer")
  [Void]$StringBuilder.AppendLine("      Retrieves the Active Directory domain associated with the local computer.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      PS C:\> Get-MyADDomain -Name `"contoso.com`"")
  [Void]$StringBuilder.AppendLine("      Retrieves the Active Directory domain with the name `"contoso.com`".")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Computer`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domian]::GetDomain(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Computer`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADDomain
  
  #region function Get-MyADObject
  [Void]$StringBuilder.AppendLine("#region function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("function Get-MyADObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Searches Active Directory and returns an AD SearchResultCollection.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Performs a search in Active Directory using the specified LDAP filter and returns a SearchResultCollection. ")
  [Void]$StringBuilder.AppendLine("      Supports specifying search root, server, credentials, properties to load, sorting, and paging options.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LDAPFilter")
  [Void]$StringBuilder.AppendLine("      The LDAP filter string to use for the search. Defaults to (objectClass=*).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PageSize")
  [Void]$StringBuilder.AppendLine("      The number of objects to return per page. Default is 1000.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SizeLimit")
  [Void]$StringBuilder.AppendLine("      The maximum number of objects to return. Default is 1000.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchRoot")
  [Void]$StringBuilder.AppendLine("      The LDAP path to start the search from. Defaults to the current domain root.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("      The name of the domain controller or server to query. If not specified, uses the default.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchScope")
  [Void]$StringBuilder.AppendLine("      The scope of the search. Valid values are Base, OneLevel, or Subtree. Default is Subtree.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sort")
  [Void]$StringBuilder.AppendLine("      The direction to sort the results. Valid values are Ascending or Descending. Default is Ascending.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SortProperty")
  [Void]$StringBuilder.AppendLine("      The property name to sort the results by.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertiesToLoad")
  [Void]$StringBuilder.AppendLine("      An array of property names to load for each result.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      The credentials to use when searching Active Directory.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject -LDAPFilter `"(objectClass=user)`" -SearchRoot `"OU=Users,DC=domain,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Searches for all user objects in the specified OU.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject -ServerName `"dc01.domain.com`" -PropertiesToLoad `"samaccountname`",`"mail`"")
  [Void]$StringBuilder.AppendLine("      Searches using a specific domain controller and returns only the samaccountname and mail properties.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$LDAPFilter = `"(objectClass=*)`",")
  [Void]$StringBuilder.AppendLine("    [Long]`$PageSize = 1000,")
  [Void]$StringBuilder.AppendLine("    [Long]`$SizeLimit = 1000,")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"LDAP://`$(`$([ADSI]'').distinguishedName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Base`", `"OneLevel`", `"Subtree`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SearchScope]`$SearchScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Ascending`", `"Descending`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SortDirection]`$Sort = `"Ascending`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SortProperty,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PropertiesToLoad,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = [System.DirectoryServices.DirectorySearcher]::New(`$LDAPFilter, `$PropertiesToLoad, `$SearchScope)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.PageSize = `$PageSize")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.SizeLimit = `$SizeLimit")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$SearchRoot.ToUpper()")
  [Void]$StringBuilder.AppendLine("  switch -regex (`$TempSearchRoot)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"(?:LDAP|GC)://*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot -replace `"(?<LG>(?:LDAP|GC)://)(?:[\w\d\.-]+/)?(?<DN>.+)`", `"```${LG}`$(`$ServerName)/```${DN}`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$ServerName)/`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot, (`$Credential.UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SortProperty`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.PropertyName = `$SortProperty")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.Direction = `$Sort")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.FindAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = `$Null")
  [Void]$StringBuilder.AppendLine("  `$MySearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADObject
  
  #region function New-MyADUser
  [Void]$StringBuilder.AppendLine("#region function New-MyADUser")
  [Void]$StringBuilder.AppendLine("function New-MyADUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates a new User in Active Directory.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new user object in Active Directory under the specified parent container (OU or CN).")
  [Void]$StringBuilder.AppendLine("      It allows you to specify user attributes such as SamAccountName, UserPrincipalName, first name, middle initial, last name, description, and password.")
  [Void]$StringBuilder.AppendLine("      You can also enable the account, set password options, and specify alternate credentials or a target domain controller.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parent")
  [Void]$StringBuilder.AppendLine("      The distinguished name (DN) of the parent container (OU or CN) where the new user will be created.")
  [Void]$StringBuilder.AppendLine("      Example: `"OU=Users,DC=domain,DC=com`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("      The name of the domain controller to use for the operation. If not specified, the default DC is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SamAccountName")
  [Void]$StringBuilder.AppendLine("      The sAMAccountName (pre-Windows 2000 logon name) for the new user. This is a required, unique value.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserPrincipalName")
  [Void]$StringBuilder.AppendLine("      The User Principal Name (UPN) for the new user (e.g., user@domain.com). This is required.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FirstName")
  [Void]$StringBuilder.AppendLine("      The given name (first name) of the new user.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MI")
  [Void]$StringBuilder.AppendLine("      The middle initial of the new user. This is optional.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastName")
  [Void]$StringBuilder.AppendLine("      The surname (last name) of the new user.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("      A description for the new user account.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      The password to set for the new user account.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Enabled")
  [Void]$StringBuilder.AppendLine("      If specified, the new user account will be enabled after creation.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoExpire")
  [Void]$StringBuilder.AppendLine("      If specified, the password for the new user will not expire.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoChange")
  [Void]$StringBuilder.AppendLine("      If specified, the user cannot change their password.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Alternate credentials to use for the operation. Accepts a PSCredential object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyADUser -Parent `"OU=Users,OU=MyUsers,DC=MyDomain,DC=Local`" -SamAccountName `"MyTestUser`" -UserPrincipalName `"MyTestUser@MyDomain.Local`" -FirstName `"FirstName`" -MI `"M`" -LastName `"LastName`" -Description `"My Description`" -Password `"MyPassword`" -Enabled")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Basic function to create a User in Active Directory. Input validation and error checking should be added for production use.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Parent,")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SamAccountName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserPrincipalName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$FirstName,")
  [Void]$StringBuilder.AppendLine("    [String]`$MI,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Enabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoExpire,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoChange,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"SearchRoot`"  = `$Parent")
  [Void]$StringBuilder.AppendLine("    `"SearchScope`" = `"Base`"")
  [Void]$StringBuilder.AppendLine("    `"SizeLimit`"   = 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"ServerName`", `$ServerName)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ParentOU = (Get-MyADObject @Params).GetDirectoryEntry()")
  [Void]$StringBuilder.AppendLine("  `$New = `$ParentOU.Children.Add(`"CN=`$(`$SamAccountName)`", `"User`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"samaccountname`"].Add(`$SamAccountName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"userprincipalname`"].Add(`$UserPrincipalName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"givenname`"].Add(`$FirstName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"sn`"].Add(`$LastName)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MI`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"initials`"].Add(`$MI)")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName) `$(`$MI)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"description`"].Add(`$Description)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  if (`$Enabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.psbase.invokeset(`"AccountDisabled`", `"False`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.SetPassword(`$Password)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("  `$UACFlag = 0")
  [Void]$StringBuilder.AppendLine("  if (`$NoExpire.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x10000")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$NoChange.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x40")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New.Properties[`"userAccountControl`"].Value = ((`$New.Properties[`"userAccountControl`"].Value -band (-bnot 0x20)) -bor `$UACFlag)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyADUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyADUser
  
  #region function Translate-DomainName
  [Void]$StringBuilder.AppendLine("#region function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("function Translate-DomainName()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Translates a domain name between Distinguished Name (DN), Fully Qualified Domain Name (FQDN), and NetBIOS formats.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function uses the NameTranslate COM object to convert a domain name between its Distinguished Name (DN), Fully Qualified Domain Name (FQDN), and NetBIOS name representations.")
  [Void]$StringBuilder.AppendLine("      You can specify either a DN or an FQDN, and the function will return all three formats as a PSCustomObject.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DN")
  [Void]$StringBuilder.AppendLine("      The Distinguished Name (DN) of the domain to translate. Use this parameter set to translate from DN to FQDN and NetBIOS.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FQDN")
  [Void]$StringBuilder.AppendLine("      The Fully Qualified Domain Name (FQDN) of the domain to translate. Use this parameter set to translate from FQDN to DN and NetBIOS.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Translate-DomainName -DN `"DC=contoso,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Returns the FQDN and NetBIOS name for the specified DN.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Translate-DomainName -FQDN `"contoso.com`"")
  [Void]$StringBuilder.AppendLine("      Returns the DN and NetBIOS name for the specified FQDN.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_1779 = 1")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL = 2")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_NT4 = 3")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DISPLAY = 4")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DOMAIN_SIMPLE = 5")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_GUID = 7")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_UNKNOWN = 8")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL_EX = 10")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByFQDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$FQDN")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = New-Object -ComObject `"NameTranslate`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.Void]([System.__ComObject].InvokeMember(`"Init`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (3, `$Null)))")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (1, `$DN)))")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByFQDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (2, `"`$FQDN/`")))")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"DN`"      = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 1))")
  [Void]$StringBuilder.AppendLine("    `"FQDN`"    = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 2)).Trim('/')")
  [Void]$StringBuilder.AppendLine("    `"NetBIOS`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 3)).Trim('\')")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Translate-DomainName
  
  #region function Validate-MyADAccount
  [Void]$StringBuilder.AppendLine("#region function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("function Validate-MyADAccount()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Validates Active Directory credentials.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function validates user credentials against Active Directory. You can provide credentials either as separate Domain, UserName, and Password parameters, or as a PSCredential object.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Domain")
  [Void]$StringBuilder.AppendLine("      The Active Directory domain name to authenticate against. Required when using the -Text parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      The user name to authenticate. Required when using the -Text parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      The password for the user account. Required when using the -Text parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      A PSCredential object containing the user name and password to validate. Required when using the -Creds parameter set.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Domain `"contoso.com`" -UserName `"jsmith`" -Password `"P@ssw0rd`"")
  [Void]$StringBuilder.AppendLine("      Validates the credentials for user jsmith in the contoso.com domain.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$cred = Get-Credential")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Credential `$cred")
  [Void]$StringBuilder.AppendLine("      Validates the credentials provided in the PSCredential object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Domain,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.DirectoryServices.AccountManagement.ContextType`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void][System.Reflection.Assembly]::LoadWithPartialName(`"System.DirectoryServices.AccountManagement`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, ((`$Credential.GetNetworkCredential()).Domain)).ValidateCredentials(((`$Credential.GetNetworkCredential()).UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, `$Domain).ValidateCredentials(`$UserName, `$Password)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Validate-MyADAccount
  
  #region function Confirm-MyGlobalGroupMemberShip
  [Void]$StringBuilder.AppendLine("#region function Confirm-MyGlobalGroupMemberShip")
  [Void]$StringBuilder.AppendLine("function Confirm-MyGlobalGroupMemberShip ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Confirms if a user is a member of a specified Active Directory group.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function checks Active Directory to determine if a given user (by SamAccountName or Distinguished Name) is a direct or nested member of a specified group. ")
  [Void]$StringBuilder.AppendLine("      It supports searching for the user by SamAccountName or by Distinguished Name, and allows customization of search roots and scopes for both user and group lookups.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      The SamAccountName (user logon name) of the user to check group membership for. Used when searching for the user object in Active Directory. Optional if UserDN is provided.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserRoot")
  [Void]$StringBuilder.AppendLine("      The LDAP path to use as the search root when searching for the user by UserID. Default is `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserScope")
  [Void]$StringBuilder.AppendLine("      The search scope to use when searching for the user. Valid values are `"SubTree`" or `"OneLevel`". Default is `"SubTree`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserDN")
  [Void]$StringBuilder.AppendLine("      The Distinguished Name (DN) of the user to check group membership for. If provided, the function skips searching for the user by UserID.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupName")
  [Void]$StringBuilder.AppendLine("      The name of the Active Directory group to check membership in. This is the `"name`" attribute of the group object.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupRoot")
  [Void]$StringBuilder.AppendLine("      The LDAP path to use as the search root when searching for the group. Default is `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupScope")
  [Void]$StringBuilder.AppendLine("      The search scope to use when searching for the group. Valid values are `"SubTree`" or `"OneLevel`". Default is `"SubTree`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGlobalGroupMemberShip -UserID `"jsmith`" -UserRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`" -GroupName `"Domain Admins`" -GroupRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Checks if the user `"jsmith`" is a member of the `"Domain Admins`" group in the specified domain.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGlobalGroupMemberShip -UserDN `"CN=John Smith,OU=Users,DC=contoso,DC=com`" -GroupName `"HR Users`" -GroupRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Checks if the user with the specified DN is a member of the `"HR Users`" group.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID = [Environment]::UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserDN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupScope = `"SubTree`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"UserID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Users DistinguishedName")
  [Void]$StringBuilder.AppendLine("      `$ChkADUser = ([adsisearcher]::New(`$UserRoot, `"(&(objectClass=user)(objectCategory=person)(samAccountName=`$(`$UserID)))`", @(`"DistinguishedName`"), `$UserScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Verify User was Found")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty(`$ChkADUser.Path))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Message = `"User Not Found`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$ChkADUser.Properties[`"distinguishedname`"][0]")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set UserDN")
  [Void]$StringBuilder.AppendLine("      `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Verify User DN is not Null")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$UserDN))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("    `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("    # Set Success Status")
  [Void]$StringBuilder.AppendLine("    `$Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Check AD is user is member of the Group")
  [Void]$StringBuilder.AppendLine("      `$ChkGroup = ([adsisearcher]::New(`$GroupRoot, `"(&(objectClass=group)(objectCategory=group)(name=`$(`$GroupName))(member:1.2.840.113556.1.4.1941:=`$(`$UserDN)))`", @(`"adspath`"), `$GroupScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = (-not [String]::IsNullOrEmpty(`$ChkGroup.Path))")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$True")
  [Void]$StringBuilder.AppendLine("      `$Message = `"Success`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$False")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"Success`"   = `$Success")
  [Void]$StringBuilder.AppendLine("    `"Message`"   = `$Message")
  [Void]$StringBuilder.AppendLine("    `"UserDN`"    = `$UserDN")
  [Void]$StringBuilder.AppendLine("    `"GroupName`" = `$GroupName")
  [Void]$StringBuilder.AppendLine("    `"IsMember`"  = `$IsMember")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Confirm-MyGlobalGroupMemberShip")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Confirm-MyGlobalGroupMemberShip
  
  #region function Confirm-MyLocalGroupMemberShip
  [Void]$StringBuilder.AppendLine("#region function Confirm-MyLocalGroupMemberShip")
  [Void]$StringBuilder.AppendLine("function Confirm-MyLocalGroupMemberShip ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Confirms if a user is a member of a specified local Active Directory group.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function checks Active Directory to determine if a given user (by SamAccountName or Distinguished Name) is a direct or nested member of a specified group. ")
  [Void]$StringBuilder.AppendLine("      It supports searching for the user by SamAccountName or by Distinguished Name, and allows customization of search roots and scopes for both user and group lookups.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      The SamAccountName (user logon name) of the user to check group membership for. Used when searching for the user object in Active Directory. Optional if UserDN is provided.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserRoot")
  [Void]$StringBuilder.AppendLine("      The LDAP path to use as the search root when searching for the user by UserID. Default is `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserScope")
  [Void]$StringBuilder.AppendLine("      The search scope to use when searching for the user. Valid values are `"SubTree`" or `"OneLevel`". Default is `"SubTree`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserDN")
  [Void]$StringBuilder.AppendLine("      The Distinguished Name (DN) of the user to check group membership for. If provided, the function skips searching for the user by UserID.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupName")
  [Void]$StringBuilder.AppendLine("      The name of the Active Directory group to check membership in. This is the `"name`" attribute of the group object.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupRoot")
  [Void]$StringBuilder.AppendLine("      The LDAP path to use as the search root when searching for the group. Default is `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupScope")
  [Void]$StringBuilder.AppendLine("      The search scope to use when searching for the group. Valid values are `"SubTree`" or `"OneLevel`". Default is `"SubTree`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyLocalGroupMemberShip -UserID `"jsmith`" -UserRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`" -GroupName `"Local Users`" -GroupRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Checks if the user `"jsmith`" is a member of the `"Local Users`" group in the specified domain.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyLocalGroupMemberShip -UserDN `"CN=John Smith,OU=Users,DC=contoso,DC=com`" -GroupName `"HR Users`" -GroupRoot `"LDAP://ad.contoso.com/DC=contoso,DC=com`"")
  [Void]$StringBuilder.AppendLine("      Checks if the user with the specified DN is a member of the `"HR Users`" group.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID = [Environment]::UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserDN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupScope = `"SubTree`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"UserID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Users DistinguishedName")
  [Void]$StringBuilder.AppendLine("      `$ChkADUser = ([adsisearcher]::New(`$UserRoot, `"(&(objectClass=user)(objectCategory=person)(samAccountName=`$(`$UserID)))`", @(`"DistinguishedName`"), `$UserScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Verify User was Found")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty(`$ChkADUser.Path))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Message = `"User Not Found`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$ChkADUser.Properties[`"distinguishedname`"][0]")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set UserDN")
  [Void]$StringBuilder.AppendLine("      `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify User DN is not Null")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$UserDN))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("    `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("    # Set Success Status")
  [Void]$StringBuilder.AppendLine("    `$Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Default Values")
  [Void]$StringBuilder.AppendLine("    `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("    `$Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$Message = `"Not Member`"")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DomainMatch = `"DC=.+,DC=.+,DC=.+`"")
  [Void]$StringBuilder.AppendLine("      `$UserDomain = ([RegEx]::Match(`$ChkUserDN, `$DomainMatch)).Value")
  [Void]$StringBuilder.AppendLine("      # Check AD is user is member of the Group")
  [Void]$StringBuilder.AppendLine("      `$ChkGroup = ([adsisearcher]::New(`$GroupRoot, `"(&(objectClass=group)(objectCategory=group)(name=`$(`$GroupName)))`", @(`"adspath`", `"member`"), `$GroupScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      `$TmpMembers = @(`$ChkGroup.Properties[`"member`"] | Where-Object { ([RegEx]::Match(`$PSItem, `$DomainMatch)).Value -eq `$UserDomain } | Sort-Object -Descending)")
  [Void]$StringBuilder.AppendLine("      if (`$TmpMembers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        foreach (`$TmpMember in `$TmpMembers)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ChkUser = ([adsisearcher]::New(`"LDAP://`$(`$TmpMember)`", `"(&(objectClass=group)(objectCategory=group)(member:1.2.840.113556.1.4.1941:=`$(`$UserDN)))`", @(`"adspath`"), `"Base`")).FindOne()")
  [Void]$StringBuilder.AppendLine("          `$IsMember = (-not [String]::IsNullOrEmpty(`$ChkUser.Path))")
  [Void]$StringBuilder.AppendLine("          if (`$IsMember)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Success = `$IsMember")
  [Void]$StringBuilder.AppendLine("            `$Message = `"Success`"")
  [Void]$StringBuilder.AppendLine("            break")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$False")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Return Status")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"Success`"   = `$Success")
  [Void]$StringBuilder.AppendLine("    `"Message`"   = `$Message")
  [Void]$StringBuilder.AppendLine("    `"UserDN`"    = `$UserDN")
  [Void]$StringBuilder.AppendLine("    `"GroupName`" = `$GroupName")
  [Void]$StringBuilder.AppendLine("    `"IsMember`"  = `$IsMember")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Confirm-MyLocalGroupMemberShip")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Confirm-MyLocalGroupMemberShip
  
  #region function Get-MyBitlockerKey
  [Void]$StringBuilder.AppendLine("#region function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("function Get-MyBitlockerKey()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Retrieves BitLocker recovery keys from Active Directory.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function searches Active Directory for BitLocker recovery information associated with computer accounts or specific recovery password IDs. It supports querying by computer name or by recovery password ID, and allows specifying the domain FQDN and search root for password ID searches.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Specifies one or more computer names for which to retrieve BitLocker recovery keys. Defaults to the local computer if not specified. Used with the `"CompName`" parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PasswordID")
  [Void]$StringBuilder.AppendLine("      Specifies one or more BitLocker recovery password IDs to search for in Active Directory. Used with the `"Password`" parameter set.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DomainFQDN")
  [Void]$StringBuilder.AppendLine("      Specifies the fully qualified domain name (FQDN) of the Active Directory domain to search. Used with the `"Password`" parameter set. Default is `"My.Domain.Local`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchRoot")
  [Void]$StringBuilder.AppendLine("      Specifies the distinguished name (DN) of the search root in Active Directory for password ID searches. Used with the `"Password`" parameter set. Default is `"DC=My,dc=Domain,dc=Local`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyBitlockerKey -ComputerName `"PC01`"")
  [Void]$StringBuilder.AppendLine("      Retrieves BitLocker recovery keys for the computer named `"PC01`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `"PC01`",`"PC02`" | Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("      Retrieves BitLocker recovery keys for the computers `"PC01`" and `"PC02`" via pipeline input.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyBitlockerKey -PasswordID `"123456-789ABC`"")
  [Void]$StringBuilder.AppendLine("      Retrieves BitLocker recovery key information for the specified recovery password ID.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      2024-07-21 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PasswordID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainFQDN = `"My.Domain.Local`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"DC=My,dc=Domain,dc=Local`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"CompName`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$CompObj = Get-MyADObject -SearchRoot `"GC://`$(`$DomainFQDN):3268`" -SearchScope `"Subtree`" -LDAPFilter `"(&(objectClass=user)(objectCategory=computer)(samaccounttype=805306369)(CN=`$(`$Computer)))`" -PropertiesToLoad `"distinguishedname`", `"adspath`"")
  [Void]$StringBuilder.AppendLine("        if ([String]::IsNullOrEmpty(`$CompObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$BLPasswords = Get-MyADObject -SearchRoot (`$CompObj.Properties[`"distinguishedname`"][0]) -SearchScope `"OneLevel`" -LDAPFilter `"(ObjectClass=msFVE-RecoveryInformation)`"")
  [Void]$StringBuilder.AppendLine("          foreach (`$BLPassword in `$BLPasswords)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$DateTimeInfo = [RegEx]::Match(`$BLPassword.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("            if (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            else")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$BLPassword.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$BLPassword.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$PassID in `$PasswordID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PassObj = Get-MyADObject -SearchRoot `$SearchRoot -Server `$DomainFQDN -SearchScope `"Subtree`" -LDAPFilter `"(&(ObjectClass=msFVE-RecoveryInformation)(Name=*`$(`$PassID)*))`"")
  [Void]$StringBuilder.AppendLine("        if ([String]::IsNullOrEmpty(`$PassObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `"Unknown`"; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$DateTimeInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("          if (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          `$CompNameInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `",CN=(?<Name>.{1,15}),OU=`")")
  [Void]$StringBuilder.AppendLine("          if (`$CompNameInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `$CompNameInfo.Groups[`"Name`"].Value")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `"Unknown`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$PassObj.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$PassObj.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)` Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyBitlockerKey
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Active Directory Functions ********
  
  #region ******* Database Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Open-MySQLConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("Function Open-MySQLConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens a connection to a SQL Server database.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Opens a connection to a SQL Server database using the provided connection string. Optionally, an Azure Active Directory access token can be supplied for authentication with Azure SQL Database.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("      The connection string used to establish the SQL Server database connection.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessToken")
  [Void]$StringBuilder.AppendLine("      An optional Azure Active Directory access token for authenticating to Azure SQL Database.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;Trusted_Connection=yes`"")
  [Void]$StringBuilder.AppendLine("      Opens a connection to a SQL Server instance using Windows Authentication.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;User Id=UserName;Password=Password;`"")
  [Void]$StringBuilder.AppendLine("      Opens a connection to a SQL Server instance using SQL Authentication.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Authentication='Active Directory Password';`"")
  [Void]$StringBuilder.AppendLine("      Opens a connection to an Azure SQL Database using Active Directory Password authentication.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Import-Module -Name Az.Accounts")
  [Void]$StringBuilder.AppendLine("      `$ConnectInfo = Connect-AzAccount")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://database.windows.net`"")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -AccessToken `$AccessToken -ConnectionString `"Data Source=DBInstanceName.database.windows.net;Initial Catalog=DBName;Connect Timeout=900`"")
  [Void]$StringBuilder.AppendLine("      If (`$DBCon.State -ne `"Open`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Unable to Connect to SQL Server`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Opens a connection to Azure SQL Database using an Azure AD access token.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      24-12-11 Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString,")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check if .Net Assembly is Loaded")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.SqlClient.SqlConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Load .Net Assembly")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create New SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.SqlClient.SqlConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    # Check is Azure Access Token was Passed")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"AccessToken`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Azure Access Token")
  [Void]$StringBuilder.AppendLine("      `$DBCon.AccessToken = `$AccessToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    # Open SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    # Return SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed to Open")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{")
  [Void]$StringBuilder.AppendLine("      `"State`" = [System.Data.ConnectionState]::Closed")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MySQLConnection
  
  #region function Invoke-MySQLCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("Function Invoke-MySQLCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes SQL Query or Stored Procedure.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Executes a SQL query or stored procedure against a SQL Server database using an open SqlConnection. Returns the first result table as a DataTable.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SQLConnection")
  [Void]$StringBuilder.AppendLine("      Specifies the open SqlConnection object to use for executing the command.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      The SQL query or stored procedure name to execute.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("      Indicates that the command is a stored procedure. If not specified, the command is treated as a SQL text query.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("      A hashtable of parameter names and values to pass to the stored procedure. Only used if -StoredProcedure is specified.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"Select * From TableName`"")
  [Void]$StringBuilder.AppendLine("      Executes a SQL query and returns the result as a DataTable.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"StoreProcedureName`" -StoredProcedure -SPValues @{ `"ID`" = 1; `"Value`" = `"Some Value`" }")
  [Void]$StringBuilder.AppendLine("      Executes a stored procedure with parameters and returns the result as a DataTable.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SQLQuery`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.SqlClient.SqlConnection]`$SQLConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create new SQL Command")
  [Void]$StringBuilder.AppendLine("  `$SQLComand = [System.Data.SqlClient.SqlCommand]::New(`$Command, `$SQLConnection)")
  [Void]$StringBuilder.AppendLine("  # Check if Calling a Stored Procedure")
  [Void]$StringBuilder.AppendLine("  If (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    # Check if Parameters were passed for the Stored Procedure")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Stored Procedure Paramaters")
  [Void]$StringBuilder.AppendLine("      ForEach (`$SPValue In `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$SQLComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return SQL Data")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter = [System.Data.SqlClient.SqlDataAdapter]::New(`$SQLComand)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$SQLDataAdapter.Fill(`$SQLDataSet)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Dispose of Objects")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$SQLComand.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MySQLCommand
  
  #region function Open-MyOracleConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("function Open-MyOracleConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens a connection to an Oracle Server database.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Establishes and opens a connection to an Oracle Server database using the provided connection string. Returns the open OracleConnection object if successful, or an object with State=Closed if the connection fails.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("      The connection string used to establish the Oracle Server database connection.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MyOracleConnection -ConnectionString `"Data Source=MyOracleDB;User Id=myUsername;Password=myPassword;`"")
  [Void]$StringBuilder.AppendLine("      Opens a connection to the specified Oracle Server database using the provided credentials.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("[CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.OracleClient.OracleConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.OracleClient.OracleConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{ `"State`" = [System.Data.ConnectionState]::Closed }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MyOracleConnection
  
  #region function Invoke-MyOracleCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyOracleCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes an Oracle SQL command or stored procedure.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Executes a SQL query or stored procedure against an Oracle database using an open OracleConnection. Returns the first result table as a DataTable if -AsDataTable is specified, otherwise executes the command without returning data.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OracleConnection")
  [Void]$StringBuilder.AppendLine("      Specifies the open OracleConnection object to use for executing the command.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      The SQL query or stored procedure name to execute.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("      Indicates that the command is a stored procedure. If not specified, the command is treated as a SQL text query.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("      A hashtable of parameter names and values to pass to the stored procedure. Only used if -StoredProcedure is specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsDataTable")
  [Void]$StringBuilder.AppendLine("      If specified, returns the result as a DataTable. Otherwise, executes the command without returning data.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$OracleData = Invoke-MyOracleCommand -OracleConnection `$DBCon -Command `"SELECT * FROM TableName`" -AsDataTable")
  [Void]$StringBuilder.AppendLine("      Executes a SQL query and returns the result as a DataTable.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$OracleData = Invoke-MyOracleCommand -OracleConnection `$DBCon -Command `"StoredProcedureName`" -StoredProcedure -SPValues @{ `"ID`" = 1; `"Value`" = `"Some Value`" } -AsDataTable")
  [Void]$StringBuilder.AppendLine("      Executes a stored procedure with parameters and returns the result as a DataTable.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.OracleClient.OracleConnection]`$OracleConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsDataTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OracleComand = [System.Data.OracleClient.OracleCommand]::New(`$Command, `$OracleConnection)")
  [Void]$StringBuilder.AppendLine("  if (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SPValue in `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$OracleComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$AsDataTable.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleDataAdapter = [System.Data.OracleClient.OracleDataAdapter]::New(`$OracleComand)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("    [Void]`$OracleDataAdapter.Fill(`$OracleDataSet)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$TempDBReader = `$OracleComand.ExecuteReader())")
  [Void]$StringBuilder.AppendLine("    `$TempDBReader.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyOracleCommand
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Database Functions ********
  
  #region ******* Encrypt / Encode Data Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Encode-MyData
  [Void]$StringBuilder.AppendLine("#region function Encode-MyData")
  [Void]$StringBuilder.AppendLine("function Encode-MyData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encodes or decodes data to and from Base64 format.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function encodes a string to Base64 with optional line length, or decodes a Base64 string back to its original form. ")
  [Void]$StringBuilder.AppendLine("      It supports output as a string or as an array of characters.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Data")
  [Void]$StringBuilder.AppendLine("      The string data to encode or decode. When encoding, this is the plain text to convert to Base64. When decoding, this is the Base64 string to convert back.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LineLength")
  [Void]$StringBuilder.AppendLine("      The maximum length of each line in the encoded Base64 output. Only used when encoding. Default is 160.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decode")
  [Void]$StringBuilder.AppendLine("      Switch to indicate that the operation should decode the input Base64 string instead of encoding.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsString")
  [Void]$StringBuilder.AppendLine("      When decoding, outputs the result as a string instead of an array of characters.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encode-MyData -Data `"MySecret`" ")
  [Void]$StringBuilder.AppendLine("      Encodes the string `"MySecret`" to Base64.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encode-MyData -Data `$Base64String -Decode")
  [Void]$StringBuilder.AppendLine("      Decodes the Base64 string back to its original value.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encode-MyData -Data `$Base64String -Decode -AsString")
  [Void]$StringBuilder.AppendLine("      Decodes the Base64 string and returns the result as a string.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Encode`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Data,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Encode`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$LineLength = 160,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Decode`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decode,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Decode`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Encode`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$StreamWriter = [System.IO.StreamWriter]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("    `$StreamWriter.Write(`$Data)")
  [Void]$StringBuilder.AppendLine("    `$StreamWriter.Close()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Encoded = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Line in @([System.Convert]::ToBase64String(`$MemoryStream.ToArray()) -split `"(?<=\G.{`$LineLength})(?=.)`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$Encoded.AppendLine(`$Line)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$Encoded.ToString()")
  [Void]$StringBuilder.AppendLine("    `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$CompressedData = [System.Convert]::FromBase64String(`$Data)")
  [Void]$StringBuilder.AppendLine("    `$MemoryStream.Write(`$CompressedData, 0, `$CompressedData.Length)")
  [Void]$StringBuilder.AppendLine("    [Void]`$MemoryStream.Seek(0, 0)")
  [Void]$StringBuilder.AppendLine("    `$StreamReader = [System.IO.StreamReader]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$AsString.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StreamReader.ReadToEnd()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("      `$Buffer = [System.Char[]]::New(4096)")
  [Void]$StringBuilder.AppendLine("      While (`$StreamReader.EndOfStream -eq `$False)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Bytes = `$StreamReader.Read(`$Buffer, 0, 4096)")
  [Void]$StringBuilder.AppendLine("        if (`$Bytes)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ArrayList.AddRange(`$Buffer[0 .. (`$Bytes - 1)])")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$ArrayList")
  [Void]$StringBuilder.AppendLine("      `$ArrayList.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$StreamReader.Close()")
  [Void]$StringBuilder.AppendLine("    `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encode-MyData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encode-MyData
  
  #region Function Protect-MySensitiveData
  [Void]$StringBuilder.AppendLine("#region Function Protect-MySensitiveData")
  [Void]$StringBuilder.AppendLine("Function Protect-MySensitiveData")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts or decrypts text string data using AES encryption.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function encrypts or decrypts a plain text string using a passphrase and optional salt, hash algorithm, cipher mode, and padding mode. ")
  [Void]$StringBuilder.AppendLine("      It supports both encryption and decryption operations based on the -Decrypt switch.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER String")
  [Void]$StringBuilder.AppendLine("      The plain text string to encrypt, or the encrypted Base64 string to decrypt.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassPhrase")
  [Void]$StringBuilder.AppendLine("      The passphrase used to derive the encryption key.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("      The salt value used in key derivation. Must be at least 8 characters. Default is `"Pepper`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashAlgorithm")
  [Void]$StringBuilder.AppendLine("      The hash algorithm used for key derivation. Default is SHA256.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CipherMode")
  [Void]$StringBuilder.AppendLine("      The cipher mode for AES encryption. Default is CBC.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PaddingMode")
  [Void]$StringBuilder.AppendLine("      The padding mode for AES encryption. Default is PKCS7.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("      Switch to indicate that the function should decrypt the input string instead of encrypting.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$EncryptedData = Protect-MySensitiveData -String `"SecretText`" -PassPhrase `"MyPass`" -Salt `"MySalt`"")
  [Void]$StringBuilder.AppendLine("      Encrypts the string `"SecretText`" using the specified passphrase and salt.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DecryptedData = Protect-MySensitiveData -String `$EncryptedData -PassPhrase `"MyPass`" -Salt `"MySalt`" -Decrypt")
  [Void]$StringBuilder.AppendLine("      Decrypts the previously encrypted string using the same passphrase and salt.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$String,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PassPhrase = `"PassPhrase`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Salt = `"Pepper`",")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.HashAlgorithmName]`$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.CipherMode]`$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.PaddingMode]`$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Cryptography AES Object")
  [Void]$StringBuilder.AppendLine("  `$Aes = [System.Security.Cryptography.Aes]::Create()")
  [Void]$StringBuilder.AppendLine("  `$Aes.Mode = `$CipherMode")
  [Void]$StringBuilder.AppendLine("  `$Aes.Padding = `$PaddingMode")
  [Void]$StringBuilder.AppendLine("  # Salt Needs to be at least 8 Characters")
  [Void]$StringBuilder.AppendLine("  `$SaltBytes = [System.Text.Encoding]::UTF8.GetBytes(`$Salt.PadRight(8, `"*`"))")
  [Void]$StringBuilder.AppendLine("  `$Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New(`$PassPhrase, `$SaltBytes, 8, `$HashAlgorithm).GetBytes(`$Aes.Key.Length)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Decrypt Encrypted Data")
  [Void]$StringBuilder.AppendLine("    `$DecodeBytes = [System.Convert]::FromBase64String(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Aes.IV = `$DecodeBytes[0..15]")
  [Void]$StringBuilder.AppendLine("    `$Decryptor = `$Aes.CreateDecryptor()")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::UTF8.GetString((`$Decryptor.TransformFinalBlock(`$DecodeBytes, 16, (`$DecodeBytes.Length - 16))))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Encrypt String Data")
  [Void]$StringBuilder.AppendLine("    `$EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Encryptor = `$Aes.CreateEncryptor()")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes = [System.Collections.ArrayList]::New(`$Aes.IV)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.AddRange(`$Encryptor.TransformFinalBlock(`$EncodeBytes, 0, `$EncodeBytes.Length))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedBytes)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.Clear()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Aes.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Protect-MySensitiveData")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Protect-MySensitiveData
  
  #region function Protect-WithCert
  [Void]$StringBuilder.AppendLine("#region function Protect-WithCert")
  [Void]$StringBuilder.AppendLine("Function Protect-WithCert ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts or decrypts text data using certificate information as key material.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function encrypts or decrypts a text string using properties from a specified certificate as the passphrase and salt for AES encryption. ")
  [Void]$StringBuilder.AppendLine("      You can optionally use a salt derived from the certificate's validity period, and choose to use universal (UTC) or local time for salt generation. ")
  [Void]$StringBuilder.AppendLine("      Decryption uses the same parameters as encryption.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CertKey")
  [Void]$StringBuilder.AppendLine("      The thumbprint or subject name of the certificate in the LocalMachine\Root store to use for encryption/decryption.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("      The text string to encrypt or decrypt.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("      An integer (0-3) specifying which salt format to use, based on the certificate's NotBefore/NotAfter properties. Only used if specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Local")
  [Void]$StringBuilder.AppendLine("      Switch to use Local time for salt generation instead of UTC time. Only relevant if -Salt is specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("      Switch to indicate that the function should decrypt the input string instead of encrypting.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with local salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Protect-WithCert -CertKey `$CertKey -Salt 0 -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with universal salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Protect-WithCert -CertKey `$CertKey -Salt 1 -Universal -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with no salt (uses certificate subject as salt)")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Protect-WithCert -CertKey `$CertKey -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Decrypt previously encrypted text")
  [Void]$StringBuilder.AppendLine("      `$DecryptedText = Protect-WithCert -CertKey `$CertKey -Salt 0 -TextString `$EncryptedText -Decrypt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NoSalt`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CertKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Salt,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Local,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Cert = Get-ChildItem -Path `"Cert:\LocalMachine\Root\`$(`$CertKey)`"")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"WithSalt`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$Universal.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = @(`$TmpNotBefore.ToString(`"yyyyMMddhhmmss`"), `$TmpNotBefore.ToString(`"hhmmssyyyyMMdd`"), `$TmpNotAfter.ToString(`"yyyyMMddhhmmss`"), `$TmpNotAfter.ToString(`"hhmmssyyyyMMdd`"))[`$Salt]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = `$Cert.Subject")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Protect-MySensitiveData -PassPhrase (`$Cert.SerialNumber) -Salt `$SaltInit -String `$TextString -Decrypt:(`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Protect-WithCert")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Protect-WithCert
  
  #region function Encrypt-MyTextString
  [Void]$StringBuilder.AppendLine("#region function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("function Encrypt-MyTextString()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts or decrypts a text string using Windows Data Protection API (DPAPI).")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function encrypts a plain text string or decrypts an encrypted Base64 string using the Windows Data Protection API (DPAPI). ")
  [Void]$StringBuilder.AppendLine("      You can specify the protection scope (CurrentUser or LocalMachine) and optionally provide an additional encryption key (entropy) for extra security.")
  [Void]$StringBuilder.AppendLine("      When encrypting, the function returns a Base64-encoded string. When decrypting, it returns the original plain text.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("      The text string to encrypt or decrypt. When encrypting, this is the plain text to secure. When decrypting, this is the Base64-encoded string to restore.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProtectionScope")
  [Void]$StringBuilder.AppendLine("      Specifies the scope of protection. ")
  [Void]$StringBuilder.AppendLine("      'CurrentUser' restricts decryption to the current user (default).")
  [Void]$StringBuilder.AppendLine("      'LocalMachine' allows any user on the machine to decrypt.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncryptKey")
  [Void]$StringBuilder.AppendLine("      An optional string used as additional entropy (extra encryption key) for added security. If not specified, no extra entropy is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("      Switch to indicate that the function should decrypt the input string instead of encrypting.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encrypt-MyTextString -TextString `"MyPassword`"")
  [Void]$StringBuilder.AppendLine("      Encrypts the string `"MyPassword`" for the current user.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encrypt-MyTextString -TextString `$EncryptedString -Decrypt")
  [Void]$StringBuilder.AppendLine("      Decrypts the previously encrypted string for the current user.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encrypt-MyTextString -TextString `"MyPassword`" -ProtectionScope LocalMachine -EncryptKey `"ExtraSecret`"")
  [Void]$StringBuilder.AppendLine("      Encrypts the string `"MyPassword`" for any user on the machine, using `"ExtraSecret`" as additional entropy.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"LocalMachine`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ProtectionScope = `"CurrentUser`",")
  [Void]$StringBuilder.AppendLine("    [String]`$EncryptKey = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Security.Cryptography.ProtectedData`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Security`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"EncryptKey`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes(`$EncryptKey)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Convert]::FromBase64String(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect(`$EncryptedData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::ASCII.GetString(`$DecryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempData = [System.Text.Encoding]::ASCII.GetBytes(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect(`$TempData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encrypt-MyTextString
  
  #region function Decode-MySecureString
  [Void]$StringBuilder.AppendLine("#region function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("function Decode-MySecureString ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Decodes a SecureString to plain text.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function converts a System.Security.SecureString object to its plain text string representation. ")
  [Void]$StringBuilder.AppendLine("      It is useful for retrieving the original value from a SecureString, such as when you need to use the password or sensitive data in plain text form.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SecureString")
  [Void]$StringBuilder.AppendLine("      The SecureString object to decode. This should be a System.Security.SecureString instance containing the sensitive data you want to convert to plain text.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$secure = Read-Host `"Enter secret`" -AsSecureString")
  [Void]$StringBuilder.AppendLine("      Decode-MySecureString -SecureString `$secure")
  [Void]$StringBuilder.AppendLine("      Decodes the entered SecureString and outputs the plain text value.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Security.SecureString]`$SecureString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$SecureString))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Decode-MySecureString
  
  #region function Convert-MyImageToBase64
  [Void]$StringBuilder.AppendLine("#region function Convert-MyImageToBase64")
  [Void]$StringBuilder.AppendLine("function Convert-MyImageToBase64()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Converts an image or icon to a Base64-encoded text block for embedding in scripts.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function converts an image file (such as .ico, .gif, .jpg, etc.) or a System.Drawing.Icon object into a Base64-encoded string, formatted for easy inclusion in PowerShell scripts. ")
  [Void]$StringBuilder.AppendLine("      The output includes region markers and variable assignment for direct use. You can specify the output variable name and the maximum line length for the Base64 string.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptName")
  [Void]$StringBuilder.AppendLine("      The name of the script or variable prefix to use in the generated code for referencing the image list. Optional.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("      A System.Drawing.Icon object to convert to Base64. Use this parameter set to encode an icon object directly.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Path")
  [Void]$StringBuilder.AppendLine("      The file path to the image to convert. Supported formats include .ico, .gif, .jpg, and others supported by System.Drawing.Image.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The variable name to assign the Base64 string to in the generated code. This should be a valid PowerShell variable name.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LineSize")
  [Void]$StringBuilder.AppendLine("      The maximum number of characters per line in the Base64 output. Default is 160.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Convert-MyImageToBase64 -Path `"C:\Icons\myicon.ico`" -Name `"MyIcon`"")
  [Void]$StringBuilder.AppendLine("      Converts the specified .ico file to a Base64 string and outputs PowerShell code assigning it to `$MyIcon.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$icon = [System.Drawing.Icon]::ExtractAssociatedIcon(`"C:\Windows\System32\notepad.exe`")")
  [Void]$StringBuilder.AppendLine("      Convert-MyImageToBase64 -Icon `$icon -Name `"NotepadIcon`"")
  [Void]$StringBuilder.AppendLine("      Converts the provided Icon object to Base64 and outputs PowerShell code assigning it to `$NotepadIcon.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet. Useful for embedding images or icons in PowerShell GUIs or scripts.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"File`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"File`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Path,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [int]`$LineSize = 160")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ImageName = `$Name.Replace(`".`", `"`").Replace(`"-`", `"`").Replace(`" `", `"`").Replace(`"ico`", `"Icon`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.AppendLine(`"#region ******** ```$`$(`$ImageName) ********`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.AppendLine(`"```$`$(`$ImageName) = @```"`")")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"File`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch ([System.IO.Path]::GetExtension(`$Path))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `".ico`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Image = [System.Drawing.Icon]::New(`$Path)")
  [Void]$StringBuilder.AppendLine("        `$Image.Save(`$MemoryStream)")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `".gif`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Image = [System.Drawing.Image]::FromFile(`$Path)")
  [Void]$StringBuilder.AppendLine("        `$Image.Save(`$MemoryStream, [System.Drawing.Imaging.ImageFormat]::Gif)")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Default")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Image = [System.Drawing.Image]::FromFile(`$Path)")
  [Void]$StringBuilder.AppendLine("        `$Image.Save(`$MemoryStream, [System.Drawing.Imaging.ImageFormat]::Jpeg)")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Image = `$Icon")
  [Void]$StringBuilder.AppendLine("    `$Image.Save(`$MemoryStream)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Line in @([System.Convert]::ToBase64String(`$MemoryStream.ToArray()) -split `"(?<=\G.{`$LineSize})(?=.)`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$StringBuilder.AppendLine(`$Line)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.AppendLine(`"```"@`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.AppendLine(`"#endregion ******** ```$`$(`$ImageName) ********`")")
  [Void]$StringBuilder.AppendLine("  if (([System.IO.Path]::GetExtension(`$path) -eq `".ico`") -or (`$PSCmdlet.ParameterSetName -eq `"Icon`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #[Void]`$StringBuilder.AppendLine(`"#```$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(```$`$(`$ImageName))))`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$StringBuilder.AppendLine(`"```$`$(`$ScriptName)ImageList.Images.Add(```"`$(`$ImageName)```", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(```$`$(`$ImageName)))))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$StringBuilder.AppendLine(`"#```$PictureBox.Image = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(```$`$(`$ImageName))))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Image = `$Null")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = `$Null")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Convert-MyImageToBase64")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Convert-MyImageToBase64
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Encrypt / Encode Data Functions ********
  
  #region ******* Logging / Events Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Write-MyLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes a log entry to a specified log file with customizable severity, formatting, and output options.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      The Write-MyLogFile function writes log messages to a file, with support for log rotation, severity levels, colored host output, and customizable log folder and file names. ")
  [Void]$StringBuilder.AppendLine("      It is designed for flexible logging in scripts and automation tasks.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogFolder")
  [Void]$StringBuilder.AppendLine("      Specifies the folder where the log file will be stored. Defaults to the script name if not specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the log file. Defaults to the script name with a .log extension.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SystemLog")
  [Void]$StringBuilder.AppendLine("      Switch to use the Windows system log folder for storing the log file.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("      Specifies the severity of the log entry. Valid values are Text, Info, Good, Warning, and Error. Default is Text.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      The message to log. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Component")
  [Void]$StringBuilder.AppendLine("      Specifies the component or source of the log entry. Defaults to the script name.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Context")
  [Void]$StringBuilder.AppendLine("      Additional context information for the log entry.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("      The thread or process ID associated with the log entry. Defaults to the current process ID.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxSize")
  [Void]$StringBuilder.AppendLine("      The maximum size (in bytes) of the log file before it is rotated. Default is 52428800 (50 MB).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OutHost")
  [Void]$StringBuilder.AppendLine("      Switch to also write the log message to the host (console) with color.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorText")
  [Void]$StringBuilder.AppendLine("      The color used for Text severity messages in the host output. Default is Gray.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorInfo")
  [Void]$StringBuilder.AppendLine("      The color used for Info severity messages in the host output. Default is DarkCyan.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorGood")
  [Void]$StringBuilder.AppendLine("      The color used for Good severity messages in the host output. Default is DarkGreen.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorWarn")
  [Void]$StringBuilder.AppendLine("      The color used for Warning severity messages in the host output. Default is DarkYellow.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorError")
  [Void]$StringBuilder.AppendLine("      The color used for Error severity messages in the host output. Default is DarkRed.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Warning`" -Message `"This is My Warning Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Error`" -Message `"This is My Error Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"LogFolder`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = `"`$([System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName)).log`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SystemLog`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SystemLog,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Text`", `"Info`", `"Good`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [String]`$Component = `"`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Context = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Thread = `$PID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 16777216)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxSize = 52428800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$OutHost,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"LogFolder`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `$LogFolder")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"SystemLog`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$ENV:SystemRoot)\Logs\`$(`$LogFolder)`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$PSScriptRoot)\Logs`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (-not [System.IO.Directory]::Exists(`$LogPath))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.IO.Directory]::CreateDirectory(`$LogPath)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempFile = `"`$(`$LogPath)\`$LogName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 2")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 3")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempDate = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (-not `$PSBoundParameters.ContainsKey(`"Component`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempSource = [System.IO.Path]::GetFileName(`$MyInvocation.ScriptName)")
  [Void]$StringBuilder.AppendLine("    `$Component = [System.IO.Path]::GetFileNameWithoutExtension(`$TempSource)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$TempFile) -and `$MaxSize -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (([System.IO.FileInfo]`$TempFile).Length -gt `$MaxSize)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempBackup = [System.IO.Path]::ChangeExtension(`$TempFile, `"lo_`")")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-Item -Force -Path `$TempBackup")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Rename-Item -Force -Path `$TempFile -NewName ([System.IO.Path]::GetFileName(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$OutHost.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object `"`$(`$TempDate.ToString(`"yy-MM-dd HH:mm:ss`")) - `$(`$Message)`" -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Add-Content -Encoding Ascii -Path `$TempFile -Value (`"<![LOG[{0}]LOG]!><time=```"{1}```" date=```"{2}```" component=```"{3}```" context=```"{4}```" type=```"{5}```" thread=```"{6}```" file=```"{7}```">`" -f `$Message, `$(`$TempDate.ToString(`"HH:mm:ss.fff+000`")), `$(`$TempDate.ToString(`"MM-dd-yyyy`")), `$Component, `$Context, `$TempSeverity, `$Thread, `$TempSource)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyLogFile
  
  #region function Write-MyPipelineLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyPipelineLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes a pipeline log entry to the host with customizable severity and color.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      The Write-MyPipelineLogFile function outputs log messages to the host (console) with color coding based on severity. ")
  [Void]$StringBuilder.AppendLine("      It is intended for use in pipeline or script output scenarios where file logging is not required.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("      Specifies the severity of the log entry. Valid values are Info, Warning, and Error. Default is Info.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      The message to display in the log output. Default is an empty string.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorText")
  [Void]$StringBuilder.AppendLine("      The color used for Text severity messages in the host output. Default is Gray.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorInfo")
  [Void]$StringBuilder.AppendLine("      The color used for Info severity messages in the host output. Default is DarkCyan.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorGood")
  [Void]$StringBuilder.AppendLine("      The color used for Good severity messages in the host output. Default is DarkGreen.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorWarn")
  [Void]$StringBuilder.AppendLine("      The color used for Warning severity messages in the host output. Default is DarkYellow.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorError")
  [Void]$StringBuilder.AppendLine("      The color used for Error severity messages in the host output. Default is DarkRed.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Severity `"Warning`" -Message `"This is My Warning Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Severity `"Error`" -Message `"This is My Error Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Info`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Info`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"`",")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Host -object `$Message -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyPipelineLogFile
  
  #region Create KPI Event Log
  [Void]$StringBuilder.AppendLine("#region Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("Try")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Refreshed on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("Catch")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Check if user has Local Admin Rights")
  [Void]$StringBuilder.AppendLine("  if (([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Event Log")
  [Void]$StringBuilder.AppendLine("    New-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`", `"Automation`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Created on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("")
  #endregion Create KPI Event Log
  
  #region function Write-KPIEvent
  [Void]$StringBuilder.AppendLine("#region function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("function Write-KPIEvent ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes an event to the Default KPI Event Log.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      The Write-KPIEvent function writes a custom event to the Default KPI Event Log, including script metadata and message details. It supports specifying the event source, type, ID, category, and message, and is intended for use in automation and utility scripts.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptName")
  [Void]$StringBuilder.AppendLine("      The name of the script generating the event. Defaults to the value in [MyConfig]::ScriptName.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptVersion")
  [Void]$StringBuilder.AppendLine("      The version of the script generating the event. Defaults to the value in [MyConfig]::ScriptVersion.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("      The name of the event log to write to. Defaults to the value in [MyConfig]::KPILogName.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Source")
  [Void]$StringBuilder.AppendLine("      The source of the event. Valid values are `"Utility`" or `"Automation`". This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryType")
  [Void]$StringBuilder.AppendLine("      The type of event entry. Valid values are `"Information`", `"Warning`", or `"Error`". Default is `"Information`". This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventID")
  [Void]$StringBuilder.AppendLine("      The event ID for the log entry. Must be between 0 and 65535. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Category")
  [Void]$StringBuilder.AppendLine("      The category number for the event log entry. Must be between 0 and 32767. Default is 0.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      The message to include in the event log entry. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 100 -Category 1 -Message `"Script completed successfully.`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptName = [MyConfig]::ScriptName,")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptVersion = [MyConfig]::ScriptVersion,")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = [MyConfig]::KPILogName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Utility`", `"Automation`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Source,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Information`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryType = `"Information`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$EventID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 32767)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Category = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName `$LogName -Source `$Source -EntryType `$EntryType -EventId `$EventID -Category `$Category -Message `"`$(`$ScriptName)|`$(`$ScriptVersion)|`$(`$Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-KPIEvent
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Logging / Events Functions ********
  
  #region ******* Generic / General Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Invoke-MyPause
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Pauses script execution for a specified number of Milliseconds or until a condition is met.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function pauses the script for the specified number of Milliseconds. Optionally, a ScriptBlock can be provided to determine if the pause should continue. ")
  [Void]$StringBuilder.AppendLine("      The function processes Windows Forms events during the pause.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Milliseconds")
  [Void]$StringBuilder.AppendLine("      The number of Milliseconds to pause the script. Default is 60.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      A ScriptBlock that returns `$True to continue pausing or `$False to stop. Default is { `$True }.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyPause -Milliseconds 30")
  [Void]$StringBuilder.AppendLine("      Pauses the script for 30 Milliseconds.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyPause -Milliseconds 10 -ScriptBlock { `$global:ContinuePause }")
  [Void]$StringBuilder.AppendLine("      Pauses the script for up to 10 Milliseconds or until `$global:ContinuePause is `$False.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Milliseconds = 60,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { `$True }")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("    `$WaitCheck = `$ScriptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$TmpPause.Elapsed.TotalMilliseconds -lt `$Milliseconds) -and `$WaitCheck)")
  [Void]$StringBuilder.AppendLine("  `$TmpPause.Stop()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyPause
  
  #region function Set-MyClipboard
  [Void]$StringBuilder.AppendLine("#region function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("function Set-MyClipboard()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Copies object data to the clipboard in HTML and CSV format.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function copies the specified object data to the clipboard, formatting it as both HTML and CSV. ")
  [Void]$StringBuilder.AppendLine("      The HTML output includes customizable styles for the table title, property headers, and row colors. ")
  [Void]$StringBuilder.AppendLine("      The function is useful for exporting tabular data from PowerShell scripts for use in other applications.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("      The array of objects to copy to the clipboard. Each object should contain the properties specified in the Properties parameter.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      The title displayed at the top of the HTML table. Default is `"My Copied Data from PowerShell`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleFore")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color for the table title. Default is `"Black`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleBack")
  [Void]$StringBuilder.AppendLine("      The background color for the table title. Default is `"LightSteelBlue`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Properties")
  [Void]$StringBuilder.AppendLine("      The list of property names to include as columns in the table. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyFore")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color for the property header row. Default is `"Black`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyBack")
  [Void]$StringBuilder.AppendLine("      The background color for the property header row. Default is `"PowderBlue`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowFore")
  [Void]$StringBuilder.AppendLine("      The foreground (text) color for all data rows. Default is `"Black`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowEvenBack")
  [Void]$StringBuilder.AppendLine("      The background color for even-numbered data rows. Default is `"White`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowOddBack")
  [Void]$StringBuilder.AppendLine("      The background color for odd-numbered data rows. Default is `"Gainsboro`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyClipboard -Items `$Items -Title `"This is My Title`" -Properties `"Property1`", `"Property2`", `"Property3`"")
  [Void]$StringBuilder.AppendLine("      Copies the specified properties of `$Items to the clipboard with a custom title.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Office`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items,")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"My Copied Data from PowerShell`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleBack = `"LightSteelBlue`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyBack = `"PowderBlue`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowEvenBack = `"White`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowOddBack = `"Gainsboro`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Init StringBuilding")
  [Void]$StringBuilder.AppendLine("    `$HTMLStringBuilder = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Start HTML ClipBaord Data")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"Version:1.0``r``nStartHTML:000START``r``nEndHTML:00000END``r``nStartFragment:00FSTART``r``nEndFragment:0000FEND``r``n`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"000START`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<html><head><title>My Copied Data</title></head><body><!--StartFragment-->`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00FSTART`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Table Style")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<style>``r``n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$TitleFore); background: `$(`$TitleBack);}``r``n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$PropertyFore); background: `$(`$PropertyBack);}``r``n.Row0 {border: 1px solid black; border-collapse: collapse;color: `$(`$RowFore); background: `$(`$RowEvenBack);}``r``n.Row1 {border: 1px solid black; border-collapse: collapse; color: `$(`$RowFore); background: `$(`$RowOddBack);}``r``n</style>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Start Build Table / Set Title")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<table><tr><th class=Title aligh=center colspan=`$(`$Properties.Count)>&nbsp;`$(`$Title)&nbsp;</th></tr>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Table Column / Property Names")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<tr>`$((`$Properties | ForEach-Object -Process { `"<td class=Property aligh=center>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join '')</tr>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Start Row Count")
  [Void]$StringBuilder.AppendLine("    `$TmpRowCount = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpItemList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Item in `$Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$HTMLStringBuilder.Append(`"<tr>`$((((`$Properties | ForEach-Object -Process { `$Item.(`$PSItem) }) | ForEach-Object -Process { `"<td class=Row`$(`$TmpRowCount)>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join ''))</tr>`")")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpItemList.Add((`$Item | Select-Object -Property `$Properties))")
  [Void]$StringBuilder.AppendLine("      `$TmpRowCount = (`$TmpRowCount + 1) % 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  end")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Close HTML Table")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"</table><br><br>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set End Clipboard Values")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"0000FEND`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<!--EndFragment--></body></html>`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00000END`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::Clear()")
  [Void]$StringBuilder.AppendLine("    `$DataObject = [System.Windows.Forms.DataObject]::New(`"Text`", (`$TmpItemList | Select-Object -Property `$Properties | ConvertTo-Csv -NoTypeInformation | Out-String))")
  [Void]$StringBuilder.AppendLine("    `$DataObject.SetData(`"HTML Format`", `$HTMLStringBuilder.ToString())")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::SetDataObject(`$DataObject)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyClipboard
  
  #region function Send-MyEMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("function Send-MyEMail()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends an E-mail message using SMTP.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends an E-mail message using the specified SMTP server and port. You can specify recipients, sender, subject, body, message file, HTML formatting, CC, BCC, attachments, and priority.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPServer")
  [Void]$StringBuilder.AppendLine("      The SMTP server to use for sending the E-mail. Default is [MyConfig]::SMTPServer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPPort")
  [Void]$StringBuilder.AppendLine("      The port number to use for the SMTP server. Default is [MyConfig]::SMTPPort.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("      One or more recipient E-mail addresses. Mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER From")
  [Void]$StringBuilder.AppendLine("      The sender's E-mail address. Mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("      The subject of the E-mail message. Mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      The body text of the E-mail message. If a file path is provided, the contents of the file will be used as the body.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IsHTML")
  [Void]$StringBuilder.AppendLine("      Indicates whether the body of the E-mail is formatted as HTML.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("      One or more E-mail addresses to send a carbon copy (CC) of the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("      One or more E-mail addresses to send a blind carbon copy (BCC) of the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      One or more attachments to include with the E-mail message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Priority")
  [Void]$StringBuilder.AppendLine("      The priority of the E-mail message. Valid values are `"Low`", `"Normal`", or `"High`". Default is `"Normal`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyEMail -To `"user@example.com`" -From `"me@example.com`" -Subject `"Test`" -Body `"Hello World`" -SMTPServer `"smtp.example.com`" -SMTPPort 25")
  [Void]$StringBuilder.AppendLine("      Sends a simple E-mail message.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SMTPServer = [MyConfig]::SMTPServer,")
  [Void]$StringBuilder.AppendLine("    [Int]`$SMTPPort = [MyConfig]::SMTPPort,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, HelpMessage = `"Enter To`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter From`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Subject`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Message Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$IsHTML,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.Attachment[]]`$Attachment,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailPriority]`$Priority = `"Normal`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage = [System.Net.Mail.MailMessage]::New()")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.From = `$From")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Subject = `$Subject")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.IsBodyHtml = `$IsHTML")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Priority = `$Priority")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendCC in `$CC)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.CC.Add(`$SendCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendBCC in `$BCC)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.BCC.Add(`$SendBCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([System.IO.File]::Exists(`$Body))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$([System.IO.File]::ReadAllText(`$Body))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$Body")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Attachment`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$AttachedFile in `$Attachment)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.Attachments.Add(`$AttachedFile)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.To.Clear()")
  [Void]$StringBuilder.AppendLine("    foreach (`$SendTo in `$To)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.To.Add(`$SendTo)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient = [System.Net.Mail.SmtpClient]::New(`$SMTPServer, `$SMTPPort)")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient.Send(`$MyMessage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  end")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyEMail
  
  #region function Show-MyWebReport
  [Void]$StringBuilder.AppendLine("#region function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens a web report in the default browser (Edge or Chrome) as an app window.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function launches the specified report URL in Microsoft Edge or Google Chrome as an app window. ")
  [Void]$StringBuilder.AppendLine("      It checks for the configured browser path in [MyConfig] and uses Edge if available, otherwise Chrome. ")
  [Void]$StringBuilder.AppendLine("      If neither is configured, the function does nothing.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReportURL")
  [Void]$StringBuilder.AppendLine("      The URL of the web report to open. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Show-MyWebReport -ReportURL `"https://myreportserver/report1`"")
  [Void]$StringBuilder.AppendLine("      Opens the specified report in the configured browser as an app window.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ReportURL")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyWebReport
  
  #region class MyConCommand
  [Void]$StringBuilder.AppendLine("#region class MyConCommand")
  [Void]$StringBuilder.AppendLine("class MyConCommand")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Int]`$ExitCode")
  [Void]$StringBuilder.AppendLine("  [String]`$OutputTxt")
  [Void]$StringBuilder.AppendLine("  [String]`$ErrorMsg")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyConCommand ([Int]`$ExitCode, [String]`$OutputTxt, [String]`$ErrorMsg)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ExitCode = `$ExitCode")
  [Void]$StringBuilder.AppendLine("    `$This.OutputTxt = `$OutputTxt")
  [Void]$StringBuilder.AppendLine("    `$This.ErrorMsg = `$ErrorMsg")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion class MyConCommand
  
  #region function Invoke-MyConCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyConCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes a console command and returns the exit code, output, and error message.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function executes a specified console command with optional parameters, captures the exit code, standard output, and standard error, and returns them in a custom object. ")
  [Void]$StringBuilder.AppendLine("      Useful for running external processes and retrieving their results in PowerShell.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      The full path to the executable or command to run. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Optional command line parameters to pass to the executable. Default is `$Null.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyConCommand -Command `"C:\Windows\System32\cmd.exe`" -Parameters `"/c Exit 1`"")
  [Void]$StringBuilder.AppendLine("      Runs cmd.exe with the specified parameters and returns the exit code and output.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [String]`$Parameters = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$Command))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PSI = [System.Diagnostics.ProcessStartInfo]::New(`$Command, `$Parameters)")
  [Void]$StringBuilder.AppendLine("    `$PSI.UseShellExecute = `$False")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardError = `$True")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardOutput = `$True")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Out = [System.Diagnostics.Process]::Start(`$PSI)")
  [Void]$StringBuilder.AppendLine("      `$Out.WaitForExit()")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(`$Out.ExitCode, `$Out.StandardOutput.ReadToEnd(), `$Out.StandardError.ReadToEnd())")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(-2, `$Null, `$Error[0].Message)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConCommand]::New(-1, `$Null, `"Command was not Found`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyConCommand
  
  #region function Test-MyClassLoaded
  [Void]$StringBuilder.AppendLine("#region function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("function Test-MyClassLoaded()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Custom Class")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$IsLoaded = Test-MyClassLoaded -Name `"CustomClass`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`$Name)).Type))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Test-MyClassLoaded
  
  #region function New-MyComObject"
  [Void]$StringBuilder.AppendLine("#region function New-MyComObject")
  [Void]$StringBuilder.AppendLine("function New-MyComObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates Local and Remote COMObjects.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a COM object either locally or on a remote computer using the specified ProgID. ")
  [Void]$StringBuilder.AppendLine("      It is useful for automating tasks that require COM automation, such as interacting with Office applications or other COM-enabled software.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The name of the computer on which to create the COM object. Defaults to the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER COMObject")
  [Void]$StringBuilder.AppendLine("      The ProgID of the COM object to create. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -COMObject `"Excel.Application`"")
  [Void]$StringBuilder.AppendLine("      Creates an Excel COM object on the local computer.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -ComputerName `"RemotePC`" -COMObject `"Excel.Application`"")
  [Void]$StringBuilder.AppendLine("      Creates an Excel COM object on the remote computer `"RemotePC`".")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$COMObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Activator]::CreateInstance([Type]::GetTypeFromProgID(`$COMObject, `$ComputerName))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyComObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyComObject"
  
  #region function ConvertTo-MyIconImage
  [Void]$StringBuilder.AppendLine("#region function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("function ConvertTo-MyIconImage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Converts a Base64-encoded string to an Icon or Image object.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function takes a Base64-encoded string representing an image or icon and converts it back to a .NET Icon or Image object. ")
  [Void]$StringBuilder.AppendLine("      Use the -Image switch to specify that the output should be an Image object; otherwise, an Icon object is returned.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncodedImage")
  [Void]$StringBuilder.AppendLine("      The Base64-encoded string representing the image or icon to convert. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("      If specified, the function returns a System.Drawing.Image object. If not specified, a System.Drawing.Icon object is returned.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage")
  [Void]$StringBuilder.AppendLine("      Converts the Base64 string to an Icon object.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage -Image")
  [Void]$StringBuilder.AppendLine("      Converts the Base64 string to an Image object.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EncodedImage,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Image")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Image.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function ConvertTo-MyIconImage
  
  #region function Send-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Send-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends a text message to a remote or local computer or IP address using UDP.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends a text message to a specified computer name or IP address using UDP protocol. ")
  [Void]$StringBuilder.AppendLine("      You can specify the target by computer name or IP address, set the message content, and choose the port. ")
  [Void]$StringBuilder.AppendLine("      The function is useful for simple network notifications or inter-process communication.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The name of the computer to send the message to. Defaults to the local computer. Used only if IPAddress is not specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      The IP address to send the message to. Defaults to `"127.0.0.1`". Use `"255.255.255.255`" for broadcast.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      The text message to send. Defaults to `"This is My Message`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      The UDP port to use for sending the message. Defaults to 2500.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyTextMessage -Message `"Hello World`" -IPAddress `"192.168.1.100`" -Port 2500")
  [Void]$StringBuilder.AppendLine("      Sends `"Hello World`" to IP address 192.168.1.100 on port 2500.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyTextMessage -ComputerName `"RemotePC`" -Message `"Test Notification`"")
  [Void]$StringBuilder.AppendLine("      Sends `"Test Notification`" to the computer named RemotePC.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"This is My Message`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$MessageBytes = [Text.Encoding]::ASCII.GetBytes(`"`$(`$Message)`")")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Send(`$MessageBytes, `$MessageBytes.Length, `$RemoteClient)")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Close()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyTextMessage
  
  #region function Listen-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Listen-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Listens for text messages sent via UDP from remote or local computers.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function listens for incoming UDP text messages on a specified port and IP address or computer name. ")
  [Void]$StringBuilder.AppendLine("      It displays received messages and the sender's address. The listener runs until a message with the content `"Exit`" is received.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The name of the computer to listen for messages from. Defaults to the local computer. Used only if IPAddress is not specified.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      The IP address to listen on. Defaults to `"127.0.0.1`". Use `"0.0.0.0`" to listen on all interfaces.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      The UDP port to listen on. Defaults to 2500.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("      Listens for UDP messages on 127.0.0.1:2500.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Listen-MyTextMessage -IPAddress `"0.0.0.0`" -Port 3000")
  [Void]$StringBuilder.AppendLine("      Listens for UDP messages on all interfaces at port 3000.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Listen-MyTextMessage -ComputerName `"RemotePC`"")
  [Void]$StringBuilder.AppendLine("      Listens for UDP messages from the computer named RemotePC.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New(`$Port)")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempRemoteClient = `$RemoteClient")
  [Void]$StringBuilder.AppendLine("    `$Message = `$UDPClient.Receive([ref]`$TempRemoteClient)")
  [Void]$StringBuilder.AppendLine("    `$DecodedMessage = [Text.Encoding]::ASCII.GetString(`$Message)")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Message From: `$(`$TempRemoteClient.Address) - `$(`$DecodedMessage)`"")
  [Void]$StringBuilder.AppendLine("  } while (`$True -and (`$DecodedMessage -ne `"Exit`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Listen-MyTextMessage
  
  #region class MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [String]`$FQDN = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Found = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$DomainMember = `$False")
  [Void]$StringBuilder.AppendLine("  [int]`$ProductType = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Model = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsMobile = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [Long]`$Memory = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$OperatingSystem = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$BuildNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Version = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$ServicePack = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Architecture = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Is64Bit = `$False")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LocalDateTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$InstallDate = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LastBootUpTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [String]`$IPAddress = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Status = `"Off-Line`"")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyWorkstationInfo ([String]`$ComputerName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.FQDN = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddComputerSystem ([String]`$TestName, [String]`$IPAddress, [String]`$ComputerName, [Bool]`$DomainMember, [String]`$Domain, [String]`$Manufacturer, [String]`$Model, [String]`$UserName, [Long]`$Memory)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `"`$(`$ComputerName)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.DomainMember = `$DomainMember")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `"`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    if (`$DomainMember)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.FQDN = `"`$(`$ComputerName).`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    `$This.Memory = `$Memory")
  [Void]$StringBuilder.AppendLine("    `$This.Found = (`$ComputerName -eq @(`$TestName.Split(`".`"))[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddOperatingSystem ([int]`$ProductType, [String]`$OperatingSystem, [String]`$ServicePack, [String]`$BuildNumber, [String]`$Version, [String]`$Architecture, [DateTime]`$LocalDateTime, [DateTime]`$InstallDate, [DateTime]`$LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ProductType = `$ProductType")
  [Void]$StringBuilder.AppendLine("    `$This.OperatingSystem = `$OperatingSystem")
  [Void]$StringBuilder.AppendLine("    `$This.ServicePack = `$ServicePack")
  [Void]$StringBuilder.AppendLine("    `$This.BuildNumber = `$BuildNumber")
  [Void]$StringBuilder.AppendLine("    `$This.Version = `$Version")
  [Void]$StringBuilder.AppendLine("    `$This.Architecture = `$Architecture")
  [Void]$StringBuilder.AppendLine("    `$This.Is64Bit = (`$Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("    `$This.LocalDateTime = `$LocalDateTime")
  [Void]$StringBuilder.AppendLine("    `$This.InstallDate = `$InstallDate")
  [Void]$StringBuilder.AppendLine("    `$This.LastBootUpTime = `$LastBootUpTime")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddSerialNumber ([String]`$SerialNumber)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddIsMobile ([Long[]]`$ChassisTypes)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains `$ChassisTypes[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] UpdateStatus ([String]`$Status)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `$Status")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [MyWorkstationInfo] SetEndTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    return `$This")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [TimeSpan] GetRunTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    return (`$This.EndTime - `$This.StartTime)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion class MyWorkstationInfo
  
  #region function Get-MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("function Get-MyWorkstationInfo()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyWorkstationInfo -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("        `"Credential`"   = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject = [MyWorkstationInfo]::New(`$Computer)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Validate ComputerName")
  [Void]$StringBuilder.AppendLine("      if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("          :FoundMyWork foreach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if ([System.Net.NetworkInformation.Ping]::New().Send(`$IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Set Default Parms")
  [Void]$StringBuilder.AppendLine("              `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("              # Get ComputerSystem")
  [Void]$StringBuilder.AppendLine("              [Void](`$MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject.AddComputerSystem(`$Computer, `$IPAddress, (`$MyCompData.Name), (`$MyCompData.PartOfDomain), (`$MyCompData.Domain), (`$MyCompData.Manufacturer), (`$MyCompData.Model), (`$MyCompData.UserName), (`$MyCompData.TotalPhysicalMemory))")
  [Void]$StringBuilder.AppendLine("              `$MyCompData.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("              # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("              if (`$VerifyObject.Found)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.AddOperatingSystem((`$MyOSData.ProductType), (`$MyOSData.Caption), (`$MyOSData.CSDVersion), (`$MyOSData.BuildNumber), (`$MyOSData.Version), (`$MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)))")
  [Void]$StringBuilder.AppendLine("                `$MyOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddSerialNumber(`$MyBIOSData.SerialNumber)")
  [Void]$StringBuilder.AppendLine("                  `$MyBIOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddIsMobile(`$MyChassisData.ChassisTypes)")
  [Void]$StringBuilder.AppendLine("                  `$MyChassisData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              else")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.UpdateStatus(`"Wrong Workstation Name`")")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("              break FoundMyWork")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.UpdateStatus(`"Workstation Not in DNS`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.UpdateStatus(`"Invalid Computer Name`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set End Time and Return Results")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject.SetEndTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  end")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyWorkstationInfo
  
  #region function Get-MyNetAdapterConStatus
  [Void]$StringBuilder.AppendLine("#region function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("function Get-MyNetAdapterConStatus ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Gets the connection status of wired and wireless network adapters on a specified computer.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function checks the network adapters on the specified computer and determines if there are any active wired or wireless connections. ")
  [Void]$StringBuilder.AppendLine("      It uses WMI queries to identify the physical medium type and connection status of each adapter.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The name of the computer to query. Defaults to the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      The credentials to use when connecting to the remote computer. Defaults to an empty credential.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyNetAdapterConStatus -ComputerName `"PC01`"")
  [Void]$StringBuilder.AppendLine("      Returns the wired and wireless connection status for computer `"PC01`".")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyNetAdapterConStatus -ComputerName `"PC01`" -Credential (Get-Credential)")
  [Void]$StringBuilder.AppendLine("      Returns the connection status using the specified credentials.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PhysicalMediumTypeList = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\WMI`" -Query `"Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1`" | Select-Object -Property InstanceName, NdisPhysicalMediumType)")
  [Void]$StringBuilder.AppendLine("  `$NetworkAdapters = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\CimV2`" -Query `"Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2`" | Select-Object -ExpandProperty Name)")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Wired`"    = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 0) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    `"Wireless`" = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 9) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyNetAdapterConStatus
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Generic / General Functions ********
  
  #region ******* Registry / Environement Variable Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Reset-MyRegKeyOwner
  [Void]$StringBuilder.AppendLine("#region function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("function Reset-MyRegKeyOwner ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Take Ownership of a Registry Key and Reset Access Rules.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function takes ownership of a specified registry key and optionally resets its access rules. It can operate recursively and supports changing ownership to either the Administrators or Users group.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Hive")
  [Void]$StringBuilder.AppendLine("      Specifies the registry hive to operate on. Defaults to LocalMachine.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Key")
  [Void]$StringBuilder.AppendLine("      The path of the registry key to take ownership of. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      If specified, sets the owner to the Users group (S-1-5-32-545). Otherwise, sets to Administrators group (S-1-5-32-544).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResetAccess")
  [Void]$StringBuilder.AppendLine("      If specified, resets the access rules for the registry key to grant full control to the new owner.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Recurse")
  [Void]$StringBuilder.AppendLine("      If specified, applies ownership and access rule changes recursively to all subkeys.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Key `"SOFTWARE\MyApp`"")
  [Void]$StringBuilder.AppendLine("      Takes ownership of the `"SOFTWARE\MyApp`" registry key as Administrators.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Key `"SOFTWARE\MyApp`" -User")
  [Void]$StringBuilder.AppendLine("      Takes ownership of the `"SOFTWARE\MyApp`" registry key as Users.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Key `"SOFTWARE\MyApp`" -ResetAccess")
  [Void]$StringBuilder.AppendLine("      Takes ownership and resets access rules for the `"SOFTWARE\MyApp`" registry key.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Key `"SOFTWARE\MyApp`" -Recurse")
  [Void]$StringBuilder.AppendLine("      Takes ownership recursively for `"SOFTWARE\MyApp`" and all its subkeys.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Win32.RegistryKey]`$Hive = [Microsoft.Win32.Registry]::LocalMachine,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Key,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ResetAccess,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Recurse")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$User.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-545`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-544`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Key: `$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("  `$TempKey = `$Hive.OpenSubKey(`$Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)")
  [Void]$StringBuilder.AppendLine("  `$ACL = [System.Security.AccessControl.RegistrySecurity]::New()")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetOwner(`$NewOwner)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetAccessRuleProtection(`$False, `$False)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ResetAccess.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)")
  [Void]$StringBuilder.AppendLine("    `$Rule = [System.Security.AccessControl.RegistryAccessRule]::New(`$NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)")
  [Void]$StringBuilder.AppendLine("    `$ACL.ResetAccessRule(`$Rule)")
  [Void]$StringBuilder.AppendLine("    `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Recurse.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"Key`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"ResetAccess`")")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`")")
  [Void]$StringBuilder.AppendLine("    foreach (`$SubKey in @(`$TempKey.GetSubKeyNames()))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner @PSBoundParameters -Key `"`$(`$Key)\`$(`$SubKey)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Reset-MyRegKeyOwner
  
  #region function Set-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Set-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to write the values under. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The Data to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MultiValue")
  [Void]$StringBuilder.AppendLine("      Write Multiple values to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Write to the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Write to the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value `"Value`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value @(`"This`", `"That`") -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ")
  [Void]$StringBuilder.AppendLine("      Use @() or (,) when specifing the Value paramter value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value (,8) -Bitness `"64`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Number arrays are written to the registry as strings.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value 0 -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -MultiValue @{`"Name`" = `"MyName`"; `"Number`" = 4; `"Array`" = @(`"First`", 2, `"3rd`", 4)} -Computer -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Value,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$MultiValue,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the Registry Keys if Needed.")
  [Void]$StringBuilder.AppendLine("  foreach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `$RegPath -Name `"MyISScriptData`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw `"Error Creating Registry Key : MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `"`$RegPath\MyISScriptData`" -Name `$Script)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw `"Error Creating Registry Key : `$Script`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write the values to the registry.")
  [Void]$StringBuilder.AppendLine("  switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Multi`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$Key in `$MultiValue.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$MultiValue[`$Key] -is [Array])")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = [String[]]`$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        foreach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Key -Value `$Data)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Value -is [Array])")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = [String[]]`$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      foreach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Name -Value `$Data)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyISScriptData
  
  #region function Get-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Get-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Get-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to read the values from. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to read")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Read from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Read from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Bitness `"32`" -Script `"ScriptName`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"64`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Path")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -eq `"64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RegPath = `"Registry::HKEY_CURRENT_USER\Software`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get the values from the registry.")
  [Void]$StringBuilder.AppendLine("  Get-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`" | Select-Object -Property `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyISScriptData
  
  #region function Remove-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Remove-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to remove. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Remove from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Remove from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer -Script `"ScriptName`" -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Remove the values from the registry.")
  [Void]$StringBuilder.AppendLine("  foreach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void](Remove-Item -Path `"`$RegPath\MyISScriptData\`$Script`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyISScriptData
  
  #region function Get-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Get-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Retrieves environment variables from the local or remote workstation.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function queries environment variables for a specified user on one or more computers using CIM/WMI.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Specifies one or more computer names to query. Defaults to the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the environment variable to retrieve. Supports wildcards. Defaults to '%' (all variables).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      Specifies the user context for the environment variable. Defaults to '<SYSTEM>' for system-wide variables.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Specifies a PSCredential object for authentication when connecting to remote computers.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-EnvironmentVariable -Variable `"Path`"")
  [Void]$StringBuilder.AppendLine("      Retrieves the `"Path`" environment variable for the system on the local computer.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-EnvironmentVariable -ComputerName `"Server01`",`"Server02`" -Variable `"TEMP`" -UserName `"DOMAIN\User`"")
  [Void]$StringBuilder.AppendLine("      Retrieves the `"TEMP`" environment variable for the specified user on multiple remote computers.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable = `"%`",")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name like '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query `$Query")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-EnvironmentVariable
  
  #region function Set-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Set-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sets or creates an environment variable on the local or remote workstation.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sets the value of an environment variable for a specified user on one or more computers using CIM/WMI. If the variable does not exist, it will be created.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Specifies one or more computer names to target. Defaults to the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the environment variable to set. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value to assign to the environment variable.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      Specifies the user context for the environment variable. Defaults to '<SYSTEM>' for system-wide variables.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Specifies a PSCredential object for authentication when connecting to remote computers.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-EnvironmentVariable -Variable `"Path`" -Value `"C:\MyPath`"")
  [Void]$StringBuilder.AppendLine("      Sets the `"Path`" environment variable for the system on the local computer.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-EnvironmentVariable -ComputerName `"Server01`",`"Server02`" -Variable `"TEMP`" -Value `"C:\Temp`" -UserName `"DOMAIN\User`"")
  [Void]$StringBuilder.AppendLine("      Sets the `"TEMP`" environment variable for the specified user on multiple remote computers.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        New-CimInstance -CimSession `$CimSession -ClassName Win32_Environment -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value; `"UserName`" = `$UserName }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Set-CimInstance -InputObject `$Instance -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value } -PassThru")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-EnvironmentVariable
  
  #region function Remove-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Remove-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes an environment variable from the local or remote workstation.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function deletes a specified environment variable for a given user on one or more computers using CIM/WMI. ")
  [Void]$StringBuilder.AppendLine("      It supports system-wide and user-specific variables and can authenticate to remote computers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Specifies one or more computer names to target. Defaults to the local computer.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the environment variable to remove. This parameter is mandatory.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      Specifies the user context for the environment variable. Defaults to '<SYSTEM>' for system-wide variables.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Specifies a PSCredential object for authentication when connecting to remote computers.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-EnvironmentVariable -Variable `"TEMP`"")
  [Void]$StringBuilder.AppendLine("      Removes the `"TEMP`" environment variable for the system on the local computer.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-EnvironmentVariable -ComputerName `"Server01`",`"Server02`" -Variable `"Path`" -UserName `"DOMAIN\User`"")
  [Void]$StringBuilder.AppendLine("      Removes the `"Path`" environment variable for the specified user on multiple remote computers.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-CimInstance -InputObject `$Instance")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-EnvironmentVariable
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Registry / Environement Variable Functions ********
  
  #region ******* Import / Install Module Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Install-MyPackageProvider
  [Void]$StringBuilder.AppendLine("#region function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("function Install-MyPackageProvider ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Installs the specified PackageProvider if required.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Checks for the specified PackageProvider and installs it if the required version is not present.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the PackageProvider to install.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      The minimum version of the PackageProvider to install. Defaults to `"0.0.0.0`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("      Specifies whether to install for AllUsers or CurrentUser. Defaults to `"AllUsers`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Install")
  [Void]$StringBuilder.AppendLine("      If specified, performs the installation of the PackageProvider.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyPackageProvider -Name `"NuGet`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install")
  [Void]$StringBuilder.AppendLine("      Installs the NuGet PackageProvider with at least version 2.0.0.0 for all users.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$CommonParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Install-PackageProvider @CommonParams -Scope `$Scope -MinimumVersion `"`$(`$Version)`" -Force | Out-Null")
  [Void]$StringBuilder.AppendLine("      if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$True; `"Restart`" = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = `$True; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyPackageProvider
  
  #region function Install-MyModule
  [Void]$StringBuilder.AppendLine("#region function Install-MyModule")
  [Void]$StringBuilder.AppendLine("Function Install-MyModule ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Checks for, installs if required, and imports the specified PowerShell module.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function checks if the specified module is imported or installed. If not, it installs the module from the given repository and imports it. Supports custom repositories and installation scopes.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The name of the module to check, install, and import.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      The minimum required version of the module. Defaults to `"0.0.0.0`" (any version).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("      Specifies whether to install/import the module for AllUsers or CurrentUser. Defaults to `"AllUsers`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Repository")
  [Void]$StringBuilder.AppendLine("      The name of the repository to use for installation. Defaults to `"sie-powershell`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Install")
  [Void]$StringBuilder.AppendLine("      If specified, performs the installation of the module if not present.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoImport")
  [Void]$StringBuilder.AppendLine("      If specified, Do not Import the specified module")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SourceLocation")
  [Void]$StringBuilder.AppendLine("      The URL of the repository source location. Used when registering a custom repository.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PublishLocation")
  [Void]$StringBuilder.AppendLine("      The URL of the repository publish location. Used when registering a custom repository.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyModule -Name `"MSAL.PS`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install")
  [Void]$StringBuilder.AppendLine("      Checks for MSAL.PS module, installs version 2.0.0.0 or higher for all users if required, and imports it.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Custom`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Repository = `"PSGallery`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoImport,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Custom`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SourceLocation,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Custom`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PublishLocation")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Zero Verion for Checks")
  [Void]$StringBuilder.AppendLine("  `$ZeroVersion = [Version]::new(0, 0, 0, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Module Common Parameters")
  [Void]$StringBuilder.AppendLine("  `$GMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Install Module Parameters")
  [Void]$StringBuilder.AppendLine("  `$IMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Version`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IMParams.Add(`"RequiredVersion`", `$Version)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check if Module is Already Imported")
  [Void]$StringBuilder.AppendLine("  `$ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Installed Module Versions")
  [Void]$StringBuilder.AppendLine("    `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Check if Repo Exists")
  [Void]$StringBuilder.AppendLine("        `$ChkRepo = Get-PSRepository -Name `$Repository -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkRepo.Name))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Add Custom Repo")
  [Void]$StringBuilder.AppendLine("          Register-PSRepository -Name `$Repository -SourceLocation `$SourceLocation -PublishLocation `$PublishLocation -InstallationPolicy `"Trusted`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Install / Update Module")
  [Void]$StringBuilder.AppendLine("        Install-Module @IMParams -Repository `$Repository -Scope `$Scope -Force -AllowClobber | Out-Null")
  [Void]$StringBuilder.AppendLine("        If (`$Repository -ne `"PSGallery`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Remove Custom Repo")
  [Void]$StringBuilder.AppendLine("          Unregister-PSRepository -Name `$Repository")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Module Installed Failed")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install Failed`" }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          If (`$NoImport.IsPresent)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Install Succeeded`" }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Import Module")
  [Void]$StringBuilder.AppendLine("            Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("            # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("            `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("            If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Module Install / Import Succeeded")
  [Void]$StringBuilder.AppendLine("              [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Install / Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            Else")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("              [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Failed`" }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Not Installed`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If (`$NoImport.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Install Succeeded`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Import Module")
  [Void]$StringBuilder.AppendLine("        Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("        # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("        `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("        If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Module Import Succeeded")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Module Import Failed")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Import Failed`" }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Module Previously Imported")
  [Void]$StringBuilder.AppendLine("    If ((`$ChkInstalled.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Correct Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Correct Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Wrong Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Wrong Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyModule")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyModule
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Import / Install Module Functions ********
  
  #region ******* Microsoft GraphAPI Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Refresh-UserToken
  [Void]$StringBuilder.AppendLine("#region function Get-UserToken")
  [Void]$StringBuilder.AppendLine("function Get-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -Interactive -ClientId `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`") -ExtraQueryParameters @{claims = '{`"access_token`" : {`"amr`": { `"values`": [`"mfa`"] }}}' }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UserToken")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("function Refresh-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -ForceRefresh -ClientId `"14d82eec-204b-4c2f-b7e8-296a70dab67e`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Refresh-UserToken
  
  #region function Get-MyOAuthApplicationToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Application OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Retrieves an OAuth 2.0 token for an application using client credentials flow.")
  [Void]$StringBuilder.AppendLine("      This token can be used to authenticate requests to Microsoft Graph or other Azure AD protected resources.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("      The Azure Active Directory tenant ID where the application is registered.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      The Application (client) ID of the Azure AD app registration.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("      The client secret associated with the Azure AD app registration.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("      The resource URI or scope for which the token is requested. Defaults to 'https://graph.microsoft.com/.default'.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyOAuthApplicationToken -TenantID `$TenantID -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"New`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    `"Scope`"         = `$Scope")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = Invoke-RestMethod -Uri `$Uri -Body `$Body -Method Post -ContentType `"application/x-www-form-urlencoded`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Successful Authentication")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthApplicationToken
  
  #region function Get-MyOAuthCertToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Certificate OAuth Token for Microsoft Graph API.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Retrieves an OAuth 2.0 token for an application using certificate-based authentication (client assertion).")
  [Void]$StringBuilder.AppendLine("      This token can be used to authenticate requests to Microsoft Graph or other Azure AD protected resources.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("      The Azure Active Directory tenant ID where the application is registered.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      The Application (client) ID of the Azure AD app registration.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Certificate")
  [Void]$StringBuilder.AppendLine("      The thumbprint of the certificate in the CurrentUser\My store used for authentication.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("      The resource URI or scope for which the token is requested. Defaults to 'https://graph.microsoft.com/'.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthCertToken -TenantID `"contoso.onmicrosoft.com`" -ClientID `"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`" -Certificate `"ABCDEF1234567890ABCDEF1234567890ABCDEF12`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Certificate,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Cert = Get-Item -Path `"Cert:\CurrentUser\My\`$(`$Certificate)`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create base64 hash of certificate")
  [Void]$StringBuilder.AppendLine("    `$CertHash = [System.Convert]::ToBase64String(`$Cert.GetCertHash()) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT timestamp for expiration")
  [Void]$StringBuilder.AppendLine("    `$StartDate = (Get-Date -Date `"1970-01-01T00:00:00Z`").ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    `$JWTExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End (Get-Date).ToUniversalTime().AddMinutes(2)).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$JWTExpiration = [math]::Round(`$JWTExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT validity start timestamp")
  [Void]$StringBuilder.AppendLine("    `$NotBeforeExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End ((Get-Date).ToUniversalTime())).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$NotBefore = [math]::Round(`$NotBeforeExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT header")
  [Void]$StringBuilder.AppendLine("    `$JWTHeader = @{")
  [Void]$StringBuilder.AppendLine("      alg = `"RS256`"")
  [Void]$StringBuilder.AppendLine("      typ = `"JWT`"")
  [Void]$StringBuilder.AppendLine("      # Use the CertHash and replace/strip to match web encoding of base64")
  [Void]$StringBuilder.AppendLine("      x5t = `$CertHash")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Convert header and payload to base64")
  [Void]$StringBuilder.AppendLine("    `$JWTHeaderToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTHeader | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedHeader = [System.Convert]::ToBase64String(`$JWTHeaderToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT payload")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoad = @{")
  [Void]$StringBuilder.AppendLine("      # What endpoint is allowed to use this JWT")
  [Void]$StringBuilder.AppendLine("      aud = `"https://login.microsoftonline.com/`$TenantID/oauth2/token`"")
  [Void]$StringBuilder.AppendLine("      # Expiration timestamp")
  [Void]$StringBuilder.AppendLine("      exp = `$JWTExpiration")
  [Void]$StringBuilder.AppendLine("      # Issuer = your application")
  [Void]$StringBuilder.AppendLine("      iss = `$ClientID")
  [Void]$StringBuilder.AppendLine("      # JWT ID: random guid")
  [Void]$StringBuilder.AppendLine("      jti = [guid]::NewGuid()")
  [Void]$StringBuilder.AppendLine("      # Not to be used before")
  [Void]$StringBuilder.AppendLine("      nbf = `$NotBefore")
  [Void]$StringBuilder.AppendLine("      # JWT Subject")
  [Void]$StringBuilder.AppendLine("      sub = `$ClientID")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoadToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTPayload | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedPayload = [System.Convert]::ToBase64String(`$JWTPayLoadToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join header and Payload with `".`" to create a valid (unsigned) JWT")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$EncodedHeader + `".`" + `$EncodedPayload")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Define RSA signature and hashing algorithm")
  [Void]$StringBuilder.AppendLine("    `$RSAPadding = [Security.Cryptography.RSASignaturePadding]::Pkcs1")
  [Void]$StringBuilder.AppendLine("    `$HashAlgorithm = [Security.Cryptography.HashAlgorithmName]::SHA256")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a signature of the JWT")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$Cert.PrivateKey.SignData([System.Text.Encoding]::UTF8.GetBytes(`$JWT), `$HashAlgorithm, `$RSAPadding)) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join the signature to the JWT with `".`"")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$JWT + `".`" + `$Signature")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a hash with body parameters")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      client_id             = `$ClientID")
  [Void]$StringBuilder.AppendLine("      client_assertion      = `$JWT")
  [Void]$StringBuilder.AppendLine("      client_assertion_type = `"urn:ietf:params:oauth:client-assertion-type:jwt-bearer`"")
  [Void]$StringBuilder.AppendLine("      scope                 = `$Scope")
  [Void]$StringBuilder.AppendLine("      grant_type            = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Use the self-generated JWT as Authorization")
  [Void]$StringBuilder.AppendLine("    `$Header = @{")
  [Void]$StringBuilder.AppendLine("      Authorization = `"Bearer `$JWT`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Splat the parameters for Invoke-Restmethod for cleaner code")
  [Void]$StringBuilder.AppendLine("    `$PostSplat = @{")
  [Void]$StringBuilder.AppendLine("      ContentType = 'application/x-www-form-urlencoded'")
  [Void]$StringBuilder.AppendLine("      Method      = 'POST'")
  [Void]$StringBuilder.AppendLine("      Body        = `$Body")
  [Void]$StringBuilder.AppendLine("      Uri         = `"https://login.microsoftonline.com/`$TenantID/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("      Headers     = `$Header")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((`$AuthResult = Invoke-RestMethod @PostSplat)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthCertToken
  
  #region function Get-MyOAuthDelegateToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Delegate OAuth Token for Microsoft Graph API.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Retrieves an OAuth 2.0 token for delegated access using the authorization code flow.")
  [Void]$StringBuilder.AppendLine("      This function opens a browser window for user authentication and consent, then exchanges the authorization code for an access token.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("      The Azure Active Directory tenant ID where the application is registered.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      The Application (client) ID of the Azure AD app registration.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RedirectUri")
  [Void]$StringBuilder.AppendLine("      The redirect URI registered for the application. Defaults to 'https://localhost'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      An optional state value to maintain state between the request and callback. Defaults to 'MyState'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("      The permissions/scopes requested for the token. Defaults to 'https://graph.microsoft.com/.default'.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthDelegateToken -TenantID `"contoso.onmicrosoft.com`" -ClientID `"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthDelegateToken -TenantID `$TenantID -ClientID `$ClientID -Scope `"User.Read`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Updated Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [String]`$RedirectUri = `"https://localhost`",")
  [Void]$StringBuilder.AppendLine("    [String]`$State = `"MyState`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Web.HttpUtility`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Web`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Windows.Forms.Form`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempRedirectUri = [System.Web.HttpUtility]::UrlEncode(`$RedirectUri)")
  [Void]$StringBuilder.AppendLine("  `$TempScope = [System.Web.HttpUtility]::UrlEncode((`$Scope -join `"%20`"))")
  [Void]$StringBuilder.AppendLine("  `$AuthUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/authorize?client_id=`$(`$ClientID)&state=`$(`$State)&redirect_uri=`$(`$TempRedirectUri)&scope=`$(`$TempScope)&response_type=code&response_mode=query`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Size = [System.Drawing.Size]::New(480, 680)")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopLevel = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopMost = `$True")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.add_Shown({ `$This.Activate() })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Controls.Add(`$OADWebBrowser)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Location = [System.Drawing.Point]::New(4, 4)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Size = [System.Drawing.Size]::New(472, 672)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.ScriptErrorsSuppressed = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Url = `$AuthUri")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.add_DocumentCompleted({ if (`$This.Url.Query -match `"error=[^&]*|code=[^&]*`") { `$This.Parent.Close() } })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.ShowDialog(`$$($ScriptName)Form) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Code = [System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Code`"))))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      `"Error`"      = ([System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Error`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Authorized")
  [Void]$StringBuilder.AppendLine("    `$TokenUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"Client_ID`"    = `$ClientID")
  [Void]$StringBuilder.AppendLine("      `"Scope`"        = `$Scope")
  [Void]$StringBuilder.AppendLine("      `"Code`"         = `$Code")
  [Void]$StringBuilder.AppendLine("      `"Redirect_Uri`" = `$RedirectUri")
  [Void]$StringBuilder.AppendLine("      `"Grant_Type`"   = `"authorization_code`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AuthResult = (Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$TokenUri -ContentType `"application/x-www-form-urlencoded`" -Body `$Body -ErrorAction SilentlyContinue).Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch {}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthDelegateToken
  
  #region function Get-MyGraphQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Microsoft Graph API with advanced filtering and selection options.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function queries the Microsoft Graph API using a provided authentication token and supports advanced query options such as filtering, selecting specific properties,")
  [Void]$StringBuilder.AppendLine("      ordering, searching, pagination, and retrieving all pages of results.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      The Graph API version to use. Accepts `"Beta`" or `"v1.0`". Default is `"Beta`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("      The resource endpoint to query in the Graph API (e.g., `"users`", `"groups`", `"me/messages`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      If specified, includes a count of the total matching resources in the response.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("      An OData filter string to restrict the results (e.g., `"startswith(displayName,'A')`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("      An OData expand string to include related entities in the response.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("      An array of property names to select in the response (e.g., `"displayName`", `"mail`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      A search string to perform a full-text search on the resource.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderBy")
  [Void]$StringBuilder.AppendLine("      An array of property names to order the results by (e.g., `"displayName desc`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      The maximum number of items to return per page (between 1 and 1000). Default is 500.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Skip")
  [Void]$StringBuilder.AppendLine("      The number of items to skip before returning results (for pagination).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      If specified, retrieves all pages of results by following the @odata.nextLink property.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGraphQuery -AuthToken `$AuthToken -Resource `"users`" -Select `"displayName`",`"mail`" -Top 100 -All")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Count,")
  [Void]$StringBuilder.AppendLine("    [String]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [String]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$OrderBy,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 500,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Skip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MyFilters = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Count.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$count=true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$search=```"`$(`$Search)```"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"OrderBy`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$orderby=`$((`$OrderBy -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Skip`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$skip=`$(`$Skip)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Filter`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$filter=`$(`$Filter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Expand`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$expand=`$(`$Expand)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$MyFilters.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)?`$((`$MyFilters -join `"&`"))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGraphQuery
  
  #region function Get-MyGQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Microsoft Graph API with simple paging support.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function queries the Microsoft Graph API using a provided authentication token and supports basic query options such as API version, resource endpoint, and retrieving all pages of results.")
  [Void]$StringBuilder.AppendLine("      It is designed for straightforward queries where advanced filtering or selection is not required.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      The Graph API version to use. Accepts `"Beta`" or `"v1.0`". Default is `"Beta`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("      The resource endpoint to query in the Graph API (e.g., `"users`", `"groups`", `"me/messages`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      If specified, retrieves all pages of results by following the @odata.nextLink property.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      The number of milliseconds to wait between requests when paging through results. Default is 100.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGQuery -AuthToken `$AuthToken -Resource `"users`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGQuery -AuthToken `$AuthToken -Resource `"groups`" -Version `"v1.0`" -All")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGQuery -AuthToken `$AuthToken -Resource `"me/messages`" -Wait 200")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Wait = 100")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds `$Wait")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGQuery
  
  #region function Send-MyGraphMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends an email message using the Microsoft Graph API.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends an email via Microsoft Graph API, supporting advanced options such as specifying recipients, CC, BCC, reply-to, sender, importance, flagging, delivery/read receipts, mentions, attachments, and saving to sent items.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Specifies the Microsoft Graph API version to use. Accepts `"v1.0`" or `"Beta`". Default is `"Beta`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      The authentication token (as a hashtable) to use for the request. Typically obtained from an OAuth flow or authentication function.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UsedID")
  [Void]$StringBuilder.AppendLine("      The User ID of the mailbox to send mail from. Required when sending as a specific user.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("      The subject of the email message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      The body content of the email message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsText")
  [Void]$StringBuilder.AppendLine("      If specified, sends the body as plain text. Otherwise, sends as HTML.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("      An array of recipient email addresses (System.Net.Mail.MailAddress) to send the message to.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mention")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to mention in the message. These will be added to the message's mentions collection.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as CC recipients.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as BCC recipients.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReplyTo")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as reply-to addresses.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER From")
  [Void]$StringBuilder.AppendLine("      The sender's email address (System.Net.Mail.MailAddress). If omitted, the authenticated user is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Importance")
  [Void]$StringBuilder.AppendLine("      Sets the importance of the message. Accepts `"Low`", `"Normal`", or `"High`". Default is `"Normal`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Flagged")
  [Void]$StringBuilder.AppendLine("      If specified, flags the message for follow-up.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeliveryReceipt")
  [Void]$StringBuilder.AppendLine("      If specified, requests a delivery receipt for the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadReceipt")
  [Void]$StringBuilder.AppendLine("      If specified, requests a read receipt for the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("      An array of file paths to attach to the message. Files are encoded as base64 and sent as file attachments.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SaveToSent")
  [Void]$StringBuilder.AppendLine("      If specified, saves the sent message to the Sent Items folder.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyGraphMail -Version `"v1.0`" -AuthToken `$AuthToken -Subject `"Test`" -Body `"Hello World`" -To `$To -CC `$CC -Attachments @(`"C:\file.txt`") -Importance `"High`" -SaveToSent")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      Provides advanced email sending capabilities via Microsoft Graph API.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Me`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"v1.0`", `"Beta`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UsedID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsText,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$Mention,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$ReplyTo,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Importance = `"Normal`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Flagged,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$DeliveryReceipt,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ReadReceipt,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachments,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SaveToSent")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Message = [Ordered]@{ `"Message`" = [Ordered]@{ `"Subject`" = `$Subject } }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AsText.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"TEXT`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"HTML`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Body.Add(`"Content`", `$Body)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"Importance`", `$Importance)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isDeliveryReceiptRequested`", (`$DeliveryReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isReadReceiptRequested`", (`$ReadReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Flagged.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"flag`", [Ordered]@{ `"flagStatus`" = `"flagged`" })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"dueDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"startDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"From`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"from`", [Ordered]@{ `"emailAddress`" = @{ `"address`" = (`$From.Address) } })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"toRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("  `$TO | ForEach-Object -Process { [Void]`$Message.Message.toRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"`$Mention`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Mentions`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$Mention | ForEach-Object -Process { [Void]`$Message.Message.Mentions.Add(@{ `"Mentioned`" = @{ `"name`" = (`$PSItem.Address); `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"ccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$CC | ForEach-Object -Process { [Void]`$Message.Message.ccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"bccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$BCC | ForEach-Object -Process { [Void]`$Message.Message.bccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"ReplyTo`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"replyTo`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$ReplyTo | ForEach-Object -Process { [Void]`$Message.Message.replyTo.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Attachments`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Attachments`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    foreach (`$File in `$Attachments)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$File))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Base64Encode = [Convert]::ToBase64String(([System.IO.File]::ReadAllBytes(`$File)))")
  [Void]$StringBuilder.AppendLine("        [Void]`$Message.Message.attachments.Add([Ordered]@{ `"@odata.type`" = `"#microsoft.graph.fileAttachment`"; `"Name`" = ([System.IO.Path]::GetFileName(`$File)); `"contentType`" = `"MIME types`"; `"contentBytes`" = `"`$(`$Base64Encode)`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Add(`"saveToSentItems`", (`$SaveToSent.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Me`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/me/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/users/`$(`$UserID)/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Result = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Post -Body (`$Message | ConvertTo-Json -Depth 99)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (`$Result.StatusCode -eq 202) }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyGraphMail
  
  #region function Send-MSTeamNotification
  [Void]$StringBuilder.AppendLine("#region function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("function Send-MSTeamNotification ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Microsoft Teams WebHook Notification")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends a notification to a Microsoft Teams channel using a WebHook URL.")
  [Void]$StringBuilder.AppendLine("      It supports custom themes, titles, subtitles, facts, images, and buttons.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebHookUri")
  [Void]$StringBuilder.AppendLine("      The WebHook URL for the Microsoft Teams channel.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ThemeColor")
  [Void]$StringBuilder.AppendLine("      The theme color for the message card (default is `"0076D7`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      The title of the message card.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subtitle")
  [Void]$StringBuilder.AppendLine("      The subtitle of the message card.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("      Optional text to display in the message card.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Optional additional message text.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facts")
  [Void]$StringBuilder.AppendLine("      An ordered dictionary of facts to display in the message card.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("      An integer representing the image to display (1-9).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Button")
  [Void]$StringBuilder.AppendLine("      An ordered dictionary of buttons to display in the message card.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebHookURI = `"https://Web Hook URL`"")
  [Void]$StringBuilder.AppendLine("      `$Title = `"Title`"")
  [Void]$StringBuilder.AppendLine("      `$Subtitle = `"Subtitle`"")
  [Void]$StringBuilder.AppendLine("      `$Facts = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Fact 1 Name`" = `"Fact 1 Value`"")
  [Void]$StringBuilder.AppendLine("        `"Fact 2 Name`" = `"Fact 2 Value`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Buttons = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Button01`" = `"http://www.intel.com`"")
  [Void]$StringBuilder.AppendLine("        `"Button02`" = `"http://www.microsoft.com`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Send-MSTeamNotification -WebHookUri `$WebHookURI -Title `$Title -Subtitle `$Subtitle -Facts `$Facts -Button `$Buttons")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/28/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Simple`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$WebHookUri,")
  [Void]$StringBuilder.AppendLine("    [String]`$ThemeColor = `"0076D7`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subtitle,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Facts,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 9)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Image = 9,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Button`")]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Button")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JSon = [Ordered]@{}")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@type`", `"MessageCard`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@context`", `"http://schema.org/extensions`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"themeColor`", `$ThemeColor)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"summary`", `$Title)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"sections`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections.Add([Ordered]@{`"activityTitle`" = `$Title })")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activitySubtitle`", `$Subtitle)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Text`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"activityText`", `$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activityImage`", `"https://teamsnodesample.azurewebsites.net/static/img/image`$(`$Image).png`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"Text`", `$Message)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facts`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"facts`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Fact in `$Facts.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.Sections[0].Facts.Add(([Ordered]@{`"name`" = `$Fact; `"value`" = `$Facts[`$Fact] }))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"markdown`", `"true`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Button`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Add(`"potentialAction`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Btn in `$Button.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction.Add([Ordered]@{`"@type`" = `"OpenUri`" })")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"name`", `$Btn)")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"targets`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].targets.Add(@{`"os`" = `"default`"; `"uri`" = `$Button[`$Btn] })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-RestMethod -Uri `$WebHookURI -Method Post -Body (`$JSon | ConvertTo-Json -Depth 99) -ContentType 'application/json' -ErrorAction `"SilentlyContinue`" | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MSTeamNotification
  
  #region function Verify-MyPIMRoleActived
  [Void]$StringBuilder.AppendLine("#region function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("function Verify-MyPIMRoleActived ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activated")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activateds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleName")
  [Void]$StringBuilder.AppendLine("      Name of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleID")
  [Void]$StringBuilder.AppendLine("      ID of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      UPN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      ID is User Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Me*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMe = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/Me?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty(`$TmpMe.ID))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `$TmpMe.ID")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"UserName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpUser = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/users/`$(`$UserName)?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("        if ([String]::IsNullOrEmpty(`$TmpUser.ID))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `$TmpUser.ID")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"*RoleName`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRole = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles?```$filter=DisplayName eq '`$(`$RoleName)'&```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("    `$RoleID = `$TmpRole.Value.ID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$RoleID) -or (`$UserID -eq `"UnknownUserID`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Role Not Found")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("      `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("      `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ChkRoleMember = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles/`$(`$RoleID)/Members?```$filter=id eq '`$(`$UserID)'&```$Select=ID,userPrincipalName`"")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$ChkRoleMember.Value.ID))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is Not a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$ChkRoleMember.Value.ID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$ChkRoleMember.Value.userPrincipalName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verify-MyPIMRoleActived
  
  #region function Connect-MyMGGraph
  [Void]$StringBuilder.AppendLine("#region function Connect-MyMGGraph")
  [Void]$StringBuilder.AppendLine("function Connect-MyMGGraph")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Connects to Microsoft Graph API using either application or user credentials.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function establishes a connection to Microsoft Graph API. It supports connecting as an application (using ClientID and TenantID) or as a user (using interactive authentication).")
  [Void]$StringBuilder.AppendLine("      When connecting as a user, it can optionally use a specific Azure subscription. The function ensures required modules are installed and configures authentication context.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      The Application (client) ID of the Azure AD app registration. Used for application authentication.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("      The Azure Active Directory tenant ID where the application or user is registered.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsUser")
  [Void]$StringBuilder.AppendLine("      If specified, connects using user credentials (interactive login) instead of application credentials.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      The Azure subscription ID to use when connecting as a user. Optional; defaults to the value in `$Script:SubscriptionID.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Connect-MyMGGraph -ClientID `"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`" -TenantID `"contoso.onmicrosoft.com`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Connect-MyMGGraph -AsUser -TenantID `"contoso.onmicrosoft.com`" -SubscriptionID `"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Safe`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID = `$Script:MyMGGraphClientID,")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID = `$Script:TenantID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"AsUser`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsUser,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"AsUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:SubscriptionID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Connect-MyMGGraph`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"AsUser`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Install-MyModule -Name `"Az.Accounts`" -Version `"4.0.2`" | Out-Null")
  [Void]$StringBuilder.AppendLine("      Update-AzConfig -EnableLoginByWam `$False -WarningAction SilentlyContinue | Out-Null")
  [Void]$StringBuilder.AppendLine("      `$AADLogonInfo = Connect-AzAccount -Tenant `$TenantID -SubscriptionID `$SubscriptionID")
  [Void]$StringBuilder.AppendLine("      `$AZAccess = Get-AzAccessToken -ResourceUrl `"https://graph.microsoft.com/`" -AsSecureString")
  [Void]$StringBuilder.AppendLine("      Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null")
  [Void]$StringBuilder.AppendLine("      Connect-MgGraph -AccessToken `$AZAccess.Token -NoWelcome")
  [Void]$StringBuilder.AppendLine("      Get-MgContext")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Login to MS Graph API")
  [Void]$StringBuilder.AppendLine("      Install-MyModule -Name `"Microsoft.Graph.Authentication`" -Version `"2.28.0`" | Out-Null")
  [Void]$StringBuilder.AppendLine("      Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null")
  [Void]$StringBuilder.AppendLine("      Connect-MgGraph -ClientId `$ClientID -TenantId `$TenantID -NoWelcome")
  [Void]$StringBuilder.AppendLine("      Get-MgContext")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#Do this if a terminating exception happens#>")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Connect-MyMGGraph`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-MyMGGraph")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-MyMGGraph
  
  #region function Get-MyMgGraphRequest
  [Void]$StringBuilder.AppendLine("#region function Get-MyMgGraphRequest")
  [Void]$StringBuilder.AppendLine("function Get-MyMgGraphRequest")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Queries the Microsoft Graph API using the specified resource and API version.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends a GET request to the Microsoft Graph API for the specified resource and API version.")
  [Void]$StringBuilder.AppendLine("      It supports automatic paging to retrieve all results if the -All switch is specified.")
  [Void]$StringBuilder.AppendLine("      The function returns the results as PowerShell objects, excluding properties that start with '@'.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Specifies the Microsoft Graph API version to use. Accepts `"Beta`" or `"v1.0`". Default is `"Beta`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("      The resource endpoint to query in the Graph API (e.g., `"users`", `"groups`", `"me/messages`").")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      If specified, retrieves all pages of results by following the @odata.nextLink property.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyMgGraphRequest -Resource `"users`"")
  [Void]$StringBuilder.AppendLine("      Queries the `"users`" resource using the default `"Beta`" API version.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyMgGraphRequest -Version `"v1.0`" -Resource `"groups`" -All")
  [Void]$StringBuilder.AppendLine("      Queries the `"groups`" resource using the `"v1.0`" API version and retrieves all pages of results.")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyMgGraphRequest`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `$Uri")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = Invoke-MgGraphRequest -Method GET -Uri `$Uri -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.ContainsKey(`"Value`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData.Value | ForEach-Object -Process { [PSCustomObject]`$PSItem } | Select-Object -Property * -ExcludeProperty `"@*`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]`$ReturnData | Select-Object -Property * -ExcludeProperty `"@*`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = @{ }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$Uri = `$ReturnData.`"@odata.nextLink`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while (`$ReturnData.ContainsKey(`"@odata.nextLink`") -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyMgGraphRequest`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyMgGraphRequest")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyMgGraphRequest
  
  #region function Get-MyMgGraphQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyMgGraphQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyMgGraphQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query MgGraph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query MgGraph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Graph API Version to use (Beta or v1.0)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("      Resource to query in Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      If specified, will retrieve all pages of results")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyMgGraphQuery -Resource `"users`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyMgGraphQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `$Uri")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = Invoke-MgGraphRequest -Method GET -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.Value.Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData.Value | ForEach-Object -Process { [PSCustomObject]`$PSItem } | Select-Object -Property * -ExcludeProperty `"@*`"")
  [Void]$StringBuilder.AppendLine("        `$Uri = `$ReturnData[`"@odata.nextLink`"]")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = @{ }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while (`$ReturnData.ContainsKey(`"@odata.nextLink`") -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyMgGraphQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyMgGraphQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyMgGraphQuery
  
  #region function Send-MyMgGraphMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyMgGraphMail")
  [Void]$StringBuilder.AppendLine("function Send-MyMgGraphMail")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends an email message using the Microsoft Graph API.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function sends an email via Microsoft Graph API, supporting advanced options such as specifying recipients, CC, BCC, reply-to, sender, importance, flagging, ")
  [Void]$StringBuilder.AppendLine("      delivery/read receipts, mentions, attachments, and saving to sent items.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Specifies the Microsoft Graph API version to use. Accepts `"v1.0`" or `"Beta`". Default is `"Beta`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UsedID")
  [Void]$StringBuilder.AppendLine("      The User ID of the mailbox to send mail from. Required when sending as a specific user.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("      The subject of the email message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      The body content of the email message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsText")
  [Void]$StringBuilder.AppendLine("      If specified, sends the body as plain text. Otherwise, sends as HTML.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("      An array of recipient email addresses (System.Net.Mail.MailAddress) to send the message to.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mention")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to mention in the message. These will be added to the message's mentions collection.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as CC recipients.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as BCC recipients.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReplyTo")
  [Void]$StringBuilder.AppendLine("      An array of email addresses to include as reply-to addresses.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER From")
  [Void]$StringBuilder.AppendLine("      The sender's email address (System.Net.Mail.MailAddress). If omitted, the authenticated user is used.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Importance")
  [Void]$StringBuilder.AppendLine("      Sets the importance of the message. Accepts `"Low`", `"Normal`", or `"High`". Default is `"Normal`".")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Flagged")
  [Void]$StringBuilder.AppendLine("      If specified, flags the message for follow-up.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeliveryReceipt")
  [Void]$StringBuilder.AppendLine("      If specified, requests a delivery receipt for the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadReceipt")
  [Void]$StringBuilder.AppendLine("      If specified, requests a read receipt for the message.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("      An array of file paths to attach to the message. Files are encoded as base64 and sent as file attachments.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SaveToSent")
  [Void]$StringBuilder.AppendLine("      If specified, saves the sent message to the Sent Items folder.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyMgGraphMail -Version `"v1.0`" -Subject `"Test`" -Body `"Hello World`" -To `$To -CC `$CC -Attachments @(`"C:\file.txt`") -Importance `"High`" -SaveToSent")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Me`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"v1.0`", `"Beta`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UsedID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsText,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$Mention,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$ReplyTo,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Importance = `"Normal`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Flagged,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$DeliveryReceipt,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ReadReceipt,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachments,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SaveToSent")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MyMgGraphMail`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Message = [Ordered]@{ `"Message`" = [Ordered]@{ `"Subject`" = `$Subject } }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AsText.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"TEXT`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"HTML`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Body.Add(`"Content`", `$Body)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"Importance`", `$Importance)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isDeliveryReceiptRequested`", (`$DeliveryReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isReadReceiptRequested`", (`$ReadReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Flagged.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"flag`", [Ordered]@{ `"flagStatus`" = `"flagged`" })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"dueDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"startDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"From`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"from`", [Ordered]@{ `"emailAddress`" = @{ `"address`" = (`$From.Address) } })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"toRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("  `$TO | ForEach-Object -Process { [Void]`$Message.Message.toRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"`$(`$Mention)`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Mentions`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$Mention | ForEach-Object -Process { [Void]`$Message.Message.Mentions.Add(@{ `"Mentioned`" = @{ `"name`" = (`$PSItem.Address); `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"ccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$CC | ForEach-Object -Process { [Void]`$Message.Message.ccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"bccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$BCC | ForEach-Object -Process { [Void]`$Message.Message.bccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"ReplyTo`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"replyTo`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$ReplyTo | ForEach-Object -Process { [Void]`$Message.Message.replyTo.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Attachments`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Attachments`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    foreach (`$File in `$Attachments)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$File))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Base64Encode = [Convert]::ToBase64String(([System.IO.File]::ReadAllBytes(`$File)))")
  [Void]$StringBuilder.AppendLine("        [Void]`$Message.Message.attachments.Add([Ordered]@{ `"@odata.type`" = `"#microsoft.graph.fileAttachment`"; `"Name`" = ([System.IO.Path]::GetFileName(`$File)); `"contentType`" = `"MIME types`"; `"contentBytes`" = `"`$(`$Base64Encode)`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Add(`"saveToSentItems`", (`$SaveToSent.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Me`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/me/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/users/`$(`$UserID)/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Invoke-MgGraphRequest -Uri `$Uri -Method Post -Body (`$Message | ConvertTo-Json -Depth 99)")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MyMgGraphMail`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyMgGraphMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyMgGraphMail
  
  #region function Verify-MyMGPIMRoleActived
  [Void]$StringBuilder.AppendLine("#region function Verify-MyMGPIMRoleActived")
  [Void]$StringBuilder.AppendLine("function Verify-MyMGPIMRoleActived ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activated")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activateds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleName")
  [Void]$StringBuilder.AppendLine("      Name of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleID")
  [Void]$StringBuilder.AppendLine("      ID of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      UPN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      ID is User Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleID `$RoleID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleID `$RoleID -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleID `$RoleID -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleName `$RoleName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleName `$RoleName -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyMGPIMRoleActived -RoleName `$RoleName -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verify-MyMGPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Me*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMe = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/Me?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty(`$TmpMe.ID))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `$TmpMe.ID")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"UserName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpUser = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/users/`$(`$UserName)?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("        if ([String]::IsNullOrEmpty(`$TmpUser.ID))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `$TmpUser.ID")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"*RoleName`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRole = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles?```$filter=DisplayName eq '`$(`$RoleName)'&```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("    `$RoleID = `$TmpRole.Value.ID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$RoleID) -or (`$UserID -eq `"UnknownUserID`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Role Not Found")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("      `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("      `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ChkRoleMember = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles/`$(`$RoleID)/Members?```$filter=id eq '`$(`$UserID)'&```$Select=ID,userPrincipalName`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ChkRoleMember = @{ `"Value`" = `$Null }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$ChkRoleMember.Value.ID))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is Not a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$ChkRoleMember.Value.ID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$ChkRoleMember.Value.userPrincipalName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verify-MyMGPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verify-MyMGPIMRoleActived")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verify-MyMGPIMRoleActived
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Microsoft GraphAPI Functions ********
  
  #region ******** SharePoint Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MySPLists
  [Void]$StringBuilder.AppendLine("#region function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("function Get-MySPLists ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)?```$select=Id,Title,ListItemEntityTypeFullName,ItemCount,LastItemDeletedDate,LastItemModifiedDate,LastItemUserModifiedDate`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return List of SharePoint Lists")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return SharePoint List")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPLists
  
  #region function Get-MySPListFields
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("function Get-MySPListFields ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Fields?```$filter=ReadOnlyField eq false&```$select=Id,Title,StaticName,InternalName,Required,ReadOnlyField,EnforceUniqueValues,FieldTypeKind,TypeAsString,TypeDisplayName`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return List of SharePoint List Fields")
  [Void]$StringBuilder.AppendLine("    (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, StaticName, InternalName, Required, ReadOnlyField, EnforceUniqueValues, FieldTypeKind, TypeAsString, TypeDisplayName")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListFields
  
  #region function Get-MySPListItems
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItems ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Max Number of Items to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Fields")
  [Void]$StringBuilder.AppendLine("      Name of the Fields to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Created")
  [Void]$StringBuilder.AppendLine("      Date Item was Created")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Date Item was Modified")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      Return all List Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Created `"3/3/2023 10:00 am`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -Modified `"3/3/2023 11:45`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID 13")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 100,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Fields = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Created,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Configure Initial Rest API Query Uri")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Created`") -or `$PSBoundParameters.ContainsKey(`"Modified`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Created`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Created`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Created.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Modified`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Modified.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TmpFilter = `"&```$filter=`$(`$TmpValName) gt '`$(`$TmpTime)Z'`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items?```$top=`$(`$Top)&```$orderby=Modified desc`$(`$TmpFilter)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpData = (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Items Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData.results | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Item Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$TmpData.`"__next`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItems
  
  #region function New-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("function New-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of New Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = [Ordered]@{`"Title`" = `"New Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -Headers `$AuthToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return New SharePoint List Item")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MySPListItem
  
  #region function Update-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Update-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of Updated Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem = [Ordered]@{`"Title`" = `"Updated Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$MergeToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$MergeToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Patch -Uri `$Uri -Headers `$MergeToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Updated SharePoint List Item")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MySPListItem
  
  #region function Delete-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Delete-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$DeleteToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$DeleteToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Delete -Uri `$Uri -Headers `$DeleteToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Success")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$True}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$False}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Delete-MySPListItem
  
  #region function Get-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment = `"None`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/getByFileName('{0}')`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  foreach (`$FileName in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri (`$Uri -f `$FileName) -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Attachment Success")
  [Void]$StringBuilder.AppendLine("      if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d.Results | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItemAttachment
  
  #region function Add-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Add-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/add(FileName='{0}')`"")
  [Void]$StringBuilder.AppendLine("  foreach (`$FilePath in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri (`$Uri -f [System.IO.Path]::GetFileName(`$FilePath)) -Headers `$AuthToken -InFile `$FilePath -ContentType `"application/octet-stream`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Delete Success")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MySPListItemAttachment
  
  [Void]$StringBuilder.AppendLine("#endregion ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** SharePoint Rest API Functions ********
  
  #region ******** Azure AD Storage Table Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Query")
  [Void]$StringBuilder.AppendLine("      Storage Account Table Query")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Top Number of Rows to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("      Property Values to Select")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("   .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Query,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Query`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$ArrayList.Add(`"```$filter=`$(`$Query)`")")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ArrayList.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TableQuery = `"?`$(`$ArrayList -join `"&`")`"")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"?`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`$(`$SASJoin)`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$NextRecords = `"`$(`$SASJoin)NextPartitionKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextPartitionKey`"])&NextRowKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextRowKey`"])`"")
  [Void]$StringBuilder.AppendLine("        `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$ReturnData.StatusCode -eq 200) -and (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`")) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyTableQuery
  
  #region function Add-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Add-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/202{2} {0:00}:{1:00}:{3:00}`" -f (`$A + 1), (`$B + 1), `$A, (`$A  + `$B)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Add-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Add-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"PartitionKey`", `$PartitionKey)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"RowKey`", `$RowKey)")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (-not `$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Prefer`", `"return-no-content`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)()`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)()?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201, 204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json) | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyTableQuery
  
  #region function Merge-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Merge-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Merge-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Merge-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method MERGE -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Merge-MyTableQuery
  
  #region function Update-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Update-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Update-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Update-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  #[Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyTableQuery
  
  #region function Remove-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Remove-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          #Remove-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("          Remove-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"     = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyTableQuery
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Storage Table Functions ********
  
  #region ******** Azure AD Message Queue Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Add-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Add-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to add to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageTTL")
  [Void]$StringBuilder.AppendLine("      Number of Seconds till Message Expires")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Encode")
  [Void]$StringBuilder.AppendLine("      Encode the text Message in Base64")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(-1, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$MessageTTL = 604800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Encode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Encode.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$(`$Message)</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"POST``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyQueueMessage
  
  #region function Clear-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Clear-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Clear-MyQueueMessage
  
  #region function Get-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Get-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NumMessages")
  [Void]$StringBuilder.AppendLine("      Number of Messages to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Peek")
  [Void]$StringBuilder.AppendLine("      Get Messages but don't flag them")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decode")
  [Void]$StringBuilder.AppendLine("      Decode the Base64 text Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 32)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$NumMessages = 1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Peek,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Peek.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PeekOnly = `"&peekonly=true`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"GET``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(200))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Messages = @(([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage)")
  [Void]$StringBuilder.AppendLine("    if (`$Messages.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Decode.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Messages | ForEach-Object -Process { `$PSItem.MessageText = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((`$PSItem.MessageText))) }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Messages")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyQueueMessage
  
  #region function Remove-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Remove-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyQueueMessage
  
  #region function Update-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Update-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"PUT``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyQueueMessage
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Message Queue Functions ********
  
  #region ******** Service Now Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Service Now Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now OAuth Token")
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  
  #region class SNAuthToken
  [Void]$StringBuilder.AppendLine("#region class SNAuthToken")
  [Void]$StringBuilder.AppendLine("class SNAuthToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  [String]`$RefreshToken")
  [Void]$StringBuilder.AppendLine("  [Int]`$ExpireIn")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$ExpireTime")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNAuthToken ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.RefreshToken = `$Null")
  [Void]$StringBuilder.AppendLine("    `$This.ExpireIn = 0")
  [Void]$StringBuilder.AppendLine("    `$this.ExpireTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    `$This.AuthToken = @{}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNAuthToken ([Object]`$AuthResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.RefreshToken = `$AuthResult.refresh_token")
  [Void]$StringBuilder.AppendLine("    `$This.ExpireIn = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("    `$this.ExpireTime = [DateTime]::Now.AddSeconds(`$AuthResult.Expires_In)")
  [Void]$StringBuilder.AppendLine("    `$This.AuthToken = @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class SNAuthToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion class SNAuthToken
  
  #region function Get-SNAuthToken
  [Void]$StringBuilder.AppendLine("#region function Get-SNAuthToken")
  [Void]$StringBuilder.AppendLine("function Get-SNAuthToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Geterate an OAuthToken to Interact with Service Now")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Geterate an OAuthToken to Interact with Service Now")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      ClientID used to Authenticate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("      ClientSecret used to Authenticate Service Now")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to Use to Authenticate to Service Now")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RefreshToken")
  [Void]$StringBuilder.AppendLine("      RefreshToken to Continue Service Now Session")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAuthToken -Instance `$Instance -ClientID `$ClientID -ClientSecret `$ClientSecret -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAuthToken -Instance `$Instance -ClientID `$ClientID -ClientSecret `$ClientSecret -RefreshToken `$RefreshToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$RefreshToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Creds`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"grant_type`"    = `"password`"")
  [Void]$StringBuilder.AppendLine("      `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("      `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("      `"username`"      = `$Credential.UserName")
  [Void]$StringBuilder.AppendLine("      `"password`"      = `$Credential.GetNetworkCredential().Password")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"grant_type`"    = `"refresh_token`"")
  [Void]$StringBuilder.AppendLine("      `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("      `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("      `"refresh_token`" = `$RefreshToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = Invoke-RestMethod -UseBasicParsing -Uri `"https://`$(`$Instance).service-now.com/oauth_token.do`" -Body `$Body -Method Post -ContentType `"application/x-www-form-urlencoded`"")
  [Void]$StringBuilder.AppendLine("    [SNAuthToken]::New(`$AuthResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [SNAuthToken]::New()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNAuthToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNAuthToken
  
  
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  [Void]$StringBuilder.AppendLine("# Create Service Now Incident")
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  
  #region ******** Class SNIncident ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNNewIncident ********")
  [Void]$StringBuilder.AppendLine("Class SNIncident")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ID")
  [Void]$StringBuilder.AppendLine("  [String]`$Number")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNIncident ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNIncident ([String]`$ID, [String]`$Number)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ID = `$ID")
  [Void]$StringBuilder.AppendLine("    `$This.Number = `$Number")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNIncident ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNIncident ********
  
  #region function Create-SNIncident
  [Void]$StringBuilder.AppendLine("#region function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("function Create-SNIncident ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates a new ServiceNow incident.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      This function creates a new incident in ServiceNow with the specified parameters, such as assignment group, affected user, urgency, impact, and more. It requires valid credentials or an authentication token to connect to the ServiceNow web portal.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      The name of the ServiceNow instance to connect to.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignGroup")
  [Void]$StringBuilder.AppendLine("      The assignment group to which the incident will be assigned.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignUser")
  [Void]$StringBuilder.AppendLine("      The user to whom the incident will be assigned.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AffectedUser")
  [Void]$StringBuilder.AppendLine("      The user affected by the incident.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Urgency")
  [Void]$StringBuilder.AppendLine("      The urgency level of the incident (e.g., 1 - High, 2 - Medium, 3 - Low).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Impact")
  [Void]$StringBuilder.AppendLine("      The impact level of the incident (e.g., 1 - High, 2 - Medium, 3 - Low).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CMDBItem")
  [Void]$StringBuilder.AppendLine("      The Configuration Management Database (CMDB) item related to the incident.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Catagory")
  [Void]$StringBuilder.AppendLine("      The category of the incident.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortDescription")
  [Void]$StringBuilder.AppendLine("      A brief summary describing the incident.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("      A detailed description of the incident.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      The credentials used to authenticate to the ServiceNow web portal. Accepts a PSCredential object.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      The authentication token used to connect to the ServiceNow web portal. Accepts a hashtable.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Create-SNIncident -Instance `"dev12345`" -AssignGroup `"IT Support`" -AssignUser `"jsmith`" -AffectedUser `"adoe`" -Urgency 2 -Impact 2 -CMDBItem `"Laptop123`" -Catagory `"Hardware`" -ShortDescription `"Laptop not booting`" -Description `"User reports laptop fails to boot after update.`" -Credential (Get-Credential)")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Create-SNIncident -Instance `"dev12345`" -AssignGroup `"IT Support`" -AssignUser `"jsmith`" -AffectedUser `"adoe`" -Urgency 2 -Impact 2 -CMDBItem `"Laptop123`" -Catagory `"Hardware`" -ShortDescription `"Laptop not booting`" -Description `"User reports laptop fails to boot after update.`" -AuthToken @{Authorization=`"Bearer eyJ...`"}")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      Updated Advanced Help documentation.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignUser,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AffectedUser,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Urgency = `"5`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Impact = `"5`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CMDBItem,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Catagory,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ShortDescription,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Token`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Creds`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Token`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"assignment_group`"      = `$AssignGroup")
  [Void]$StringBuilder.AppendLine("    `"short_description`"     = `$ShortDescription")
  [Void]$StringBuilder.AppendLine("    `"description`"           = `$Description")
  [Void]$StringBuilder.AppendLine("    `"u_affected_end_user`"   = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("    `"urgency`"               = `$Urgency")
  [Void]$StringBuilder.AppendLine("    `"impact`"                = `$Impact")
  [Void]$StringBuilder.AppendLine("    `"sysparm_display_value`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    `"cmdb_ci`"               = `$CMDBItem")
  [Void]$StringBuilder.AppendLine("    `"u_category`"            = `$Catagory")
  [Void]$StringBuilder.AppendLine("    `"caller_id`"             = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AssignUser`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Body.Add(`"assigned_to`", `$AssignUser)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IncidentResult = Invoke-WebRequest @InvokeParams -Method POST -Uri `"https://`$(`$Instance).service-now.com/api/now/table/incident?sysparm_display_value=true`" -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    if (`$IncidentResult.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Incident = (`$IncidentResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("      [SNIncident]::New(`$Incident.sys_id, `$Incident.Number)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [SNIncident]::New()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [SNIncident]::New()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Create-SNIncident
  
  
  [Void]$StringBuilder.AppendLine("# -----------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now CMDB_CI")
  [Void]$StringBuilder.AppendLine("# -----------------------")
  
  #region ******** Class SNCMDBCI ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCI ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBCI")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCI ([Object]`$CMDBCI)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$CMDBCI.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$CMDBCI.name")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$CMDBCI.short_description")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCI ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCI ********
  
  #region ******** Class CMDBCICollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class CMDBCICollection ********")
  [Void]$StringBuilder.AppendLine("class CMDBCICollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNCMDBCI]]`$CMDBCI = [System.Collections.Generic.List[SNCMDBCI]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  CMDBCICollection ([SNCMDBCI[]]`$CMDBCI)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBCI.AddRange(`$CMDBCI)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class CMDBCICollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class CMDBCICollection ********
  
  #region function Get-SNCMDBCI
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBCI")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBCI()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now CMDB_CI Record from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now CMDB_CI Record  from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now CMDBCI to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now CMDBCI Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SysID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now CMDBCI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now CMDBCIs to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -Credential `$Credential -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -Credential `$Credential -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -Credential `$Credential -Uri `$Url")
  [Void]$StringBuilder.AppendLine("      `$SNCMDBCI = Get-SNCMDBCI -Instance `$Instance -AuthToken `$AuthToken -Uri `$Url")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [CMDBCICollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCI]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_fields`" = `"sys_id, name`"")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now CMDBCIs")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [CMDBCICollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCI]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBCI")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBCI
  
  
  [Void]$StringBuilder.AppendLine("# --------------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Hardware CMDB_CI")
  [Void]$StringBuilder.AppendLine("# --------------------------------")
  
  #region ******** Class SNCMDBCIHardware ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCIHardware ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBCIHardware")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetTag")
  [Void]$StringBuilder.AppendLine("  [String]`$Subcategory")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain")
  [Void]$StringBuilder.AppendLine("  [String]`$CostCenter")
  [Void]$StringBuilder.AppendLine("  [String]`$CostCenterSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Department")
  [Void]$StringBuilder.AppendLine("  [String]`$DepartmentSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignedToEmail")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignedTo")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignedToSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer")
  [Void]$StringBuilder.AppendLine("  [String]`$ManufacturerSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Model")
  [Void]$StringBuilder.AppendLine("  [String]`$ModelSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$LocationSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroupSysID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCIHardware ([Object]`$SNCMDBCIHardware)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$SNCMDBCIHardware.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$SNCMDBCIHardware.name")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SNCMDBCIHardware.serial_number")
  [Void]$StringBuilder.AppendLine("    `$This.AssetTag = `$SNCMDBCIHardware.asset_tag")
  [Void]$StringBuilder.AppendLine("    `$This.Subcategory = `$SNCMDBCIHardware.subcategory")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `$SNCMDBCIHardware.dns_domain")
  [Void]$StringBuilder.AppendLine("    `$This.CostCenter = `$SNCMDBCIHardware.`"cost_center.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.CostCenterSysID = `$SNCMDBCIHardware.`"cost_center.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.Department = `$SNCMDBCIHardware.`"department.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.DepartmentSysID = `$SNCMDBCIHardware.`"department.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignedToEmail = `$SNCMDBCIHardware.`"assigned_to.email`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignedTo = `$SNCMDBCIHardware.`"assigned_to.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignedToSysID = `$SNCMDBCIHardware.`"assigned_to.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$SNCMDBCIHardware.`"manufacturer.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.ManufacturerSysID = `$SNCMDBCIHardware.`"manufacturer.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$SNCMDBCIHardware.`"model_id.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.ModelSysID = `$SNCMDBCIHardware.`"model_id.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$SNCMDBCIHardware.`"location.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.LocationSysID = `$SNCMDBCIHardware.`"location.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroup = `$SNCMDBCIHardware.`"support_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroupSysID = `$SNCMDBCIHardware.`"support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroup = `$SNCMDBCIHardware.`"support_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroupSysID = `$SNCMDBCIHardware.`"support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCIHardware ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCIHardware ********
  
  #region ******** Class SNCMDBCIHardwareCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCIHardwareCollection ********")
  [Void]$StringBuilder.AppendLine("class SNCMDBCIHardwareCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNCMDBCIHardware]]`$CMDBCIHardware = [System.Collections.Generic.List[SNCMDBCIHardware]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCIHardwareCollection ([SNCMDBCIHardware[]]`$SNCMDBCIHardware)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBCIHardware.AddRange(`$SNCMDBCIHardware)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCIHardwareCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCIHardwareCollection ********
  
  #region function Get-SNCMDBCIHardware
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBCIHardware")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBCIHardware()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Hardware CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Hardware CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      Serial Number of Service Now Hardware CMDBCI to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now Hardware CMDBCI to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now Hardware CMDBCI Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SysID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now Hardware CMDBCI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now Hardware CMDBCIs to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -Credential `$Credential -Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -AuthToken `$AuthToken -Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -Credential `$Credential -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -AuthToken `$AuthToken -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -Credential `$Credential -Uri `$Url")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIHardware -Instance `$Instance -AuthToken `$AuthToken -Uri `$Url")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExact`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SerialNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SerialNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"serial_number={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"APMNumber*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"number={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -Match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNCMDBCIHardwareCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCIHardware]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"SerialNumber*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"APMNumber*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$APMNumber")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_fields`" = `"sys_id, name, serial_number, asset_tag, subcategory, dns_domain, cost_center.name, cost_center.sys_id, department.name, department.sys_id, assigned_to.email, assigned_to.name, assigned_to.sys_id, manufacturer.name, manufacturer.sys_id, model_id.name, model_id.sys_id, location.name, location.sys_id, support_group.name, support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now CMDBCIs")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci_hardware`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNCMDBCIHardwareCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCIHardware]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBCIHardware")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBCIHardware
  
  
  [Void]$StringBuilder.AppendLine("# -------------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Sofwate CMDB_CI")
  [Void]$StringBuilder.AppendLine("# -------------------------------")
  
  #region ******** Class SNCMDBCISoftware ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCISoftware ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBCISoftware")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  [String]`$Category")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroupSysID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCISoftware ([Object]`$SNCMDBCISoftware)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$SNCMDBCISoftware.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$SNCMDBCISoftware.name")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$SNCMDBCISoftware.short_description")
  [Void]$StringBuilder.AppendLine("    `$This.Category = `$SNCMDBCISoftware.category")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$SNCMDBCISoftware.`"manufacturer.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroup = `$SNCMDBCISoftware.`"support_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroupSysID = `$SNCMDBCISoftware.`"support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCISoftware ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCISoftware ********
  
  #region ******** Class SNCMDBCISoftwareCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCISoftwareCollection ********")
  [Void]$StringBuilder.AppendLine("class SNCMDBCISoftwareCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNCMDBCISoftware]]`$CMDBCISoftware = [System.Collections.Generic.List[SNCMDBCISoftware]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCISoftwareCollection ([SNCMDBCISoftware[]]`$SNCMDBCISoftware)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBCISoftware.AddRange(`$SNCMDBCISoftware)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCISoftwareCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCISoftwareCollection ********
  
  #region function Get-SNCMDBCISoftware
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBCISoftware")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBCISoftware()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now CMDBCI to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now CMDBCI Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now CMDBCI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now CMDBCIs to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -Credential `$Credential -Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -AuthToken `$AuthToken -Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -Credential `$Credential -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -AuthToken `$AuthToken -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -Credential `$Credential -Uri `$Url")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCISoftware -Instance `$Instance -AuthToken `$AuthToken -Uri `$Url")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNCMDBCISoftwareCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCISoftware]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_fields`" = `"sys_id, name, manufacturer.name, support_group.name, support_group.sys_id, category`"")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now CMDBCIs")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci_spkg`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNCMDBCISoftwareCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCISoftware]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBCISoftware")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBCISoftware
  
  
  [Void]$StringBuilder.AppendLine("# ---------------------------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Buiisness Application CMDB_CI")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------------")
  
  #region ******** Class SNCMDBCIBusinessApp ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCIBusinessApp ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBCIBusinessApp")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  [String]`$AppType")
  [Void]$StringBuilder.AppendLine("  [String]`$ArchType")
  [Void]$StringBuilder.AppendLine("  [String]`$APMNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$AppCategory")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SuportGroupSysID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCIBusinessApp ([Object]`$SNCMDBCIBusinessApp)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$SNCMDBCIBusinessApp.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$SNCMDBCIBusinessApp.name")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$SNCMDBCIBusinessApp.short_description")
  [Void]$StringBuilder.AppendLine("    `$This.AppType = `$SNCMDBCIBusinessApp.application_type")
  [Void]$StringBuilder.AppendLine("    `$This.ArchType = `$SNCMDBCIBusinessApp.architecture_type")
  [Void]$StringBuilder.AppendLine("    `$This.APMNumber = `$SNCMDBCIBusinessApp.number")
  [Void]$StringBuilder.AppendLine("    `$This.AppCategory = `$SNCMDBCIBusinessApp.`"application_category.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroup = `$SNCMDBCIBusinessApp.`"support_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SuportGroupSysID = `$SNCMDBCIBusinessApp.`"support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCIBusinessApp ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCIBusinessApp ********
  
  #region ******** Class SNCMDBCIBusinessAppCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBCIBusinessAppCollection ********")
  [Void]$StringBuilder.AppendLine("class SNCMDBCIBusinessAppCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNCMDBCIBusinessApp]]`$CMDBCIBusinessApp = [System.Collections.Generic.List[SNCMDBCIBusinessApp]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNCMDBCIBusinessAppCollection ([SNCMDBCIBusinessApp[]]`$CMDBCIBusinessApp)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBCIBusinessApp.AddRange(`$CMDBCIBusinessApp)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBCIBusinessAppCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBCIBusinessAppCollection ********
  
  #region function Get-SNCMDBCIBusinessApp
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBCIBusinessApp")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBCIBusinessApp()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment CMDBCI from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now CMDBCI to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now CMDBCI Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now CMDBCI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now CMDBCIs to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -APMNumber `$APMNumber")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -APMNumber `$APMNumber")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -Credential `$Credential -Uri `$Url")
  [Void]$StringBuilder.AppendLine("      `$CMDBCIs = Get-SNCMDBCIBusinessApp -Instance `$Instance -AuthToken `$AuthToken -Uri `$Url")
  [Void]$StringBuilder.AppendLine("     .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"APMNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"APMNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$APMNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"APMNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"APMNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"APMNumber*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"number={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNCMDBCIBusinessAppCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCIBusinessApp]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"APMNumber*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$APMNumber")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_fields`" = `"sys_id, name, application_category.name, support_group.name, support_group.sys_id, category, number, short_description, architecture_type, application_type`"")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now CMDBCIs")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci_business_app`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$CMDBResult.StatusCode -eq 200) -and (`$CMDBResult.Headers[`"X-Total-Count`"] -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNCMDBCIBusinessAppCollection]::New(((`$CMDBResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBCIBusinessApp]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$CMDBResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$CMDBResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$CMDBResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBCIBusinessApp")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBCIBusinessApp
  
  
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Departments")
  [Void]$StringBuilder.AppendLine("# ---------------------------")
  
  #region ******** Class SNDepartment ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNDepartment ********")
  [Void]$StringBuilder.AppendLine("Class SNDepartment")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNDepartment ([Object]`$Department)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$Department.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Department.name")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$Department.description")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNDepartment ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNDepartment ********
  
  #region ******** Class SNDepartmentCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNDepartmentCollection ********")
  [Void]$StringBuilder.AppendLine("class SNDepartmentCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNDepartment]]`$Department = [System.Collections.Generic.List[SNDepartment]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNDepartmentCollection ([SNDepartment[]]`$Department)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Department.AddRange(`$Department)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNDepartmentCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNDepartmentCollection ********
  
  #region function Get-SNDepartment
  [Void]$StringBuilder.AppendLine("#region function Get-SNDepartment")
  [Void]$StringBuilder.AppendLine("function Get-SNDepartment()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Department from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Department from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now Department to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now Department Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SysID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now Department")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now Departments to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -Credential `$Credential -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -Credential `$Credential -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -Credential `$Credential -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("      `$Departments = Get-SNDepartment -Instance `$Instance -AuthToken `$AuthToken -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$DepartmentResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$DepartmentResult.StatusCode -eq 200) -and (`$DepartmentResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNDepartmentCollection]::New(((`$DepartmentResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNDepartment]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$DepartmentResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$DepartmentResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now Departments")
  [Void]$StringBuilder.AppendLine("        `$DepartmentResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmn_department`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$DepartmentResult.StatusCode -eq 200) -and (`$DepartmentResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNDepartmentCollection]::New(((`$DepartmentResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNDepartment]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$DepartmentResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$DepartmentResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$DepartmentResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNDepartment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNDepartment
  
  
  [Void]$StringBuilder.AppendLine("# -------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Locations")
  [Void]$StringBuilder.AppendLine("# -------------------------")
  
  #region ******** Class SNLocation ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNLocation ********")
  [Void]$StringBuilder.AppendLine("Class SNLocation")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$State")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNLocation ([Object]`$Location)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$Location.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Location.name")
  [Void]$StringBuilder.AppendLine("    `$this.State = `$Location.state")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$Location.description")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNLocation ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNLocation ********
  
  #region ******** Class SNLocationCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNLocationCollection ********")
  [Void]$StringBuilder.AppendLine("class SNLocationCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNLocation]]`$Location = [System.Collections.Generic.List[SNLocation]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNLocationCollection ([SNLocation[]]`$Location)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Location.AddRange(`$Location)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process { `$PSItem -replace `"[<>]`" }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNLocationCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNLocationCollection ********
  
  #region function Get-SNLocation
  [Void]$StringBuilder.AppendLine("#region function Get-SNLocation")
  [Void]$StringBuilder.AppendLine("function Get-SNLocation()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Location from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Location from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Service Now Location to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now Location to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now Location Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now Location")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now Locations to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -Credential `$Credential -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -Credential `$Credential -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -AuthToken `$AuthToken -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -Credential `$Credential -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-SNLocation -Instance `$Instance -AuthToken `$AuthToken -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$State,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}{1}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}{1}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}{1}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}{1}`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Add State Serach Parameter")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StateQuery = `"^state=`$(`$State)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StateQuery = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$LocationResult = Invoke-WebRequest -ContentType `"application/json`" -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$LocationResult.StatusCode -eq 200) -and (`$LocationResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNLocationCollection]::New(((`$LocationResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNLocation]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$LocationResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$LocationResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item, `$StateQuery)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now Locations")
  [Void]$StringBuilder.AppendLine("        `$LocationResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmn_location`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$LocationResult.StatusCode -eq 200) -and (`$LocationResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNLocationCollection]::New(((`$LocationResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNLocation]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$LocationResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$LocationResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$LocationResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNLocation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNLocation
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Groups")
  [Void]$StringBuilder.AppendLine("# ----------------------")
  
  #region ******** Class SNGroup ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("Class SNGroup")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  [String]`$ParentSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$ParentName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrEMail")
  [Void]$StringBuilder.AppendLine("  SNGroup ([Object]`$Group)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Group.`"group.sys_id`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.SysID = `$Group.sys_id")
  [Void]$StringBuilder.AppendLine("      `$This.Name = `$Group.name")
  [Void]$StringBuilder.AppendLine("      `$This.Description = `$Group.description")
  [Void]$StringBuilder.AppendLine("      `$This.ParentSysID = `$Group.`"parent.sys_id`"")
  [Void]$StringBuilder.AppendLine("      `$This.ParentName = `$Group.`"parent.name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrSysID = `$Group.`"manager.sys_id`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrName = `$Group.`"manager.name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrFirstName = `$Group.`"manager.first_name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrLastName = `$Group.`"manager.last_name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrEMail = `$Group.`"manager.email`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.SysID = `$Group.`"group.sys_id`"")
  [Void]$StringBuilder.AppendLine("      `$This.Name = `$Group.`"group.name`"")
  [Void]$StringBuilder.AppendLine("      `$This.Description = `$Group.`"group.description`"")
  [Void]$StringBuilder.AppendLine("      `$This.ParentSysID = `$Group.`"group.parent.sys_id`"")
  [Void]$StringBuilder.AppendLine("      `$This.ParentName = `$Group.`"group.parent.name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrSysID = `$Group.`"group.manager.sys_id`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrName = `$Group.`"group.manager.name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrFirstName = `$Group.`"group.manager.first_name `"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrLastName = `$Group.`"group.manager.last_name`"")
  [Void]$StringBuilder.AppendLine("      `$This.MgrEMail = `$Group.`"group.manager.email`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNGroup ********
  
  #region ******** Class SNGroupCollection ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNGroupCollection ********")
  [Void]$StringBuilder.AppendLine("class SNGroupCollection")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNGroup]]`$Group = [System.Collections.Generic.List[SNGroup]]::New()")
  [Void]$StringBuilder.AppendLine("  [String]`$First = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Prev = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Next = `$Null")
  [Void]$StringBuilder.AppendLine("  [String]`$Last = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNGroupCollection ([SNGroup[]]`$Group)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Group.AddRange(`$Group)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddLinks ([String]`$Links)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpArray = `$Links -split `",`" | ForEach-Object -Process {")
  [Void]$StringBuilder.AppendLine("      `$PSItem -replace `"[<>]`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    foreach (`$TmpItem in `$TmpArray)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpLink = `$TmpItem -split `";`"")
  [Void]$StringBuilder.AppendLine("      `$This.`"`$(`$TmpLink[1] -replace 'rel=`"|`"')`" = `$TmpLink[0]")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNGroupCollection ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNGroupCollection ********
  
  #region function Get-SNGroup
  [Void]$StringBuilder.AppendLine("#region function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("function Get-SNGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Service Now Group to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Service Now Group Name search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Contains")
  [Void]$StringBuilder.AppendLine("      Search Option, Name Contains Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StartsWith")
  [Void]$StringBuilder.AppendLine("      Search Option, Name StartsWith Search Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Sys_ID of Service Now Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("      Number of Service Now Groups to Return when Searching")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Uri")
  [Void]$StringBuilder.AppendLine("      URL of for Returning Additional Search Values")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -Credential `$Credential -Name `$Name")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -AuthToken `$AuthToken -Name `$Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -Credential `$Credential -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -Contains")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -Credential `$Credential -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -AuthToken `$AuthToken -Search `$Search -StartsWith")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -Credential `$Credential -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance v -SysID `$SysID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -Credential `$Credential -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("      `$Groups = Get-SNGroup -Instance `$Instance -AuthToken `$AuthToken -Uri `$Uri")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Contains,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StartsWith,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NameStartv`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Count = 25,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Uri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameExactToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameContainsToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NameStartToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PrevNextToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"sys_id={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"name={0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameContains*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameLIKE{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"NameStart*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SysparmQuery = `"nameSTARTSWITH{0}^active=true`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Check if Getting Next / Previous group from Search")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -match `"PrevNext`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Fet Next Batch from Search")
  [Void]$StringBuilder.AppendLine("      `$GroupResult = Invoke-WebRequest @InvokeParams -uri `$Uri")
  [Void]$StringBuilder.AppendLine("      if ((`$GroupResult.StatusCode -eq 200) -and (`$GroupResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNGroupCollection]::New(((`$GroupResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("        if (-not [String]::IsNullOrEmpty(`$GroupResult.Headers.Link))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData.AddLinks(`$GroupResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("       ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `"NameExact*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"Name*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$Search")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `"SysID*`"")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"sysparm_query`" = (`$SysparmQuery -f `$Item)")
  [Void]$StringBuilder.AppendLine("          `"sysparm_limit`" = `$Count")
  [Void]$StringBuilder.AppendLine("          `"sysparm_fields`" = `"sys_id, name, description, parent.sys_id, parent.name, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Get Service Now User Groups")
  [Void]$StringBuilder.AppendLine("        `$GroupResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_group`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("        if ((`$GroupResult.StatusCode -eq 200) -and (`$GroupResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$ReturnData = [SNGroupCollection]::New(((`$GroupResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          if ((`$PSCmdlet.ParameterSetName -in (`"NameContains`", `"NameStart`")) -and (-not [String]::IsNullOrEmpty(`$GroupResult.Headers.Link)))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddLinks(`$GroupResult.Headers.Link)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$GroupResult = `$Null")
  [Void]$StringBuilder.AppendLine("        ,`$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNGroup
  
  
  [Void]$StringBuilder.AppendLine("# ---------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Users")
  [Void]$StringBuilder.AppendLine("# ---------------------")
  
  #region ******** Class SNUser ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("Class SNUser {")
  [Void]$StringBuilder.AppendLine("  [String]`$UserSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$UserFullName")
  [Void]$StringBuilder.AppendLine("  [String]`$UserFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$UserLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$UserUPN")
  [Void]$StringBuilder.AppendLine("  [String]`$UserUserID")
  [Void]$StringBuilder.AppendLine("  [String]`$UserUserName")
  [Void]$StringBuilder.AppendLine("  [String]`$UserEMail")
  [Void]$StringBuilder.AppendLine("  [String]`$UserEmployeeID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrFullName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrEMail")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Generic.List[SNGroup]]`$Groups = [System.Collections.Generic.List[SNGroup]]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNUser ([Object]`$User)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.UserSysID = `$User.Sys_ID")
  [Void]$StringBuilder.AppendLine("    `$This.UserFullName = `$User.name")
  [Void]$StringBuilder.AppendLine("    `$This.UserFirstName = `$User.first_name")
  [Void]$StringBuilder.AppendLine("    `$This.UserLastName = `$User.last_name")
  [Void]$StringBuilder.AppendLine("    `$This.UserUPN = `$User.u_userprincipalname")
  [Void]$StringBuilder.AppendLine("    `$This.UserUserID = `$User.u_samaccountname")
  [Void]$StringBuilder.AppendLine("    `$This.UserUserName = `$User.user_name")
  [Void]$StringBuilder.AppendLine("    `$This.UserEMail = `$User.email")
  [Void]$StringBuilder.AppendLine("    `$This.UserEmployeeID = `$User.employee_number")
  [Void]$StringBuilder.AppendLine("    `$This.MgrSysID = `$User.`"manager.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrFullName = `$User.`"manager.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrFirstName = `$User.`"manager.first_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrLastName = `$User.`"manager.last_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrEMail = `$User.`"manager.email`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddGroups ([SNGroup[]]`$Groups)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Groups.AddRange(`$Groups)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNUser ********
  
  #region function Get-SNUser
  [Void]$StringBuilder.AppendLine("#region function Get-SNUser")
  [Void]$StringBuilder.AppendLine("function Get-SNUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      UserName of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      UserID of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UPN")
  [Void]$StringBuilder.AppendLine("      UPN of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EMail")
  [Void]$StringBuilder.AppendLine("      EMail of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EmployeeID")
  [Void]$StringBuilder.AppendLine("      EmployeeID of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      SYS_ID of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Groups")
  [Void]$StringBuilder.AppendLine("      Also Return Groups User is a Member Of")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UserName `$UserName -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UserName `$UserName -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UPN `$UPN -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UPN `$UPN -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -EMail `$EMail -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -EMail `$EMail -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = `$EMail | Get-SNUser -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = `$EMail | Get-SNUser -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UserID `$UserID -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -UserID `$UserID -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -EmployeeID `$EmployeeID -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -EmployeeID `$EmployeeID -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -SysID `$SysID -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNUser = Get-SNUser -SysID `$SysID -AuthToken `$AuthToken -Instance `$Instance -Groups")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserIDCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPNCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPNToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UPN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"EMailCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"EMailToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EMail,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EmployeeID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPNCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EMailCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPNToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EMailToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Groups")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UPN*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserName*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"user_name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_samaccountname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"email`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"employee_number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID*`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UPN*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UPN")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserName*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserName")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EMail")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EmployeeID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID*`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`" = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_userprincipalname, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      `$UserResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$UserResult.StatusCode -eq 200) -and (`$UserResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNUser]::New(`$User)")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        # Get User groups?")
  [Void]$StringBuilder.AppendLine("        if (`$Groups.IsPresent)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = @{")
  [Void]$StringBuilder.AppendLine("            `"user.sys_id`" = `"`$(`$User.sys_id)`"")
  [Void]$StringBuilder.AppendLine("            `"sysparm_fields`" = `"group.sys_id, group.name, group.description, group.parent.sys_id, group.parent.name, group.manager.sys_id, group.manager.name, group.manager.first_name, group.manager.last_name, group.manager.email`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          # get User Groups")
  [Void]$StringBuilder.AppendLine("          `$MemberResult = Invoke-WebRequest @InvokeParams -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_grmember`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("          if ((`$MemberResult.StatusCode -eq 200) -and (`$MemberResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$ReturnData.AddGroups(((`$MemberResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New(`$PSItem) }))")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MemberResult = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNUser
  
  
  [Void]$StringBuilder.AppendLine("# ---------------------------------")
  [Void]$StringBuilder.AppendLine("# Get Service Now Asset / CI Record")
  [Void]$StringBuilder.AppendLine("# ---------------------------------")
  
  #region ******** Class SNAsset ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("Class SNAsset")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetID")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDBID")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  [String]`$DomainName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetTag")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$DeviceRole")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer")
  [Void]$StringBuilder.AppendLine("  [String]`$Model")
  [Void]$StringBuilder.AppendLine("  [String]`$Department")
  [Void]$StringBuilder.AppendLine("  [String]`$CostCenter")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$LocationID")
  [Void]$StringBuilder.AppendLine("  [String]`$State")
  [Void]$StringBuilder.AppendLine("  [String]`$Region")
  [Void]$StringBuilder.AppendLine("  [String]`$Room")
  [Void]$StringBuilder.AppendLine("  [String]`$Floor")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroupID")
  [Void]$StringBuilder.AppendLine("  [String]`$OS")
  [Void]$StringBuilder.AppendLine("  [String]`$OSVersion")
  [Void]$StringBuilder.AppendLine("  [Bool]`$CriticalEndpoint")
  [Void]$StringBuilder.AppendLine("  [SNUser]`$User")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNAsset ([Object]`$Comp)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.AssetID = `$Comp.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBID = `$Comp.`"ci.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$Comp.`"ci.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.DomainName = `$Comp.`"ci.dns_domain`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssetTag = `$Comp.asset_tag")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$Comp.serial_number")
  [Void]$StringBuilder.AppendLine("    `$This.DeviceRole = `$Comp.u_device_role")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Comp.`"model.manufacturer.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Comp.`"model.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.Department = `$Comp.`"department.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.CostCenter = `$Comp.`"department.id`"")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$Comp.`"location.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.LocationID = `$Comp.`"location.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.State = `$Comp.`"location.state`"")
  [Void]$StringBuilder.AppendLine("    `$This.Region = `$Comp.`"location.u_region.u_description`"")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Comp.u_room))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.Room = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.Room = `$Comp.u_room")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Comp.u_floor))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.Floor = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.Floor = `$Comp.u_floor")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.SGroup = `$Comp.`"support_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.SGroupID = `$Comp.`"support_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.OS = `$Comp.`"ci.os`"")
  [Void]$StringBuilder.AppendLine("    `$This.OSVersion = `$Comp.`"ci.os_version`"")
  [Void]$StringBuilder.AppendLine("    `$This.CriticalEndpoint = (`$Comp.`"ci.u_critical_endpoint`" -eq `"true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [void] AddUser ([Object]`$User)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.User = [SNUser]::New(`$User)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNAsset ********
  
  #region function Get-SNAsset
  [Void]$StringBuilder.AppendLine("#region function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("Function Get-SNAsset()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Default Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Default Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computername")
  [Void]$StringBuilder.AppendLine("      Name of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetTag")
  [Void]$StringBuilder.AppendLine("      Asset tag of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      Serial Number of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      SYS_ID of the Computer Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Get Assigned User")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -ComputerName `$ComputerName -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -ComputerName `$ComputerName -AuthToken `$AuthToken -Instance `$Instance -User")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -AssetTag `$AssetTag`" -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -AssetTag `$AssetTag`" -AuthToken `$AuthToken -Instance `$Instance -User")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -serialNumber `$SerialNumber -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = Get-SNAsset -serialNumber `$SerialNumber -AuthToken `$AuthToken -Instance `$Instance -user")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = `$ComputerName | Get-SNAsset -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("      `$SNAsset = `$ComputerName | Get-SNAsset -AuthToken `$AuthToken -Instance `$Instance -User")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ComputerNameCreds`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerNameCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerNameToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTagCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTagToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$AssetTag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerNameCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTagCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SerialNumberCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerNameToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTagToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SerialNumberToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysIDToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"ci.name`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"asset_tag`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"serial_number`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"*Creds`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"*Token`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("          `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("          `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ComputerName")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$AssetTag")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ID*`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Id")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`"  = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, asset_tag, serial_number, u_device_role, u_room, u_floor, StockRoom, substatus, reserved_for, assigned_to, ci.name, ci.dns_domain, ci.sys_id, ci.os, ci.os_version, department.name, department.id, location.name, location.sys_id, location.state, location.u_region.u_description, support_group.name, model.name, model.manufacturer.name, support_group.sys_id, support_group.name, stockroom, ci.u_critical_endpoint`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # Get Computer CMDB / Asset Record Information")
  [Void]$StringBuilder.AppendLine("      `$CompResult = Invoke-WebRequest @InvokeParams -Uri `"https://`$(`$Instance).service-now.com/api/now/table/alm_hardware`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("      If ((`$CompResult.StatusCode -eq 200) -and (`$CompResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Comp = (`$CompResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNAsset]::New(`$Comp)")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        # get Assigned User")
  [Void]$StringBuilder.AppendLine("        if (`$User.IsPresent)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = @{")
  [Void]$StringBuilder.AppendLine("            `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_userprincipalname, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          If ((-not [String]::IsNullOrEmpty(`$Comp.StockRoom)) -and (`$Comp.substatus -in @(`"reserved`", `"pending_install`")))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            If (-not [String]::IsNullOrEmpty(`$Comp.reserved_for))")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Get Reserved For User")
  [Void]$StringBuilder.AppendLine("              `$UserResult = Invoke-WebRequest @InvokeParams -Uri `$Comp.reserved_for.link -Body `$Body")
  [Void]$StringBuilder.AppendLine("              If ((`$UserResult.StatusCode -eq 200) -and (`$UserResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$ReturnData.AddUser((`$UserResult.Content | ConvertFrom-Json).Result)")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            If (-not [String]::IsNullOrEmpty(`$Comp.assigned_to))")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Get Assigned To User")
  [Void]$StringBuilder.AppendLine("              `$UserResult = Invoke-WebRequest @InvokeParams -Uri `$Comp.assigned_to.link -Body `$Body")
  [Void]$StringBuilder.AppendLine("              If ((`$UserResult.StatusCode -eq 200) -and (`$UserResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$ReturnData.AddUser((`$UserResult.Content | ConvertFrom-Json).Result)")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$Computer = `$Null")
  [Void]$StringBuilder.AppendLine("        `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CompResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNAsset
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Create Service Now Computer CMDB Records")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  
  #region function New-SNComputerRecord
  [Void]$StringBuilder.AppendLine("#region function New-SNComputerRecord")
  [Void]$StringBuilder.AppendLine("function New-SNComputerRecord()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      The Serial Number of the Computer Record to Update")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The Name of the Computer to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DNSDomain")
  [Void]$StringBuilder.AppendLine("      The DNS Domain to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Support Group")
  [Void]$StringBuilder.AppendLine("      The Support Group to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OS")
  [Void]$StringBuilder.AppendLine("      The Name of the OS to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OSVerion")
  [Void]$StringBuilder.AppendLine("      The Instaled OS Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = New-SNComputerRecord -Instance `$Instance -SerialNumber `$SerialNumber -ComputerName `$ComputerName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DNSDoman,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SupportGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OSVersion,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Update computer records")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"identifier_type_serial_number`" = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `"name`"                          = `$ComputerName")
  [Void]$StringBuilder.AppendLine("    `"dns_domain`"                    = `$DNSDoman")
  [Void]$StringBuilder.AppendLine("    `"support_group`"                 = `$SupportGroup")
  [Void]$StringBuilder.AppendLine("    `"os`"                            = `$OS")
  [Void]$StringBuilder.AppendLine("    `"os_version`"                    = `$OSVersion")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now Computer CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest -UseBasicParsing -Method POST -ContentType `"application/json`" -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/endpointdeviceapi/createComputer`" -Credential `$Credential -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `$TmpStatus.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`" = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-SNComputerRecord")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-SNComputerRecord
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Create Service Now HandHeld CMDB Records")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  
  #region function New-SNHandHeldRecord
  [Void]$StringBuilder.AppendLine("#region function New-SNHandHeldRecord")
  [Void]$StringBuilder.AppendLine("function New-SNHandHeldRecord()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      The Serial Number of the HandHeld Record to Update")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HandHeldName")
  [Void]$StringBuilder.AppendLine("      The Name of the HandHeld to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DNSDomain")
  [Void]$StringBuilder.AppendLine("      The DNS Domain to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Support Group")
  [Void]$StringBuilder.AppendLine("      The Support Group to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OS")
  [Void]$StringBuilder.AppendLine("      The Name of the OS to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OSVerion")
  [Void]$StringBuilder.AppendLine("      The Instaled OS Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = New-SNHandHeldRecord -Instance `$Instance -SerialNumber `$SerialNumber -HandHeldName `$HandHeldName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = New-SNHandHeldRecord -Instance `$Instance -SerialNumber `$SerialNumber -HandHeldName `$HandHeldName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$HandHeldName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DNSDoman,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SupportGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OSVersion,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$true, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$true, ParameterSetName = `"Token`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Creds`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Token`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Update HandHeld records ")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"identifier_type_serial_number`" = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `"name`"                          = `$HandHeldName")
  [Void]$StringBuilder.AppendLine("    `"dns_domain`"                    = `$DNSDoman")
  [Void]$StringBuilder.AppendLine("    `"support_group`"                 = `$SupportGroup")
  [Void]$StringBuilder.AppendLine("    `"os`"                            = `$OS")
  [Void]$StringBuilder.AppendLine("    `"os_version`"                    = `$OSVersion")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now HandHeld CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest @InvokeParams -Method POST -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/endpointdeviceapi/createHandheld`" -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `$TmpStatus.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`" = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-SNHandHeldRecord")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-SNHandHeldRecord
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Update Service Now Computer CMDB Records")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  
  #region function New-SNComputerRecord
  [Void]$StringBuilder.AppendLine("#region function New-SNComputerRecord")
  [Void]$StringBuilder.AppendLine("function New-SNComputerRecord()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      The Serial Number of the Computer Record to Update")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      The Name of the Computer to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DNSDomain")
  [Void]$StringBuilder.AppendLine("      The DNS Domain to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Support Group")
  [Void]$StringBuilder.AppendLine("      The Support Group to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OS")
  [Void]$StringBuilder.AppendLine("      The Name of the OS to Assign the the Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OSVerion")
  [Void]$StringBuilder.AppendLine("      The Instaled OS Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = New-SNComputerRecord -Instance `$Instance -SerialNumber `$SerialNumber -ComputerName `$ComputerName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = New-SNComputerRecord -Instance `$Instance -SerialNumber `$SerialNumber -ComputerName `$ComputerName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DNSDoman,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SupportGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OSVersion,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Token`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Creds`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Token`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Update computer records ")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"identifier_type_serial_number`" = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `"name`"                          = `$ComputerName")
  [Void]$StringBuilder.AppendLine("    `"dns_domain`"                    = `$DNSDoman")
  [Void]$StringBuilder.AppendLine("    `"support_group`"                 = `$SupportGroup")
  [Void]$StringBuilder.AppendLine("    `"os`"                            = `$OS")
  [Void]$StringBuilder.AppendLine("    `"os_version`"                    = `$OSVersion")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now Computer CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest @InvokeParams -Method POST -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/endpointdeviceapi/createComputer`" -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `$TmpStatus.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`" = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-SNComputerRecord")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-SNComputerRecord
  
  
  [Void]$StringBuilder.AppendLine("# -----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Update Service Now Computer Asset Records")
  [Void]$StringBuilder.AppendLine("# -----------------------------------------")
  
  #region function Update-SNAssetRecord
  [Void]$StringBuilder.AppendLine("#region function Update-SNAssetRecord")
  [Void]$StringBuilder.AppendLine("function Update-SNAssetRecord()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      The Serial Number of the Computer Record to Update")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceType")
  [Void]$StringBuilder.AppendLine("      Devive Type to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReviceRole")
  [Void]$StringBuilder.AppendLine("      Device Role to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignTo")
  [Void]$StringBuilder.AppendLine("      User to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Location to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Floor")
  [Void]$StringBuilder.AppendLine("      Flor to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Room")
  [Void]$StringBuilder.AppendLine("      Room to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Department")
  [Void]$StringBuilder.AppendLine("      Department to Assign to the Computer Asset")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNAssetRecord -Instance `$Instance -SerialNumber `$SerialNumber -DeviceType `$DeviceType -DeviceRole `$DeviceRole -AssignTo `$AssignTo -Location `$Location -Floor `$Floor -Room `$Room -Department `$Depoartment -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DeviceType,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DeviceRole,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignTo,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Floor,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Room,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Department,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Update computer records")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"identifier_type_serial_number`" = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `"u_device_type`"                 = `$DeviceType")
  [Void]$StringBuilder.AppendLine("    `"u_device_role`"                 = `$DeviceRole")
  [Void]$StringBuilder.AppendLine("    `"install_status`"                = `"1`"")
  [Void]$StringBuilder.AppendLine("    `"assigned_to`"                   = `$AssignTo")
  [Void]$StringBuilder.AppendLine("    `"location`"                      = `$Location")
  [Void]$StringBuilder.AppendLine("    `"u_floor`"                       = `$Floor")
  [Void]$StringBuilder.AppendLine("    `"u_room`"                        = `$Room")
  [Void]$StringBuilder.AppendLine("    `"department`"                    = `$Department")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now Computer Asset Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest -UseBasicParsing -Method POST -ContentType `"application/json`" -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/endpointdeviceapi/updateAlmHardware`" -Credential `$Credential -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `$TmpStatus.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`" = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-SNAssetRecord")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-SNAssetRecord
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Update Service Now HandHeld CMDB Records")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  
  #region function Update-SNHandHeldRecord
  [Void]$StringBuilder.AppendLine("#region function Update-SNHandHeldRecord")
  [Void]$StringBuilder.AppendLine("function Update-SNHandHeldRecord()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      The Serial Number of the HandHeld Record to Update")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HandHeldName")
  [Void]$StringBuilder.AppendLine("      The Name of the HandHeld to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DNSDomain")
  [Void]$StringBuilder.AppendLine("      The DNS Domain to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Support Group")
  [Void]$StringBuilder.AppendLine("      The Support Group to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OS")
  [Void]$StringBuilder.AppendLine("      The Name of the OS to Assign the the HandHeld Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OSVerion")
  [Void]$StringBuilder.AppendLine("      The Instaled OS Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNHandHeldRecord -Instance `$Instance -SerialNumber `$SerialNumber -HandHeldName `$HandHeldName -DNSDoman `$Domain -SupportGroup `$SupportGroup -OS `$OpSys -OSVersion `$Version -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # `$Status.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$HandHeldName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DNSDoman,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SupportGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$OSVersion,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Update HandHeld records")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"identifier_type_serial_number`" = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `"name`"                          = `$HandHeldName")
  [Void]$StringBuilder.AppendLine("    `"dns_domain`"                    = `$DNSDoman")
  [Void]$StringBuilder.AppendLine("    `"support_group`"                 = `$SupportGroup")
  [Void]$StringBuilder.AppendLine("    `"os`"                            = `$OS")
  [Void]$StringBuilder.AppendLine("    `"os_version`"                    = `$OSVersion")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now HandHeld CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest -UseBasicParsing -Method POST -ContentType `"application/json`" -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/endpointdeviceapi/updateHandheld`" -Credential `$Credential -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `$TmpStatus.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`" = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"  = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-SNHandHeldRecord")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-SNHandHeldRecord
  
  
  [Void]$StringBuilder.AppendLine("# -------------------------------------")
  [Void]$StringBuilder.AppendLine("# Get Existing Service Now Change Order")
  [Void]$StringBuilder.AppendLine("# -------------------------------------")
  
  #region ******** Class SNChangeOrder ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNChangeOrder ********")
  [Void]$StringBuilder.AppendLine("Class SNChangeOrder {")
  [Void]$StringBuilder.AppendLine("  [String]`$SysID")
  [Void]$StringBuilder.AppendLine("  [String]`$State")
  [Void]$StringBuilder.AppendLine("  [String]`$ChangeNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$ShortDescription")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  [String]`$Category")
  [Void]$StringBuilder.AppendLine("  [String]`$Impact")
  [Void]$StringBuilder.AppendLine("  [String]`$Priority")
  [Void]$StringBuilder.AppendLine("  [String]`$Region")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$LocationSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$CloseCode")
  [Void]$StringBuilder.AppendLine("  [String]`$CloseNote")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$PlanStart")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$PlanEnd")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$WorkStart")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$WorkEnd")
  [Void]$StringBuilder.AppendLine("  [String]`$CIType")
  [Void]$StringBuilder.AppendLine("  [String]`$CISysID")
  [Void]$StringBuilder.AppendLine("  [String]`$CIName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignGroupSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignFullName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignUPN")
  [Void]$StringBuilder.AppendLine("  [String]`$AssignEMail")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrFullName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrEMail")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrUPN")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectSysID")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectFullName")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectFirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectLastName")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectEMail")
  [Void]$StringBuilder.AppendLine("  [String]`$DirectUPN")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNChangeOrder ([Object]`$ChangeOrder)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SysID = `$ChangeOrder.sys_id")
  [Void]$StringBuilder.AppendLine("    `$This.State = `$ChangeOrder.state")
  [Void]$StringBuilder.AppendLine("    `$This.ChangeNumber = `$ChangeOrder.number")
  [Void]$StringBuilder.AppendLine("    `$This.ShortDescription = `$ChangeOrder.short_description")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$ChangeOrder.description")
  [Void]$StringBuilder.AppendLine("    `$This.Category = `$ChangeOrder.`"u_category.u_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.Priority = `$ChangeOrder.priority")
  [Void]$StringBuilder.AppendLine("    `$This.Impact = `$ChangeOrder.impact")
  [Void]$StringBuilder.AppendLine("    `$This.Region = `$ChangeOrder.u_choice_region")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$ChangeOrder.`"location.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.LocationSysID = `$ChangeOrder.`"location.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.CloseCode = `$ChangeOrder.close_code")
  [Void]$StringBuilder.AppendLine("    `$This.CloseNote = `$ChangeOrder.close_notes")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$ChangeOrder.end_date))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$This.PlanStart = ([DateTime]::Parse(`$ChangeOrder.start_date)).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$ChangeOrder.start_date))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$This.PlanEnd = ([DateTime]::Parse(`$ChangeOrder.end_date)).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$ChangeOrder.work_start))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$This.WorkStart = ([DateTime]::Parse(`$ChangeOrder.work_start)).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$ChangeOrder.work_end))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$This.WorkEnd = ([DateTime]::Parse(`$ChangeOrder.work_end)).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$this.CIType = `$ChangeOrder.u_ci_type")
  [Void]$StringBuilder.AppendLine("    `$This.CISysID = `$ChangeOrder.`"cmdb_ci.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.CIName = `$ChangeOrder.`"cmdb_ci.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignGroup = `$ChangeOrder.`"assignment_group.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignGroupSysID = `$ChangeOrder.`"assignment_group.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignSysID = `$ChangeOrder.`"assigned_to.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignFullName = `$ChangeOrder.`"assigned_to.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignFirstName = `$ChangeOrder.`"assigned_to.first_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignLastName = `$ChangeOrder.`"assigned_to.last_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignUPN = `$ChangeOrder.`"assigned_to.u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("    `$This.AssignEMail = `$ChangeOrder.`"assigned_to.email`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrSysID = `$ChangeOrder.`"u_approving_manager.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrFullName = `$ChangeOrder.`"u_approving_manager.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrFirstName = `$ChangeOrder.`"u_approving_manager.first_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrLastName = `$ChangeOrder.`"u_approving_manager.last_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrUPN = `$ChangeOrder.`"u_approving_manager.u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("    `$This.MgrEMail = `$ChangeOrder.`"u_approving_manager.email`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectSysID = `$ChangeOrder.`"u_approving_director.sys_id`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectFullName = `$ChangeOrder.`"u_approving_director.name`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectFirstName = `$ChangeOrder.`"u_approving_director.first_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectLastName = `$ChangeOrder.`"u_approving_director.last_name`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectUPN = `$ChangeOrder.`"u_approving_director.u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("    `$This.DirectEMail = `$ChangeOrder.`"u_approving_director.email`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNChangeOrder ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNChangeOrder ********
  
  #region function Get-SNChangeOrder
  [Void]$StringBuilder.AppendLine("#region function Get-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("function Get-SNChangeOrder()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Service Now User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Service Now User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ChangeNumber")
  [Void]$StringBuilder.AppendLine("      The Change Order Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SysID")
  [Void]$StringBuilder.AppendLine("      SYS_ID of User to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Groups")
  [Void]$StringBuilder.AppendLine("      Also Return Groups User is a Member Of")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNChangeOrder = Get-SNChangeOrder -ChangeNumber `$ChangeNumber -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SNChangeOrder = Get-SNChangeOrder -SysID `$SysID -Credential `$Credential -Instance `$Instance")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ChangeNumber`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ChangeNumber`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ChangeNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SysID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Service Now SysPrem Query")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ChangeNumber`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`" {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ChangeNumber`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`" {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$SysID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`"  = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, state, number, short_description, description, u_category.u_name, priority, impact, u_choice_region, location.name, location.sys_id, close_code, close_notes, start_date, end_date, work_start, work_end, u_ci_type, cmdb_ci.sys_id, cmdb_ci.name, assignment_group.name, assignment_group.sys_id, assigned_to.sys_id, assigned_to.name, assigned_to.first_name, assigned_to.last_name, assigned_to.u_userprincipalname, assigned_to.email, u_approving_manager.sys_id, u_approving_manager.name, u_approving_manager.first_name, u_approving_manager.last_name, u_approving_manager.u_userprincipalname, u_approving_manager.email, u_approving_director.sys_id, u_approving_director.name, u_approving_director.first_name, u_approving_director.last_name, u_approving_director.u_userprincipalname, u_approving_director.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$COResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/change_request`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$COResult.StatusCode -eq 200) -and (`$COResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$CO = (`$COResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNChangeOrder]::New(`$CO)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$COResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand) Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNChangeOrder
  
  
  [Void]$StringBuilder.AppendLine("# -----------------------------------")
  [Void]$StringBuilder.AppendLine("# Create New Service Now Change Order")
  [Void]$StringBuilder.AppendLine("# -----------------------------------")
  
  #region function Create-SNChangeOrder
  [Void]$StringBuilder.AppendLine("#region function Create-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("function Create-SNChangeOrder()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates A Service Now Change Order")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates A Service Now Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Region")
  [Void]$StringBuilder.AppendLine("      Region the Change Order is For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Region the Location is For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Impact")
  [Void]$StringBuilder.AppendLine("      The Implact Level of the Chanage Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Priority")
  [Void]$StringBuilder.AppendLine("      The Priority Level for the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignmentGroup")
  [Void]$StringBuilder.AppendLine("      The group to Assign the Change order To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ChangeTemplate")
  [Void]$StringBuilder.AppendLine("      The Change Template to use for the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Create-SNChangeOrder -Instance `$Instance -Impact `$Impact -Priority `$Priority -Region `$Region -AssignmentGroup `$AssignmentGroup -ChangeTemplate `$ChangeTemplate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Create-SNChangeOrder -Instance `$Instance -Impact `$Impact -Priority `$Priority -Region `$Region -AssignmentGroup `$AssignmentGroup -ChangeTemplate `$ChangeTemplate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Create-SNChangeOrder -Instance `$Instance -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignmentGroup `$AssignmentGroup -ChangeTemplate `$ChangeTemplate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Create-SNChangeOrder -Instance `$Instance -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignmentGroup `$AssignmentGroup -ChangeTemplate `$ChangeTemplate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"EnterpriseCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Enterprise`", `"South`", `"North`", `"East`", `"West`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Region,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RegionCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RegionToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 5)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Impact,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 5)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Priority,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignmentGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ChangeTemplate,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EnterpriseCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RegionCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EnterpriseToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RegionToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Enterprise`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"region`"          = `$Region")
  [Void]$StringBuilder.AppendLine("      `"impact`"          = `$Impact")
  [Void]$StringBuilder.AppendLine("      `"priority`"        = `$Priority")
  [Void]$StringBuilder.AppendLine("      `"assignmentgroup`" = `$AssignmentGroup")
  [Void]$StringBuilder.AppendLine("      `"changetemplate`"  = `$ChangeTemplate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"region`"          = `$Region")
  [Void]$StringBuilder.AppendLine("      `"location`"        = `$Location")
  [Void]$StringBuilder.AppendLine("      `"impact`"          = `$Impact")
  [Void]$StringBuilder.AppendLine("      `"priority`"        = `$Priority")
  [Void]$StringBuilder.AppendLine("      `"assignmentgroup`" = `$AssignmentGroup")
  [Void]$StringBuilder.AppendLine("      `"changetemplate`"  = `$ChangeTemplate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"*Creds`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"*Token`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now Computer CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest @InvokeParams -Method POST -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/standard_change_api/createstandardchange`" -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`"      = `$True")
  [Void]$StringBuilder.AppendLine("        `"ChangeNumber`" = `$TmpStatus.change_request_details.Number")
  [Void]$StringBuilder.AppendLine("        `"Message`"      = `$TmpStatus.change_request_details.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"       = `$TmpStatus.change_request_details.sys_id")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`"      = `$False")
  [Void]$StringBuilder.AppendLine("        `"ChangeNumber`" = `"`"")
  [Void]$StringBuilder.AppendLine("        `"Message`"      = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"Sys_ID`"       = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`"      = `$False")
  [Void]$StringBuilder.AppendLine("      `"ChangeNumber`" = `"`"")
  [Void]$StringBuilder.AppendLine("      `"Message`"      = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"Sys_ID`"       = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Create-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Create-SNChangeOrder
  
  
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  [Void]$StringBuilder.AppendLine("# Update Existing Service Now Change Order")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------")
  
  #region function Update-SNChangeOrder
  [Void]$StringBuilder.AppendLine("#region function Update-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("function Update-SNChangeOrder()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Update the Service Now Computer Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ChangeNumber")
  [Void]$StringBuilder.AppendLine("      The Change Order Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Category")
  [Void]$StringBuilder.AppendLine("      The Category of the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConfigurationItem")
  [Void]$StringBuilder.AppendLine("      The Configuration Item affected by the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Region")
  [Void]$StringBuilder.AppendLine("      Region the Change Order is For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Region the Location is For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Impact")
  [Void]$StringBuilder.AppendLine("      The Implact Level of the Chanage Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Priority")
  [Void]$StringBuilder.AppendLine("      The Priority Level for the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignmentGroup")
  [Void]$StringBuilder.AppendLine("      The group to Assign the Change order To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignedTo")
  [Void]$StringBuilder.AppendLine("      The user to Assign the Change Order To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ApprovingManager")
  [Void]$StringBuilder.AppendLine("      The manager Approving the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PlannedStartDate")
  [Void]$StringBuilder.AppendLine("      The Planed Start Date")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PlannedEndDate")
  [Void]$StringBuilder.AppendLine("      The Planed End Date")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ActualEndDate")
  [Void]$StringBuilder.AppendLine("      The Planed End Date of the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClosecCode")
  [Void]$StringBuilder.AppendLine("      The Closed Status of the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CloseNotes")
  [Void]$StringBuilder.AppendLine("      The Close Notes for the the Change Order")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scheduled")
  [Void]$StringBuilder.AppendLine("      Switch to Uniquely Identify the Sceduled ParamaterSet")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Implement")
  [Void]$StringBuilder.AppendLine("      Switch to Uniquely Identify the Implement ParamaterSet")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Review")
  [Void]$StringBuilder.AppendLine("      Switch to Uniquely Identify the Review ParamaterSet")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Closed")
  [Void]$StringBuilder.AppendLine("      Switch to Uniquely Identify the Closed ParamaterSet")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Canceled")
  [Void]$StringBuilder.AppendLine("      Switch to Uniquely Identify the Canceled ParamaterSet")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      AuthToken to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Scheduled")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Scheduled -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -AssignmentGroup `$AssignmentGroup -ConfigurationItem `$ConfigurationItem -ApprovingManager `$ApprovingManager -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Scheduled -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -AssignmentGroup `$AssignmentGroup -ConfigurationItem `$ConfigurationItem -ApprovingManager `$ApprovingManager -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Scheduled")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Scheduled -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignmentGroup `$AssignmentGroup -ConfigurationItem `$ConfigurationItem -ApprovingManager `$ApprovingManager -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Scheduled -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignmentGroup `$AssignmentGroup -ConfigurationItem `$ConfigurationItem -ApprovingManager `$ApprovingManager -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Implment")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Implement -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Implement -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Implment")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Implement -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Implement -Category `$Category -Impact `$Impact -Priority `$Priority -Region `$Region -Location `$Location -AssignedTo `$AssignedTo -PlannedStartDate `$PlannedStartDate -PlannedEndDate `$PlannedEndDate -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Review")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Review -ActualEndDate `$ActualEndDate -ClosecCode `$CloseCode -CloseNotes `$CloseNotes -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Review -ActualEndDate `$ActualEndDate -ClosecCode `$CloseCode -CloseNotes `$CloseNotes -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Closed")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Closed -ClosecCode `$CloseCode -CloseNotes `$CloseNotes -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Closed -ClosecCode `$CloseCode -CloseNotes `$CloseNotes -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Canceled")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Canceled -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-SNChangeOrder -Instance `$Instance -ChangeNumber `$ChangeNumber -Canceled -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ChangeNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Upgrade`", `"Unscheduled Change`", `"Uninstall`", `"Release`", `"POC`", `"Decommission`", `"Other > No Appropriate Category	Other`", `"Fix`", `"Install`", `"Move`", `"Maintain`", `"Replace`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Category,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConfigurationItem,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Enterprise`", `"South`", `"North`", `"East`", `"West`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Region,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 5)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Impact,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 5)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Priority,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignmentGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignedTo,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ApprovingManager,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateScript({ `$PSItem -gt [DateTime]::Now })]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$PlannedStartDate,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateScript({ `$PSItem -gt [DateTime]::Now })]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$PlannedEndDate,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateScript({ `$PSItem -gt [DateTime]::Now })]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$ActualEndDate,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedToken`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Successful`", `"Successful with issues`", `"Unsuccessful`", `"Canceled`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClosecCode,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Closedv`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$CloseNotes,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Scheduled,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Implement,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Review,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Closed,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CanceledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CanceledToken`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Canceled,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedCreds`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CanceledCreds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ScheduledToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImplementToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ReviewToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ClosedToken`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CanceledToken`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Scheduled*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      #region Scheduled Update")
  [Void]$StringBuilder.AppendLine("      if (`$PlannedEndDate -le `$PlannedStartDate)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PlannedEndDate = `$PlannedStartDate.AddHours(4)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$Region -in (`"Enterprise`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"changenumber`"      = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("          `"category`"          = `$Category")
  [Void]$StringBuilder.AppendLine("          `"configurationitem`" = `$ConfigurationItem")
  [Void]$StringBuilder.AppendLine("          `"impact`"            = `$Impact")
  [Void]$StringBuilder.AppendLine("          `"priority`"          = `$Priority")
  [Void]$StringBuilder.AppendLine("          `"region`"            = `$Region")
  [Void]$StringBuilder.AppendLine("          `"assignmentgroup`"   = `$AssignmentGroup")
  [Void]$StringBuilder.AppendLine("          `"assignedto`"        = `$AssignedTo")
  [Void]$StringBuilder.AppendLine("          `"approvingmanager`"  = `$ApprovingManager")
  [Void]$StringBuilder.AppendLine("          `"state`"             = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("          `"plannedstartdate`"  = `$PlannedStartDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("          `"plannedenddate`"    = `$PlannedEndDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"changenumber`"      = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("          `"category`"          = `$Category")
  [Void]$StringBuilder.AppendLine("          `"configurationitem`" = `$ConfigurationItem")
  [Void]$StringBuilder.AppendLine("          `"impact`"            = `$Impact")
  [Void]$StringBuilder.AppendLine("          `"priority`"          = `$Priority")
  [Void]$StringBuilder.AppendLine("          `"region`"            = `$Region")
  [Void]$StringBuilder.AppendLine("          `"location`"          = `$Location")
  [Void]$StringBuilder.AppendLine("          `"assignmentgroup`"   = `$AssignmentGroup")
  [Void]$StringBuilder.AppendLine("          `"assignedto`"        = `$AssignedTo")
  [Void]$StringBuilder.AppendLine("          `"approvingmanager`"  = `$ApprovingManager")
  [Void]$StringBuilder.AppendLine("          `"state`"             = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("          `"plannedstartdate`"  = `$PlannedStartDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("          `"plannedenddate`"    = `$PlannedEndDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      #endregion Scheduled Update")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Implement*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      #region Implement Update")
  [Void]$StringBuilder.AppendLine("      if (`$Region -in (`"Enterprise`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"changenumber`"     = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("          `"category`"         = `$Category")
  [Void]$StringBuilder.AppendLine("          `"impact`"           = `$Impact")
  [Void]$StringBuilder.AppendLine("          `"priority`"         = `$Priority")
  [Void]$StringBuilder.AppendLine("          `"region`"           = `$Region")
  [Void]$StringBuilder.AppendLine("          `"assignedto`"       = `$AssignedTo")
  [Void]$StringBuilder.AppendLine("          `"state`"            = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("          `"plannedstartdate`" = `$PlannedStartDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("          `"plannedenddate`"   = `$PlannedEndDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Body = @{")
  [Void]$StringBuilder.AppendLine("          `"ChangeNumber`"     = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("          `"category`"         = `$Category")
  [Void]$StringBuilder.AppendLine("          `"impact`"           = `$Impact")
  [Void]$StringBuilder.AppendLine("          `"priority`"         = `$Priority")
  [Void]$StringBuilder.AppendLine("          `"region`"           = `$Region")
  [Void]$StringBuilder.AppendLine("          `"location`"         = `$Location")
  [Void]$StringBuilder.AppendLine("          `"assignedto`"       = `$AssignedTo")
  [Void]$StringBuilder.AppendLine("          `"state`"            = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("          `"plannedstartdate`" = `$PlannedStartDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("          `"plannedenddate`"   = `$PlannedEndDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      #endregion Implement Update")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Review*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      #region Review Update")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"changenumber`"     = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("        `"state`"            = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("        `"actualenddate`"    = `$ActualEndDate.ToString(`"yyyy-MM-dd HH:mm:ss`")")
  [Void]$StringBuilder.AppendLine("        `"closechangetasks`" = `"yes`"")
  [Void]$StringBuilder.AppendLine("        `"closecode`"        = `$ClosecCode")
  [Void]$StringBuilder.AppendLine("        `"closenotes`"       = `$CloseNotes")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      #endregion Review Update")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Closed*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      #region Closed Update")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"changenumber`" = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("        `"state`"        = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("        `"closecode`"    = `$ClosecCode")
  [Void]$StringBuilder.AppendLine("        `"closenotes`"   = `$CloseNotes")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      #endregion Closed Update")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Canceled*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      #region Canceled Update")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"changenumber`" = `$ChangeNumber")
  [Void]$StringBuilder.AppendLine("        `"state`"        = `$PSCmdlet.ParameterSetName -replace `"Creds|Token`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      #endregion Canceled Update")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"*Creds`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Credential`"      = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"*Token`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InvokeParams = @{")
  [Void]$StringBuilder.AppendLine("        `"UseBasicParsing`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"ContentType`"     = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Header`"          = `$AuthToken")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Update Service Now Computer CMDB Record")
  [Void]$StringBuilder.AppendLine("    `$Result = Invoke-WebRequest @InvokeParams -Method PUT -Uri `"https://`$(`$Instance).service-now.com/api/prhe4/standard_change_api/updatestandardchange`" -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `$TmpStatus = (`$Result.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("    if (`$Result.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`"      = `$True")
  [Void]$StringBuilder.AppendLine("        `"Message`"      = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"ChangeNumber`" = `$TmpStatus.Number")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`"      = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"      = `$TmpStatus.Message")
  [Void]$StringBuilder.AppendLine("        `"ChangeNumber`" = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Success`"      = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`"      = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      `"ChangeNumber`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-SNChangeOrder")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-SNChangeOrder
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Service Now Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Service Now Rest API Functions ********
  
  #region ******** HTML Form Elements Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** HTML Form Elements Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function New-HTMLFieldSet
  [Void]$StringBuilder.AppendLine("#region function New-HTMLFieldSet")
  [Void]$StringBuilder.AppendLine("function New-HTMLFieldSet")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    Creates an HTML FieldSet Element.")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    Generates an HTML <fieldset> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    Specifies a unique id for the fieldset element (required).")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    Specifies the name of the fieldset element (required).")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("    Specifies one or more class names for the fieldset element.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("    Specifies that the fieldset element should be disabled.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("    Specifies the form the fieldset element belongs to.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("    Specifies an inline CSS style for the fieldset element.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    Specifies extra information about the fieldset element (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Legend")
  [Void]$StringBuilder.AppendLine("    Specifies The Legend Elements for the FieldSet.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER HTMLForm")
  [Void]$StringBuilder.AppendLine("    Specifies The HTML Form Elements that will be shown in the FieldSet.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the fieldset is clicked.")
  [Void]$StringBuilder.AppendLine("    Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the fieldset is double-clicked.")
  [Void]$StringBuilder.AppendLine("    Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the fieldset gains focus.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Focused')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the fieldset loses focus.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the mouse enters the fieldset.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the mouse leaves the fieldset.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the mouse moves over the fieldset.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the mouse is over the fieldset.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the mouse leaves the fieldset.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("    Specifies the JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("    Example: `"event.preventDefault(); alert('Context Menu');`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLFieldSet -ID `"fs1`" -Name `"fieldset1`" -Class `"main-fs`" -Disabled")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLFieldSet -ID `"fs2`" -Name `"fieldset2`" -HTMLForm `"<input type='text'>`" -Legend `"<legend>Test</legend>`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"console.log('Mouse Over')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [string]`$Legend,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$HTMLForm,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the fieldset element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<fieldset id='`$(`$ID)' name='`$(`$Name)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Append attributes based on parameters")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handlers only for EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag and add a closing tag")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`">`$(`$Legend)`$(`$HTMLForm)</fieldset>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the FieldSet element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLFieldSet")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLFieldSet
  
  #region Function New-HTMLInputButton
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputButton")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputButton")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Button Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"button`"> element with standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"btnSubmit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"submitButton`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"Click Me`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"btn btn-primary`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the input belongs to.")
  [Void]$StringBuilder.AppendLine("      Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormAction")
  [Void]$StringBuilder.AppendLine("      Specifies the URL for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"/submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormEnctype")
  [Void]$StringBuilder.AppendLine("      Specifies how form data should be encoded.")
  [Void]$StringBuilder.AppendLine("      Example: `"multipart/form-data`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormMethod")
  [Void]$StringBuilder.AppendLine("      Specifies the HTTP method for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"Post`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormNoValidate")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should not be validated when submitted.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormTarget")
  [Void]$StringBuilder.AppendLine("      Specifies where to display the response after submitting the form.")
  [Void]$StringBuilder.AppendLine("      Example: `"_blank`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Click to submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the button is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the button is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when a mouse button is pressed down on the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='red'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when a mouse button is released over the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the mouse pointer moves over the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.classList.add('hovered')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the mouse pointer moves within the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse moved!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the mouse pointer moves out of the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.classList.remove('hovered')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when a key is pressed down while the button has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"if(event.key==='Enter'){alert('Enter pressed!')}`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when a key is released while the button has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key released!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when a key is pressed and released while the button has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key pressed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the button receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border='2px solid blue'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the button loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      JavaScript to execute when the context menu is triggered on the button.")
  [Void]$StringBuilder.AppendLine("      Example: `"event.preventDefault(); alert('Context menu!')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputButton -ID `"btnSubmit`" -Name `"submitButton`" -Value `"Submit`" -Class `"btn btn-primary`" -Form `"myForm`" -OnClick `"alert('Submitted!')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputButton -ID `"btnCancel`" -Name `"cancelButton`" -Value `"Cancel`" -Disabled -Title `"Cancel the operation`" -OnMouseOver `"this.style.opacity=0.5`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Updated to support all standard button input events.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$FormAction,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"application/x-www-form-urlencoded`", `"multipart/form-data`", `"text/plain`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormEnctype,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Get`", `"Post`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormMethod,")
  [Void]$StringBuilder.AppendLine("    [switch]`$FormNoValidate,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"_blank`", `"_self`", `"_parent`", `"_top`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormTarget,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandlers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the button input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='button' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("   # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormAction`")) { [void]`$StringBuilder.Append(`" formaction='`$(`$FormAction)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormEnctype`")) { [void]`$StringBuilder.Append(`" formenctype='`$(`$FormEnctype)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormMethod`")) { [void]`$StringBuilder.Append(`" formmethod='`$(`$FormMethod)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$FormNoValidate.IsPresent) { [void]`$StringBuilder.Append(`" formnovalidate`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormTarget`")) { [void]`$StringBuilder.Append(`" formtarget='`$(`$FormTarget)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandlers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the button element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputButton")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputButton
  
  #region Function New-HTMLInputCheckBox
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputCheckBox")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputCheckBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Checkbox Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"checkbox`"> element with standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"chkAgree`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"agreeTerms`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the checkbox.")
  [Void]$StringBuilder.AppendLine("      Example: `"yes`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-check-input`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      Specifies that the checkbox should be pre-selected.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be checked before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"margin-left:10px`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Check to agree`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the checkbox is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the checkbox value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.checked)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the checkbox receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the checkbox loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value of the checkbox is input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down while the checkbox is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"if(event.key==='Enter'){alert('Enter pressed')}`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released while the checkbox is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed and released while the checkbox is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down on the checkbox.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released over the checkbox.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the checkbox area.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border='1px solid blue'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the checkbox area.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is moved within the checkbox area.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered on the checkbox.")
  [Void]$StringBuilder.AppendLine("      Example: `"event.preventDefault()`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputCheckBox -ID `"chkAgree`" -Name `"agreeTerms`" -Value `"yes`" -Checked -Class `"form-check-input`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputCheckBox -ID `"chkSubscribe`" -Name `"subscribe`" -Title `"Subscribe to newsletter`" -TabIndex 3")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputCheckBox -ID `"chkEvent`" -Name `"eventBox`" -OnClick `"alert('Clicked!')`" -OnChange `"console.log(this.checked)`" -ParameterSetName EventHandelers")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Updated to support all checkbox input events on 2024-06-10")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the checkbox input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='checkbox' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("   # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Checked.IsPresent) { [void]`$StringBuilder.Append(`" checked`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes only if using EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the checkbox input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputCheckBox")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputCheckBox
  
  #region Function New-HTMLInputColor
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputColor")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputColor")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Color Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"color`"> element with standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"colorPicker`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"favoriteColor`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the color input.")
  [Void]$StringBuilder.AppendLine("      Example: `"#ff0000`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control-color`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined color options.")
  [Void]$StringBuilder.AppendLine("      Example: `"colorList`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"#ff0000`", `"#00ff00`", `"#0000ff`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:50px`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Pick your favorite color`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 4")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the color value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Color changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the color value is being input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='white'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input gains focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input clicked')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input double-clicked')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER onmouseenter")
  [Void]$StringBuilder.AppendLine("      Specifies the script block or action to execute when the mouse pointer enters the element.")
  [Void]$StringBuilder.AppendLine("      Valid input values:")
  [Void]$StringBuilder.AppendLine("        - { Write-Host `"Mouse entered`" }")
  [Void]$StringBuilder.AppendLine("        - { `$element.Background = 'Yellow' }")
  [Void]$StringBuilder.AppendLine("    .PARAMETER onmouseleave")
  [Void]$StringBuilder.AppendLine("      Specifies the script block or action to execute when the mouse pointer leaves the element.")
  [Void]$StringBuilder.AppendLine("      Valid input values:")
  [Void]$StringBuilder.AppendLine("        - { Write-Host `"Mouse left`" }")
  [Void]$StringBuilder.AppendLine("        - { `$element.Background = 'White' }")
  [Void]$StringBuilder.AppendLine("      .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered on the checkbox.")
  [Void]$StringBuilder.AppendLine("      Example: `"event.preventDefault()`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputColor -ID `"colorPicker`" -Name `"favoriteColor`" -Value `"#00ff00`" -Class `"form-control-color`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputColor -ID `"colorPicker2`" -Name `"accentColor`" -List `"colorList`" -ListItems @(`"#ff0000`",`"#00ff00`",`"#0000ff`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputColor -ID `"colorPicker3`" -Name `"accentColor`" -OnChange `"alert('Color changed!')`" -OnInput `"console.log(this.value)`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Event handler support added by GitHub Copilot")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # create the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='color' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # add event attributes only if EventHandelers parameter set is used")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # add datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$List'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  # output the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputColor")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputColor
  
  #region Function New-HTMLInputDate
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputDate")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputDate")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Date Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"date`"> element with standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"dateOfBirth`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"dob`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the date input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-06-10`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum date allowed.")
  [Void]$StringBuilder.AppendLine("      Example: `"1900-01-01`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum date allowed.")
  [Void]$StringBuilder.AppendLine("      Example: `"2025-12-31`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for the date input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select your date of birth`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value of the input changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Date changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the user inputs data.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input clicked')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"if(event.key==='Enter'){alert('Enter pressed')}`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key pressed')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.borderColor='blue'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.borderColor=''`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDate -ID `"dateOfBirth`" -Name `"dob`" -Value `"2000-01-01`" -Min `"1900-01-01`" -Max `"2025-12-31`" -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDate -ID `"startDate`" -Name `"start`" -Required -Title `"Start Date`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDate -ID `"eventDate`" -Name `"event`" -OnChange `"alert('Changed!')`" -OnFocus `"console.log('Focused')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-10")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Min,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the date input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='date' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value.ToString(`"yyyy-MM-dd`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min.ToString(`"yyyy-MM-dd`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max.ToString(`"yyyy-MM-dd`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if EventHandelers parameter set is used")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the date input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputDate")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputDate
  
  #region Function New-HTMLInputDateTime
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputDateTime")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputDateTime")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Datetime-local Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"datetime-local`"> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"meetingTime`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"meeting`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the datetime-local input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-06-10T14:30`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum datetime allowed.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-01-01T00:00`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum datetime allowed.")
  [Void]$StringBuilder.AppendLine("      Example: `"2025-12-31T23:59`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for the datetime input.")
  [Void]$StringBuilder.AppendLine("      Example: 60")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select meeting date and time`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomethingElse()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDateTime -ID `"meetingTime`" -Name `"meeting`" -Value `"2024-06-10T14:30`" -Min `"2024-01-01T00:00`" -Max `"2025-12-31T23:59`" -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDateTime -ID `"eventTime`" -Name `"event`" -Required -Title `"Event Date and Time`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputDateTime -ID `"eventTime`" -Name `"event`" -ParameterSetName `"EventHandelers`" -OnChange `"alert('Changed!')`" -OnClick `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-10")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Min,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the datetime-local input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='datetime-local' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add attributes to the input element")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value.ToString(`"yyyy-MM-ddTHH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min.ToString(`"yyyy-MM-ddTHH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max.ToString(`"yyyy-MM-ddTHH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the datetime-local input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputDateTime")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputDateTime
  
  #region Function New-HTMLInputEMail
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputEMail")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputEMail")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Email Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"email`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"userEmail`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.A")
  [Void]$StringBuilder.AppendLine("      Example: `"email`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"user@example.com`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your email`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}`$`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 50")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multiple")
  [Void]$StringBuilder.AppendLine("      Specifies that the user can enter more than one value.")
  [Void]$StringBuilder.AppendLine("      Example: -Multiple")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("      Example: -Required")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("      Example: -ReadOnly")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("      Example: -Spellcheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`", `"email`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"email`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"emailList`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"user1@example.com`", `"user2@example.com`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your email address`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 30")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input value is input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doDoubleClick()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"removeHighlight()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputEMail -ID `"userEmail`" -Name `"email`" -Placeholder `"Enter your email`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputEMail -ID `"contact`" -Name `"contactEmail`" -Value `"test@example.com`" -Class `"form-control`" -MaxLength 100")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputEMail -ID `"multiEmail`" -Name `"emails`" -Multiple -List `"emailList`" -ListItems @(`"a@b.com`",`"c@d.com`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputEMail -ID `"eventEmail`" -Name `"email`" -OnChange `"alert('Email changed!')`" -OnFocus `"console.log('Focused')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-11")
  [Void]$StringBuilder.AppendLine("      Updated for event handler support on 2024-06-12")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Multiple,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the email input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='email' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Multiple.IsPresent) { [void]`$StringBuilder.Append(`" multiple`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the email input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputEMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputEMail
  
  #region Function New-HTMLInputFile
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputFile")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputFile")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    Creates an HTML file input element.")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    Generates an HTML <input type=`"file`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"fileUpload`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"document`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("    Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Accept")
  [Void]$StringBuilder.AppendLine("    Specifies the types of files that the server accepts.")
  [Void]$StringBuilder.AppendLine("    Example: `"image/png, image/jpeg`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Multiple")
  [Void]$StringBuilder.AppendLine("    Specifies that the user can select more than one file.")
  [Void]$StringBuilder.AppendLine("    Example: -Multiple")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("    Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    Example: -Disabled")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("    Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    Example: -Required")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("    Specifies the form the input belongs to.")
  [Void]$StringBuilder.AppendLine("    Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("    Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("    Example: `"Upload your document`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("    Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("    Example: 2")
  [Void]$StringBuilder.AppendLine("  .PARAMETER ondblclick")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run on double-click.")
  [Void]$StringBuilder.AppendLine("    Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onfocus")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the input gains focus.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onblur")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.background='white'`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onkeydown")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onkeyup")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when a key is released.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Key up!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onkeypress")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Key pressed!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmousedown")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse down!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmouseup")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse up!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmouseenter")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.border='1px solid blue'`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmouseleave")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.border=''`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmousemove")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"console.log('Mouse move!')`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmouseover")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.background='lightblue'`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER onmouseout")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"this.style.background=''`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER oncontextmenu")
  [Void]$StringBuilder.AppendLine("    Specifies JavaScript to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("    Example: `"event.preventDefault()`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLInputFile -ID `"fileUpload`" -Name `"document`" -Accept `"image/png, image/jpeg`" -Multiple -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLInputFile -ID `"resume`" -Name `"resume`" -Required -Title `"Upload your resume`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLInputFile -ID `"fileUpload`" -Name `"document`" -ondblclick `"alert('Double clicked!')`" -onfocus `"this.style.background='yellow'`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("  .NOTES")
  [Void]$StringBuilder.AppendLine("    Created by Ken Sweet on 2024-06-11")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Accept,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Multiple,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$ondblclick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onfocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onblur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onkeydown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onkeyup,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onkeypress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmousedown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmouseup,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmouseenter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmouseleave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmousemove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmouseover,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$onmouseout,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$oncontextmenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='file' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Accept`")) { [void]`$StringBuilder.Append(`" accept='`$(`$Accept)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Multiple.IsPresent) { [void]`$StringBuilder.Append(`" multiple`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"ondblclick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$ondblclick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onfocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$onfocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onblur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$onblur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onkeydown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$onkeydown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onkeyup`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$onkeyup)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onkeypress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$onkeypress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmousedown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$onmousedown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmouseup`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$onmouseup)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmouseenter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$onmouseenter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmouseleave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$onmouseleave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmousemove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$onmousemove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmouseover`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$onmouseover)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"onmouseout`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$onmouseout)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"oncontextmenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$oncontextmenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputFile
  
  #region Function New-HTMLInputHidden
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputHidden")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputHidden")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    Creates an HTML hidden input element.")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    Generates an HTML <input type='hidden'> element with the specified attributes.")
  [Void]$StringBuilder.AppendLine("  .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"userId`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"userId`"")
  [Void]$StringBuilder.AppendLine("  .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("    Example: `"12345`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLInputHidden -ID `"userId`" -Name `"userId`" -Value `"12345`"")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    New-HTMLInputHidden -ID `"sessionToken`" -Name `"sessionToken`" -Value `"abcdef`"")
  [Void]$StringBuilder.AppendLine("  .NOTES")
  [Void]$StringBuilder.AppendLine("    Created by Ken Sweet on 2024-06-10")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the hidden input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='hidden' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add attributes if provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the hidden input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputHidden")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputHidden
  
  #region Function New-HTMLInputImage
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputImage")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputImage")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML input element of type `"image`".")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"image`"> element with all standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"submitImage`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"submitBtn`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Src")
  [Void]$StringBuilder.AppendLine("      Specifies the URL of the image to use as a submit button.")
  [Void]$StringBuilder.AppendLine("      Example: `"https://example.com/image.png`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alt")
  [Void]$StringBuilder.AppendLine("      Specifies alternative text for the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"Submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("      Specifies the height of the image (in pixels).")
  [Void]$StringBuilder.AppendLine("      Example: 32")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the image (in pixels).")
  [Void]$StringBuilder.AppendLine("      Example: 100")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the input belongs to.")
  [Void]$StringBuilder.AppendLine("      Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormAction")
  [Void]$StringBuilder.AppendLine("      Specifies the URL for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"/submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormEnctype")
  [Void]$StringBuilder.AppendLine("      Specifies how form data should be encoded.")
  [Void]$StringBuilder.AppendLine("      Example: `"multipart/form-data`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormMethod")
  [Void]$StringBuilder.AppendLine("      Specifies the HTTP method for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"Post`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormNoValidate")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should not be validated when submitted.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormTarget")
  [Void]$StringBuilder.AppendLine("      Specifies where to display the response after submitting the form.")
  [Void]$StringBuilder.AppendLine("      Example: `"_blank`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Click to submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the image is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the image is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down on the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released over the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves over the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border='1px solid red'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves within the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves out of the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.border='none'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down while the image has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released while the image has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed and released while the image has focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the image receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the image loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered on the image.")
  [Void]$StringBuilder.AppendLine("      Example: `"return false;`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value of the image input changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Changed')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the user inputs data.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputImage -ID `"submitImage`" -Name `"submitBtn`" -Src `"https://example.com/image.png`" -Alt `"Submit`" -Height 32 -Width 100")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputImage -ID `"imgBtn`" -Name `"imgBtn`" -Src `"/img/submit.png`" -Form `"myForm`" -FormAction `"/submit`" -FormMethod `"Post`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputImage -ID `"imgBtn`" -Name `"imgBtn`" -Src `"/img/submit.png`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"this.style.border='1px solid red'`" -OnBlur `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes on 2024-06-10")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Src,")
  [Void]$StringBuilder.AppendLine("    [string]`$Alt,")
  [Void]$StringBuilder.AppendLine("    [int]`$Height,")
  [Void]$StringBuilder.AppendLine("    [int]`$Width,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$FormAction,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"application/x-www-form-urlencoded`", `"multipart/form-data`", `"text/plain`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormEnctype,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Get`", `"Post`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormMethod,")
  [Void]$StringBuilder.AppendLine("    [switch]`$FormNoValidate,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"_blank`", `"_self`", `"_parent`", `"_top`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormTarget,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='image' name='`$(`$Name)' id='`$(`$ID)' src='`$(`$Src)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Alt`")) { [void]`$StringBuilder.Append(`" alt='`$(`$Alt)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Height`")) { [void]`$StringBuilder.Append(`" height='`$(`$Height)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Width`")) { [void]`$StringBuilder.Append(`" width='`$(`$Width)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormAction`")) { [void]`$StringBuilder.Append(`" formaction='`$(`$FormAction)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormEnctype`")) { [void]`$StringBuilder.Append(`" formenctype='`$(`$FormEnctype)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormMethod`")) { [void]`$StringBuilder.Append(`" formmethod='`$(`$FormMethod)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$FormNoValidate.IsPresent) { [void]`$StringBuilder.Append(`" formnovalidate`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormTarget`")) { [void]`$StringBuilder.Append(`" formtarget='`$(`$FormTarget)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputImage")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputImage
  
  #region Function New-HTMLInputMonth
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputMonth")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputMonth")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML <input type=`"month`"> element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"month`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"startMonth`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"startMonth`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-06`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2020-01`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2025-12`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for an input field.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select a month`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Month changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input value is changed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doDoubleClick()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input gains focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"removeHighlight()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputMonth -ID `"startMonth`" -Name `"startMonth`" -Value `"2024-06`" -Min `"2020-01`" -Max `"2025-12`" -Step 1 -Class `"form-control`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputMonth -ID `"billingMonth`" -Name `"billingMonth`" -Title `"Billing Month`" -Style `"width:200px`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputMonth -ID `"eventMonth`" -Name `"eventMonth`" -OnChange `"alert('Changed!')`" -OnClick `"console.log('Clicked')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-13")
  [Void]$StringBuilder.AppendLine("      Updated for event handler support on 2024-06-14")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Min,")
  [Void]$StringBuilder.AppendLine("    [string]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the month input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='month' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the month input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputMonth")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputMonth
  
  #region Function New-HTMLInputNumber
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputNumber")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputNumber")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML number input element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"number`"> element with all standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"quantity`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"quantity`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"5`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"0`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"100`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for an input field.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter a number`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"numeric`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"numbers`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"10`", `"20`", `"30`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter a quantity`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value is received.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='white'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputNumber -ID `"quantity`" -Name `"quantity`" -Min `"1`" -Max `"10`" -Step 1 -Value `"5`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputNumber -ID `"amount`" -Name `"amount`" -Placeholder `"Enter amount`" -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputNumber -ID `"score`" -Name `"score`" -List `"scores`" -ListItems @(`"10`",`"20`",`"30`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputNumber -ID `"quantity`" -Name `"quantity`" -OnChange `"alert('Changed!')`" -OnInput `"console.log(this.value)`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Min,")
  [Void]$StringBuilder.AppendLine("    [string]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='number' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputNumber")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputNumber
  
  #region Function New-HTMLInputPassword
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputPassword")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputPassword")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML password input element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"password`"> element with common attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"userPassword`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"password`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"MySecret123`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your password`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}`$`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 32")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 8")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("      Example: -Required")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("      Example: -ReadOnly")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("      Example: -Spellcheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`", `"new-password`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Password must be at least 8 characters`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 20")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='white'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputPassword -ID `"userPassword`" -Name `"password`" -Placeholder `"Enter your password`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputPassword -ID `"adminPass`" -Name `"admin_password`" -Pattern `"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}`$`" -Title `"At least 8 chars, 1 uppercase, 1 lowercase, 1 number`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputPassword -ID `"eventInput`" -Name `"event_password`" -OnChange `"alert('Changed!')`" -OnFocus `"this.style.background='yellow'`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("      Updated to support event handlers on 2024-06-09")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the password input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='password' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the password input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputPassword")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputPassword
  
  #region Function New-HTMLInputRadio
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputRadio")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputRadio")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML radio input element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"radio`"> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"genderMale`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the radio input group.")
  [Void]$StringBuilder.AppendLine("      Example: `"gender`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value associated with the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"male`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-check-input`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      Specifies that the radio input should be pre-selected.")
  [Void]$StringBuilder.AppendLine("      Example: -Checked")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the radio input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the radio input must be selected before submitting.")
  [Void]$StringBuilder.AppendLine("      Example: -Required")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the radio input is read-only.")
  [Void]$StringBuilder.AppendLine("      Example: -ReadOnly")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"margin-left:10px`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the radio input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select Male`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value of the radio input changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the radio input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the radio input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the radio input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the radio input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down while the radio input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released while the radio input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed and released while the radio input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(event.key)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down on the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released on the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer enters the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer leaves the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves within the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer is over the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer leaves the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered on the radio input.")
  [Void]$StringBuilder.AppendLine("      Example: `"event.preventDefault()`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRadio -ID `"genderMale`" -Name `"gender`" -Value `"male`" -Checked -Class `"form-check-input`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRadio -ID `"genderFemale`" -Name `"gender`" -Value `"female`" -Class `"form-check-input`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRadio -ID `"genderMale`" -Name `"gender`" -Value `"male`" -OnClick `"alert('Clicked!')`" -OnChange `"console.log('Changed!')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes on 2024-06-09")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("      [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [string]`$ID,")
  [Void]$StringBuilder.AppendLine("      [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [string]`$Name,")
  [Void]$StringBuilder.AppendLine("      [string]`$Value,")
  [Void]$StringBuilder.AppendLine("      [string]`$Class,")
  [Void]$StringBuilder.AppendLine("      [switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("      [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("      [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("      [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("      [string]`$Style,")
  [Void]$StringBuilder.AppendLine("      [string]`$Title,")
  [Void]$StringBuilder.AppendLine("      [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the radio input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='radio' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Checked.IsPresent) { [void]`$StringBuilder.Append(`" checked`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(' disabled') }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(' />')")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the radio input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputRadio")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputRadio
  
  #region Function New-HTMLInputRange
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputRange")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputRange")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML range input element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"range`"> element with all standard attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"volume`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"volume`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"50`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"slider`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"0`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"100`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for an input field.")
  [Void]$StringBuilder.AppendLine("      Example: 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"tickmarks`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"0`", `"25`", `"50`", `"75`", `"100`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Adjust the volume`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleChange(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleInput(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleClick(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleDblClick(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleFocus(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleBlur(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when a key is pressed and released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the mouse is moved over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies a script to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRange -ID `"volume`" -Name `"volume`" -Min `"0`" -Max `"100`" -Value `"50`" -Step 5 -List `"tickmarks`" -ListItems @(`"0`",`"25`",`"50`",`"75`",`"100`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRange -ID `"brightness`" -Name `"brightness`" -Min `"1`" -Max `"10`" -Value `"5`" -Class `"slider`" -Style `"width:200px`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputRange -ID `"range1`" -Name `"range1`" -OnChange `"handleChange(event)`" -OnClick `"handleClick(event)`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Min,")
  [Void]$StringBuilder.AppendLine("    [string]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the range input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='Range' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputRange")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputRange
  
  #region Function New-HTMLInputReset
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputReset")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputReset")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Reset Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"reset`"> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"resetBtn`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"reset`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value (label) of the reset button.")
  [Void]$StringBuilder.AppendLine("      Example: `"Clear Form`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"btn btn-secondary`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the input belongs to.")
  [Void]$StringBuilder.AppendLine("      Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Reset all fields`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Reset clicked!');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Double clicked');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down on the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow';`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='';`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.classList.add('hover');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves within the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse moving');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse pointer moves out of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.classList.remove('hover');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.select();`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Blurred');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down while the input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"if(event.key==='Enter'){alert('Enter pressed');}`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released while the input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key up');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed and released while the input is focused.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key pressed');`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered on the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"event.preventDefault();`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Changed');`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputReset -ID `"resetBtn`" -Name `"reset`" -Value `"Clear`" -Class `"btn btn-secondary`" -Title `"Reset all fields`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputReset -ID `"reset1`" -Name `"reset`" -Form `"myForm`" -Style `"width:100px`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputReset -ID `"resetBtn`" -Name `"reset`" -OnClick `"alert('Reset clicked!');`" -OnMouseOver `"this.classList.add('hover');`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes on 2024-06-10")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the reset input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='reset' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the reset input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputReset")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputReset
  
  #region Function New-HTMLInputSearch
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputSearch")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputSearch")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Search Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"search`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"searchBox`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"search`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"Find this`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Search here`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"^[a-zA-Z0-9 ]+`$`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 100")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 3")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"search`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"searchOptions`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"Option1`", `"Option2`", `"Option3`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your search term`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 30")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives user input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='white'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed and released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"unhighlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"trackMouse(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"showTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"hideTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"customContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSearch -ID `"searchBox`" -Name `"search`" -Placeholder `"Search here`" -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSearch -ID `"searchBox`" -Name `"search`" -Value `"Find this`" -Pattern `"^[a-zA-Z0-9 ]+`$`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSearch -ID `"searchBox`" -Name `"search`" -List `"searchOptions`" -ListItems @(`"One`",`"Two`",`"Three`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSearch -ID `"searchBox`" -Name `"search`" -OnChange `"alert('Changed!')`" -OnClick `"doSomething()`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the search input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='search' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the search input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputSearch")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputSearch
  
  #region Function New-HTMLInputSubmit
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputSubmit")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputSubmit")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Submit Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"submit`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"submitBtn`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"Submit`", `"Send`", `"Save`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"btn btn-primary`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the input belongs to.")
  [Void]$StringBuilder.AppendLine("      Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormAction")
  [Void]$StringBuilder.AppendLine("      Specifies the URL for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"/submit`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormEnctype")
  [Void]$StringBuilder.AppendLine("      Specifies how form data should be encoded.")
  [Void]$StringBuilder.AppendLine("      Example: `"multipart/form-data`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormMethod")
  [Void]$StringBuilder.AppendLine("      Specifies the HTTP method for form submission.")
  [Void]$StringBuilder.AppendLine("      Example: `"Post`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormNoValidate")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should not be validated when submitted.")
  [Void]$StringBuilder.AppendLine("      Example: -FormNoValidate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FormTarget")
  [Void]$StringBuilder.AppendLine("      Specifies where to display the response after submitting the form.")
  [Void]$StringBuilder.AppendLine("      Example: `"_blank`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Click to submit the form`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is pressed down on the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is released over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse pointer moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse pointer moves within the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse pointer moves out of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input gets focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.select()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"return false`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the value of the input changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Changed')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the input receives user input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnSubmit")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the form is submitted.")
  [Void]$StringBuilder.AppendLine("      Example: `"return confirm('Are you sure?')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSubmit -ID `"submitBtn`" -Name `"submit`" -Value `"Send`" -Class `"btn btn-success`" -Form `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSubmit -ID `"saveBtn`" -Name `"save`" -Value `"Save`" -FormAction `"/save`" -FormMethod `"Post`" -FormEnctype `"multipart/form-data`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputSubmit -ID `"eventBtn`" -Name `"event`" -Value `"Click Me`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"this.style.backgroundColor='yellow'`" -OnBlur `"console.log('Blurred')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$FormAction,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"application/x-www-form-urlencoded`", `"multipart/form-data`", `"text/plain`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormEnctype,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Get`", `"Post`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormMethod,")
  [Void]$StringBuilder.AppendLine("    [switch]`$FormNoValidate,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"_blank`", `"_self`", `"_parent`", `"_top`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$FormTarget,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnSubmit")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the submit input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='submit' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormAction`")) { [void]`$StringBuilder.Append(`" formaction='`$(`$FormAction)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormEnctype`")) { [void]`$StringBuilder.Append(`" formenctype='`$(`$FormEnctype)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormMethod`")) { [void]`$StringBuilder.Append(`" formmethod='`$(`$FormMethod)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$FormNoValidate.IsPresent) { [void]`$StringBuilder.Append(`" formnovalidate`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"FormTarget`")) { [void]`$StringBuilder.Append(`" formtarget='`$(`$FormTarget)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnSubmit`")) { [void]`$StringBuilder.Append(`" onsubmit='`$(`$OnSubmit)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the submit input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputSubmit")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputSubmit
  
  #region Function New-HTMLInputTel
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputTel")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputTel")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML <input type=`"tel`"> element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"tel`"> element with all standard attributes for telephone input, including support for common event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"phone`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"phone`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"+1-555-123-4567`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your phone number`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"^\d{3}-\d{3}-\d{4}`$`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 15")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 10")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`", `"tel`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"numeric`", `"tel`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"phoneList`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"555-123-4567`", `"555-987-6543`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your phone number`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 20")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value is input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input event')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doDoubleClick()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightField()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"validateField()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTel -ID `"phone`" -Name `"phone`" -Placeholder `"Enter your phone number`" -Pattern `"^\d{3}-\d{3}-\d{4}`$`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTel -ID `"mobile`" -Name `"mobile`" -Value `"+1-555-123-4567`" -Class `"form-control`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTel -ID `"contact`" -Name `"contact`" -List `"phoneList`" -ListItems @(`"555-123-4567`", `"555-987-6543`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTel -ID `"phone`" -Name `"phone`" -OnChange `"alert('Changed!')`" -OnClick `"doSomething()`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the tel input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='tel' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputTel")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputTel
  
  #region Function New-HTMLInputText
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputText")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputText")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Text Input Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"text`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"username`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"username`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"JohnDoe`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your name`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"^[A-Za-z0-9]{3,}`$`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 50")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("      Example: -Required")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("      Example: -ReadOnly")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("      Example: -Spellcheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"text`", `"numeric`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"browsers`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"Edge`", `"Firefox`", `"Chrome`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your username`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 30")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input received')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doDoubleClick()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"removeHighlight()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseEnter(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseLeave(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseMove(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOver(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseOut(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputText -ID `"username`" -Name `"username`" -Placeholder `"Enter your username`" -Class `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputText -ID `"search`" -Name `"search`" -Placeholder `"Search...`" -Required -AutoComplete `"on`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputText -ID `"browser`" -Name `"browser`" -List `"browsers`" -ListItems @(`"Edge`", `"Firefox`", `"Chrome`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputText -ID `"input1`" -Name `"input1`" -OnChange `"alert('Changed!')`" -OnClick `"doSomething()`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-13")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='text' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputText")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputText
  
  #region Function New-HTMLInputTime
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputTime")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputTime")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML <input type=`"time`"> element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML input element of type `"time`" with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"apptTime`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"appointment`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"13:30`" or `"13:30:00`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"09:00`" or `"09:00:00`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"17:00`" or `"17:00:00`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for an input field.")
  [Void]$StringBuilder.AppendLine("      Example: 60 (seconds), 900 (15 minutes)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select a time`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value is changed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"unhighlightInput()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"trackMouse(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"showTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"hideTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"customContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTime -ID `"apptTime`" -Name `"appointment`" -Value `"13:30`" -Min `"09:00`" -Max `"17:00`" -Step 900 -Class `"form-control`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTime -ID `"meeting`" -Name `"meetingTime`" -Title `"Choose a meeting time`" -Style `"width:200px`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputTime -ID `"apptTime`" -Name `"appointment`" -OnChange `"alert('Changed!')`" -OnClick `"doSomething()`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-08")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Min,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element for time")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='time' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value.ToString(`"HH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min.ToString(`"HH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max.ToString(`"HH:mm`"))'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputTime")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputTime
  
  #region Function New-HTMLInputUrl
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputUrl")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputUrl")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML input element of type 'url'.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"url`"> element with all standard attributes for URL input, including support for common event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"websiteUrl`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"website`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"https://example.com`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your website URL`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Pattern")
  [Void]$StringBuilder.AppendLine("      Specifies a regular expression that the input's value is checked against.")
  [Void]$StringBuilder.AppendLine("      Example: `"https?://.+`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed.")
  [Void]$StringBuilder.AppendLine("      Example: 255")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required.")
  [Void]$StringBuilder.AppendLine("      Example: 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the input should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`", `"url`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputMode")
  [Void]$StringBuilder.AppendLine("      Hints at the type of data that might be entered by the user.")
  [Void]$StringBuilder.AppendLine("      Example: `"url`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("      Refers to a <datalist> element that contains pre-defined options.")
  [Void]$StringBuilder.AppendLine("      Example: `"websites`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItems")
  [Void]$StringBuilder.AppendLine("      Specifies the options for the datalist.")
  [Void]$StringBuilder.AppendLine("      Example: @(`"https://github.com`", `"https://microsoft.com`")")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your homepage URL`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      Specifies the width of the input (in characters).")
  [Void]$StringBuilder.AppendLine("      Example: 40")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('URL changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives user input.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleMouseUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput(this)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"unhighlightInput(this)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"trackMouse(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"showTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"hideTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"customContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputUrl -ID `"websiteUrl`" -Name `"website`" -Placeholder `"Enter your website URL`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputUrl -ID `"homepage`" -Name `"homepage`" -Value `"https://example.com`" -Class `"form-control`" -AutoComplete `"url`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputUrl -ID `"site`" -Name `"site`" -List `"websites`" -ListItems @(`"https://github.com`", `"https://microsoft.com`")")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputUrl -ID `"eventInput`" -Name `"eventInput`" -OnChange `"alert('Changed!')`" -OnClick `"console.log('Clicked')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [string]`$Pattern,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [uint32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$InputMode,")
  [Void]$StringBuilder.AppendLine("    [string]`$List,")
  [Void]$StringBuilder.AppendLine("    [string[]]`$ListItems,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Size,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element for URL")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='url' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Pattern`")) { [void]`$StringBuilder.Append(`" pattern='`$(`$Pattern)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [void]`$StringBuilder.Append(`" spellcheck='true'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"InputMode`")) { [void]`$StringBuilder.Append(`" inputmode='`$(`$InputMode)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`")) { [void]`$StringBuilder.Append(`" list='`$(`$List)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Datalist if List and ListItems are provided")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"List`") -and `$PSBoundParameters.ContainsKey(`"ListItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"<datalist id='`$(`$List)'>`")")
  [Void]$StringBuilder.AppendLine("    `$ListItems | ForEach-Object { [void]`$StringBuilder.Append(`"<option value='`$(`$PSItem)'>`") }")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"</datalist>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputUrl")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputUrl
  
  #region Function New-HTMLInputWeek
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLInputWeek")
  [Void]$StringBuilder.AppendLine("function New-HTMLInputWeek")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML <input type=`"week`"> element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <input type=`"week`"> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"weekInput1`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"fiscalWeek`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Specifies the value of the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-W23`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-W01`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum value for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"2024-W52`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Step")
  [Void]$StringBuilder.AppendLine("      Specifies the legal number intervals for an input field.")
  [Void]$StringBuilder.AppendLine("      Example: 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the input should be disabled.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the input must be filled out before submitting.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the input is read-only.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the input (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Select a week`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the input.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the value changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input value is modified.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log(this.value)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the input loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"this.style.background=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseDownHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseUpHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightInput(this)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"unhighlightInput(this)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"trackMouse(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"showTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"hideTooltip()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"customContextMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputWeek -ID `"weekInput1`" -Name `"fiscalWeek`" -Value `"2024-W23`" -Min `"2024-W01`" -Max `"2024-W52`" -Step 1 -Class `"form-control`" -Required")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputWeek -ID `"week2`" -Name `"payrollWeek`" -AutoComplete `"on`" -Style `"width:50%`" -Title `"Payroll Week`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLInputWeek -ID `"week3`" -Name `"eventWeek`" -OnChange `"alert('Week changed!')`" -OnClick `"console.log('Clicked')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Created by Ken Sweet on 2024-06-09")
  [Void]$StringBuilder.AppendLine("      Updated to support event handler attributes.")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Min,")
  [Void]$StringBuilder.AppendLine("    [string]`$Max,")
  [Void]$StringBuilder.AppendLine("    [uint16]`$Step,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the input element for week")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<input type='week' name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add common attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Value`")) { [void]`$StringBuilder.Append(`" value='`$(`$Value)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`")) { [void]`$StringBuilder.Append(`" min='`$(`$Min)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Step`")) { [void]`$StringBuilder.Append(`" step='`$(`$Step)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if in EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the input element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`" />`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Input element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLInputWeek")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLInputWeek
  
  #region function New-HTMLLabel
  [Void]$StringBuilder.AppendLine("#region function New-HTMLLabel")
  [Void]$StringBuilder.AppendLine("function New-HTMLLabel")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Label Element")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <label> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      Specifies a shortcut key to activate/focus the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"n`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-label`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Dir")
  [Void]$StringBuilder.AppendLine("      Specifies the text directionality for the label. Accepts `"ltr`", `"rtl`", or `"auto`".")
  [Void]$StringBuilder.AppendLine("      Example: `"ltr`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER For")
  [Void]$StringBuilder.AppendLine("      Specifies the id of the input element this label is associated with.")
  [Void]$StringBuilder.AppendLine("      Example: `"username`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Hidden")
  [Void]$StringBuilder.AppendLine("      Specifies that the label is not yet, or is no longer, relevant.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"lblUsername`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Lang")
  [Void]$StringBuilder.AppendLine("      Specifies the language of the label's content.")
  [Void]$StringBuilder.AppendLine("      Example: `"en`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"font-weight:bold;`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the label.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the label (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your username`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Translate")
  [Void]$StringBuilder.AppendLine("      Specifies whether the content of the label should be translated.")
  [Void]$StringBuilder.AppendLine("      Example: `"yes`", `"no`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The inner text value of the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"Username:`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the label is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the label is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the label receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Focused')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the label loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when a mouse button is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the mouse enters the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the mouse leaves the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the mouse moves over the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the mouse is over the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the mouse leaves the label.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to execute when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Context Menu')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLLabel -For `"username`" -ID `"lblUsername`" -Value `"Username:`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLLabel -ID `"lblUsername`" -Value `"Username:`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"console.log('Mouse Over')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("      [string]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("      [string]`$Class,")
  [Void]$StringBuilder.AppendLine("      [ValidateSet(`"ltr`", `"rtl`", `"auto`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$Dir,")
  [Void]$StringBuilder.AppendLine("      [string]`$For,")
  [Void]$StringBuilder.AppendLine("      [switch]`$Hidden,")
  [Void]$StringBuilder.AppendLine("      [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [string]`$ID,")
  [Void]$StringBuilder.AppendLine("      [string]`$Lang,")
  [Void]$StringBuilder.AppendLine("      [string]`$Style,")
  [Void]$StringBuilder.AppendLine("      [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("      [string]`$Title,")
  [Void]$StringBuilder.AppendLine("      [ValidateSet(`"yes`", `"no`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$Translate,")
  [Void]$StringBuilder.AppendLine("      [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [string]`$Value,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("      [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("      [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create a StringBuilder for the label element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<label id='`$($ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Append attributes based on parameters")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AccessKey`")) { [void]`$StringBuilder.Append(`" accesskey='`$(`$AccessKey)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Dir`")) { [void]`$StringBuilder.Append(`" dir='`$(`$Dir)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"For`")) { [void]`$StringBuilder.Append(`" for='`$(`$For)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Hidden.IsPresent) { [void]`$StringBuilder.Append(`" hidden`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Lang`")) { [void]`$StringBuilder.Append(`" lang='`$(`$Lang)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Translate`")) { [void]`$StringBuilder.Append(`" translate='`$(`$Translate)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handlers only for EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`">`$(`$Value)</label>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return the constructed label element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLLabel")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLLabel
  
  #region function New-HTMLLegend
  [Void]$StringBuilder.AppendLine("#region function New-HTMLLegend")
  [Void]$StringBuilder.AppendLine("function New-HTMLLegend")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Legend Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <legend> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the legend element (required).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      Specifies a shortcut key to activate/focus the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Dir")
  [Void]$StringBuilder.AppendLine("      Specifies the text direction for the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Lang")
  [Void]$StringBuilder.AppendLine("      Specifies the language of the legend element's content.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the legend element (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Translate")
  [Void]$StringBuilder.AppendLine("      Specifies whether the content of the legend element should be translated.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Label")
  [Void]$StringBuilder.AppendLine("      Specifies the text content of the legend element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the legend is clicked. Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the legend is double-clicked. Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the legend receives focus. Example: `"console.log('Focused')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the legend loses focus. Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down. Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released. Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed. Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed. Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released. Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the legend. Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the legend. Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the legend. Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the legend. Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the legend. Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered. Example: `"event.preventDefault();`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLLegend -ID `"legend1`" -Class `"main-legend`" -Title `"Legend Title`" -Label `"My Legend`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLLegend -ID `"legend2`" -Label `"Interactive Legend`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"console.log('Mouse Over')`" -OnContextMenu `"event.preventDefault();`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [string]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Dir,")
  [Void]$StringBuilder.AppendLine("    [string]`$Lang,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"True`", `"False`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$Translate,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Label,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the legend element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<legend id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AccessKey`")) { [void]`$StringBuilder.Append(`" accesskey='`$(`$AccessKey)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Dir`")) { [void]`$StringBuilder.Append(`" dir='`$(`$Dir)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Lang`")) { [void]`$StringBuilder.Append(`" lang='`$(`$Lang)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Translate`")) { [void]`$StringBuilder.Append(`" translate='`$(`$Translate)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag and add a closing tag")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`">`$(`$Label)</legend>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return the constructed legend element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLLegend")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLLegend
  
  #region function New-HTMLMeter
  [Void]$StringBuilder.AppendLine("#region function New-HTMLMeter")
  [Void]$StringBuilder.AppendLine("function New-HTMLMeter")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML meter element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <meter> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Id")
  [Void]$StringBuilder.AppendLine("      The id attribute for the meter element. (Required in all parameter sets)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The current value of the meter. (Required in all parameter sets)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      The maximum value of the meter. (Required in Advanced)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Min")
  [Void]$StringBuilder.AppendLine("      The minimum value of the meter. (Required in Advanced)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      The CSS class for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      The form attribute for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER High")
  [Void]$StringBuilder.AppendLine("      The high attribute for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Low")
  [Void]$StringBuilder.AppendLine("      The low attribute for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Optimum")
  [Void]$StringBuilder.AppendLine("      The optimum attribute for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      The CSS style for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      The title attribute for the meter element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      The onclick event handler for the meter element. Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      The ondblclick event handler for the meter element. Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      The onfocus event handler for the meter element. Example: `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      The onblur event handler for the meter element. Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      The onkeydown event handler for the meter element. Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      The onkeyup event handler for the meter element. Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      The onkeypress event handler for the meter element. Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      The onmousedown event handler for the meter element. Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      The onmouseup event handler for the meter element. Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      The onmouseenter event handler for the meter element. Example: `"this.style.border='2px solid red'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      The onmouseleave event handler for the meter element. Example: `"this.style.border=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      The onmousemove event handler for the meter element. Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      The onmouseover event handler for the meter element. Example: `"this.style.backgroundColor='lightblue'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      The onmouseout event handler for the meter element. Example: `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      The oncontextmenu event handler for the meter element. Example: `"event.preventDefault(); alert('Context Menu Blocked')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLMeter -Id `"cpuMeter`" -Value 60 -Max 100 -Min 0 -Class `"meter-bar`" -High 80 -Low 20 -Optimum 50 -Style `"width:100%;`" -Title `"CPU Usage`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLMeter -Id `"simpleMeter`" -Value 5")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLMeter -Id `"eventMeter`" -Value 10 -OnClick `"alert('Meter Clicked!')`" -OnMouseOver `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Id,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [double]`$Value,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Advanced`")]")
  [Void]$StringBuilder.AppendLine("    [double]`$Max,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Advanced`")]")
  [Void]$StringBuilder.AppendLine("    [double]`$Min,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [double]`$High,")
  [Void]$StringBuilder.AppendLine("    [double]`$Low,")
  [Void]$StringBuilder.AppendLine("    [double]`$Optimum,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create a StringBuilder for the meter element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<meter id='`$(`$Id)' value='`$(`$Value)'`")")
  [Void]$StringBuilder.AppendLine("  # Append attributes based on parameters")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Max`")) { [void]`$StringBuilder.Append(`" max='`$(`$Max)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Min`"))  { [void]`$StringBuilder.Append(`" min='`$(`$Min)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"High`")) { [void]`$StringBuilder.Append(`" high='`$(`$High)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Low`")) { [void]`$StringBuilder.Append(`" low='`$(`$Low)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Optimum`")) { [void]`$StringBuilder.Append(`" optimum='`$(`$Optimum)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handlers if using EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`"></meter>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return the constructed meter element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLMeter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLMeter
  
  #region function New-HTMLOutput
  [Void]$StringBuilder.AppendLine("#region function New-HTMLOutput")
  [Void]$StringBuilder.AppendLine("function New-HTMLOutput")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML Output Element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <output> element with standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER For")
  [Void]$StringBuilder.AppendLine("      Specifies the relationship between the result of the calculation and the elements used in the calculation.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the output element belongs to.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the output element (required).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the output element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the output element (required).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the output element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the output element (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the output element is clicked. Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the output element is double-clicked. Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the output element receives focus. Example: `"console.log('Focused')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the output element loses focus. Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed down. Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is released. Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a key is pressed and released. Example: `"console.log('Key Pressed')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is pressed. Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when a mouse button is released. Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse enters the output element. Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse leaves the output element. Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse is moved over the output element. Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse pointer is over the output element. Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the mouse pointer leaves the output element. Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript to run when the context menu is triggered. Example: `"console.log('Context Menu')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLOutput -ID `"result`" -Name `"result`" -For `"a b`" -Class `"output-class`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLOutput -ID `"result`" -Name `"result`" -OnClick `"alert('Clicked!')`" -OnMouseOver `"console.log('Mouse Over')`" -OnBlur `"console.log('Blurred')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$For,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the output element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<output id='`$(`$ID)' name='`$(`$Name)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"For`")) { [void]`$StringBuilder.Append(`" for='`$(`$For)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the output element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`"></output>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Output the Output element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLOutput")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLOutput
  
  #region Function New-HTMLProgress
  [Void]$StringBuilder.AppendLine("#region Function New-HTMLProgress")
  [Void]$StringBuilder.AppendLine("function New-HTMLProgress {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML progress bar element.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <progress> element with optional attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Id")
  [Void]$StringBuilder.AppendLine("      The id attribute for the progress element. (Required)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The current value of the progress bar. (Required)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Max")
  [Void]$StringBuilder.AppendLine("      The maximum value of the progress bar. (Required)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      The CSS class for the progress element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      The CSS style for the progress element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      The title attribute for the progress element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShowPercentage")
  [Void]$StringBuilder.AppendLine("      If specified, shows the percentage of completion inside the progress element.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the progress element is clicked. Example: `"alert('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the progress element is double-clicked. Example: `"alert('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the progress element receives focus. Example: `"console.log('Focused')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the progress element loses focus. Example: `"console.log('Blurred')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when a key is pressed down. Example: `"console.log('Key Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when a key is released. Example: `"console.log('Key Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when a key is pressed and released. Example: `"console.log('Key Press')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when a mouse button is pressed. Example: `"console.log('Mouse Down')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when a mouse button is released. Example: `"console.log('Mouse Up')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the mouse enters the element. Example: `"console.log('Mouse Enter')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the mouse leaves the element. Example: `"console.log('Mouse Leave')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the mouse moves over the element. Example: `"console.log('Mouse Move')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the mouse is over the element. Example: `"console.log('Mouse Over')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the mouse leaves the element. Example: `"console.log('Mouse Out')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      The JavaScript code to run when the context menu is triggered. Example: `"console.log('Context Menu')`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLProgress -Id `"myProgress`" -Value 30 -Max 100 -Class `"progress-bar`" -Style `"width:100%;`" -Title `"Progress`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLProgress -Id `"myProgress`" -Value 30 -Max 100 -OnClick `"alert('Clicked!')`" -OnMouseOver `"console.log('Mouse Over')`" -ShowPercentage -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Id,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Value,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Max,")
  [Void]$StringBuilder.AppendLine("    [String]`$Class,")
  [Void]$StringBuilder.AppendLine("    [String]`$Style,")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ShowPercentage,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create a StringBuilder for the progress element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<progress id='`$(`$Id)' value='`$(`$Value)' max='`$(`$Max)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag")
  [Void]$StringBuilder.AppendLine("  if (`$ShowPercentage.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`">`$(`"{0:P}`" -f (`$Value / `$Max))</progress>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void]`$StringBuilder.Append(`"></progress>`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return the constructed progress element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function New-HTMLProgress")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function New-HTMLProgress
  
  #region function New-HTMLSelect
  [Void]$StringBuilder.AppendLine("#region function New-HTMLSelect")
  [Void]$StringBuilder.AppendLine("function New-HTMLSelect")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML <select> element with customizable attributes and event handlers.")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <select> element string with attributes in alphabetical order.")
  [Void]$StringBuilder.AppendLine("      Supports all standard HTML select attributes and allows for easy integration into web content.")
  [Void]$StringBuilder.AppendLine("      Also supports common HTML event handler attributes for advanced interactivity.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Autocomplete")
  [Void]$StringBuilder.AppendLine("      [string] Sets the 'autocomplete' attribute for the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Autocomplete `"on`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Autofocus")
  [Void]$StringBuilder.AppendLine("      [switch] Adds the 'autofocus' attribute to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Autofocus")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      [string] Specifies one or more class names for the select element (space-separated).")
  [Void]$StringBuilder.AppendLine("      Example: -Class `"form-control select-lg`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      [switch] Adds the 'disabled' attribute to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      [string] Associates the select element with a form element by its id.")
  [Void]$StringBuilder.AppendLine("      Example: -Form `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Id")
  [Void]$StringBuilder.AppendLine("      [string] (Required) Sets the 'id' attribute for the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Id `"countrySelect`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multiple")
  [Void]$StringBuilder.AppendLine("      [switch] Adds the 'multiple' attribute to allow multiple selections.")
  [Void]$StringBuilder.AppendLine("      Example: -Multiple")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      [string] (Required) Sets the 'name' attribute for the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Name `"countries`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Options")
  [Void]$StringBuilder.AppendLine("      [hashtable] (Required) Specifies the options for the select element. Each option can be a string or a hashtable with keys: Value, Text, Selected, Disabled.")
  [Void]$StringBuilder.AppendLine("      Example:")
  [Void]$StringBuilder.AppendLine("        # No Option Groups")
  [Void]$StringBuilder.AppendLine("          `$Options = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"CA`" = `"California`"")
  [Void]$StringBuilder.AppendLine("            `"OR`" = `"Oregon`"")
  [Void]$StringBuilder.AppendLine("            `"WA`" = `"Washington`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          # With Option Groups")
  [Void]$StringBuilder.AppendLine("          `$Options = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"USA`" = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("              `"CA`" = `"California`"")
  [Void]$StringBuilder.AppendLine("              `"OR`" = `"Oregon`"")
  [Void]$StringBuilder.AppendLine("              `"WA`" = `"Washington`"")
  [Void]$StringBuilder.AppendLine("            };")
  [Void]$StringBuilder.AppendLine("            `"Canada`" = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("              `"BC`" = `"British Columbia`"")
  [Void]$StringBuilder.AppendLine("              `"ON`" = `"Ontario`"")
  [Void]$StringBuilder.AppendLine("              `"QC`" = `"Quebec`"")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      [switch] Adds the 'required' attribute to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Required")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Size")
  [Void]$StringBuilder.AppendLine("      [int] Sets the 'size' attribute (number of visible options).")
  [Void]$StringBuilder.AppendLine("      Example: -Size 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the input.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      [int] Sets the 'tabindex' attribute for the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -TabIndex 2")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      [string] Sets the 'title' attribute for the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -Title `"Choose a country`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onchange' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnChange `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onclick' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnClick `"console.log('Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'ondblclick' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnDblClick `"console.log('Double Clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onfocus' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnFocus `"this.style.backgroundColor='yellow'`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onblur' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnBlur `"this.style.backgroundColor=''`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onkeydown' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnKeyDown `"console.log('Key Down!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onkeyup' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnKeyUp `"console.log('Key Up!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onkeypress' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnKeyPress `"console.log('Key Press!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmousedown' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseDown `"console.log('Mouse Down!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmouseup' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseUp `"console.log('Mouse Up!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmouseenter' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseEnter `"console.log('Mouse Enter!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmouseleave' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseLeave `"console.log('Mouse Leave!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmousemove' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseMove `"console.log('Mouse Move!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmouseover' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseOver `"console.log('Mouse Over!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'onmouseout' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnMouseOut `"console.log('Mouse Out!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      [string] Adds the 'oncontextmenu' event handler to the select element.")
  [Void]$StringBuilder.AppendLine("      Example: -OnContextMenu `"return false;`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Options = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"CA`" = `"California`"")
  [Void]$StringBuilder.AppendLine("        `"OR`" = `"Oregon`"")
  [Void]$StringBuilder.AppendLine("        `"WA`" = `"Washington`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      New-HTMLSelect -Id `"State`" -Name `"State`" -Options `$Options -Multiple -Size 3 -Autocomplete `"on`" -TabIndex 1 -Title `"Select a State`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Options = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"USA`" = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("          `"CA`" = `"California`"")
  [Void]$StringBuilder.AppendLine("          `"OR`" = `"Oregon`"")
  [Void]$StringBuilder.AppendLine("          `"WA`" = `"Washington`"")
  [Void]$StringBuilder.AppendLine("        };")
  [Void]$StringBuilder.AppendLine("        `"Canada`" = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("          `"BC`" = `"British Columbia`"")
  [Void]$StringBuilder.AppendLine("          `"ON`" = `"Ontario`"")
  [Void]$StringBuilder.AppendLine("          `"QC`" = `"Quebec`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      New-HTMLSelect -Id `"State`" -Name `"State`" -Options `$Options -Multiple -Size 3 -Autocomplete `"on`" -TabIndex 1 -Title `"Select a State or Province`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Options = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"CA`" = `"California`"")
  [Void]$StringBuilder.AppendLine("        `"OR`" = `"Oregon`"")
  [Void]$StringBuilder.AppendLine("        `"WA`" = `"Washington`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      New-HTMLSelect -Id `"State`" -Name `"State`" -Options `$Options -OnChange `"alert('Changed!')`" -OnClick `"console.log('Clicked!')`" -OnFocus `"this.style.backgroundColor='yellow'`" -OnBlur `"this.style.backgroundColor=''`" -OnKeyDown `"console.log('Key Down!')`" -OnKeyUp `"console.log('Key Up!')`" -OnKeyPress `"console.log('Key Press!')`" -OnMouseDown `"console.log('Mouse Down!')`" -OnMouseUp `"console.log('Mouse Up!')`" -OnMouseEnter `"console.log('Mouse Enter!')`" -OnMouseLeave `"console.log('Mouse Leave!')`" -OnMouseMove `"console.log('Mouse Move!')`" -OnMouseOver `"console.log('Mouse Over!')`" -OnMouseOut `"console.log('Mouse Out!')`" -OnContextMenu `"return false;`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName=`"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Id,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Options,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [string]`$Autocomplete,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Autofocus,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Multiple,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [int]`$Size,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName=`"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the Select element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::new(`"<select id='`$(`$Id)' name='`$(`$Name)'`")")
  [Void]$StringBuilder.AppendLine("  # Append attributes based on parameters")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Autocomplete`")) { [void]`$StringBuilder.Append(`" autocomplete='`$(`$Autocomplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Autofocus.IsPresent) { [void]`$StringBuilder.Append(`" autofocus`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Multiple.IsPresent) { [void]`$StringBuilder.Append(`" multiple`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Size`")) { [void]`$StringBuilder.Append(`" size='`$(`$Size)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add event handler attributes if using EventHandelers parameter set")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the opening tag")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`">`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Select Options")
  [Void]$StringBuilder.AppendLine("  if ((`$Options.Values | Select-Object -First 1) -is [String])")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # If Options is a simple array of strings, treat each as an option")
  [Void]$StringBuilder.AppendLine("    foreach (`$OptKey in `$Options.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$OptKey -in `$Selected)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [void]`$StringBuilder.Append(`"<option value='`$(`$OptKey)' selected>`$(`$Options[`$OptKey])</option>`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [void]`$StringBuilder.Append(`"<option value='`$(`$OptKey)'>`$(`$Options[`$OptKey])</option>`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # If Options is a hastable, treat each as an option group")
  [Void]$StringBuilder.AppendLine("    foreach (`$OptGrpKey in `$Options.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # append optgroup")
  [Void]$StringBuilder.AppendLine("      [void]`$StringBuilder.Append(`"<optgroup label='`$(`$OptGrpKey)'>`")")
  [Void]$StringBuilder.AppendLine("      ForEach (`$OptKey in `$Options[`$OptGrpKey].Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Check if the option is selected")
  [Void]$StringBuilder.AppendLine("        if (`$OptKey -in `$Selected)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [void]`$StringBuilder.Append(`"<option value='`$(`$OptKey)' selected>`$(`$Options[`$OptGrpKey][`$OptKey])</option>`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [void]`$StringBuilder.Append(`"<option value='`$(`$OptKey)'>`$(`$Options[`$OptGrpKey][`$OptKey])</option>`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      [void]`$StringBuilder.Append(`"</optgroup>`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Close the select element")
  [Void]$StringBuilder.AppendLine("  [void]`$StringBuilder.Append(`"</select>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return the constructed select element")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLSelect")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLSelect
  
  #region function New-HTMLTextArea
  [Void]$StringBuilder.AppendLine("#region function New-HTMLTextArea")
  [Void]$StringBuilder.AppendLine("function New-HTMLTextArea")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an HTML TextArea Element")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Generates an HTML <textarea> element with all standard attributes and optional event handlers.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Accesskey")
  [Void]$StringBuilder.AppendLine("      Specifies a shortcut key to activate/focus the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"n`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoComplete")
  [Void]$StringBuilder.AppendLine("      Specifies whether autocomplete is enabled for the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"on`", `"off`", `"name`", `"given-name`", `"additional-name`", `"family-name`", `"nickname`", `"email`", `"username`", `"new-password`", `"current-password`", `"url`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoFocus")
  [Void]$StringBuilder.AppendLine("      Specifies that the textarea should automatically get focus when the page loads.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Class")
  [Void]$StringBuilder.AppendLine("      Specifies one or more class names for the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"form-control`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Cols")
  [Void]$StringBuilder.AppendLine("      Specifies the visible width of the textarea (in average character widths).")
  [Void]$StringBuilder.AppendLine("      Example: 40")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("      Specifies that the textarea should be disabled.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Form")
  [Void]$StringBuilder.AppendLine("      Specifies the form the textarea belongs to.")
  [Void]$StringBuilder.AppendLine("      Example: `"myForm`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Specifies a unique id for the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"myTextArea`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("      Specifies the maximum number of characters allowed in the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: 500")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MinLength")
  [Void]$StringBuilder.AppendLine("      Specifies the minimum number of characters required in the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: 10")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Specifies the name of the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"comments`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Placeholder")
  [Void]$StringBuilder.AppendLine("      Specifies a short hint that describes the expected value of the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your comments here`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadOnly")
  [Void]$StringBuilder.AppendLine("      Specifies that the textarea is read-only.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Required")
  [Void]$StringBuilder.AppendLine("      Specifies that the textarea must be filled out before submitting the form.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Rows")
  [Void]$StringBuilder.AppendLine("      Specifies the visible number of lines in the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: 5")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Spellcheck")
  [Void]$StringBuilder.AppendLine("      Specifies whether the textarea should have its spelling and grammar checked.")
  [Void]$StringBuilder.AppendLine("      Example: (switch, no value needed)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Style")
  [Void]$StringBuilder.AppendLine("      Specifies an inline CSS style for the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"width:100%;resize:vertical`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabIndex")
  [Void]$StringBuilder.AppendLine("      Specifies the tab order of the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: 1")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Specifies extra information about the textarea (displayed as a tooltip).")
  [Void]$StringBuilder.AppendLine("      Example: `"Enter your comments`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The text content (inner text) of the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"This is my comment.`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wrap")
  [Void]$StringBuilder.AppendLine("      Specifies how the text in the textarea is to be wrapped when submitted in a form.")
  [Void]$StringBuilder.AppendLine("      Example: `"soft`", `"hard`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnChange")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the content of the textarea changes.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Changed!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnInput")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the user inputs text.")
  [Void]$StringBuilder.AppendLine("      Example: `"console.log('Input detected')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the textarea is clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"doSomething()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnDblClick")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the textarea is double-clicked.")
  [Void]$StringBuilder.AppendLine("      Example: `"alert('Double clicked!')`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnFocus")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the textarea receives focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"highlightField()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnBlur")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the textarea loses focus.")
  [Void]$StringBuilder.AppendLine("      Example: `"validateField()`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyDown(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyUp(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnKeyPress")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a key is pressed.")
  [Void]$StringBuilder.AppendLine("      Example: `"handleKeyPress(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseDown")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is pressed down.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseDownHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseUp")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when a mouse button is released.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseUpHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseEnter")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse enters the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseEnterHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseLeave")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseLeaveHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseMove")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse moves over the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseMoveHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOver")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse is over the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseOverHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnMouseOut")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the mouse leaves the textarea.")
  [Void]$StringBuilder.AppendLine("      Example: `"mouseOutHandler(event)`"")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OnContextMenu")
  [Void]$StringBuilder.AppendLine("      Specifies JavaScript code to run when the context menu is triggered.")
  [Void]$StringBuilder.AppendLine("      Example: `"showCustomMenu(event)`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLTextArea -ID `"myTextArea`" -Name `"comments`" -Rows 5 -Cols 40 -Placeholder `"Enter your comments here`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLTextArea -ID `"feedback`" -Name `"feedback`" -MaxLength 500 -MinLength 10 -Wrap `"soft`" -Style `"width:100%`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-HTMLTextArea -ID `"myTextArea`" -Name `"comments`" -Rows 5 -Cols 40 -OnChange `"alert('Changed!')`" -OnInput `"console.log('Input detected')`" -ParameterSetName `"EventHandelers`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateLength(1, 1)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Accesskey,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"on`", `"off`", `"name`", `"given-name`", `"additional-name`", `"family-name`", `"nickname`", `"email`", `"username`", `"new-password`", `"current-password`", `"url`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$AutoComplete,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AutoFocus,")
  [Void]$StringBuilder.AppendLine("    [string]`$Class,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Cols,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [string]`$Form,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$ID,")
  [Void]$StringBuilder.AppendLine("    [UInt32]`$MaxLength,")
  [Void]$StringBuilder.AppendLine("    [UInt32]`$MinLength,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [string]`$Name,")
  [Void]$StringBuilder.AppendLine("    [string]`$Placeholder,")
  [Void]$StringBuilder.AppendLine("    [switch]`$ReadOnly,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Required,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Rows,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Spellcheck,")
  [Void]$StringBuilder.AppendLine("    [string]`$Style,")
  [Void]$StringBuilder.AppendLine("    [int]`$TabIndex,")
  [Void]$StringBuilder.AppendLine("    [string]`$Title,")
  [Void]$StringBuilder.AppendLine("    [string]`$Value,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"hard`", `"soft`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$Wrap,")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnChange,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnInput,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnDblClick,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnFocus,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnBlur,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnKeyPress,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseDown,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseUp,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseEnter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseLeave,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseMove,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOver,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnMouseOut,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"EventHandelers`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$OnContextMenu")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder = [System.Text.StringBuilder]::New(`"<textarea name='`$(`$Name)' id='`$(`$ID)'`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Class`")) { [Void]`$StringBuilder.Append(`" class='`$(`$Class)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Accesskey`")) { [Void]`$StringBuilder.Append(`" accesskey='`$(`$Accesskey)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AutoComplete`")) { [Void]`$StringBuilder.Append(`" autocomplete='`$(`$AutoComplete)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$AutoFocus.IsPresent) { [Void]`$StringBuilder.Append(`" autofocus`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Cols`")) { [Void]`$StringBuilder.Append(`" cols='`$(`$Cols)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Disabled.IsPresent) { [Void]`$StringBuilder.Append(`" disabled`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Form`")) { [Void]`$StringBuilder.Append(`" form='`$(`$Form)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MaxLength`")) { [Void]`$StringBuilder.Append(`" maxlength='`$(`$MaxLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MinLength`")) { [Void]`$StringBuilder.Append(`" minlength='`$(`$MinLength)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Placeholder`")) { [Void]`$StringBuilder.Append(`" placeholder='`$(`$Placeholder)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$ReadOnly.IsPresent) { [Void]`$StringBuilder.Append(`" readonly`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Required.IsPresent) { [Void]`$StringBuilder.Append(`" required`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Rows`")) { [Void]`$StringBuilder.Append(`" rows='`$(`$Rows)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$Spellcheck.IsPresent) { [Void]`$StringBuilder.Append(`" spellcheck='True'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Style`")) { [Void]`$StringBuilder.Append(`" style='`$(`$Style)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"TabIndex`")) { [Void]`$StringBuilder.Append(`" tabindex='`$(`$TabIndex)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Title`")) { [Void]`$StringBuilder.Append(`" title='`$(`$Title)'`") }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Wrap`")) { [Void]`$StringBuilder.Append(`" wrap='`$(`$Wrap)'`") }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"EventHandelers`") {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnChange`")) { [Void]`$StringBuilder.Append(`" onchange='`$(`$OnChange)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnInput`")) { [Void]`$StringBuilder.Append(`" oninput='`$(`$OnInput)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnClick`")) { [Void]`$StringBuilder.Append(`" onclick='`$(`$OnClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnDblClick`")) { [Void]`$StringBuilder.Append(`" ondblclick='`$(`$OnDblClick)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnFocus`")) { [Void]`$StringBuilder.Append(`" onfocus='`$(`$OnFocus)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnBlur`")) { [Void]`$StringBuilder.Append(`" onblur='`$(`$OnBlur)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyDown`")) { [Void]`$StringBuilder.Append(`" onkeydown='`$(`$OnKeyDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyUp`")) { [Void]`$StringBuilder.Append(`" onkeyup='`$(`$OnKeyUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnKeyPress`")) { [Void]`$StringBuilder.Append(`" onkeypress='`$(`$OnKeyPress)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseDown`")) { [Void]`$StringBuilder.Append(`" onmousedown='`$(`$OnMouseDown)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseUp`")) { [Void]`$StringBuilder.Append(`" onmouseup='`$(`$OnMouseUp)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseEnter`")) { [Void]`$StringBuilder.Append(`" onmouseenter='`$(`$OnMouseEnter)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseLeave`")) { [Void]`$StringBuilder.Append(`" onmouseleave='`$(`$OnMouseLeave)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseMove`")) { [Void]`$StringBuilder.Append(`" onmousemove='`$(`$OnMouseMove)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOver`")) { [Void]`$StringBuilder.Append(`" onmouseover='`$(`$OnMouseOver)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnMouseOut`")) { [Void]`$StringBuilder.Append(`" onmouseout='`$(`$OnMouseOut)'`") }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"OnContextMenu`")) { [Void]`$StringBuilder.Append(`" oncontextmenu='`$(`$OnContextMenu)'`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Append(`">`$(`$Value)</textarea>`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$StringBuilder.ToString()")
  [Void]$StringBuilder.AppendLine("  [Void]`$StringBuilder.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-HTMLTextArea")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-HTMLTextArea
  
  #region Function Send-HTMLFile
  [Void]$StringBuilder.AppendLine("#region Send-HTMLFile")
  [Void]$StringBuilder.AppendLine("Function Send-HTMLFile ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encodes and Sends a File")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encodes and Sends a File")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FileName")
  [Void]$StringBuilder.AppendLine("      Name of Generated File to Send")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FileContents")
  [Void]$StringBuilder.AppendLine("      Contents of Generated File to Send")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Path")
  [Void]$StringBuilder.AppendLine("      Path to Local File to Send")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-HTMLFile -Path `"C:\Windows\LocalFile.txt`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-HTMLFile -FileName `"Generated.txt`" -FileContents `"this is the Contents of the Genertaed File`"")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"FilePath`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Generated`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$FileName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Generated`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$FileContents,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"FilePath`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Path,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ContentType = `"application/octet-stream`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"FilePath`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$FileName = [System.IO.Path]::GetFileName(`$Path)")
  [Void]$StringBuilder.AppendLine("      [Byte[]]`$MyArray = [System.IO.File]::ReadAllBytes(`$Path)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Encoding = [System.Text.ASCIIEncoding]::New()")
  [Void]$StringBuilder.AppendLine("      [Byte[]]`$MyArray = `$Encoding.GetBytes(`$FileContents)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Response.Clear()")
  [Void]$StringBuilder.AppendLine("    `$Response.AddHeader(`"Content-disposition`", `"attachment; filename=`$(`$FileName)`")")
  [Void]$StringBuilder.AppendLine("    `$Response.AddHeader(`"Content-Length`", `$MyArray.Length.ToString());")
  [Void]$StringBuilder.AppendLine("    `$Response.ContentType = `$ContentType")
  [Void]$StringBuilder.AppendLine("    `$Response.BinaryWrite(`$MyArray)")
  [Void]$StringBuilder.AppendLine("    `$Response.Flush()")
  [Void]$StringBuilder.AppendLine("    `$Response.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Send-HTMLFile
  
  [Void]$StringBuilder.AppendLine("#endregion ******** HTML Form Elements Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** HTML Form Elements Functions ********
  
  #region ******** Cyber Ark Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region Class CyberArkAccount
  [Void]$StringBuilder.AppendLine("#region Class CyberArkAccount")
  [Void]$StringBuilder.AppendLine("Class CyberArkAccount")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Custom Object properties")
  [Void]$StringBuilder.AppendLine("  [String]`$ID")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName")
  [Void]$StringBuilder.AppendLine("  [String]`$Password")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$Created")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$Modified")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create New Object ConStructor")
  [Void]$StringBuilder.AppendLine("  CyberArkAccount ([String]`$ID, [String]`$Name, [String]`$Domain, [String]`$UserName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ID = `$ID")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Name")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `$Domain")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create New Object ConStructor")
  [Void]$StringBuilder.AppendLine("  CyberArkAccount ([String]`$ID, [String]`$Name, [String]`$Domain, [String]`$UserName, [UInt32]`$Created, [UInt32]`$Modified)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ID = `$ID")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Name")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `$Domain")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    # Create / Modified Date are Stored in Number ofd Secionds since Jan 1, 1970")
  [Void]$StringBuilder.AppendLine("    `$This.Created = [DateTime]::New(1970, 1, 1, 0, 0, 0, [System.DateTimeKind]::Utc).AddSeconds(`$Created).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("    `$This.Modified = [DateTime]::New(1970, 1, 1, 0, 0, 0, [System.DateTimeKind]::Utc).AddSeconds(`$Modified).ToLocalTime()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Password Method")
  [Void]$StringBuilder.AppendLine("  [Void] AddPassword ([String]`$Password)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Password = `$Password")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Class CyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion Class CyberArkAccount
  
  #region function Connect-CyberArk
  [Void]$StringBuilder.AppendLine("#region function Connect-CyberArk")
  [Void]$StringBuilder.AppendLine("Function Connect-CyberArk ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client Secret")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Connect-CyberArk -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("      If (`$AuthToken.ExpiresIn -ne [DateTime]::MinValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Logon Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"content-type`" = `"application/x-www-form-urlencoded`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set / Creaste Request Body")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # invoke Cyber Ark Login Rest API")
  [Void]$StringBuilder.AppendLine("    `$Request = Invoke-WebRequest -UseBasicParsing -Method POST -Headers `$Headers -Uri `"https://aat4728.id.cyberark.cloud/oauth2/platformtoken`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Request.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Cyber Ark Auth Token")
  [Void]$StringBuilder.AppendLine("      `$TmpToken = `$Request.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::Now.AddSeconds(`$TmpToken.expires_in)")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`$(`$TmpToken.token_type) `$(`$TmpToken.access_token)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"Failed`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"Error`"")
  [Void]$StringBuilder.AppendLine("      `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"`$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-CyberArk")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-CyberArk
  
  #region function Add-CyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Add-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Add-CyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Entry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DomainName")
  [Void]$StringBuilder.AppendLine("      Domain Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      User Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Password of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      Comment for the Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Add-CyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName -UserName `$UserName -Password `$Password -DomainName `$DomainName")
  [Void]$StringBuilder.AppendLine("      if (`$Result.ID -ne `"Error`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Add Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  [Diagnostics.CodeAnalysis.SuppressMessageAttribute(`"PSAvoidUsingUsernameAndPasswordParams`", `"`", Justification = `"Needs to work with Plain Text UserNames and Passwords`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment = `"Kiosk User Account Added by '`$([System.Environment]::UserDomainName)\`$([System.Environment]::UserName)'`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpAddUser = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"name`"                 = `$EntryName")
  [Void]$StringBuilder.AppendLine("    `"address`"              = `$DomainName")
  [Void]$StringBuilder.AppendLine("    `"username`"             = `$UserName")
  [Void]$StringBuilder.AppendLine("    `"platformId`"           = `"Autologon_Disable_rotation`"")
  [Void]$StringBuilder.AppendLine("    `"safeName`"             = `$SafeName")
  [Void]$StringBuilder.AppendLine("    `"secretType`"           = `"password`"")
  [Void]$StringBuilder.AppendLine("    `"secret`"               = `$Password")
  [Void]$StringBuilder.AppendLine("    `"secretManagement`"     = @{")
  [Void]$StringBuilder.AppendLine("      `"automaticManagementEnabled`" = `"False`"")
  [Void]$StringBuilder.AppendLine("      `"manualManagementReason`"     = `$Comment")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"remoteMachinesAccess`" = @{")
  [Void]$StringBuilder.AppendLine("      `"remoteMachines`"                   = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"accessRestrictedToRemoteMachines`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/Accounts`"")
  [Void]$StringBuilder.AppendLine("    `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body (`$TmpAddUser | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Results.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Ststus")
  [Void]$StringBuilder.AppendLine("      `$Results.Content | ConvertFrom-Json | ForEach-Object -Process { [CyberArkAccount]::New(`$PSItem.ID, `$PSItem.Name, `$PSItem.Address, `$PSItem.UserName) }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Stataus")
  [Void]$StringBuilder.AppendLine("      [CyberArkAccount]::New(`"Error`", `$Results.StatusCode, `"Error`", `"Error`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Error Stataus")
  [Void]$StringBuilder.AppendLine("    [CyberArkAccount]::New(`"Error`", `"0`", `"Error`", `"`$(`$PSItem.Exception.Message)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-CyberArkAccount
  
  #region function Get-CyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Get-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Get-CyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Modified Time")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchType")
  [Void]$StringBuilder.AppendLine("      Search Type")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SavedFilter")
  [Void]$StringBuilder.AppendLine("      Saved Cyber Ark Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Offset")
  [Void]$StringBuilder.AppendLine("      Offset, Skip X Number of Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Limit")
  [Void]$StringBuilder.AppendLine("      Max Number of aqccounts to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Get Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Accounts = Get-CyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"contains`", `"startswith`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchType = `"contains`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SearchFilter`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Regular`", `"Recently`", `"New`", `"Link`", `"Deleted`", `"PolicyFailures`", `"AccessedByUsers`", `"ModifiedByUsers`", `"ModifiedByCPM`", `"DisabledPasswordByUserDisabledPasswordByCPM`", `"ScheduledForChange`", `"ScheduledForVerify`", `"ScheduledForReconcile`", `"SuccessfullyReconciled`", `"FailedChange`", `"FailedVerify`", `"FailedReconcile`", `"LockedOrNew`", `"Locked`", `"Favorites`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SavedFilter,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Offset = 0,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Limit = 100,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$GetPassword")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create StringBuilder to Generate the Cyber Ark Rest API Query String")
  [Void]$StringBuilder.AppendLine("  `$TmpSearch = [System.Text.StringBuilder]::New(`"filter=safename eq `$(`$SafeName) and ModificationTime gte 0`")")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Search`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Criteria")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpSearch.Append(`"&search=`$(`$Search -join ' ')&searchType=`$(`$SearchType)`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Saved Filter")
  [Void]$StringBuilder.AppendLine("    [Void]`$TmpSearch.Append(`"&savedfilter=`$(`$SavedFilter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  # Set Search Offset and Limit")
  [Void]$StringBuilder.AppendLine("  [Void]`$TmpSearch.Append(`"&offset=`$(`$offset)&limit=`$(`$Limit)`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts?`$(`$TmpSearch.ToString())`"")
  [Void]$StringBuilder.AppendLine("  `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Get -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("  If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Process Returened Cyber Ark Records")
  [Void]$StringBuilder.AppendLine("    `$TmpUsers = (`$Results.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TmpUser In `$TmpUsers)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create Return Object")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount = [CyberArkAccount]::New(`$TmpUser.ID, `$TmpUser.Name, `$TmpUser.Address, `$TmpUser.UserName, `$TmpUser.CreatedTime, `$TmpUser.secretManagement.lastModifiedTime)")
  [Void]$StringBuilder.AppendLine("      # Check if Get Password Switch was Passed")
  [Void]$StringBuilder.AppendLine("      If (`$GetPassword.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Generate Request URL and Body")
  [Void]$StringBuilder.AppendLine("        `$PwdUri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpUser.id)/Password/Retrieve/`"")
  [Void]$StringBuilder.AppendLine("        `$PwdBody = @{")
  [Void]$StringBuilder.AppendLine("          `"Reason`"     = `"Deployment Automation`"")
  [Void]$StringBuilder.AppendLine("          `"ActionType`" = `"Show`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("        `$PwdResult = Invoke-WebRequest -UseBasicParsing -Uri `$PwdUri -Method Post -Headers `$AuthToken -Body (`$PwdBody | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("        # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("        If (`$PwdResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Check for and Get/AddPassword")
  [Void]$StringBuilder.AppendLine("          `$TmpPword = [RegEx]::Match(`$PwdResult.Content, `"^```"(?<Password>.+)```"`$`")")
  [Void]$StringBuilder.AppendLine("          If (`$TmpPword.Groups[`"Password`"].Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Add Password")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`$TmpPword.Groups[`"Password`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Password Missing?")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`"Missing`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Error Getting Password")
  [Void]$StringBuilder.AppendLine("          `$TmpAccount.AddPassword(`"Error`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Return Cyber Ark Account To Pipeline")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-CyberArkAccount
  
  #region function Remove-CyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Remove-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Remove-CyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Vault Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark User ID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Results = Remove-CyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts/`$(`$TmpID)/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Delete -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Returen Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Delete User: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-CyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-CyberArkAccount
  
  #region function Update-CyberArkAccountPassword
  [Void]$StringBuilder.AppendLine("#region function Update-CyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("Function Update-CyberArkAccountPassword ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Authentication Token from Connect-PMCyberArkVault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Account ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      New Password for the Cyber Ark Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-CyberArkAccountPassword -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID -Password `$Password")
  [Void]$StringBuilder.AppendLine("      If (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Password Updated")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpChange = @{")
  [Void]$StringBuilder.AppendLine("    `"NewCredentials`" = `$Password")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TmpPwdBody = `$TmpChange | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpID)/Password/Update/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body `$TmpPwdBody")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Password Update: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-CyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-CyberArkAccountPassword
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Cyber Ark Rest API Functions ********
  
  #region ******** UMS Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-UMSRestAPI
  [Void]$StringBuilder.AppendLine("#region function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("function Connect-UMSRestAPI ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Username and Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebSession = Connect-UMSRestAPI -ComputerName `$ComputerName -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      If (`$WebSession.Cookies.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Logon Uri")
  [Void]$StringBuilder.AppendLine("  `$Uri = (`"https://{0}:{1}/umsapi/v{2}/login`" -f `$ComputerName, `$Port, `$Version)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Logon / Authorization Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Basic `" + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(`"`$(`$Credential.Username):`$(`$Credential.GetNetworkCredential().Password)`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create new Web Session")
  [Void]$StringBuilder.AppendLine("  `$WebSession = [Microsoft.Powershell.Commands.Webrequestsession]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Request WebSession Cookie")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -ContentType `"application/json`" -Headers `$Headers")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return WebSession")
  [Void]$StringBuilder.AppendLine("      `$TmpName, `$TmpValue = @((`$Response.Content | ConvertFrom-Json).Message -split `"=`")")
  [Void]$StringBuilder.AppendLine("      `$TmpCookie = [System.Net.Cookie]::New(`$TmpName, `$TmpValue, `"/`", `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      `$WebSession.Cookies.Add(`$TmpCookie)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch {}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Web Session Object")
  [Void]$StringBuilder.AppendLine("  `$WebSession")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-UMSRestAPI
  
  #region function Get-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Get-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Short: Name, MAC, IP, Parent Folder")
  [Void]$StringBuilder.AppendLine("      OnLine: Short Info, OnLine Status")
  [Void]$StringBuilder.AppendLine("      Details: Short Info, OEM, Model, Serial, Hardware Info, IGEL OS Info")
  [Void]$StringBuilder.AppendLine("      Shadow: Short Info, VNC Password and Cert")
  [Void]$StringBuilder.AppendLine("      Children: Short Info")
  [Void]$StringBuilder.AppendLine("      Deviceattributes: Short Info")
  [Void]$StringBuilder.AppendLine("      Networkadapters: Short Info, NIC Info")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"short`", `"details`", `"online`", `"shadow`", `"children`", `"deviceattributes`", `"networkadapters`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets = `"short`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DeviceID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Device to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DeviceID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `"/{0}`" -f `$DeviceID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`"  = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"         = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$TmpDevice, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"      = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`"{'online':false}`" | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@(`"{'online':false}`" | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDevice
  
  #region function Get-UMSDirectory
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDirectory")
  [Void]$StringBuilder.AppendLine("function Get-UMSDirectory ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Children: Directory IDs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectory -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectory -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID -Facets children")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"children`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DirectoryID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Directory to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DirectoryID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `"/{0}`" -f `$DirectoryID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facets`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$TmpDirectory, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDirectory")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDirectory
  
  #region function Move-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Move-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Move-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}?operation=move`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$DirectoryID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMoves = `$Response.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpMove In `$TmpMoves)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$TmpMove.id")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = (`$TmpMove.results -eq `"successful`")")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `$TmpMove.results")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = 0")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `"Failed to Move Device`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"DeviceID`" = -1")
  [Void]$StringBuilder.AppendLine("      `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Move-UMSDevice
  
  #region function Remove-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Remove-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Remove-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  foreach (`$ID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/deletetcoffline`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$ID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Delete`"")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$True")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `"Failed to Remove Device`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-UMSDevice
  
  #region function Send-UMSDeviceComand
  [Void]$StringBuilder.AppendLine("#region function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("function Send-UMSDeviceComand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to send to the UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Send-UMSDeviceComand -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Command `$Command")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpResponse In `$Response)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        If (`$TmpResponse.Success)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"rebootX`", `"reboot`", `"shutdown`", `"wakeup`", `"settings2tc`", `"tcreset2facdefs`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}?command={4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", (`$Command.ToLower()))")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Post`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Status")
  [Void]$StringBuilder.AppendLine("      (`$Response.Content | ConvertFrom-Json).CommandExecList | ForEach-Object -Process { [PSCustomObject]@{ `"Success`" = (`$PSItem.Message -eq `"OK`"); `"id`" = `$PSItem.ID; `"state`" = `$PSItem.State; `"message`" = `$PSItem.Message } }")
  [Void]$StringBuilder.AppendLine("     }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"FAILED`"; `"message`" = `"Failed to Execute `$(`$Command) Command`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"ERROR`"; `"message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-UMSDeviceComand
  
  #region function Update-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Update-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-PMUMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      New UMS Device Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Site")
  [Void]$StringBuilder.AppendLine("      New UMS Device Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Department")
  [Void]$StringBuilder.AppendLine("      New UMS Device Department")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CostCenter")
  [Void]$StringBuilder.AppendLine("      New UMS Device CostCenter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastIP")
  [Void]$StringBuilder.AppendLine("      New UMS Device LastIP")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      New UMS Device Comment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetID")
  [Void]$StringBuilder.AppendLine("      New UMS Device AssetID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InserviceDate")
  [Void]$StringBuilder.AppendLine("      New UMS Device InserviceDate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      New UMS Device SerialNumber")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceAttributes")
  [Void]$StringBuilder.AppendLine("      New UMS Device DeviceAttributes")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Success = Update-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Name `$NewName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Site,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Department,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$CostCenter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastIP,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssetID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$InserviceDate,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$DeviceAttributes")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = @{ }")
  [Void]$StringBuilder.AppendLine("  foreach (`$Key in `$PSBoundParameters.Keys | Where-Object -FilterScript { `$PSItem -in @(`"Name`", `"Site`", `"Department`", `"CostCenter`", `"LastIP`", `"Comment`", `"AssetID`", `"InserviceDate`", `"SerialNumber`") })")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`$Key.ToLower(), `$PSBoundParameters[`$Key])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Add Custom Device Attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"DeviceAttributes`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`"deviceAttributes`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Key in `$DeviceAttributes.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body.deviceAttributes.Add(@{ `"identifier`" = `$Key.ToLower(); `"value`" = `$DeviceAttributes[`$Key] }) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Verify New Update Values were Passed")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Update`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$DeviceID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("      `"Body`"       = (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("      `"Headers`"    = @{}")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        `$TmpMessage = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = (`$TmpMessage -eq `"Update successful`"); `"Message`" = `$TmpMessage }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Failed to Update Values`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"No Updated Values`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-UMSDevice
  
  [Void]$StringBuilder.AppendLine("#endregion ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** UMS Rest API Functions ********
  
  #region ******** VPSX Server Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-VPSXSession
  [Void]$StringBuilder.AppendLine("#region function Connect-VPSXSession")
  [Void]$StringBuilder.AppendLine("function Connect-VPSXSession ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-VPSXSession -PSXUri `$PSXUri -VPSXToken `$VPSXToken")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"Gateway_Logon`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Soap Function Parameters")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"soapToken`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXToken")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = (([XML]`$Response.Content).SelectNodes(`"//SessID`")).InnerText")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Error Clear Session ID")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Error Clear Session ID")
  [Void]$StringBuilder.AppendLine("    `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status / Session ID")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (-not [String]::IsNullOrEmpty(`$VPSXSessionID)); `"SessionID`" = `$VPSXSessionID }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-VPSXSession")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-VPSXSession
  
  #region function Add-VPSXItem
  [Void]$StringBuilder.AppendLine("#region function Add-VPSXItem")
  [Void]$StringBuilder.AppendLine("function Add-VPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("      Description of Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-VPSXItem -Item `$Item -Description `$Description")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_SetItem`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Description")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Desc`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Description")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Options`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Name`" = `$Item; `"Description`" = `$Description; `"Message`" = `"VPSX Item Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Description`" = `$Description; `"Message`" = `"Failed to Add VPSX Item`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Description`" = `$Description; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-VPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-VPSXItem
  
  #region function Add-VPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Add-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Add-VPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Default")
  [Void]$StringBuilder.AppendLine("      Set Printer as Default")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-VPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-VPSXItemPrinter -Item `$Item -Printer `$Printer -Default")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Default")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_AddPrinter`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Printer")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"PRT`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set VPSID Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"VPSID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `"VPS1`"")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Default Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Default`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Default.IsPresent.ToString().ToLower()")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"VPSX Printer Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Failed to Add VPSX Printer`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-VPSXItemPrinter
  
  #region Class VPSXItem
  [Void]$StringBuilder.AppendLine("#region Class VPSXItem")
  [Void]$StringBuilder.AppendLine("Class VPSXItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Description")
  [Void]$StringBuilder.AppendLine("  [String]`$DefaultPrt")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  VPSXItem ([String]`$Item, [String]`$Description, [String]`$DefaultPrt)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Item")
  [Void]$StringBuilder.AppendLine("    `$This.Description = `$Description")
  [Void]$StringBuilder.AppendLine("    `$This.DefaultPrt = `$DefaultPrt")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Class VPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion Class VPSXItem
  
  #region function Get-VPSXItem
  [Void]$StringBuilder.AppendLine("#region function Get-VPSXItem")
  [Void]$StringBuilder.AppendLine("function Get-VPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Items = Get-VPSXItem -Device `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-VPSXItem -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_GetItems`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Array Max")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"ArrayMax`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Maximum")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Scroll Position")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Scroll`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Scroll")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Search Item")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Find Item")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Find`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@((([XML]`$Response.Content).SelectNodes(`"//item`")) | ForEach-Object -Process { [VPSXItem]::New(`$PSItem.Item.InnerText, `$PSItem.Desc.InnerText, `$PSItem.DefaultPrt.InnerText) })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-VPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-VPSXItem
  
  #region Class VPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region Class VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("Class VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Printer")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsDefault")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  VPSXItemPrinter ([String]`$Printer, [String]`$IsDefault)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$this.Printer = `$Printer")
  [Void]$StringBuilder.AppendLine("    `$this.IsDefault = (`$IsDefault -eq `"true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Class VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion Class VPSXItemPrinter
  
  #region function Get-VPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("Function Get-VPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return pRINTERS FOR")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-VPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-VPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-VPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Printer `$Printer -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_GetPrinters`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Search Item")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Array Max")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"ArrayMax`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Maximum")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Scroll Position")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Scroll`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Scroll")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Search Item")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Printer`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpParam = `$TmpPost.CreateElement(`"PRT`")")
  [Void]$StringBuilder.AppendLine("        `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("        `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Find Item")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Find`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@((([XML]`$Response.Content).SelectNodes(`"//item`")) | ForEach-Object -Process { [VPSXItemPrinter]::New(`$PSItem.PRT.InnerText, `$PSItem.IsDefault.InnerText) })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-VPSXItemPrinter
  
  #region Class VPSXLocation
  [Void]$StringBuilder.AppendLine("#region Class VPSXLocation")
  [Void]$StringBuilder.AppendLine("Class VPSXLocation")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [Boolean]`$HasChildren")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  VPSXLocation ([String]`$Location, [String]`$HasChildren)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$this.Location = `$Location")
  [Void]$StringBuilder.AppendLine("    `$this.HasChildren = (`$HasChildren -eq `"true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Class VPSXLocation")
  [Void]$StringBuilder.AppendLine("")
  #endregion Class VPSXLocation
  
  #region function Get-VPSXLocation
  [Void]$StringBuilder.AppendLine("#region function Get-VPSXLocation")
  [Void]$StringBuilder.AppendLine("function Get-VPSXLocation ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Locations to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Locations to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-VPSXLocation")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-VPSXLocation -Scroll 0 -Maximum 100 -Location `$Location")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [String]`$Location = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VPS_GetLocations`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Array Max")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"ArrayMax`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Maximum")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Scroll Position")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Scroll`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Scroll")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Search Location")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Location`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Location`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Location")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@((([XML]`$Response.Content).SelectNodes(`"//item`")) | ForEach-Object -Process { [VPSXLocation]::New(`$PSItem.Loc.InnerText, `$PSItem.Child.InnerText) })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-VPSXLocation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-VPSXLocation
  
  #region Class VPSXPrinter
  [Void]$StringBuilder.AppendLine("#region Class VPSXPrinter")
  [Void]$StringBuilder.AppendLine("Class VPSXPrinter")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Name")
  [Void]$StringBuilder.AppendLine("  [String]`$LongName")
  [Void]$StringBuilder.AppendLine("  [String]`$VPSID")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$Department")
  [Void]$StringBuilder.AppendLine("  [String]`$Contact")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  VPSXPrinter ([String]`$Name, [String]`$LongName, [String]`$VPSID, [String]`$Location, [String]`$Department, [String]`$Contact)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Name = `$Name")
  [Void]$StringBuilder.AppendLine("    `$This.LongName = `$LongName")
  [Void]$StringBuilder.AppendLine("    `$This.VPSID = `$VPSID")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$Location")
  [Void]$StringBuilder.AppendLine("    `$This.Department = `$Department")
  [Void]$StringBuilder.AppendLine("    `$This.Contact = `$Contact")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Class VPSXPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion Class VPSXPrinter
  
  #region function Get-VPSXPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-VPSXPrinter")
  [Void]$StringBuilder.AppendLine("function Get-VPSXPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Location of Printers")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-VPSXPrinter -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-VPSXPrinter -Scroll 0 -Maximum 100 -Printer `$Printer -Location `$Location -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VPS_PrtList7`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Order`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Array Max")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"ArrayMax`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Maximum")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Scroll Position")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Scroll`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Scroll")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Search Printer")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Printer`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpParam = `$TmpPost.CreateElement(`"PrtName`")")
  [Void]$StringBuilder.AppendLine("        `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("        `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Search Location")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Location`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpParam = `$TmpPost.CreateElement(`"Location`")")
  [Void]$StringBuilder.AppendLine("        `$TmpParam.InnerText = `$Location")
  [Void]$StringBuilder.AppendLine("        `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Find Item")
  [Void]$StringBuilder.AppendLine("      `$TmpParam = `$TmpPost.CreateElement(`"Find`")")
  [Void]$StringBuilder.AppendLine("      `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@((([XML]`$Response.Content).SelectNodes(`"//item`")) | ForEach-Object -Process { [VPSXPrinter]::New(`$PSItem.PrtName.InnerText, `$PSItem.PrtLName.InnerText, `$PSItem.VPSID.InnerText, `$PSItem.Location.InnerText, `$PSItem.Dept.InnerText, `$PSItem.Contact.InnerText) })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-VPSXPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-VPSXPrinter
  
  #region function Remove-VPSXItem
  [Void]$StringBuilder.AppendLine("#region function Remove-VPSXItem")
  [Void]$StringBuilder.AppendLine("Function Remove-VPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Remove-VPSXItem -Item `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_RemoveItem`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Name`" = `$Item; `"Message`" = `"VPSX Item Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Message`" = `"Failed to Remove VPSX Item`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-VPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-VPSXItem
  
  #region function Remove-VPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Remove-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Remove-VPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services VPSXUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXSessionID")
  [Void]$StringBuilder.AppendLine("      VPSX Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-VPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXSessionID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Soap Envelope")
  [Void]$StringBuilder.AppendLine("    `$TmpPost = [System.Xml.XmlDocument]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot = `$TmpPost.CreateElement(`"soapenv`", `"Envelope`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:soapenv`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.SetAttribute(`"xmlns:lrs`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("    `$TmpBody = `$TmpPost.CreateElement(`"soapenv`", `"Body`", `"http://schemas.xmlsoap.org/soap/envelope/`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add VPSX Function")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction = `$TmpPost.CreateElement(`"lrs`", `"VSPA_RemovePrinter`", `"http://www.lrs.com`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Sessiion ID")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"SessID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$VPSXSessionID")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Type`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = 1")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Item")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"Item`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Item")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Printer")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"PRT`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `$Printer")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set VPSID Type")
  [Void]$StringBuilder.AppendLine("    `$TmpParam = `$TmpPost.CreateElement(`"VPSID`")")
  [Void]$StringBuilder.AppendLine("    `$TmpParam.InnerText = `"VPS1`"")
  [Void]$StringBuilder.AppendLine("    `$TmpFunction.AppendChild(`$TmpParam) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Function to Body")
  [Void]$StringBuilder.AppendLine("    `$TmpBody.AppendChild(`$TmpFunction) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpRoot.AppendChild(`$TmpBody) | Out-Null")
  [Void]$StringBuilder.AppendLine("    `$TmpPost.AppendChild(`$TmpRoot) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Submit Soap Request")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -Uri `$VPSXUri -Method Post -ContentType `"text/xml; charset=utf-8`" -Body (`$TmpPost.OuterXml) -UseBasicParsing")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"VPSX Printer Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Failed to Remove VPSX Printer`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Name`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-VPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-VPSXItemPrinter
  
  [Void]$StringBuilder.AppendLine("#endregion ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** VPSX Server Functions ********
  
  #region ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Set-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AddMinutes")
  [Void]$StringBuilder.AppendLine("      Add Minutes to the Token Expiration")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("      if (`$MyRunbookToken.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success!")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [UInt32]`$AddMinutes = 15")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$Script:AAAuthToken.ExpiresOn) -or (`$Script:AAAuthToken.ExpiresOn -le [DateTime]::Now.AddMinutes(`$AddMinutes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://management.azure.com/`" -AsSecureString")
  [Void]$StringBuilder.AppendLine("      `$Script:AAAuthToken = @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `$([Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$AccessToken.Token)))`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`"     = (`$AccessToken.ExpiresOn.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookToken
  
  #region function Get-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAuthToken")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookToken
  
  #region function Set-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyRunbookOptions -SubscriptionID `$SubscriptionID -ResourceGroup `$ResourceGroup -AutomationAccount `$AutomationAccount -Runbook `$Runbook")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AASubscriptionID = `$SubscriptionID")
  [Void]$StringBuilder.AppendLine("  `$Script:AAResourceGroup = `$ResourceGroup")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAutomationAccount = `$AutomationAccount")
  [Void]$StringBuilder.AppendLine("  `$Script:AARunbook = `$Runbook")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookOptions
  
  #region function Get-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RunbookOptions = Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"SubscriptionID`"    = `$Script:AASubscriptionID")
  [Void]$StringBuilder.AppendLine("    `"ResourceGroup`"     = `$Script:AAResourceGroup")
  [Void]$StringBuilder.AppendLine("    `"AutomationAccount`" = `$Script:AAAutomationAccount")
  [Void]$StringBuilder.AppendLine("    `"Runbook`"           = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookOptions
  
  #region function Get-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Status")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StatusComp")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status Comparison")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Create")
  [Void]$StringBuilder.AppendLine("      Runbook Jon Create Time")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -Status `$Status")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Activating`", `"Blocked`", `"Completed`", `"Disconnected`", `"Failed`", `"New`", `"Queued`", `"Removing`", `"Resuming`", `"Running`", `"Stopped`", `"Stopping`", `"Suspended`", `"Suspending`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Status,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"eq`", `"ne`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$StatusComp = `"eq`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Create = [DateTime]::Now.AddHours(-12)")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Search = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -ne `"ID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"```$filter=properties/creationTime ge `$((`$Create.ToUniversalTime()).ToString(`"O`")) and properties/runbook/name eq '`$(`$Runbook)'`")")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Status`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$Search.Append(`" and properties/status `$(`$StatusComp) '`$(`$Status)'`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"&`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)?`$(`$Search.ToString())api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Jobs = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$Jobs.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"ID`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJob
  
  #region function Get-MyRunbookJobOutput
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookJobOutput ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobOutput = Get-MyRunbookJobOutput -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/output?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$JobOutput.Content")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJobOutput
  
  #region function Send-MyRunbookJobCommand
  [Void]$StringBuilder.AppendLine("#region function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("Function Send-MyRunbookJobCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to Send to the Runbook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Susprend`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Resume`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Stop`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Stop`", `"Susprend`", `"Resume`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/`$(`$Command)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method POST -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyRunbookJobCommand
  
  #region function Start-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("Function Start-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Runbook Job Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RunOn")
  [Void]$StringBuilder.AppendLine("      Hybrid Worker Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Parameters to Pass to the the RunBook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Start-MyRunbookJob -RunOn `$RunOn -Parameters `$Parameters")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = ([System.Guid]::NewGuid()).Guid,")
  [Void]$StringBuilder.AppendLine("    [String]`$RunOn,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Parameters = @{}")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobName)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"properties`" = @{")
  [Void]$StringBuilder.AppendLine("      `"runbook`" = @{ `"name`" = `$Runbook }")
  [Void]$StringBuilder.AppendLine("      `"parameters`" = `$Parameters")
  [Void]$StringBuilder.AppendLine("      `"runOn`"   = `$RunOn")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$NewJob = Invoke-WebRequest -Uri `$URI -Method PUT -ContentType `"application/json`" -Headers `$AuthToken -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("  If (`$NewJob.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$NewJob.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Start-MyRunbookJob
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Functions Library ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyFCGScriptFunctions"
}
#endregion function Build-MyFCGScriptFunctions

#region function Build-MyFCGScriptMultiThread
Function Build-MyFCGScriptMultiThread ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptMultiThread -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptMultiThread"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Multiple Thread Functions ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** Custom Objects MyRSPool / MyRSJob  ********
  [Void]$StringBuilder.AppendLine("#region ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Management.Automation;")
  [Void]$StringBuilder.AppendLine("using System.Threading;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSJob")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;")
  [Void]$StringBuilder.AppendLine("  private System.String _PoolName;")
  [Void]$StringBuilder.AppendLine("  private System.Guid _PoolID;")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.PowerShell _PowerShell;")
  [Void]$StringBuilder.AppendLine("  private System.IAsyncResult _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("  private System.Object _InputObject = null;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSJob(System.String Name, System.Management.Automation.PowerShell PowerShell, System.IAsyncResult PowerShellAsyncResult, System.Object InputObject, System.String PoolName, System.Guid PoolID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _PoolName = PoolName;")
  [Void]$StringBuilder.AppendLine("    _PoolID = PoolID;")
  [Void]$StringBuilder.AppendLine("    _PowerShell = PowerShell;")
  [Void]$StringBuilder.AppendLine("    _PowerShellAsyncResult = PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    _InputObject = InputObject;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String PoolName")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolName;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid PoolID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PowerShell PowerShell")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSInvocationState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Exception Reason")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.Reason;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool HadErrors")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.HadErrors;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Command")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Commands.Commands[0].ToString();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.IAsyncResult PowerShellAsyncResult")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool IsCompleted")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult.IsCompleted;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Object InputObject")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _InputObject;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.DebugRecord> Debug")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Debug;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ErrorRecord> Error")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Error;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ProgressRecord> Progress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Progress;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.VerboseRecord> Verbose")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Verbose;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.WarningRecord> Warning")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Warning;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSPool")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;  ")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.Runspaces.RunspacePool _RunspacePool;")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Generic.List<MyRSJob> Jobs = new System.Collections.Generic.List<MyRSJob>();")
  [Void]$StringBuilder.AppendLine("  private System.Collections.Hashtable _SyncedHash;")
  [Void]$StringBuilder.AppendLine("  private System.Threading.Mutex _Mutex;  ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash, System.String Mutex) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("    _Mutex = new System.Threading.Mutex(false, Mutex);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Hashtable SyncedHash")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _SyncedHash;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Threading.Mutex Mutex")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Mutex;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePoolState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.RunspacePoolStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$Script:MyHiddenRSPool = [System.Collections.Generic.Dictionary[[String], [MyRSPool]]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Custom Objects MyRSPool / MyRSJob  ********

  #region ******** function Start-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Start-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Functions")
  [Void]$StringBuilder.AppendLine("      Functions to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variables")
  [Void]$StringBuilder.AppendLine("      Variables to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modules")
  [Void]$StringBuilder.AppendLine("      Modules to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PSSnapins")
  [Void]$StringBuilder.AppendLine("      PSSnapins to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Hashtable")
  [Void]$StringBuilder.AppendLine("      Synced Hasttable to pass values between threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mutex")
  [Void]$StringBuilder.AppendLine("      Protects access to a shared resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxJobs")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create the Default RunspacePool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPool = Start-MyRSPool -PoolName `$PoolName -MaxJobs `$MaxJobs -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create a New RunspacePool and Return the RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Functions,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Variables,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Modules,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PSSnapins,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Hashtable = @{ `"Enabled`" = `$True },")
  [Void]$StringBuilder.AppendLine("    [String]`$Mutex,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 64)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxJobs = 8,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # check if Runspace Pool already exists")
  [Void]$StringBuilder.AppendLine("  if (`$Script:MyHiddenRSPool.ContainsKey(`$PoolName))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Existing Runspace Pool")
  [Void]$StringBuilder.AppendLine("    [MyRSPool](`$Script:MyHiddenRSPool[`$PoolName])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Default Session State")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState = [Microsoft.PowerShell.ExecutionPolicy]::RemoteSigned")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import Modules")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Modules`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSModule(`$Modules)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import PSSnapins")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"PSSnapins`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSSnapIn(`$PSSnapins, [Ref]`$Null)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Common Functions")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Functions`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Functions.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New(`$Key, `$Functions[`$Key])))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Default Variables")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Variables`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Variables.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`$Key, `$Variables[`$Key], `"`$Key = `$(`$Variables[`$Key])`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create and Open RunSpacePool")
  [Void]$StringBuilder.AppendLine("    `$SyncedHash = [Hashtable]::Synchronized(`$Hashtable)")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"SyncedHash`", `$SyncedHash, `"SyncedHash = Synced Hashtable`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Mutex`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"Mutex`", `$Mutex, `"Mutex = `$Mutex`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash, `$Mutex)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.ApartmentState = `"STA`"")
  [Void]$StringBuilder.AppendLine("    #`$RSPool.RunspacePool.ApartmentState = `"MTA`"")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.Open()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Script:MyHiddenRSPool.Add(`$PoolName, `$RSPool)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSPool ********

  #region ******** function Get-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Get-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get all RSPools")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"All`" {")
  [Void]$StringBuilder.AppendLine("        # Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$PoolName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern})")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$PoolID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********

  #region ******** function Close-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Close-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to clsoe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to close")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"RSPool`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Close RunspacePools, This will Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempPool in `$TempPools)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty(`$TempPool.Mutex))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Close()")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Dispose()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Close()")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool.Remove(`$TempPool.Name)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********
  
  #region ******** function Start-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Start-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to add new RunspacePool Jobs to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      Object / Value to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputParam")
  [Void]$StringBuilder.AppendLine("      Paramter to pass the Object / Value as")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      RunspacePool Job ScriptBock to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Common Paramaters to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSJob -ScriptBlock `$ScriptBlock -JobName `$JobName -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -RSPool `$RSPool -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolName `$PoolName -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolID `$PoolID -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$InputObject,")
  [Void]$StringBuilder.AppendLine("    [String]`$InputParam = `"InputObject`",")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = `"Job Name`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Parameters,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"RSPool`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPool = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Start-MyRSPool -PoolName `$PoolName -PassThru)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for New Jobs")
  [Void]$StringBuilder.AppendLine("    `$NewJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"InputObject`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("      `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("      # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("      `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("      # Add Parameters")
  [Void]$StringBuilder.AppendLine("      [Void]`$PowerShell.AddParameter(`$InputParam, `$Object)")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # set Job Name")
  [Void]$StringBuilder.AppendLine("      if ((`$Object -is [String]) -or (`$Object -is [ValueType]))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJobName = `"`$JobName - `$(`$Object)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJobName = `$(`$Object.`$JobName)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      [Void]`$NewJobs.Add(([MyRSjob]::New(`$TempJobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Object, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("      `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("      # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("      `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("      # Add Parameters")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      [Void]`$NewJobs.Add(([MyRSjob]::New(`$JobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Null, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$NewJobs.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPool.Jobs.AddRange(`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      # Return Jobs only if New RunspacePool")
  [Void]$StringBuilder.AppendLine("      if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$NewJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSJob ********
  
  #region ******** function Get-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Pool`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolName `$PoolName)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"^JobName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job Name RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$JobName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"^JobID`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job ID RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$JobID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Get-MyRSJob ********

  #region ******** function Wait-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Wait-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      ScriptBlock to invoke while waiting")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      [System.Threading.Thread]::Sleep(250)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      TimeSpace to wait")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoWait")
  [Void]$StringBuilder.AppendLine("      No Wait, Return when any Job states changes to Stopped, Completed, or Failed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -RSPool `$RSPool -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolName `$PoolName -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolID `$PoolID -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Wait = 60,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoWait,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"PassThru`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"PassThru`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Wait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Wait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"NoWait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"NoWait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ScriptBlock`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"ScriptBlock`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Wait Jobs")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](`$RSJob))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Wait for Jobs to be Finshed")
  [Void]$StringBuilder.AppendLine("    if (`$NoWait.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      While (@((`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -eq `$WaitJobs.Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Object[]]`$CheckJobs = `$WaitJobs.ToArray()")
  [Void]$StringBuilder.AppendLine("      `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("      While (@((`$CheckJobs = `$CheckJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -and ((`$StopWatch.TotalSeconds -le `$Wait) -or (`$Wait -eq 0)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$StopWatch.Stop()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Completed Jobs")
  [Void]$StringBuilder.AppendLine("      [MyRSJob[]](`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -match `"Stopped|Completed|Failed`" })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Wait-MyRSJob ********

  #region ******** function Stop-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Stop-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Stop all Jobs that have not Finished")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Stop-MyRSJob ********

  #region ******** function Receive-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Receive-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoRemove")
  [Void]$StringBuilder.AppendLine("      Remove Jobs after Receiving Output")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -RSPool `$RSPool -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolName `$PoolName -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolID `$PoolID -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoRemove,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"AutoRemove`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"AutoRemove`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$PSBoundParameters.Add(`"State`", `"Completed`")")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Receive all Complted Jobs, Remove Job if Required")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.IsCompleted)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJob.PowerShell.EndInvoke(`$TempJob.PowerShellAsyncResult)")
  [Void]$StringBuilder.AppendLine("          # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("          [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$AutoRemove.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("      foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("        [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Receive-MyRSJob ********

  #region ******** function Remove-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Remove-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Force")
  [Void]$StringBuilder.AppendLine("      Force the Job to stop")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Force`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Force`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove all Jobs, Stop all Running if Forced")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Force -and `$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -match `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("        [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("    foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Remove-MyRSJob ********

  #region ******** RSPools Sample Code ********
  [Void]$StringBuilder.AppendLine("#region ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Test-Function")
  [Void]$StringBuilder.AppendLine("Function Test-Function")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Function -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, HelpMessage = `"Enter Value`", ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds (1000 * 5)")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: ```$Item = `$Item`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-Function")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Job `$ScriptBlock")
  [Void]$StringBuilder.AppendLine("`$ScriptBlock = {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      InputObject passed to script")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Script.ps1 -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Thread Script Variables")
  [Void]$StringBuilder.AppendLine("        [String]`$Mutex - Exist only if -Mutex was specified on the Start-MyRSPool command line")
  [Void]$StringBuilder.AppendLine("        [HashTable]`$SyncedHash - Always Exists, Default values `$SyncedHash.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$InputObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Generate Error Message to show in Error Buffer")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("  GenerateErrorMessage")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Enable Verbose logging")
  [Void]$StringBuilder.AppendLine("  `$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check is Thread is Enabled to Run")
  [Void]$StringBuilder.AppendLine("  if (`$SyncedHash.Enabled)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Call Imported Test Function")
  [Void]$StringBuilder.AppendLine("    Test-Function -Value `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check if a Mutex exist")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Mutex))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Open and wait for Mutex")
  [Void]$StringBuilder.AppendLine("      `$MyMutex = [System.Threading.Mutex]::OpenExisting(`$Mutex)")
  [Void]$StringBuilder.AppendLine("      [Void](`$MyMutex.WaitOne())")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Data to the Screen")
  [Void]$StringBuilder.AppendLine("    For (`$Count = 0; `$Count -le 8; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"```$InputObject = `$InputObject`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Release the Mutex if it Exists")
  [Void]$StringBuilder.AppendLine("    if (`$HasMutex)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMutex.ReleaseMutex()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: RSJob was Canceled`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region `$WaitScript")
  [Void]$StringBuilder.AppendLine("`$WaitScript = {")
  [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Completed `$(@(Get-MyRSJob | Where-Object -FilterScript { `$PSItem.State -eq 'Completed' }).Count) Jobs`"")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds 1000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("`$TestFunction = @{}")
  [Void]$StringBuilder.AppendLine("`$TestFunction.Add(`"Test-Function`", (Get-Command -Type Function -Name Test-Function).ScriptBlock)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Start and Get RSPool")
  [Void]$StringBuilder.AppendLine("`$RSPool = Start-MyRSPool -MaxJobs 8 -Functions `$TestFunction -PassThru #-Mutex `"TestMutex`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Create new RunspacePool and start 5 Jobs")
  [Void]$StringBuilder.AppendLine("1..10 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Add 5 new Jobs to an existing RunspacePool")
  [Void]$StringBuilder.AppendLine("11..20 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Disable Thread Script")
  [Void]$StringBuilder.AppendLine("#`$RSPool.SyncedHash.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Wait for all Jobs to Complete or Fail")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Wait-MyRSJob -SciptBlock `$WaitScript -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Receive Completed Jobs and Remove them")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Close RunspacePool")
  [Void]$StringBuilder.AppendLine("Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** RSPools Sample Code ********

  [Void]$StringBuilder.AppendLine("#endregion ******** Multiple Thread Functions ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptMultiThread"
}
#endregion function Build-MyFCGScriptMultiThread

#region function Build-MyFCGScriptJobsThreads
Function Build-MyFCGScriptJobsThreads ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptJobsThreads -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptJobsThreads"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** Jobs Multi Thread ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** Job Thread ScriptBlock ********
  [Void]$StringBuilder.AppendLine("#region ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("`$ThreadScriptJob = {")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Default Job Data that is returned to the Main Script, Returned values cannot be `$Null, Emptry strings are OK")
  [Void]$StringBuilder.AppendLine("  `$JobData = [PSCustomObject]@{`"Status`" = `"Processing...`";")
  [Void]$StringBuilder.AppendLine("                               `"BeginTime`" = (Get-Date);")
  [Void]$StringBuilder.AppendLine("                               `"EndTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("                               `"ErrorMessage`" = `"`"}")
  [Void]$StringBuilder.AppendLine("")
  #region function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("  #region function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("  function Test-MyWorkstation()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      How Long to Wait for Job to be Completed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("      [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("      [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("      [ValidateRange(30, 300)]")
  [Void]$StringBuilder.AppendLine("      [Int]`$Wait = 120,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Begin")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("          `"Credential`" = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Process")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Used to Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Default Custom Object for the Verify Function to Return, Since it will always return a value I create the Object with the default error / failure values and update the poperties as needed")
  [Void]$StringBuilder.AppendLine("        #region ******** Custom Return Object `$VerifyObject ********")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"FQDN`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"Found`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"UserName`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Domain`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"DomainMember`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ProductType`" = 0;")
  [Void]$StringBuilder.AppendLine("          `"Manufacturer`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Model`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IsMobile`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"SerialNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Memory`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"OperatingSystem`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"BuildNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Version`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ServicePack`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Architecture`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Is64Bit`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"LocalDateTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"InstallDate`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"LastBootUpTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IPAddress`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Status`" = `"Off-Line`";")
  [Void]$StringBuilder.AppendLine("          `"Time`" = [TimeSpan]::Zero")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        #endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Try")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("            `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("            ForEach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # I think this is Faster than using Test-Connection")
  [Void]$StringBuilder.AppendLine("              if ((([System.Net.NetworkInformation.Ping]::New()).Send(`$IPAddress)).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Primary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("                # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Get Job Data")
  [Void]$StringBuilder.AppendLine("                  `$MyCompData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.ComputerName = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.PartOfDomain)")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)``.`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.UserName = `"`$(`$MyCompData.UserName)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Domain = `"`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.DomainMember = `$MyCompData.PartOfDomain")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Manufacturer = `"`$(`$MyCompData.Manufacturer)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Model = `"`$(`$MyCompData.Model)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Memory = `"`$(`$MyCompData.TotalPhysicalMemory)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.Name -eq @(`$Computer.Split(`".`", [System.StringSplitOptions]::RemoveEmptyEntries))[0])")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    # Found Corrct Workstation")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Found = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                    [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                    [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                    if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Get Job Data")
  [Void]$StringBuilder.AppendLine("                      `$MyOSData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ProductType = `$MyOSData.ProductType")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.OperatingSystem = `"`$(`$MyOSData.Caption)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ServicePack = `"`$(`$MyOSData.CSDVersion)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.BuildNumber = `"`$(`$MyOSData.BuildNumber)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Version = `"`$(`$MyOSData.Version)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Architecture = `$(if ([String]::IsNullOrEmpty(`$MyOSData.OSArchitecture)) { `"32-bit`" }")
  [Void]$StringBuilder.AppendLine("                        else { `"`$(`$MyOSData.OSArchitecture)`" })")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Is64Bit = (`$VerifyObject.Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LocalDateTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.InstallDate = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LastBootUpTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                    else")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Status = `"Verify Operating System Error`"")
  [Void]$StringBuilder.AppendLine("                      [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyBIOSJob = Get-WmiObject -AsJob @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyBIOSJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyBIOSJob.State -eq `"Completed`" -and `$MyBIOSJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyBIOSData = Get-Job -ID `$MyBIOSJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.SerialNumber = `"`$(`$MyBIOSData.SerialNumber)`"")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify SerialNumber Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyBIOSJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyChassisJob = Get-WmiObject -AsJob @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyChassisJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyChassisJob.State -eq `"Completed`" -and `$MyChassisJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyChassisData = Get-Job -ID `$MyChassisJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.IsMobile = `$(@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains ((`$MyChassisData.ChassisTypes)[0]))")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify is Mobile Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyChassisJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Status = `"Wrong Workstation Name`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                else")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Status = `"Verify Workstation Error`"")
  [Void]$StringBuilder.AppendLine("                  [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("                Break")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Catch")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("            `$VerifyObject.Status = `"Workstation Not in DNS`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.Status = `"Invalid Computer Name`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.Time = ([DateTime]::Now - `$StartTime)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Return Custom Object with Collected Verify Information")
  [Void]$StringBuilder.AppendLine("        Write-Output -InputObject `$VerifyObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Params = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyJob = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyCompData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyBIOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyChassisData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$StartTime = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    End")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion")
  #endregion function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ((`$VerifyData = Test-MyWorkstation -ComputerName `$ComputerName).Found)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Clear all Previous Error Messages")
  [Void]$StringBuilder.AppendLine("      `$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("          `$VerifyData is a Custom Object the has the following properties that you can use in your script")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          ComputerName    : This is the Name of the Computer that is found, may be different than expected computer name")
  [Void]$StringBuilder.AppendLine("          FQDN            : FQDN of Found Workstation")
  [Void]$StringBuilder.AppendLine("          Found           : True / False - This is True if the Workstation that was pinged was the expected Workstation")
  [Void]$StringBuilder.AppendLine("          UserName        : Domain\UserName of Logged on User, Will be Blank if user is Logged on via RDP")
  [Void]$StringBuilder.AppendLine("          Domain          : Domain \ WorkGroup Workstation is a member of")
  [Void]$StringBuilder.AppendLine("          DomainMember    : True if member of a Domain")
  [Void]$StringBuilder.AppendLine("          ProductType     : Product Type of Installed Operating system")
  [Void]$StringBuilder.AppendLine("          Manufacturer    : Manufacturer of Computer")
  [Void]$StringBuilder.AppendLine("          Model           : Model of Computer")
  [Void]$StringBuilder.AppendLine("          Memory          : Total Memory in Bytes")
  [Void]$StringBuilder.AppendLine("          OperatingSystem : Installed Operating System")
  [Void]$StringBuilder.AppendLine("          ServicePack     : Installed Service Pack")
  [Void]$StringBuilder.AppendLine("          BuildNumber     : Build Number of Operating System")
  [Void]$StringBuilder.AppendLine("          Architecture    : 32-Bit or 64-Bit")
  [Void]$StringBuilder.AppendLine("          LocalDateTime   : Date / Time on the Remote Workstation")
  [Void]$StringBuilder.AppendLine("          InstallDate     : Date / Time the Workstation was Imaged")
  [Void]$StringBuilder.AppendLine("          LastBootUpTime  : Date / Time the Workstation was Rebooted")
  [Void]$StringBuilder.AppendLine("          IPAddress       : IP Address of the Workstation")
  [Void]$StringBuilder.AppendLine("          Status          : On-Line, Wrong Name, Unknown, Off-Line, Error")
  [Void]$StringBuilder.AppendLine("          ErrorMessage    : Error Message if Any")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        ******** Begin Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is found")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # if your Script Completed Sucessfully set returned `$JabData.Status to `"Done`" so row will not be processed a second time")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `"Done`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        ******** End Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is not found")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `$VerifyData.Status")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set returned Error Information `$JabData.ErrorMessage to the Last Error Message")
  [Void]$StringBuilder.AppendLine("      `$JobData.ErrorMessage = `$VerifyData.ErrorMessage")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Returned Job Status to indicate an error")
  [Void]$StringBuilder.AppendLine("    `$JobData.Status = `"Error - Catch`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set returned Error Information `$JabData.ErrorMessage to the last Error Message")
  [Void]$StringBuilder.AppendLine("    `$JobData.ErrorMessage = `"`$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Date / Time Job Finished")
  [Void]$StringBuilder.AppendLine("  `$JobData.EndTime = (Get-Date)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #Return Job Data to the Main Script")
  [Void]$StringBuilder.AppendLine("  `$JobData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JobData = `$Null")
  [Void]$StringBuilder.AppendLine("  `$VerifyData = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Job Thread ScriptBlock ********

  #region function Process-ListViewItemsJobs - Job
  [Void]$StringBuilder.AppendLine("#region function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("function Process-ListViewItemsJobs()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("       The Script Block to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxThreads")
  [Void]$StringBuilder.AppendLine("      Maximum Threads to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      Process Checked ListView Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Process-ListViewItems [-Sender ```$MyFormListView] -Thread `$Thread [-MaxThreads 4] [-Checked]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$MyFormListView,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$Thread = `$ThreadscriptJob,")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxThreads = 4,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$ListView.Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$False ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$Checked)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.CheckedItems)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.Items | Where-Object -FilterScript { `$PSItem.SubItems[1].Text -ne `"Done`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = @{}")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$ItemList.Count - 1")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -le `$ItemCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Verbose -Message `"Break For Loop`"")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        Write-Verbose -Message `"Begin Job Thread - `$Count`"")
  [Void]$StringBuilder.AppendLine("        `$ThreadHash.Add(`"`$Count`", (Start-Job -ScriptBlock `$Thread -ArgumentList (`$ItemList[`$Count].Name) -Name `"`$Count`"))")
  [Void]$StringBuilder.AppendLine("        `$ItemList[`$Count].SubItems[1].Text = `"Processing...`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        While ((`$ThreadHash.Count -eq `$MaxThreads) -or (`$ThreadHash.Count -and (`$Count -eq `$ItemCount)))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Write-Verbose -Message `"Break Outter While Loop`"")
  [Void]$StringBuilder.AppendLine("            break")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          While (@(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Running`" }).Count -eq `$ThreadHash.Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("            if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Break Inner While Loop`"")
  [Void]$StringBuilder.AppendLine("              break")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FailedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { @(`"Running`", `"Completed`") -NotContains `$PSItem.State })).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FailedJob in `$FailedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FailedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Failed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `"Failed`"")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FailedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [Void](Remove-Job -Id `$FailedJob.ID -Force)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FinishedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Completed`"})).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FinishedJob in `$FinishedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FinishedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Completed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$JobData = Receive-Job -Id `$FinishedJob.ID -Wait -AutoRemoveJob ")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `$JobData.Status")
  [Void]$StringBuilder.AppendLine("              if (`$Checked)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$ItemList[`$ThreadNum].Checked = `$False")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FinishedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Begin Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("      [Void](Get-Job | Remove-Job -Force)")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"End Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Count = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemList = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ThreadNum = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$True")
  [Void]$StringBuilder.AppendLine("      `$ListView.Sort()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Process-ListViewItemsJobs - Job

  [Void]$StringBuilder.AppendLine("#endregion ******** Jobs Multi Thread ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptJobsThreads"
}
#endregion function Build-MyFCGScriptJobsThreads

#region function Build-MyScriptCustomIcons
function Build-MyScriptCustomIcons ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptCustomIcons -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [String]$ControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptCustomIcons"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) $($ControlName) ImageList Icons ********")
  [Void]$StringBuilder.AppendLine("")

  #region ******** $FormIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$$($ScriptName)FormIcon ********")
  [Void]$StringBuilder.AppendLine("# Icons for Forms are 16x16")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)FormIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi3EhFIxzJm2Pejh/kHs5f5B7OX+Qezl/kHs5f5B7OX+Qezl/j3o4f4xz")
  [Void]$StringBuilder.AppendLine("KG2LciUUAAAAAAAAAAAAAAAAjXMkFpeGU+Soo6D/qKSi/6ikov+opKL/qKSi/6ikov+opKL/qKSi/6ikov+oo6D/mIZT5I93LRYAAAAAAAAAAJB3K3azrqz/v7u6/725uP+9ubj/vbm4/725uP+9ubj/vbm4/725")
  [Void]$StringBuilder.AppendLine("uP+9ubj/v7u6/7OurP+SejF2AAAAAAAAAACXgDuHw8C//3x4d/91cXD/dXFw/3VxcP91cXD/dXFw/3VxcP91cXD/dXFw/3x4d//DwL//mYNBhwAAAAAAAAAAmoQ/h7y5uP9xbWz/cW1s/3FtbP9xbWz/cW1s/3Ft")
  [Void]$StringBuilder.AppendLine("bP9xbWz/cW1s/3FtbP9xbWz/vLm4/52HRocAAAAAAAAAAJ6IQ4e9u7n/Z2Rj/3Bta/9oaWb/ZWNh/2VhYP9lYWD/ZWFg/2VhYP9lYWD/ZWFg/727uf+hjEqHAAAAAAAAAACijEeHv7y7/2hlZP+fnZz/b4d9/11f")
  [Void]$StringBuilder.AppendLine("XP9YVVT/WFVU/1hVVP9YVVT/WFVU/1hVVP+/vLv/pZBOhwAAAAAAAAAAppBLh8C9vP+DkZn/Noaw/410HP9KVWP/JlGg/0pIR/9KSEf/SkhH/0pIR/9KSEf/wL28/6mUUocAAAAAAAAAAKmTTofCv77/oqKh/6Wo")
  [Void]$StringBuilder.AppendLine("qP+Vkor/cXBw/1dZXf9LSEf/Q0A//0NAP/9IRUT/VFJQ/8K/vv+tmFaHAAAAAAAAAACkjEB24N7d/3Bubf95d3b/eXd2/3l3dv95d3b/eXd2/3l3dv95d3b/eXd2/3Bubf/g3t3/qJJKdgAAAAAAAAAAooo+FsS1")
  [Void]$StringBuilder.AppendLine("guTu7ev/5OPj/+Tj4//k4+P/5OPj/+Tj4//k4+P/5OPj/+Tj4//u7ev/xLWD5KmSSxYAAAAAAAAAAAAAAACljkQUqpRMbbmnan+6qGx/uqhsf7qobH+6qGx/uqhsf7qobH+5p2t/q5ZPbaiSShQAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA//+sQf//rEHAA6xBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQcADrEH//6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$$($ScriptName)FormIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"$($ScriptName)FormIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ScriptName)FormIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $FormIcon ********

  #region ******** $ExitIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$ExitIcon ********")
  [Void]$StringBuilder.AppendLine("`$ExitIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F")
  [Void]$StringBuilder.AppendLine("RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE")
  [Void]$StringBuilder.AppendLine("AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA")
  [Void]$StringBuilder.AppendLine("AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2")
  [Void]$StringBuilder.AppendLine("Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey")
  [Void]$StringBuilder.AppendLine("6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3")
  [Void]$StringBuilder.AppendLine("y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$ExitIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"ExitIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$ExitIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $ExitIcon ********

  #region ******** $HelpIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$HelpIcon ********")
  [Void]$StringBuilder.AppendLine("`$HelpIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9")
  [Void]$StringBuilder.AppendLine("f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV")
  [Void]$StringBuilder.AppendLine("S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq")
  [Void]$StringBuilder.AppendLine("6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg")
  [Void]$StringBuilder.AppendLine("JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn")
  [Void]$StringBuilder.AppendLine("NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9")
  [Void]$StringBuilder.AppendLine("XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$HelpIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"HelpIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$HelpIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $HelpIcon ********

  #region ******** $BugIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$BugIcon ********")
  [Void]$StringBuilder.AppendLine("`$BugIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE/UHwBQ1VsAUNVaAFDVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFjYfAp57/oAfvf/AH/4/wBx7vkAVtp0AAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVvYaSuR+P8jlv//DYX4/wB/+f8Acu//AHz2/gBV2GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABycHAgL2CxCyB86u4YbOL/BU7R/xd+8P8Jdu7/AELK/wB4")
  [Void]$StringBuilder.AppendLine("8/8AaejoKF2zCnFwcRwAAAAAAAAAAAAAAAAAAAAAdXJupTVdpY8tnvv/AkjO/wVLz/8lh/P/Ho35/w2D9/8Ah/7/AIH6/0Bfm7R0cW9zAAAAAAAAAAAAAAAAAAAAAGxudR08aKbzJ6b//y6g/P81of3/MJX4/yqT")
  [Void]$StringBuilder.AppendLine("+f8ilP3/AEnP/wBu7P83YqbXYmt9BgAAAAAAAAAAAAAAAAAAAAAAAAAAE2XNkheo//8npv//MaX//y+X+P8xl/r/MZz+/xp+7/8MiPr/CFrUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZ0W0Fpv7/CGrf/wtc")
  [Void]$StringBuilder.AppendLine("2P8qmfj/MJn5/xNl3v8ff+7/IpX+/wlX02MAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcltIZJSJAJD0/xKX9P8QjfH/IJr4/yua+f8MW9j/In3r/yWG8f9LZZWFbm9zSgAAAAAAAAAAAAAAAAAAAAB0cW5HZ2xzYSZe")
  [Void]$StringBuilder.AppendLine("luFPkLD/Inyv/yp1q/8ydaz/Onqu/zx4rf8yW5TbZmt0XnRxbjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRT1CZkI2M/2pmZf9jYF//XFlY/1RRUP9LSEf/RUNFjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AABxbmsbbWpny3BtbPGCfn3/Y2Bf/1xZWP9UUVD/SUZF72xpZr1vbGkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXJvMmxpZjBVUlFMdXJy9oOAf/9tamn/UExM9ExIR0RsaWZKdHFuGAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9MSyVSTk55UExMd0pGRiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA//+sQfw/rEH4H6xB8A+sQcADrEHAA6xBwAOsQeAHrEHgB6xBwAOsQcADrEHwD6xB4AesQeAHrEH8P6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$BugIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"BugIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$BugIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $BugIcon ********

  #region ******** $CheckIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$CheckIcon ********")
  [Void]$StringBuilder.AppendLine("`$CheckIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKyN4A5tT7vP7hF30K6SDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAACasKp9Eu0r/qe6y/5Dimf8+uETPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqmHJ84tT3/oOip/6DurP+19b//ctN6/z24Q4AAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gDp9Gu0v/oOap/47lmv+E5pH/ne+p/6/zuf9KvlD/O7dBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaAp87tT//mOCh/4Tdj/963of/qOyy/5nspf+s87f/l+af/zi1")
  [Void]$StringBuilder.AppendLine("Pc8AAAAAAAAAAAAAAAAAAAAAAAAAAACYAI80sTj/kNuZ/3nWhf9/2ov/n+ao/3nUgP+p7bP/keue/7LzvP9s0HT/N7U8gAAAAAAAAAAAAAAAAAAAAAAAlwD/idaS/3DPe/9104D/l+Cg/0K5R/8ToxX/gtiJ/53q")
  [Void]$StringBuilder.AppendLine("qP+S6p//p+2x/0O7SP81tDowAAAAAAAAAAAAAAAAAJYA/37Qhv+F1Y//htaO/y+vMv8HnAefEKESQCWrKP+j6Kz/h+SU/6HrrP+M35T/MrI33zSzORAAAAAAAAAAAACVAI8hpST/RLZJ/xGgE/8AmQCPAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAPoBCfWMRe/5zlpv963oj/pequ/2LJaf8xsjaPAAAAAAAAAAAAAAAAAJUAMACXAGAAmAAwAAAAAAAAAAAAAAAADJ8NEA6gD++J2pL/h96T/4DdjP+Y4qH/O7ZA/zCxNEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAJngpgL68y/5fgoP9r1Hj/jN2W/33Uhf8srzDfLrAyEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAidCb9nyW7/idqT/1rLaP+U3p3/V8Jd/yuuL48AAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmwUwD6AQ/4XVjf9mzHL/Zsxy/4fXkP8mrCr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOaA4A/tUP/iNWR/2/Nef+J1pH/JKwq/wAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAQApoC30y6Uv9mxW3/TLpR/xqmHL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZACACmgKfCJ0Ivw6g")
  [Void]$StringBuilder.AppendLine("D58ToxUQ+H+sQfB/rEHgP6xBwB+sQYAfrEEAD6xBAAesQQADrEEGA6xBjgGsQf8ArEH/gKxB/4CsQf/ArEH/wKxB/+CsQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$CheckIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"CheckIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$CheckIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $CheckIcon ********

  #region ******** $UncheckIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$UncheckIcon ********")
  [Void]$StringBuilder.AppendLine("`$UncheckIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ps48SErOvGhqtEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eqRAqKsmvLy/TjwAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAA0Nsp8GBrf/CQm6/xQUtM8bG60QAAAAAAAAAAAAAAAAAAAAAB0dqhAnJ8bPODju/0BA9/81NdqfAAAAADc3v48HB7X/Bga3/wkJuv8MDL3/FRW1zxsbrBAAAAAAAAAAAB0dqhAjI8LPLy/k/zY2")
  [Void]$StringBuilder.AppendLine("7P87O/L/PT30/y4u0I9ERMSvVFTO/wkJt/8ICLn/Cwu8/w4OwP8WFrfPHBysEBwcqxAfH77PJiba/yws4P8xMeb/NTXr/zY27P8pKcevGRmvEEVFxM9VVc//Cwu5/woKu/8NDb//ERHD/xgYuM8bG7vPHh7R/yMj")
  [Void]$StringBuilder.AppendLine("1v8nJ9v/Kyvg/y4u4/8mJsXPHh6pEAAAAAAZGa8QRUXEz1VV0P8MDLv/DAy+/w8Pwf8TE8X/FxfJ/xsbzv8fH9L/IiLW/yUl2f8iIsHPHR2qEAAAAAAAAAAAAAAAABkZrhBGRsTPVlbQ/w4OvP8ODr//ERHD/xQU")
  [Void]$StringBuilder.AppendLine("xv8XF8r/GhrN/x4e0f8eHr7PHR2qEAAAAAAAAAAAAAAAAAAAAAAAAAAAGhquEEZGxc9NTc//DAy9/w4OwP8REcP/FBTG/xYWyf8bG7rPHByrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrhAlJbjPLi7E/x0d")
  [Void]$StringBuilder.AppendLine("wf8ODr7/Dg7A/xAQwv8TE8X/GBi4zxwcrBAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxAmJrnPNDTE/zIyxf8wMMX/Ly/G/ygoxf8gIMT/Hx/F/x8fxv8jI7rPGxusEAAAAAAAAAAAAAAAABgYsBAoKLnPOTnE/zY2")
  [Void]$StringBuilder.AppendLine("xP80NMT/MjLF/zAwxf9oaNf/MTHH/y4ux/8uLsj/LS3J/yMjuc8bG60QAAAAABcXsRArK7rPPj7F/zs7xf85OcT/NjbE/zQ0xP8lJbjPT0/Hz3Bw2f8yMsb/Ly/G/y4uxv8uLsf/JCS5zxoarRBTU8qvVFTM/0FB")
  [Void]$StringBuilder.AppendLine("xv8+PsX/OzvF/zk5xP8mJrnPGRmuEBoarhBQUMfPcXHY/zMzxf8wMMX/MDDF/zAwxf8kJLivY2PQj5iY5v9TU8z/QUHG/z4+xf8oKLnPGRmvEAAAAAAAAAAAGhquEFBQx89yctj/NTXF/zIyxP8yMsT/Jye6jwAA")
  [Void]$StringBuilder.AppendLine("AABpadOfmJjm/1RUzP8rK7rPGBiwEAAAAAAAAAAAAAAAAAAAAAAZGa8QUFDIz3R02P84OMT/KSm7nwAAAAAAAAAAAAAAAGNj0I9TU8qvFxewEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxBQUMivSkrFjwAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAx+OsQYPBrEEBgKxBAACsQQAArEGAAaxBwAOsQeAHrEHgB6xBwAOsQYABrEEAAKxBAACsQQGArEGDwaxBx+OsQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$UncheckIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"UnCheckIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$UncheckIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $UncheckIcon ********
  
  #region ******** $FavoriteIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$FavoriteIcon ********")
  [Void]$StringBuilder.AppendLine("`$FavoriteIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmk9lALofTfDp3xcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ52WApdde/LHHTcAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAJpfeAHLb6/xSn9P8RmO6vFJTrEAAAAAAAAAAAIILfECJ/3a8ukuP/PK7t/yxx058AAAAAAAAAAAAAAAAAAAAACaT2QBWu+P8lxv//F673/xWT6t8YjudAHYfiMB+E4N8npe7/PNL//zKT")
  [Void]$StringBuilder.AppendLine("4/8rctRQAAAAAAAAAAAAAAAAAAAAAAAAAAALofTvKMf//x3B//8UtPv/F5Pq/xiO5/8Wrvj/IcT//yzJ//8qe9n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6D0ryG7+/8ixP//GL7//w+2/f8Gsf3/B7X//xK7")
  [Void]$StringBuilder.AppendLine("//8drvX/KHbXrwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyf82Aisfb/NMz//x7C//8Vvf//DLj//wW0//8Es///GZPp/yd32GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALoPSfLbT1/2zi//9E0v//HcH//xW9")
  [Void]$StringBuilder.AppendLine("//8Puf//Crb//x2M5f8odtefK3LUEAAAAAAAAAAAAAAAAAWp+jAIpvfPO8H5/2/j/v905f//cuP//2be//9Bz///I8P//xS8//8Ru///H5To/yxx088ubdEwAAAAAAGv/nANr/vvWdj9/3vs//956f//d+f//3Xm")
  [Void]$StringBuilder.AppendLine("//905P//cuP//3Li//9i2///UdT//0XQ//87tvT/NHPS/zJnzXAavf//fu3//4Pw//9/7v//fOv//3rq//956P//d+b//3bl//915P//deT//3Xj//904///dOP//3Dc/P8/ftb/Aa/+3wSr+/8Ipvj/C6H0/yOr")
  [Void]$StringBuilder.AppendLine("9P8srPL/aNr7/3vp//966P//btr7/zeZ5v81juD/KXXX/yxx0/8wbND/MmfN7wAAAAAAAAAAAAAAAAAAAAAAAAAAE5bscEO69P9+7P//fer//0iw7f8hgd5wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAABOW7BAinu3/g+7//4Ht//8rkeT/IYHeIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZLqr2TS+P9y3Pr/HoThzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAABaR6WBDtPD/Tbfv/x2F4mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWkekQIJTo7yOQ5e8dhuIQAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAx+OsQcGDrEHAA6xB4AesQeAHrEHgB6xB4AOsQYABrEEAAKxBAACsQQAArEH4H6xB+B+sQfw/rEH8P6xB/D+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$FavoriteIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($ScriptName)SmallImageList.Images.Add(`"FavoriteIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$FavoriteIcon))))")
  #endregion ******** $FavoriteIcon ********
  
  [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) $($ControlName) ImageList Icons ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyScriptCustomIcons"
}
#endregion function Build-MyScriptCustomIcons

#endregion **** Build Script Fucntions ****

# ---------------------------
# Build Script Code Functions
# ---------------------------
#region function Build-MyFCGScriptLibrary
function Build-MyFCGScriptLibrary ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyFCGScriptLibrary -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyFCGScriptLibrary"

  $StringBuilder = [System.Text.StringBuilder]::New()

  #region ******** My Code ********

  [Void]$StringBuilder.Append((Build-MyFCGScriptDefEnums -ScriptName $ScriptName))
  [Void]$StringBuilder.Append((Build-MyFCGScriptDefClasses -ScriptName $ScriptName))
  [Void]$StringBuilder.Append((Build-MyFCGScriptWindowsAPIs -ScriptName $ScriptName))
  [Void]$StringBuilder.Append((Build-MyFCGScriptFunctions -ScriptName $ScriptName))
  [Void]$StringBuilder.Append((Build-MyFCGScriptMultiThread -ScriptName $ScriptName))
  [Void]$StringBuilder.Append((Build-MyFCGScriptJobsThreads -ScriptName $ScriptName))

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyFCGScriptLibrary"
}
#endregion function Build-MyFCGScriptLibrary

#region function Build-MyScriptEvent
Function Build-MyScriptEvent ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Build-MyScriptEvent
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [String]$ScriptName,
    [String]$ControlName,
    [MyFormControl]$Control,
    [MyFormControlEvent[]]$Events,
    [Switch]$NoAdd
  )
  Write-Verbose -Message "Enter Function Build-MyScriptEvent"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  ForEach ($Event In $Events)
  {
    If ($Control.Name -eq "Form")
    {
      $FunctionName = "$($ScriptName)$($Control.Name)$($Event.Name)"
    }
    Else
    {
      $FunctionName = "$($ScriptName)$($ControlName)$($Control.Name)$($Event.Name)"
    }
    
    #region ******** My Code ********
    [Void]$StringBuilder.AppendLine("#region ******** Function Start-$($FunctionName) ********")
    [Void]$StringBuilder.AppendLine("function Start-$($FunctionName)")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      $($Event.Name) Event for the $($ScriptName)$($ControlName) $($Control.Name) Control")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      $($Event.Name) Event for the $($ScriptName)$($ControlName) $($Control.Name) Control")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
    [Void]$StringBuilder.AppendLine("       The $($ControlName) Control that fired the $($Event.Name) Event")
    [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
    [Void]$StringBuilder.AppendLine("       The Event Arguments for the $($ControlName) $($Event.Name) Event")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("       Start-$($FunctionName) -Sender `$Sender -EventArg `$EventArg")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
    [Void]$StringBuilder.AppendLine("  param (")
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    
    If ($Control.Name -eq "ToolStripMenuItem")
    {
      [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItem]`$Sender,")
    }
    Else
    {
      [Void]$StringBuilder.AppendLine("    [$($Control.Fullname)]`$Sender,")
    }
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [Object]`$EventArg")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter $($Event.Name) Event for `$(`$MyInvocation.MyCommand)`"")
    [Void]$StringBuilder.AppendLine("")
    
    If (($Control.Name -eq "Timer") -and ($Event.Name -eq "Tick"))
    {
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AutoExit += 1")
      [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Auto Exit in `$([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes`"")
      [Void]$StringBuilder.AppendLine("  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Form.Close()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Auto Exit in `$([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes`"")
      [Void]$StringBuilder.AppendLine("  }")
    }
    Else
    {
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AutoExit = 0")
    }
    [Void]$StringBuilder.AppendLine("")
    
    Switch ($Control.Name)
    {
      { $PSItem -in @("ListBox", "CheckedListBox") }
      {
        #region ListBox, CheckedListBox
        Switch ($Event.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  `$TempIndex = `$Sender.IndexFromPoint(`$EventArg.location)")
            [Void]$StringBuilder.AppendLine("  if ((`$TempIndex -gt -1) -and (`$Sender.SelectedIndices -notcontains `$TempIndex))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.SelectedIndex = `$TempIndex")
            [Void]$StringBuilder.AppendLine("    #`$Sender.SelectedNode = `$TempNode")
            [Void]$StringBuilder.AppendLine("    #`$$($ScriptName)$($ControlName)ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  `$TempIndex = `$Null")
            Break
          }
        }
        Break
        #endregion ListBox, CheckedListBox
      }
      "TextBox"
      {
        #region TextBox
        Switch ($Event.Name)
        {
          "GotFocus"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  if (`$Sender.Tag.HintEnabled)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Text = `"`"")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "KeyPress"
          {
            [Void]$StringBuilder.AppendLine("    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
            [Void]$StringBuilder.AppendLine("    # `$ValidChars = `"[\s\w\d\.\-_]`"")
            [Void]$StringBuilder.AppendLine("    #`$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))")
            Break
          }
          "KeyUp"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
            Break
          }
          "LostFocus"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Text = `$Sender.Tag.HintText")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = `$True")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Hint")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = `$False")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
        #endregion TextBox
      }
      "WebBrowser"
      {
        #region WebBrowser
        Switch ($Event.Name)
        {
          "NewWindow"
          {
            [Void]$StringBuilder.AppendLine("  #`$WebBrowser.Tag = @{ `"URL`" = `"`" }")
            [Void]$StringBuilder.AppendLine("  if (-not [String]::IsNullOrEmpty(`$Sender.Tag.URL))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$EventArg.Cancel = `$True")
            [Void]$StringBuilder.AppendLine("    Show-MyWebReport -ReportURL (`$Sender.Tag.URL)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "StatusTextChanged"
          {
            [Void]$StringBuilder.AppendLine("  #`$WebBrowser.Tag = @{ `"URL`" = `"`"}")
            [Void]$StringBuilder.AppendLine("  if (`$Sender.StatusText -match `"https?://`")")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.URL = `$Sender.StatusText")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.StatusText = `"`"")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
        #endregion WebBrowser
      }
      "ListView"
      {
        #region ListView
        Switch ($Event.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty((`$TmpItem = `$Sender.GetItemAt(`$EventArg.Location.X, `$EventArg.Location.Y))))")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      # Show Item Selected Context Menu")
            [Void]$StringBuilder.AppendLine("      If (`$Sender.SelectedIndices -notcontains `$TmpItem.Index)")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$Sender.SelectedIndices.Add(`$TmpItem.Index) | Out-Null")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("      #`$$($ScriptName)$($ControlName)ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("    #`$$($ScriptName)$($ControlName)ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "ColumnClick"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Column = `$EventArg.Column")
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Ascending = (-not `$Sender.ListViewItemSorter.Ascending)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Sort()")
            Break
          }
          "DrawColumnHeader"
          {
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), `$EventArg.Bounds)")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, `$EventArg.Bounds.Width, (`$EventArg.Bounds.Height - 1))")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawString(`$EventArg.Header.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), (`$EventArg.Bounds.X + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Y + ((`$EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))")
            Break
          }
          {
            $PSItem -in @("DrawItem", "DrawSubItem")
          }
          {
            [Void]$StringBuilder.AppendLine("  # Return to Default Draw")
            [Void]$StringBuilder.AppendLine("  `$EventArg.DrawDefault = `$True")
          }
          
        }
        Break
        #endregion ListView
      }
      "TabControl"
      {
        #region TabControl
        Switch ($Event.Name)
        {
          "DrawItem"
          {
            [Void]$StringBuilder.AppendLine("  `$TmpTabPage = `$Sender.TabPages[`$EventArg.Index]")
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Index -eq `$Sender.SelectedIndex)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$TmpForeClr = [MyConfig]::Colors.TitleFore")
            [Void]$StringBuilder.AppendLine("    `$TmpBackClr = [MyConfig]::Colors.TitleBack")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  Else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$TmpForeClr = `$TmpTabPage.ForeColor")
            [Void]$StringBuilder.AppendLine("    `$TmpBackClr = `$TmpTabPage.BackColor")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  ")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New(`$TmpBackClr)), `$EventArg.Bounds)")
            [Void]$StringBuilder.AppendLine("  `$TmpIcon = `$Sender.ImageList.Images[`$TmpTabPage.ImageKey]")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawImage(`$TmpIcon, (`$EventArg.Bounds.Left + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Top + ((`$EventArg.Bounds.Height - `$TmpIcon.Height) / 2)))")
            [Void]$StringBuilder.AppendLine("  `$TmpSize = `$EventArg.Graphics.MeasureString(`$TmpTabPage.Text, `$Sender.Font)")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawString(`$TmpTabPage.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New(`$TmpForeClr)), (`$EventArg.Bounds.Left + (((`$EventArg.Bounds.Width + `$TmpIcon.Width) - `$TmpSize.Width) / 2)), (`$EventArg.Bounds.Top + ((`$EventArg.Bounds.Height - `$TmpSize.Height) / 2)))")
            Break
          }
        }
        Break
        #endregion TabControl
      }
      "DataGridView"
      {
        #region DataGridView
        Switch ($Event.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  #`$Sender.HitTest(`$EventArg.X, `$EventArg.Y)")
            Break
          }
        }
        Break
        #endregion DataGridView
      }
      "TreeView"
      {
        #region TreeView
        Switch ($Event.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  # Show Context Menu")
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty((`$TempNode = `$Sender.GetNodeAt(`$EventArg.Location))))")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      #`$Sender.SelectedNode = `$TempNode")
            [Void]$StringBuilder.AppendLine("      #`$$($ScriptName)$($ControlName)ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
        #endregion TreeView
      }
      "ToolStripMenuItem"
      {
        #region ToolStripItem
        Switch ($Event.Name)
        {
          "Click"
          {
            [Void]$StringBuilder.AppendLine("  Switch (`$Sender.Name)")
            [Void]$StringBuilder.AppendLine("  {")
            If ($ControlName -eq "Top")
            {
              [Void]$StringBuilder.AppendLine("    `"Bug`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Submiting Request / Bug Report`"")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Refresh()")
              [Void]$StringBuilder.AppendLine("      Show-MyWebReport -ReportURL ([MyConfig]::BugURL)")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"Help`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Help")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Help`"")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Refresh()")
              [Void]$StringBuilder.AppendLine("      #Show-MyWebReport -ReportURL ([MyConfig]::HelpURL)")
              [Void]$StringBuilder.AppendLine("      `$DialogResult = Show-ScriptInfo -Topics `$$($DialogName)Topics -Title `"`$([MyConfig]::ScriptName) `$([MyConfig]::ScriptVersion)`" -InfoTitle `"$($ScriptName) Help Topics`"")
              [Void]$StringBuilder.AppendLine("      If (`$DialogResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Help Shown`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Help Shown`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("      #endregion Show Help")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"Exit`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Exit Utility")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Exiting `$([MyConfig]::ScriptName)`"")
              [Void]$StringBuilder.AppendLine("      `$$($ScriptName)BtmStatusStrip.Refresh()")
              [Void]$StringBuilder.AppendLine("      If ([MyConfig]::Production)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        `$$($ScriptName)Form.Close()")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # **** Testing - Exit to Nested Prompt ****")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
              [Void]$StringBuilder.AppendLine("        `$Host.EnterNestedPrompt()")
              [Void]$StringBuilder.AppendLine("        # **** Testing - Exit to Nested Prompt ****")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("      #endregion Exit Utility")
              [Void]$StringBuilder.AppendLine("    }")
            }
            Else
            {
              [Void]$StringBuilder.AppendLine("    `"$($ScriptName)`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
            }
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
        #endregion ToolStripItem
      }
      "Form"
      {
        #region Form
        Switch ($Event.Name)
        {
          "Shown"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.Refresh()")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 1 -Category 0 -Message `"Begin Running `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  `$HashTable = @{`"ShowHeader`" = `$True}")
            [Void]$StringBuilder.AppendLine("  `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Display-Initiliaze$($ScriptName)Utility -RichTextBox `$RichTextBox -HashTable `$HashTable }")
            [Void]$StringBuilder.AppendLine("  `$DialogResult = Show-RichTextStatus -ScriptBlock `$ScriptBlock -Title `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    # Enable `$$($ScriptName)Timer")
            [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "KeyDown"
          {
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Control -and `$EventArg.Alt)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    Switch (`$EventArg.KeyCode)")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      `"F10`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        If (`$$($ScriptName)Form.Tag)")
            [Void]$StringBuilder.AppendLine("        {")
            [Void]$StringBuilder.AppendLine("          # Hide Console Window")
            [Void]$StringBuilder.AppendLine("          `$Script:VerbosePreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("          `$Script:DebugPreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("          [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("          [Void][Console.Window]::Hide()")
            [Void]$StringBuilder.AppendLine("          `$$($ScriptName)Form.Tag = `$False")
            [Void]$StringBuilder.AppendLine("        }")
            [Void]$StringBuilder.AppendLine("        Else")
            [Void]$StringBuilder.AppendLine("        {")
            [Void]$StringBuilder.AppendLine("          # Show Console Window")
            [Void]$StringBuilder.AppendLine("          `$Script:VerbosePreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("          `$Script:DebugPreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("          [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("          [System.Console]::Title = `"DEBUG: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("          `$$($ScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("        }")
            [Void]$StringBuilder.AppendLine("        `$$($ScriptName)Form.Activate()")
            [Void]$StringBuilder.AppendLine("        `$$($ScriptName)Form.Select()")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  Else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    Switch (`$EventArg.KeyCode)")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      `"F1`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$$($ScriptName)ToolTip.Active = (-not `$$($ScriptName)ToolTip.Active)")
            [Void]$StringBuilder.AppendLine("        `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Enable / Disable $([MyConfig]::ScriptName) ToolTips = `$(`$$($ScriptName)ToolTip.Active)`"")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("      `"F2`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Change Log for `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("        `$ScriptContents = (`$Script:MyInvocation.MyCommand.ScriptBlock).ToString()")
            [Void]$StringBuilder.AppendLine("        `$CLogStart = (`$ScriptContents.IndexOf(`"<#`") + 2)")
            [Void]$StringBuilder.AppendLine("        `$CLogEnd = `$ScriptContents.IndexOf(`"#>`")")
            [Void]$StringBuilder.AppendLine("        Show-ChangeLog -ChangeText (`$ScriptContents.SubString(`$CLogStart, (`$CLogEnd - `$CLogStart)))")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "Closing"
          {
            [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 2 -Category 0 -Message `"Exiting `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"CLOSING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "Load"
          {
            [Void]$StringBuilder.AppendLine("  `$Screen = ([System.Windows.Forms.Screen]::FromControl(`$Sender)).WorkingArea")
            [Void]$StringBuilder.AppendLine("  `$Sender.Left = [Math]::Floor((`$Screen.Width - `$Sender.Width) / 2)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Top = [Math]::Floor((`$Screen.Height - `$Sender.Height) / 2)")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    # Disable Control Close Menu / [X]")
            [Void]$StringBuilder.AppendLine("    #[ControlBox.Menu]::DisableFormClose(`$$($ScriptName)Form.Handle)")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Hide()")
            [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Form.Tag = `$False")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"DEBUG: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
        #endregion Form
      }
      Default
      {
        Switch ($Event.Name)
        {
          "ColumnClick"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Column = `$EventArg.Column")
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Ascending = (-not `$Sender.ListViewItemSorter.Ascending)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Sort()")
            Break
          }
          "DrawItem"
          {
            [Void]$StringBuilder.AppendLine("  #`$EventArg.DrawBackground()")
            [Void]$StringBuilder.AppendLine("  #`$EventArg.Graphics.DrawString(`$Sender.Items[`$EventArg.Index].Text, `$EventArg.Font, `$([System.Drawing.SolidBrush]::New(`$Sender.ForeColor)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, [System.Drawing.StringFormat]::GenericTypographic)")
            Break
          }
          Default
          {
            [Void]$StringBuilder.AppendLine("  #`$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"`$(`$Sender.Name)`"")
            Break
          }
        }
        Break
      }
    }
    
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit $($Event.Name) Event for `$(`$MyInvocation.MyCommand)`"")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion ******** Function Start-$($FunctionName) ********")
    If (-not $NoAdd.IsPresent)
    {
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)$($ControlName)$($Control.Name).$($Event.AddMethod)({Start-$($FunctionName) -Sender `$This -EventArg `$PSItem})")
    }
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** My Code ********
    
    $FunctionName = $Null
  }
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  $ControlName = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptEvent"
}
#endregion function Build-MyScriptEvent

#region function Build-MyScriptControl
function Build-MyScriptControl ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Build-MyScriptControl
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$ScriptName,
    [String]$ControlName,
    [MyFormControl]$Control
  )
  Write-Verbose -Message "Enter Function Build-MyScriptControl"

  $StringBuilder = [System.Text.StringBuilder]::New()

  if ($Control.Name -eq "Form")
  {
    $TempName = "$($ScriptName)"
    $TempControlName = "$($ScriptName)$($Control.Name)"
    $TempControl = "`$$($ScriptName)$($Control.Name)"
  }
  else
  {
    $TempName = "$($ScriptName)$($ControlName)"
    $TempControlName = "$($ScriptName)$($ControlName)$($Control.Name)"
    $TempControl = "`$$($ScriptName)$($ControlName)$($Control.Name)"
  }

  #region ******** My Code ********

  # Form Container Controls Notes / Comments Section
  if ($Control.Name -in @("ImageList", "Form", "ContextMenuStrip", "MenuStrip", "ToolStrip", "ToolStripContainer", "StatusStrip", "GroupBox", "Panel", "SplitContainer", "TabControl"))
  {
    [Void]$StringBuilder.AppendLine("# ************************************************")
    [Void]$StringBuilder.AppendLine("# $($TempName) $($Control.Name)")
    [Void]$StringBuilder.AppendLine("# ************************************************")
  }
  if ($Control.Name -eq "Button")
  {
    [Void]$StringBuilder.AppendLine("# Evenly Space Buttons - Move Size to after Text")
    [Void]$StringBuilder.AppendLine("#`$NumButtons = 2")
    [Void]$StringBuilder.AppendLine("#`$TempSpace = [Math]::Floor(`$Container.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
    [Void]$StringBuilder.AppendLine("#`$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
    [Void]$StringBuilder.AppendLine("#`$TempMod = `$TempSpace % `$NumButtons")
    [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Drawing.Size]::New(`$TempWidth, $($TempName).PreferredSize.Height)")
    [Void]$StringBuilder.AppendLine("")
  }
  [Void]$StringBuilder.AppendLine("#region $($TempControl) = [$($Control.FullName)]::New()")
  #region ******** Add Constructors ********
  if ($Control.Name -in @("Timer", "ImageList", "ToolTip", "NotifyIcon"))
  {
    [Void]$StringBuilder.AppendLine("$($TempControl) = [$($Control.FullName)]::New(`$$($ScriptName)FormComponents)")
  }
  else
  {
    ForEach ($Constructor in $Control.Constructors)
    {
      [Void]$StringBuilder.AppendLine("$($TempControl) = [$($Control.FullName)]::New($($Constructor | ForEach-Object -Process { @($PSItem.Parameter | ForEach-Object -Process { "[$($PSItem.ParameterType)]`$$($PSItem.Name)" }) -join ", " }))")
    }
  }
  #endregion ******** Add Constructors ********

  #region ******** Add Control ********
  Switch ($Control.Name)
  {
    { $PSItem -in @("Timer", "ImageList", "ToolTip", "NotifyIcon", "Form", "ColorDialog", "FolderBrowserDialog", "FontDialog", "OpenFileDialog", "PageSetupDialog", "PrintPreviewDialog", "SaveFileDialog") }
    {
      # Skip These Controls
      Break
    }
    "Button"
    {
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Controls.Add($($TempControl))")
      Break
    }
    "ColumnHeader"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$ListView.Columns.Add($($StringBuilder))")
      Break
    }
    "TreeNode"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$TreeView.Nodes.Add($($TempControl))")
      Break
    }
    "ListViewItem"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$ListView.Items.Add($($TempControl))")
      Break
    }
    "GroupBox"
    {
      [Void]$StringBuilder.AppendLine("# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Controls.Add($($TempControl))")
      Break
    }
    "TabPage"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$TabControl.Controls.Add($($TempControl))")
      Break
    }
    "DataGridView"
    {
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Controls.Add($TempControl)")
      Break
    }
    { $PSItem -like @("DataGridView*") }
    {
      [Void]$StringBuilder.AppendLine("[Void]`$DataGridView.Columns.Add($($TempControl))")
      Break
    }
    { $PSItem -in @("ContextMenuStrip", "MenuStrip", "ToolStrip", "StatusStrip") }
    {
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Controls.Add($($TempControl))")
      if ($Control.Name -eq "MenuStrip")
      {
        [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Main$($Control.Name) = $($TempControl)")
      }
      else
      {
        [Void]$StringBuilder.AppendLine("#`$$($ScriptName)Form.$($Control.Name) = $($TempControl)")
      }
      Break
    }
    { $PSItem -like @("ToolStrip*") }
    {
      [Void]$StringBuilder.AppendLine("#[Void]`$ToolMenuStrip.Items.Add($($TempControl))")
      [Void]$StringBuilder.AppendLine("#[Void]`$ToolMenuStrip.DropDownItems.Add($($TempControl))")
      Break
    }
    Default
    {
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Controls.Add($TempControl)")
      Break
    }
  }
  #endregion ******** Add Control ********

  #region ******** Add Properties ********
  ForEach ($Property in $Control.Properties)
  {
    Switch ($Property.PropertyType)
    {
      { $PSItem -in @("System.Windows.Forms.IWindowTarget", "System.ComponentModel.ISite", "System.IFormatProvider") }
      {
        # Ignore These Properties...
        Break
      }
      "System.String"
      {
        #region System.String
        Switch ($Property.Name)
        {
          "DisplayMember" { $CodeValue = "`"Text`""; Break }
          "ValueMember" { $CodeValue = "`"Value`""; Break }
          "Name" { $CodeValue = "`"$($TempControlName)`""; Break }
          "ToolTipTitle" { $CodeValue = "`"`$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`""; Break }
          "Text"
          {
            Switch ($Control.Name)
            {
              "Form"
              {
                $CodeValue = "`"`$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`""
                Break
              }
              "TextBox"
              {
                $CodeValue = "`$$($TempControlName).Tag.HintText"
                Break
              }
              default
              {
                $CodeValue = "`"$($TempControlName)`""
                Break
              }
            }
            Break
          }
          Default { $CodeValue = "`"$($Property.Default)`""; Break }
        }
        switch ($Property.Name)
        {
          "Name"
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            Break
          }
          "Text"
          {
            if ($Control.Name -in ("Button", "CheckBox", "Form", "GroupBox", "Label", "LinkLabel", "MaskedTextBox", "MenuItem", "RadioButton", "TextBox", "TooStripButton", "TooStripLabel", "TooStripMenuItem", "TooStripStatusLabel", "TooStripTextBox", "TreeNode"))
            {
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            Break
          }
          Default
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
            Break
          }
        }
        #endregion System.String
        Break
      }
      "System.Char"
      {
        #region System.Char
        if ($Property.Name -eq "PasswordChar")
        {
          $CodeValue = "`"`""
        }
        else
        {
          $CodeValue = "`"$($Property.Default)`""
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Char
        Break
      }
      "System.Boolean"
      {
        #region System.Boolean
        if ((($Control.Name -eq "Form") -and ($Property.Name -eq "KeyPreview")) -or (($Control.Name -eq "Button") -and ($Property.Name -eq "KeyPreview")))
        {
          $CodeValue = "`$True"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        ElseIf (($Control.Name -in @("ListBox", "CheckedListBox")) -and ($Property.Name -eq "IntegralHeight"))
        {
          $CodeValue = "`$False"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "`$$($Property.Default)"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Boolean
        Break
      }
      "System.Int32"
      {
        #region System.Int32
        Switch ($Property.Name)
        {
          "ItemHeight" { $CodeValue = "[MyConfig]::Font.Height"; Break }
          "Interval" { $CodeValue = "[MyConfig]::AutoExitTic"; Break }
          Default { $CodeValue = "$($Property.Default)"; Break }
        }
        if ($Control.Name -eq "Timer")
        {
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Int32
        Break
      }
      "System.Int32[]"
      {
        $CodeValue = ($Property.Default -join ", ")
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.String[]"
      {
        $CodeValue = ($Property.Default -join ", ")
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Double"
      {
        $CodeValue = "$($Property.Default)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Single"
      {
        $CodeValue = "$($Property.Default)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Decimal"
      {
        $CodeValue = "$($Property.Default)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.DateTime"
      {
        $CodeValue = "[DateTime]::Parse(`"$($Property.Default))`""
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Object"
      {
        #region System.Object
        switch ($Property.Name)
        {
          "Tag"
          {
            Switch ($Control.Name)
            {
              "Form"
              {
                $CodeValue = "(-not [MyConfig]::Production)"
                Break
              }
              "WebBrowser"
              {
                $CodeValue = "@{ `"URL`" = `"`" }"
                Break
              }
              "TextBox"
              {
                $CodeValue = "@{ `"HintText`" = `"Please Enter a Valid Value.`"; `"HintEnabled`" = `$True }"
                Break
              }
              Default
              {
                $CodeValue = "[$($Property.PropertyType)]::New()"
                Break
              }
            }
          }
          Default
          {
            $CodeValue = "[$($Property.PropertyType)]::New()"
            Break
          }
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Object
        Break
      }
      "System.Drawing.Color"
      {
        #region System.Drawing.Color
        Switch ($Control.Name)
        {
          { $PSItem -in @("Form", "ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip") }
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.Fore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.Back"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($Property.Default.ToString())")
            }
            Break
          }
          { $PSItem -in @("TextBox")}
          {
            Switch ($Property.Name)
            {
              "ForeColor"
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.TextFore")
                $CodeValue = "[MyConfig]::Colors.TextHint"
                Break
              }
              "BackColor" { $CodeValue = "[MyConfig]::Colors.TextBack"; Break }
              Default { $CodeValue = "[System.Drawing.Color]::$($Property.Default.ToString())"; Break}  
            }
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            Break
          }
          { $PSItem -in @("ComboBox", "CheckedListBox", "ListBox", "ListView", "TreeView", "RichTextBox", "DateTimePicker", "DataGridView", "ToolStripComboBox", "ToolStripTextBox", "WebBrowser") }
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.TextFore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.TextBack"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($Property.Default.ToString())")
            }
            Break
          }
          "GroupBox"
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor"
                {
                  $CodeValue = "[MyConfig]::Colors.GroupFore"
                  [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
                  Break
                }
                "BackColor"
                {
                  $CodeValue = "[MyConfig]::Colors.Back"
                  [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
                  Break
                }
              }
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($Property.Default.ToString())")
            }
            Break
          }
          "Button"
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.ButtonFore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.ButtonBack"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($Property.Default.ToString())")
            }
            Break
          }
          { $PSItem -in @("Label", "CheckBox", "RadioButton") }
          {
            Switch ($Property.Name)
            {
              "ForeColor"
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.Fore")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.TitleFore")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.LabelFore")
                Break
              }
              "BackColor"
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.Back")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.TitleBack")
                Break
              }
              Default
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($Property.Default.ToString())")
                Break
              }
            }
          }
          Default
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.Fore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.Back"; Break }
              }
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [$($Property.PropertyType)]::$($Property.Default.ToString())")
            }
            Break
          }

        }
        #endregion System.Drawing.Color
        Break
      }
      "System.Drawing.Font"
      {
        #region System.Drawing.Font
        Switch ($Control.Name)
        {
          { $PSItem -in @("Form", "ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip") }
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            Break
          }
          "Label"
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Bold")
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Title")
            Break
          }
          "TextBox"
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = [MyConfig]::Font.Hint")
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            Break
          }
          { $PSItem -in @("GroupBox", "Button", "ListView", "TabControl", "CheckBox", "RadioButton") }
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Bold")
            Break
          }
          Default
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            Break
          }
        }
        #endregion System.Drawing.Font
        Break
      }
      "System.Drawing.Icon"
      {
        #region System.Drawing.Icon
        if ($Control.Name -eq "Form")
        {
          $CodeValue = "[System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ScriptName)FormIcon)))"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = `$$($ScriptName)Form.Icon")
          $CodeValue = "[System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$IconString)))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Drawing.Icon
        Break
      }
      "System.Drawing.Image"
      {
        $CodeValue = "[System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$ImageString)))"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Drawing.Point"
      {
        #region System.Drawing.Point
        if (($Control.Name -ne "Form") -and ($Property.Name -eq "Location"))
        {
          $CodeValue = "[$($Property.PropertyType)]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)"
          if (($Control.Name -in @("ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip")) -or (($Control.Name -in @("Panel", "SplitContainer")) -and ($ControlName -eq "Main")))
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
          }
          else
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
          }
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType)]::New($($Property.Default.X), $($Property.Default.Y))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Drawing.Point
        Break
      }
      "System.Drawing.Rectangle"
      {
        $CodeValue = "[$($Property.PropertyType)]::New($($Property.Default.X), $($Property.Default.Y), $($Property.Default.Width), $($Property.Default.Height))"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.AnchorStyles"
      {
        $CodeValue = "[$($Property.PropertyType)](`"$($Property.Default.ToString())`")"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.Cursor"
      {
        $CodeValue = "[$($Property.PropertyType)s]::Default"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.ImageList"
      {
        #region System.Windows.Forms.ImageList
        $CodeValue = "`$$($ScriptName)SmallImageList"
        if ($Control.Name -in @("ContextMenuStrip", "MenuStrip", "ToolStrip", "StatusStrip"))
        {
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Windows.Forms.ImageList
        Break
      }
      "System.Windows.Forms.Padding"
      {
        #region System.Windows.Forms.Padding
        if ($Control.Name -in @("Form", "Panel"))
        {
          $CodeValue = "[$($Property.PropertyType)]::New([MyConfig]::FormSpacer, $($Property.Default.Top), [MyConfig]::FormSpacer, $($Property.Default.Bottom))"
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType)]::New($($Property.Default.Left), $($Property.Default.Top), $($Property.Default.Right), $($Property.Default.Bottom))"
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Windows.Forms.Padding
        Break
      }
      { $PSItem -in @("System.Drawing.Size", "System.Drawing.SizeF") }
      {
        #region @("System.Drawing.Size", "System.Drawing.SizeF")
        if (($Control.Name -eq "Form") -and ($Property.Name -eq "MinimumSize"))
        {
          $CodeValue = "[$($Property.PropertyType)]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType)]::New($($Property.Default.Width), $($Property.Default.Height))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion @("System.Drawing.Size", "System.Drawing.SizeF")
        Break
      }
      "System.Collections.IComparer"
      {
        #region System.Collections.IComparer
        if ($Property.Name -eq "ListViewItemSorter")
        {
          $CodeValue = "[MyCustom.ListViewSort]::New()"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType)]::New()"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Collections.IComparer
        Break
      }
      { $Property.BaseType -eq "System.Enum" }
      {
        #region All Enumeration
        if (($Property.Name -eq "Dock") -and ($Control.Name -in @("Panel", "SplitContainer")) -and ($ControlName -eq "Main"))
        {
          $CodeValue = "[$($Property.PropertyType)]::Fill"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType)]::$($Property.Default.ToString())"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion All Enumeration
        Break
      }
      Default
      {
        $CodeValue = "[$($Property.PropertyType)]::New()"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
    }
  }

  Try
  {
    $DefaultControl.Dispose()
  }
  Catch { }
  $DefaultControl = $Null
  #endregion ******** Add Properties ********

  [Void]$StringBuilder.AppendLine("#endregion $($TempControl) = [$($Control.FullName)]::New()")
  [Void]$StringBuilder.AppendLine("")

  #region ******** How To Use / Call Dialogs ********
  If ($Control.Name -in @("OpenFileDialog", "SaveFileDialog", "FolderBrowserDialog"))
  {
    [Void]$StringBuilder.AppendLine("# How to Call / Use $($TempControl)")
    Switch ($Control.Name)
    {
      "OpenFileDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).FileName = `"`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Filter = `"CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).FilterIndex = 1")
        [Void]$StringBuilder.AppendLine("#$($TempControl).InitialDirectory = `$PSScriptRoot")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Multiselect = `$False")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Title = `"Show this Title to the User`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
      "SaveFileDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).FileName = `"`")")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Filter = `"CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).FilterIndex = 1")
        [Void]$StringBuilder.AppendLine("#$($TempControl).InitialDirectory = `$PSScriptRoot")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Title = `"Show this Title to the User`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
      "FolderBrowserDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).Description = `"Select a Random Folder`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).RootFolder = [System.Environment+SpecialFolder]::Desktop")
        [Void]$StringBuilder.AppendLine("#$($TempControl).SelectedPath = `"C:\Windows`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).ShowNewFolderButton = `$True")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
    }
    [Void]$StringBuilder.AppendLine("#If (`$Response -eq [System.Windows.Forms.DialogResult]::OK)")
    [Void]$StringBuilder.AppendLine("#{")
    [Void]$StringBuilder.AppendLine("#  # Save Current Directory")
    [Void]$StringBuilder.AppendLine("#  `$$($ScriptName)$($Control.Name).InitialDirectory = [System.IO.Path]::GetDirectoryName(`$$($ScriptName)$($Control.Name).FileName)")
    [Void]$StringBuilder.AppendLine("#  # Do Work Here")
    [Void]$StringBuilder.AppendLine("#}")
  }
  #endregion ******** How To Use / Call Dialogs ********

  #region ******** Add Control Items ********
  $CodeValue = $Null
  ForEach ($Item in ($Control.Items | Sort-Object -Property Property, Method))
  {
    $CodeValue = @($Item.Parameter | ForEach-Object -Process { "[$($PSItem.ParameterType)]`$$($PSItem.Name)" }) -join ", "
    [Void]$StringBuilder.AppendLine("#$($TempControl).$($Item.Property).$($Item.Method)($($CodeValue))")
  }
  if (-not [String]::IsNullOrEmpty($CodeValue))
  {
    [Void]$StringBuilder.AppendLine("#$($TempControl).BeginUpdate()")
    [Void]$StringBuilder.AppendLine("#$($TempControl).EndUpdate()")
    [Void]$StringBuilder.AppendLine("")
  }
  #endregion ******** Add Control Items ********

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null

  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyScriptControl"
}
#endregion function Build-MyScriptControl

#region function Build-MyScript
function Build-MyScript ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScript -Value "String"
    .NOTES
      Original Function By
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$ScriptName,
    [String]$ControlName,
    [MyFormControl]$Control,
    [MyFormControlEvent[]]$Events,
    [String]$GUIContainer
  )
  Write-Verbose -Message "Enter Function Build-MyScript"
  
  $StringBuilder = [System.Text.StringBuilder]::New()

  if ($Control.Name -eq "Form")
  {
    $TempName = "$($ScriptName)"
    $TempControl = "`$$($ScriptName)$($Control.Name)"
  }
  else
  {
    $TempName = "$($ScriptName)$($ControlName)"
    $TempControl = "`$$($ScriptName)$($ControlName)$($Control.Name)"
  }

  #region ******** My Code ********
  
  #region ******** Form / ListView Header ********
  Switch ($Control.Name)
  {
    "Form"
    {
      [Void]$StringBuilder.Append((Build-MyFCGScriptHeader -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptConfig -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptDefEnums -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptDefClasses -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptWindowsAPIs -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptFunctions -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptMultiThread -ScriptName $ScriptName))
      [Void]$StringBuilder.Append((Build-MyFCGScriptJobsThreads -ScriptName $ScriptName))

      [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Common Dialogs ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyFCGShowChangeLog -ScriptName $ScriptName -DialogName "ChangeLog"))
      [Void]$StringBuilder.Append((Build-MyFCGShowAlertMessage -ScriptName $ScriptName -DialogName "AlertMessage"))
      [Void]$StringBuilder.Append((Build-MyFCGGetUserResponse -ScriptName $ScriptName -DialogName "UserResponse"))
      [Void]$StringBuilder.Append((Build-MyFCGGetTextBoxInput -ScriptName $ScriptName -DialogName "TextBoxInput"))
      [Void]$StringBuilder.Append((Build-MyFCGMultiTextBoxInput -ScriptName $ScriptName -DialogName "MultiTextBoxInput"))
      [Void]$StringBuilder.Append((Build-MyFCGRadioButtonOption -ScriptName $ScriptName -DialogName "RadioButtonOption"))
      [Void]$StringBuilder.Append((Build-MyFCGCheckBoxOption -ScriptName $ScriptName -DialogName "CheckBoxOption"))
      [Void]$StringBuilder.Append((Build-MyFCGGetListBoxOption -ScriptName $ScriptName -DialogName "ListBoxOption"))
      [Void]$StringBuilder.Append((Build-MyFCGGetCheckedListBoxOption -ScriptName $ScriptName -DialogName "CheckedListBoxOption"))
      [Void]$StringBuilder.Append((Build-MyFCGGetComboBoxOption -ScriptName $ScriptName -DialogName "ComboBoxOption"))
      [Void]$StringBuilder.Append((Build-MyFCGGetComboBoxFilter -ScriptName $ScriptName -DialogName "ComboBoxFilter"))
      [Void]$StringBuilder.Append((Build-MyFCGGetListViewOption -ScriptName $ScriptName -DialogName "ListViewOption"))
      [Void]$StringBuilder.Append((Build-MyFCGShowScriptInfo -ScriptName $ScriptName -DialogName "ScriptInfo" -ControlType "RichTextBox"))
      [Void]$StringBuilder.Append((Build-MyFCGRichTextStatus -ScriptName $ScriptName -DialogName "RichTextStatus"))
      [Void]$StringBuilder.Append((Build-MyFCGProgressBarStatus -ScriptName $ScriptName -DialogName "ProgressBarStatus"))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Common Dialogs ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Custom Commands ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Custom Commands ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Custom Dialogs ********")
      [Void]$StringBuilder.AppendLine("")

      #region function Display-Initiliaze$($ScriptName)Utility
      [Void]$StringBuilder.AppendLine("# ----------------------------")
      [Void]$StringBuilder.AppendLine("# Sample Initiliaze $($ScriptName)Utility")
      [Void]$StringBuilder.AppendLine("# ----------------------------")
      [Void]$StringBuilder.AppendLine("#region function Display-Initiliaze$($ScriptName)Utility")
      [Void]$StringBuilder.AppendLine("Function Display-Initiliaze$($ScriptName)Utility()")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  <#")
      [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
      [Void]$StringBuilder.AppendLine("      Display $($ScriptName)Utility Status Sample Function")
      [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
      [Void]$StringBuilder.AppendLine("      Display $($ScriptName)Utility Status Sample Function")
      [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
      [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
      [Void]$StringBuilder.AppendLine("    .EXAMPLE")
      [Void]$StringBuilder.AppendLine("      Display-Initiliaze$($ScriptName)Utility -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    .EXAMPLE")
      [Void]$StringBuilder.AppendLine("      Display-Initiliaze$($ScriptName)Utility -RichTextBox `$RichTextBox -HashTable `$HashTable")
      [Void]$StringBuilder.AppendLine("    .NOTES")
      [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
      [Void]$StringBuilder.AppendLine("    .LINK")
      [Void]$StringBuilder.AppendLine("  #>")
      [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
      [Void]$StringBuilder.AppendLine("  Param (")
      [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox,")
      [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
      [Void]$StringBuilder.AppendLine("  )")
      [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Display-Initiliaze$($ScriptName)Utility`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$HashTable.ShowHeader")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Write KPI Event")
      [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -Text `"`$(`$RichTextBox.Parent.Parent.Text)`" -TextFore ([MyConfig]::Colors.TextTitle)")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Update Status Message")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `$RichTextBox.Parent.Parent.Text")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Initialize StopWatch")
      [Void]$StringBuilder.AppendLine("    `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Validate Runtime Parameters`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  #region ******** Validating Runtime Parameters ********")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Script / Utility")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Utility`" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Version`" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Run From/As Info")
      [Void]$StringBuilder.AppendLine("  `$TmpRunFrom = Get-WmiObject -Query `"Select Name, Domain, PartOfDomain From Win32_ComputerSystem`"")
      [Void]$StringBuilder.AppendLine("  If (`$TmpRunFrom.PartOfDomain)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpRunFromText = `"`$(`$TmpRunFrom.Name).`$(`$TmpRunFrom.Domain)`"")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpRunFromText = `"`$(`$TmpRunFrom.Name)`"")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Run From`" -Value `$TmpRunFromText")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Run As`" -Value `"`$([Environment]::UserDomainName)\`$([Environment]::UserName)`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Microsoft Entra Logon")
      [Void]$StringBuilder.AppendLine("  #Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Microsoft Entra Logon: `" -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Logon Authentication")
      [Void]$StringBuilder.AppendLine("  If ([MyConfig]::CurrentUser.AuthenticationType -eq `"CloudAP`")")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpText = `"Microsoft Entra`"")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpText = `"Active Directory`"")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Authentication`" -Value `"`$(`$TmpText)`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Verify OS Architecture")
      [Void]$StringBuilder.AppendLine("  `$TempRunOS = Get-WmiObject -Query `"Select Caption, Version, OSArchitecture From Win32_OperatingSystem`"")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Op Sys`" -Value `"`$(`$TempRunOS.Caption)`"")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Build`" -Value `"`$(`$TempRunOS.Version)`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # Verify AC Power")
      [Void]$StringBuilder.AppendLine("  `$ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus")
      [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$ChkBattery) -or (`$ChkBattery -eq 2))")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpText = `"Yes`"")
      [Void]$StringBuilder.AppendLine("    `$TmpColor = [MyConfig]::Colors.TextGood")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$TmpText = `"No`"")
      [Void]$StringBuilder.AppendLine("    `$TmpColor = [MyConfig]::Colors.TextWarn")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"AC Power`" -Value `"`$(`$TmpText)`" -ValueFore `$TmpColor")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  # -------------------------")
      [Void]$StringBuilder.AppendLine("  # Display Passed Parameters")
      [Void]$StringBuilder.AppendLine("  # -------------------------")
      [Void]$StringBuilder.AppendLine("  `$CheckParams = `$Script:PSBoundParameters")
      [Void]$StringBuilder.AppendLine("  If (`$CheckParams.Keys.Count)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Runtime Parameters`"")
      [Void]$StringBuilder.AppendLine("    ForEach (`$Key In `$CheckParams.Keys)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 30")
      [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `$Key -Value `$(`$CheckParams[`$Key])")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  #endregion ******** Validating Runtime Parameters ********")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Start Script Specific Init Here`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
      [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Config Step`" -Value `"Step Value`"")
      [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Config Step`" -Value `"Step Value`"")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionIndent = 10")
      [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionBullet = `$False")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    If (`$DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Initialization was Successful`"")
      [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextGood")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    Else")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Initialization Failed`"")
      [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextBad")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -TextFore `$FinalClr -Text `$FinalMsg")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Alignment `"Center`" -Text (`$StopWatch.Elapsed.ToString())")
      [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Update Status Message")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)BtmStatusStrip.Items[`"Status`"].Text = `$FinalMsg")
      [Void]$StringBuilder.AppendLine("    `$StopWatch.Stop()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  `$DisplayResult")
      [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
      [Void]$StringBuilder.AppendLine("  ")
      [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Display-Initiliaze$($ScriptName)Utility`"")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("#endregion function Display-Initiliaze$($ScriptName)Utility")
      [Void]$StringBuilder.AppendLine("")
      #endregion function Display-Initiliaze$($ScriptName)Utility

      [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Custom Dialogs ********")
      [Void]$StringBuilder.AppendLine("")

      [Void]$StringBuilder.AppendLine("#region ******** Begin **** $($ScriptName) **** Begin ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#`$Result = [System.Windows.Forms.MessageBox]::Show($($TempControl), `"Message Text`", [MyConfig]::ScriptName, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)FormComponents = [System.ComponentModel.Container]::New()")
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["OpenFileDialog"]| Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["SaveFileDialog"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["FolderBrowserDialog"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["ToolTip"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["ImageList"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -ControlName "Small" -Control $TmpControl))
      [Void]$StringBuilder.Append((Build-MyScriptCustomIcons -ScriptName $ScriptName -ControlName "Small"))
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["ImageList"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScript -ScriptName $ScriptName -ControlName "Large" -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("#region ******** $($ScriptName) Large ImageList Icons ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($ScriptName) Large ImageList Icons ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
  }
  #endregion ******** Form / ListView Header ********

  if ($Control.Name -eq "Form")
  {
    [Void]$StringBuilder.Append((Build-MyScriptControl -ScriptName $ScriptName -Control $Control))
    if ($PSBoundParameters.ContainsKey("Events"))
    {
      [Void]$StringBuilder.Append((Build-MyScriptEvent -ScriptName $ScriptName -Control $Control -Events $Events))
    }
  }
  else
  {
    [Void]$StringBuilder.Append((Build-MyScriptControl -ScriptName $ScriptName -ControlName $ControlName -Control $Control))
    if ($PSBoundParameters.ContainsKey("Events"))
    {
      [Void]$StringBuilder.Append((Build-MyScriptEvent -ScriptName $ScriptName -ControlName $ControlName -Control $Control -Events $Events))
    }
  }

  #region ******* Form / Code Footer ********
  Switch ($Control.Name)
  {
    "Form"
    {
      #[Void]$StringBuilder.Append((Build-MyScriptEvent -ScriptName $ScriptName -ControlName $ControlName -Control $Control -Events $Events))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** Controls for $($TempName) $($Control.Name) ********")
      [Void]$StringBuilder.AppendLine("")
      
      $TmpControl = [MyRuntime]::ControlLookup["Timer"] | Select-Object -First 1
      [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -Control $TmpControl -Events ($TmpControl.Events | Where-Object -FilterScript { $PSItem.Name -eq "Tick" })))

      $TmpControl = [MyRuntime]::ControlLookup["NotifyIcon"] | Select-Object -First 1
      [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -Control $TmpControl -Events ($TmpControl.Events | Where-Object -FilterScript { $PSItem.Name -eq "MouseClick" })))
      
      Switch ($GUIContainer)
      {
        "Panel"
        {
          $TmpControl = [MyRuntime]::ControlLookup["Panel"] | Select-Object -First 1
          [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -ControlName "Main" -Control $TmpControl))
          Break
        }
        "SplitContainer"
        {
          $TmpControl = [MyRuntime]::ControlLookup["SplitContainer"] | Select-Object -First 1
          [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -ControlName "Main" -Control $TmpControl))
          Break
        }
      }
      $TmpControl = [MyRuntime]::ControlLookup["MenuStrip"] | Select-Object -First 1
      [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -ControlName "Top" -Control $TmpControl))
      $TmpControl = [MyRuntime]::ControlLookup["StatusStrip"] | Select-Object -First 1
      [Void]$StringBuilder.AppendLine((Build-MyScript -ScriptName $ScriptName -ControlName "Btm" -Control $TmpControl))
      [Void]$StringBuilder.AppendLine("#$($TempControl).ClientSize = [System.Drawing.Size]::New(($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Right + [MyConfig]::FormSpacer, ($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Controls for $($TempName) $($Control.Name) ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** End **** $($ScriptName) **** End ********")
      [Void]$StringBuilder.AppendLine("")

      #region ******** Start Form  ********
      [Void]$StringBuilder.AppendLine("#region ******** Start Form  ********")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("# Add Form Code here...")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("[System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
      [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [Void][Console.Window]::Hide()")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("Try")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::Run(`$$($ScriptName)Form)")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("Catch")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # **** Testing - Exit to Nested Prompt ****")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
      [Void]$StringBuilder.AppendLine("    #`$Host.EnterNestedPrompt()")
      [Void]$StringBuilder.AppendLine("    # **** Testing - Exit to Nested Prompt ****")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)OpenFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)SaveFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)FolderBrowserDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)FormComponents.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($ScriptName)Form.Dispose()")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("# Add Form Code here...")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion ******** Start Form  ********

      #region ******** Azure Logon and Start Form  ********
      [Void]$StringBuilder.AppendLine("#region ******** Azure Logon and Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Set Defaut Screen Colors")
      [Void]$StringBuilder.AppendLine("[Console]::ForegroundColor = `"Gray`"")
      [Void]$StringBuilder.AppendLine("[Console]::BackgroundColor = `"Black`"")
      [Void]$StringBuilder.AppendLine("[Console]::Clear()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Set Default Flag / Check Values")
      [Void]$StringBuilder.AppendLine("`$ChkUser = `$True")
      [Void]$StringBuilder.AppendLine("`$RunMe = `$True")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Import / Install Required Azure Modules")
      [Void]$StringBuilder.AppendLine("Write-Host -Object (`"-`" * 32) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("Write-Host -Object `"Importing Required Azure Modules`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("Write-Host -Object (`"-`" * 32) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("# Process Required Modules")
      [Void]$StringBuilder.AppendLine(":ModInstall foreach (`$Key in [MyConfig]::RequiredModules.Keys)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  # Module Info / Status")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Module: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `$Key -ForegroundColor Cyan -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `" Version: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object ([MyConfig]::RequiredModules[`$Key]) -ForegroundColor Cyan")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Status: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  # Check if Module is Installed")
      [Void]$StringBuilder.AppendLine("  if ((Install-MyModule -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key])).Success)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Imported`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Check for Admion Rights")
      [Void]$StringBuilder.AppendLine("    if ([MyConfig]::IsLocalAdmin)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      # Insatll Module for All Users")
      [Void]$StringBuilder.AppendLine("      if ((Install-MyModule -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key]) -Install).Success)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Suceeded")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Installed`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      else")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Installation Failed")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("        break ModInstall")
      [Void]$StringBuilder.AppendLine("        `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    else")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      if (`$ChkUser)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Ask user to Install in User Profile")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Prompt User`" -ForegroundColor DarkYellow")
      [Void]$StringBuilder.AppendLine("        [Console]::ForegroundColor = `"Green`"")
      [Void]$StringBuilder.AppendLine("        `$Choice = `$Host.UI.PromptForChoice(`"Install Azure Module`", `"Install the Azure Module to your user profile?`", ([System.Management.Automation.Host.ChoiceDescription[]](`"&Yes`", `"&No`")), 1)")
      [Void]$StringBuilder.AppendLine("        [Console]::ForegroundColor = `"Gray`"")
      [Void]$StringBuilder.AppendLine("        if (`$Choice -eq 1)")
      [Void]$StringBuilder.AppendLine("        {")
      [Void]$StringBuilder.AppendLine("          # User Said No")
      [Void]$StringBuilder.AppendLine("          break ModInstall")
      [Void]$StringBuilder.AppendLine("          `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("        }")
      [Void]$StringBuilder.AppendLine("        else")
      [Void]$StringBuilder.AppendLine("        {")
      [Void]$StringBuilder.AppendLine("          # User Said Yes")
      [Void]$StringBuilder.AppendLine("          Write-Host")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Module: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `$Key -ForegroundColor Cyan -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `" Version: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object ([MyConfig]::RequiredModules[`$Key]) -ForegroundColor Cyan")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Status: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          `$ChkUser = `$False")
      [Void]$StringBuilder.AppendLine("        }")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      ")
      [Void]$StringBuilder.AppendLine("      # Install Module as the Current User")
      [Void]$StringBuilder.AppendLine("      if ((Install-MyModule -Scope CurrentUser -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key]) -Install).Success)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Suceeded")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Installed`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      else")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Failed")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("        break ModInstall")
      [Void]$StringBuilder.AppendLine("        `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("if (`$RunMe)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  # Login to Azure")
      [Void]$StringBuilder.AppendLine("  Write-Host")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object (`"-`" * 19) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Azure / Entre Login`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object (`"-`" * 19) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Logon to Azure: `" -ForegroundColor Gray -NoNewLine")
      [Void]$StringBuilder.AppendLine("  Update-AzConfig -EnableLoginByWam `$False -DisplayBreakingChangeWarning `$False -WarningAction SilentlyContinue | Out-Null")
      [Void]$StringBuilder.AppendLine("  #[MyConfig]::AADLogonInfo = Connect-AzAccount -Tenant ([MyConfig]::TenantID) -SubscriptionID ([MyConfig]::SubscriptionID) -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue")
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AADLogonInfo = Connect-AzAccount -ServicePrincipal -Tenant ([MyConfig]::TenantID) -Credential ([PSCredential]::New([MyConfig]::ApplicationID, (ConvertTo-SecureString -AsPlainText -Force -String (Protect-WithCert -Decrypt -Universal -Salt 2 -CertKey ([MyConfig]::CertKey) -TextString ([MyConfig]::SecretCode))))) -ErrorAction SilentlyContinue")
      [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty([MyConfig]::AADLogonInfo))")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Azure Login Failed")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Azure Login Succeeded")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Success`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Update Console")
      [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
      [Void]$StringBuilder.AppendLine("    if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      [Void][Console.Window]::Hide()")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Launch / Run Script")
      [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::Run(`$$($ScriptName)Form)")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Close / Dispose of Form Objects")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)OpenFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)SaveFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)FormComponents.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$$($ScriptName)Form.Dispose()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("else")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Exit to Nested Prompt - Testing Only")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Exit Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
      [Void]$StringBuilder.AppendLine("    `$Host.EnterNestedPrompt()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Azure Logon and Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion ******** Azure Logon and Start Form  ********

      [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [System.Environment]::Exit(0)")
      [Void]$StringBuilder.AppendLine("}")
      Break
    }
    "SplitContainer"
    {
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) Panel1 Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("$($TempControl).Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) Panel2 Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("$($TempControl).Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    "TabControl"
    {
      $TmpControl = [MyRuntime]::ControlLookup["TabPage"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScriptEvent -ScriptName $ScriptName -ControlName $ControlName -Control $TmpControl -Events ($TmpControl.Events | Where-Object -FilterScript { $PSItem.Name -eq "Enter" })))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Tab Pages ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Tab Pages ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    "tooltip"
    {
      [Void]$StringBuilder.AppendLine("#$($TempControl).SetToolTip(`$FormControl, `"Form Control Help`")")
      break
    }
    "Label"
    {
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Drawing.Size]::New((([MyConfig]::Font.Width) * ([MyConfig]::FontTitle) * ($($TempControl).Text.Length + 4)), $($TempControl).PreferredHeight)")
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Windows.Forms.TextRenderer]::MeasureText($($TempControl).Text, $($TempControl).Font, $($TempControl).Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = $($TempControl).PreferredSize")
      break
    }
    "ListView"
    {
      [Void]$StringBuilder.AppendLine("#ForEach (`$Item in `$Objects)")
      [Void]$StringBuilder.AppendLine("#{")
      [Void]$StringBuilder.AppendLine("#  ($($TempControl).Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Item.Text)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$StringBuilder.AppendLine("#  #($($TempControl).Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Item.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$StringBuilder.AppendLine("#  `$ListViewItem.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("#}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#`$Objects | ForEach-Object -Process { ($($TempControl).Items.Add(([System.Windows.Forms.ListViewItem]::New(`$PSItem.Text)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$StringBuilder.AppendLine("#`$Objects | ForEach-Object -Process { ($($TempControl).Items.Add(([System.Windows.Forms.ListViewItem]::New(`$PSItem.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$StringBuilder.AppendLine("")
      break
    }
    "ToolStripContainer"
    {
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) ContentPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) ContentPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) ContentPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) TopToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) TopToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) TopToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) LeftToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) LeftToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) LeftToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) RightToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) RightToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) RightToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) BottomToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) BottomToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) BottomToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    { $PSItem -in @("ContextMenuStrip", "MenuStrip", "ToolStrip") }
    {
      [Void]$StringBuilder.AppendLine("`$$($TempName)$($Control.Name)Item = New-MenuItem -Menu $($TempControl) -Text `"$($ScriptName)`" -Name `"$($ScriptName)`" -Tag `"$($ScriptName)`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($ScriptName)FormIcon`" -PassThru")
      [Void]$StringBuilder.AppendLine("")
      $TmpControl = [MyRuntime]::ControlLookup["ToolStripMenuItem"] | Select-Object -First 1
      [Void]$StringBuilder.Append((Build-MyScriptEvent -NoAdd -ScriptName $ScriptName -ControlName $ControlName -Control $TmpControl -Events ($TmpControl.Events | Where-Object -FilterScript { $PSItem.Name -eq "Click" })).Replace("ToolStripMenu", $Control.Name))
      If ($ControlName -eq "Top")
      {
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"&Bug`" -Name `"Bug`" -Tag `"Bug`" -DisplayStyle `"ImageAndText`" -ImageKey `"BugIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"&Help`" -Name `"Help`" -Tag `"Help`" -DisplayStyle `"ImageAndText`" -ImageKey `"HelpIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"E&xit`" -Name `"Exit`" -Tag `"Exit`" -DisplayStyle `"ImageAndText`" -ImageKey `"ExitIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("")
        [Void]$StringBuilder.AppendLine("# Left Dropdown Arrows")
        [Void]$StringBuilder.AppendLine("# `$([char]0x00BB) Double Arrow, Single Arrow `$([char]0x203A)")
        [Void]$StringBuilder.AppendLine("# Right Dropdown")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu = New-MenuItem -Menu $($TempControl) -Text `"DropDown Menu`" -Name `"DropMenu`" -Tag `"DropMenu`" -DisplayStyle `"ImageAndText`" -TextImageRelation `"TextBeforeImage`" -ImageKey `"$($ScriptName)FormIcon`" -PassThru")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu.DropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::BelowRight")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu.DropDown.RightToLeft = [System.Windows.Forms.RightToLeft]::No")
        [Void]$StringBuilder.AppendLine("")
      }
      Else
      {
        [Void]$StringBuilder.AppendLine("`$$($TempName)$($Control.Name)Item.add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
      }
      Break
    }
    "StatusStrip"
    {
      [Void]$StringBuilder.AppendLine("New-MenuLabel -Menu $($TempControl) -Text `"Status`" -Name `"Status`" -Tag `"Status`"")
    }
    { $PSItem -in @("ToolStripPanel", "TabPage") }
    {
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    { $PSItem -in @("GroupBox", "Panel") }
    {
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#$($TempControl).ClientSize = [System.Drawing.Size]::New((`$($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
  }
  #endregion ******* Form / Code Footer ********

  #endregion ******** My Code ********

  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()

  Write-Verbose -Message "Exit Function Build-MyScript"
}
#endregion function Build-MyScript

#endregion ******** FCG Custom Commands ********

#region ******** FCG Custom Dialogs ********

# ----------------------------
# Sample Initiliaze FCGUtility
# ----------------------------
#region function Display-InitiliazeFCGUtility
Function Display-InitiliazeFCGUtility()
{
  <#
    .SYNOPSIS
      Display Utility Status Sample Function
    .DESCRIPTION
      Display Utility Status Sample Function
    .PARAMETER RichTextBox
    .PARAMETER HashTable
    .EXAMPLE
      Display-InitiliazeFCGUtility -RichTextBox $RichTextBox
    .EXAMPLE
      Display-InitiliazeFCGUtility -RichTextBox $RichTextBox -HashTable $HashTable
    .NOTES
      Original Script By Ken Sweet
    .LINK
  #>
  [CmdletBinding()]
  Param (
    [Parameter(Mandatory = $True)]
    [System.Windows.Forms.RichTextBox]$RichTextBox,
    [HashTable]$HashTable
  )
  Write-Verbose -Message "Enter Function Display-InitiliazeFCGUtility"

  $DisplayResult = [System.Windows.Forms.DialogResult]::OK
  $RichTextBox.Refresh()

  If ($PSBoundParameters.ContainsKey("HashTable"))
  {
    $ShowHeader = $HashTable.ShowHeader
  }
  Else
  {
    $ShowHeader = $True
  }

  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False

  # Write KPI Event
  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 0 -Category 0 -Message "Some Unknown KPI Event"

  If ($ShowHeader)
  {
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -Text "$($RichTextBox.Parent.Parent.Text)" -TextFore ([MyConfig]::Colors.TextTitle)
    Write-RichTextBox -RichTextBox $RichTextBox
    
    $FCGBtmStatusStrip.Items["Status"].Text = $RichTextBox.Parent.Parent.Text
    
    # Initialize StopWatch
    $StopWatch = [System.Diagnostics.Stopwatch]::StartNew()
  }


  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Validate Runtime Parameters" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True

  #region ******** Validating Runtime Parameters ********

  # Script / Utility
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Utility" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Version" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)

  # Run From/As Info
  $TmpRunFrom = Get-WmiObject -Query "Select Name, Domain, PartOfDomain From Win32_ComputerSystem"
  If ($TmpRunFrom.PartOfDomain)
  {
    $TmpRunFromText = "$($TmpRunFrom.Name).$($TmpRunFrom.Domain)"
  }
  Else
  {
    $TmpRunFromText = "$($TmpRunFrom.Name)"
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run From" -Value $TmpRunFromText
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Run As" -Value "$([Environment]::UserDomainName)\$([Environment]::UserName)"

  # Microsoft Entra Logon
  #Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Microsoft Entra Logon: " -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)

  # Logon Authentication
  If ([MyConfig]::CurrentUser.AuthenticationType -eq "CloudAP")
  {
    $TmpText = "Microsoft Entra"
  }
  Else
  {
    $TmpText = "Active Directory"
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Authentication" -Value "$($TmpText)"

  # Verify OS Architecture
  $TempRunOS = Get-WmiObject -Query "Select Caption, Version, OSArchitecture From Win32_OperatingSystem"
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Op Sys" -Value "$($TempRunOS.Caption)"
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Build" -Value "$($TempRunOS.Version)"

  # Verify AC Power
  $ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus
  If ([String]::IsNullOrEmpty($ChkBattery) -or ($ChkBattery -eq 2))
  {
    $TmpText = "Yes"
    $TmpColor = [MyConfig]::Colors.TextGood
  }
  Else
  {
    $TmpText = "No"
    $TmpColor = [MyConfig]::Colors.TextWarn
  }
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "AC Power" -Value "$($TmpText)" -ValueFore $TmpColor

  # -------------------------
  # Display Passed Parameters
  # -------------------------
  $CheckParams = $Script:PSBoundParameters
  If ($CheckParams.Keys.Count)
  {
    Write-RichTextBox -RichTextBox $RichTextBox -Text "Runtime Parameters"
    ForEach ($Key In $CheckParams.Keys)
    {
      $RichTextBox.SelectionIndent = 30
      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text $Key -Value $($CheckParams[$Key])
    }
  }

  #endregion ******** Validating Runtime Parameters ********

  $RichTextBox.SelectionIndent = 10
  $RichTextBox.SelectionBullet = $False
  Write-RichTextBox -RichTextBox $RichTextBox
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Loading Windows Form Controls" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)
  
  # Add Form Controls
  $FCGFormControlsListBox.Items.AddRange(@(Get-MyFormControlsShowStatus -RichTextBox $RichTextBox))
  [MyRuntime]::ControlLookup = $FCGFormControlsListBox.Items | Group-Object -Property Name -AsHashTable
  
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True
  Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Windows Form Controls Found" -Value ($FCGFormControlsListBox.Items.Count) -Font ([MyConfig]::Font.Bold) -ValueFore ([MyConfig]::Colors.TextGood)

  If ($ShowHeader)
  {
    $RichTextBox.SelectionIndent = 10
    $RichTextBox.SelectionBullet = $False
    Write-RichTextBox -RichTextBox $RichTextBox

    If ($DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $FinalMsg = "Initialization was Successful"
      $FinalClr = [MyConfig]::Colors.TextGood
    }
    Else
    {
      $FinalMsg = "Initialization Failed"
      $FinalClr = [MyConfig]::Colors.TextBad
    }

    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Font ([MyConfig]::Font.Title) -Alignment "Center" -TextFore $FinalClr -Text $FinalMsg
    Write-RichTextBox -RichTextBox $RichTextBox
    Write-RichTextBox -RichTextBox $RichTextBox -Alignment "Center" -Text ($StopWatch.Elapsed.ToString())
    Write-RichTextBox -RichTextBox $RichTextBox
    
    # Update Status Message
    $FCGBtmStatusStrip.Items["Status"].Text = $FinalMsg
    $StopWatch.Stop()
  }

  $DisplayResult
  $DisplayResult = $Null

  Write-Verbose -Message "Exit Function Display-InitiliazeFCGUtility"
}
#endregion function Display-InitiliazeFCGUtility

#region function Get-MyFormControlsShowStatus
function Get-MyFormControlsShowStatus ()
{
  <#
    .SYNOPSIS
      Get List of Windows Form Controls.
    .DESCRIPTION
      Retrieves a list of Windows Forms controls, including their constructors, properties, items, and events.
      Useful for inspecting available controls and their metadata in the System.Windows.Forms namespace.
    .PARAMETER FavEvents
      A hashtable mapping control names to arrays of favorite event names. Used to mark certain events as favorites in the output.
    .EXAMPLE
      Get-MyFormControlsShowStatus
      Retrieves all Windows Forms controls and their metadata.
    .EXAMPLE
      Get-MyFormControlsShowStatus -FavEvents @{ Button = @('Click', 'MouseEnter') }
      Retrieves all controls, marking the 'Click' and 'MouseEnter' events as favorites for the Button control.
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [HashTable]$FavEvents = [MyRuntime]::FavEvents,
    [RichTextBox]$RichTextBox
  )
  Write-Verbose -Message "Enter Function Get-MyFormControlsShowStatus"
  
  $RichTextBox.SelectionIndent = 20
  $RichTextBox.SelectionBullet = $True
  Write-RichTextBox -RichTextBox $RichTextBox -Text "Discovered Form Controls"
  
  # Get System.Windows.Forms.Form Assembly
  $Assembly = [System.Reflection.Assembly]::GetAssembly("System.Windows.Forms.Form")
  # Get List of Exported System.Windows.Forms Types
  $ExportedTypes = $Assembly.ExportedTypes | Where-Object -FilterScript { $PSitem.IsPublic -and $PSItem.IsClass -and (-not $PSItem.IsAbstract) -and ($PSItem.FullName -like "System.Windows.Forms*") } | Sort-Object -Property FullName
  # Check Each Expoted Type
  foreach ($ExportedType in $ExportedTypes)
  {
    # Get Form Control Contructors
    $TmpConstructors = @($ExportedType.GetConstructors(("Instance, Public")))
    if ((($ExportedType.GetInterface("IComponent")).IsPublic -or ($ExportedType.GetInterface("ISerializable")).IsPublic) -and ($TmpConstructors.Count -gt 0) -and (@($TmpConstructors | Where-Object -FilterScript { @($PSItem.GetParameters()).Count -eq 0 }).Count -eq 1))
    {
      # ---------------------
      # Display Found Control
      # ---------------------
      $RichTextBox.SelectionIndent = 30
      Write-RichTextBoxValue -RichTextBox $RichTextBox -Text "Adding Form Control" -Value ($ExportedType.Name) -ValueFore ([MyConfig]::Colors.TextGood)
      
      # Create Form Control Return Value
      $RetValue = [MyFormControl]::New($ExportedType.Name, $ExportedType.FullName)
      # Get Form Control Constructors
      foreach ($TmpConstructor in $TmpConstructors)
      {
        $RetValue.Constructors.Add([MyFormControlConstructor]::New(@($TmpConstructor.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
      }
      
      # Get Form Control Property List
      $TmpProperties = $ExportedType.GetProperties(("Instance, Public")) | Where-Object -FilterScript { $PSItem.CanWrite } | Sort-Object -Property Name -Unique
      $TmpControl = $ExportedType::New()
      foreach ($TmpProperty in $TmpProperties)
      {
        $RetValue.Properties.Add([MyFormControlProperty]::New($TmpProperty.Name, $TmpProperty.PropertyType.FullName, $TmpProperty.PropertyType.BaseType.FullName, $TmpControl.PSObject.Properties[$TmpProperty.Name].Value)) | Out-Null
      }
      
      # Get Form Control Items - Add / AddRange Methods
      $TmpItems = $ExportedType.GetProperties(("Instance, Public")) | Where-Object -FilterScript { $PSItem.Name -notin @("Controls", "DataBindings") -and (-not $PSItem.CanWrite) -and $PSItem.PropertyType.GetInterface("ICollection").IsPublic } | Sort-Object -Property Name -Unique
      foreach ($TmpItem in $TmpItems)
      {
        foreach ($TmpAddItem in @($TmpItem.PropertyType.GetDeclaredMethods("Add")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("Add", $TmpItem.Name, @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
        foreach ($TmpAddItem in @($TmpItem.PropertyType.GetDeclaredMethods("AddRange")))
        {
          $RetValue.Items.Add([MyFormControlItems]::New("AddRange", $TmpItem.Name, @($TmpAddItem.GetParameters() | ForEach-Object -Process { [MyFormControlParameter]::New($PSItem.Name, $PSItem.ParameterType.FullName) }))) | Out-Null
        }
      }
      
      # Get Form Control Events
      $TmpEvents = @($ExportedType.GetEvents() | Sort-Object -Property Name -Unique)
      if ($FavEvents.ContainsKey($ExportedType.Name))
      {
        foreach ($Event in $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, ($FavEvents[$ExportedType.Name] -contains $Event.Name))) | Out-Null
        }
      }
      else
      {
        foreach ($Event in $TmpEvents)
        {
          $RetValue.Events.Add([MyFormControlEvent]::New($Event.Name, $Event.AddMethod.Name, $False)) | Out-Null
        }
      }
      # Return Form Confrom Info
      $RetValue
    }
  }

  Write-Verbose -Message "Exit Function Get-MyFormControlsShowStatus"
}
#endregion function Get-MyFormControlsShowStatus

#endregion ******** FCG Custom Dialogs ********

#region ******** Begin **** FCG **** Begin ********

# $Result = [System.Windows.Forms.MessageBox]::Show($FCGForm, "Message Text", [MyConfig]::ScriptName, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
# $KnownFoldrs = [Enum]::GetValues([System.Environment+SpecialFolder]) | ForEach-Object -Process { [Environment]::GetFolderPath($PSItem) }

$FCGFormComponents = [System.ComponentModel.Container]::New()

#region $FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
$FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
#$FCGOpenFileDialog.AddExtension = $True
#$FCGOpenFileDialog.AutoUpgradeEnabled = $True
#$FCGOpenFileDialog.CheckFileExists = $True
#$FCGOpenFileDialog.CheckPathExists = $True
#$FCGOpenFileDialog.DefaultExt = ""
#$FCGOpenFileDialog.DereferenceLinks = $True
#$FCGOpenFileDialog.FileName = ""
#$FCGOpenFileDialog.Filter = ""
#$FCGOpenFileDialog.FilterIndex = 1
$FCGOpenFileDialog.InitialDirectory = [MyConfig]::ScriptRoot
#$FCGOpenFileDialog.Multiselect = $False
#$FCGOpenFileDialog.ReadOnlyChecked = $False
#$FCGOpenFileDialog.RestoreDirectory = $False
#$FCGOpenFileDialog.ShowHelp = $False
#$FCGOpenFileDialog.ShowReadOnly = $False
#$FCGOpenFileDialog.SupportMultiDottedExtensions = $False
#$FCGOpenFileDialog.Tag = [System.Object]::New()
#$FCGOpenFileDialog.Title = ""
#$FCGOpenFileDialog.ValidateNames = $True
#endregion $FCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()

#region $FCGToolTip = [System.Windows.Forms.ToolTip]::New()
$FCGToolTip = [System.Windows.Forms.ToolTip]::New($FCGFormComponents)
#$FCGToolTip.Active = $True
#$FCGToolTip.AutomaticDelay = 500
#$FCGToolTip.AutoPopDelay = 5000
#$FCGToolTip.BackColor = [MyConfig]::Colors.Back
#$FCGToolTip.ForeColor = [MyConfig]::Colors.Fore
#$FCGToolTip.InitialDelay = 500
#$FCGToolTip.IsBalloon = $False
#$FCGToolTip.OwnerDraw = $False
#$FCGToolTip.ReshowDelay = 100
#$FCGToolTip.ShowAlways = $False
#$FCGToolTip.StripAmpersands = $False
#$FCGToolTip.Tag = [System.Object]::New()
#$FCGToolTip.ToolTipIcon = [System.Windows.Forms.ToolTipIcon]::None
#$FCGToolTip.ToolTipTitle = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
#$FCGToolTip.UseAnimation = $True
#$FCGToolTip.UseFading = $True
#endregion $FCGToolTip = [System.Windows.Forms.ToolTip]::New()
#$FCGToolTip.SetToolTip($FormControl, "Form Control Help")

# ************************************************
# FCG ImageList
# ************************************************
#region $FCGSmallImageList = [System.Windows.Forms.ImageList]::New()
$FCGSmallImageList = [System.Windows.Forms.ImageList]::New($FCGFormComponents)
$FCGSmallImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit
$FCGSmallImageList.ImageSize = [System.Drawing.Size]::New(16, 16)
#$FCGSmallImageList.Tag = [System.Object]::New()
#endregion $FCGSmallImageList = [System.Windows.Forms.ImageList]::New()

#region ******** FCG Small ImageList Icons ********

#region ******** $FCGFormIcon ********
# Icons for Forms are 16x16
$FCGFormIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW1lWTFBOS7xJRkPmOjc2pQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dHGEqKCXLQ0A89nNuaf+/u7f/09DM/1hTTv8gHx3oGhoaKgAAAAAAAAAAAAAAAGtrawk0MzGPLysq31BNSf2ZlI//tbGu/5eTj/+blpL/k42I/8K9uv9TT0v/YFtV/z06
Nf4lJSKmAAAABAAAAABraWdacWxn/56alf+4tLH/eXRw/3BsaP9TUE3/d3Nw/6Cfnf/Q0M//amhl/0E9Of9taGL/aGNe/0ZEQ58AAAAAVFJPYWNfWv9PS0j/YF5b/4yLiP/Qz8z/7ern/8C3r/+wn43/zrqn/8Cy
pf+joJz/ZmJe/19aVv+ZlpTAAAAAAHh0cr2WlJH/xMG+/+Hc1//Uyr//rJyL/35yaP9TQS7/WT8j/1k/JP+BbFr/j31v/7y2sP+inpv/fnx51YiGhAKzsrCXSkM8/5KEe/9cUkn/cGFQ/4J9dv+LeGD/no12/5yR
gf9vYVP/o5N//3JhVP9aRDj/jn96/6ako+oAAAAAw8PBAqGem2uJc2TccEYl/m5BE/+XiHX/kYNy/6aaiv+VgW7/dmBU/25MPP9jPy7/RikX/y4ZBv9LNyL3d3RyLAAAAAAAAAAAAAAAAIaCfjNuXEqwb0oZ9qV7
Sv+IZk7/bkUh/35MG/+EUhf/l2AU/6pxGP+sahT/g1Ac/5GPjdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACliWDjwoEf/8yRJ//Nkib/yIwh/7+EIP+sbRv/i0kJ/4FZMv9wb23cAAAAAAAAAAAAAAAAAAAAAAAA
AADBvr0Ou4g//M2NIf/FhyL/wIQi/7d7H/+lZhf/kVAQ/4NDBv+Pbk3/bm5tsAAAAAAAAAAAAAAAAAAAAAAAAAAAvLawVLRtHv/KjiT/vH4e/69wGf+jYxf/jU0O/45NDv+CQwf/knpi/1NSUH8AAAAAAAAAAAAA
AAAAAAAAAAAAAKaYi6ayaxX/unwf/6pqGf+hYBX/mFcT/5RTEf+SUA7/djsF/4Z3af9iYF1GAAAAAAAAAAAAAAAAAAAAAAAAAACSdl3frGQQ/6VhE/+WUw7/g0MH/202A/95QxH/ckEW/5dwTP+Mh4H+ZmNhEgAA
AAAAAAAAAAAAAAAAAAAAAAAAflg6+ZFZHP+OYTP/lW9M/6WMcv+0pJT/vLSr/by4tPTX1dThqKajhwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIqFgWiEgHvgnJqY2qenprGjo6F/o6GgRaCenBQAAAAAAAAAAAAA
AAAAAAAA/h+sQfAHrEEAAaxBAAGsQQABrEEAAKxBAAGsQQAArEHgAKxB/ACsQfgArEH4AKxB+ACsQfgArEH4AaxB+A+sQQ==
"@
#endregion ******** $FCGFormIcon ********
$FCGSmallImageList.Images.Add("FCGFormIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FCGFormIcon))))

#region ******** $ExitIcon ********
$ExitIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA
AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F
RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE
AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA
AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2
Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey
6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3
y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==
"@
#endregion ******** $ExitIcon ********
$FCGSmallImageList.Images.Add("ExitIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExitIcon))))

#region ******** $HelpIcon ********
$HelpIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9
f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV
S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq
6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg
JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn
NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9
XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA
AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA
AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==
"@
#endregion ******** $HelpIcon ********
$FCGSmallImageList.Images.Add("HelpIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($HelpIcon))))

#region ******** $BugIcon ********
$BugIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE/UHwBQ1VsAUNVaAFDVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFjYfAp57/oAfvf/AH/4/wBx7vkAVtp0AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVvYaSuR+P8jlv//DYX4/wB/+f8Acu//AHz2/gBV2GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABycHAgL2CxCyB86u4YbOL/BU7R/xd+8P8Jdu7/AELK/wB4
8/8AaejoKF2zCnFwcRwAAAAAAAAAAAAAAAAAAAAAdXJupTVdpY8tnvv/AkjO/wVLz/8lh/P/Ho35/w2D9/8Ah/7/AIH6/0Bfm7R0cW9zAAAAAAAAAAAAAAAAAAAAAGxudR08aKbzJ6b//y6g/P81of3/MJX4/yqT
+f8ilP3/AEnP/wBu7P83YqbXYmt9BgAAAAAAAAAAAAAAAAAAAAAAAAAAE2XNkheo//8npv//MaX//y+X+P8xl/r/MZz+/xp+7/8MiPr/CFrUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZ0W0Fpv7/CGrf/wtc
2P8qmfj/MJn5/xNl3v8ff+7/IpX+/wlX02MAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcltIZJSJAJD0/xKX9P8QjfH/IJr4/yua+f8MW9j/In3r/yWG8f9LZZWFbm9zSgAAAAAAAAAAAAAAAAAAAAB0cW5HZ2xzYSZe
luFPkLD/Inyv/yp1q/8ydaz/Onqu/zx4rf8yW5TbZmt0XnRxbjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRT1CZkI2M/2pmZf9jYF//XFlY/1RRUP9LSEf/RUNFjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABxbmsbbWpny3BtbPGCfn3/Y2Bf/1xZWP9UUVD/SUZF72xpZr1vbGkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXJvMmxpZjBVUlFMdXJy9oOAf/9tamn/UExM9ExIR0RsaWZKdHFuGAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9MSyVSTk55UExMd0pGRiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQfw/rEH4H6xB8A+sQcADrEHAA6xBwAOsQeAHrEHgB6xBwAOsQcADrEHwD6xB4AesQeAHrEH8P6xB//+sQQ==
"@
#endregion ******** $BugIcon ********
$FCGSmallImageList.Images.Add("BugIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($BugIcon))))

#region ******** $CheckIcon ********
$CheckIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKyN4A5tT7vP7hF30K6SDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAACasKp9Eu0r/qe6y/5Dimf8+uETPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqmHJ84tT3/oOip/6DurP+19b//ctN6/z24Q4AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gDp9Gu0v/oOap/47lmv+E5pH/ne+p/6/zuf9KvlD/O7dBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaAp87tT//mOCh/4Tdj/963of/qOyy/5nspf+s87f/l+af/zi1
Pc8AAAAAAAAAAAAAAAAAAAAAAAAAAACYAI80sTj/kNuZ/3nWhf9/2ov/n+ao/3nUgP+p7bP/keue/7LzvP9s0HT/N7U8gAAAAAAAAAAAAAAAAAAAAAAAlwD/idaS/3DPe/9104D/l+Cg/0K5R/8ToxX/gtiJ/53q
qP+S6p//p+2x/0O7SP81tDowAAAAAAAAAAAAAAAAAJYA/37Qhv+F1Y//htaO/y+vMv8HnAefEKESQCWrKP+j6Kz/h+SU/6HrrP+M35T/MrI33zSzORAAAAAAAAAAAACVAI8hpST/RLZJ/xGgE/8AmQCPAAAAAAAA
AAAPoBCfWMRe/5zlpv963oj/pequ/2LJaf8xsjaPAAAAAAAAAAAAAAAAAJUAMACXAGAAmAAwAAAAAAAAAAAAAAAADJ8NEA6gD++J2pL/h96T/4DdjP+Y4qH/O7ZA/zCxNEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAJngpgL68y/5fgoP9r1Hj/jN2W/33Uhf8srzDfLrAyEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAidCb9nyW7/idqT/1rLaP+U3p3/V8Jd/yuuL48AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmwUwD6AQ/4XVjf9mzHL/Zsxy/4fXkP8mrCr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOaA4A/tUP/iNWR/2/Nef+J1pH/JKwq/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAQApoC30y6Uv9mxW3/TLpR/xqmHL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZACACmgKfCJ0Ivw6g
D58ToxUQ+H+sQfB/rEHgP6xBwB+sQYAfrEEAD6xBAAesQQADrEEGA6xBjgGsQf8ArEH/gKxB/4CsQf/ArEH/wKxB/+CsQQ==
"@
#endregion ******** $CheckIcon ********
$FCGSmallImageList.Images.Add("CheckIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($CheckIcon))))

#region ******** $UncheckIcon ********
$UncheckIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ps48SErOvGhqtEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eqRAqKsmvLy/TjwAA
AAAAAAAAAAAAAA0Nsp8GBrf/CQm6/xQUtM8bG60QAAAAAAAAAAAAAAAAAAAAAB0dqhAnJ8bPODju/0BA9/81NdqfAAAAADc3v48HB7X/Bga3/wkJuv8MDL3/FRW1zxsbrBAAAAAAAAAAAB0dqhAjI8LPLy/k/zY2
7P87O/L/PT30/y4u0I9ERMSvVFTO/wkJt/8ICLn/Cwu8/w4OwP8WFrfPHBysEBwcqxAfH77PJiba/yws4P8xMeb/NTXr/zY27P8pKcevGRmvEEVFxM9VVc//Cwu5/woKu/8NDb//ERHD/xgYuM8bG7vPHh7R/yMj
1v8nJ9v/Kyvg/y4u4/8mJsXPHh6pEAAAAAAZGa8QRUXEz1VV0P8MDLv/DAy+/w8Pwf8TE8X/FxfJ/xsbzv8fH9L/IiLW/yUl2f8iIsHPHR2qEAAAAAAAAAAAAAAAABkZrhBGRsTPVlbQ/w4OvP8ODr//ERHD/xQU
xv8XF8r/GhrN/x4e0f8eHr7PHR2qEAAAAAAAAAAAAAAAAAAAAAAAAAAAGhquEEZGxc9NTc//DAy9/w4OwP8REcP/FBTG/xYWyf8bG7rPHByrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrhAlJbjPLi7E/x0d
wf8ODr7/Dg7A/xAQwv8TE8X/GBi4zxwcrBAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxAmJrnPNDTE/zIyxf8wMMX/Ly/G/ygoxf8gIMT/Hx/F/x8fxv8jI7rPGxusEAAAAAAAAAAAAAAAABgYsBAoKLnPOTnE/zY2
xP80NMT/MjLF/zAwxf9oaNf/MTHH/y4ux/8uLsj/LS3J/yMjuc8bG60QAAAAABcXsRArK7rPPj7F/zs7xf85OcT/NjbE/zQ0xP8lJbjPT0/Hz3Bw2f8yMsb/Ly/G/y4uxv8uLsf/JCS5zxoarRBTU8qvVFTM/0FB
xv8+PsX/OzvF/zk5xP8mJrnPGRmuEBoarhBQUMfPcXHY/zMzxf8wMMX/MDDF/zAwxf8kJLivY2PQj5iY5v9TU8z/QUHG/z4+xf8oKLnPGRmvEAAAAAAAAAAAGhquEFBQx89yctj/NTXF/zIyxP8yMsT/Jye6jwAA
AABpadOfmJjm/1RUzP8rK7rPGBiwEAAAAAAAAAAAAAAAAAAAAAAZGa8QUFDIz3R02P84OMT/KSm7nwAAAAAAAAAAAAAAAGNj0I9TU8qvFxewEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxBQUMivSkrFjwAA
AAAAAAAAx+OsQYPBrEEBgKxBAACsQQAArEGAAaxBwAOsQeAHrEHgB6xBwAOsQYABrEEAAKxBAACsQQGArEGDwaxBx+OsQQ==
"@
#endregion ******** $UncheckIcon ********
$FCGSmallImageList.Images.Add("UnCheckIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($UncheckIcon))))

#region ******** $FavoriteIcon ********
$FavoriteIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmk9lALofTfDp3xcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ52WApdde/LHHTcAAA
AAAAAAAAAAAAAAAAAAAJpfeAHLb6/xSn9P8RmO6vFJTrEAAAAAAAAAAAIILfECJ/3a8ukuP/PK7t/yxx058AAAAAAAAAAAAAAAAAAAAACaT2QBWu+P8lxv//F673/xWT6t8YjudAHYfiMB+E4N8npe7/PNL//zKT
4/8rctRQAAAAAAAAAAAAAAAAAAAAAAAAAAALofTvKMf//x3B//8UtPv/F5Pq/xiO5/8Wrvj/IcT//yzJ//8qe9n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6D0ryG7+/8ixP//GL7//w+2/f8Gsf3/B7X//xK7
//8drvX/KHbXrwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyf82Aisfb/NMz//x7C//8Vvf//DLj//wW0//8Es///GZPp/yd32GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALoPSfLbT1/2zi//9E0v//HcH//xW9
//8Puf//Crb//x2M5f8odtefK3LUEAAAAAAAAAAAAAAAAAWp+jAIpvfPO8H5/2/j/v905f//cuP//2be//9Bz///I8P//xS8//8Ru///H5To/yxx088ubdEwAAAAAAGv/nANr/vvWdj9/3vs//956f//d+f//3Xm
//905P//cuP//3Li//9i2///UdT//0XQ//87tvT/NHPS/zJnzXAavf//fu3//4Pw//9/7v//fOv//3rq//956P//d+b//3bl//915P//deT//3Xj//904///dOP//3Dc/P8/ftb/Aa/+3wSr+/8Ipvj/C6H0/yOr
9P8srPL/aNr7/3vp//966P//btr7/zeZ5v81juD/KXXX/yxx0/8wbND/MmfN7wAAAAAAAAAAAAAAAAAAAAAAAAAAE5bscEO69P9+7P//fer//0iw7f8hgd5wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABOW7BAinu3/g+7//4Ht//8rkeT/IYHeIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZLqr2TS+P9y3Pr/HoThzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABaR6WBDtPD/Tbfv/x2F4mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWkekQIJTo7yOQ5e8dhuIQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAx+OsQcGDrEHAA6xB4AesQeAHrEHgB6xB4AOsQYABrEEAAKxBAACsQQAArEH4H6xB+B+sQfw/rEH8P6xB/D+sQQ==
"@
#endregion ******** $FavoriteIcon ********
$FCGSmallImageList.Images.Add("FavoriteIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FavoriteIcon))))

#region ******** $BuildIcon ********
$BuildIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJfAz/D44Y/w+OGP8Pjhj/EI8Z/xCP
Gv8KfA3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD48Z/4fknP+C5Jj/g+SZ/4Plm/9645X/EZAe/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCPHP+J5qD/J9JU/yjT
V/8o1Fr/fOWb/xKRIf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAAAAARkR//i+im/ynWXv8q12D/K9hj/37oof8SkiT/BlriMAZZ4v8GWOH/Blfh/wZW4P8FVd//BVXf/wVU3jAAAAAAEpIi/4zq
q/8s2Wf/Ldpq/y7bbf9/6qf/E5Mn/wAAAAAHX+aAB1/l/wde5f8HXeT/B1zk/wZb44AAAAAAAAAAABOTJP+N7LD/L91x/zDedP8w33b/geyt/xOVKv8AAAAAAAAAAAhl6tAIZOn/CGTp/whj6NAAAAAAAAAAAAAA
AAASjyL/Ks1l/yrOZ/8rz2n/K9Br/yvQa/8TjyX/AAAAAAAAAAAJbO4wCWvu/wlq7f8JauwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApy8oAKcfGAAAAAAAAA
AACgjW1loo9vsqCNbbKYhWWyjXpaZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrmHhltKGBsrelhLK0oYGyq5h4sp2KarKNelplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAu6iIssi1lLLNupmyyLWUsruoiLKrmHiymIVlsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMi1lLLZyKWy4tGustnIpbLItZSytKGBsqCNbbIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADNupmy4tGusvfmw7Li0a6yzbqZsrelhLKij2+yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyLWUZdnIpbLi0a6y2cilssi1lLK0oYGyoI1tZQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADItZRlzbqZssi1lLK7qIiyq5h4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA/4CsQf+ArEH/gKxBAICsQQCArEGBgKxBw4CsQcP/rEHmD6xB/AesQfwHrEH8B6xB/AesQfwHrEH+D6xB//+sQQ==
"@
#endregion ******** $BuildIcon ********
$FCGSmallImageList.Images.Add("BuildIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($BuildIcon))))

#region ******** $ToolsIcon ********
$ToolsIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALS0qUlVVVPtdXXz/Ly8x1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADs7QfWKisn/XV3P/z8/hf8vLyOVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmJiaLICAghwAAAAA5OUL0UFCw/2Vl2P90dO7/NDRg/jExJDcAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA3NzftkpKS/7e3t/9FRUXvISEcNVRUXf5aWs7/eHj2/2Rk1v8wMED2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZWVl/+/v7//9/f3/0dHR/y4uLtAjIxlUR0dq/1BQ0/+Bgf3/VFSy/ysr
KtEAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dP7g4OD/0NDQ//Ly8v+urq7/JCQjijAwJoo8PHr/VVXe/3p6/f9WVoD/MTEofgAAAAAAAAAAAAAAAAAAAAAtLS3Ap6en//Ly8v/Pz8//7Ozs/4iIiP8dHRpGMDApxzg4
iv+bm/T/v7/I/ysrKNUAAAAAAAAAAAAAAAAAAAAAAAAAACcnJ9CsrKz/4ODg/8HBwf/i4uL/Xl5e/AAAAAA3NzHmcXFt/6mpqP9XV1f8JycnGgAAAAAAAAAAAAAAAAAAAAAAAAAAMDAw36qqqv/BwcH/wsLC/8rK
yv8+Pj7yAAAAABwcHDNYWFj7wMDA/z4+PvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NTXsq6ur/7u7u//Nzc3/pKSk/zU1Ne8tLS3HGBgYpX5+fv6ysrL/JCQkzQAAAAAAAAAAAAAAAAAAAAAAAAAAIyMjBjw8
PPOsrKz/u7u7/8nJyf/Z2dn/zc3N/3Jycv8jIyP4qqqq/6Ojo/84ODjwLCwsHQAAAAAAAAAAAAAAAAAAAAAkJCQPSUlJ/L+/v//Dw8P/4+Pj//j4+P/s7Oz/YGBg/1lZWf/4+Pj/wsLC/zk5OeMAAAAAAAAAAAAA
AAAAAAAAAAAAAEFBQfe3t7f/wcHB/7W1tf/CwsL//////7u7u/8jIyPulZWV/+Xl5f9zc3P/AAAAAAAAAAAAAAAAAAAAAAAAAABERET3u7u7/83Nzf92dnb/IiIi76Kiov/Gxsb/IiIifSkpKZtFRUXyODg4xQAA
AAAAAAAAAAAAAAAAAAAAAAAAKysrn3t7e//Jycn/4ODg/0dHR+spKSm/UFBQ+yoqKhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqKiqbTk5O+Xh4eP9ERETqAAAAACkpKQkAAAAAAAAAAAAA
AAAAAAAA8P+sQfB/rEGQP6xBAD+sQQAfrEEAD6xBAA+sQYEHrEHAh6xB4AOsQeAArEHwAKxB+ACsQfgArEH4B6xB/C+sQQ==
"@
#endregion ******** $ToolsIcon ********
$FCGSmallImageList.Images.Add("ToolsIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ToolsIcon))))

#region ******** $GenerateIcon ********
$GenerateIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA
AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeHExv728/8zMzP/RwLD/voxZ/72LWP/CubD/9vb2//b29v+dm5n/3Nzc/5iW
lOcPDg1eBwcGBQAAAAAAAAAAkndfMcGXb/+djoD/x5xw/8VmAP/FZgD/sZN3/+nSvP+5mHj/lZOR//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAMV2KYrIbAr/xm4S/8p8K//grnj/4bF9/8Z1If/IbQ7/yG0N/6B9
XP/U0dD/8vLy/9bW1v93dHLSBwYGJgAAAADKcRb+15dP/9GGM//RhjT/26Fe/9uhXv/PgSv/1I5B/9aTSf++cST/19bV/97c2v/b2dj/yMXD/iEeHHidXCQS0YpD/t+tcv/gsHj/361z/9qgXP/aoFz/4LF6/+Cx
ev/fr3X/xIVH/8PAv//09PT/9vb2/+3t7f9DPzycy4A639iZUv/dqGr/2JxY/9msg//jzr3/4cq3/9emdv/an1v/3ahp/9eWTf+2gE3/6Ojo//Ly8v/p6en/Qz88nc6LTeHaoFz/3KZm/8abdf/19fX/8vLy/+7u
7v/r6ur/1KFy/9ymZv/cpWX/uIlb/9/f3//p6en/4eHh/0M/PJ3QlWPh26Jh/92naP+qjnn/7+/v//b29v/y8vL/7u7u/9Sogf/cpWX/3als/7uTb//Z2dn/4eHh/9ra2v9DPzycyIZO4eK1gv/juIX/2K5//6iR
gf/U09P/4+Hh/9SymP/Phjn/47mH/+Gyff+1hVr/1NTU/9vb2//U1NT/Qz88nLRqOE7Un2r+58OY/+W+jv/hs3z/zJRc/8qKTP/Ujj//2p9c/+bBlP/IlGT/x7Om/93d3f/X19f/0dHR/0M/O5wAAAAAz5hm/u3S
sf/u07P/5r+R/9+rbv/an1v/3qlt/+3Ssv/rzKf/voxh/9DQ0P/j4+P/3Nzc/9XV1f9CPjucAAAAAMGHY8Xz4c3/7te9/+/Xvf/37N//9urc/+vQsv/x3cX/8dzE/8iiiv/r6+v/6enp/+Pj4//Z2dn/Qz88kQAA
AAClaEgSsH5a58yqlf/Oo4X/+/fx//ju4/+uhm//y6SK/8SYe//k4uH/5OPi/9/e3f/Y19b/r6un+2liXEAAAAAAAAAAAIpqWROKeG5EnW9TedSpitvQoX7beFNBa4R0akWKenBFjYR8RY2FfkWMhHxFiH94RYZ+
dyQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgACsQYAArEGAAKxBwAGsQQ==
"@
#endregion ******** $GenerateIcon ********
$FCGSmallImageList.Images.Add("GenerateIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($GenerateIcon))))

#region ******** $FormIcon ********
$FormIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBwZvVVJN9l9cVv9fXFb/X1xW/19cVv9fXFb/X1xW/19cVv9fXFb/X1xW/19cVv9fXFb/X1xW/1VS
TfYHBwZvY2Jg9d/c1v/f3Nb/39zW/9/c1v/f3Nb/39zW/9/c1v/f3Nb/39zW/9/c1v/f3Nb/39zW/9/c1v/f3Nb/Y2Jg9Xt7ev/08/H/9PPx//Tz8f/08/H/9PPx//Tz8f/08/H/9PPx//Tz8f/08/H/9PPx//Tz
8f/08/H/9PPx/3t7ev9/f3///Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P/8/Pz//Pz8//z8/P9/f3//gYGB//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+
/v/+/v7//v7+//7+/v/+/v7/gYGB/4GBgf///////////////////////////////////////////////////////////////////////////4GBgf+BgYH/////////////////////////////////////////
//////////////////////////////////+BgYH/gICA//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/gICA/35+fv/6+vn/+vr5//r6+f/6+vn/+vr5//r6
+f/6+vn/+vr5//r6+f/6+vn/+vr5//r6+f/6+vn/+vr5/35+fv95eHf/7+7r/+/u6//v7uv/7+7r/+/u6//v7uv/7+7r/+/u6//v7uv/7+7r/+/u6//v7uv/7+7r/+/u6/95eHf/bGtn/9fTy//X08v/19PL/9fT
y//X08v/19PL/9fTy//X08v/19PL/9fTy//X08v/19PL/9fTy//X08v/bGtn/1BJQP+ekoD/npKA/56SgP+ekoD/npKA/56SgP+ekoD/npKA/56SgP+ekoD/npKA/56SgP+ekoD/npKA/1BJQP9DLwz/hVwY/4Vc
GP+FXBj/hVwY/4VcGP+FXBj/hVwY/4VcGP+FXBj/hVwY/4VcGP+FXBj/bVBC/3hYM/9DLwz/UDwH/594D/+feA//n3gP/594D/+feA//n3gP/594D/+feA//n3gP/594D/+feA//n3gP/1hOvv9hTYH/UDwH/0Qz
CfXBojj/yaxE/8mtRP/KrUT/yq1E/8quRP/LrkT/y65E/8quRP/KrUT/yq1E/8msRP/DpkX/vZ44/0MxCvUEAwBvOyoJ9kk1Cf9OOwf/VEAF/1hFA/9cSQH/YE0A/2BNAP9cSQH/WEUD/1M/Bf9NOQf/RzMJ/zkn
CvYEAgBvAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQ==
"@
#endregion ******** $FormIcon ********
$FCGSmallImageList.Images.Add("FormIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FormIcon))))

#region ******** $DialogIcon ********
$DialogIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwGgAbMxoAYQsFAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAABjVAAg65cAP4cEBceAAxchQADIi8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJBAEjSiYVt6BaEO2uXAD/MhoWqwAj0v8ECj+WAAAAKAAAABIAAAAEAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAUioXmqdgPf/VkUb/rlwA/55zYv8AI9L/Wz5a/5tZOPuDSy7sZzkj00ooF7EuFwyLEggDWgEAAAcAAAAAAAAAAGU2H6qsZEH/57Nw/65cAP/Pwb3/ACPT/4uKsv/03tH/68+9/+fB
qv/is5j/3aOD/8N7VP5BIRJ7AAAAAAAAAABpOSKqsWlG/+O1ef+aTgD/0crL/wAiyv+NkLv//fPt//3y6//88en//O/n//zu5f/tvJ7/ekQprQAAAAAAAAAAbT0kqrdvSv/r28j/tqWP/+nn6/9AU7b/panP//78
+v/++/n//vr3//759v/++PT/7MSr/35ILK4AAAAAAAAAAHFBKKq8dE7/9vb2/7a2tv//////w8PD/+/v7/////////7+///+/v///v7//v7+/+fCrP+BSy+uAAAAAAAAAAB1RSuqwnlT//b29v+2trb//////8PD
w//v7+/////////////////////////////gvan/g04xrgAAAAAAAAAAekkuqsh/V//29vb/sbGx/6urq/+cnJz/xMTE/+vr6///////////////////////2rik/4VQM64AAAAAAAAAAH5NMarNhFv/9vb2/6ys
rP/Jycn/uLi4/83Nzf/s7Oz//////////////////////9OyoP+IUzWuAAAAAAAAAACCUDSq0Yhf//j39v+0tLT/9fX1/+3t7f/29vb////////////////////////////MrZz/ilU3rgAAAAAAAAAAhlM3qtWL
Yf/Oo4z/18G0/+HSyf/r4dz/8e3r//Ly8v/y8vL/8PDw/+rq6v/l5eX/u56N/4tXOK4AAAAAAAAAAJJZOZ/bkWf/yn9X/8+FW//Ui2D/2ZBl/96Vaf/inXL/1pdx/7d7Xv+ve2H/j21w/3tiif+OWTquAAAAAAAA
AABiMhkstXJMw7h0TuO6dk/1wHtU/seBWf/OiF//1Y9l/8yGXf+9d1D/tW5J/51qb/9iWLr/hk0uggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUiEAhMJBEaUicSLFkqEz5lMRdPcDcbYXc7HnR3Ox6CbjQZVz8e
DwIAAAAA4/+sQcD/rEGAH6xBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxB+AGsQQ==
"@
#endregion ******** $DialogIcon ********
$FCGSmallImageList.Images.Add("DialogIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($DialogIcon))))

#region ******** $ControlsIcon ********
$ControlsIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISAkByAfIycgHyI6IB8iOyAfIjsgHyI7IB8iOyAfIjsgHyI7IB8iOyAfIjsgHyI6IB8jJyIh
JQcAAAAAJSQnBzEwM3JgX2Dfenp68oqJivOhoaHzhISE84aFhfOEhITzhIOC86Cfn/OOjo7zkZGR84iIiN08Oz5sKSgrBzAvMjZzcnL3fn5+/3V1df+ioqL/rKys/1RUVP8yMzL/Kysr/1JSUv+xsbH/nZ2d/3Z2
dv9/f3//nJub8TEwMy9QT1Bwk5OT/6Wlpf/LzMz/xcXF/3Jycv8zMzP/MDAw/zAwMP82Njb/fX19/8bGxv/IyMj/pKSk/5iXl/9JSEphZWNkdcHBwP/Ly8v/l5eX/2pqav9GRkX/RERE/0VFRf9FRUX/Q0ND/z8/
P/9ra2v/np6e/9HR0f+ysrL/RkVHZW9tbnRmZmX/YGBg/0JCQv89PT3/TE1M/1paWv9iYmL/ampq/1paWv9JSUn/PDw8/0FCQv9iYmL/Y2Nj/0VERmVzcXF0bW1s/2trav8+Pj7/PT09/2FhYf9ycnL/X19f/2dn
Zv9ycXH/aGho/1dXVv9XV1f/ZGRj/15eXf9GRUdldXJydHBvb/+FhYX/SkpK/zg4OP9vb2//i4uL/4qKiv+Kiov/i4uL/1BQUP86Ojr/UFBQ/4iIiP9ubW3/SklKZXVzcnRYWFf/Z2dn/4WFhf+Li4v/ampq/3Fx
cf+ZmZn/pqan/29vb/9ERET/Pz8//4qKi/9sbGz/VFRT/09OT2Z1c3J0bm1t/42Njf+np6f/h4eH/1tbWv9fX1//XV1d/3x8fP+FhYX/WVlZ/4yMjP+oqKj/fHx8/3Bvb/9UU1RmdHJydIKBgf96enr/tLW1/76/
vv+urq3/e3t7/2hnaP9eXl7/u7y7/66urv+/v7//qKmo/319ff+Eg4P/WlhaZnJwcHSTk5L/kJCQ/4+QkP+/v7//tra2/9nZ2f/r6+v/6enp/9LS0f+1tbX/vLy8/4+Pj/+QkJD/lpWV/11bXGZtbGx0o6Oj/6mp
qv+qqqr/qqqq/7i4uf+pqan/zc3N/8rKyv+kpKT/ubm5/6mpqf+qqqr/qqqq/6Kiov9XVVZldXR0aK6urv/AwMH/wMDB/8DAwf/AwMD/wMDA/8DAwf/AwMD/wMDA/8DAwP/AwMD/wMDB/8DAwf+lpKT/VFNUVYWE
hByioqLxv7+//83Ozv/Ozs7/zc7O/83Nzv/Nzc3/zc3N/83Nzv/Nzc7/zc3N/83Nzf+9vb3/hIOD52BfYRAAAAAAnp2dOZ+enbudm5vWt7az0sG/vM/Dwb7PxcK+z8XCv8/Dwb7PwL68z7CurNOPjo3Yg4KBtXh3
eC4AAAAAgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQQ==
"@
#endregion ******** $ControlsIcon ********
$FCGSmallImageList.Images.Add("ControlsIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ControlsIcon))))

#region ******** $EventsIcon ********
$EventsIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM7f82AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvn/8UJxP8RAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJy/gFC87//wrX/z8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvs/y0KvvP/C9b/hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADPH/bgq27v8Lyf/HAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK5f+0Cbru/wnI/PcK3P8bAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjl
/+MI1fX/CNT3/wnw/1YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH6//FB+f4/wbi9/8I1PT/CeP/ogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAny
/3QH5///Be35/wX0/P8F6vn/B+D5/wn+/78AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzv/8oHxfH/Btz2/wXr+f8F8/r/Bv7/zwf//yUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAK0f8ICuD/6QjQ8/8G3/f/B/D/0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK6//KB87z/wja/f8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAArr/6MJvfD/CtX/iQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADO//dwrC+P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK8f9UC+X/qwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArO/yoAAAAAAAAAAAAA
AAAAAAAA7/+sQfP/rEHx/6xB+P+sQfx/rEH+H6xB/w+sQf8HrEH8B6xB+A+sQfg/rEH+P6xB/x+sQf+frEH/z6xB/++sQQ==
"@
#endregion ******** $EventsIcon ********
$FCGSmallImageList.Images.Add("EventsIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EventsIcon))))

#region ******** $LibraryIcon ********
$LibraryIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFh0AAJkfAk3doYuoWyBCotbdwAEAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAWHUACmd8D1qPlF7nvbjD/6Wesv+ioSr/k5kgxVt4ABgAAAAAAAAAAAAAAAAAAAAAAAAAAF15ABFjfQhBe4w2nZuhe/G6stP/tK/j/6qxrf+RmWP/sqQr/9HFTf+koirkaH4GNwAA
AAAAAAAAAAAAAAAAAABpfRNFkpZu4rexx/+yssb/j5p2/4uMIP+skTv/uqiN/6hjTf/Bm0v/zcFK/720PvtzhgtuAAAAAAAAAAAAAAAAAAAAAJqag5Gnpn//qJhK/7qNRP/RqKv/0dbr/7vM1/+yfF7/0aeU/72O
Uf/RxVD/tZ9r/3t+OJ9deQAJAAAAAG92EEqmnFjrya+R/866wP/E3u//u9Tg/7qvnv+wlH7/vYpu/+PHrP/Rnn3/voZI/7aOmf/Hqs3/e4oOfgAAAACeWUE/rJCH4cTN2v++ysX/uJ95/6Z0WP+acW//upiU/29n
lv+LcoL/5LOG/+nIqf+7e1//tYJ0/4qbH5AAAAAAAAAAAKigjZi2moT/oXlk/5ZxeP+vlqT/4sa8/+7HpP9nfKT/EHvY/25XlP/VnHP/8dKw/9Gedf+dbTOrjFomFIFNVkGQb3jpr5Wf/8Gxv//wzrP/7cSg/6ya
oP9tfq//OGu7/yxs0v8pevr/WmOZ/8SSdP/tx6D/wXxW/atWP2FhS4QQqomQovLXr//tv5j/moiW/0d3vf89h+P/T6f6/0yb9v81c9j/NGTU/zJ0xf9AZ6z/oXVr/9iZZ/+2aEVol212AqWHhpF1irP/P3vI/zOR
8P9Tq///WKv6/06i1v9xr7D/d7y2/zqM1/83bsP/OXjH/zZpuv98ZXzpg0tXQR0llhIlQamMa63r/2K1+v9kvPX/YavL/3y2nf+x06T/3O3I/97uzf+HwrD/PJPT/zl3z/85c8L/Mm/D/ydEqYEAAAAAAAAAADE2
mi9Ibb+yW6G2/qnbmv/k8s3/3OvR/9Pmyf/W6M7/4e3N/7TYtP9lsb3/QYfV/zpywf8uR6WMAAAAAAAAAAAAAAAAAAAAACgznTFFc7TNjMiw/9bsyP/j79v/2ezK/7/itv+o2LL/dbms/0yN0vMtRaecKCyVJwAA
AAAAAAAAAAAAAAAAAAAAAAAAJCWUBi9LqYd9tLb+u+PB/3u3u/9OhrniN1ywoS08pVQnKpQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMj2jS0ZgsZcqN6E7JCeUBwAAAAAAAAAAAAAAAAAA
AAAAAAAA+D+sQeAfrEEAD6xBAAesQYABrEEAAaxBAAGsQYAArEEAAKxBAACsQQAArEEAAKxBwACsQfAArEH4A6xB/h+sQQ==
"@
#endregion ******** $LibraryIcon ********
$FCGSmallImageList.Images.Add("LibraryIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($LibraryIcon))))

#region ******** $ImageIcon ********
$ImageIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHFTPP9XQC7/V0Au/1dALv9XQC7/V0Au/1dALv9XQC7/V0Au/1dALv9XQC7/V0Au/1dA
Lv9XQC7/V0Au/1dALv+OaUv/2cu1/9rMt//azLf/2cy2/9nMtv/ZzLb/2Mu1/9fJs//Vx7D/1Mav/9PErv/TxK3/08Wu/9HErP9XQC7/jmlL/9rMtv+oh1P/p4VS/6iHU/+lhFD/pYVQ/6OCTf+ffkf/nn1G/5x7
RP+Zdj//lnM8/5NxOf/Sw6z/V0Au/45pS//dz7n/rY1Z/62MWv+si1n/rY1a/6eGUv+mhVH/pIVQ/6F/Sv+gf0r/nn5I/5x7Rf+WdD3/08Wu/1dALv+OaUv/v66r/2ZBN/9pRTn/Y0A1/2ZFOP9nSDr/a009/2pN
Pf9mSjr/XUQz/2FINv9hSjb/WkYx/7ixqP9XQC7/jmlL/8m7tP9+XEv/jmxc/4hmVv+heWr/hF9Q/39dTP9/XEz/j2xc/6V/cf+Zdmb/lHFh/5RwYf/SxL3/V0Au/45pS//47un/79bJ/+/az//w3NP/5cnB/+rP
xf/ewbP/1rip/+nNw//p0Mj/6dDJ/+3Vy//s1Mn/9+zn/1dALv+OaUv/+/Lq//nu5v/47OT/8tjF/+vJsv/u1cn/9eLW//Xj1//35dn/9ODT//Pf0v/w2Mn/9OHV//jt6P9XQC7/jmlL//vs4P/56Nz/9+LT//TD
mf/zvpD/8MCZ//HTvP/x1sL/7820//DDnv/zxZ3/9cWc//bdxf/99/D/V0Au/45pS//84cf/+M6o//jBjv/4wIr/+MCK//jAiv/4wIr/976K//nCjv/4wIr/+MCK//jAiv/648j//PPo/1dALv+OaUv/8tW5//LV
uf/y1bn/8tW5//LVuf/y1bn/8tW5//LVuf/y1bn/8tW5//LVuf/y1bn/8tW5//HTuP9XQC7/jmlL/45pS/+OaUv/jmlL/45pS/+OaUv/jmlL/45pS/+OaUv/jmlL/45pS/+OaUv/jmlL/45pS/+OaUv/dlc+/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQf//rEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEH//6xB//+sQQ==
"@
#endregion ******** $ImageIcon ********
$FCGSmallImageList.Images.Add("ImageIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageIcon))))

#region ******** $EncodeIcon ********
$EncodeIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA
AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeXExrKuq/319ff+1tbX/hoaG/8bGxv+Tk5P/2NjY/42Njf+LiYf/3Nzc/5iW
lOcPDg1eBwcGBQAAAAAAAAAAhn12MX59e/+srKz/W1tb/76+vv9hYWH/0tLS/6ampv+ampr/pKKg//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAId+dzGko6H/eHh4/6ampv+AgID/tra2/4uLi//Q0ND/j4+P/+rq
6f/e3Nr/8vLy/9bW1v93dHLSBwYGJgAAAACJf3kxu7m4/4ODg/+8vLz/kpKS/9DQ0P+Xl5f/29vb/6enp//o6Oj/oqKh/83Kyf+PjYv/tbKv/iEeHHgAAAAAioF6McnHxv+CgoL/kpKS/7a2tv+lpaX/kZGR/7Gx
sf/MzMz/cHBw/8vLy/91dXX/xMTE/5OTk/9DPzycAAAAAIyDfDHLysn/hISE/8HBwf+FhYX/vb29/3p6ev/IyMj/hoaG/6SkpP+JiYn/pqam/4eHh/+urq7/Qz88nQAAAACNhH0x29rZ/8HBwf/j4+P/vLy8/+Hh
4f/AwMD/5+fn/8DAwP/k5OT/ubm5/9fX1/+4uLj/z8/P/0M/PJ0AAAAAjoV+MeHf3v+NjY3/7+/v/4uLi/+0tLT/rKys/319ff+oqKj/oKCg/4GBgf/c3Nz/f39//9PT0/9DPzycAAAAAI6FfzHZ2Nf/jY2N/+3t
7f+Kior/urq6/6Wlpf+Ghob/oKCg/6Ojo/95eXn/2tra/3Nzc//U1NT/Qz88nAAAAACPhX8x4+Lh/9vb2//29vb/1dXV//Pz8//Ly8v/8vLy/8PDw//i4uL/wcHB/9jY2P+4uLj/0NDQ/0M/O5wAAAAAj4Z/MbKw
r/+UlJT/ycnJ/3R0dP/AwMD/kpKS/7q6uv9xcXH/19fX/2xsbP+6urr/goKC/5aWlv9CPjucAAAAAIuBejGXlZT/ysrK/8XFxf+bm5v/tbW1/8zMzP+vr6//lpaW//Ly8v+SkpL/wMDA/7CwsP+Li4v/Qz88kQAA
AACJf3gNpJ2Y56empf/k4+L/uLe2/+zs6/+mpaX/4eDg/62srP/h4N//pKSj/97d3P+VlJP/pqKf+2hhXEAAAAAAAAAAAIyDfBOOhX5Ek4qDRZOLhEWSioNFkoqDRZKJgkWQiIFFj4d/RY2FfkWMg3xFiH94RYV8
diQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBwAGsQQ==
"@
#endregion ******** $EncodeIcon ********
$FCGSmallImageList.Images.Add("EncodeIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EncodeIcon))))

#region ******** $ExtractIcon ********
$ExtractIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVhAou1IMJddOCCHXTgAd10n4GddF9BXXQewR1z3oDdc54AnXOdgF1zXUAb811AAUAAAAAAAAAAAAA
AAAAAAAA1oYLhdWFC//Ugwr/04II/9OAB//Sfgb/0X0F/9B7BP/PegP/z3gC/852Af/NdQAfAAAAAAAAAAAAAAAAAAAAANeIDYXWhwz/1YUL/9WECv/Uggn/04EI/9J/B//RfQb/0XwF/9B6BP/PeQL/zngBHwAA
AAAAAAAAAAAAAAAAAADYig6F14kO/9aHDP/Whgv/1YQK/9KBCf/SgAj/0oAH/9J+Bv/RfAX/0HsE/896Ax8AAAAAAAAAAAAAAAAAAAAA2YwQhdiLD//Yig7/14gN/82BDP/InV3/wocw/81+CP/SgAf/0n8G/9F9
Bf/RfAQfAAAAAAAAAAAAAAAAAAAAANqPEYXajRH/2YwP/9iKDv/UnEP/7u/v/+fk4P/Kqnr/w30U/9KACP/Sfwf/0n4GHwAAAAAAAAAAAAAAAAAAAADbkROF25AS/9qOEf/ZjBD/1o0Y/+jaw//u7u7/7Ozs/9rM
tv/DfRT/0oEI/9OBCB8AAAAAAAAAAAAAAAAAAAAA3JMUhdySE//bkBL/2o8R/9mNEP/ZpE//8PHx/+7u7v/r7Oz/2sy2/8N9FP/NfggfAAAAAAAAAAAAAAAAAAAAAN6VFoXdlBX/3JIU/9uRE//ajxL/2I0Q/+G/
hf/w8fH/7u7u/+vs7P/azLb/vJJSJQAAAAAAAAAAAAAAAAAAAADflxeF3pYW/92VFf/ckxT/3JET/9uQEv/ZjRH/4r+F//Dx8f/u7u7/6+vr/+fh17/VewLD1XoBfAAAAAAAAAAA4JkZgt+YGP/elxf/3pUW/92U
Ff/ckhT/25AT/9mOEf/iv4b/8PDw/+zo4P/cmDj/138F/9Z8A/7VegEmAAAAAOCaGQ3gmhkw35gYMN6WFjDdlRUw3ZMUMNySEzDbkBIw1osQMO3j0obfnz3/2YYK/9iDCP/XgQbi14AFEwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcjxGs240P/9qKDf/ahwv/2YUJ/9iDB8/YggcOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3ZETOd2REu/cjhDA24wO/9qJDP/Zhgr/2YUJZgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADekxMI3o8PAdyPEZHcjQ//24sO+tqICzcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcjRIA3ZARN9yO
ECQAAAAAAA+sQQAPrEEAD6xBAA+sQQAPrEEAD6xBAA+sQQAPrEEAD6xBAAOsQQABrEEAAaxB/4CsQf+ArEH/wKxB//msQQ==
"@
#endregion ******** $ExtractIcon ********
$FCGSmallImageList.Images.Add("ExtractIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExtractIcon))))

#region ******** $SourceIcon ********
$SourceIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8Av3Em1r9xJvnHfzz9yIZH/LZaBPzDeDD9y45U/cqLUf7Cdi/5wHIncFRUVKdUVFT/VFRU/2dn
Z7v///8A////AL9xJsG9bSD2xXk0//Ph1P/fvJv/x4JD/961kf/lx6z/xHs3/75tH87///86//////////9UVFT/////AP///wC/cSabwHMq67xpGf/FeTL/8NrH//Df0f/GgD//u2YV/8FzKv/BdSz63LGIGf//
//P/////VFRU/////wD///8Av3EmXsByJ+LCdy//vGsc/61HAP/htIz//////8F5Nf+9aRr/wXQr/8F0K0b///+7/////1RUVP////8A////AL9xJgy/cSbYwXUs/bxqG//DdCv/89/Q/9+8m/+9bB7/wHEm/8F0
K//BdCuD////dv////9UVFT/////AP///wD///8Av3Emvb9wJfa+ax3/9uTW/+XIrv+zVQD/wHAl/8F1Lf/BdCv/wXQr2f///zT+/v7/VFRU/////wD///8A////AL9xJom/cSfoxXs0/MyNUfy6Zhb9wHEl/MF1
Lf3BdCv8wXQr/cF0K9z///8A/v7+/1RUVP////8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////CP7+/v9UVFT/////AP///wD///8A////AFRUVP/9/f3/////////
///////////////////////////////////+/v7/VFRU/////wD///8A////AP///wBUVFT//f39/////////////////////////////////////////////v7+/1RUVP////8A////AP///wD///8AVFRU//39
/f/////////////////////////////////+/v7//v7+//39/f9UVFT/////AP///wD///8A////AFRUVP/9/f3///////////////////////////+RkZH/VFRU/1RUVP9UVFT/VFRU/////wD///8A////AP//
/wBUVFT//f39////////////////////////////VFRU//7+/v//////uLi4/2dnZ9T///8A////AP///wD///8AVFRU//39/f///////////////////////////1RUVP/+/v7/ubm5/2dnZ9toaGgc////AP//
/wD///8A////AFRUVP/9/f3///////////////////////////9UVFT/ubm5/2dnZ9xoaGgcAAAAAP///wD///8A////AP///wBnZ2e2VFRU/1RUVP9UVFT/VFRU/1RUVP9UVFT/VFRU/2dnZ9ZoaGgdAAAAAAAA
AAD///8AgAGsQYABrEGAAaxBgAGsQYABrEHAAaxBwAmsQf/xrEHgAaxB4AGsQeABrEHgAaxB4AGsQeABrEHgA6xB4AesQQ==
"@
#endregion ******** $SourceIcon ********
$FCGSmallImageList.Images.Add("SourceIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($SourceIcon))))

#region ******** $ClearIcon ********
$ClearIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkMDAyPFRQUmBUUFJgVFBSYFRQUmBUUFJgVFBSYFRQUmBUUFJgMDAyPAAAAKQAA
AAAAAAAAAAAAAAAAAAxRUE/q6ujm//Hw7v/x8O7/8fDu//Hw7v/x8O7/8fDu//Hw7v/x8O7/6ujm/1FQT+oAAAAMAAAAAAAAAAAAAAA1paOh////////////////////////////////////////////////////
//+lo6H/AAAANQAAAAAAAAAAAAAANqinpf/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/qKel/wAAADYAAAAAAAAAAAAAADapqKf//f39//39/f/9/f3//f39//39/f/9/f3//f39//39
/f/9/f3//f39/6mop/8AAAA2AAAAAAAAAAAAAAA2qqmo//z7+//8+/v//Pv7//z7+//8+/v//Pv7//z7+//8+/v//Pv7//z7+/+qqaj/AAAANgAAAAAAAAAAAAAANquqqf/6+vn/+vr5//r6+f/6+vn/+vr5//r6
+f/6+vn/+vr5//r6+f/6+vn/q6qp/wAAADYAAAAAAAAAAAAAADasq6n/+Pj3//j49//4+Pf/+Pj3//j49//4+Pf/+Pj3//j49//4+Pf/+Pf2/6upqP8AAAA2AAAAAAAAAAAAAAA2rKuq//b19P/29fT/9vX0//b1
9P/29fT/9vX0//b19P/29fT/9vX0//Tz8f+npaP/AAAANgAAAAAAAAAAAAAANq2sq//08vH/9PLx//Ty8f/08vH/9PLx//Ty8f/08vH/8/Lw//Lw7v/r6OT/nJiU/wAAADYAAAAAAAAAAAAAADatrKv/8e/t//Hv
7f/x7+3/8e/t//Hv7f/x7+3/8e/t/+/s6v/n4+D/1c7H/4F5cf8AAAA2AAAAAAAAAAAAAAA2ra2s/+3r6f/t6+n/7evp/+3r6f/t6+n/7evp/+jk4f/k39r/5eHd/+Tg3P9RTkvsAAAAGwAAAAAAAAAAAAAANq6t
rP/q5+T/6ufk/+rn5P/q5+T/6ufk/+jl4v/f2dT/6OXi/+bj4P9lZWTsAAAAMQAAAAAAAAAAAAAAAAAAADWtrKv/5uPf/+bj3//m49//5uPf/+Th3f/e2dT/08zE/+vp5/9kZGTrAAAALgAAAAAAAAAAAAAAAAAA
AAAAAAAMW1tb6u/u7P/w7uz/8O7r/+7r6f/n49//1M3G/72zqP9kZGTrAAAALwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkODg6PFxcXmBcXF5gXFxeYFhUVmBMSEZgMCwqYAAAALgAAAAAAAAAAAAAAAAAA
AAAAAAAAwAOsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAOsQYAHrEGAD6xBwB+sQQ==
"@
#endregion ******** $ClearIcon ********
$FCGSmallImageList.Images.Add("ClearIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ClearIcon))))

#region ******** $CopyIcon ********
$CopyIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBwdrZGJh9HNxcP9zcXD/c3Fw/3NxcP9zcXD/c3Fw/3NxcP9NTErkAAAAOAAAAAAAAAAAAAAAAAAA
AAAAAAAAZWRj9Pv7+v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/9fTy/ykoJ7IAAAAAAAAAAAAAAAAAAAAAAAAAAHd1dP/+/v7/ycnJ/8nJyf/Ly8r/2dnY/+fm5v/f39//9/f3//r5+P83Nja+AAAAAAAA
AAAAAAAAAAAAAAAAAAB4d3X//f39/8nJyf/Nzc3/z8/P/+Tk4//h4eH/5eXl//39/f/5+fj/ODc2zAAAADYAAAA2AAAANgAAAC4AAAABeXh3//z7+//g39//3Nzc/9/f3//i4uL/4N/f/+Dg4P/k5OP/+fj3/5uU
jv+qqaf/qqmn/6qpp/+cm5n/GxsapXp5eP/6+fj/wcHA/8rJyf/Kysn/w8LC/8fHxv/Pzs7/4uLh//j39v/AurP//v7+/////v////7//v7+/3Jxb/x7enn/9/b1/8XFxP/Lysn/wsHA/8LBwP/IyMf/x8bF/+fm
5v/19PL/t7Ks/9DQ0P/Nzc3/4ODg//79/f94dnX/fHt6//Xz8v/X1tX/1NPS/9fV1P/Z19b/19bV/9LRz//d3Nv/7Onm/8zGwP/u7e3/7Ovr/+/v7v/6+vr/eXh3/3x8e//x7+7/w8HA/8PCwP++vbz/w8LA/8jH
xf/GxMP/z8zJ/9PLxP+3sKn/0tLR/9PT0v/V1dT/8vHx/3p5eP99fHz/7ero/7u5uP+6uLf/vbu5/768uv/i39z/5uHd/+Le2f/W0Mr/tLCr/8nIyP/NzMz/4uHg//j39v96eXj/fn19/+fk4f+opqT/v7y6/7e0
sv+1srD/ysXA/+nm4//i39z/wb66/8PCwf/HxsX/xcTD/8bFxP/w7uz/dnRy/3V1dfnn4+D/5eHe/+Xh3v/k4Nz/3djT/8zEu//s6uf/wL26/8C/vf/Av77/wsC//8bFw//Fw8H/39rW/2diXv8RERGFjYyM/pua
mv+bmpn/l5aU/4uIhP+gl4//5OHd/87Myv/Lysj/zczJ/9nX1f/o5eH/5+Pf/97Z0/9BPTnsAAAAAAAAABQAAAAeAAAAHgAAAB4AAAAjfXx8/dnW0/+npaP/sa+t/6yqqP+wrqv/5ODc/+Th3f9qaWntAAAAMwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAnR0c/fm4+D/5eHd/+Xh3f/i3tr/1c/J/9vV0P9paGjtAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAx4dHR0+H9/f/9+fn7/eXh3/2llYf9CPjvrAAAAMQAA
AAAAAAAAAB+sQQAfrEEAH6xBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH4AaxB/AOsQQ==
"@
#endregion ******** $CopyIcon ********
$FCGSmallImageList.Images.Add("CopyIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($CopyIcon))))

#endregion ******** FCG Small ImageList Icons ********

# ************************************************
# FCG Form
# ************************************************
#region $FCGForm = [System.Windows.Forms.Form]::New()
$FCGForm = [System.Windows.Forms.Form]::New()
$FCGForm.BackColor = [MyConfig]::Colors.Back
#$FCGForm.ControlBox = $True
$FCGForm.Font = [MyConfig]::Font.Regular
$FCGForm.ForeColor = [MyConfig]::Colors.Fore
$FCGForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
$FCGForm.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FCGFormIcon)))
$FCGForm.KeyPreview = $True
$FCGForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))
$FCGForm.Name = "FCGForm"
$FCGForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen
#$FCGForm.TabIndex = 0
#$FCGForm.TabStop = $True
$FCGForm.Tag = (-not [MyConfig]::Production)
$FCGForm.Text = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
#endregion $FCGForm = [System.Windows.Forms.Form]::New()

#region ******** Function Start-FCGFormClosing ********
function Start-FCGFormClosing
{
  <#
    .SYNOPSIS
      Closing Event for the FCG Form Control
    .DESCRIPTION
      Closing Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Closing Event
    .PARAMETER EventArg
       The Event Arguments for the Form Closing Event
    .EXAMPLE
       Start-FCGFormClosing -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Closing Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 2 -Category 0 -Message "Exiting $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"

  if ([MyConfig]::Production)
  {
    [Void][Console.Window]::Show()
    [System.Console]::Title = "CLOSING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $FCGForm.Tag = $True
  }

  Write-Verbose -Message "Exit Closing Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormClosing ********
$FCGForm.add_Closing({Start-FCGFormClosing -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormKeyDown ********
function Start-FCGFormKeyDown
{
  <#
    .SYNOPSIS
      KeyDown Event for the FCG Form Control
    .DESCRIPTION
      KeyDown Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-FCGFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  If ($EventArg.Control -and $EventArg.Alt)
  {
    Switch ($EventArg.KeyCode)
    {
      "F10"
      {
        If ($FCGForm.Tag)
        {
          # Hide Console Window
          $Script:VerbosePreference = "SilentlyContinue"
          $Script:DebugPreference = "SilentlyContinue"
          [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
          [Void][Console.Window]::Hide()
          $FCGForm.Tag = $False
        }
        Else
        {
          # Show Console Window
          $Script:VerbosePreference = "Continue"
          $Script:DebugPreference = "Continue"
          [Void][Console.Window]::Show()
          [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
          $FCGForm.Tag = $True
        }
        $FCGForm.Activate()
        $FCGForm.Select()
        Break
      }
    }
  }
  Else
  {
    Switch ($EventArg.KeyCode)
    {
      "F1"
      {
        $FCGToolTip.Active = (-not $FCGToolTip.Active)
        $FCGBtmStatusStrip.Items["Status"].Text = "Enable / Disable My PS5 Form Code Generator ToolTips = $($FCGToolTip.Active)"
        Break
      }
      "F2"
      {
        $FCGBtmStatusStrip.Items["Status"].Text = "Show Change Log for $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
        $TmpContent = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()
        $CLogStart = ($TmpContent.IndexOf("<") + 3)
        $CLogEnd = ($TmpContent.IndexOf(">") - 1)
        Show-ChangeLog -ChangeText ($TmpContent.SubString($CLogStart, ($CLogEnd - $CLogStart)))
        Break
      }
    }
  }

  Write-Verbose -Message "Exit KeyDown Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormKeyDown ********
$FCGForm.add_KeyDown({Start-FCGFormKeyDown -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormLoad ********
function Start-FCGFormLoad
{
  <#
    .SYNOPSIS
      Load Event for the FCG Form Control
    .DESCRIPTION
      Load Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Load Event
    .PARAMETER EventArg
       The Event Arguments for the Form Load Event
    .EXAMPLE
       Start-FCGFormLoad -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Load Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea
  $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)
  $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)

  if ([MyConfig]::Production)
  {
    [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    [Void][Console.Window]::Hide()
    $FCGForm.Tag = $False
  }
  else
  {
    [Void][Console.Window]::Show()
    [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $FCGForm.Tag = $True
  }

  Write-Verbose -Message "Exit Load Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormLoad ********
$FCGForm.add_Load({Start-FCGFormLoad -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormMove ********
function Start-FCGFormMove
{
  <#
    .SYNOPSIS
      Move Event for the FCG Form Control
    .DESCRIPTION
      Move Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Move Event
    .PARAMETER EventArg
       The Event Arguments for the Form Move Event
    .EXAMPLE
       Start-FCGFormMove -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Move Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  Write-Verbose -Message "Exit Move Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormMove ********
$FCGForm.add_Move({Start-FCGFormMove -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormResize ********
function Start-FCGFormResize
{
  <#
    .SYNOPSIS
      Resize Event for the FCG Form Control
    .DESCRIPTION
      Resize Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Resize Event
    .PARAMETER EventArg
       The Event Arguments for the Form Resize Event
    .EXAMPLE
       Start-FCGFormResize -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Resize Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  Write-Verbose -Message "Exit Resize Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormResize ********
$FCGForm.add_Resize({Start-FCGFormResize -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormShown ********
function Start-FCGFormShown
{
  <#
    .SYNOPSIS
      Shown Event for the FCG Form Control
    .DESCRIPTION
      Shown Event for the FCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-FCGFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Shown Event for `$FCGForm"

  [MyConfig]::AutoExit = 0

  $Sender.Refresh()

  #Write-KPIEvent -Source "Utility" -EntryType "Information" -EventID 1 -Category 0 -Message "Begin Running $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"

  $HashTable = @{"ShowHeader" = $True}
  $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Display-InitiliazeFCGUtility -RichTextBox $RichTextBox -HashTable $HashTable }
  $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Initializing $([MyConfig]::ScriptName)" -ButtonMid "OK" -HashTable $HashTable
  
  # Select Form Control
  $FCGFormControlsListBox.SelectedItem = [MyRuntime]::ControlLookup["Form"] | Select-Object -First 1
  
  if ([MyConfig]::Production)
  {
    # Enable $FCGTimer
    $FCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
  }

  Write-Verbose -Message "Exit Shown Event for `$FCGForm"
}
#endregion ******** Function Start-FCGFormShown ********
$FCGForm.add_Shown({Start-FCGFormShown -Sender $This -EventArg $PSItem})

#region ******** Controls for FCG Form ********

#region $FCGTimer = [System.Windows.Forms.Timer]::New()
$FCGTimer = [System.Windows.Forms.Timer]::New($FCGFormComponents)
#$FCGTimer.Enabled = $False
$FCGTimer.Interval = [MyConfig]::AutoExitTic
#$FCGTimer.Tag = [System.Object]::New()
#endregion $FCGTimer = [System.Windows.Forms.Timer]::New()

#region ******** Function Start-FCGTimerTick ********
function Start-FCGTimerTick
{
  <#
    .SYNOPSIS
      Tick Event for the FCG Timer Control
    .DESCRIPTION
      Tick Event for the FCG Timer Control
    .PARAMETER Sender
       The Timer Control that fired the Tick Event
    .PARAMETER EventArg
       The Event Arguments for the Timer Tick Event
    .EXAMPLE
       Start-FCGTimerTick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Timer]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Tick Event for `$FCGTimer"

  [MyConfig]::AutoExit += 1
  Write-Verbose -Message "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)
  {
    $FCGForm.Close()
  }
  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)
  {
    $FCGBtmStatusStrip.Items["Status"].Text = "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  }

  #$FCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit Tick Event for `$FCGTimer"
}
#endregion ******** Function Start-FCGTimerTick ********
$FCGTimer.add_Tick({Start-FCGTimerTick -Sender $This -EventArg $PSItem})

# ************************************************
# FCGMain SplitContainer
# ************************************************
#region $FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGForm.Controls.Add($FCGMainSplitContainer)
$FCGMainSplitContainer.BackColor = [MyConfig]::Colors.Back
$FCGMainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None
$FCGMainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGMainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::Panel1
$FCGMainSplitContainer.Font = [MyConfig]::Font.Regular
$FCGMainSplitContainer.ForeColor = [MyConfig]::Colors.Fore
$FCGMainSplitContainer.Name = "FCGMainSplitContainer"
$FCGMainSplitContainer.Orientation = [System.Windows.Forms.Orientation]::Vertical
$FCGMainSplitContainer.Panel1MinSize = ([MyConfig]::Font.Width * 20)
$FCGMainSplitContainer.Panel2MinSize = $FCGMainSplitContainer.Panel1MinSize
$FCGMainSplitContainer.SplitterDistance = $FCGMainSplitContainer.Panel1MinSize
$FCGMainSplitContainer.SplitterIncrement = [MyConfig]::FormSpacer
$FCGMainSplitContainer.SplitterWidth = [MyConfig]::FormSpacer
$FCGMainSplitContainer.TabStop = $False
#endregion $FCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()

# ************************************************
# $FCGMainSplitContainer Panel1 Controls
# ************************************************
#region ******** $FCGMainSplitContainer Panel1 Controls ********

$FCGMainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)

# ************************************************
# FCGControls SplitContainer
# ************************************************
#region $FCGControlsSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGControlsSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$FCGMainSplitContainer.Panel1.Controls.Add($FCGControlsSplitContainer)
$FCGControlsSplitContainer.BackColor = [MyConfig]::Colors.Back
$FCGControlsSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None
$FCGControlsSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGControlsSplitContainer.Font = [MyConfig]::Font.Regular
$FCGControlsSplitContainer.ForeColor = [MyConfig]::Colors.Fore
$FCGControlsSplitContainer.Name = "FCGControlsSplitContainer"
$FCGControlsSplitContainer.Orientation = [System.Windows.Forms.Orientation]::Horizontal
$FCGControlsSplitContainer.SplitterIncrement = [MyConfig]::FormSpacer
$FCGControlsSplitContainer.SplitterWidth = ([MyConfig]::FormSpacer / 2)
$FCGControlsSplitContainer.TabStop = $False
#endregion $FCGControlsSplitContainer = [System.Windows.Forms.SplitContainer]::New()

# ************************************************
# $FCGControlsSplitContainer Panel1 Controls
# ************************************************
#region ******** $FCGControlsSplitContainer Panel1 Controls ********

# ************************************************
# FCGFormControls GroupBox
# ************************************************
#region $FCGFormControlsGroupBox = [System.Windows.Forms.GroupBox]::New()
$FCGFormControlsGroupBox = [System.Windows.Forms.GroupBox]::New()
# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
$FCGControlsSplitContainer.Panel1.Controls.Add($FCGFormControlsGroupBox)
$FCGFormControlsGroupBox.BackColor = [MyConfig]::Colors.Back
$FCGFormControlsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGFormControlsGroupBox.Font = [MyConfig]::Font.Regular
$FCGFormControlsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$FCGFormControlsGroupBox.Name = "FCGFormControlsGroupBox"
$FCGFormControlsGroupBox.Text = "Form Controls"
#endregion $FCGFormControlsGroupBox = [System.Windows.Forms.GroupBox]::New()

#region $FCGFormControlsListBox = [System.Windows.Forms.ListBox]::New()
$FCGFormControlsListBox = [System.Windows.Forms.ListBox]::New()
$FCGFormControlsGroupBox.Controls.Add($FCGFormControlsListBox)
$FCGFormControlsListBox.BackColor = [MyConfig]::Colors.TextBack
#$FCGFormControlsListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$FCGFormControlsListBox.DisplayMember = "Name"
$FCGFormControlsListBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGFormControlsListBox.Font = [MyConfig]::Font.Regular
$FCGFormControlsListBox.ForeColor = [MyConfig]::Colors.TextFore
$FCGFormControlsListBox.IntegralHeight = $False
$FCGFormControlsListBox.ItemHeight = [MyConfig]::Font.Height
$FCGFormControlsListBox.Name = "FCGFormControlsListBox"
$FCGFormControlsListBox.Sorted = $False
#$FCGFormControlsListBox.TabIndex = 0
#$FCGFormControlsListBox.TabStop = $True
#$FCGFormControlsListBox.Tag = [System.Object]::New()
$FCGFormControlsListBox.ValueMember = "Events"
#endregion $FCGFormControlsListBox = [System.Windows.Forms.ListBox]::New()

#region ******** Function Start-FCGFormControlsListBoxMouseDown ********
function Start-FCGFormControlsListBoxMouseDown
{
  <#
    .SYNOPSIS
      MouseDown Event for the FCGFormControls ListBox Control
    .DESCRIPTION
      MouseDown Event for the FCGFormControls ListBox Control
    .PARAMETER Sender
       The ListBox Control that fired the MouseDown Event
    .PARAMETER EventArg
       The Event Arguments for the ListBox MouseDown Event
    .EXAMPLE
       Start-FCGFormControlsListBoxMouseDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter MouseDown Event for `$FCGFormControlsListBox"

  [MyConfig]::AutoExit = 0

  $TempIndex = $Sender.IndexFromPoint($EventArg.location)
  if (($TempIndex -gt -1) -and ($Sender.SelectedIndices -notcontains $TempIndex))
  {
    $Sender.SelectedItems.Clear()
    $Sender.SelectedIndex = $TempIndex
  }
  $TempIndex = $Null

  Write-Verbose -Message "Exit MouseDown Event for `$FCGFormControlsListBox"
}
#endregion ******** Function Start-FCGFormControlsListBoxMouseDown ********
$FCGFormControlsListBox.add_MouseDown({Start-FCGFormControlsListBoxMouseDown -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormControlsListBoxSelectedIndexChanged ********
function Start-FCGFormControlsListBoxSelectedIndexChanged
{
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the FCGFormControls ListBox Control
    .DESCRIPTION
      SelectedIndexChanged Event for the FCGFormControls ListBox Control
    .PARAMETER Sender
       The ListBox Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ListBox SelectedIndexChanged Event
    .EXAMPLE
       Start-FCGFormControlsListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter SelectedIndexChanged Event for `$FCGFormControlsListBox"

  [MyConfig]::AutoExit = 0
  
  $FCGControlEventsCheckedListBox.Items.Clear()
  if ($Sender.SelectedItem.Events.Count -gt 0)
  {
    $FCGControlEventsCheckedListBox.Items.AddRange($Sender.SelectedItem.Events)
    ($FCGControlEventsCheckedListBox.Items | Where-Object -FilterScript { $PSItem.IsFavorite }) | ForEach-Object -Process { $FCGControlEventsCheckedListBox.SetItemChecked($FCGControlEventsCheckedListBox.Items.IndexOf($PSItem), $True) }
  }
  $FCGBtmStatusStrip.Items["Status"].Text = "Selected Form Control - $($Sender.SelectedItem.Name)"
  
  Write-Verbose -Message "Exit SelectedIndexChanged Event for `$FCGFormControlsListBox"
}
#endregion ******** Function Start-FCGFormControlsListBoxSelectedIndexChanged ********
$FCGFormControlsListBox.add_SelectedIndexChanged({Start-FCGFormControlsListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})

#endregion ******** $FCGControlsSplitContainer Panel1 Controls ********

# ************************************************
# $FCGControlsSplitContainer Panel2 Controls
# ************************************************
#region ******** $FCGControlsSplitContainer Panel2 Controls ********

# ************************************************
# FCGControlsEvents GroupBox
# ************************************************
#region $FCGControlsEventsGroupBox = [System.Windows.Forms.GroupBox]::New()
$FCGControlsEventsGroupBox = [System.Windows.Forms.GroupBox]::New()
# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
$FCGControlsSplitContainer.Panel2.Controls.Add($FCGControlsEventsGroupBox)
#$FCGControlsEventsGroupBox.BackColor = [MyConfig]::Colors.Back
$FCGControlsEventsGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill
#$FCGControlsEventsGroupBox.Font = [MyConfig]::Font.Bold
$FCGControlsEventsGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$FCGControlsEventsGroupBox.Name = "FCGControlsEventsGroupBox"
$FCGControlsEventsGroupBox.Text = "Form Control Events"
#endregion $FCGControlsEventsGroupBox = [System.Windows.Forms.GroupBox]::New()

#region $FCGControlEventsCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
$FCGControlEventsCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
$FCGControlsEventsGroupBox.Controls.Add($FCGControlEventsCheckedListBox)
$FCGControlEventsCheckedListBox.BackColor = [MyConfig]::Colors.TextBack
#$FCGControlEventsCheckedListBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$FCGControlEventsCheckedListBox.DisplayMember = "Name"
$FCGControlEventsCheckedListBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGControlEventsCheckedListBox.ForeColor = [MyConfig]::Colors.TextFore
$FCGControlEventsCheckedListBox.IntegralHeight = $False
$FCGControlEventsCheckedListBox.ItemHeight = [MyConfig]::Font.Height
$FCGControlEventsCheckedListBox.Name = "FCGControlEventsCheckedListBox"
$FCGControlEventsCheckedListBox.Sorted = $False
$FCGControlEventsCheckedListBox.ValueMember = "AddMethod"
#endregion $FCGControlEventsCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()

#region ******** Function Start-FCGControlEventsCheckedListBoxItemCheck ********
function Start-FCGControlEventsCheckedListBoxItemCheck
{
  <#
    .SYNOPSIS
      ItemCheck Event for the FCGControlEvents CheckedListBox Control
    .DESCRIPTION
      ItemCheck Event for the FCGControlEvents CheckedListBox Control
    .PARAMETER Sender
       The CheckedListBox Control that fired the ItemCheck Event
    .PARAMETER EventArg
       The Event Arguments for the CheckedListBox ItemCheck Event
    .EXAMPLE
       Start-FCGControlEventsCheckedListBoxItemCheck -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.CheckedListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter ItemCheck Event for `$FCGControlEventsCheckedListBox"

  [MyConfig]::AutoExit = 0


  Write-Verbose -Message "Exit ItemCheck Event for `$FCGControlEventsCheckedListBox"
}
#endregion ******** Function Start-FCGControlEventsCheckedListBoxItemCheck ********
$FCGControlEventsCheckedListBox.add_ItemCheck({Start-FCGControlEventsCheckedListBoxItemCheck -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlEventsCheckedListBoxMouseDown ********
function Start-FCGControlEventsCheckedListBoxMouseDown
{
  <#
    .SYNOPSIS
      MouseDown Event for the IDP TreeView Control
    .DESCRIPTION
      MouseDown Event for the IDP TreeView Control
    .PARAMETER Sender
       The TreeView Control that fired the MouseDown Event
    .PARAMETER EventArg
       The Event Arguments for the TreeView MouseDown Event
    .EXAMPLE
       Start-FCGControlEventsCheckedListBoxMouseDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.CheckedListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter MouseDown Event for `$FCGControlEventsCheckedListBox"

  [MyConfig]::AutoExit = 0

  If ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)
  {
    if ($FCGControlEventsCheckedListBox.Items.Count -gt 0)
    {
    $FCGControlEventsContextMenuStrip.Show($FCGControlEventsCheckedListBox, $EventArg.Location)
    }
  }

  Write-Verbose -Message "Exit MouseDown Event for `$FCGControlEventsCheckedListBox"
}
#endregion ******** Function Start-FCGControlEventsCheckedListBoxMouseDown ********
$FCGControlEventsCheckedListBox.add_MouseDown({ Start-FCGControlEventsCheckedListBoxMouseDown -Sender $This -EventArg $PSItem })

#region ******** Function Start-FCGControlEventsCheckedListBoxSelectedIndexChanged ********
function Start-FCGControlEventsCheckedListBoxSelectedIndexChanged
{
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the FCGControlEvents CheckedListBox Control
    .DESCRIPTION
      SelectedIndexChanged Event for the FCGControlEvents CheckedListBox Control
    .PARAMETER Sender
       The CheckedListBox Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the CheckedListBox SelectedIndexChanged Event
    .EXAMPLE
       Start-FCGControlEventsCheckedListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.CheckedListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter SelectedIndexChanged Event for `$FCGControlEventsCheckedListBox"

  [MyConfig]::AutoExit = 0


  Write-Verbose -Message "Exit SelectedIndexChanged Event for `$FCGControlEventsCheckedListBox"
}
#endregion ******** Function Start-FCGControlEventsCheckedListBoxSelectedIndexChanged ********
$FCGControlEventsCheckedListBox.add_SelectedIndexChanged({Start-FCGControlEventsCheckedListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})

# ************************************************
# FCGControlEvents ContextMenuStrip
# ************************************************
#region $FCGControlEventsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
$FCGControlEventsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$IDPForm.Controls.Add($FCGControlEventsContextMenuStrip)
#$IDPForm.ContextMenuStrip = $FCGControlEventsContextMenuStrip
$FCGControlEventsContextMenuStrip.BackColor = [MyConfig]::Colors.Back
$FCGControlEventsContextMenuStrip.Enabled = $True
$FCGControlEventsContextMenuStrip.Font = [MyConfig]::Font.Regular
$FCGControlEventsContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
$FCGControlEventsContextMenuStrip.ImageList = $FCGSmallImageList
$FCGControlEventsContextMenuStrip.Name = "FCGControlEventsContextMenuStrip"
$FCGControlEventsContextMenuStrip.ShowItemToolTips = $True
#$FCGControlEventsContextMenuStrip.TabIndex = 0
#$FCGControlEventsContextMenuStrip.TabStop = $False
#$FCGControlEventsContextMenuStrip.Tag = [System.Object]::New()
$FCGControlEventsContextMenuStrip.Text = "FCGControlEventsContextMenuStrip"
#endregion $FCGControlEventsContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

#region ******** Function Start-FCGControlEventsContextMenuStripOpening ********
function Start-FCGControlEventsContextMenuStripOpening
{
  <#
    .SYNOPSIS
      Opening Event for the FCGControlEvents ContextMenuStrip Control
    .DESCRIPTION
      Opening Event for the FCGControlEvents ContextMenuStrip Control
    .PARAMETER Sender
       The ContextMenuStrip Control that fired the Opening Event
    .PARAMETER EventArg
       The Event Arguments for the ContextMenuStrip Opening Event
    .EXAMPLE
       Start-FCGControlEventsContextMenuStripOpening -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ContextMenuStrip]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Opening Event for `$FCGControlEventsContextMenuStrip"

  [MyConfig]::AutoExit = 0
  
  #$IDPBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit Opening Event for `$FCGControlEventsContextMenuStrip"
}
#endregion ******** Function Start-FCGControlEventsContextMenuStripOpening ********
$FCGControlEventsContextMenuStrip.add_Opening({Start-FCGControlEventsContextMenuStripOpening -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlEventsContextMenuStripItemClick ********
function Start-FCGControlEventsContextMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGControlEvents ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGControlEvents ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGControlEventsContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGControlEventsContextMenuStripItem"

  [MyConfig]::AutoExit = 0
  
  switch ($Sender.Name)
  {
    "CheckAll"
    {
      $TmpCheckedItems = @($FCGControlEventsCheckedListBox.CheckedIndices)
      (0..$($FCGControlEventsCheckedListBox.Items.Count - 1)) | Where-Object -FilterScript { $PSItem -notin $TmpCheckedItems } | ForEach-Object -Process { $FCGControlEventsCheckedListBox.SetItemChecked($PSItem, $True) }
      $FCGBtmStatusStrip.Items["Status"].Text = "Checked All $($FCGFormControlsListBox.SelectedItem.Name) Events"
      Break
    }
    "UnCheckAll"
    {
      $TmpCheckedItems = @($FCGControlEventsCheckedListBox.CheckedIndices)
      $TmpCheckedItems | ForEach-Object -Process { $FCGControlEventsCheckedListBox.SetItemChecked($PSItem, $False) }
      $FCGBtmStatusStrip.Items["Status"].Text = "Unchecked All $($FCGFormControlsListBox.SelectedItem.Name) Events"
      Break
    }
    "Favorites"
    {
      $TmpCheckedItems = @($FCGControlEventsCheckedListBox.CheckedIndices)
      $TmpCheckedItems | ForEach-Object -Process { $FCGControlEventsCheckedListBox.SetItemChecked($PSItem, $False) }
      ($FCGControlEventsCheckedListBox.Items | Where-Object -FilterScript { $PSItem.IsFavorite }) | ForEach-Object -Process { $FCGControlEventsCheckedListBox.SetItemChecked($FCGControlEventsCheckedListBox.Items.IndexOf($PSItem), $True) }
      $FCGBtmStatusStrip.Items["Status"].Text = "Check All $($FCGFormControlsListBox.SelectedItem.Name) Favorite Events"
      Break
    }
  }

  Write-Verbose -Message "Exit Click Event for `$FCGControlEventsContextMenuStripItem"
}
#endregion ******** Function Start-FCGControlEventsContextMenuStripItemClick ********

(New-MenuItem -Menu $FCGControlEventsContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckIcon" -PassThru).add_Click({ Start-FCGControlEventsContextMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGControlEventsContextMenuStrip -Text "Uncheck All" -Name "UncheckAll" -Tag "UncheckAll" -DisplayStyle "ImageAndText" -ImageKey "UncheckIcon" -PassThru).add_Click({ Start-FCGControlEventsContextMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGControlEventsContextMenuStrip -Text "Check Favorites" -Name "Favorites" -Tag "Favorites" -DisplayStyle "ImageAndText" -ImageKey "FavoriteIcon" -PassThru).add_Click({ Start-FCGControlEventsContextMenuStripItemClick -Sender $This -EventArg $PSItem })

#endregion ******** $FCGControlsSplitContainer Panel2 Controls ********


# ************************************************
# FCGScriptInfo GroupBox
# ************************************************
#region $FCGScriptInfoGroupBox = [System.Windows.Forms.GroupBox]::New()
$FCGScriptInfoGroupBox = [System.Windows.Forms.GroupBox]::New()
# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
$FCGMainSplitContainer.Panel1.Controls.Add($FCGScriptInfoGroupBox)
#$FCGScriptInfoGroupBox.BackColor = [MyConfig]::Colors.Back
$FCGScriptInfoGroupBox.Dock = [System.Windows.Forms.DockStyle]::Top
#$FCGScriptInfoGroupBox.Font = [MyConfig]::Font.Bold
$FCGScriptInfoGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$FCGScriptInfoGroupBox.Name = "FCGScriptInfoGroupBox"
$FCGScriptInfoGroupBox.Text = "Script Information"
#endregion $FCGScriptInfoGroupBox = [System.Windows.Forms.GroupBox]::New()

#region $FCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()
$FCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()
$FCGScriptInfoGroupBox.Controls.Add($FCGScriptNameTextBox)
$FCGScriptNameTextBox.BackColor = [MyConfig]::Colors.TextBack
#$FCGScriptNameTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$FCGScriptNameTextBox.Dock = [System.Windows.Forms.DockStyle]::Top
$FCGScriptNameTextBox.Font = [MyConfig]::Font.Hint
$FCGScriptNameTextBox.ForeColor = [MyConfig]::Colors.TextHint
$FCGScriptNameTextBox.Margin = [System.Windows.Forms.Padding]::New(3, 3, 3, 30)
$FCGScriptNameTextBox.Padding = [System.Windows.Forms.Padding]::New(0, 0, 0, 30)
$FCGScriptNameTextBox.MaxLength = 8
$FCGScriptNameTextBox.Name = "FCGScriptNameTextBox"
$FCGScriptNameTextBox.TabStop = $True
$FCGScriptNameTextBox.Tag = @{ "HintText" = "Enter Script Name"; "HintEnabled" = $True }
$FCGScriptNameTextBox.Text = "Enter Script Name"
$FCGScriptNameTextBox.WordWrap = $False
#endregion $FCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()

#region ******** Function Start-FCGScriptNameTextBoxGotFocus ********
function Start-FCGScriptNameTextBoxGotFocus
{
  <#
    .SYNOPSIS
      GotFocus Event for the FCGScriptName TextBox Control
    .DESCRIPTION
      GotFocus Event for the FCGScriptName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-FCGScriptNameTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter GotFocus Event for `$FCGScriptNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  if ($Sender.Tag.HintEnabled)
  {
    $Sender.Text = ""
    $Sender.Font = [MyConfig]::Font.Regular
    $Sender.ForeColor = [MyConfig]::Colors.TextFore
  }

  Write-Verbose -Message "Exit GotFocus Event for `$FCGScriptNameTextBox"
}
#endregion ******** Function Start-FCGScriptNameTextBoxGotFocus ********
$FCGScriptNameTextBox.add_GotFocus({Start-FCGScriptNameTextBoxGotFocus -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGScriptNameTextBoxKeyDown ********
function Start-FCGScriptNameTextBoxKeyDown
{
  <#
    .SYNOPSIS
      KeyDown Event for the FCGScriptName TextBox Control
    .DESCRIPTION
      KeyDown Event for the FCGScriptName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyDown Event
    .EXAMPLE
       Start-FCGScriptNameTextBoxKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$FCGScriptNameTextBox"

  [MyConfig]::AutoExit = 0


  Write-Verbose -Message "Exit KeyDown Event for `$FCGScriptNameTextBox"
}
#endregion ******** Function Start-FCGScriptNameTextBoxKeyDown ********
$FCGScriptNameTextBox.add_KeyDown({Start-FCGScriptNameTextBoxKeyDown -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGScriptNameTextBoxKeyPress ********
function Start-FCGScriptNameTextBoxKeyPress
{
  <#
    .SYNOPSIS
      KeyPress Event for the FCGScriptName TextBox Control
    .DESCRIPTION
      KeyPress Event for the FCGScriptName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyPress Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyPress Event
    .EXAMPLE
       Start-FCGScriptNameTextBoxKeyPress -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyPress Event for `$FCGScriptNameTextBox"

  [MyConfig]::AutoExit = 0

    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $ValidChars = "[\w\d_]"
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))

  Write-Verbose -Message "Exit KeyPress Event for `$FCGScriptNameTextBox"
}
#endregion ******** Function Start-FCGScriptNameTextBoxKeyPress ********
$FCGScriptNameTextBox.add_KeyPress({Start-FCGScriptNameTextBoxKeyPress -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGScriptNameTextBoxKeyUp ********
function Start-FCGScriptNameTextBoxKeyUp
{
  <#
    .SYNOPSIS
      KeyUp Event for the FCGScriptName TextBox Control
    .DESCRIPTION
      KeyUp Event for the FCGScriptName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-FCGScriptNameTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyUp Event for `$FCGScriptNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)

  Write-Verbose -Message "Exit KeyUp Event for `$FCGScriptNameTextBox"
}
#endregion ******** Function Start-FCGScriptNameTextBoxKeyUp ********
$FCGScriptNameTextBox.add_KeyUp({Start-FCGScriptNameTextBoxKeyUp -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGScriptNameTextBoxLostFocus ********
function Start-FCGScriptNameTextBoxLostFocus
{
  <#
    .SYNOPSIS
      LostFocus Event for the FCGScriptName TextBox Control
    .DESCRIPTION
      LostFocus Event for the FCGScriptName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-FCGScriptNameTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter LostFocus Event for `$FCGScriptNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  if ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
  {
    $Sender.Text = $Sender.Tag.HintText
    $Sender.Tag.HintEnabled = $True
    $Sender.Font = [MyConfig]::Font.Hint
    $Sender.ForeColor = [MyConfig]::Colors.TextHint
  }
  else
  {
    $Sender.Tag.HintEnabled = $False
    $Sender.Font = [MyConfig]::Font.Regular
    $Sender.ForeColor = [MyConfig]::Colors.TextFore
  }
  
  Write-Verbose -Message "Exit LostFocus Event for `$FCGScriptNameTextBox"
}
#endregion ******** Function Start-FCGScriptNameTextBoxLostFocus ********
$FCGScriptNameTextBox.add_LostFocus({Start-FCGScriptNameTextBoxLostFocus -Sender $This -EventArg $PSItem})


#region $FCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()
$FCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()
$FCGScriptInfoGroupBox.Controls.Add($FCGControlNameTextBox)
$FCGControlNameTextBox.BackColor = [MyConfig]::Colors.TextBack
#$FCGControlNameTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$FCGControlNameTextBox.Dock = [System.Windows.Forms.DockStyle]::Bottom
$FCGControlNameTextBox.Font = [MyConfig]::Font.Hint
$FCGControlNameTextBox.ForeColor = [MyConfig]::Colors.TextHint
$FCGControlNameTextBox.MaxLength = 64
$FCGControlNameTextBox.Name = "FCGControlNameTextBox"
$FCGControlNameTextBox.TabStop = $True
$FCGControlNameTextBox.Tag = @{ "HintText" = "Enter Control Name"; "HintEnabled" = $True }
$FCGControlNameTextBox.Text = "Enter Control Name"
$FCGControlNameTextBox.WordWrap = $False
#endregion $FCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()

#region ******** Function Start-FCGControlNameTextBoxGotFocus ********
function Start-FCGControlNameTextBoxGotFocus
{
  <#
    .SYNOPSIS
      GotFocus Event for the FCGControlName TextBox Control
    .DESCRIPTION
      GotFocus Event for the FCGControlName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the GotFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox GotFocus Event
    .EXAMPLE
       Start-FCGControlNameTextBoxGotFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter GotFocus Event for `$FCGControlNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  if ($Sender.Tag.HintEnabled)
  {
    $Sender.Text = ""
    $Sender.Font = [MyConfig]::Font.Regular
    $Sender.ForeColor = [MyConfig]::Colors.TextFore
  }

  Write-Verbose -Message "Exit GotFocus Event for `$FCGControlNameTextBox"
}
#endregion ******** Function Start-FCGControlNameTextBoxGotFocus ********
$FCGControlNameTextBox.add_GotFocus({Start-FCGControlNameTextBoxGotFocus -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlNameTextBoxKeyDown ********
function Start-FCGControlNameTextBoxKeyDown
{
  <#
    .SYNOPSIS
      KeyDown Event for the FCGControlName TextBox Control
    .DESCRIPTION
      KeyDown Event for the FCGControlName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyDown Event
    .EXAMPLE
       Start-FCGControlNameTextBoxKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$FCGControlNameTextBox"

  [MyConfig]::AutoExit = 0

  Write-Verbose -Message "Exit KeyDown Event for `$FCGControlNameTextBox"
}
#endregion ******** Function Start-FCGControlNameTextBoxKeyDown ********
$FCGControlNameTextBox.add_KeyDown({Start-FCGControlNameTextBoxKeyDown -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlNameTextBoxKeyPress ********
function Start-FCGControlNameTextBoxKeyPress
{
  <#
    .SYNOPSIS
      KeyPress Event for the FCGControlName TextBox Control
    .DESCRIPTION
      KeyPress Event for the FCGControlName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyPress Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyPress Event
    .EXAMPLE
       Start-FCGControlNameTextBoxKeyPress -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyPress Event for `$FCGControlNameTextBox"

  [MyConfig]::AutoExit = 0

    # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
    $ValidChars = "[\w\d_]"
    $EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))

  Write-Verbose -Message "Exit KeyPress Event for `$FCGControlNameTextBox"
}
#endregion ******** Function Start-FCGControlNameTextBoxKeyPress ********
$FCGControlNameTextBox.add_KeyPress({Start-FCGControlNameTextBoxKeyPress -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlNameTextBoxKeyUp ********
function Start-FCGControlNameTextBoxKeyUp
{
  <#
    .SYNOPSIS
      KeyUp Event for the FCGControlName TextBox Control
    .DESCRIPTION
      KeyUp Event for the FCGControlName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyUp Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyUp Event
    .EXAMPLE
       Start-FCGControlNameTextBoxKeyUp -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyUp Event for `$FCGControlNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  $Sender.Tag.HintEnabled = ($Sender.Text.Trim().Length -eq 0)

  Write-Verbose -Message "Exit KeyUp Event for `$FCGControlNameTextBox"
}
#endregion ******** Function Start-FCGControlNameTextBoxKeyUp ********
$FCGControlNameTextBox.add_KeyUp({Start-FCGControlNameTextBoxKeyUp -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGControlNameTextBoxLostFocus ********
function Start-FCGControlNameTextBoxLostFocus
{
  <#
    .SYNOPSIS
      LostFocus Event for the FCGControlName TextBox Control
    .DESCRIPTION
      LostFocus Event for the FCGControlName TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the LostFocus Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox LostFocus Event
    .EXAMPLE
       Start-FCGControlNameTextBoxLostFocus -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter LostFocus Event for `$FCGControlNameTextBox"

  [MyConfig]::AutoExit = 0

  # $TextBox.Tag = @{ "HintText" = ""; "HintEnabled" = $True }
  if ([String]::IsNullOrEmpty(($Sender.Text.Trim())))
  {
    $Sender.Text = $Sender.Tag.HintText
    $Sender.Tag.HintEnabled = $True
    $Sender.Font = [MyConfig]::Font.Hint
    $Sender.ForeColor = [MyConfig]::Colors.TextHint
  }
  else
  {
    $Sender.Tag.HintEnabled = $False
    $Sender.Font = [MyConfig]::Font.Regular
    $Sender.ForeColor = [MyConfig]::Colors.TextFore
  }
  
  Write-Verbose -Message "Exit LostFocus Event for `$FCGControlNameTextBox"
}
#endregion ******** Function Start-FCGControlNameTextBoxLostFocus ********
$FCGControlNameTextBox.add_LostFocus({Start-FCGControlNameTextBoxLostFocus -Sender $This -EventArg $PSItem})

$TmpSizeMod = ($FCGControlNameTextBox.Top - $FCGScriptNameTextBox.Bottom) - [MyConfig]::FormSpacer
$FCGScriptInfoGroupBox.ClientSize = [System.Drawing.Size]::New($FCGScriptInfoGroupBox.ClientSize.Width, ($FCGScriptInfoGroupBox.ClientSize.Height - $TmpSizeMod))

#endregion ******** $FCGMainSplitContainer Panel1 Controls ********

# ************************************************
# $FCGMainSplitContainer Panel2 Controls
# ************************************************
#region ******** $FCGMainSplitContainer Panel2 Controls ********

$FCGMainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)

# ************************************************
# FCGFormCode GroupBox
# ************************************************
#region $FCGFormCodeGroupBox = [System.Windows.Forms.GroupBox]::New()
$FCGFormCodeGroupBox = [System.Windows.Forms.GroupBox]::New()
# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)
$FCGMainSplitContainer.Panel2.Controls.Add($FCGFormCodeGroupBox)
#$FCGFormCodeGroupBox.BackColor = [MyConfig]::Colors.Back
$FCGFormCodeGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill
#$FCGFormCodeGroupBox.Font = [MyConfig]::Font.Bold
$FCGFormCodeGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$FCGFormCodeGroupBox.Name = "FCGFormCodeGroupBox"
$FCGFormCodeGroupBox.Text = "Generated Form Code"
#endregion $FCGFormCodeGroupBox = [System.Windows.Forms.GroupBox]::New()

#region $FCGFormCodeTextBox = [System.Windows.Forms.TextBox]::New()
$FCGFormCodeTextBox = [System.Windows.Forms.TextBox]::New()
$FCGFormCodeGroupBox.Controls.Add($FCGFormCodeTextBox)
$FCGFormCodeTextBox.BackColor = [MyConfig]::Colors.TextBack
#$FCGFormCodeTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
$FCGFormCodeTextBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$FCGFormCodeTextBox.Font = [System.Drawing.Font]::New("Courier New", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)
$FCGFormCodeTextBox.ForeColor = [MyConfig]::Colors.TextFore
#$FCGFormCodeTextBox.MaxLength = 32767
$FCGFormCodeTextBox.Multiline = $True
$FCGFormCodeTextBox.Name = "FCGFormCodeTextBox"
$FCGFormCodeTextBox.ReadOnly = $True
$FCGFormCodeTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
$FCGFormCodeTextBox.ShortcutsEnabled = $False
$FCGFormCodeTextBox.TabStop = $False
$FCGFormCodeTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left
$FCGFormCodeTextBox.WordWrap = $False
#endregion $FCGFormCodeTextBox = [System.Windows.Forms.TextBox]::New()
$FCGFormCodeTextBox.Select()

#region ******** Function Start-FCGFormCodeTextBoxKeyPress ********
function Start-FCGFormCodeTextBoxKeyPress
{
  <#
    .SYNOPSIS
      KeyPress Event for the FCGFormCode TextBox Control
    .DESCRIPTION
      KeyPress Event for the FCGFormCode TextBox Control
    .PARAMETER Sender
       The TextBox Control that fired the KeyPress Event
    .PARAMETER EventArg
       The Event Arguments for the TextBox KeyPress Event
    .EXAMPLE
       Start-FCGFormCodeTextBoxKeyPress -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyPress Event for `$FCGFormCodeTextBox"

  [MyConfig]::AutoExit = 0

  # 1 = Ctrl-A, 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X
  # $ValidChars = "[\s\w\d\.\-_]"
  #$EventArg.Handled = (($EventArg.KeyChar -notmatch $ValidChars) -and ([Int]($EventArg.KeyChar) -notin (1, 3, 8, 22, 24)))
  $EventArg.Handled = ([Int]($EventArg.KeyChar) -notin (1, 3))

  Write-Verbose -Message "Exit KeyPress Event for `$FCGFormCodeTextBox"
}
#endregion ******** Function Start-FCGFormCodeTextBoxKeyPress ********
$FCGFormCodeTextBox.add_KeyPress({Start-FCGFormCodeTextBoxKeyPress -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormCodeTextBoxMouseDown ********
function Start-FCGFormCodeTextBoxMouseDown
{
  <#
    .SYNOPSIS
      MouseDown Event for the FCGFormCode TextBox Control
    .DESCRIPTION
      MouseDown Event for the FCGFormCode TextBox Control
    .PARAMETER Sender
       The FormCode Control that fired the MouseDown Event
    .PARAMETER EventArg
       The Event Arguments for the FormCode MouseDown Event
    .EXAMPLE
       Start-FCGFormCodeTextBoxMouseDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.TextBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter MouseDown Event for $($MyInvocation.MyCommand)"

  [MyConfig]::AutoExit = 0
  
  If ((-not [String]::IsNullOrEmpty($FCGFormCodeTextBox.Text)) -and ($EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right))
  {
    $FCGFormCodeContextMenuStrip.Show($FCGFormCodeTextBox, $EventArg.Location)
  }

  Write-Verbose -Message "Exit MouseDown Event for $($MyInvocation.MyCommand)"
}
#endregion ******** Function Start-FCGFormCodeTextBoxMouseDown ********
$FCGFormCodeTextBox.add_MouseDown({Start-FCGFormCodeTextBoxMouseDown -Sender $This -EventArg $PSItem})

#region $FCGFormCodeContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
$FCGFormCodeContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$IDPForm.Controls.Add($FCGFormCodeContextMenuStrip)
#$IDPForm.ContextMenuStrip = $FCGFormCodeContextMenuStrip
$FCGFormCodeContextMenuStrip.BackColor = [MyConfig]::Colors.Back
$FCGFormCodeContextMenuStrip.Enabled = $True
$FCGFormCodeContextMenuStrip.Font = [MyConfig]::Font.Regular
$FCGFormCodeContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
$FCGFormCodeContextMenuStrip.ImageList = $FCGSmallImageList
$FCGFormCodeContextMenuStrip.Name = "FCGFormCodeContextMenuStrip"
$FCGFormCodeContextMenuStrip.ShowItemToolTips = $True
#$FCGFormCodeContextMenuStrip.TabIndex = 0
#$FCGFormCodeContextMenuStrip.TabStop = $False
#$FCGFormCodeContextMenuStrip.Tag = [System.Object]::New()
$FCGFormCodeContextMenuStrip.Text = "FCGFormCodeContextMenuStrip"
#endregion $FCGFormCodeContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

#region ******** Function Start-FCGFormCodeContextMenuStripOpening ********
function Start-FCGFormCodeContextMenuStripOpening
{
  <#
    .SYNOPSIS
      Opening Event for the FCGFormCode ContextMenuStrip Control
    .DESCRIPTION
      Opening Event for the FCGFormCode ContextMenuStrip Control
    .PARAMETER Sender
       The ContextMenuStrip Control that fired the Opening Event
    .PARAMETER EventArg
       The Event Arguments for the ContextMenuStrip Opening Event
    .EXAMPLE
       Start-FCGFormCodeContextMenuStripOpening -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ContextMenuStrip]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Opening Event for `$FCGFormCodeContextMenuStrip"

  [MyConfig]::AutoExit = 0
  
  #$IDPBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit Opening Event for `$FCGFormCodeContextMenuStrip"
}
#endregion ******** Function Start-FCGFormCodeContextMenuStripOpening ********
$FCGFormCodeContextMenuStrip.add_Opening({Start-FCGFormCodeContextMenuStripOpening -Sender $This -EventArg $PSItem})

#region ******** Function Start-FCGFormCodeContextMenuStripItemClick ********
function Start-FCGFormCodeContextMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGFormCode ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGFormCode ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGFormCodeContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By ken.sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGFormCodeContextMenuStripItem"

  [MyConfig]::AutoExit = 0
  
  switch ($Sender.Name)
  {
    "Copy"
    {
      $FCGFormCodeTextBox.SelectAll()
      $FCGFormCodeTextBox.Copy()
      $FCGFormCodeTextBox.DeselectAll()
      Break
    }
    "Clear"
    {
      $FCGFormCodeTextBox.Text = $Null
      Break
    }
  }

  Write-Verbose -Message "Exit Click Event for `$FCGFormCodeContextMenuStripItem"
}
#endregion ******** Function Start-FCGFormCodeContextMenuStripItemClick ********

(New-MenuItem -Menu $FCGFormCodeContextMenuStrip -Text "Copy Code" -Name "Copy" -Tag "Copy" -DisplayStyle "ImageAndText" -ImageKey "CopyIcon" -PassThru).add_Click({ Start-FCGFormCodeContextMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGFormCodeContextMenuStrip -Text "Clear Code" -Name "Clear" -Tag "Clear" -DisplayStyle "ImageAndText" -ImageKey "ClearIcon" -PassThru).add_Click({ Start-FCGFormCodeContextMenuStripItemClick -Sender $This -EventArg $PSItem })

#endregion ******** $FCGMainSplitContainer Panel2 Controls ********

$FCGControlsSplitContainer.Panel1MinSize = ($FCGControlsSplitContainer.Height / 2.4)
$FCGControlsSplitContainer.Panel2MinSize = ($FCGControlsSplitContainer.Height / 2.4)

# ************************************************
# FCGTop MenuStrip
# ************************************************
#region $FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$FCGForm.Controls.Add($FCGTopMenuStrip)
$FCGForm.MainMenuStrip = $FCGTopMenuStrip
$FCGTopMenuStrip.BackColor = [MyConfig]::Colors.Back
#$FCGTopMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Top
$FCGTopMenuStrip.Font = [MyConfig]::Font.Regular
$FCGTopMenuStrip.ForeColor = [MyConfig]::Colors.Fore
$FCGTopMenuStrip.ImageList = $FCGSmallImageList
$FCGTopMenuStrip.Name = "FCGTopMenuStrip"
#$FCGTopMenuStrip.ShowItemToolTips = $False
#endregion $FCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()

#region ******** Function Start-FCGTopMenuStripItemClick ********
function Start-FCGTopMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGTop ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGTop ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGTopMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGTopMenuStripItem"

  [MyConfig]::AutoExit = 0

  Switch -wildcard ($Sender.Name)
  {
    "BuildAdv*"
    {
      #region Advanced Dialog Templates
      If ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      Else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Advanced Dialog Template Function"
        $FCGBtmStatusStrip.Refresh()
        Switch ($Sender.Name)
        {
          "BuildAdvGroupBox"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGAdvDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType GroupBox
            Break
          }
          "BuildAdvPanel"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGAdvDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType Panel
            Break
          }
          "BuildAdvSplitContainer"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGAdvDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType SplitContainer
            Break
          }
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Advanced Dialog Templates
    }
    "BuildBasic*"
    {
      #region Basic Dialog Templates
      If ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      Else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Basic Dialog Template Function"
        $FCGBtmStatusStrip.Refresh()
        Switch ($Sender.Name)
        {
          "BuildBasicGroupBox"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGBasicDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType GroupBox
            Break
          }
          "BuildBasicPanel"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGBasicDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType Panel
            Break
          }
          "BuildBasicSplitContainer"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGBasicDialog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType SplitContainer
            Break
          }
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Basic Dialog Templates
    }
    "BuildRichTextStatus"
    {
      #region Show RichText Status Messages
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Show RichTextBox Status Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGRichTextStatus -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Show RichText Status Messages
    }
    "BuildProgressBarStatus"
    {
      #region Show Load Progess Status Messages
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Show ProgressBar Status Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGProgressBarStatus -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Show Load Progess Status Messages
    }
    "BuildShowChangeLog"
    {
      #region Show Change Log
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Show Change Log Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGShowChangeLog -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Show Change Log
    }
    "BuildShowAlertMessage"
    {
      #region Show an Alert Message
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Show Alert Message Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGShowAlertMessage -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Show an Alert Message
    }
    "BuildGetUserResponse"
    {
      #region Get User Response
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get User Response Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetUserResponse -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get User Response
    }
    "BuildGetUserText"
    {
      #region Get User Text
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get TextBox Input Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetTextBoxInput -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get User Text
    }
    "BuildMultiTextInput"
    {
      #region Get Multi Text
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get Multi TextBox Input Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGMultiTextBoxInput -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get Multi Text
    }
    "BuildGetCheckBoxChoice"
    {
      #region get CheckBox Choice
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get CheckBox Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGCheckBoxOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion get CheckBox Choice
    }
    "BuildGetRadioButtonOption"
    {
      #region Get RadioButton Choice
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get RadioButton Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGRadioButtonOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get RadioButton Choice
    }
    "BuildGetListBoxOption"
    {
      #region ListBox Option
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get ListBox Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetListBoxOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion ListBox Option
    }
    "BuildGetCheckedListBoxOption"
    {
      #region CheckedListBox Option
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get CheckedListBox Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetCheckedListBoxOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion CheckedListBox Option
    }
    "BuildGetComboBoxOption"
    {
      #region Get ComboBox Option
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get ComboBox Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetComboBoxOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get ComboBox Option
    }
    "BuildGetComboBoxFilter"
    {
      #region Get ComboBox Filter
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get ComboBox Filter Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetComboBoxFilter -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get ComboBox Filter
    }
    "BuildGetListViewOption"
    {
      #region Get ListView Option
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Get ListView Option Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGGetListViewOption -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Get ListView Option
    }
    "BuildExtractIcon"
    {
      #region Extract Icon
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Extract Icon Dialog Function"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGExtractSystemIcon -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Extract Icon
    }
    "BuildShowInfo*"
    {
      #region Show Script Information
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or $FCGControlNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Show Info Dialog Function"
        $FCGBtmStatusStrip.Refresh()
        switch ($Sender.Name)
        {
          "BuildShowInfoWebBrowser"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGShowScriptInfo -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType "WebBrowser"
            Break
          }
          "BuildShowInfoRichText"
          {
            $FCGFormCodeTextBox.Text = Build-MyFCGShowScriptInfo -ScriptName $FCGScriptNameTextBox.Text -DialogName $FCGControlNameTextBox.Text -ControlType "RichTextBox"
            Break
          }
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Show Script Information
    }
    "Help"
    {
      #region Show Help
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Help"
      $FCGBtmStatusStrip.Refresh()
      $DialogResult = Show-ScriptInfo -Topics $ScriptInfoTopics -Title "$([MyConfig]::ScriptName) $([MyConfig]::ScriptVersion)" -InfoTitle "FCG Help Topics"
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Help Shown"
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Help Shown"
      }
      Break
      #endregion Show Help
    }
    "Exit"
    {
      #region Exit Utility
      if ([MyConfig]::Production)
      {
        $FCGBtmStatusStrip.Items["Status"].Text = "Exiting $([MyConfig]::ScriptName)"
        $FCGBtmStatusStrip.Refresh()
        $FCGForm.Close()
      }
      else
      {
        # **** Testing - Exit to Nested Prompt ****
        Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"
        $Host.EnterNestedPrompt()
        # **** Testing - Exit to Nested Prompt ****
      }
      Break
      #endregion Exit Utility
    }
    "Panel"
    {
      #region Generate Form Control with Panel
      if ($FCGScriptNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Windows Form With Panel Script Template"
        $FCGBtmStatusStrip.Refresh()
        $TmpControl = [MyRuntime]::ControlLookup["Form"] | Select-Object -First 1
        $TmpEvents = $TmpControl.Events | Where-Object -FilterScript { $PSItem.IsFavorite }
        $FCGFormCodeTextBox.Text = Build-MyScript -ScriptName $FCGScriptNameTextBox.Text -Control $TmpControl -Events $TmpEvents -GUIContainer "Panel"
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Generate Form Control with Panel
    }
    "SplitContainer"
    {
      #region Generate Form Control with SplitContainer
      if ($FCGScriptNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Windows Form with SplitContainer Script Template"
        $FCGBtmStatusStrip.Refresh()
        $TmpControl = [MyRuntime]::ControlLookup["Form"] | Select-Object -First 1
        $TmpEvents = $TmpControl.Events | Where-Object -FilterScript { $PSItem.IsFavorite }
        $FCGFormCodeTextBox.Text = Build-MyScript -ScriptName $FCGScriptNameTextBox.Text -Control $TmpControl -Events $TmpEvents -GUIContainer "SplitContainer"
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      Break
      #endregion Generate Form Control with SplitContainer
    }
    "Generate"
    {
      #region Generate Form Control
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or ($FCGControlNameTextBox.Tag.HintEnabled -and ($FCGFormControlsListBox.SelectedItem.Name -ne "Form")))
      {
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
        else
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating $($FCGFormControlsListBox.SelectedItem.Name) Control Script"
        $FCGBtmStatusStrip.Refresh()
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $FCGFormCodeTextBox.Text = Build-MyScript -ScriptName $FCGScriptNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem -Events $FCGControlEventsCheckedListBox.CheckedItems
        }
        else
        {
          $FCGFormCodeTextBox.Text = Build-MyScript -ScriptName $FCGScriptNameTextBox.Text -ControlName $FCGControlNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem -Events $FCGControlEventsCheckedListBox.CheckedItems
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Generate Form Control
    }
    "Control"
    {
      #region Generate Control
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or ($FCGControlNameTextBox.Tag.HintEnabled -and ($FCGFormControlsListBox.SelectedItem.Name -ne "Form")))
      {
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
        else
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating $($FCGFormControlsListBox.SelectedItem.Name) Control Code"
        $FCGBtmStatusStrip.Refresh()
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $FCGFormCodeTextBox.Text = Build-MyScriptControl -ScriptName $FCGScriptNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem
        }
        else
        {
          $FCGFormCodeTextBox.Text = Build-MyScriptControl -ScriptName $FCGScriptNameTextBox.Text -ControlName $FCGControlNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Generate Control
    }
    "Event"
    {
      #region Generate Control Events
      if ($FCGScriptNameTextBox.Tag.HintEnabled -or ($FCGControlNameTextBox.Tag.HintEnabled -and ($FCGFormControlsListBox.SelectedItem.Name -ne "Form")))
      {
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
        else
        {
          $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script or Control Name" -Icon ([System.Drawing.SystemIcons]::Error)
        }
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating $($FCGFormControlsListBox.SelectedItem.Name) Control Event Code"
        $FCGBtmStatusStrip.Refresh()
        if ($FCGFormControlsListBox.SelectedItem.Name -eq "Form")
        {
          $FCGFormCodeTextBox.Text = Build-MyScriptEvent -ScriptName $FCGScriptNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem -Events $FCGControlEventsCheckedListBox.CheckedItems
        }
        else
        {
          $FCGFormCodeTextBox.Text = Build-MyScriptEvent -ScriptName $FCGScriptNameTextBox.Text -ControlName $FCGControlNameTextBox.Text -Control $FCGFormControlsListBox.SelectedItem -Events $FCGControlEventsCheckedListBox.CheckedItems
        }
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Generate Control Events
    }
    "Library"
    {
      #region Generate Code Libary
      if ($FCGScriptNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Generating Code Libary Functions"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = Build-MyFCGScriptLibrary -ScriptName $FCGScriptNameTextBox.Text
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
      }
      Break
      #endregion Generate Code Libary
    }
    "SourceCode"
    {
      #region Display Source Code
      $CallStack = Get-PSCallStack
      $FCGFormCodeTextBox.Text = ($CallStack[$CallStack.Count - 1].InvocationInfo.MyCommand.ScriptBlock).ToString()
      $CallStack = $Null
      $FCGBtmStatusStrip.Items["Status"].Text = "$([MyConfig]::ScriptName) Source Code: $($FCGFormCodeTextBox.Lines.Count) Line(s)"
      Break
      #endregion Display Source Code
    }
    "ExtractIcon"
    {
      #region Extract / Encode Icon
      If ($FCGScriptNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGFormCodeTextBox.Clear()
        $DialogResult = Export-SystemIcon -Title "Export System Icon" -IconPath "C:\Windows\system32\shell32.dll" -Multi
        If ($DialogResult.Success)
        {
          $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
          $FCGBtmStatusStrip.Items["Status"].Text = "Extracting Selected Icons"
          $FCGBtmStatusStrip.Refresh()
          $TempIconPath = $DialogResult.IconPath
          ForEach ($TempIconIndex In $DialogResult.IconIndex)
          {
            Try
            {
              $FCGFormCodeTextBox.AppendText((Convert-MyImageToBase64 -ScriptName ($FCGScriptNameTextBox.Text) -Icon ([Extract.MyIcon]::IconReturn($TempIconPath, $TempIconIndex)) -Name ("SmallIcon{0:0000}" -f $TempIconIndex)))
              $FCGFormCodeTextBox.AppendText("`r`n")
              $FCGFormCodeTextBox.AppendText((Convert-MyImageToBase64 -ScriptName ($FCGScriptNameTextBox.Text) -Icon ([Extract.MyIcon]::IconReturn($TempIconPath, $TempIconIndex, $True)) -Name ("LargeIcon{0:0000}" -f $TempIconIndex)))
              $FCGFormCodeTextBox.AppendText("`r`n")
            }
            Catch
            {
            }
          }
          $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
          $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
        }
      }
      break
      #endregion Extract / Encode Icon
    }
    "EncodeImage"
    {
      #region Encode Image File
      If ($FCGScriptNameTextBox.Tag.HintEnabled)
      {
        $Response = Get-UserResponse -ButtonMid "OK" -ButtonDefault "OK" -Message "Missing or Inavlid Script Name" -Icon ([System.Drawing.SystemIcons]::Error)
      }
      else
      {
        $FCGOpenFileDialog.Title = "Encode Icon / Image"
        $FCGOpenFileDialog.Filter = "All Icon and Image Files|*.ico;*.bmp;*.gif;*.jpg;*.jpeg;*.png|Icon Files Only|*.ico|Image Files Only|*.bmp;*.gif;*.jpg;*.jpeg;*.png"
        $FCGOpenFileDialog.FilterIndex = 0
        $FCGOpenFileDialog.FileName = ""
        If ($FCGOpenFileDialog.ShowDialog($FCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
        {
          $FCGOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($FCGOpenFileDialog.FileName)
          $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
          $FCGBtmStatusStrip.Items["Status"].Text = "Encoding Selected Image"
          $FCGBtmStatusStrip.Refresh()
          $FCGFormCodeTextBox.Text = $(Convert-MyImageToBase64 -ScriptName ($FCGScriptNameTextBox.Text) -Path $FCGOpenFileDialog.FileName -Name $FCGOpenFileDialog.SafeFileName)
          $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
          $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
        }
      }
      Break
      #endregion Encode Image File
    }
    "EncodeFile"
    {
      #region Encode Data File
      $FCGFormCodeTextBox.Clear()
      $FCGOpenFileDialog.Title = "Encode File Data"
      $FCGOpenFileDialog.Filter = "All Files|*.txt;*.xml;*.htm;*.html;*.rtf;*.doc;*.docx;*.xls;*.xlsx|Text Files|*.txt|XML Files|*.xml|HTM/HTML Files|*.htm;*.html|Rich Text Documents|*.rtf|Microsoft Office Files|*.doc;*.docx;*.xls;*.xlsx|Applications|*.exe|All Files|*.*"
      $FCGOpenFileDialog.FilterIndex = 0
      $FCGOpenFileDialog.FileName = ""
      If ($FCGOpenFileDialog.ShowDialog($FCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
      {
        $FCGOpenFileDialog.InitialDirectory = [System.IO.Path]::GetDirectoryName($FCGOpenFileDialog.FileName)
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
        $FCGBtmStatusStrip.Items["Status"].Text = "Encoding Selected File"
        $FCGBtmStatusStrip.Refresh()
        $FCGFormCodeTextBox.Text = $(Encode-MyDataFile -Path $FCGOpenFileDialog.FileName -Name $FCGOpenFileDialog.SafeFileName)
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGBtmStatusStrip.Items["Status"].Text = "Generated $($FCGFormCodeTextBox.Lines.Count) Lines of Code"
        $FCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow      }
      Break
      #endregion Encode Data File
    }
  }
  
  Write-Verbose -Message "Exit Click Event for `$FCGTopMenuStripItem"
}
#endregion ******** Function Start-FCGTopMenuStripItemClick ********

$FCGTopMenuStripItem = New-MenuItem -Menu $FCGTopMenuStrip -Text "Code Builder $([char]0x00BB)" -Name "CodeBuilder" -Tag "CodeBuilder" -DisplayStyle "ImageAndText" -ImageKey "BuildIcon" -PassThru

$FCGTopSubMenuStripItem = New-MenuItem -Menu $FCGTopMenuStripItem -Text "Form" -Name "Form" -Tag "Form" -DisplayStyle "ImageAndText" -ImageKey "FormIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Panel" -Name "Panel" -Tag "Panel" -DisplayStyle "ImageAndText" -ImageKey "FormIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "SplitContainer" -Name "SplitContainer" -Tag "SplitContainer" -DisplayStyle "ImageAndText" -ImageKey "FormIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Generate" -Name "Generate" -Tag "Generate" -DisplayStyle "ImageAndText" -ImageKey "GenerateIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Control" -Name "Control" -Tag "Control" -DisplayStyle "ImageAndText" -ImageKey "ControlsIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Event" -Name "Event" -Tag "Events" -DisplayStyle "ImageAndText" -ImageKey "EventsIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStripItem

$FCGTopSubMenuStripItem = New-MenuItem -Menu $FCGTopMenuStripItem -Text "Dialogs" -Name "Dialogs" -Tag "Dialogs" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
$FCGTopSubSubMenuStripItem = New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Templates" -Name "Templates" -Tag "Templates" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Advanced Dialog - GroupBox" -Name "BuildAdvGroupBox" -Tag "BuildAdvGroupBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Advanced Dialog - Panel" -Name "BuildAdvPanel" -Tag "BuildAdvPanel" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Advanced Dialog - SplitContainer" -Name "BuildAdvSplitContainer" -Tag "BuildAdvSplitContainer" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Basic Dialog - GroupBox" -Name "BuildBasicGroupBox" -Tag "BuildBasicGroupBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Basic Dialog - Panel" -Name "BuildBasicPanel" -Tag "BuildBasicPanel" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Basic Dialog - SplitContainer" -Name "BuildBasicSplitContainer" -Tag "BuildBasicSplitContainer" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Show RichText Status" -Name "BuildRichTextStatus" -Tag "BuildRichTextStatus" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Show ProgressBar Status" -Name "BuildProgressBarStatus" -Tag "BuildProgressBarStatus" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Show Change Log" -Name "BuildShowChangeLog" -Tag "BuildShowChangeLog" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Show Alert Message" -Name "BuildShowAlertMessage" -Tag "BuildShowAlertMessage" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get User Response" -Name "BuildGetUserResponse" -Tag "BuildGetUserResponse" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get TextBox Input" -Name "BuildGetUserText" -Tag "BuildGetUserText" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get Multi TextBox Input" -Name "BuildMultiTextInput" -Tag "BuildMultiTextInput" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get RadioButton Option" -Name "BuildGetRadioButtonOption" -Tag "BuildGetRadioButtonOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get CheckBox Option" -Name "BuildGetCheckBoxChoice" -Tag "BuildGetCheckBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get ListBox Option" -Name "BuildGetListBoxOption" -Tag "BuildGetListBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get CheckedListBox Option" -Name "BuildGetCheckedListBoxOption" -Tag "BuildGetCheckedListBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get ComboBox Option" -Name "BuildGetComboBoxOption" -Tag "BuildGetComboBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get ComboBox Filter" -Name "BuildGetComboBoxFilter" -Tag "BuildGetComboBoxFilter" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem
(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Get Listview Option" -Name "BuildGetListViewOption" -Tag "BuildGetListViewOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopSubMenuStripItem

(New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Extract System Icon" -Name "BuildExtractIcon" -Tag "BuildExtractIcon" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
$FCGTopSubSubMenuStripItem = New-MenuItem -Menu $FCGTopSubMenuStripItem -Text "Show Information" -Name "Information" -Tag "Information" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Show Info WebBrowser" -Name "BuildShowInfoWebBrowser" -Tag "BuildShowInfoWebBrowser" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopSubSubMenuStripItem -Text "Show Info RichText" -Name "BuildShowInfoRichText" -Tag "BuildShowInfoRichText" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Library" -Name "Library" -Tag "Library" -DisplayStyle "ImageAndText" -ImageKey "LibraryIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Source Code" -Name "SourceCode" -Tag "SourceCode" -DisplayStyle "ImageAndText" -ImageKey "SourceIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

$FCGTopMenuStripItem = New-MenuItem -Menu $FCGTopMenuStrip -Text "Encoding Tools $([char]0x00BB)" -Name "EncodeTools" -Tag "EncodeTools" -DisplayStyle "ImageAndText" -ImageKey "ToolsIcon" -PassThru
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Encode Image" -Name "EncodeImage" -Tag "EncodeImage" -DisplayStyle "ImageAndText" -ImageKey "ImageIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Encode File" -Name "EncodeFile" -Tag "EncodeFile" -DisplayStyle "ImageAndText" -ImageKey "EncodeIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Extract Icon" -Name "ExtractIcon" -Tag "ExtractIcon" -DisplayStyle "ImageAndText" -ImageKey "ExtractIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStrip

# --------------
# Sample Dialogs
# --------------
#region Sample Dialogs

#region ******** Function Start-FCGMySampleDialogsMenuStripItemClick ********
function Start-FCGMySampleDialogsMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the FCGMySampleDialogs ToolStripItem Control
    .DESCRIPTION
      Click Event for the FCGMySampleDialogs ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-FCGMySampleDialogsMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$FCGMySampleDialogsMenuStripItem"

  [MyConfig]::AutoExit = 0

  Switch ($Sender.Name)
  {
    "DemoRichTextStatus"
    {
      #region Show Status Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Status Messages Dialog"
      $HashTable = @{"ShowHeader" = $True; "Name" = "Item Name"; "Value" = "Item Value"}
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]$RichTextBox, [HashTable]$HashTable) Sample-RichTextStatus -RichTextBox $RichTextBox -HashTable $HashTable }
      $DialogResult = Show-RichTextStatus -ScriptBlock $ScriptBlock -Title "Show Status Messages Example" -ButtonMid "OK" -HashTable $HashTable -AllowControl
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Show Status Messages"
        # $DialogResult.Success
        # $DialogResult.DialogResult
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Show Status Messages"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Status Dialog 01
      Break
    }
    "DemoProgressBarStatus"
    {
      #region Show Load Progress Bar
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Load Progress"
      $HashTable = @{"Values" = @(([System.Globalization.DateTimeFormatInfo]::New()).MonthNames)[0..11]}
      $ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.ProgressBar]$ProgressBar, [System.Windows.Forms.Label]$Label) Sample-ProgressBarStatus -ProgressBar $ProgressBar -Label $Label -HashTable $HashTable }
      $DialogResult = Show-ProgressBarStatus -ScriptBlock $ScriptBlock -Title "Show Load Progress Example" -HashTable $HashTable -AllowControl
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Show Load Progress"
        # $DialogResult.Success
        # $DialogResult.DialogResult
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Show Load Progress"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Load Progress Bar
      Break
    }
    "DemoShowChangeLog"
    {
      #region Show Change Log
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Change Log"
      $TmpContent = ($Script:MyInvocation.MyCommand.ScriptBlock).ToString()
      $CLogStart = ($TmpContent.IndexOf("<") + 3)
      $CLogEnd = ($TmpContent.IndexOf("#>") - 1)
      Show-ChangeLog -ChangeText ($TmpContent.SubString($CLogStart, ($CLogEnd - $CLogStart)))
      $FCGBtmStatusStrip.Items["Status"].Text = "Success Show Change Log"
      #endregion Show Change Log
      Break
    }
    "DemoShowAlertMessage"
    {
      #region Show Alert Message
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Alert Message"
      Show-AlertMessage -Title "Example Alert" -Message "Show Success, Warning, Error, and Information Alert Messages"
      $FCGBtmStatusStrip.Items["Status"].Text = "Success Show Alert Message"
      #endregion Show Alert Message
      Break
    }
    "DemoGetUserResponse"
    {
      #region Get User Response
      $FCGBtmStatusStrip.Items["Status"].Text = "Get User Response"
      $DialogResult = Get-UserResponse -Title "This is User Text 01" -Message "Show this Sample Message Prompt to the User" -ButtonLeft "Yes" -ButtonRight "No" -ButtonDefault "Yes"
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get User Response"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Items
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get User Response"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Get User Response
      Break
    }
    "DemoGetUserText"
    {
      #region Get User Text Single
      $FCGBtmStatusStrip.Items["Status"].Text = "Get User Text - Single"
      $DialogResult = Get-TextBoxInput -Title "Get User Text - Single" -Message "Show this Sample Message Prompt to the User" -Items "Sample Text"
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get User Text - Single"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Items
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get User Text - Single"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Get User Text
      Break
    }
    "DemoGetUserMultiText"
    {
      #region Get User Text - Multi
      $FCGBtmStatusStrip.Items["Status"].Text = "Get User Text - Multi"
      $DialogResult = Get-TextBoxInput -Title "Get User Text - Multi" -Message "Show this Sample Message Prompt to the User" -Multi -Items @("Computer Name 01", "Computer Name 02", "Computer Name 03")
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get User Text - Multi"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Items
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get User Text - Multi"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Get User Text - Multi
      Break
    }
    "DemoGetMultiUserText"
    {
      #region Get Multi Text Input
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get Multi Text Input"
      $OrderedItems = [Ordered]@{ "First Name" = "John"; "Last Name" = "Doe"; "Height" = "5' 11''"; "Weight" = "180 Lbs"}
      $DialogResult = Get-MultiTextBoxInput -Title "Get Multi Text Input" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -AllRequired
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get Multi Text Input"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.OrderedItems
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get Multi Text Input"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Get Multi Text Input
      Break
    }
    "DemoGetRadioButtonOption"
    {
      #region Show RadioButton Option
      $FCGBtmStatusStrip.Items["Status"].Text = "Show RadioButton Option"
      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4"}
      $DialogResult = Get-RadioButtonOption -Title "RadioButton Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected "4"
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success RadioButton Option"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Item
        # $DialogResult.Object
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed RadioButton Option"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show RadioButton Option
      Break
    }
    "DemoGetCheckBoxOption"
    {
      #region Show CheckBox Option
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get CheckBox Option"
      $OrderedItems = [Ordered]@{ "First Choice in the List." = "1"; "Pick this Item!" = "2"; "No, Pick this one!!" = "3"; "Never Pick this Option." = "4" }
      $DialogResult = Get-CheckBoxOption -Title "Get CheckBox Option" -Message "Show this Sample Message Prompt to the User" -OrderedItems $OrderedItems -Selected @("1", "4") -Required
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get CheckBox Option"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Object
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get CheckBox Option"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show RadioButton Option
      Break
    }
    "DemoGetListBoxOption"
    {
      #region Show ListBox Option
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get ListBox Option"
      $Items = Get-Service
      $DialogResult = Get-ListBoxOption -Title "Get ListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7] -Multi
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get ListBox Option"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Object
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get ListBox Option"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show ListBox Option
      Break
    }
    "DemoGetCheckedListBoxOption"
    {
      #region Show CheckedListBox Option
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get CheckedListBox Option"
      $Items = Get-Service
      $DialogResult = Get-CheckedListBoxOption -Title "Get CheckedListBox Option" -Message "Show this Sample Message Prompt to the User" -DisplayMember "DisplayName" -ValueMember "Name" -Items $Items -Selected $Items[1, 3, 5, 7]
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get CheckedListBox Option"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Object
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get CheckedListBox Option"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show CheckedListBox Option
      Break
    }
    "DemoGetComboBoxOption"
    {
      #region Show Combo Choice Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get ComboBox Option"
      $Variables = @(Get-ChildItem -Path "Variable:\")
      $DialogResult = Get-ComboBoxOption -Title "Show Get ComboBox Option" -Message "Show this Sample Message Prompt to the User" -Items $Variables -DisplayMember "Name" -ValueMember "Value" -Selected ($Variables[4])
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get ComboBox Option"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get ComboBox Option"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Get ComboBox Option
      Break
    }
    "DemoGetComboBoxFilter"
    {
      #region Show Combo Filter Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get ComboBox Filter"
      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)
      $DialogResult = Get-ComboBoxFilter -Title "Show Get ComboBox Filter" -Message "Show this Sample Message Prompt to the User" -Items $ServiceList -Properties Status, Name, StartType
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get ComboBox Filter"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Values
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get ComboBox Filter"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Get ComboBox Filter
      Break
    }
    "DemoGetComboBoxNoFilter"
    {
      #region Show Combo Filter Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Get ComboBox Filter"
      $ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)
      $DialogResult = Get-ComboBoxFilter -Title "Show Get ComboBox Filter" -Message "Show this Sample Message Prompt to the User" -Items $ServiceList -Properties Status, Name, StartType -NoFilter
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Get ComboBox Filter"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Values
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Get ComboBox Filter"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Get ComboBox Filter
      Break
    }
    "DemoListViewOption"
    {
      #region Show ListView Choice Dialog 01
      $FCGBtmStatusStrip.Items["Status"].Text = "Show ListView Choice Dialog 01"
      $Functions = @(Get-ChildItem -Path "Function:\")
      $DialogResult = Get-ListViewOption -Title "ListView Choice Dialog 01" -Message "Show this Sample Message Prompt to the User" -Items $Functions -Property "Name", "Version", "Source" -Selected ($Functions[2]) -Tooltip "Show this ToolTip" -Resize -Multi -Filter
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success ListView Choice Dialog 01"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed ListView Choice Dialog 01"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show ListView Choice Dialog 01
      Break
    }
    "DemoExtractIcon"
    {
      #region Export System icon
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Export System Icon"
      $DialogResult = Export-SystemIcon -Title "Export System Icon"
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Export System Icon"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Export System Icon"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Export System Icon
      Break
    }
    "DemoShowInformation"
    {
      #region Show Information
      $FCGBtmStatusStrip.Items["Status"].Text = "Show Information"
      $DialogResult = Show-ScriptInfo
      If ($DialogResult.Success)
      {
        # Success
        $FCGBtmStatusStrip.Items["Status"].Text = "Success Show Information"
        # $DialogResult.Success
        # $DialogResult.DialogResult
        # $DialogResult.Item
      }
      Else
      {
        # Failed
        $FCGBtmStatusStrip.Items["Status"].Text = "Failed Show Information"
      }
      $FCGFormCodeTextBox.Text = ($DialogResult | Format-List -Property * | Out-String)
      #endregion Show Information
      Break
    }
  }

  Write-Verbose -Message "Exit Click Event for `$FCGMySampleDialogsMenuStripItem"
}
#endregion ******** Function Start-FCGMySampleDialogsMenuStripItemClick ********

$FCGTopMenuStripItem = New-MenuItem -Menu $FCGTopMenuStrip -Text "Dialogs $([char]0x00BB)" -Name "Dialogs" -Tag "Dialogs" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Show RichText Status" -Name "DemoRichTextStatus" -Tag "DemoRichTextStatus" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Show ProgressBar Status" -Name "DemoProgressBarStatus" -Tag "DemoProgressBarStatus" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Show Change Log" -Name "DemoShowChangeLog" -Tag "DemoShowChangeLog" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Show Alert Message" -Name "DemoShowAlertMessage" -Tag "DemoShowAlertMessage" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get User Responce" -Name "DemoGetUserResponse" -Tag "DemoGetUserResponse" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get TextBox Input - Single Line" -Name "DemoGetUserText" -Tag "DemoGetUserText" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get TextBox Input - Multi Line" -Name "DemoGetUserMultiText" -Tag "DemoGetUserMultiText" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get Multi TextBox Input" -Name "DemoGetMultiUserText" -Tag "DemoGetMultiUserText" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get RadioButton Option" -Name "DemoGetRadioButtonOption" -Tag "DemoGetRadioButtonOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get CheckBox Option" -Name "DemoGetCheckBoxOption" -Tag "DemoGetCheckBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get ListBox Option" -Name "DemoGetListBoxOption" -Tag "DemoGetListBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get CheckedListBox Option" -Name "DemoGetCheckedListBoxOption" -Tag "DemoGetCheckedListBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get ComboBox Option" -Name "DemoGetComboBoxOption" -Tag "DemoGetComboBoxOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get ComboBox Filter - Filter" -Name "DemoGetComboBoxFilter" -Tag "DemoGetComboBoxFilter" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get ComboBox Filter - NoFilter" -Name "DemoGetComboBoxNoFilter" -Tag "DemoGetComboBoxNoFilter" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Get Listview Option" -Name "DemoListViewOption" -Tag "DemoListViewOption" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStripItem
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Extract System Icon" -Name "DemoExtractIcon" -Tag "DemoExtractIcon" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStripItem -Text "Show Information" -Name "DemoShowInformation" -Tag "DemoShowInformation" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-FCGMySampleDialogsMenuStripItemClick -Sender $This -EventArg $PSItem})
New-MenuSeparator -Menu $FCGTopMenuStrip

#endregion Sample Dialogs

#(New-MenuItem -Menu $FCGTopMenuStrip -Text "Bug" -Name "Bug" -Tag "Bug" -DisplayStyle "ImageAndText" -ImageKey "BugIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStrip -Text "Help" -Name "Help" -Tag "Help" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $FCGTopMenuStrip -Text "Exit" -Name "Exit" -Tag "Exit" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({Start-FCGTopMenuStripItemClick -Sender $This -EventArg $PSItem})

# ************************************************
# FCGBtm StatusStrip
# ************************************************
#region $FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$FCGForm.Controls.Add($FCGBtmStatusStrip)
$FCGBtmStatusStrip.BackColor = [MyConfig]::Colors.Back
$FCGBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom
$FCGBtmStatusStrip.Font = [MyConfig]::Font.Regular
$FCGBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore
$FCGBtmStatusStrip.ImageList = $FCGSmallImageList
$FCGBtmStatusStrip.Name = "FCGBtmStatusStrip"
#$FCGBtmStatusStrip.ShowItemToolTips = $False
#endregion $FCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()

New-MenuLabel -Menu $FCGBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"

#endregion ******** Controls for FCG Form ********

#endregion ******** End **** FCG **** End ********

#region ******** Start Form  ********
# *********************
# Add Form Code here...
# *********************
[System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
if ([MyConfig]::Production)
{
  [Void][Console.Window]::Hide()
}

Try
{
  [System.Windows.Forms.Application]::Run($FCGForm)
}
Catch
{
  if (-not [MyConfig]::Production)
  {
    # **** Testing - Exit to Nested Prompt ****
    Write-Host -Object "Line Num: $((Get-PSCallStack).ScriptLineNumber)"
    #$Host.EnterNestedPrompt()
    # **** Testing - Exit to Nested Prompt ****
  }
}

$FCGOpenFileDialog.Dispose()
$FCGFormComponents.Dispose()
$FCGForm.Dispose()
# *********************
# Add Form Code here...
# *********************

#endregion ******** Start Form  ********

if ([MyConfig]::Production)
{
  [System.Environment]::Exit(0)
}
