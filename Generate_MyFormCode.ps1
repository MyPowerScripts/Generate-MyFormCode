#requires -version 5.0

using namespace System.Windows.Forms
using namespace System.Drawing
using namespace System.Collections

<#
  .SYNOPSIS
    Utility to Generate Form Code 
  .DESCRIPTION
    Utility to Generate Form Code 
  .EXAMPLE
  .NOTES
    My Script MyFCG Version 6.x by Ken Sweet on 08/14/2020
    Created with "My Form Code Generator" Version 6.0.0.3
#>
#[CmdletBinding()]
#param (
#)

$ErrorActionPreference = "Stop"

# Comment Out $VerbosePreference Line for Production Deployment
$VerbosePreference = "SilentlyContinue"
$VerbosePreference = "Continue"

# Comment Out $DebugPreference Line for Production Deployment
$DebugPreference = "SilentlyContinue"

# Hide Console Window Progress Bar
$ProgressPreference = "SilentlyContinue"

# Clear Previous Error Messages
$Error.Clear()

[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
[Void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")

[System.Windows.Forms.Application]::EnableVisualStyles()

#region >>>>>>>>>>>>>>>> MyFCG Configuration <<<<<<<<<<<<<<<<
Class MyConfig
{
  # Default Form Run Mode
  static [bool]$Production = $True
  
  static [String]$ScriptName = "My PS5 Form Code Generator"
  static [Version]$ScriptVersion = [Version]::New("6.1.4.3")
  static [String]$ScriptAuthor = "Ken Sweet"
  
  # Default Form Settings
  static [Int]$FormSpacer = 2
  static [int]$FormMinWidth = 70
  static [int]$FormMinHeight = 40
  static [int]$InfoMinWidth = 18
  static [int]$EventHeight = 14
  Static [String]$DefScriptName = ""
  Static [String]$CodeFont = "Courier New"
  static [HashTable]$DefaultEvents = @{ }
  
  # Default Font
  static [String]$FontFamily = "Verdana"
  static [Single]$FontSize = 10
  static [Single]$FontTitle = 1.5
  
  # Default Form Color Mode
  static [Bool]$DarkMode = ((Get-ItemProperty -Path "Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -ErrorAction "SilentlyContinue").AppsUseLightTheme -eq "0")
  
  # Form Auto Exit
  static [Int]$AutoExit = 0
  static [Int]$AutoExitMax = 0
  static [Int]$AutoExitTic = 60000
  
  # Current DateTime Offset
  static [DateTimeOffset]$DateTimeOffset = [System.DateTimeOffset]::Now
  
  static [HashTable]$Colors = @{}
  
  static [HashTable]$Font = @{}
}
#endregion ================ MyFCG Configuration  ================

#region >>>>>>>>>>>>>>>> Set MyFCG Default Colors <<<<<<<<<<<<<<<<

# [System.Drawing.Color]::LightCoral
# [System.Drawing.Color]::DodgerBlue

if ([MyConfig]::DarkMode)
{
  [MyConfig]::Colors.Add("Back", ([System.Drawing.Color]::FromArgb(40, 40, 40)))
  [MyConfig]::Colors.Add("Fore", ([System.Drawing.Color]::DodgerBlue))
  [MyConfig]::Colors.Add("LabelFore", ([System.Drawing.Color]::DodgerBlue))
  [MyConfig]::Colors.Add("ErrorFore", ([System.Drawing.Color]::Red))
  [MyConfig]::Colors.Add("TitleBack", ([System.Drawing.Color]::DarkGray))
  [MyConfig]::Colors.Add("TitleFore", ([System.Drawing.Color]::Black))
  [MyConfig]::Colors.Add("GroupFore", ([System.Drawing.Color]::DodgerBlue))
  [MyConfig]::Colors.Add("TextBack", ([System.Drawing.Color]::Gainsboro))
  [MyConfig]::Colors.Add("TextFore", ([System.Drawing.Color]::Black))
  [MyConfig]::Colors.Add("ButtonBack", ([System.Drawing.Color]::DarkGray))
  [MyConfig]::Colors.Add("ButtonFore", ([System.Drawing.Color]::Black))
}
else
{
  [MyConfig]::Colors.Add("Back", ([System.Drawing.Color]::WhiteSmoke))
  [MyConfig]::Colors.Add("Fore", ([System.Drawing.Color]::Navy))
  [MyConfig]::Colors.Add("LabelFore", ([System.Drawing.Color]::Navy))
  [MyConfig]::Colors.Add("ErrorFore", ([System.Drawing.Color]::Red))
  [MyConfig]::Colors.Add("TitleBack", ([System.Drawing.Color]::LightBlue))
  [MyConfig]::Colors.Add("TitleFore", ([System.Drawing.Color]::Navy))
  [MyConfig]::Colors.Add("GroupFore", ([System.Drawing.Color]::Navy))
  [MyConfig]::Colors.Add("TextBack", ([System.Drawing.Color]::White))
  [MyConfig]::Colors.Add("TextFore", ([System.Drawing.Color]::Black))
  [MyConfig]::Colors.Add("ButtonBack", ([System.Drawing.Color]::Gainsboro))
  [MyConfig]::Colors.Add("ButtonFore", ([System.Drawing.Color]::Navy))
}

#endregion ================ Set MyFCG Default Colors ================

#region >>>>>>>>>>>>>>>> Set MyFCG Default Font Data <<<<<<<<<<<<<<<<

$TempBoldFont = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)
$TempGraphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)
$TempMeasureString = $TempGraphics.MeasureString("X", $TempBoldFont)
[MyConfig]::Font.Add("Regular", ([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)))
[MyConfig]::Font.Add("Bold", ($TempBoldFont))
[MyConfig]::Font.Add("Title", ([System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Bold)))
[MyConfig]::Font.Add("Ratio", ($TempGraphics.DpiX / 96))
[MyConfig]::Font.Add("Width", ([Math]::Floor($TempMeasureString.Width)))
[MyConfig]::Font.Add("Height", ([Math]::Ceiling($TempMeasureString.Height)))
$TempBoldFont = $Null
$TempMeasureString = $Null
$TempGraphics.Dispose()
$TempGraphics = $Null

#endregion ================ Set MyFCG Default Font Data ================

#region >>>>>>>>>>>>>>>> My Default Enumerations <<<<<<<<<<<<<<<<

#region ******** enum MyAnswer ********
[Flags()]
enum MyAnswer {
  Unknown = 0
  No = 1
  Yes = 2
  Maybe = 3
}
#endregion ******** enum MyAnswer ********

#region ******** enum MyDigit ********
enum MyDigit {
  Zero
  One
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
}
#endregion ******** enum MyDigit ********

#region ******** enum MyBits ********
[Flags()]
enum MyBits {
  Bit01 = 0x00000001
  Bit02 = 0x00000002
  Bit03 = 0x00000004
  Bit04 = 0x00000008
  Bit05 = 0x00000010
  Bit06 = 0x00000020
  Bit07 = 0x00000040
  Bit08 = 0x00000080
  Bit09 = 0x00000100
  Bit10 = 0x00000200
  Bit11 = 0x00000400
  Bit12 = 0x00000800
  Bit13 = 0x00001000
  Bit14 = 0x00002000
  Bit15 = 0x00004000
  Bit16 = 0x00008000
}
#endregion ******** enum MyBits ********

#endregion ================ My Default Enumerations ================

#region >>>>>>>>>>>>>>>> My Custom Class <<<<<<<<<<<<<<<<

#region ******** MyListItem Class ********
Class MyListItem {
  [String]$Text
  [Object]$Value
  [Object]$Tag
  [MyBits]$Flags

  MyListItem ([String]$Text, [Object]$Value) {
    $This.Text = $Text
    $This.Value = $Value
  }

  MyListItem ([String]$Text, [Object]$Value, [MyBits]$Flags) {
    $This.Text = $Text
    $This.Value = $Value
    $This.Flags = $Flags
  }

  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag) {
    $This.Text = $Text
    $This.Value = $Value
    $This.Tag = $Tag
  }

  MyListItem ([String]$Text, [Object]$Value, [Object]$Tag, [MyBits]$Flags) {
    $This.Text = $Text
    $This.Value = $Value
    $This.Tag = $Tag
    $This.Flags = $Flags
  }
}
#endregion ******** MyListItem Class ********

#region ******** MySIDialog Result Class ********
Class MySIDialog
{
  [Bool]$Success
  [Object]$DialogResult
  [String]$IconPath
  [Int[]]$IconIndex

  MySIDialog ([Object]$DialogResult) 
  {
    $This.Success = $False
    $This.DialogResult = $DialogResult
  }

  MySIDialog ([Object]$DialogResult, [String]$IconPath, [Int[]]$IconIndex)
  {
    $This.Success = $True
    $This.DialogResult = $DialogResult
    $This.IconPath = $IconPath
    $This.IconIndex = $IconIndex
  }
}
#endregion ******** MySIDialog Result Class ********

#endregion ================ My Custom Class ================

#region >>>>>>>>>>>>>>>> Windows APIs <<<<<<<<<<<<<<<<

#region ******** [Console.Window] ********

#[Void][Console.Window]::Hide()
#[Void][Console.Window]::Show()

$MyCode = @"
using System;
using System.Runtime.InteropServices;

namespace Console
{
  public class Window
  {
    [DllImport("Kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

    public static bool Hide()
    {
      return ShowWindowAsync(GetConsoleWindow(), 0);
    }

    public static bool Show()
    {
      return ShowWindowAsync(GetConsoleWindow(), 5);
    }
  }
}
"@
Add-Type -TypeDefinition $MyCode -Debug:$False
#endregion ******** [Console.Window] ********

[System.Console]::Title = "RUNNING: $($SUMConfig.ScriptName) - $($SUMConfig.ScriptVersion)"
if ([MyConfig]::Production)
{
  [Void][Console.Window]::Hide()
}

#region ******** [Extract.MyIcon] ********

#$TempCount = [Extract.MyIcon]::IconCount("C:\Windows\System32\shell32.dll")
#$TempIcon = [Extract.MyIcon]::IconReturn("C:\Windows\System32\shell32.dll", 1, $False)

$MyCode = @"
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace Extract
{
  public class MyIcon
  {
    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool DestroyIcon(IntPtr hIcon);

    [DllImport("shell32.dll", CharSet = CharSet.Auto)]
    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);

    public static int IconCount(string FileName)
    {
      try
      {
        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);
      }
      catch
      {
      }
      return 0;
    }

    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)
    {
      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };
      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };
      Icon RetData = null;
      try
      {
        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);
        if (GetLarge)
        {
          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();
          }
        }
        else
        {
          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)
          {
            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();
          }
        }
      }
      catch
      {
      }
      finally
      {
        foreach (IntPtr ptr in LIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
        foreach (IntPtr ptr in SIcons)
        {
          if (ptr != IntPtr.Zero)
          {
            DestroyIcon(ptr);
          }
        }
      }
      return RetData;
    }

    public static Icon IconReturn(string FileName, int IconNum)
    {
      return IconReturn(FileName, IconNum, false);
    }
  }
}
"@
if ($Host.Version.Major -le 5)
{
  Add-Type -TypeDefinition $MyCode -ReferencedAssemblies System.Drawing -Debug:$False
}
#endregion ******** [Extract.MyIcon] ********

#endregion ================ Windows APIs ================

#region >>>>>>>>>>>>>>>> My Custom Functions <<<<<<<<<<<<<<<<

#region function New-MenuItem
function New-MenuItem()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuItem for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuItem for a Menu or ToolStrip Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER ToolTip
    .PARAMETER Icon
    .PARAMETER ImageIndex
    .PARAMETER ImageKey
    .PARAMETER DisplayStyle
    .PARAMETER Alignment
    .PARAMETER Tag
    .PARAMETER Disable
    .PARAMETER Check
    .PARAMETER ClickOnCheck
    .PARAMETER ShortcutKeys
    .PARAMETER Disable
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MenuItem -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding(DefaultParameterSetName = "Default")]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "ImageIndex")]
    [Int]$ImageIndex,
    [parameter(Mandatory = $True, ParameterSetName = "ImageKey")]
    [String]$ImageKey,
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",
    [Object]$Tag,
    [Switch]$Disable,
    [Switch]$Check,
    [Switch]$ClickOnCheck,
    [System.Windows.Forms.Keys]$ShortcutKeys = "None",
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MenuItem"
  
  #region $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]
  $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New($Text)
  
  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuItem)
    if ($Menu.DropDown.Items.Count -eq 1)
    {
      $Menu.DropDown.BackColor = $Menu.BackColor
      $Menu.DropDown.ForeColor = $Menu.ForeColor
      $Menu.DropDown.ImageList = $Menu.Owner.ImageList
    }
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuItem)
  }
  
  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuItem.Name = $Name
  }
  else
  {
    $TempMenuItem.Name = $Text
  }
  
  $TempMenuItem.ShortcutKeys = $ShortcutKeys
  $TempMenuItem.Tag = $Tag
  $TempMenuItem.ToolTipText = $ToolTip
  $TempMenuItem.TextAlign = $Alignment
  $TempMenuItem.Checked = $Check.IsPresent
  $TempMenuItem.CheckOnClick = $ClickOnCheck.IsPresent
  $TempMenuItem.DisplayStyle = $DisplayStyle
  $TempMenuItem.Enabled = (-not $Disable.IsPresent)
  
  if ($PSBoundParameters.ContainsKey("BackColor"))
  {
    $TempMenuItem.BackColor = $BackColor
  }
  if ($PSBoundParameters.ContainsKey("ForeColor"))
  {
    $TempMenuItem.ForeColor = $ForeColor
  }
  if ($PSBoundParameters.ContainsKey("Font"))
  {
    $TempMenuItem.Font = $Font
  }
  
  If ($PSCmdlet.ParameterSetName -eq "Default")
  {
    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  else
  {
    Switch ($PSCmdlet.ParameterSetName)
    {
      "Icon"
      {
        $TempMenuItem.Image = $Icon
        Break
      }
      "ImageIndex"
      {
        $TempMenuItem.ImageIndex = $ImageIndex
        Break
      }
      "ImageKey"
      {
        $TempMenuItem.ImageKey = $ImageKey
        Break
      }
    }
    $TempMenuItem.ImageAlign = $Alignment
    $TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText
  }
  #endregion $TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]
  
  If ($PassThru.IsPresent)
  {
    $TempMenuItem
  }
  
  $TempMenuItem = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function New-MenuItem"
}
#endregion function New-MenuItem

#region function New-MenuLabel
function New-MenuLabel()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Name
    .PARAMETER ToolTip
    .PARAMETER Icon
    .PARAMETER DisplayStyle
    .PARAMETER Alignment
    .PARAMETER Tag
    .PARAMETER Disable
    .PARAMETER Font
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MenuLabel -Text "Text" -Tag "Tag"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [String]$Name,
    [String]$ToolTip,
    [System.Drawing.Icon]$Icon,
    [System.Windows.Forms.ToolStripItemDisplayStyle]$DisplayStyle = "Text",
    [System.Drawing.ContentAlignment]$Alignment = "MiddleCenter",
    [Object]$Tag,
    [Switch]$Disable,
    [System.Drawing.Font]$Font = [MyConfig]::Font.Regular,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MenuLabel"
  
  #region $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]
  $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New($Text)
  
  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempMenuLabel)
  }
  else
  {
    [Void]$Menu.Items.Add($TempMenuLabel)
  }
  
  If ($PSBoundParameters.ContainsKey("Name"))
  {
    $TempMenuLabel.Name = $Name
  }
  else
  {
    $TempMenuLabel.Name = $Text
  }
  
  $TempMenuLabel.TextAlign = $Alignment
  $TempMenuLabel.Tag = $Tag
  $TempMenuLabel.ToolTipText = $ToolTip
  $TempMenuLabel.DisplayStyle = $DisplayStyle
  $TempMenuLabel.Enabled = (-not $Disable.IsPresent)
  
  if ($PSBoundParameters.ContainsKey("BackColor"))
  {
    $TempMenuLabel.BackColor = $BackColor
  }
  if ($PSBoundParameters.ContainsKey("ForeColor"))
  {
    $TempMenuLabel.ForeColor = $ForeColor
  }
  if ($PSBoundParameters.ContainsKey("Font"))
  {
    $TempMenuLabel.Font = $Font
  }
  
  if ($PSBoundParameters.ContainsKey("Icon"))
  {
    $TempMenuLabel.Image = $Icon
    $TempMenuLabel.ImageAlign = $Alignment
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText
  }
  else
  {
    $TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage
  }
  #endregion $TempMenuLabel = [System.Windows.Forms.ToolStripLabel]
  
  If ($PassThru)
  {
    $TempMenuLabel
  }
  
  $TempMenuLabel = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function New-MenuLabel"
}
#endregion function New-MenuLabel

#region function New-MenuSeparator
function New-MenuSeparator()
{
  <#
    .SYNOPSIS
      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control
    .DESCRIPTION
      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control
    .PARAMETER Menu
    .PARAMETER BackColor
    .PARAMETER ForeColor
    .EXAMPLE
      New-MenuSeparator -Menu $Menu
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Menu,
    [System.Drawing.Color]$BackColor = [MyConfig]::Colors.Back,
    [System.Drawing.Color]$ForeColor = [MyConfig]::Colors.Fore
  )
  Write-Verbose -Message "Enter Function New-MenuSeparator"
  
  #region $TempSeparator = [System.Windows.Forms.ToolStripSeparator]
  $TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()
  
  if ($Menu.GetType().Name -eq "ToolStripMenuItem")
  {
    [Void]$Menu.DropDownItems.Add($TempSeparator)
  }
  else
  {
    [Void]$Menu.Items.Add($TempSeparator)
  }
  
  $TempSeparator.Name = "TempSeparator"
  $TempSeparator.Text = "TempSeparator"
  
  if ($PSBoundParameters.ContainsKey("BackColor"))
  {
    $TempSeparator.BackColor = $BackColor
  }
  if ($PSBoundParameters.ContainsKey("ForeColor"))
  {
    $TempSeparator.ForeColor = $ForeColor
  }
  #endregion $TempSeparator = [System.Windows.Forms.ToolStripSeparator]
  
  $TempSeparator = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function New-MenuSeparator"
}
#endregion function New-MenuSeparator

#region function Decode-MyData
function Decode-MyData()
{
  <#
    .SYNOPSIS
      Decompress Compresed String Data
    .DESCRIPTION
      Decompress Compresed String Data
    .PARAMETER Data
      Data to Decompress
    .EXAMPLE
      Decode-MyData -Data "String"
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$Data,
    [Switch]$AsString
  )
  Write-Verbose -Message "Enter Function Decode-MyData"
  
  $CompressedData = [System.Convert]::FromBase64String($Data)
  $MemoryStream = [System.IO.MemoryStream]::New()
  $MemoryStream.Write($CompressedData, 0, $CompressedData.Length)
  [Void]$MemoryStream.Seek(0, 0)
  $StreamReader = [System.IO.StreamReader]::New($MemoryStream, [System.Text.Encoding]::UTF8)
  
  if ($AsString.IsPresent)
  {
    $StreamReader.ReadToEnd()
  }
  else
  {
    $ArrayList = [System.Collections.ArrayList]::New()
    $Buffer = [System.Char[]]::New(4096)
    While ($StreamReader.EndOfStream -eq $False)
    {
      $Bytes = $StreamReader.Read($Buffer, 0, 4096)
      if ($Bytes)
      {
        $ArrayList.AddRange($Buffer[0 .. ($Bytes - 1)])
      }
    }
    $ArrayList
    $ArrayList.Clear()
  }
  
  $StreamReader.Close()
  $MemoryStream.Close()
  $MemoryStream = $Null
  $StreamReader = $Null
  $CompressedData = $Null
  $ArrayList = $Null
  $Buffer = $Null
  $Bytes = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Decode-MyData"
}
#endregion function Decode-MyData

#endregion ================ My Custom Functions ================

#region >>>>>>>>>>>>>>>> MyFCG Custom Code <<<<<<<<<<<<<<<<

#region ******** $MyFCGFormIcon ********
# Icons for Forms are 16x16
$MyFCGFormIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi3EhFIxzJm2Pejh/kHs5f5B7OX+Qezl/kHs5f5B7OX+Qezl/j3o4f4xz
KG2IcCYUAAAAAAAAAAAAAAAAjXMkFpeGU+Soo6D/qKSi/6ikov+opKL/qKSi/6ikov+Ml7D/kJeq/6ikov+Plqn/e3lh5IdyMBYAAAAAAAAAAJB3K3azrqz/v7u6/725uP+9ubj/vbm4/725uP+9ubj/iqLN/3Ws
+f9qmeT/daz5/4Wcxf+SejF2AAAAAAAAAACXgDuHw8C//3x4d/91cXD/dXFw/3VxcP91cXD/dXFw/1Nsnv9Hj/7/R4/+/0eP/v+DnMz/lYFChwAAAAAAAAAAmoQ/h7y5uP9xbWz/cW1s/3FtbP9xbWz/cW1s/1pm
hP8qc+3/Jnj9/zeD/v9RlP7/QYPz/2Fsb4kAAAAAAAAAAJ6IQ4e9u7n/Z2Rj/3Bta/9oaWb/ZWNh/2VhYP9LWn7/Nlyp/y1r4P9Iiv//LWrf/2KI1f9hcICNAAAAAAAAAACijEeHv7y7/2hlZP+fnZz/b4d9/11f
XP9YVVT/WFVU/1hVVP9HUWr/IGnz/0hRaf+/vLv/oY5QhwAAAAAAAAAAppBLh8C9vP+DkZn/Noaw/410HP9KVWP/JlGg/0pIR/9KSEf/SkhH/zVGbP9KSEf/wL28/6mUUocAAAAAAAAAAKmTTofCv77/oqKh/6Wo
qP+Vkor/cXBw/1dZXf9LSEf/Q0A//0NAP/9IRUT/VFJQ/8K/vv+tmFaHAAAAAAAAAACkjEB24N7d/3Bubf95d3b/eXd2/3l3dv95d3b/eXd2/3l3dv95d3b/eXd2/3Bubf/g3t3/qJJKdgAAAAAAAAAAooo+FsS1
guTu7ev/5OPj/+Tj4//k4+P/5OPj/+Tj4//k4+P/5OPj/+Tj4//u7ev/xLWD5KmSSxYAAAAAAAAAAAAAAACljkQUqpRMbbmnan+6qGx/uqhsf7qobH+6qGx/uqhsf7qobH+5p2t/q5ZPbaiSShQAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQf//rEHAA6xBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQcADrEH//6xB//+sQQ==
"@
#endregion ******** $MyFCGFormIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($MyFCGFormIcon)))

#region ******** $ExitIcon ********
$ExitIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA
AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F
RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE
AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA
AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2
Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey
6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3
y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==
"@
#endregion ******** $ExitIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExitIcon)))

#region ******** $HelpIcon ********
$HelpIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9
f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV
S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq
6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg
JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn
NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9
XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA
AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA
AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==
"@
#endregion ******** $HelpIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($HelpIcon)))

#region ******** $GenerateIcon ********
$GenerateIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA
AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeHExv728/8zMzP/RwLD/voxZ/72LWP/CubD/9vb2//b29v+dm5n/3Nzc/5iW
lOcPDg1eBwcGBQAAAAAAAAAAkndfMcGXb/+djoD/x5xw/8VmAP/FZgD/sZN3/+nSvP+5mHj/lZOR//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAMV2KYrIbAr/xm4S/8p8K//grnj/4bF9/8Z1If/IbQ7/yG0N/6B9
XP/U0dD/8vLy/9bW1v93dHLSBwYGJgAAAADKcRb+15dP/9GGM//RhjT/26Fe/9uhXv/PgSv/1I5B/9aTSf++cST/19bV/97c2v/b2dj/yMXD/iEeHHidXCQS0YpD/t+tcv/gsHj/361z/9qgXP/aoFz/4LF6/+Cx
ev/fr3X/xIVH/8PAv//09PT/9vb2/+3t7f9DPzycy4A639iZUv/dqGr/2JxY/9msg//jzr3/4cq3/9emdv/an1v/3ahp/9eWTf+2gE3/6Ojo//Ly8v/p6en/Qz88nc6LTeHaoFz/3KZm/8abdf/19fX/8vLy/+7u
7v/r6ur/1KFy/9ymZv/cpWX/uIlb/9/f3//p6en/4eHh/0M/PJ3QlWPh26Jh/92naP+qjnn/7+/v//b29v/y8vL/7u7u/9Sogf/cpWX/3als/7uTb//Z2dn/4eHh/9ra2v9DPzycyIZO4eK1gv/juIX/2K5//6iR
gf/U09P/4+Hh/9SymP/Phjn/47mH/+Gyff+1hVr/1NTU/9vb2//U1NT/Qz88nLRqOE7Un2r+58OY/+W+jv/hs3z/zJRc/8qKTP/Ujj//2p9c/+bBlP/IlGT/x7Om/93d3f/X19f/0dHR/0M/O5wAAAAAz5hm/u3S
sf/u07P/5r+R/9+rbv/an1v/3qlt/+3Ssv/rzKf/voxh/9DQ0P/j4+P/3Nzc/9XV1f9CPjucAAAAAMGHY8Xz4c3/7te9/+/Xvf/37N//9urc/+vQsv/x3cX/8dzE/8iiiv/r6+v/6enp/+Pj4//Z2dn/Qz88kQAA
AAClaEgSsH5a58yqlf/Oo4X/+/fx//ju4/+uhm//y6SK/8SYe//k4uH/5OPi/9/e3f/Y19b/r6un+2liXEAAAAAAAAAAAIpqWROKeG5EnW9TedSpitvQoX7beFNBa4R0akWKenBFjYR8RY2FfkWMhHxFiH94RYZ+
dyQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgACsQYAArEGAAKxBwAGsQQ==
"@
#endregion ******** $GenerateIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($GenerateIcon)))

#region ******** $ControlIcon ********
$ControlIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISAkByAfIycgHyI6IB8iOyAfIjsgHyI7IB8iOyAfIjsgHyI7IB8iOyAfIjsgHyI6IB8jJyIh
JQcAAAAAJSQnBzEwM3JgX2Dfenp68oqJivOhoaHzhISE84aFhfOEhITzhIOC86Cfn/OOjo7zkZGR84iIiN08Oz5sKSgrBzAvMjZzcnL3fn5+/3V1df+ioqL/rKys/1RUVP8yMzL/Kysr/1JSUv+xsbH/nZ2d/3Z2
dv9/f3//nJub8TEwMy9QT1Bwk5OT/6Wlpf/LzMz/xcXF/3Jycv8zMzP/MDAw/zAwMP82Njb/fX19/8bGxv/IyMj/pKSk/5iXl/9JSEphZWNkdcHBwP/Ly8v/l5eX/2pqav9GRkX/RERE/0VFRf9FRUX/Q0ND/z8/
P/9ra2v/np6e/9HR0f+ysrL/RkVHZW9tbnRmZmX/YGBg/0JCQv89PT3/TE1M/1paWv9iYmL/ampq/1paWv9JSUn/PDw8/0FCQv9iYmL/Y2Nj/0VERmVzcXF0bW1s/2trav8+Pj7/PT09/2FhYf9ycnL/X19f/2dn
Zv9ycXH/aGho/1dXVv9XV1f/ZGRj/15eXf9GRUdldXJydHBvb/+FhYX/SkpK/zg4OP9vb2//i4uL/4qKiv+Kiov/i4uL/1BQUP86Ojr/UFBQ/4iIiP9ubW3/SklKZXVzcnRYWFf/Z2dn/4WFhf+Li4v/ampq/3Fx
cf+ZmZn/pqan/29vb/9ERET/Pz8//4qKi/9sbGz/VFRT/09OT2Z1c3J0bm1t/42Njf+np6f/h4eH/1tbWv9fX1//XV1d/3x8fP+FhYX/WVlZ/4yMjP+oqKj/fHx8/3Bvb/9UU1RmdHJydIKBgf96enr/tLW1/76/
vv+urq3/e3t7/2hnaP9eXl7/u7y7/66urv+/v7//qKmo/319ff+Eg4P/WlhaZnJwcHSTk5L/kJCQ/4+QkP+/v7//tra2/9nZ2f/r6+v/6enp/9LS0f+1tbX/vLy8/4+Pj/+QkJD/lpWV/11bXGZtbGx0o6Oj/6mp
qv+qqqr/qqqq/7i4uf+pqan/zc3N/8rKyv+kpKT/ubm5/6mpqf+qqqr/qqqq/6Kiov9XVVZldXR0aK6urv/AwMH/wMDB/8DAwf/AwMD/wMDA/8DAwf/AwMD/wMDA/8DAwP/AwMD/wMDB/8DAwf+lpKT/VFNUVYWE
hByioqLxv7+//83Ozv/Ozs7/zc7O/83Nzv/Nzc3/zc3N/83Nzv/Nzc7/zc3N/83Nzf+9vb3/hIOD52BfYRAAAAAAnp2dOZ+enbudm5vWt7az0sG/vM/Dwb7PxcK+z8XCv8/Dwb7PwL68z7CurNOPjo3Yg4KBtXh3
eC4AAAAAgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQQ==
"@
#endregion ******** $ControlIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ControlIcon)))

#region ******** $DialogIcon ********
$DialogIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAeVkAJHxdBaKvnGTRtKJuqZyEQGmXfzk7lXwzV5d+NlqSeC4/k3kwCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmoI9gezo2//8+/n/7urc//39+//+/v3/8e7i/8/E
o/erl12hnIVCHQAAAAAAAAAAAAAAAAAAAAAAAAAAlHszG7elctn6+PP/8O3g/+nk1P/m4M7/49zJ/+DZw//f2ML//Pv5/8q9lu2agj43AAAAAAAAAAAAAAAAAAAAAKiTV7vw7OL/8O3j/97Xu//J2vP/ZaLq/+3p
3v/k4M//08ms//Dt4//w7eP/uKd24pV8NAgAAAAAAAAAAIpuIB/JvZn/4t3L/+Ldy//Uy6n/5+z2/3+m4f/q6N3/5ODP/8/Fpv/i3cv/4t3L/9zVvv+SeS9PAAAAAAAAAACJbR80yL2a/9XOtf/VzrX/yb+X//P1
+P+EsOn/ibPk/+Tgz//MwqH/1c61/9XOtf/VzbT/kXgsYwAAAAAAAAAAiW0fCqqZYfLIv5//yL+f/7+zhv/g5/T/Q4fi/12g6P/WzrH/v7KF/8i/n//Iv5//uat+/o91Ki0AAAAAAAAAAAAAAACOdChxt6p9/7+0
jv+4qnn/8/X5/2ek6v+Qtd//x7ua/7mrfv+/tI7/vbCI/5J5MKEAAAAAAAAAAAAAAAAAAAAAAAAAAI1zJ3apl1/4u66C/7+yhf++sYP/vK+A/7epev+/s43/sKBu/pB3LZqNcycGAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAim8iIJB2LIKch0bEoIxO5aGMT+ifikrNk3szkYxyJjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA//+sQf//rEH//6xBgB+sQeAHrEHAA6xBwAGsQYABrEGAAaxBgAGsQcADrEHgA6xB8A+sQf//rEH//6xB//+sQQ==
"@
#endregion ******** $DialogIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($DialogIcon)))

#region ******** $SourceIcon ********
$SourceIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA
AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeXExv728/8zMzP/S0tL/29vb/+Xl5f/v7+//9vb2//b29v+dm5n/3Nzc/5iW
lOcPDg1eBwcGBQAAAAAAAAAAhn12McHAv//MzMz/0tLS/9vb2//l5eX/7+/v//b29v/19fX/pKKg//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAIN5dzHEwsH/sa+6/8fHx//a2tr/5OTk/+3t7f/19fX/6ezp/8zN
y//d29n/8vLy/9bW1v93dHLSBwYGJgAAAABQQolGXVC+/0I20P9US6r/pKOv/93d3f/n5+f/qsCs/2yldP9vr4n/jqST/8vJx//b2dj/yMXD/iEeHHguHa2BMyTI+Tou1P9iWd//RDra/zImrf9eYYv/ToFT/1Sd
ZP97xJf/keDC/2nEl/9Pilv/w8rE/+3t7f9DPzycMiC/3zssyf9rYt3/jIXo/2df3v8uIqr/JDB1/x5pJ/9SoXD/lNa4/6Pcxv9dv5T/LI1H/5+zof/p6en/Qz88nUAxyN93bdz/nJbn/6Cb6/+LhOX/QTKm/2xJ
Wf9Wcz//i8an/7Tj0f+64NL/fc2q/zOYU/+asJz/4eHh/0M/PJ1aTtLfbmXd/1NK3v9ANtv/gFiQ/7drLf/Vkkj/1JVS/6eKU/9yvZ3/asyu/2nAm/9Bn1z/la2X/9ra2v9DPzycQDLPpmdd2/90a9//jFhy/75i
B//OgCn/3KVo/+Gxe//NgzL/sFsQ/2Sfdv9dm23/S5BV/7fGuf/U1NT/Qz88nAAAAABgVbphmZLg/7+LdP/BbSD/16Ny/+fGpP/pzrT/zY1T/7tjFv+RrY7/lrqa/9Xa1v/X19f/0dHR/0M/O5wAAAAAhXuGMebk
5v/ElIL/2aBr/+S+mP/v17v/7NO4/9uoef/DbiH/vMK2/+np6f/j4+P/3Nzc/9XV1f9CPjucAAAAAIuBejHo5uX/4rWM/9OMQv/Xl0//2p9c/9mbVv/WlU7/zHoq/9fSz//u7u7/6enp/+Pj4//Z2dn/Qz88kQAA
AACKgXkNrqij5+zh2P/crX//4rF9/+e/lf/mvpL/26Rr/9/Cp//o5+b/5OPi/9/e3f/Y19b/r6un+2liXEAAAAAAAAAAAI+FfxOOhHxElINzRb+RZ1LoupDC3ad1gqKFa0WQg3hFj4d/RY2FfkWMhHxFiH94RYZ+
dyQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBAACsQQAArEEAAKxBAACsQQAArEGAAKxBgACsQYAArEGAAKxBwAGsQQ==
"@
#endregion ******** $SourceIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($SourceIcon)))

#region ******** $EventIcon ********
$EventIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYODg5TLzAxjzc4OZoeHiBsAAAAHwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpPUVSznqWo/7W8wf+7wMb/rrO4/3J0eNwNDQ5DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUVlisyc7V/8PKz/+5wcb/uMDF/8LK
z//HztT/f4KF5wUEBCcAAAAAAAAAAQAAABAAAAAXAAAAGAAAAAwRERFJs7i8/szT2P/Dys//xsvR/8HHzv+Gio//cXV4/8fN0/9FR0mQAAAABRgYGZQ3ODrTOTo61Tw9PdE4OjzJYGRl49Pb4P/J0tf/y9TZ/73E
yf9xc3b/VVdZ/6itsf/T2d7/iIyPyAAAAA9OT1Dhoqep/6Clp/+doaT/naGl/6Knq//R2+D/zdXc/9Tc4/+mrLD/h4uP/8rS1v/M09j/0trf/5qen8sAAAAKeX5/1PL4+f/m8fX/4u7x/8XM0f+Fioz/yM/W/9Ta
4v/b4ej/oKWq/6assf/X4Of/ytPZ/97o7f9sbnGgAAAAAGdrbsXw/P//5O/2/+34//+4wMX/P0BA/56ipf/g5+7/2N3l/6Wprf+6v8X/193k/93k7P/K0NT8HyAgOQAAAABSVFav5fD3/9rk7P/a5ez/3ejv/7e/
xP+Qlpn/tbq8/+Hn7f/R1tz/09fe/9zh5//Eys76Oz0+cwAAAAAAAAAAP0FDk9nk6f/T3uP/2OTq/6Srr/9KS0z/T1FS/0NERP90dXb/w8nN/8jP0/++xMj/c3Z43gAAAAwAAAAAAAAAADM1NnfL1Nr/0Nrf/9ji
6P9dX2H/NTU1/7fAxf9iZWb/MTEx/7W+wv/N193/0tzi/3N5e88AAAAFAAAAAAAAAAAiIyRdvcTF/9LZ2//X4OL/lJmY/z09Of90d3b/RkdD/21vbf/P19n/zNPV/8/W2P9pa2zEAAAAAAAAAAAAAAAADg4PRpKW
qP+wtsz/p67F/6mwyv+Chpz/V1ls/2Zrgv+hqL//q7HH/6uvxP+utcv/RkdPtgAAAAAAAAAAAAAAAAYGBjhJTor+a3K6/5KWxf+Slsf/lZrP/5ug0P+boND/iY3G/5GVxf9fZbD/XGOy/xkbLo0AAAAAAAAAAAAA
AAABAQArRkt+/3F3uv+2uNr/srTX/6ms1P+TmMr/ycvk/5qey/+6vd3/fIG9/1hepv8WFyWDAAAAAAAAAAAAAAAAAAAAEiUnPKU3Oli8NzpVujQ2U7k3OlS4LTBOuDU4Urg3OFO4NTdTtjs9VrYtLkq8DAwSUQAA
AAAAAAAA/wOsQf4BrEH+AKxBgACsQQAArEEAAKxBAACsQYAArEGAAaxBgAGsQYABrEGAA6xBgAOsQYADrEGAA6xBgAOsQQ==
"@
#endregion ******** $EventIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EventIcon)))

#region ******** $ExtractIcon ********
$ExtractIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtUTys4My+BNTEujTUxLo01Mi6NNTIujTYyL401MS6MGhgWbQUFBSQFBQQBAAAAAAAA
AAAAAAAAAAAAAIB2bxKgmpbzy8vL/8/Pz//W1tb/3d3d/+Tk5P/q6ur/7Ozs/6aioP5zcG7OCgkJTgcGBgUAAAAAAAAAAAAAAACCeXExrKuq/319ff+1tbX/hoaG/8bGxv+Tk5P/2NjY/42Njf+LiYf/3Nzc/5iW
lOcPDg1eBwcGBQAAAAAAAAAAhn12MX59e/+srKz/W1tb/76+vv9hYWH/0tLS/6ampv+ampr/pKKg//T09P/b29v/mJaU6AsKCVAGBQUBAAAAAId+dzGko6H/eHh4/6ampv+AgID/tra2/4uLi//Q0ND/j4+P/+rq
6f/e3Nr/8vLy/9bW1v93dHLSBwYGJgAAAACJf3kxu7m4/4ODg/+8vLz/kpKS/9DQ0P+Xl5f/29vb/6enp//o6Oj/oqKh/83Kyf+PjYv/tbKv/iEeHHgAAAAAioF6McnHxv+CgoL/kpKS/7a2tv+lpaX/kZGR/7Gx
sf/MzMz/cHBw/8vLy/91dXX/xMTE/5OTk/9DPzycAAAAAIyDfDHLysn/hISE/8HBwf+FhYX/vb29/3p6ev/IyMj/hoaG/6SkpP+JiYn/pqam/4eHh/+urq7/Qz88nQAAAACNhH0x29rZ/8HBwf/j4+P/vLy8/+Hh
4f/AwMD/5+fn/8DAwP/k5OT/ubm5/9fX1/+4uLj/z8/P/0M/PJ0AAAAAjoV+MeHf3v+NjY3/7+/v/4uLi/+0tLT/rKys/319ff+oqKj/oKCg/4GBgf/c3Nz/f39//9PT0/9DPzycAAAAAI6FfzHZ2Nf/jY2N/+3t
7f+Kior/urq6/6Wlpf+Ghob/oKCg/6Ojo/95eXn/2tra/3Nzc//U1NT/Qz88nAAAAACPhX8x4+Lh/9vb2//29vb/1dXV//Pz8//Ly8v/8vLy/8PDw//i4uL/wcHB/9jY2P+4uLj/0NDQ/0M/O5wAAAAAj4Z/MbKw
r/+UlJT/ycnJ/3R0dP/AwMD/kpKS/7q6uv9xcXH/19fX/2xsbP+6urr/goKC/5aWlv9CPjucAAAAAIuBejGXlZT/ysrK/8XFxf+bm5v/tbW1/8zMzP+vr6//lpaW//Ly8v+SkpL/wMDA/7CwsP+Li4v/Qz88kQAA
AACJf3gNpJ2Y56empf/k4+L/uLe2/+zs6/+mpaX/4eDg/62srP/h4N//pKSj/97d3P+VlJP/pqKf+2hhXEAAAAAAAAAAAIyDfBOOhX5Ek4qDRZOLhEWSioNFkoqDRZKJgkWQiIFFj4d/RY2FfkWMg3xFiH94RYV8
diQAAAAAwAesQYADrEGAAaxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBgACsQYAArEGAAKxBwAGsQQ==
"@
#endregion ******** $ExtractIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExtractIcon)))

#region ******** $ImageIcon ********
$ImageIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACgAAABEAAAAYAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAYAAAAEgAA
AAwAAAAAAAAABAAAAA4AAABKAAAAVAAAAFgAAABYAAAAWAAAAFgAAABYAAAAWAAAAFgAAABYAAAAVAAAAE4AAAASAAAAAAAAAAbxqWT/8atn//Gsaf/yrmz/8q5s//Kubf/yrm3/8q5t//KubP/xrGn/8atn//Gp
ZP8AAABUAAAAGAAAAAAAAAAH8ahh/+zs7P/u7u7/7u7u/+7u7v/u7u7/7u7u/+7u7v/u7u7/7u7u/+zs7P/xqGH/AAAAWAAAABoAAAAAAAAAB/CmXv/t7e3/tOf0/4jj+v+I4/r/iOP6/4jj+v+I4/r/pub3/+3t
7f/t7e3/8KZe/wAAAFgAAAAaAAAAAAAAAAfwo1n/6+vr/+fs7f+F4/r/ZuD//2bg//9m4P//ZuD//8Po8v/s7Oz/6+vr//CjWf8AAABYAAAAGgAAAAAAAAAH8KFU/+vr6//s7Oz/5+zt/4Xj+v9m4P//ZuD//4Dc
5P/x4sD/7Ozs/+rq6v/woVT/AAAAWAAAABoAAAAAAAAAB/ChVP/r6+v/7Ozs/+3t7f/q4sT/idjP/2bg///Py3T//sM5//Diwv/q6ur/8KFU/wAAAFgAAAAaAAAAAAAAAAfwo1n/7u7u/+/v7//w8PD/+dN5//jE
P/+w0Z3//8M3///DN//40nn/7Ozs//CjWf8AAABYAAAAGgAAAAAAAAAH8Kdg//Dw8P/w8PD/8fHx//nTev//wzf//8M3///DN///wzf/+dJ5/+3t7f/wp2D/AAAAWAAAABoAAAAAAAAAB/CnYP/w8PD/ZGT//2Rk
//9kZP//ZGT////DN///wzf//sM5//LkxP/t7e3/8Kdg/wAAAFcAAAAZAAAAAAAAAAfwq2j/8fHx/2Rk//9kZP//ZGT//2Rk///603r/+tN6//Pkwv/w8PD/8PDw//CraP8AAABRAAAAEwAAAAAAAAAH8bFy//Pz
8/9kZP//ZGT//2Rk//9kZP//9PT0//T09P/ysXP/8rFz//Gxcv/xsXL/AAAAFgAAAAwAAAAAAAAABvK3ff/29vb/ZGT//2Rk//9kZP//ZGT///b29v/29vb/87d+//fgzv/yt33/AAAAFgAAAAwAAAAFAAAAAAAA
AAT0vYn/+fn5//r6+v/6+vr/+vr6//r6+v/6+vr/+vr6//S+if/0von/AAAAFgAAAAwAAAAEAAAAAQAAAAAAAAAD9cWW//XFlv/1xZb/9cWW//XFlv/1xZb/9cWW//XFlv/1xZb/AAAAEwAAAAwAAAAFAAAAAQAA
AAAAAAAAAAGsQQABrEEAAaxBAAGsQQABrEEAAaxBAAGsQQABrEEAAaxBAAGsQQABrEEAAaxBAAGsQQABrEEAAaxBAAOsQQ==
"@
#endregion ******** $ImageIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageIcon)))

#region ******** $DataIcon ********
$DataIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlYhxGJuNdW+ll3+qsKKM0LqtmubHvq7ty8W85r+8uNK+vLnJw8TE75yamDSenp9poqKkCQAA
AAAAAAAAkYJnPJeGaPWikXL/rp2C/7usk//Ju6b/2c/A/9DNyv/Cw8P/0tLR/+jp6f+5trH89PT0/5ydnlAAAAAAAAAAAJB/X2+Yhmb/opFy/6+eg//DtaD/z8S0/8PBv//T0c7/19jY/+Li4v/m5+f/6erq/9XV
1fG0tbaKqKiqrgAAAACZiWtvt6uW/8a9rv/MxLj/x76w/720p/+4trH/y8vM/+fo6P/V1NH/vru0/9XU1P/c3d3/1dXW/Kmqq5eMjY8E0cq/cJuQff+JfGX/iXxl/4l8Zf+dlYn/sKym/9/g4P/f397/iX1o/4l8
Zf+NhHL/0tLT/8PExPOvsLGfm5ydRbuyoxa3rp7Sjn9k/6GRdv+4qJD/t7Go/8LBwP/d3d7/29vb/9rVzv+3rqD/wLqx8dTU1f/DxMT7s7S12p6eoF6Ug2RLmIZm/aKRcv+unYL/u6yT/8a4pP/Hwrv/6+zs/+Lj
4//T0tH/19PO/9jX1P/X19f/vb2+9KqrrFycnZ4BkX9fb5iGZv+omHz/xbml/9TKu//UzcL/0tLS/9HPzf/q6ur/4+Tk/9/g4P/Y2dn/ycrK87a3uMS2t7jTmJmbA6eZgG/Duqr/wLiq/7Kolv+vpJH/r6SR/6ie
jf+1r6X/8vLy/7+9uv/b29z/v726/7y9vf2pqqs0nJ2fFgAAAADW0clhm5F//31wWP+FeF//koVt/52Qef+mmob/sauf/7+9uf+clYj/zMzN/5OKe/+4uLe+paanJgAAAAAAAAAArqOOCK+jjdCfj3L/rp2C/7us
k//Ju6b/2tDB/+zn4P/7+vj/7ern/9fSy//TzMDavrapDgAAAAAAAAAAAAAAAJF/XmeYhmb/opFy/66dgv+7rJP/ybum/9rQwf/s5+D/+/r4//Tx7f/o4dn/1su7/8a4o3cAAAAAAAAAAAAAAACUgmNvnY1u/8O4
pP/a0sX/5+HZ/+3o4f/t6eL/7Ofg/+3o4f/t6OH/7ejh/9jOvv/IuqV/AAAAAAAAAAAAAAAAvbOgcObg1//n4dj/7+vl//Ty7v/y7ur/6uTc/+Hazv/Yzr7/z8Kv/8m6pv/WzL3/3NPHfwAAAAAAAAAAAAAAANnV
zj7Uz8b12NHI/+/r5v/59/X/9PLu/+vm3//i29D/2c+//87Cr/+/sp7/x7+x+NnUzEoAAAAAAAAAAAAAAAAAAAAAycS8GNDLxG/JxLyrzcjB0M3JwebNyMDtyMO55sjCuNLEvrSuy8a+dMS+tB0AAAAAAAAAAAAA
AAAAAAAAgAOsQQADrEEAAaxBAACsQQAArEEAAKxBAACsQQAArEEAAaxBAAOsQQAHrEEAB6xBAAesQQAHrEEAB6xBgA+sQQ==
"@
#endregion ******** $DataIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($DataIcon)))

#region ******** $LibraryIcon ********
$LibraryIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFh0AAJkfAk3doYuoWyBCotbdwAEAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAWHUACmd8D1qPlF7nvbjD/6Wesv+ioSr/k5kgxVt4ABgAAAAAAAAAAAAAAAAAAAAAAAAAAF15ABFjfQhBe4w2nZuhe/G6stP/tK/j/6qxrf+RmWP/sqQr/9HFTf+koirkaH4GNwAA
AAAAAAAAAAAAAAAAAABpfRNFkpZu4rexx/+yssb/j5p2/4uMIP+skTv/uqiN/6hjTf/Bm0v/zcFK/720PvtzhgtuAAAAAAAAAAAAAAAAAAAAAJqag5Gnpn//qJhK/7qNRP/RqKv/0dbr/7vM1/+yfF7/0aeU/72O
Uf/RxVD/tZ9r/3t+OJ9deQAJAAAAAG92EEqmnFjrya+R/866wP/E3u//u9Tg/7qvnv+wlH7/vYpu/+PHrP/Rnn3/voZI/7aOmf/Hqs3/e4oOfgAAAACeWUE/rJCH4cTN2v++ysX/uJ95/6Z0WP+acW//upiU/29n
lv+LcoL/5LOG/+nIqf+7e1//tYJ0/4qbH5AAAAAAAAAAAKigjZi2moT/oXlk/5ZxeP+vlqT/4sa8/+7HpP9nfKT/EHvY/25XlP/VnHP/8dKw/9Gedf+dbTOrjFomFIFNVkGQb3jpr5Wf/8Gxv//wzrP/7cSg/6ya
oP9tfq//OGu7/yxs0v8pevr/WmOZ/8SSdP/tx6D/wXxW/atWP2FhS4QQqomQovLXr//tv5j/moiW/0d3vf89h+P/T6f6/0yb9v81c9j/NGTU/zJ0xf9AZ6z/oXVr/9iZZ/+2aEVol212AqWHhpF1irP/P3vI/zOR
8P9Tq///WKv6/06i1v9xr7D/d7y2/zqM1/83bsP/OXjH/zZpuv98ZXzpg0tXQR0llhIlQamMa63r/2K1+v9kvPX/YavL/3y2nf+x06T/3O3I/97uzf+HwrD/PJPT/zl3z/85c8L/Mm/D/ydEqYEAAAAAAAAAADE2
mi9Ibb+yW6G2/qnbmv/k8s3/3OvR/9Pmyf/W6M7/4e3N/7TYtP9lsb3/QYfV/zpywf8uR6WMAAAAAAAAAAAAAAAAAAAAACgznTFFc7TNjMiw/9bsyP/j79v/2ezK/7/itv+o2LL/dbms/0yN0vMtRaecKCyVJwAA
AAAAAAAAAAAAAAAAAAAAAAAAJCWUBi9LqYd9tLb+u+PB/3u3u/9OhrniN1ywoS08pVQnKpQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMj2jS0ZgsZcqN6E7JCeUBwAAAAAAAAAAAAAAAAAA
AAAAAAAA+D+sQeAfrEEAD6xBAAesQYABrEEAAaxBAAGsQYAArEEAAKxBAACsQQAArEEAAKxBwACsQfAArEH4A6xB/h+sQQ==
"@
#endregion ******** $LibraryIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($LibraryIcon)))

#region ******** $CheckAllIcon ********
$CheckAllIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKyN4A5tT7vP7hF30K6SDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAACasKp9Eu0r/qe6y/5Dimf8+uETPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqmHJ84tT3/oOip/6DurP+19b//ctN6/z24Q4AAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gDp9Gu0v/oOap/47lmv+E5pH/ne+p/6/zuf9KvlD/O7dBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKaAp87tT//mOCh/4Tdj/963of/qOyy/5nspf+s87f/l+af/zi1
Pc8AAAAAAAAAAAAAAAAAAAAAAAAAAACYAI80sTj/kNuZ/3nWhf9/2ov/n+ao/3nUgP+p7bP/keue/7LzvP9s0HT/N7U8gAAAAAAAAAAAAAAAAAAAAAAAlwD/idaS/3DPe/9104D/l+Cg/0K5R/8ToxX/gtiJ/53q
qP+S6p//p+2x/0O7SP81tDowAAAAAAAAAAAAAAAAAJYA/37Qhv+F1Y//htaO/y+vMv8HnAefEKESQCWrKP+j6Kz/h+SU/6HrrP+M35T/MrI33zSzORAAAAAAAAAAAACVAI8hpST/RLZJ/xGgE/8AmQCPAAAAAAAA
AAAPoBCfWMRe/5zlpv963oj/pequ/2LJaf8xsjaPAAAAAAAAAAAAAAAAAJUAMACXAGAAmAAwAAAAAAAAAAAAAAAADJ8NEA6gD++J2pL/h96T/4DdjP+Y4qH/O7ZA/zCxNEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAJngpgL68y/5fgoP9r1Hj/jN2W/33Uhf8srzDfLrAyEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAidCb9nyW7/idqT/1rLaP+U3p3/V8Jd/yuuL48AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEmwUwD6AQ/4XVjf9mzHL/Zsxy/4fXkP8mrCr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOaA4A/tUP/iNWR/2/Nef+J1pH/JKwq/wAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAQApoC30y6Uv9mxW3/TLpR/xqmHL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZACACmgKfCJ0Ivw6g
D58ToxUQ+H+sQfB/rEHgP6xBwB+sQYAfrEEAD6xBAAesQQADrEEGA6xBjgGsQf8ArEH/gKxB/4CsQf/ArEH/wKxB/+CsQQ==
"@
#endregion ******** $CheckAllIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($CheckAllIcon)))

#region ******** $UnCheckAllIcon ********
$UnCheckAllIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ps48SErOvGhqtEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eqRAqKsmvLy/TjwAA
AAAAAAAAAAAAAA0Nsp8GBrf/CQm6/xQUtM8bG60QAAAAAAAAAAAAAAAAAAAAAB0dqhAnJ8bPODju/0BA9/81NdqfAAAAADc3v48HB7X/Bga3/wkJuv8MDL3/FRW1zxsbrBAAAAAAAAAAAB0dqhAjI8LPLy/k/zY2
7P87O/L/PT30/y4u0I9ERMSvVFTO/wkJt/8ICLn/Cwu8/w4OwP8WFrfPHBysEBwcqxAfH77PJiba/yws4P8xMeb/NTXr/zY27P8pKcevGRmvEEVFxM9VVc//Cwu5/woKu/8NDb//ERHD/xgYuM8bG7vPHh7R/yMj
1v8nJ9v/Kyvg/y4u4/8mJsXPHh6pEAAAAAAZGa8QRUXEz1VV0P8MDLv/DAy+/w8Pwf8TE8X/FxfJ/xsbzv8fH9L/IiLW/yUl2f8iIsHPHR2qEAAAAAAAAAAAAAAAABkZrhBGRsTPVlbQ/w4OvP8ODr//ERHD/xQU
xv8XF8r/GhrN/x4e0f8eHr7PHR2qEAAAAAAAAAAAAAAAAAAAAAAAAAAAGhquEEZGxc9NTc//DAy9/w4OwP8REcP/FBTG/xYWyf8bG7rPHByrEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrhAlJbjPLi7E/x0d
wf8ODr7/Dg7A/xAQwv8TE8X/GBi4zxwcrBAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxAmJrnPNDTE/zIyxf8wMMX/Ly/G/ygoxf8gIMT/Hx/F/x8fxv8jI7rPGxusEAAAAAAAAAAAAAAAABgYsBAoKLnPOTnE/zY2
xP80NMT/MjLF/zAwxf9oaNf/MTHH/y4ux/8uLsj/LS3J/yMjuc8bG60QAAAAABcXsRArK7rPPj7F/zs7xf85OcT/NjbE/zQ0xP8lJbjPT0/Hz3Bw2f8yMsb/Ly/G/y4uxv8uLsf/JCS5zxoarRBTU8qvVFTM/0FB
xv8+PsX/OzvF/zk5xP8mJrnPGRmuEBoarhBQUMfPcXHY/zMzxf8wMMX/MDDF/zAwxf8kJLivY2PQj5iY5v9TU8z/QUHG/z4+xf8oKLnPGRmvEAAAAAAAAAAAGhquEFBQx89yctj/NTXF/zIyxP8yMsT/Jye6jwAA
AABpadOfmJjm/1RUzP8rK7rPGBiwEAAAAAAAAAAAAAAAAAAAAAAZGa8QUFDIz3R02P84OMT/KSm7nwAAAAAAAAAAAAAAAGNj0I9TU8qvFxewEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZrxBQUMivSkrFjwAA
AAAAAAAAx+OsQYPBrEEBgKxBAACsQQAArEGAAaxBwAOsQeAHrEHgB6xBwAOsQYABrEEAAKxBAACsQQGArEGDwaxBx+OsQQ==
"@
#endregion ******** $UnCheckAllIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($UnCheckAllIcon)))

#region ******** $FavoritesIcon ********
$FavoritesIcon = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmk9lALofTfDp3xcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ52WApdde/LHHTcAAA
AAAAAAAAAAAAAAAAAAAJpfeAHLb6/xSn9P8RmO6vFJTrEAAAAAAAAAAAIILfECJ/3a8ukuP/PK7t/yxx058AAAAAAAAAAAAAAAAAAAAACaT2QBWu+P8lxv//F673/xWT6t8YjudAHYfiMB+E4N8npe7/PNL//zKT
4/8rctRQAAAAAAAAAAAAAAAAAAAAAAAAAAALofTvKMf//x3B//8UtPv/F5Pq/xiO5/8Wrvj/IcT//yzJ//8qe9n/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6D0ryG7+/8ixP//GL7//w+2/f8Gsf3/B7X//xK7
//8drvX/KHbXrwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyf82Aisfb/NMz//x7C//8Vvf//DLj//wW0//8Es///GZPp/yd32GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALoPSfLbT1/2zi//9E0v//HcH//xW9
//8Puf//Crb//x2M5f8odtefK3LUEAAAAAAAAAAAAAAAAAWp+jAIpvfPO8H5/2/j/v905f//cuP//2be//9Bz///I8P//xS8//8Ru///H5To/yxx088ubdEwAAAAAAGv/nANr/vvWdj9/3vs//956f//d+f//3Xm
//905P//cuP//3Li//9i2///UdT//0XQ//87tvT/NHPS/zJnzXAavf//fu3//4Pw//9/7v//fOv//3rq//956P//d+b//3bl//915P//deT//3Xj//904///dOP//3Dc/P8/ftb/Aa/+3wSr+/8Ipvj/C6H0/yOr
9P8srPL/aNr7/3vp//966P//btr7/zeZ5v81juD/KXXX/yxx0/8wbND/MmfN7wAAAAAAAAAAAAAAAAAAAAAAAAAAE5bscEO69P9+7P//fer//0iw7f8hgd5wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABOW7BAinu3/g+7//4Ht//8rkeT/IYHeIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZLqr2TS+P9y3Pr/HoThzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABaR6WBDtPD/Tbfv/x2F4mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWkekQIJTo7yOQ5e8dhuIQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAx+OsQcGDrEHAA6xB4AesQeAHrEHgB6xB4AOsQYABrEEAAKxBAACsQQAArEH4H6xB+B+sQfw/rEH8P6xB/D+sQQ==
"@
#endregion ******** $FavoritesIcon ********
#$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FavoritesIcon)))

#endregion ================ MyFCG Custom Code ================

#region >>>>>>>>>>>>>>>> Generate Script Code - MyFCG Custom Code <<<<<<<<<<<<<<<<

#region function Get-MyFormControls
function Get-MyFormControls ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Get-MyFormControls
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Get-MyFormControls"
  
  $Assembly = [System.Reflection.Assembly]::GetAssembly("System.Windows.Forms.Form")
  $ExportedTypes = $Assembly.ExportedTypes | Where-Object -FilterScript { $PSitem.IsPublic -and $PSItem.IsClass -and (-not $PSItem.IsAbstract) -and ($PSItem.FullName -like "System.Windows.Forms*") } | Sort-Object -Property FullName
  ForEach ($ExportedType in $ExportedTypes)
  {
    if ((($ExportedType.GetInterface("IComponent")).IsPublic) -and (@($ExportedType.GetConstructors(("Instance", "Public"))).Count) -and (@($ExportedType.GetConstructors(("Instance", "Public")) | Where-Object -FilterScript { @($PSItem.GetParameters()).Count -eq 0 }).Count -eq 1))
    {
      $ExportedType
    }
    elseif ((($ExportedType.GetInterface("ISerializable")).IsPublic) -and (-not $ExportedType.FullName.EndsWith("EventHandler", [System.StringComparison]::CurrentCultureIgnoreCase)) -and (@($ExportedType.GetConstructors(("Instance", "Public"))).Count) -and (@($ExportedType.GetConstructors(("Instance", "Public")) | Where-Object -FilterScript { @($PSItem.GetParameters()).Count -eq 0 }).Count -eq 1))
    {
      $ExportedType
    }
  }
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Get-MyFormControls"
}
#endregion function Get-MyFormControls

#region function Get-MyFormControlEvents
function Get-MyFormControlEvents ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Get-MyFormControlEvents
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$Control
  )
  Write-Verbose -Message "Enter Function Get-MyFormControlEvents"
  
  $Control.GetEvents() | Sort-Object -Property Name -Unique
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Get-MyFormControlEvents"
}
#endregion function Get-MyFormControlEvents

#region function Get-MyFormControlConstructors
function Get-MyFormControlConstructors ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Get-MyFormControlConstructors
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$Control
  )
  Write-Verbose -Message "Enter Function Get-MyFormControlConstructors"
  
  $Control.GetConstructors(("Instance", "Public")) | Sort-Object -Property Name
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Get-MyFormControlConstructors"
}
#endregion function Get-MyFormControlConstructors

#region function Get-MyFormControlProperties
function Get-MyFormControlProperties ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Get-MyFormControlProperties
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$Control
  )
  Write-Verbose -Message "Enter Function Get-MyFormControlProperties"
  
  $Control.GetProperties(("Instance", "Public")) | Where-Object -FilterScript { $PSItem.CanWrite } | Sort-Object -Property Name -Unique
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Get-MyFormControlProperties"
}
#endregion function Get-MyFormControlProperties

#region function Get-MyFormControlItems
function Get-MyFormControlItems ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Get-MyFormControlItems
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [Object]$Control
  )
  Write-Verbose -Message "Enter Function Get-MyFormControlItems"
  
  $Control.GetProperties(("Instance", "Public")) | Where-Object -FilterScript { $PSItem.Name -notin @("Controls", "DataBindings") -and -not $PSItem.CanWrite -and $PSItem.PropertyType.GetInterface("ICollection").IsPublic } | Sort-Object -Property Name -Unique
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Get-MyFormControlItems"
}
#endregion function Get-MyFormControlItems


#region function Convert-MyImageToBase64
function Convert-MyImageToBase64()
{
  <#
    .SYNOPSIS
      Converts and image to base64 Text
    .DESCRIPTION
      Converts and image to base64 Text
    .PARAMETER Path
    .PARAMETER Name
    .EXAMPLE
      Convert-MyImageToBase64 -Path <String> -Name <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding(DefaultParameterSetName = "File")]
  Param (
    [String]$MyScriptName,
    [parameter(Mandatory = $True, ParameterSetName = "Icon")]
    [System.Drawing.Icon]$Icon,
    [parameter(Mandatory = $True, ParameterSetName = "File")]
    [String]$Path,
    [parameter(Mandatory = $True)]
    [String]$Name,
    [int]$LineSize = 160
  )
  Write-Verbose -Message "Enter Function Convert-MyImageToBase64"
  
  $Code = [System.Text.StringBuilder]::New()
  
  $ImageName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "").Replace("ico", "Icon")
  [Void]$Code.AppendLine("#region ******** `$$($ImageName) ********")
  [Void]$Code.AppendLine("`$$($ImageName) = @`"")
  $MemoryStream = [System.IO.MemoryStream]::New()
  if ($PSCmdlet.ParameterSetName -eq "File")
  {
    Switch ([System.IO.Path]::GetExtension($Path))
    {
      ".ico"
      {
        $Image = [System.Drawing.Icon]::New($Path)
        $Image.Save($MemoryStream)
        Break
      }
      ".gif"
      {
        $Image = [System.Drawing.Image]::FromFile($Path)
        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Gif)
        Break
      }
      Default
      {
        $Image = [System.Drawing.Image]::FromFile($Path)
        $Image.Save($MemoryStream, [System.Drawing.Imaging.ImageFormat]::Jpeg)
        Break
      }
    }
  }
  else
  {
    $Image = $Icon
    $Image.Save($MemoryStream)
  }
  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
  {
    [Void]$Code.AppendLine($Line)
  }
  $MemoryStream.Close()
  [Void]$Code.AppendLine("`"@")
  [Void]$Code.AppendLine("#endregion ******** `$$($ImageName) ********")
  if (([System.IO.Path]::GetExtension($path) -eq ".ico") -or ($PSCmdlet.ParameterSetName -eq "Icon"))
  {
    #[Void]$Code.AppendLine("#`$Form.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")
    [Void]$Code.AppendLine("`$$($MyScriptName)ImageList.Images.Add(`"$($ImageName)`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName)))))")
  }
  else
  {
    [Void]$Code.AppendLine("#`$PictureBox.Image = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($ImageName))))")
  }
  $Code.ToString()
  
  $Image = $Null
  $MemoryStream = $Null
  $Code = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Convert-MyImageToBase64"
}
#endregion function Convert-MyImageToBase64

#region function Encode-MyDataFile
function Encode-MyDataFile()
{
  <#
    .SYNOPSIS
      Compress String Data
    .DESCRIPTION
      Compress String Data
    .PARAMETER Text
      Text to Compress
    .EXAMPLE
      Encode-MyDataFile -Value "String"
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, HelpMessage = "Enter Path")]
    [String]$Path,
    [parameter(Mandatory = $True, HelpMessage = "Enter Name")]
    [String]$Name,
    [int]$LineSize = 200
  )
  Write-Verbose -Message "Enter Function Encode-MyDataFile"
  
  $EncodeName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "")
  $MemoryStream = [System.IO.MemoryStream]::New()
  $StreamWriter = [System.IO.StreamWriter]::New($MemoryStream, [System.Text.Encoding]::UTF8)
  $StreamWriter.Write(([Char[]][System.IO.File]::ReadAllBytes($Path)))
  $StreamWriter.Close()
  $Code = [System.Text.StringBuilder]::New()
  
  [Void]$Code.AppendLine("#region `$$EncodeName Encodeed Data")
  [Void]$Code.AppendLine("`$$EncodeName = @`"")
  ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
  {
    [Void]$Code.AppendLine($Line)
  }
  $MemoryStream.Close()
  [Void]$Code.AppendLine("`"@")
  [Void]$Code.AppendLine("#endregion `$$EncodeName Encodeed Data")
  [Void]$Code.AppendLine("#`$DecodedData = Decode-MyData -Data `$$EncodeName -AsString")
  [Void]$Code.AppendLine("#[System.IO.File]::WriteAllText(`$FilePath, `$DecodedData)")
  [Void]$Code.AppendLine("#`$DecodedData = Decode-MyData -Data `$$EncodeName")
  [Void]$Code.AppendLine("#[System.IO.File]::WriteAllBytes(`$FilePath, `$DecodedData)")
  $Code.ToString()
  
  $EncodeName = $Null
  $MemoryStream = $Null
  $StreamWriter = $Null
  $Code = $Null
  $Line = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Encode-MyDataFile"
}
#endregion function Encode-MyDataFile


#region function Build-MyScriptHeader
function Build-MyScriptHeader ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptHeader -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptHeader"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#  Script: $($MyScriptName)")
  [Void]$StringBuilder.AppendLine("# Version: 0.0.0.0")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("# ----------------------------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("Change Log for $($MyScriptName)")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("0.0.0.0 - Initial Version")
  [Void]$StringBuilder.AppendLine("------------------------------------------------------------------------------------------------")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#requires -version 5.0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("using namespace System.Windows.Forms")
  [Void]$StringBuilder.AppendLine("using namespace System.Drawing")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections")
  [Void]$StringBuilder.AppendLine("using namespace System.Collections.Specialized")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("  .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("  .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("  .PARAMETER <Parameter-Name>")
  [Void]$StringBuilder.AppendLine("  .EXAMPLE")
  [Void]$StringBuilder.AppendLine("  .NOTES")
  [Void]$StringBuilder.AppendLine("    My Script $($MyScriptName) Version 1.0 by $([System.Environment]::UserName) on $(([DateTime]::Now).ToString("MM/dd/yyyy"))")
  [Void]$StringBuilder.AppendLine("    Created with `"$([MyConfig]::ScriptName)`" Version $([MyConfig]::ScriptVersion)")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#[CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("#param (")
  [Void]$StringBuilder.AppendLine("#)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$VerbosePreference to 'SilentlyContinue' for Production Deployment")
  [Void]$StringBuilder.AppendLine("`$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Set `$DebugPreference for Production Deployment")
  [Void]$StringBuilder.AppendLine("`$DebugPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Hide Console Window Progress Bar")
  [Void]$StringBuilder.AppendLine("`$ProgressPreference = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Clear Previous Error Messages")
  [Void]$StringBuilder.AppendLine("`$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Modules")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("[Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Drawing`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Enable Visual Styles")
  [Void]$StringBuilder.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Pre-Load Required Modules")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Import-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((Get-Module -Name CimCmdlets -ErrorAction SilentlyContinue -Verbose:`$False).Name))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"ERROR: Unable to Load Module 'CimCmdlets'`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Enable Visual Styles")
  [Void]$StringBuilder.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptHeader"
}
#endregion function Build-MyScriptHeader

#region function Build-MyScriptConfig
function Build-MyScriptConfig ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptConfig -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptConfig"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> $($MyScriptName) Configuration <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("Class MyConfig")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Default Form Run Mode")
  [Void]$StringBuilder.AppendLine("  static [bool]`$Production = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptName = `"My Script - $($MyScriptName)`"")
  [Void]$StringBuilder.AppendLine("  static [Version]`$ScriptVersion = [Version]::New(`"0.0.0.0`")")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptAuthor = `"$([System.Environment]::UserName)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$ScriptRoot = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ConfigFile = `"`"")
  [Void]$StringBuilder.AppendLine("  static [PSCustomObject]`$ConfigData = [PSCustomObject]@{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Script Runtime Values")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$Is64Bit = ([IntPtr]::Size -eq 8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Settings")
  [Void]$StringBuilder.AppendLine("  static [Int]`$FormSpacer = 4")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinWidth = 60")
  [Void]$StringBuilder.AppendLine("  static [int]`$FormMinHeight = 35")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Font")
  [Void]$StringBuilder.AppendLine("  static [String]`$FontFamily = `"Verdana`"")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontSize = 10")
  [Void]$StringBuilder.AppendLine("  static [Single]`$FontTitle = 1.5")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Azure Module Logon Information")
  [Void]$StringBuilder.AppendLine("  static [String]`$AZModuleName = `"Az.Accounts`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$AZModuleVersion = `"2.19.0`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Static [OrderedDictionary]`$RequiredModules = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Az.Accounts`" = `"4.0.2`"")
  [Void]$StringBuilder.AppendLine("    `"Az.KeyVault`" = `"6.3.1`"")
  [Void]$StringBuilder.AppendLine("    `"Az.Automation`" = `"1.11.1`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Azure Logon Information")
  [Void]$StringBuilder.AppendLine("  static [String]`$TenantID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$SubscriptionID = `"`"")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AADLogonInfo = `$Null")
  [Void]$StringBuilder.AppendLine("  static [Object]`$AccessToken = `$Null")
  [Void]$StringBuilder.AppendLine("  static [HashTable]`$AuthToken = @{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Form Color Mode")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$DarkMode = ((Get-ItemProperty -Path `"Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize`" -ErrorAction `"SilentlyContinue`").AppsUseLightTheme -eq `"0`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Form Auto Exit")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExit = 0")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitMax = 60")
  [Void]$StringBuilder.AppendLine("  static [Int]`$AutoExitTic = 60000")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Administrative Rights")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsLocalAdmin = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$IsPowerUser = ([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::PowerUser)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # KPI Event Logging")
  [Void]$StringBuilder.AppendLine("  static [Bool]`$KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  static [String]`$KPILogName = `"KPI Event Log`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Network / Internet")
  [Void]$StringBuilder.AppendLine("  static [__ComObject]`$IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]`"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default Script Credentials")
  [Void]$StringBuilder.AppendLine("  static [String]`$Domain = `"Domain`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$UserID = `"UserID`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$Password = `"P@ssw0rd`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default SMTP Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$SMTPServer = `"smtp.mydomain.local`"")
  [Void]$StringBuilder.AppendLine("  static [int]`$SMTPPort = 25")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Default MEMCM Configuration")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMServer = `"MyMEMCM.MyDomain.Local`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMSite = `"XYZ`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$MEMCMNamespace = `"Root\SMS\Site_XYZ`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Help / Issues Uri's")
  [Void]$StringBuilder.AppendLine("  static [String]`$HelpURL = `"https://www.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$BugURL = `"https://www.amazon.com/`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # CertKet for Cert Encryption")
  [Void]$StringBuilder.AppendLine("  static [String]`$CertKey = `"`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Web Browser File Path's")
  [Void]$StringBuilder.AppendLine("  static [String]`$EdgePath = (Get-ItemProperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("  static [String]`$ChromePath = (Get-ItemProperty -Path `"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe`" -ErrorAction `"SilentlyContinue`").`"(default)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Current DateTime Offset")
  [Void]$StringBuilder.AppendLine("  static [DateTimeOffset]`$DateTimeOffset = [System.DateTimeOffset]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [HashTable]`$Colors = @{}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  static [HashTable]`$Font = @{}")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Get Script Path")
  [Void]$StringBuilder.AppendLine("if ([String]::IsNullOrEmpty(`$HostInvocation))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$Script:MyInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::ScriptRoot = [System.IO.Path]::GetDirectoryName(`$HostInvocation.MyCommand.Path)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ $($MyScriptName) Configuration  ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptConfig"
}
#endregion function Build-MyScriptConfig

#region function Build-MyScriptColors
function Build-MyScriptColors ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptColors -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptColors"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Set $($MyScriptName) Default Colors <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Colors.Clear()")
  [Void]$StringBuilder.AppendLine("if ([MyConfig]::DarkMode)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Back`", ([System.Drawing.Color]::FromArgb(40, 40, 40)))")
  [Void]$StringBuilder.AppendLine("  #[MyConfig]::Colors.Add(`"Fore`", ([System.Drawing.Color]::LightCoral))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Fore`", ([System.Drawing.Color]::DodgerBlue))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"LabelFore`", ([System.Drawing.Color]::WhiteSmoke))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ErrorFore`", ([System.Drawing.Color]::Red))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleBack`", ([System.Drawing.Color]::DarkGray))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleFore`", ([System.Drawing.Color]::Black))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"GroupFore`", ([System.Drawing.Color]::WhiteSmoke))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBack`", ([System.Drawing.Color]::Gainsboro))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextROBack`", ([System.Drawing.Color]::DarkGray))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextFore`", ([System.Drawing.Color]::Black))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextTitle`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextHint`", ([System.Drawing.Color]::Gray))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBad`", ([System.Drawing.Color]::FireBrick))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextWarn`", ([System.Drawing.Color]::Sienna))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextGood`", ([System.Drawing.Color]::ForestGreen))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextInfo`", ([System.Drawing.Color]::CornflowerBlue))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonBack`", ([System.Drawing.Color]::DarkGray))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonFore`", ([System.Drawing.Color]::Black))")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("else")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Back`", ([System.Drawing.Color]::WhiteSmoke))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Fore`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"LabelFore`", ([System.Drawing.Color]::Black))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ErrorFore`", ([System.Drawing.Color]::Red))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleBack`", ([System.Drawing.Color]::LightBlue))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleFore`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"GroupFore`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBack`", ([System.Drawing.Color]::White))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextROBack`", ([System.Drawing.Color]::Gainsboro))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextFore`", ([System.Drawing.Color]::Black))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextTitle`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextHint`", ([System.Drawing.Color]::Gray))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBad`", ([System.Drawing.Color]::FireBrick))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextWarn`", ([System.Drawing.Color]::Sienna))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextGood`", ([System.Drawing.Color]::ForestGreen))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextInfo`", ([System.Drawing.Color]::CornflowerBlue))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonBack`", ([System.Drawing.Color]::Gainsboro))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonFore`", ([System.Drawing.Color]::Navy))")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Default Colors")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Back`", ([System.Drawing.SystemColors]::Control))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"Fore`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"LabelFore`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ErrorFore`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleBack`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TitleFore`", ([System.Drawing.SystemColors]::Control))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"GroupFore`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBack`", ([System.Drawing.SystemColors]::Window))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextROBack`", ([System.Drawing.SystemColors]::Window))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextFore`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextTitle`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextHint`", ([System.Drawing.SystemColors]::GrayText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextBad`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextWarn`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextGood`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"TextInfo`", ([System.Drawing.SystemColors]::WindowText))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonBack`", ([System.Drawing.SystemColors]::Control))")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::Colors.Add(`"ButtonFore`", ([System.Drawing.SystemColors]::ControlText))")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("#endregion Default Colors")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ Set $($MyScriptName) Default Colors ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptColors"
}
#endregion function Build-MyScriptColors

#region function Build-MyScriptFonts
function Build-MyScriptFonts ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptFonts -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptFonts"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Set $($MyScriptName) Default Font Data <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize")
  [Void]$StringBuilder.AppendLine("`$TempMeasureString = @{ `"Width`" = 1000; `"Height`" = 1000; `"IsEmpty`" = `$True }")
  [Void]$StringBuilder.AppendLine("while ((`$MonitorSize.Width -le ([MyConfig]::FormMinWidth * [Math]::Floor(`$TempMeasureString.Width))) -or (`$MonitorSize.Height -le ([MyConfig]::FormMinHeight * [Math]::Floor(`$TempMeasureString.Height))))")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  if (-not `$TempMeasureString.IsEmpty)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::FontSize = [MyConfig]::FontSize - .1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempBoldFont = [System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Bold)")
  [Void]$StringBuilder.AppendLine("  `$TempGraphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)")
  [Void]$StringBuilder.AppendLine("  `$TempMeasureString = `$TempGraphics.MeasureString(`"X`", `$TempBoldFont)")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Clear()")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Regular`", ([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Hint`", ([System.Drawing.Font]::New([MyConfig]::FontFamily, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Italic)))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Bold`", (`$TempBoldFont))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Title`", ([System.Drawing.Font]::New([MyConfig]::FontFamily, ([MyConfig]::FontSize * [MyConfig]::FontTitle), [System.Drawing.FontStyle]::Bold)))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Ratio`", (`$TempGraphics.DpiX / 96))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Width`", ([Math]::Floor(`$TempMeasureString.Width)))")
  [Void]$StringBuilder.AppendLine("[MyConfig]::Font.Add(`"Height`", ([Math]::Ceiling(`$TempMeasureString.Height)))")
  [Void]$StringBuilder.AppendLine("`$MonitorSize = `$Null")
  [Void]$StringBuilder.AppendLine("`$TempBoldFont = `$Null")
  [Void]$StringBuilder.AppendLine("`$TempMeasureString = `$Null")
  [Void]$StringBuilder.AppendLine("`$TempGraphics.Dispose()")
  [Void]$StringBuilder.AppendLine("`$TempGraphics = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ Set $($MyScriptName) Default Font Data ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptFonts"
}
#endregion function Build-MyScriptFonts

#region function Build-MyScriptRuntime
function Build-MyScriptRuntime ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptRuntime -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptRuntime"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> $($MyScriptName) Runtime Values <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Class MyRuntime")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ $($MyScriptName) Runtime  Values ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptRuntime"
}
#endregion function Build-MyScriptRuntime

#region function Build-MyScriptDefEnums
function Build-MyScriptDefEnums ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptDefEnums -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptDefEnums"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> My Default Enumerations <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** enum MyAnswer ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyAnswer")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Unknown = 0")
  [Void]$StringBuilder.AppendLine("  No      = 1")
  [Void]$StringBuilder.AppendLine("  Yes     = 2")
  [Void]$StringBuilder.AppendLine("  Maybe   = 3")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyAnswer ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyAnswer ********
  
  #region ******** enum MyDigit ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("enum MyDigit")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Zero")
  [Void]$StringBuilder.AppendLine("  One")
  [Void]$StringBuilder.AppendLine("  Two")
  [Void]$StringBuilder.AppendLine("  Three")
  [Void]$StringBuilder.AppendLine("  Four")
  [Void]$StringBuilder.AppendLine("  Five")
  [Void]$StringBuilder.AppendLine("  Six")
  [Void]$StringBuilder.AppendLine("  Seven")
  [Void]$StringBuilder.AppendLine("  Eight")
  [Void]$StringBuilder.AppendLine("  Nine")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyDigit ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyDigit ********
  
  #region ******** enum MyBits ********
  [Void]$StringBuilder.AppendLine("#region ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("[Flags()]")
  [Void]$StringBuilder.AppendLine("enum MyBits")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  Bit01 = 0x00000001")
  [Void]$StringBuilder.AppendLine("  Bit02 = 0x00000002")
  [Void]$StringBuilder.AppendLine("  Bit03 = 0x00000004")
  [Void]$StringBuilder.AppendLine("  Bit04 = 0x00000008")
  [Void]$StringBuilder.AppendLine("  Bit05 = 0x00000010")
  [Void]$StringBuilder.AppendLine("  Bit06 = 0x00000020")
  [Void]$StringBuilder.AppendLine("  Bit07 = 0x00000040")
  [Void]$StringBuilder.AppendLine("  Bit08 = 0x00000080")
  [Void]$StringBuilder.AppendLine("  Bit09 = 0x00000100")
  [Void]$StringBuilder.AppendLine("  Bit10 = 0x00000200")
  [Void]$StringBuilder.AppendLine("  Bit11 = 0x00000400")
  [Void]$StringBuilder.AppendLine("  Bit12 = 0x00000800")
  [Void]$StringBuilder.AppendLine("  Bit13 = 0x00001000")
  [Void]$StringBuilder.AppendLine("  Bit14 = 0x00002000")
  [Void]$StringBuilder.AppendLine("  Bit15 = 0x00004000")
  [Void]$StringBuilder.AppendLine("  Bit16 = 0x00008000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** enum MyBits ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** enum MyBits ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Default Enumerations ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptDefEnums"
}
#endregion function Build-MyScriptDefEnums

#region function Build-MyScriptDefClasses
function Build-MyScriptDefClasses ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptDefClasses -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptDefClasses"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> My Custom Class <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** MyListItem Class ********
  [Void]$StringBuilder.AppendLine("#region ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("Class MyListItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$Text")
  [Void]$StringBuilder.AppendLine("  [Object]`$Value")
  [Void]$StringBuilder.AppendLine("  [Object]`$Tag")
  [Void]$StringBuilder.AppendLine("  [MyBits]`$Flags")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag, [MyBits]`$Flags)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Text = `$Text")
  [Void]$StringBuilder.AppendLine("    `$This.Value = `$Value")
  [Void]$StringBuilder.AppendLine("    `$This.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("    `$This.Flags = `$Flags")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** MyListItem Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** MyListItem Class ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Custom Class ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptDefClasses"
}
#endregion function Build-MyScriptDefClasses

#region function Build-MyScriptWindowsAPIs
function Build-MyScriptWindowsAPIs ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptWindowsAPIs -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptWindowsAPIs"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Windows APIs <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Win API - [Console.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("#[Void][Console.Window]::Show()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Console")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetConsoleWindow();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Hide()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 0);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static bool Show()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 5);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Console.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("[System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
  [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Void][Console.Window]::Hide()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Console.Window] ********
  
  #region ******** Win API - [ControlBox.Menu] ********
  [Void]$StringBuilder.AppendLine("#region ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [ControlBox.Menu]::DisableFormClose(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace ControlBox")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Menu")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    const int MF_BYPOSITION = 0x400;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"User32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern int GetMenuItemCount(IntPtr hWnd);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void DisableFormClose(IntPtr hWnd)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr hMenu = GetSystemMenu(hWnd, false);")
  [Void]$StringBuilder.AppendLine("      int menuItemCount = GetMenuItemCount(hMenu);")
  [Void]$StringBuilder.AppendLine("      RemoveMenu(hMenu, menuItemCount - 1, MF_BYPOSITION);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [ControlBox.Menu] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [ControlBox.Menu] ********
  
  #region ******** Win API - [My.Screen] ********
  [Void]$StringBuilder.AppendLine("#region ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info = [My.Screen]::Info()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$Info.PWidth = Physical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.PHeight = Physical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.LWidth = Logical Width")
  [Void]$StringBuilder.AppendLine("# `$Info.LHeight = Logical Height")
  [Void]$StringBuilder.AppendLine("# `$Info.Scale = Scale")
  [Void]$StringBuilder.AppendLine("# `$Info.BitsPixel = Bits Per Pixel")
  [Void]$StringBuilder.AppendLine("# `$Info.Referesh = Refresh Rate")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace My")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("  using System.Drawing;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Specialized;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public static class Screen")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"gdi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    internal static extern int GetDeviceCaps(IntPtr hdc, int nIndex);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static OrderedDictionary Info()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      /// Get Primary Desktop")
  [Void]$StringBuilder.AppendLine("      IntPtr Desktop = (Graphics.FromHwnd(IntPtr.Zero)).GetHdc();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      OrderedDictionary MyScreen = new OrderedDictionary();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Physical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempPW = GetDeviceCaps(Desktop, 118);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PWidth`", TempPW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"PHeight`", GetDeviceCaps(Desktop, 117));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Logical Screen Size")
  [Void]$StringBuilder.AppendLine("      int TempLW = GetDeviceCaps(Desktop, 8);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LWidth`", TempLW);")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"LHeight`", GetDeviceCaps(Desktop, 10));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Screen Scale")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Scale`", ((float)TempPW / (float)TempLW));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      /// Other Screen Info")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"BitsPixel`", GetDeviceCaps(Desktop, 12));")
  [Void]$StringBuilder.AppendLine("      MyScreen.Add(`"Referesh`", GetDeviceCaps(Desktop, 116));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return MyScreen.AsReadOnly();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Drawing.dll`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [My.Screen] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [My.Screen] ********
  
  #region ******** Win API - [User.Desktop] ********
  [Void]$StringBuilder.AppendLine("#region ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [User.Desktop]::Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace User")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Desktop")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern IntPtr SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, string lParam, uint fuFlags, uint uTimeout, IntPtr lpdwResult);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr HWND_BROADCAST = new IntPtr(0xffff);")
  [Void]$StringBuilder.AppendLine("    private const int WM_SETTINGCHANGE = 0x1a;")
  [Void]$StringBuilder.AppendLine("    private const int SMTO_ABORTIFHUNG = 0x0002;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.Runtime.InteropServices.DllImport(`"Shell32.dll`")] ")
  [Void]$StringBuilder.AppendLine("    private static extern int SHChangeNotify(int eventId, int flags, IntPtr item1, IntPtr item2);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static void Refresh()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, IntPtr.Zero, null, SMTO_ABORTIFHUNG, 100, IntPtr.Zero);")
  [Void]$StringBuilder.AppendLine("      SHChangeNotify(0x8000000, 0x1000, IntPtr.Zero, IntPtr.Zero);    ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [User.Desktop] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [User.Desktop] ********
  
  #region ******** Win API - [Display.Window] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::SetForegroundWindow(`$Form.Handle)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_HIDE)")
  [Void]$StringBuilder.AppendLine("#[Void][Display.Window]::ShowWindow(`$Form.Handle, [ShowWindow]::SW_SHOW)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("Enum ShowWindow")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  SW_HIDE = 0")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNORMAL = 1")
  [Void]$StringBuilder.AppendLine("  SW_MAXIMIZE = 3")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNOACTIVATE = 4")
  [Void]$StringBuilder.AppendLine("  SW_SHOW = 5")
  [Void]$StringBuilder.AppendLine("  SW_MINIMIZE = 6")
  [Void]$StringBuilder.AppendLine("  SW_SHOWMINNOACTIVE = 7")
  [Void]$StringBuilder.AppendLine("  SW_SHOWNA = 8")
  [Void]$StringBuilder.AppendLine("  SW_RESTORE = 9")
  [Void]$StringBuilder.AppendLine("  SW_SHOWDEFAULT = 10")
  [Void]$StringBuilder.AppendLine("  SW_FORCEMINIMIZE = 11")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Display")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Window")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool SetForegroundWindow(IntPtr Handle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`")]")
  [Void]$StringBuilder.AppendLine("    public static extern bool ShowWindow(IntPtr Handle, int ShowOpt);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Display.Window] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Display.Window] ********
  
  #region ******** Win API - [Extract.MyIcon] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$TempCount = [Extract.MyIcon]::IconCount(`"C:\Windows\System32\shell32.dll`")")
  [Void]$StringBuilder.AppendLine("#`$TempIcon = [Extract.MyIcon]::IconReturn(`"C:\Windows\System32\shell32.dll`", 1, `$False)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Drawing;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Extract")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class MyIcon")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyIcon(IntPtr hIcon);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"shell32.dll`", CharSet = CharSet.Auto)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static int IconCount(string FileName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return 0;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
  [Void]$StringBuilder.AppendLine("      Icon RetData = null;")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);")
  [Void]$StringBuilder.AppendLine("        if (GetLarge)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in LIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        foreach (IntPtr ptr in SIcons)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (ptr != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            DestroyIcon(ptr);")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return RetData;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static Icon IconReturn(string FileName, int IconNum)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return IconReturn(FileName, IconNum, false);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies System.Drawing -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Extract.MyIcon] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - v ********
  
  #region ******** Win API - [Login.Sessions] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions()")
  [Void]$StringBuilder.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions(`"ComputerName`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("namespace Login")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  using System;")
  [Void]$StringBuilder.AppendLine("  using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class Sessions")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    } ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    public struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public Int32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public String SessionName;")
  [Void]$StringBuilder.AppendLine("      public WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern IntPtr WTSOpenServer(string pServerName);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSCloseServer(IntPtr hServer);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
  [Void]$StringBuilder.AppendLine("    static extern int WTSEnumerateSessions(System.IntPtr hServer, int Reserved, int Version, ref System.IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    static extern void WTSFreeMemory(IntPtr pMemory);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return EnumSessions(System.Environment.MachineName, All);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (string ComputerName, bool All = false)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Int32 Count = 0;")
  [Void]$StringBuilder.AppendLine("      IntPtr Computer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr SessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      Int32 DataSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      List<WTS_SESSION_INFO> SessionList = new List<WTS_SESSION_INFO>();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Computer = WTSOpenServer(ComputerName);")
  [Void]$StringBuilder.AppendLine("        if (Computer !=IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Int64 RetValue = WTSEnumerateSessions(Computer, 0, 1, ref SessionInfo, ref Count);")
  [Void]$StringBuilder.AppendLine("          if (RetValue != 0)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Int64 Start = (Int64)SessionInfo;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("            for (Int32 Index = 0; Index < Count; Index++)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              WTS_SESSION_INFO SessionData = (WTS_SESSION_INFO)Marshal.PtrToStructure((System.IntPtr)(Start + (DataSize * Index)), typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("              if ((SessionData.State == WTS_CONNECTSTATE_CLASS.WTSActive) | All)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                SessionList.Add(SessionData);")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          WTSFreeMemory(SessionInfo);")
  [Void]$StringBuilder.AppendLine("          WTSCloseServer(Computer);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return SessionList;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Login.Sessions] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Login.Sessions] ********
  
  #region ******** Win API - [Impersonate.User] ********
  [Void]$StringBuilder.AppendLine("#region ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace Impersonate")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public enum LogonType")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_INTERACTIVE = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK = 3,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_BATCH = 4,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_SERVICE = 5,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_UNLOCK = 7,")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NETWORK_CLEARTEXT = 8, // Win2K or higher")
  [Void]$StringBuilder.AppendLine("    LOGON32_LOGON_NEW_CREDENTIALS = 9 // Win2K or higher")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public enum LogonProvider")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_DEFAULT = 0,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT35 = 1,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT40 = 2,")
  [Void]$StringBuilder.AppendLine("    LOGON32_PROVIDER_WINNT50 = 3")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public class User")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true, CharSet = CharSet.Unicode)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr Token);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    public static extern bool CloseHandle(IntPtr hHandle);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Impersonate Example")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#`$UserToken = [IntPtr]::Zero")
  [Void]$StringBuilder.AppendLine("#if ([Impersonate.User]::LogonUser(`$UserID, `$Domain, `$Password, 2, 0, [Ref]`$UserToken))")
  [Void]$StringBuilder.AppendLine("#{")
  [Void]$StringBuilder.AppendLine("#  Try")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    `$Impersonate = [System.Security.Principal.WindowsIdentity]::Impersonate(`$UserToken)")
  [Void]$StringBuilder.AppendLine("#    #region ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#    #endregion ******** Put Work Here ********")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  Finally")
  [Void]$StringBuilder.AppendLine("#  {")
  [Void]$StringBuilder.AppendLine("#    if (-not [String]::IsNullOrEmpty(`$Impersonate))")
  [Void]$StringBuilder.AppendLine("#    {")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate.Undo()")
  [Void]$StringBuilder.AppendLine("#      `$Impersonate = `$Null")
  [Void]$StringBuilder.AppendLine("#    }")
  [Void]$StringBuilder.AppendLine("#  }")
  [Void]$StringBuilder.AppendLine("#  [Void]([Impersonate.User]::CloseHandle(`$UserToken))")
  [Void]$StringBuilder.AppendLine("#  `$UserToken = `$Null")
  [Void]$StringBuilder.AppendLine("#}")
  [Void]$StringBuilder.AppendLine("#")
  [Void]$StringBuilder.AppendLine("#endregion Impersonate Example")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** [Impersonate.User] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [Impersonate.User] ********
  
  #region ******** Win API - [RunAs.CurrentUser] ********
  [Void]$StringBuilder.AppendLine("#region ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir)")
  [Void]$StringBuilder.AppendLine("# `$ProcessID = [RunAs.CurrentUser]::StartProcessAsCurrentUser(`$Application, `$Arguments, `$WorkingDir, `$Visible)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace RunAs")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public static class CurrentUser")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NO_WINDOW = 0x08000000;")
  [Void]$StringBuilder.AppendLine("    private const int CREATE_NEW_CONSOLE = 0x00000010;")
  [Void]$StringBuilder.AppendLine("    private const uint INVALID_SESSION_ID = 0xFFFFFFFF;")
  [Void]$StringBuilder.AppendLine("    private static readonly IntPtr WTS_CURRENT_SERVER_HANDLE = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"CreateProcessAsUser`", SetLastError = true, CharSet = CharSet.Ansi, CallingConvention = CallingConvention.StdCall)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateProcessAsUser(IntPtr hToken, String lpApplicationName, String lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandle, uint dwCreationFlags, IntPtr lpEnvironment, String lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", EntryPoint = `"DuplicateTokenEx`")]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DuplicateTokenEx(IntPtr ExistingTokenHandle, uint dwDesiredAccess, IntPtr lpThreadAttributes, int TokenType, int ImpersonationLevel, ref IntPtr DuplicateTokenHandle);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CreateEnvironmentBlock(ref IntPtr lpEnvironment, IntPtr hToken, bool bInherit);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"userenv.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern bool CloseHandle(IntPtr hSnapshot);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"Wtsapi32.dll`")]")
  [Void]$StringBuilder.AppendLine("    private static extern uint WTSQueryUserToken(uint SessionId, ref IntPtr phToken);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern int WTSEnumerateSessions(IntPtr hServer, int Reserved, int Version, ref IntPtr ppSessionInfo, ref int pCount);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SW")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SW_HIDE = 0,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_NORMAL = 1,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINIMIZED = 2,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMAXIMIZED = 3,")
  [Void]$StringBuilder.AppendLine("      SW_MAXIMIZE = 3,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNOACTIVATE = 4,")
  [Void]$StringBuilder.AppendLine("      SW_SHOW = 5,")
  [Void]$StringBuilder.AppendLine("      SW_MINIMIZE = 6,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWMINNOACTIVE = 7,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWNA = 8,")
  [Void]$StringBuilder.AppendLine("      SW_RESTORE = 9,")
  [Void]$StringBuilder.AppendLine("      SW_SHOWDEFAULT = 10,")
  [Void]$StringBuilder.AppendLine("      SW_MAX = 10")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum WTS_CONNECTSTATE_CLASS")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      WTSActive,")
  [Void]$StringBuilder.AppendLine("      WTSConnected,")
  [Void]$StringBuilder.AppendLine("      WTSConnectQuery,")
  [Void]$StringBuilder.AppendLine("      WTSShadow,")
  [Void]$StringBuilder.AppendLine("      WTSDisconnected,")
  [Void]$StringBuilder.AppendLine("      WTSIdle,")
  [Void]$StringBuilder.AppendLine("      WTSListen,")
  [Void]$StringBuilder.AppendLine("      WTSReset,")
  [Void]$StringBuilder.AppendLine("      WTSDown,")
  [Void]$StringBuilder.AppendLine("      WTSInit")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct PROCESS_INFORMATION")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public IntPtr hProcess;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hThread;")
  [Void]$StringBuilder.AppendLine("      public uint dwProcessId;")
  [Void]$StringBuilder.AppendLine("      public uint dwThreadId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum SECURITY_IMPERSONATION_LEVEL")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      SecurityAnonymous = 0,")
  [Void]$StringBuilder.AppendLine("      SecurityIdentification = 1,")
  [Void]$StringBuilder.AppendLine("      SecurityImpersonation = 2,")
  [Void]$StringBuilder.AppendLine("      SecurityDelegation = 3,")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct STARTUPINFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int cb;")
  [Void]$StringBuilder.AppendLine("      public String lpReserved;")
  [Void]$StringBuilder.AppendLine("      public String lpDesktop;")
  [Void]$StringBuilder.AppendLine("      public String lpTitle;")
  [Void]$StringBuilder.AppendLine("      public uint dwX;")
  [Void]$StringBuilder.AppendLine("      public uint dwY;")
  [Void]$StringBuilder.AppendLine("      public uint dwXSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwYSize;")
  [Void]$StringBuilder.AppendLine("      public uint dwXCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwYCountChars;")
  [Void]$StringBuilder.AppendLine("      public uint dwFillAttribute;")
  [Void]$StringBuilder.AppendLine("      public uint dwFlags;")
  [Void]$StringBuilder.AppendLine("      public short wShowWindow;")
  [Void]$StringBuilder.AppendLine("      public short cbReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr lpReserved2;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdInput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdOutput;")
  [Void]$StringBuilder.AppendLine("      public IntPtr hStdError;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private enum TOKEN_TYPE")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      TokenPrimary = 1,")
  [Void]$StringBuilder.AppendLine("      TokenImpersonation = 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct WTS_SESSION_INFO")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public readonly UInt32 SessionID;")
  [Void]$StringBuilder.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
  [Void]$StringBuilder.AppendLine("      public readonly String pWinStationName;")
  [Void]$StringBuilder.AppendLine("      public readonly WTS_CONNECTSTATE_CLASS State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    // Gets the user token from the currently active session")
  [Void]$StringBuilder.AppendLine("    private static bool GetSessionUserToken(ref IntPtr phUserToken)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var bResult = false;")
  [Void]$StringBuilder.AppendLine("      var hImpersonationToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var activeSessionId = INVALID_SESSION_ID;")
  [Void]$StringBuilder.AppendLine("      var pSessionInfo = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var sessionCount = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // Get a handle to the user access token for the current active session.")
  [Void]$StringBuilder.AppendLine("      if (WTSEnumerateSessions(WTS_CURRENT_SERVER_HANDLE, 0, 1, ref pSessionInfo, ref sessionCount) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        var arrayElementSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("        var current = pSessionInfo;")
  [Void]$StringBuilder.AppendLine("        for (var i = 0; i < sessionCount; i++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          var si = (WTS_SESSION_INFO)Marshal.PtrToStructure((IntPtr)current, typeof(WTS_SESSION_INFO));")
  [Void]$StringBuilder.AppendLine("          current += arrayElementSize;")
  [Void]$StringBuilder.AppendLine("          if (si.State == WTS_CONNECTSTATE_CLASS.WTSActive)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            activeSessionId = si.SessionID;")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      // If enumerating did not work, fall back to the old method")
  [Void]$StringBuilder.AppendLine("      if (activeSessionId == INVALID_SESSION_ID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        activeSessionId = WTSGetActiveConsoleSessionId();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (WTSQueryUserToken(activeSessionId, ref hImpersonationToken) != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        // Convert the impersonation token to a primary token")
  [Void]$StringBuilder.AppendLine("        bResult = DuplicateTokenEx(hImpersonationToken, 0, IntPtr.Zero, (int)SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation, (int)TOKEN_TYPE.TokenPrimary, ref phUserToken);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hImpersonationToken);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return bResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static uint StartProcessAsCurrentUser(string Application, string Arguments = null, string WorkingDir = null, bool visible = true)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      var hUserToken = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      var startInfo = new STARTUPINFO();")
  [Void]$StringBuilder.AppendLine("      startInfo.cb = Marshal.SizeOf(typeof(STARTUPINFO));")
  [Void]$StringBuilder.AppendLine("      var procInfo = new PROCESS_INFORMATION();")
  [Void]$StringBuilder.AppendLine("      var pEnv = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      uint ProcessID = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (GetSessionUserToken(ref hUserToken))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          uint dwCreationFlags = CREATE_UNICODE_ENVIRONMENT | (uint)(visible ? CREATE_NEW_CONSOLE : CREATE_NO_WINDOW);")
  [Void]$StringBuilder.AppendLine("          startInfo.wShowWindow = (short)(visible ? SW.SW_SHOW : SW.SW_HIDE);")
  [Void]$StringBuilder.AppendLine("          startInfo.lpDesktop = `"winsta0\\default`";")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if (CreateEnvironmentBlock(ref pEnv, hUserToken, false))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if (CreateProcessAsUser(hUserToken, Application, Arguments, IntPtr.Zero, IntPtr.Zero, false, dwCreationFlags, pEnv, WorkingDir, ref startInfo, out procInfo))")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              ProcessID = procInfo.dwProcessId;")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        CloseHandle(hUserToken);")
  [Void]$StringBuilder.AppendLine("        if (pEnv != IntPtr.Zero)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          DestroyEnvironmentBlock(pEnv);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hThread);")
  [Void]$StringBuilder.AppendLine("        CloseHandle(procInfo.hProcess);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return ProcessID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [RunAs.CurrentUser] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [RunAs.CurrentUser] ********
  
  If ($False)
  {
    #region ******** Win API - [Elevate.UserRights] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::AddPrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.UserRights]::RemovePrivilege(`"SeRestorePrivilege`")")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class UserRights")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall, ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", ExactSpelling = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"kernel32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool CloseHandle(IntPtr hHandle);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", ExactSpelling = true, SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential, Pack = 1)]")
    [Void]$StringBuilder.AppendLine("    internal struct TokPriv1Luid")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("     public int Count;")
    [Void]$StringBuilder.AppendLine("     public long Luid;")
    [Void]$StringBuilder.AppendLine("     public int Attr;")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_DISABLED = 0x00000000;")
    [Void]$StringBuilder.AppendLine("    internal const int SE_PRIVILEGE_ENABLED = 0x00000002;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_REQUIRED = 0x000F0000;")
    [Void]$StringBuilder.AppendLine("    internal const int STANDARD_RIGHTS_READ = 0x00020000;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ASSIGN_PRIMARY = 0x0001;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_DUPLICATE = 0x0002;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_IMPERSONATE = 0x0004;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY = 0x0008;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_QUERY_SOURCE = 0x0010;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_PRIVILEGES = 0x0020;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_GROUPS = 0x0040;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_DEFAULT = 0x0080;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ADJUST_SESSIONID = 0x0100;")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_READ = (STANDARD_RIGHTS_READ | TOKEN_QUERY);")
    [Void]$StringBuilder.AppendLine("    internal const int TOKEN_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT | TOKEN_ADJUST_SESSIONID);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool AddPrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, false);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool RemovePrivilege(string Privilege)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      return AdjustPrivilege(Privilege, true);")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    internal static bool AdjustPrivilege(string Privilege, bool Remove)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      try")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        bool retVal;")
    [Void]$StringBuilder.AppendLine("        TokPriv1Luid tp;")
    [Void]$StringBuilder.AppendLine("        IntPtr hproc = GetCurrentProcess();")
    [Void]$StringBuilder.AppendLine("        IntPtr htok = IntPtr.Zero;")
    [Void]$StringBuilder.AppendLine("        retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);")
    [Void]$StringBuilder.AppendLine("        tp.Count = 1;")
    [Void]$StringBuilder.AppendLine("        tp.Luid = 0;")
    [Void]$StringBuilder.AppendLine("        if (Remove)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_DISABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        else")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          tp.Attr = SE_PRIVILEGE_ENABLED;")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        retVal = LookupPrivilegeValue(null, Privilege, ref tp.Luid);")
    [Void]$StringBuilder.AppendLine("        retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);")
    [Void]$StringBuilder.AppendLine("        if (htok != IntPtr.Zero)")
    [Void]$StringBuilder.AppendLine("        {")
    [Void]$StringBuilder.AppendLine("          bool Ignore = CloseHandle(htok);")
    [Void]$StringBuilder.AppendLine("        }")
    [Void]$StringBuilder.AppendLine("        return retVal;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("      catch (Exception ex)")
    [Void]$StringBuilder.AppendLine("      {")
    [Void]$StringBuilder.AppendLine("        throw ex;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.UserRights] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.UserRights] ********
    
    #region ******** Win API - [Elevate.Privilege] ********
    [Void]$StringBuilder.AppendLine("#region ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Enable(9)")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(`"SeTakeOwnershipPrivilege`")")
    [Void]$StringBuilder.AppendLine("# `$Success = [Elevate.Privilege]::Disable(9)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
    [Void]$StringBuilder.AppendLine("namespace Elevate")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  using System;")
    [Void]$StringBuilder.AppendLine("  using System.Runtime.InteropServices;")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public enum PrivilegeNames")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    SeCreateTokenPrivilege = 1,")
    [Void]$StringBuilder.AppendLine("    SeAssignPrimaryTokenPrivilege = 2,")
    [Void]$StringBuilder.AppendLine("    SeLockMemoryPrivilege = 3,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseQuotaPrivilege = 4,")
    [Void]$StringBuilder.AppendLine("    SeUnsolicitedInputPrivilege = 5,")
    [Void]$StringBuilder.AppendLine("    SeMachineAccountPrivilege = 6,")
    [Void]$StringBuilder.AppendLine("    SeTcbPrivilege = 7,")
    [Void]$StringBuilder.AppendLine("    SeSecurityPrivilege = 8,")
    [Void]$StringBuilder.AppendLine("    SeTakeOwnershipPrivilege = 9,")
    [Void]$StringBuilder.AppendLine("    SeLoadDriverPrivilege = 10,")
    [Void]$StringBuilder.AppendLine("    SeSystemProfilePrivilege = 11,")
    [Void]$StringBuilder.AppendLine("    SeSystemtimePrivilege = 12,")
    [Void]$StringBuilder.AppendLine("    SeProfileSingleProcessPrivilege = 13,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseBasePriorityPrivilege = 14,")
    [Void]$StringBuilder.AppendLine("    SeCreatePagefilePrivilege = 15,")
    [Void]$StringBuilder.AppendLine("    SeCreatePermanentPrivilege = 16,")
    [Void]$StringBuilder.AppendLine("    SeBackupPrivilege = 17,")
    [Void]$StringBuilder.AppendLine("    SeRestorePrivilege = 18,")
    [Void]$StringBuilder.AppendLine("    SeShutdownPrivilege = 19,")
    [Void]$StringBuilder.AppendLine("    SeDebugPrivilege = 20,")
    [Void]$StringBuilder.AppendLine("    SeAuditPrivilege = 21,")
    [Void]$StringBuilder.AppendLine("    SeSystemEnvironmentPrivilege = 22,")
    [Void]$StringBuilder.AppendLine("    SeChangeNotifyPrivilege = 23,")
    [Void]$StringBuilder.AppendLine("    SeRemoteShutdownPrivilege = 24,")
    [Void]$StringBuilder.AppendLine("    SeUndockPrivilege = 25,")
    [Void]$StringBuilder.AppendLine("    SeSyncAgentPrivilege = 26,")
    [Void]$StringBuilder.AppendLine("    SeEnableDelegationPrivilege = 27,")
    [Void]$StringBuilder.AppendLine("    SeManageVolumePrivilege = 28,")
    [Void]$StringBuilder.AppendLine("    SeImpersonatePrivilege = 29,")
    [Void]$StringBuilder.AppendLine("    SeCreateGlobalPrivilege = 30,")
    [Void]$StringBuilder.AppendLine("    SeTrustedCredManAccessPrivilege = 31,")
    [Void]$StringBuilder.AppendLine("    SeRelabelPrivilege = 32,")
    [Void]$StringBuilder.AppendLine("    SeIncreaseWorkingSetPrivilege = 33,")
    [Void]$StringBuilder.AppendLine("    SeTimeZonePrivilege = 34,")
    [Void]$StringBuilder.AppendLine("    SeCreateSymbolicLinkPrivilege = 35")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  public class Privilege")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"ntdll.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern IntPtr RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true)]")
    [Void]$StringBuilder.AppendLine("    internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Enable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Enable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, true, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(string Privilege) {")
    [Void]$StringBuilder.AppendLine("      long PrivilegeID = 0;")
    [Void]$StringBuilder.AppendLine("      if (LookupPrivilegeValue(null, Privilege, ref PrivilegeID)) {")
    [Void]$StringBuilder.AppendLine("        return Disable((int)PrivilegeID);")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    public static bool Disable(int Privilege) {")
    [Void]$StringBuilder.AppendLine("      bool oldval = false;")
    [Void]$StringBuilder.AppendLine("      if (RtlAdjustPrivilege(Privilege, false, false, out oldval) == IntPtr.Zero) {")
    [Void]$StringBuilder.AppendLine("        return true;")
    [Void]$StringBuilder.AppendLine("      } else {")
    [Void]$StringBuilder.AppendLine("        return false;")
    [Void]$StringBuilder.AppendLine("      }")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#endregion ******** [Elevate.Privilege] ********")
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** Win API - [Elevate.Privilege] ********
  }
  
  #region ******** Win API - [MyAD.Stuff] ********
  [Void]$StringBuilder.AppendLine("#region ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# [MyAD.Stuff]::GetSidString(([Byte[]]`$DirecitoryEntry.objectSid[0]))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyAD")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Stuff")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [DllImport(`"advapi32`", CharSet = CharSet.Auto, SetLastError = true)]")
  [Void]$StringBuilder.AppendLine("    static extern bool ConvertSidToStringSid([MarshalAs(UnmanagedType.LPArray)] byte[] pSID, out IntPtr ptrSid);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public static string GetSidString(byte[] sid)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr ptrSid;")
  [Void]$StringBuilder.AppendLine("      string sidString;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (!ConvertSidToStringSid(sid, out ptrSid))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new System.ComponentModel.Win32Exception();")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        sidString = Marshal.PtrToStringAuto(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      finally")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Marshal.FreeHGlobal(ptrSid);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      return sidString;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ******** [MyAD.Stuff] ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Win API - [MyAD.Stuff] ********
  
  #region ******** Trust All Certs ********
  [Void]$StringBuilder.AppendLine("#region ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("  using System.Net;")
  [Void]$StringBuilder.AppendLine("  using System.Security.Cryptography.X509Certificates;")
  [Void]$StringBuilder.AppendLine("  public class TrustAllCertsPolicy : ICertificatePolicy ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("[Net.ServicePointManager]::CertificatePolicy = [TrustAllCertsPolicy]::New()")
  [Void]$StringBuilder.AppendLine("#endregion ******** Trust All Certs ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Trust All Certs ********
  
  #region ********* Get / Set LSA Auto Logon Password *********
  [Void]$StringBuilder.AppendLine("#region ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Runtime.InteropServices;")
  [Void]$StringBuilder.AppendLine("using System.Text;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace LSA")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class Secret")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_UNICODE_STRING")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public UInt16 Length;")
  [Void]$StringBuilder.AppendLine("      public UInt16 MaximumLength;")
  [Void]$StringBuilder.AppendLine("      public IntPtr Buffer;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
  [Void]$StringBuilder.AppendLine("    private struct LSA_OBJECT_ATTRIBUTES")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      public int Length;")
  [Void]$StringBuilder.AppendLine("      public IntPtr RootDirectory;")
  [Void]$StringBuilder.AppendLine("      public LSA_UNICODE_STRING ObjectName;")
  [Void]$StringBuilder.AppendLine("      public uint Attributes;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityDescriptor;")
  [Void]$StringBuilder.AppendLine("      public IntPtr SecurityQualityOfService;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private enum LSA_AccessPolicy : long")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_LOCAL_INFORMATION = 0x00000001L,")
  [Void]$StringBuilder.AppendLine("      POLICY_VIEW_AUDIT_INFORMATION = 0x00000002L,")
  [Void]$StringBuilder.AppendLine("      POLICY_GET_PRIVATE_INFORMATION = 0x00000004L,")
  [Void]$StringBuilder.AppendLine("      POLICY_TRUST_ADMIN = 0x00000008L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_ACCOUNT = 0x00000010L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_SECRET = 0x00000020L,")
  [Void]$StringBuilder.AppendLine("      POLICY_CREATE_PRIVILEGE = 0x00000040L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x00000080L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SET_AUDIT_REQUIREMENTS = 0x00000100L,")
  [Void]$StringBuilder.AppendLine("      POLICY_AUDIT_LOG_ADMIN = 0x00000200L,")
  [Void]$StringBuilder.AppendLine("      POLICY_SERVER_ADMIN = 0x00000400L,")
  [Void]$StringBuilder.AppendLine("      POLICY_LOOKUP_NAMES = 0x00000800L,")
  [Void]$StringBuilder.AppendLine("      POLICY_NOTIFICATION = 0x00001000L")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaRetrievePrivateData(IntPtr PolicyHandle, ref LSA_UNICODE_STRING KeyName, out IntPtr PrivateData);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaStorePrivateData(IntPtr policyHandle, ref LSA_UNICODE_STRING KeyName,ref LSA_UNICODE_STRING PrivateData);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaOpenPolicy(ref LSA_UNICODE_STRING SystemName, ref LSA_OBJECT_ATTRIBUTES ObjectAttributes, uint DesiredAccess, out IntPtr PolicyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaNtStatusToWinError(uint status);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaClose(IntPtr policyHandle);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [DllImport (`"advapi32.dll`", SetLastError = true, PreserveSig = true)]")
  [Void]$StringBuilder.AppendLine("    private static extern uint LsaFreeMemory(IntPtr buffer);")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private LSA_OBJECT_ATTRIBUTES ObjectAttributes;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING LocalSystem;")
  [Void]$StringBuilder.AppendLine("    private LSA_UNICODE_STRING SecretName;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = 0;")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public Secret (string ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (ComputerName.Length == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"ComputerName lenght zero`");")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes = new LSA_OBJECT_ATTRIBUTES();")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Length = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.RootDirectory = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.Attributes = 0;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityDescriptor = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      ObjectAttributes.SecurityQualityOfService = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      LocalSystem = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Buffer = Marshal.StringToHGlobalUni(ComputerName);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.Length = (UInt16)(ComputerName.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      LocalSystem.MaximumLength = (UInt16)((ComputerName.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      string Key = `"DefaultPassword`";")
  [Void]$StringBuilder.AppendLine("      SecretName = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      SecretName.Buffer = Marshal.StringToHGlobalUni(Key);")
  [Void]$StringBuilder.AppendLine("      SecretName.Length = (UInt16)(Key.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      SecretName.MaximumLength = (UInt16)((Key.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    private IntPtr GetLsaPolicy (LSA_AccessPolicy access)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaOpenPolicy (ref this.LocalSystem, ref this.ObjectAttributes, (uint)access, out LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaOpenPolicy failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      return LsaPolicyHandle;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void ReleaseLsaPolicy (IntPtr LsaPolicyHandle)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaClose(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaClose failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    private static void FreeMemory(IntPtr Buffer)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaFreeMemory(Buffer);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"LsaFreeMemory failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    public string GetSecret ()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      IntPtr PrivateData = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_GET_PRIVATE_INFORMATION);")
  [Void]$StringBuilder.AppendLine("      uint ntsResult = LsaRetrievePrivateData(LsaPolicyHandle, ref SecretName, out PrivateData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy(LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError(ntsResult);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode != 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        throw new Exception (`"RetreivePrivateData failed: `" + winErrorCode);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = (LSA_UNICODE_STRING)Marshal.PtrToStructure(PrivateData, typeof(LSA_UNICODE_STRING));")
  [Void]$StringBuilder.AppendLine("      string Value = Marshal.PtrToStringAuto(LusSecretData.Buffer).Substring(0, (LusSecretData.Length / 2));")
  [Void]$StringBuilder.AppendLine("      FreeMemory (PrivateData);")
  [Void]$StringBuilder.AppendLine("      return Value;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool SetSecret (string Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      LSA_UNICODE_STRING LusSecretData = new LSA_UNICODE_STRING();")
  [Void]$StringBuilder.AppendLine("      if (Value.Length > 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Create data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = Marshal.StringToHGlobalUni(Value);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = (UInt16)(Value.Length * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = (UInt16)((Value.Length + 1) * UnicodeEncoding.CharSize);")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        //Delete data and key")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Buffer = IntPtr.Zero;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.Length = 0;")
  [Void]$StringBuilder.AppendLine("        LusSecretData.MaximumLength = 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      IntPtr LsaPolicyHandle = GetLsaPolicy(LSA_AccessPolicy.POLICY_CREATE_SECRET);")
  [Void]$StringBuilder.AppendLine("      uint result = LsaStorePrivateData(LsaPolicyHandle, ref SecretName, ref LusSecretData);")
  [Void]$StringBuilder.AppendLine("      ReleaseLsaPolicy (LsaPolicyHandle);")
  [Void]$StringBuilder.AppendLine("      uint winErrorCode = LsaNtStatusToWinError (result);")
  [Void]$StringBuilder.AppendLine("      if (winErrorCode == 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return true;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return false;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("#endregion ********* Get / Set LSA Auto Logon Password *********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ********* Get / Set LSA Auto Logon Password *********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Windows APIs ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptWindowsAPIs"
}
#endregion function Build-MyScriptWindowsAPIs

#region function Build-MyScriptFunctions
function Build-MyScriptFunctions ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptFunctions -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptFunctions"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> My Custom Functions <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region **** Function Prompt ****
  [Void]$StringBuilder.AppendLine("#region Function Prompt")
  [Void]$StringBuilder.AppendLine("Function Prompt")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Console]::Title = `$PWD")
  [Void]$StringBuilder.AppendLine("  `"PS`$(`$PSVersionTable.PSVersion.Major)`$(`">`" * (`$NestedPromptLevel + 1)) `"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Prompt")
  [Void]$StringBuilder.AppendLine("")
  #endregion **** Function Prompt ****
  
  #region ******** Sample Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Verb-Noun
  [Void]$StringBuilder.AppendLine("#region function Verb-Noun")
  [Void]$StringBuilder.AppendLine("Function Verb-Noun ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-Noun -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verb-Noun`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verb-Noun`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-Noun")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-Noun
  
  #region function Verb-NounPiped
  [Void]$StringBuilder.AppendLine("#region function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("Function Verb-NounPiped()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Verb-NounPiped -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Value | Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped Begin Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once when the Function Begins")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Loop and Proccess all Values")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Value)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Verb-NounPiped End Block`"")
  [Void]$StringBuilder.AppendLine("    # This Code is Executed Once whent he Function Ends")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Verb-NounPiped End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verb-NounPiped")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verb-NounPiped
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Sample Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Sample Functions ********
  
  #region ******* Microsoft Forms Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function New-MyListItem
  [Void]$StringBuilder.AppendLine("#region function New-MyListItem")
  [Void]$StringBuilder.AppendLine("function New-MyListItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MyListItem -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyListItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyListItem
  
  #region function New-TreeNode
  [Void]$StringBuilder.AppendLine("#region function New-TreeNode")
  [Void]$StringBuilder.AppendLine("function New-TreeNode()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TreeNode")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AtTop")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-TreeNode -TreeNode `$TreeNode -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$TreeNode,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$SelectedImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectedImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AtTop,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [switch]`$AddChild,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-TreeNode`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("  if (`$AddChild.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text, [System.Windows.Forms.TreeNode]::New(`"*`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode = [System.Windows.Forms.TreeNode]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AtTop.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Insert(0, `$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$TreeNode.Nodes.Add(`$TempTreeNode)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$Checked.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode.NodeFont = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Index`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageIndex`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$SelectedImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTreeNode.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"SelectedImageKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$SelectedImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempTreeNode.SelectedImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTreeNode = [System.Windows.Forms.TreeNode]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Expand.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode.Expand()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTreeNode")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTreeNode = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-TreeNode`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TreeNode")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TreeNode
  
  #region function New-MenuItem
  [Void]$StringBuilder.AppendLine("#region function New-MenuItem")
  [Void]$StringBuilder.AppendLine("function New-MenuItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextImageRelation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuItem -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextImageRelation]`$TextImageRelation = `"ImageBeforeText`",")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("    if (`$Menu.DropDown.Items.Count -eq 1)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.BackColor = `$Menu.BackColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ForeColor = `$Menu.ForeColor")
  [Void]$StringBuilder.AppendLine("      `$Menu.DropDown.ImageList = `$Menu.Owner.ImageList")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuItem)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ShortcutKeys = `$ShortcutKeys")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuItem.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem.TextImageRelation = `$TextImageRelation")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuItem = [System.Windows.Forms.ToolStripMenuItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuItem
  
  #region function New-MenuButton
  [Void]$StringBuilder.AppendLine("#region function New-MenuButton")
  [Void]$StringBuilder.AppendLine("function New-MenuButton()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuButton for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuButton for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Check")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClickOnCheck")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortcutKeys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuButton -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Check,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ClickOnCheck,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = [System.Windows.Forms.ToolStripButton]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$Menu.Items.Add(`$TempMenuButton)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ShortcutKeys = `$ShortcutKeys")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Checked = `$Check.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.CheckOnClick = `$ClickOnCheck.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Icon`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempMenuButton.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuButton = [System.Windows.Forms.ToolStripButton]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuButton")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuButton = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuButton`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuButton")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuButton
  
  #region function New-MenuLabel
  [Void]$StringBuilder.AppendLine("#region function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("function New-MenuLabel()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayStyle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-MenuLabel -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleLeft`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disable,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuLabel`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempMenuLabel)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.TextAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.DisplayStyle = `$DisplayStyle")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Enabled = (-not `$Disable.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel.Font = `$Font")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Icon`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.ImageAlign = `$Alignment")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempMenuLabel = [System.Windows.Forms.ToolStripLabel]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempMenuLabel")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempMenuLabel = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuLabel`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuLabel")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuLabel
  
  #region function New-MenuSeparator
  [Void]$StringBuilder.AppendLine("#region function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("function New-MenuSeparator()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Menu")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MenuSeparator -Menu `$Menu")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Menu,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.Back,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuSeparator`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.DropDownItems.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Menu.Items.Add(`$TempSeparator)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.Name = `"TempSeparator`"")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.Text = `"TempSeparator`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempSeparator = [System.Windows.Forms.ToolStripSeparator]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSeparator = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuSeparator`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MenuSeparator")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MenuSeparator
  
  #region function New-ListViewItem
  [Void]$StringBuilder.AppendLine("#region function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("function New-ListViewItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IndentCount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Imagekey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewItem -ListView `$listView -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SubItems,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$IndentCount = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Index`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListViewGroup]`$Group,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$Group)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Index`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageIndex, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Text, `$ImageKey, `$Group)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.IndentCount = `$IndentCount")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Checked = `$Checked.IsPresent")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SubItems`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem.SubItems.AddRange(`$SubItems)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewItem = [System.Windows.Forms.ListViewItem]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Items.Add(`$TempListViewItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewItem = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewItem
  
  #region function New-ColumnHeader
  [Void]$StringBuilder.AppendLine("#region function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("function New-ColumnHeader()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ColumnHeader -Text `"Text`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = -2,")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ColumnHeader`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Columns.Add(`$TempColumnHeader)")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Text = `$Text")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader.Width = `$Width")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempColumnHeader = [System.Windows.Forms.ColumnHeader]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempColumnHeader")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempColumnHeader = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ColumnHeader`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ColumnHeader")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ColumnHeader
  
  #region function New-ListViewGroup
  [Void]$StringBuilder.AppendLine("#region function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("function New-ListViewGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Header")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = New-ListViewGroup -Header `"Header`" -Tag `"Tag`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Header,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = `"Left`",")
  [Void]$StringBuilder.AppendLine("    [switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewGroup`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$ListView.Groups.Add(`$TempListViewGroup)")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.Header = `$Header")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup.Name = `$Header")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup.HeaderAlignment = `$Alignment")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempListViewGroup = [System.Windows.Forms.ListViewGroup]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempListViewGroup")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempListViewGroup = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewGroup`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-ListViewGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-ListViewGroup
  
  #region function New-TabPage
  [Void]$StringBuilder.AppendLine("#region function New-TabPage")
  [Void]$StringBuilder.AppendLine("function New-TabPage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TabControl")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BackColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ForeColor")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tag")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ImageIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ToolTip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Disabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$TabPage = New-TabPage -TabControl  -Text `"Text`" -Tag `"Tag`" -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param(")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TabControl]`$TabControl,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BackColor = [MyConfig]::Colors.TextBack,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ForeColor = [MyConfig]::Colors.TextFore,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Object]`$Tag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ImageIndex,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ImageKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$ToolTip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Disabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-TabPage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = [System.Windows.Forms.TabPage]::New(`$Text)")
  [Void]$StringBuilder.AppendLine("  `$TabControl.Controls.Add(`$TempTabPage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Name`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage.Name = `$Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Tag = `$Tag")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ToolTipText = `$ToolTip")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Enabled = (-not `$Disabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ImageIndex`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageIndex = `$ImageIndex")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ImageKey`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempTabPage.ImageKey = `$ImageKey")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.BackColor = `$BackColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.ForeColor = `$ForeColor")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage.Font = `$Font")
  [Void]$StringBuilder.AppendLine("  #endregion `$TempTabPage = [System.Windows.Forms.TabPage]")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempTabPage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempTabPage = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-TabPage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-TabPage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-TabPage
  
  #region function Scale-MyForm
  [Void]$StringBuilder.AppendLine("#region function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("function Scale-MyForm()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Scale Form")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Scale Form")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scale")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Control -`$Scale")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$Control = `$$($MyScriptName)Form,")
  [Void]$StringBuilder.AppendLine("    [Single]`$Scale = 1")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Scale-MyForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Control -is [System.Windows.Forms.Form])")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Control.Scale(`$Scale)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Control.Font = [System.Drawing.Font]::New(`$Control.Font.FontFamily, (`$Control.Font.Size * `$Scale), `$Control.Font.Style)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$Control.PSObject.Properties.Match(`"Items`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Control.Controls.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$ChildControl in `$Control.Controls)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Scale-MyForm -Control `$ChildControl -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Control.Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Scale-MyForm -Control `$Item -Scale `$Scale")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Scale-MyForm`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Scale-MyForm")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Scale-MyForm
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft Forms Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Microsoft Forms Functions ********
  
  #region ******* Active Directory Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyADForest
  [Void]$StringBuilder.AppendLine("#region function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("function Get-MyADForest ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Forest")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Forest")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADForest -Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADForest -Name `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Current")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADForest`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Forest")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADForest`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADForest")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADForest
  
  #region function Get-MyADDomain
  [Void]$StringBuilder.AppendLine("#region function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("function Get-MyADDomain ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Domain")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Active Directory Domain")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Current")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Computer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyADForest = Get-MyADDomain -Name `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Computer`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Current`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Current")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADDomain`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Name`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = [System.DirectoryServices.ActiveDirectory.DirectoryContext]::New(`$DirectoryContextType, `$Name)")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domian]::GetDomain(`$DirectoryContext)")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContext = `$Null")
  [Void]$StringBuilder.AppendLine("      `$DirectoryContextType = `$Null")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Computer`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetComputerDomain()")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Current`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADDomain`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADDomain")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADDomain
  
  #region function Get-MyADObject
  [Void]$StringBuilder.AppendLine("#region function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("function Get-MyADObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LDAPFilter")
  [Void]$StringBuilder.AppendLine("      AD Search LDAP Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PageSize")
  [Void]$StringBuilder.AppendLine("      Search Page Size")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SizeLimit")
  [Void]$StringBuilder.AppendLine("      Search Search Size")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchRoot")
  [Void]$StringBuilder.AppendLine("      Starting Search OU")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("      Name of DC or Domain to query")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchScope")
  [Void]$StringBuilder.AppendLine("      Search Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sort")
  [Void]$StringBuilder.AppendLine("      Sort Direction")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SortProperty")
  [Void]$StringBuilder.AppendLine("      Property to Sort By")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertiesToLoad")
  [Void]$StringBuilder.AppendLine("      Properties to Load")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when searching active directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject [<String>]")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyADObject -filter [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$LDAPFilter = `"(objectClass=*)`",")
  [Void]$StringBuilder.AppendLine("    [Long]`$PageSize = 1000,")
  [Void]$StringBuilder.AppendLine("    [Long]`$SizeLimit = 1000,")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"LDAP://`$(`$([ADSI]'').distinguishedName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Base`", `"OneLevel`", `"Subtree`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SearchScope]`$SearchScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Ascending`", `"Descending`")]")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.SortDirection]`$Sort = `"Ascending`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SortProperty,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PropertiesToLoad,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADObject`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = [System.DirectoryServices.DirectorySearcher]::New(`$LDAPFilter, `$PropertiesToLoad, `$SearchScope)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.PageSize = `$PageSize")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.SizeLimit = `$SizeLimit")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$SearchRoot.ToUpper()")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$TempSearchRoot)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"(?:LDAP|GC)://*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot -replace `"(?<LG>(?:LDAP|GC)://)(?:[\w\d\.-]+/)?(?<DN>.+)`", `"```${LG}`$(`$ServerName)/```${DN}`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `$TempSearchRoot")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$ServerName)/`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MySearchRoot = `"LDAP://`$(`$TempSearchRoot)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot, (`$Credential.UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.SearchRoot = [System.DirectoryServices.DirectoryEntry]::New(`$MySearchRoot)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"SortProperty`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.PropertyName = `$SortProperty")
  [Void]$StringBuilder.AppendLine("    `$MySearcher.Sort.Direction = `$Sort")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.FindAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MySearcher.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$MySearcher = `$Null")
  [Void]$StringBuilder.AppendLine("  `$MySearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("  `$TempSearchRoot = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADObject`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyADObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyADObject
  
  #region function New-MyADUser
  [Void]$StringBuilder.AppendLine("#region function New-MyADUser")
  [Void]$StringBuilder.AppendLine("function New-MyADUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates a new User in Active Directory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates a new User in Active Directory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parent")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ServerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SamAccountName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserPrincipalName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FirstName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Enabled")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoExpire")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoChange")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyADUser -Parent `"OU=Users,OU=MyUsers,DC=MyDomain,DC=Local`" -SamAccountName `"MyTestUser`" -UserPrincipalName `"MyTestUser@MyDomain.Local`" -FirstName `"FirstName`" -MI `"M`" -LastName `"LastName`" -Description `"My Description`" -Password `"MyPassword`" -Enabled")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Basic function to create a User in Active Directory, needs input validation and error checking")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Parent,")
  [Void]$StringBuilder.AppendLine("    [String]`$ServerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SamAccountName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserPrincipalName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$FirstName,")
  [Void]$StringBuilder.AppendLine("    [String]`$MI,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Enabled,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoExpire,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoChange,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyADUser`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"SearchRoot`"  = `$Parent;")
  [Void]$StringBuilder.AppendLine("    `"SearchScope`" = `"Base`";")
  [Void]$StringBuilder.AppendLine("    `"SizeLimit`"   = 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"ServerName`", `$ServerName)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Params.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ParentOU = (Get-MyADObject @Params).GetDirectoryEntry()")
  [Void]$StringBuilder.AppendLine("  `$New = `$ParentOU.Children.Add(`"CN=`$(`$SamAccountName)`", `"User`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"samaccountname`"].Add(`$SamAccountName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"userprincipalname`"].Add(`$UserPrincipalName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"givenname`"].Add(`$FirstName)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"sn`"].Add(`$LastName)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MI`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"initials`"].Add(`$MI)")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName) `$(`$MI)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.Properties[`"displayname`"].Add(`"`$(`$LastName), `$(`$FirstName)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.Properties[`"description`"].Add(`$Description)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  if (`$Enabled.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$New.psbase.invokeset(`"AccountDisabled`", `"False`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.SetPassword(`$Password)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("  `$UACFlag = 0")
  [Void]$StringBuilder.AppendLine("  if (`$NoExpire.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x10000")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$NoChange.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$UACFlag = `$UACFlag -bor 0x40")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New.Properties[`"userAccountControl`"].Value = ((`$New.Properties[`"userAccountControl`"].Value -band (-bnot 0x20)) -bor `$UACFlag)")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.CommitChanges()")
  [Void]$StringBuilder.AppendLine("  [Void]`$New.RefreshCache()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$New = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyADUser`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyADUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyADUser
  
  #region function Translate-DomainName
  [Void]$StringBuilder.AppendLine("#region function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("function Translate-DomainName()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_1779 = 1")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL = 2")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_NT4 = 3")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DISPLAY = 4")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_DOMAIN_SIMPLE = 5")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_GUID = 7")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_UNKNOWN = 8")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_CANONICAL_EX = 10")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11")
  [Void]$StringBuilder.AppendLine("      ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByFQDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$FQDN")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Translate-DomainName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = New-Object -ComObject `"NameTranslate`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.Void]([System.__ComObject].InvokeMember(`"Init`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (3, `$Null)))")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (1, `$DN)))")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByFQDN`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (2, `"`$FQDN/`")))")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"DN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 1));")
  [Void]$StringBuilder.AppendLine("    `"FQDN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 2)).Trim('/');")
  [Void]$StringBuilder.AppendLine("    `"NetBIOS`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 3)).Trim('\')")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$NameTranslate = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Translate-DomainName`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Translate-DomainName")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Translate-DomainName
  
  #region function Validate-MyADAccount
  [Void]$StringBuilder.AppendLine("#region function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("function Validate-MyADAccount()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Validates AD Credentials")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Validates AD Credentials")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Domain")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Domain <String> -UserName <String> -Password <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -UserName <String> -Password <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Validate-MyADAccount -Password <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Domain,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Creds`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Validate-MyADAccount`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.DirectoryServices.AccountManagement.ContextType`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [void][System.Reflection.Assembly]::LoadWithPartialName(`"System.DirectoryServices.AccountManagement`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, ((`$Credential.GetNetworkCredential()).Domain)).ValidateCredentials(((`$Credential.GetNetworkCredential()).UserName), ((`$Credential.GetNetworkCredential()).Password))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.DirectoryServices.AccountManagement.PrincipalContext]::New([System.DirectoryServices.AccountManagement.ContextType]::Domain, `$Domain).ValidateCredentials(`$UserName, `$Password)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Validate-MyADAccount`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Validate-MyADAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Validate-MyADAccount
  
  #region function Confirm-MyGroupMemberShip
  [Void]$StringBuilder.AppendLine("#region function Confirm-MyGroupMemberShip")
  [Void]$StringBuilder.AppendLine("Function Confirm-MyGroupMemberShip ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Confirms if User is a Member of a Group")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Confirms if User is a Member of a Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      User ID / Sam Account Name of user")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserRoot")
  [Void]$StringBuilder.AppendLine("      Search Root for the User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserScope")
  [Void]$StringBuilder.AppendLine("      Search Scope for User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserDN")
  [Void]$StringBuilder.AppendLine("      DN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupName")
  [Void]$StringBuilder.AppendLine("      Name of the Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupRoot")
  [Void]$StringBuilder.AppendLine("      Search Root for the Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER GroupScope")
  [Void]$StringBuilder.AppendLine("      Search Scope for Group")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGroupMemberShip -UserID `$UserID -UserRoot `$UserRoot -GroupName `$GroupName -GroupRoot `$GroupRoot")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Confirm-MyGroupMemberShip -UserDN `$UserDN -GroupName `$GroupName -GroupRoot `$GroupRoot")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID = [Environment]::UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserScope = `"SubTree`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserDN`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserDN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupRoot = `"LDAP://MyDomain.Local/dc=MyDomain,dc=Local`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"SubTree`", `"OneLevel`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$GroupScope = `"SubTree`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Confirm-MyGroupMemberShip`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"UserID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Users DistinguishedName")
  [Void]$StringBuilder.AppendLine("      `$ChkADUser = ([adsisearcher]::New(`$UserRoot, `"(&(objectClass=user)(objectCategory=person)(samAccountName=`$(`$UserID)))`", @(`"DistinguishedName`"), `$UserScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Verify User was Found")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty(`$ChkADUser.Path))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Message = `"User Not Found`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Set UserDN")
  [Void]$StringBuilder.AppendLine("        `$UserDN = `$ChkADUser.Properties[`"distinguishedname`"][0]")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set UserDN")
  [Void]$StringBuilder.AppendLine("      `$UserDN = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify User DN is not Null")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$UserDN))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("    `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("    # Set Success Status")
  [Void]$StringBuilder.AppendLine("    `$Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Check AD is user is member of the Group")
  [Void]$StringBuilder.AppendLine("      `$ChkGroup = ([adsisearcher]::New(`$GroupRoot, `"(&(objectClass=group)(objectCategory=group)(name=`$(`$GroupName))(member:1.2.840.113556.1.4.1941:=`$(`$UserDN)))`", @(`"adspath`"), `$GroupScope)).FindOne()")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = (-not [String]::IsNullOrEmpty(`$ChkGroup.Path))")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$True")
  [Void]$StringBuilder.AppendLine("      `$Message = `"Success`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Is Member Status")
  [Void]$StringBuilder.AppendLine("      `$IsMember = `$False")
  [Void]$StringBuilder.AppendLine("      # Set Success Status")
  [Void]$StringBuilder.AppendLine("      `$Success = `$False")
  [Void]$StringBuilder.AppendLine("      `$Message = `$Error[0].ToString()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"Success`"   = `$Success;")
  [Void]$StringBuilder.AppendLine("    `"Message`"    = `$Message;")
  [Void]$StringBuilder.AppendLine("    `"UserDN`"    = `$UserDN;")
  [Void]$StringBuilder.AppendLine("    `"GroupName`" = `$GroupName;")
  [Void]$StringBuilder.AppendLine("    `"IsMember`"  = `$IsMember")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Confirm-MyGroupMemberShip`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Confirm-MyGroupMemberShip")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Confirm-MyGroupMemberShip
  
  #region function Get-MyBitlockerKey
  [Void]$StringBuilder.AppendLine("#region function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("Function Get-MyBitlockerKey()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Bitlocker Keys")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Bitlocker Keys")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PasswordID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DOmainFQDN")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyBitlockerKey -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$ComputerName | Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2024-07-21 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ParameterSetName = `"CompName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PasswordID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainFQDN = `"ad.providence.org`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchRoot = `"DC=ad,dc=providence,dc=org`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyBitlockerKey Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"CompName`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Computer In `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$CompObj = Get-MyADObject -SearchRoot `"GC://`$(`$DomainFQDN):3268`" -SearchScope `"Subtree`" -LDAPFilter `"(&(objectClass=user)(objectCategory=computer)(samaccounttype=805306369)(CN=`$(`$Computer)))`" -PropertiesToLoad `"distinguishedname`", `"adspath`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$CompObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$BLPasswords = Get-MyADObject -SearchRoot (`$CompObj.Properties[`"distinguishedname`"][0]) -SearchScope `"OneLevel`" -LDAPFilter `"(ObjectClass=msFVE-RecoveryInformation)`"")
  [Void]$StringBuilder.AppendLine("          ForEach (`$BLPassword In `$BLPasswords)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$DateTimeInfo = [RegEx]::Match(`$BLPassword.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("            If (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            Else")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$BLPassword.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$BLPassword.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$PassID In `$PasswordID)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PassObj = Get-MyADObject -SearchRoot `$SearchRoot -Server `$DomainFQDN -SearchScope `"Subtree`" -LDAPFilter `"(&(ObjectClass=msFVE-RecoveryInformation)(Name=*`$(`$PassID)*))`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$PassObj.Path))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `"Unknown`"; `"PasswordID`" = `"N/A`"; `"Password`" = `"N/A`"; `"DateTime`" = [DateTime]::MinValue }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$DateTimeInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `"CN=(?<YE>\d{4})-(?<MO>\d{2})-(?<DA>\d{2})T(?<HO>\d{2}):(?<MI>\d{2}):(?<SE>\d{2})-\d{2}`")")
  [Void]$StringBuilder.AppendLine("          If (`$DateTimeInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::new(`$DateTimeInfo.Groups[`"YE`"].Value, `$DateTimeInfo.Groups[`"MO`"].Value, `$DateTimeInfo.Groups[`"DA`"].Value, `$DateTimeInfo.Groups[`"HO`"].Value, `$DateTimeInfo.Groups[`"MI`"].Value, `$DateTimeInfo.Groups[`"SE`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$KeyTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          `$CompNameInfo = [RegEx]::Match(`$PassObj.Properties[`"adspath`"][0], `",CN=(?<Name>.{1,15}),OU=`")")
  [Void]$StringBuilder.AppendLine("          If (`$CompNameInfo.Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `$CompNameInfo.Groups[`"Name`"].Value")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$Computer = `"Unknown`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"ComputerName`" = `$Computer; `"PasswordID`" = (([Guid]`$PassObj.Properties[`"msfve-recoveryguid`"][0]).Guid); `"Password`" = (`$PassObj.Properties[`"msfve-recoverypassword`"][0]); `"DateTime`" = `$KeyTime }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyBitlockerKey Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyBitlockerKey")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyBitlockerKey
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Active Directory Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Active Directory Functions ********
  
  #region ******* Database Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Invoke-MySQLCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("Function Invoke-MySQLCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes SQL Query or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes SQL Query or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SQLConnection")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"Select * From TableName`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$SQLData = Invoke-MySQLCommand -SQLConnection `$DBCon -Command `"StoreProcedureName`" -SPValues @{ `"ID`" = 1; `"Value`" = `"Some Value`" }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SQLQuery`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.SqlClient.SqlConnection]`$SQLConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"StoredProcedure`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create new SQL Command")
  [Void]$StringBuilder.AppendLine("  `$SQLComand = [System.Data.SqlClient.SqlCommand]::New(`$Command, `$SQLConnection)")
  [Void]$StringBuilder.AppendLine("  # Check if Calling a Stored Procedure")
  [Void]$StringBuilder.AppendLine("  If (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    # Check if Parameters were passed for the Stored Procedure")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Stored Procedure Paramaters")
  [Void]$StringBuilder.AppendLine("      ForEach (`$SPValue In `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$SQLComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Comand Type")
  [Void]$StringBuilder.AppendLine("    `$SQLComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Return SQL Data")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter = [System.Data.SqlClient.SqlDataAdapter]::New(`$SQLComand)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("  [Void]`$SQLDataAdapter.Fill(`$SQLDataSet)")
  [Void]$StringBuilder.AppendLine("  `$SQLDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Dispose of Objects")
  [Void]$StringBuilder.AppendLine("  `$SQLDataAdapter.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$SQLComand.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MySQLCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MySQLCommand
  
  #region function Open-MySQLConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("Function Open-MySQLConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens Connection to SQL Server Database")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Opens Connection to SQL Server Database")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;Trusted_Connection=yes`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Data Source=Server\Instance;Initial Catalog=Database;User Id=UserName;Password=Password;`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -ConnectionString `"Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Authentication='Active Directory Password';`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Import-Module -Name Az.Accounts")
  [Void]$StringBuilder.AppendLine("      `$ConnectInfo = Connect-AzAccount")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://database.windows.net`"")
  [Void]$StringBuilder.AppendLine("      `$DBCon = Open-MySQLConnection -AccessToken `$AccessToken -ConnectionString `"Data Source=DBInstanceName.database.windows.net;Initial Catalog=DBName;Connect Timeout=900`"")
  [Void]$StringBuilder.AppendLine("      If (`$DBCon.State -ne `"Open`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Unable to Connect to SQL Server`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      24-12-11 Initial Relase")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString,")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Check if .Net Assembly is Loaded")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.SqlClient.SqlConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Load .Net Assembly")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create New SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.SqlClient.SqlConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    # Check is Azure Access Token was Passed")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"AccessToken`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Azure Access Token")
  [Void]$StringBuilder.AppendLine("      `$DBCon.AccessToken = `$AccessToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    # Open SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    # Return SQL Connection")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed to Open")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{")
  [Void]$StringBuilder.AppendLine("      `"State`" = [System.Data.ConnectionState]::Closed")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MySQLConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MySQLConnection
  
  #region function Open-MyOracleConnection
  [Void]$StringBuilder.AppendLine("#region function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("function Open-MyOracleConnection()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Opens Connection to Oracle Server Database")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Opens Connection to Oracle Server Database")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ConnectionString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Open-MyOracleConnection -ConnectionString <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ConnectionString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Open-MyOracleConnection`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Data.OracleClient.OracleConnection`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Data`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$DBCon = [System.Data.OracleClient.OracleConnection]::New(`$ConnectionString)")
  [Void]$StringBuilder.AppendLine("    `$DBCon.Open()")
  [Void]$StringBuilder.AppendLine("    `$DBCon")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSObject]@{ `"State`" = [System.Data.ConnectionState]::Closed }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Open-MyOracleConnection`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Open-MyOracleConnection")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Open-MyOracleConnection
  
  #region function Invoke-MyOracleCommand
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyOracleCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes Oracle Command or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes Oracle Command or Stored Procedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OracleConnection")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StoredProcedure")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SPValues")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsDataTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Open-MyOracleConnection -ConnectionString <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Data.OracleClient.OracleConnection]`$OracleConnection,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$StoredProcedure,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$SPValues,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsDataTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyOracleCommand`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OracleComand = [System.Data.OracleClient.OracleCommand]::New(`$Command, `$OracleConnection)")
  [Void]$StringBuilder.AppendLine("  if (`$StoredProcedure.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::StoredProcedure")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"SPValues`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SPValue in `$SPValues.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$OracleComand.Parameters.Add(`$SPValue, `$SPValues[`$SPValue])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleComand.CommandType = [System.Data.CommandType]::Text")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$AsDataTable.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OracleDataAdapter = [System.Data.OracleClient.OracleDataAdapter]::New(`$OracleComand)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet = [System.Data.DataSet]::New()")
  [Void]$StringBuilder.AppendLine("    [Void]`$OracleDataAdapter.Fill(`$OracleDataSet)")
  [Void]$StringBuilder.AppendLine("    `$OracleDataSet.Tables[0]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$TempDBReader = `$OracleComand.ExecuteReader())")
  [Void]$StringBuilder.AppendLine("    `$TempDBReader.Close()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyOracleCommand`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyOracleCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyOracleCommand
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Database Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Database Functions ********
  
  #region ******* Encrypt / Encode Data Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Encode-MyData
  [Void]$StringBuilder.AppendLine("#region function Encode-MyData")
  [Void]$StringBuilder.AppendLine("function Encode-MyData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Data")
  [Void]$StringBuilder.AppendLine("      Data to Compress")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LineLength")
  [Void]$StringBuilder.AppendLine("      Max Line Length")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encode-MyData -Data `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Data,")
  [Void]$StringBuilder.AppendLine("    [Int]`$LineLength = 160")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encode-MyData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter = [System.IO.StreamWriter]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter.Write(`$Data)")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter.Close()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Code = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Line in @([System.Convert]::ToBase64String(`$MemoryStream.ToArray()) -split `"(?<=\G.{`$LineLength})(?=.)`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Code.AppendLine(`$Line)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Code.ToString()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = `$Null")
  [Void]$StringBuilder.AppendLine("  `$StreamWriter = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Code = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Line = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encode-MyData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encode-MyData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encode-MyData
  
  #region function Decode-MyData
  [Void]$StringBuilder.AppendLine("#region function Decode-MyData")
  [Void]$StringBuilder.AppendLine("function Decode-MyData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Decode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Decode Base64 String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Data")
  [Void]$StringBuilder.AppendLine("      Data to Decompress")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Decode-MyData -Data `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Data,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Decode-MyData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$CompressedData = [System.Convert]::FromBase64String(`$Data)")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = [System.IO.MemoryStream]::New()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Write(`$CompressedData, 0, `$CompressedData.Length)")
  [Void]$StringBuilder.AppendLine("  [Void]`$MemoryStream.Seek(0, 0)")
  [Void]$StringBuilder.AppendLine("  `$StreamReader = [System.IO.StreamReader]::New(`$MemoryStream, [System.Text.Encoding]::UTF8)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AsString.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$StreamReader.ReadToEnd()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("    `$Buffer = [System.Char[]]::New(4096)")
  [Void]$StringBuilder.AppendLine("    While (`$StreamReader.EndOfStream -eq `$False)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Bytes = `$StreamReader.Read(`$Buffer, 0, 4096)")
  [Void]$StringBuilder.AppendLine("      if (`$Bytes)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ArrayList.AddRange(`$Buffer[0 .. (`$Bytes - 1)])")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$ArrayList")
  [Void]$StringBuilder.AppendLine("    `$ArrayList.Clear()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$StreamReader.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream.Close()")
  [Void]$StringBuilder.AppendLine("  `$MemoryStream = `$Null")
  [Void]$StringBuilder.AppendLine("  `$StreamReader = `$Null")
  [Void]$StringBuilder.AppendLine("  `$CompressedData = `$Null")
  [Void]$StringBuilder.AppendLine("  `$ArrayList = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Buffer = `$Null")
  [Void]$StringBuilder.AppendLine("  `$Bytes = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Decode-MyData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Decode-MyData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Decode-MyData
  
  #region Function Encrypt-MySensitiveData
  [Void]$StringBuilder.AppendLine("#region Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts / Decrypts Text String Data")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts / Decrypts Text String Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER String")
  [Void]$StringBuilder.AppendLine("      Plain Text or Encrypted String")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassPhrase")
  [Void]$StringBuilder.AppendLine("      Pass Phrase to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("      Salt to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashAlgorithm")
  [Void]$StringBuilder.AppendLine("      Hash Algorithm to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CipherMode")
  [Void]$StringBuilder.AppendLine("      Cipher Mode to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PaddingMode")
  [Void]$StringBuilder.AppendLine("      Padding Mode to Encrypt / Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("      Switch to Decrypt Data")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$EncryptedData = Encrypt-PMSensitiveData -String `$String -PassPhrase `$PassPhrase -Salt `$Pepper")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DecryptedData = Encrypt-PMSensitiveData -String `$String -PassPhrase `$PassPhrase -Salt `$Pepper -Decrypt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$String,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PassPhrase = `"PassPhrase`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Salt = `"Pepper`",")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.HashAlgorithmName]`$HashAlgorithm = [System.Security.Cryptography.HashAlgorithmName]::SHA256,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.CipherMode]`$CipherMode = [System.Security.Cryptography.CipherMode]::CBC,")
  [Void]$StringBuilder.AppendLine("    [System.Security.Cryptography.PaddingMode]`$PaddingMode = [System.Security.Cryptography.PaddingMode]::PKCS7,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create Cryptography AES Object")
  [Void]$StringBuilder.AppendLine("  `$Aes = [System.Security.Cryptography.Aes]::Create()")
  [Void]$StringBuilder.AppendLine("  `$Aes.Mode = `$CipherMode")
  [Void]$StringBuilder.AppendLine("  `$Aes.Padding = `$PaddingMode")
  [Void]$StringBuilder.AppendLine("  # Salt Needs to be at least 8 Characters")
  [Void]$StringBuilder.AppendLine("  `$SaltBytes = [System.Text.Encoding]::UTF8.GetBytes(`$Salt.PadRight(8, `"*`"))")
  [Void]$StringBuilder.AppendLine("  `$Aes.Key = [System.Security.Cryptography.Rfc2898DeriveBytes]::New(`$PassPhrase, `$SaltBytes, 8, `$HashAlgorithm).GetBytes(`$Aes.Key.Length)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Decrypt Encrypted Data")
  [Void]$StringBuilder.AppendLine("    `$DecodeBytes = [System.Convert]::FromBase64String(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Aes.IV = `$DecodeBytes[0..15]")
  [Void]$StringBuilder.AppendLine("    `$Decryptor = `$Aes.CreateDecryptor()")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::UTF8.GetString((`$Decryptor.TransformFinalBlock(`$DecodeBytes, 16, (`$DecodeBytes.Length - 16))))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Encrypt String Data")
  [Void]$StringBuilder.AppendLine("    `$EncodeBytes = [System.Text.Encoding]::UTF8.GetBytes(`$String)")
  [Void]$StringBuilder.AppendLine("    `$Encryptor = `$Aes.CreateEncryptor()")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes = [System.Collections.ArrayList]::New(`$Aes.IV)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.AddRange(`$Encryptor.TransformFinalBlock(`$EncodeBytes, 0, `$EncodeBytes.Length))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedBytes)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedBytes.Clear()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Aes.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Encrypt-MySensitiveData")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Encrypt-MySensitiveData
  
  #region function Encrypt-WithCert
  
  [Void]$StringBuilder.AppendLine("#region function Encrypt-WithCert")
  [Void]$StringBuilder.AppendLine("Function Encrypt-WithCert ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts Text Data used Info from Cert")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts Text Data used Info from Cert")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CertKey")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Salt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Universal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with Local Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -Salt `$Salt -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with Universal Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -Salt `$Salt -Universal -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      # Encrypt with No Salt")
  [Void]$StringBuilder.AppendLine("      `$EncryptedText = Encrypt-WithCert -CertKey `$CeryKey -TextString `$TextString")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      2024-02-14 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NoSalt`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CertKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Salt,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"WithSalt`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Universal,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encrypt-WithCert`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Cert = Get-ChildItem -Path `"Cert:\LocalMachine\Root\`$(`$CertKey)`"")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"WithSalt`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$Universal.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter.ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpNotBefore = `$Cert.NotBefore")
  [Void]$StringBuilder.AppendLine("      `$TmpNotAfter = `$Cert.NotAfter")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = @(`$TmpNotBefore.ToString(`"yyyyMMddhhmmss`"), `$TmpNotBefore.ToString(`"hhmmssyyyyMMdd`"), `$TmpNotAfter.ToString(`"yyyyMMddhhmmss`"), `$TmpNotAfter.ToString(`"hhmmssyyyyMMdd`"))[`$Salt]")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SaltInit = `$Cert.Subject")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Encrypt-MySensitiveData -PassPhrase (`$Cert.SerialNumber) -Salt `$SaltInit -String `$TextString -Decrypt:(`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encrypt-WithCert`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encrypt-WithCert")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encrypt-WithCert
  
  #region function Encrypt-MyTextString
  [Void]$StringBuilder.AppendLine("#region function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("function Encrypt-MyTextString()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Encrypts a Password for use in a Script")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Encrypts a Password for use in a Script")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TextString")
  [Void]$StringBuilder.AppendLine("      Password to be Encrypted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProtectionScope")
  [Void]$StringBuilder.AppendLine("      Who can Decrypt")
  [Void]$StringBuilder.AppendLine("        Currentuser = = Specific User")
  [Void]$StringBuilder.AppendLine("        LocalMachine = = Any User")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncryptKey")
  [Void]$StringBuilder.AppendLine("      Option Extra Encryption Security")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decrypt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Encrypt-MyTextString -Password `"Password`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TextString,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"LocalMachine`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ProtectionScope = `"CurrentUser`",")
  [Void]$StringBuilder.AppendLine("    [String]`$EncryptKey = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decrypt")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Encrypt-MyTextString`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Security.Cryptography.ProtectedData`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Security`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"EncryptKey`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes(`$EncryptKey)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$OptionalEntropy = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Decrypt.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Convert]::FromBase64String(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect(`$EncryptedData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Text.Encoding]::ASCII.GetString(`$DecryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempData = [System.Text.Encoding]::ASCII.GetBytes(`$TextString)")
  [Void]$StringBuilder.AppendLine("    `$EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect(`$TempData, `$OptionalEntropy, ([System.Security.Cryptography.DataProtectionScope]`$ProtectionScope))")
  [Void]$StringBuilder.AppendLine("    [System.Convert]::ToBase64String(`$EncryptedData)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Encrypt-MyTextString`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Encrypt-MyTextString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Encrypt-MyTextString
  
  #region function Decode-MySecureString
  [Void]$StringBuilder.AppendLine("#region function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("function Decode-MySecureString ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Decodes a SecureString")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Decodes a SecureString")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SecureString")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Decode-MySecureString -SecureString [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Security.SecureString]`$SecureString")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-EnvironmentVariable`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$SecureString))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-EnvironmentVariable`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Decode-MySecureString")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Decode-MySecureString
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Encrypt / Encode Data Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Encrypt / Encode Data Functions ********
  
  #region ******* Logging / Events Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Write-MyLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogPath")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogFolder")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Context")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StackInfo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxSize")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OutHost")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorInfo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorGood")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorWarn")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ColorError")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Warning`" -Message `"This is My Warning Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Error`" -Message `"This is My Error Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"LogFolder`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = `"`$([System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName)).log`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SystemLog`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SystemLog,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Text`", `"Info`", `"Good`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [String]`$Component = `"`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Context = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Thread = `$PID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 16777216)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxSize = 52428800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$OutHost,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"LogFolder`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `$LogFolder")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"SystemLog`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$ENV:SystemRoot)\Logs\`$(`$LogFolder)`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$LogPath = `"`$(`$PSScriptRoot)\Logs`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (-not [System.IO.Directory]::Exists(`$LogPath))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.IO.Directory]::CreateDirectory(`$LogPath)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TempFile = `"`$(`$LogPath)\`$LogName`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 1")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 2")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempSeverity = 3")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempDate = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (-not `$PSBoundParameters.ContainsKey(`"Component`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempSource = [System.IO.Path]::GetFileName(`$MyInvocation.ScriptName)")
  [Void]$StringBuilder.AppendLine("    `$Component = [System.IO.Path]::GetFileNameWithoutExtension(`$TempSource)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$TempFile) -and `$MaxSize -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (([System.IO.FileInfo]`$TempFile).Length -gt `$MaxSize)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempBackup = [System.IO.Path]::ChangeExtension(`$TempFile, `"lo_`")")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-Item -Force -Path `$TempBackup")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Rename-Item -Force -Path `$TempFile -NewName ([System.IO.Path]::GetFileName(`$TempBackup))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$OutHost.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object `"`$(`$TempDate.ToString(`"yy-MM-dd HH:mm:ss`")) - `$(`$Message)`" -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Add-Content -Encoding Ascii -Path `$TempFile -Value (`"<![LOG[{0}]LOG]!><time=```"{1}```" date=```"{2}```" component=```"{3}```" context=```"{4}```" type=```"{5}```" thread=```"{6}```" file=```"{7}```">`" -f `$Message, `$(`$TempDate.ToString(`"HH:mm:ss.fff+000`")), `$(`$TempDate.ToString(`"MM-dd-yyyy`")), `$Component, `$Context, `$TempSeverity, `$Thread, `$TempSource)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyLogFile
  
  #region function Write-MyPipelineLogFile
  [Void]$StringBuilder.AppendLine("#region function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("function Write-MyPipelineLogFile()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Severity")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("      Write-MyPipelineLogFile -Severity `"Info`" -Message `"This is My Info Log File Message`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Info`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Severity = `"Info`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"`",")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorText = [ConsoleColor]::Gray,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorInfo = [ConsoleColor]::DarkCyan,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorGood = [ConsoleColor]::DarkGreen,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorWarn = [ConsoleColor]::DarkYellow,")
  [Void]$StringBuilder.AppendLine("    [ConsoleColor]`$ColorError = [ConsoleColor]::DarkRed")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Switch (`$Severity)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Text`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorText")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Info`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorInfo")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorGood")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warning`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`" {")
  [Void]$StringBuilder.AppendLine("      `$HostColor = `$ColorError")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Host -object `$Message -ForegroundColor `$HostColor")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyPipelineLogFile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-MyPipelineLogFile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-MyPipelineLogFile
  
  #region Create KPI Event Log
  [Void]$StringBuilder.AppendLine("#region Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("Try")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("  [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Refreshed on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("Catch")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  # Check if user has Local Admin Rights")
  [Void]$StringBuilder.AppendLine("  if (([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Event Log")
  [Void]$StringBuilder.AppendLine("    New-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`", `"Automation`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    # Write First Log Entry")
  [Void]$StringBuilder.AppendLine("    `$EventMessage = `"`$([MyConfig]::ScriptName)|`$([MyConfig]::ScriptVersion)|Event Log Created on `$([DateTime]::Now.ToShortDateString()) at `$([DateTime]::Now.ToShortTimeString())`"")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName ([MyConfig]::KPILogName) -Source `"Utility`" -EventId 0 -Category 0 -Message `$EventMessage -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = (@(Get-EventLog -LogName ([MyConfig]::KPILogName) -Newest 1 -ErrorAction SilentlyContinue).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Test if Event Log Exists")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::KPILogExists = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Create KPI Event Log")
  [Void]$StringBuilder.AppendLine("")
  #endregion Create KPI Event Log
  
  #region function Write-KPIEvent
  [Void]$StringBuilder.AppendLine("#region function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("function Write-KPIEvent ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes an Event to the PSJH KPI Event Log")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Writes an Event to the PSJH KPI Event Log")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptVersion")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LogName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Source")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryType")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Category")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Write-KPIEvent -Source `$Source -EntryType `$EntryType -EventID `$EventID -Category `$Category -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptName = [MyConfig]::ScriptName,")
  [Void]$StringBuilder.AppendLine("    [String]`$ScriptVersion = [MyConfig]::ScriptVersion,")
  [Void]$StringBuilder.AppendLine("    [String]`$LogName = [MyConfig]::KPILogName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Utility`", `"Automation`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Source,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Information`", `"Warning`", `"Error`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryType = `"Information`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$EventID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 32767)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Category = 0,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([MyConfig]::KPILogExists)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-EventLog -LogName `$LogName -Source `$Source -EntryType `$EntryType -EventId `$EventID -Category `$Category -Message `"`$(`$ScriptName)|`$(`$ScriptVersion)|`$(`$Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Write-KPIEvent`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Write-KPIEvent")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Write-KPIEvent
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Logging / Events Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Logging / Events Functions ********
  
  #region ******* Generic / General Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Invoke-MyPause
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Pause Script for Specified Number of Seconds")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Pause Script for Specified Number of Seconds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Seconds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyPause [-Seconds `$Seconds]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Int]`$Seconds = 60,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { `$True }")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("    `$WaitCheck = `$ScriptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$TmpPause.Elapsed.TotalSeconds -lt `$Seconds) -and `$WaitCheck)")
  [Void]$StringBuilder.AppendLine("  `$TmpPause.Stop()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyPause`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyPause")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyPause
  
  #region function Set-MyClipboard
  [Void]$StringBuilder.AppendLine("#region function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("Function Set-MyClipboard()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Copies Object Data to the ClipBoard")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Copies Object Data to the ClipBoard")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TitleBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PropertyBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowFore")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowEvenBack")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowOddBack")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyClipBoard -Items `$Items -Title `"This is My Title`" -Property `"Property1`", `"Property2`", `"Property3`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Office`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items,")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"My Copied Data from PowerShell`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$TitleBack = `"LightSteelBlue`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$PropertyBack = `"PowderBlue`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowFore = `"Black`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowEvenBack = `"White`",")
  [Void]$StringBuilder.AppendLine("    [String]`$RowOddBack = `"Gainsboro`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Init StringBuilding")
  [Void]$StringBuilder.AppendLine("    `$HTMLStringBuilder = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start HTML ClipBaord Data")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"Version:1.0``r``nStartHTML:000START``r``nEndHTML:00000END``r``nStartFragment:00FSTART``r``nEndFragment:0000FEND``r``n`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"000START`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<html><head><title>My Copied Data</title></head><body><!--StartFragment-->`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00FSTART`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Table Style")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<style>``r``n.Title{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$TitleFore); background: `$(`$TitleBack);}``r``n.Property{border: 1px solid black; border-collapse: collapse; font-weight: bold; text-align: center; color: `$(`$PropertyFore); background: `$(`$PropertyBack);}``r``n.Row0 {border: 1px solid black; border-collapse: collapse;color: `$(`$RowFore); background: `$(`$RowEvenBack);}``r``n.Row1 {border: 1px solid black; border-collapse: collapse; color: `$(`$RowFore); background: `$(`$RowOddBack);}``r``n</style>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start Build Table / Set Title")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<table><tr><th class=Title aligh=center colspan=`$(`$Properties.Count)>&nbsp;`$(`$Title)&nbsp;</th></tr>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Add Table Column / Property Names")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<tr>`$((`$Properties | ForEach-Object -Process { `"<td class=Property aligh=center>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join '')</tr>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Start Row Count")
  [Void]$StringBuilder.AppendLine("    `$TmpRowCount = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpItemList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item In `$Items)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$HTMLStringBuilder.Append(`"<tr>`$((((`$Properties | ForEach-Object -Process { `$Item.(`$PSItem) }) | ForEach-Object -Process { `"<td class=Row`$(`$TmpRowCount)>&nbsp;`$(`$PSItem)&nbsp;</td>`" }) -join ''))</tr>`")")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpItemList.Add((`$Item | Select-Object -Property `$Properties))")
  [Void]$StringBuilder.AppendLine("      `$TmpRowCount = (`$TmpRowCount + 1) % 2")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Close HTML Table")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"</table><br><br>`")")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Set End Clipboard Values")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"0000FEND`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<!--EndFragment--></body></html>`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00000END`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::Clear()")
  [Void]$StringBuilder.AppendLine("    `$DataObject = [System.Windows.Forms.DataObject]::New(`"Text`", (`$TmpItemList | Select-Object -Property `$Properties | ConvertTo-Csv -NoTypeInformation | Out-String))")
  [Void]$StringBuilder.AppendLine("    `$DataObject.SetData(`"HTML Format`", `$HTMLStringBuilder.ToString())")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Clipboard]::SetDataObject(`$DataObject)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyClipboard")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyClipboard
  
  #region function Send-MyEMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("function Send-MyEMail()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sends an E-mail")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sends an E-mail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPServer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SMTPPort")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MsgFile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IsHTML")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Priority")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SMTPServer = [MyConfig]::SMTPServer,")
  [Void]$StringBuilder.AppendLine("    [Int]`$SMTPPort = [MyConfig]::SMTPPort,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, HelpMessage = `"Enter To`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter From`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Subject`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Message Text`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$IsHTML,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.Attachment[]]`$Attachment,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailPriority]`$Priority = `"Normal`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage = [System.Net.Mail.MailMessage]::New()")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.From = `$From")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Subject = `$Subject")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.IsBodyHtml = `$IsHTML")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.Priority = `$Priority")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendCC in `$CC) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.CC.Add(`$SendCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$SendBCC in `$BCC) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.BCC.Add(`$SendBCC)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([System.IO.File]::Exists(`$Body)) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$([System.IO.File]::ReadAllText(`$Body))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.Body = `$Body")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Attachment`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$AttachedFile in `$Attachment) ")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$MyMessage.Attachments.Add(`$AttachedFile)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Begin`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$MyMessage.To.Clear()")
  [Void]$StringBuilder.AppendLine("    foreach (`$SendTo in `$To) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMessage.To.Add(`$SendTo)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient = [System.Net.Mail.SmtpClient]::New(`$SMTPServer, `$SMTPPort)")
  [Void]$StringBuilder.AppendLine("    `$SMTPClient.Send(`$MyMessage)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail End`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyEMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyEMail
  
  #region function Show-MyWebReport
  [Void]$StringBuilder.AppendLine("#region function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Show-MyWebReport -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      10/5/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ReportURL")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(([MyConfig]::EdgePath)))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(([MyConfig]::ChromePath)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Start-Process -FilePath ([MyConfig]::ChromePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Start-Process -FilePath ([MyConfig]::EdgePath) -ArgumentList `"--app=```"`$(`$ReportURL)```"`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-MyWebReport`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-MyWebReport")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyWebReport
  
  #region function Invoke-MyConCommand
  [Void]$StringBuilder.AppendLine("#region class MyConCommand")
  [Void]$StringBuilder.AppendLine("class MyConCommand")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Int]`$ExitCode")
  [Void]$StringBuilder.AppendLine("  [String]`$OutputTxt")
  [Void]$StringBuilder.AppendLine("  [String]`$ErrorMsg")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  MyConCommand ([Int]`$ExitCode, [String]`$OutputTxt, [String]`$ErrorMsg)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ExitCode = `$ExitCode")
  [Void]$StringBuilder.AppendLine("    `$This.OutputTxt = `$OutputTxt")
  [Void]$StringBuilder.AppendLine("    `$This.ErrorMsg = `$ErrorMsg")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("function Invoke-MyConCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Invokes a Console Command and Returns the Exit Code")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Invokes a Console Command and Returns the Exit Code")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to be Executed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Command line Parameters")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Invoke-MyConCommand -Command `"C:\Windows\System32\cmd.exe`" -Parameters `"/c Exit 1`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      09/19/2023 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command,")
  [Void]$StringBuilder.AppendLine("    [String]`$Parameters = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if ([System.IO.File]::Exists(`$Command))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PSI = [System.Diagnostics.ProcessStartInfo]::New(`$Command, `$Parameters)")
  [Void]$StringBuilder.AppendLine("    `$PSI.UseShellExecute = `$False")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardError = `$True")
  [Void]$StringBuilder.AppendLine("    `$PSI.RedirectStandardOutput = `$True")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Out = [System.Diagnostics.Process]::Start(`$PSI)")
  [Void]$StringBuilder.AppendLine("      `$Out.WaitForExit()")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(`$Out.ExitCode, `$Out.StandardOutput.ReadToEnd(), `$Out.StandardError.ReadToEnd())")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [MyConCommand]::New(-2, `$Null, `$Error[0].Message)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [MyConCommand]::New(-1, `$Null, `"Command was not Found`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Invoke-MyConCommand`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Invoke-MyConCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Invoke-MyConCommand
  
  #region function Test-MyClassLoaded
  [Void]$StringBuilder.AppendLine("#region function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("function Test-MyClassLoaded()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test if Custom Class is Loaded")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Custom Class")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$IsLoaded = Test-MyClassLoaded -Name `"CustomClass`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`$Name)).Type))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-MyClassLoaded`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-MyClassLoaded")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Test-MyClassLoaded
  
  #region function New-MyComObject
  [Void]$StringBuilder.AppendLine("#region function New-MyComObject")
  [Void]$StringBuilder.AppendLine("function New-MyComObject()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates Local and Remote COMObjects")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates Local and Remote COMObjects")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComObject")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -ComObject <String>")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MyComObject -ComputerName <String> -ComObject <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$COMObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Activator]::CreateInstance([Type]::GetTypeFromProgID(`$COMObject, `$ComputerName))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MyComObject`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MyComObject")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MyComObject
  
  #region function ConvertTo-MyIconImage
  [Void]$StringBuilder.AppendLine("#region function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("function ConvertTo-MyIconImage()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Convert Base 64 Encoded Imagesback to Icon / Image")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Convert Base 64 Encoded Imagesback to Icon / Image")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EncodedImage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = ConvertTo-MyIconImage -EncodedImage `$EncodedImage -Image")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EncodedImage,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Image")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Image.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$EncodedImage)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function ConvertTo-MyIconImage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function ConvertTo-MyIconImage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function ConvertTo-MyIconImage
  
  #region function Send-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Send-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Text Message to Remote or Local Computer or IP Address")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Text Message to Remote or Local Computer or IP Address")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      255.255.255.255 = Broadcast")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyTextMessage -Mesage [<String>]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"This is My Message`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$MessageBytes = [Text.Encoding]::ASCII.GetBytes(`"`$(`$Message)`")")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Send(`$MessageBytes, `$MessageBytes.Length, `$RemoteClient)")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Close()")
  [Void]$StringBuilder.AppendLine("  `$UDPClient.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Send-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyTextMessage
  
  #region function Listen-MyTextMessage
  [Void]$StringBuilder.AppendLine("#region function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("function Listen-MyTextMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Listen for Text Message from Remote or Local Computer")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Listen for Text Message from Remote or Local Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IPAddress")
  [Void]$StringBuilder.AppendLine("      0.0.0.0 = Any")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"IPAddress`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.IPAddress]`$IPAddress = `"127.0.0.1`",")
  [Void]$StringBuilder.AppendLine("    [int]`$Port = 2500")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"IPAddress`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New(`$IPAddress, `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RemoteClient = [System.Net.IPEndPoint]::New((([System.Net.Dns]::GetHostByName(`$ComputerName)).AddressList[0]), `$Port)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$UDPClient = [System.Net.Sockets.UdpClient]::New(`$Port)")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempRemoteClient = `$RemoteClient")
  [Void]$StringBuilder.AppendLine("    `$Message = `$UDPClient.Receive([ref]`$TempRemoteClient)")
  [Void]$StringBuilder.AppendLine("    `$DecodedMessage = [Text.Encoding]::ASCII.GetString(`$Message)")
  [Void]$StringBuilder.AppendLine("    Write-Host -Object  `"Message From: `$(`$TempRemoteClient.Address) - `$(`$DecodedMessage)`"")
  [Void]$StringBuilder.AppendLine("  } While (`$True -and (`$DecodedMessage -ne `"Exit`"))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit function Listen-MyTextMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Listen-MyTextMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Listen-MyTextMessage
 
  #region ******** class TestMyWorkstation ********
  [Void]$StringBuilder.AppendLine("#region ******** class TestMyWorkstation ********")
  [Void]$StringBuilder.AppendLine("class TestMyWorkstation")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [String]`$FQDN = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Found = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$DomainMember = `$False")
  [Void]$StringBuilder.AppendLine("  [int]`$ProductType = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Model = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsMobile = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [Long]`$Memory = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$OperatingSystem = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$BuildNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Version = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$ServicePack = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Architecture = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Is64Bit = `$False;")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LocalDateTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$InstallDate = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LastBootUpTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [String]`$IPAddress = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Status = `"Off-Line`"")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  TestMyWorkstation ([String]`$IPAddress)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddComputerSystem ([String]`$TestName, [String]`$ComputerName, [Bool]`$DomainMember, [String]`$Domain, [String]`$Manufacturer, [String]`$Model, [String]`$UserName, [Long]`$Memory)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `"`$(`$ComputerName)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    `$This.DomainMember = `$DomainMember")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `"`$(`$Domain)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    if (`$DomainMember)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.FQDN = `"`$(`$ComputerName).`$(`$Domain)`".ToLower()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    `$This.Memory = `$Memory")
  [Void]$StringBuilder.AppendLine("    `$This.Found = (`$ComputerName -eq @(`$TestName.Split(`".`"))[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddOperatingSystem ([int]`$ProductType, [String]`$OperatingSystem, [String]`$ServicePack, [String]`$BuildNumber, [String]`$Version, [String]`$Architecture, [DateTime]`$LocalDateTime, [DateTime]`$InstallDate, [DateTime]`$LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ProductType = `$ProductType")
  [Void]$StringBuilder.AppendLine("    `$This.OperatingSystem = `$OperatingSystem")
  [Void]$StringBuilder.AppendLine("    `$This.ServicePack = `$ServicePack")
  [Void]$StringBuilder.AppendLine("    `$This.BuildNumber = `$BuildNumber")
  [Void]$StringBuilder.AppendLine("    `$This.Version = `$Version")
  [Void]$StringBuilder.AppendLine("    `$This.Architecture = `$Architecture")
  [Void]$StringBuilder.AppendLine("    `$This.Is64Bit = (`$Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("    `$This.LocalDateTime = `$LocalDateTime")
  [Void]$StringBuilder.AppendLine("    `$This.InstallDate = `$InstallDate")
  [Void]$StringBuilder.AppendLine("    `$This.LastBootUpTime = `$LastBootUpTime")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddSerialNumber ([String]`$SerialNumber)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddIsMobile ([Long[]]`$ChassisTypes)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains `$ChassisTypes[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] UpdateStatus ([String]`$Status)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `$Status")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [TestMyWorkstation] SetEndTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    return `$This")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [TimeSpan] GetRunTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    return (`$This.EndTime - `$This.StartTime)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** class TestMyWorkstation ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** class TestMyWorkstation ********
  
  #region function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("#region function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("function Test-MyWorkstation()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("        `"Credential`"   = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    foreach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("          :FoundMyWork foreach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            if ([System.Net.NetworkInformation.Ping]::New().Send(`$IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject = [TestMyWorkstation]::New(`$IPAddress)")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Get ComputerSystem")
  [Void]$StringBuilder.AppendLine("              [Void](`$MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject.AddComputerSystem(`$Computer, (`$MyCompData.Name), (`$MyCompData.PartOfDomain), (`$MyCompData.Domain), (`$MyCompData.Manufacturer), (`$MyCompData.Model), (`$MyCompData.UserName), (`$MyCompData.TotalPhysicalMemory))")
  [Void]$StringBuilder.AppendLine("              `$MyCompData.Dispose()")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("              if (`$VerifyObject.Found)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyOSData = Get-WmiObject @Params -ClassName Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.AddOperatingSystem((`$MyOSData.ProductType), (`$MyOSData.Caption), (`$MyOSData.CSDVersion), (`$MyOSData.BuildNumber), (`$MyOSData.Version), (`$MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)))")
  [Void]$StringBuilder.AppendLine("                `$MyOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyBIOSData = Get-WmiObject @Params -ClassName Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddSerialNumber(`$MyBIOSData.SerialNumber)")
  [Void]$StringBuilder.AppendLine("                  `$MyBIOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyChassisData = Get-WmiObject @Params -ClassName Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddIsMobile(`$MyChassisData.ChassisTypes)")
  [Void]$StringBuilder.AppendLine("                  `$MyChassisData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              else")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.UpdateStatus(`"Wrong Workstation Name`")")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("              break FoundMyWork")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.UpdateStatus(`"Workstation Not in DNS`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.UpdateStatus(`"Invalid Computer Name`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set End Time and Return Results")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject.SetEndTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  end")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Test-MyWorkstation
  
  #region class MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("Class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [String]`$FQDN = [Environment]::MachineName")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Found = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$UserName = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Domain = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$DomainMember = `$False")
  [Void]$StringBuilder.AppendLine("  [int]`$ProductType = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Model = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$IsMobile = `$False")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [Long]`$Memory = 0")
  [Void]$StringBuilder.AppendLine("  [String]`$OperatingSystem = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$BuildNumber = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Version = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$ServicePack = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Architecture = `"`"")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Is64Bit = `$False;")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LocalDateTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$InstallDate = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$LastBootUpTime = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("  [String]`$IPAddress = `"`"")
  [Void]$StringBuilder.AppendLine("  [String]`$Status = `"Off-Line`"")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  [DateTime]`$EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  MyWorkstationInfo ([String]`$ComputerName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.FQDN = `$ComputerName.ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddComputerSystem ([String]`$TestName, [String]`$IPAddress, [String]`$ComputerName, [Bool]`$DomainMember, [String]`$Domain, [String]`$Manufacturer, [String]`$Model, [String]`$UserName, [Long]`$Memory)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `"`$(`$ComputerName)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    `$This.DomainMember = `$DomainMember")
  [Void]$StringBuilder.AppendLine("    `$This.Domain = `"`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    If (`$DomainMember)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$This.FQDN = `"`$(`$ComputerName).`$(`$Domain)`".ToUpper()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.UserName = `$UserName")
  [Void]$StringBuilder.AppendLine("    `$This.Memory = `$Memory")
  [Void]$StringBuilder.AppendLine("    `$This.Found = (`$ComputerName -eq @(`$TestName.Split(`".`"))[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddOperatingSystem ([int]`$ProductType, [String]`$OperatingSystem, [String]`$ServicePack, [String]`$BuildNumber, [String]`$Version, [String]`$Architecture, [DateTime]`$LocalDateTime, [DateTime]`$InstallDate, [DateTime]`$LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ProductType = `$ProductType")
  [Void]$StringBuilder.AppendLine("    `$This.OperatingSystem = `$OperatingSystem")
  [Void]$StringBuilder.AppendLine("    `$This.ServicePack = `$ServicePack")
  [Void]$StringBuilder.AppendLine("    `$This.BuildNumber = `$BuildNumber")
  [Void]$StringBuilder.AppendLine("    `$This.Version = `$Version")
  [Void]$StringBuilder.AppendLine("    `$This.Architecture = `$Architecture")
  [Void]$StringBuilder.AppendLine("    `$This.Is64Bit = (`$Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("    `$This.LocalDateTime = `$LocalDateTime")
  [Void]$StringBuilder.AppendLine("    `$This.InstallDate = `$InstallDate")
  [Void]$StringBuilder.AppendLine("    `$This.LastBootUpTime = `$LastBootUpTime")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddSerialNumber ([String]`$SerialNumber)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] AddIsMobile ([Long[]]`$ChassisTypes)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.IsMobile = (@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains `$ChassisTypes[0])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void] UpdateStatus ([String]`$Status)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Status = `$Status")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [MyWorkstationInfo] SetEndTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.EndTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("    Return `$This")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [TimeSpan] GetRunTime ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Return (`$This.EndTime - `$This.StartTime)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion class MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion class MyWorkstationInfo
  
  #region function Get-MyWorkstationInfo
  [Void]$StringBuilder.AppendLine("#region function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("Function Get-MyWorkstationInfo()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyWorkstationInfo -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("        `"Credential`"   = `$Credential")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Params = @{")
  [Void]$StringBuilder.AppendLine("        `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer In `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject = [MyWorkstationInfo]::New(`$Computer)")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # Validate ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("          :FoundMyWork ForEach (`$IPAddress In `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            If ([System.Net.NetworkInformation.Ping]::New().Send(`$IPAddress).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # Set Default Parms")
  [Void]$StringBuilder.AppendLine("              `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Get ComputerSystem")
  [Void]$StringBuilder.AppendLine("              [Void](`$MyCompData = Get-WmiObject @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("              `$VerifyObject.AddComputerSystem(`$Computer, `$IPAddress, (`$MyCompData.Name), (`$MyCompData.PartOfDomain), (`$MyCompData.Domain), (`$MyCompData.Manufacturer), (`$MyCompData.Model), (`$MyCompData.UserName), (`$MyCompData.TotalPhysicalMemory))")
  [Void]$StringBuilder.AppendLine("              `$MyCompData.Dispose()")
  [Void]$StringBuilder.AppendLine("              ")
  [Void]$StringBuilder.AppendLine("              # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("              If (`$VerifyObject.Found)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyOSData = Get-WmiObject @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.AddOperatingSystem((`$MyOSData.ProductType), (`$MyOSData.Caption), (`$MyOSData.CSDVersion), (`$MyOSData.BuildNumber), (`$MyOSData.Version), (`$MyOSData.OSArchitecture), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)), ([System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)))")
  [Void]$StringBuilder.AppendLine("                `$MyOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                If (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyBIOSData = Get-WmiObject @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddSerialNumber(`$MyBIOSData.SerialNumber)")
  [Void]$StringBuilder.AppendLine("                  `$MyBIOSData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                ")
  [Void]$StringBuilder.AppendLine("                # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                If (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                  [Void](`$MyChassisData = Get-WmiObject @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.AddIsMobile(`$MyChassisData.ChassisTypes)")
  [Void]$StringBuilder.AppendLine("                  `$MyChassisData.Dispose()")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              Else")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.UpdateStatus(`"Wrong Workstation Name`")")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("              Break FoundMyWork")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.UpdateStatus(`"Workstation Not in DNS`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.UpdateStatus(`"Invalid Computer Name`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # Set End Time and Return Results")
  [Void]$StringBuilder.AppendLine("      `$VerifyObject.SetEndTime()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo - Process`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyWorkstationInfo`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyWorkstationInfo")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyWorkstationInfo
  
  #region function Get-MyNetAdapterConStatus
  [Void]$StringBuilder.AppendLine("#region function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("function Get-MyNetAdapterConStatus ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyNetAdapterConStatus -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      2022/07/05 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PhysicalMediumTypeList = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\WMI`" -Query `"Select InstanceName, NdisPhysicalMediumType From MSNdis_PhysicalMediumType Where Active = 1`" | Select-Object -Property InstanceName, NdisPhysicalMediumType)")
  [Void]$StringBuilder.AppendLine("  `$NetworkAdapters = @(Get-WmiObject -ComputerName `$ComputerName -Credential `$Credential -Namespace `"Root\CimV2`" -Query `"Select Name from Win32_NetworkAdapter Where NetConnectionStatus = 2`" | Select-Object -ExpandProperty Name)")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject][ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"Wired`" = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 0) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    `"Wireless`" = (@(`$PhysicalMediumTypeList | Where-Object -FilterScript { (`$PSItem.NdisPhysicalMediumType -eq 9) -and (`$PSItem.InstanceName -in `$NetworkAdapters) }).Count -gt 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyNetAdapterConStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyNetAdapterConStatus")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyNetAdapterConStatus
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Generic / General Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Generic / General Functions ********
  
  #region ******* Registry / Environement Variable Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Reset-MyRegKeyOwner
  [Void]$StringBuilder.AppendLine("#region function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("function Reset-MyRegKeyOwner ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Take Ownership of a Registry Key and Reset Access Rules")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Take Ownership of a Registry Key and Reset Access Rules")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Win32.RegistryKey]`$Hive = [Microsoft.Win32.Registry]::LocalMachine,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Key,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ResetAccess,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Recurse")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$User.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-545`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$NewOwner = [System.Security.Principal.SecurityIdentifier]::New(`"S-1-5-32-544`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Key: `$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("  `$TempKey = `$Hive.OpenSubKey(`$Key, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::TakeOwnership)")
  [Void]$StringBuilder.AppendLine("  `$ACL = [System.Security.AccessControl.RegistrySecurity]::New()")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetOwner(`$NewOwner)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  `$ACL.SetAccessRuleProtection(`$False, `$False)")
  [Void]$StringBuilder.AppendLine("  `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ResetAccess.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, [System.Security.AccessControl.RegistryRights]::ChangePermissions)")
  [Void]$StringBuilder.AppendLine("    `$Rule = [System.Security.AccessControl.RegistryAccessRule]::New(`$NewOwner, [System.Security.AccessControl.RegistryRights]::FullControl, [System.Security.AccessControl.InheritanceFlags]::ContainerInherit, [System.Security.AccessControl.PropagationFlags]::None, [System.Security.AccessControl.AccessControlType]::Allow)")
  [Void]$StringBuilder.AppendLine("    `$ACL.ResetAccessRule(`$Rule)")
  [Void]$StringBuilder.AppendLine("    `$TempKey.SetAccessControl(`$ACL)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Recurse.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"Key`")")
  [Void]$StringBuilder.AppendLine("    [Void]`$PSBoundParameters.Remove(`"ResetAccess`")")
  [Void]$StringBuilder.AppendLine("    `$TempKey = `$TempKey.OpenSubKey(`"`")")
  [Void]$StringBuilder.AppendLine("    foreach (`$SubKey in @(`$TempKey.GetSubKeyNames()))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Reset-MyRegKeyOwner @PSBoundParameters -Key `"`$(`$Key)\`$(`$SubKey)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Reset-MyRegKeyOwner`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Reset-MyRegKeyOwner")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Reset-MyRegKeyOwner
  
  #region function Set-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Set-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Writes Script Data to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to write the values under. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      The Data to write")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MultiValue")
  [Void]$StringBuilder.AppendLine("      Write Multiple values to the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Write to the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Write to the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value `"Value`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value @(`"This`", `"That`") -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ")
  [Void]$StringBuilder.AppendLine("      Use @() or (,) when specifing the Value paramter value")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value (,8) -Bitness `"64`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Number arrays are written to the registry as strings.")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value 0 -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyISScriptData -MultiValue @{`"Name`" = `"MyName`"; `"Number`" = 4; `"Array`" = @(`"First`", 2, `"3rd`", 4)} -Computer -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Object]`$Value,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$MultiValue,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"CompMulti`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Create the Registry Keys if Needed.")
  [Void]$StringBuilder.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `$RegPath -Name `"MyISScriptData`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Error Creating Registry Key : MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`")))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](New-Item -Path `"`$RegPath\MyISScriptData`" -Name `$Script)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Throw `"Error Creating Registry Key : `$Script`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Write the values to the registry.")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Multi`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$MultiValue.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$MultiValue[`$Key] -is [Array])")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = [String[]]`$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Data = `$MultiValue[`$Key]")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Key -Value `$Data)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Default")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Value -is [Array])")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = [String[]]`$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Name -Value `$Data)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Set-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyISScriptData
  
  #region function Get-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Get-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Get-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Reads Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to read the values from. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("     Name of the Value to read")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Read from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Read from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the HKCU Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Bitness `"32`" -Script `"ScriptName`" -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"64`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Path")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -eq `"64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RegPath = `"Registry::HKEY_CURRENT_USER\Software`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get the values from the registry.")
  [Void]$StringBuilder.AppendLine("  Get-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`" | Select-Object -Property `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyISScriptData
  
  #region function Remove-MyISScriptData
  [Void]$StringBuilder.AppendLine("#region function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("function Remove-MyISScriptData()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes Script Data from the Registry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Script")
  [Void]$StringBuilder.AppendLine("     Name of the Regsitry Key to remove. Defaults to the name of the script.")
  [Void]$StringBuilder.AppendLine("    .PARAMETER User")
  [Void]$StringBuilder.AppendLine("      Remove from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computer")
  [Void]$StringBuilder.AppendLine("      Remove from the HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Bitness")
  [Void]$StringBuilder.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -User -Script `"ScriptName`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the HKCU Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the default script registry key from the 32/64 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyISScriptData -Computer -Script `"ScriptName`" -Bitness `"32`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$User,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Computer,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Bitness = `"All`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Default Registry Paths")
  [Void]$StringBuilder.AppendLine("  `$RegPaths = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$Computer.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|32`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$Bitness -match `"All|64`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Remove the values from the registry.")
  [Void]$StringBuilder.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void](Remove-Item -Path `"`$RegPath\MyISScriptData\`$Script`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyISScriptData`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyISScriptData")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyISScriptData
  
  #region function Get-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Get-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable = `"%`",")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name like '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      Get-CimInstance -CimSession (New-CimSession @SessionParams) -Query `$Query")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-EnvironmentVariable
  
  #region function Set-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Set-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$Value,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if ([String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        New-CimInstance -CimSession `$CimSession -ClassName Win32_Environment -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value; `"UserName`" = `$UserName }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Set-CimInstance -InputObject `$Instance -Property @{ `"Name`" = `$Variable; `"VariableValue`" = `$Value } -PassThru")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-EnvironmentVariable
  
  #region function Remove-EnvironmentVariable
  [Void]$StringBuilder.AppendLine("#region function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("function Remove-EnvironmentVariable()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-EnvironmentVariable -Variable <String>")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Variable,")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$SessionParams = @{")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`" = `"`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$SessionParms.Add(`"Credential`", `$Credential)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$SessionParams.ComputerName = `$Computer")
  [Void]$StringBuilder.AppendLine("      `$CimSession = New-CimSession @SessionParams")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty((`$Instance = Get-CimInstance -CimSession `$CimSession -Query `$Query)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Remove-CimInstance -InputObject `$Instance")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CimSession.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-EnvironmentVariable")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-EnvironmentVariable
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Registry / Environement Variable Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Registry / Environement Variable Functions ********
  
  #region ******* Import / Install Module Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Install-MyPackageProvider
  [Void]$StringBuilder.AppendLine("#region function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("function Install-MyPackageProvider ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Installs the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Installs the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      The Name of the PackageProvider")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyPackageProvider -Name `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$CommonParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Install-PackageProvider @CommonParams -Scope `$Scope -MinimumVersion `"`$(`$Version)`" -Force | Out-Null")
  [Void]$StringBuilder.AppendLine("      if (@(Get-PackageProvider @CommonParams -ListAvailable | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1).Version -lt `$Version)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$True; `"Restart`" = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      @{ `"Success`" = `$False; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = `$True; `"Restart`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyPackageProvider`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyPackageProvider")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyPackageProvider
  
  #region function Install-MyModule
  [Void]$StringBuilder.AppendLine("#region function Install-MyModule")
  [Void]$StringBuilder.AppendLine("Function Install-MyModule ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Checks for, and Installs if Required, and Imports the Specified Module")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Checks for, and Installs if Required, and Imports the Specified Module")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Repository")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Install")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MyModule -Name `$Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      12/09/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("      02/28/2024 - Update Parameters, Add Repository, Remove AcceptLicense")
  [Void]$StringBuilder.AppendLine("      05/23/2024 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Version]`$Version = `"0.0.0.0`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"AllUsers`", `"CurrentUser`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"AllUsers`",")
  [Void]$StringBuilder.AppendLine("    [String]`$Repository = `"sie-powershell`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Install,")
  [Void]$StringBuilder.AppendLine("    [String]`$SourceLocation = `"https://artifactory.providence.org/artifactory/api/nuget/sie-powershell`",")
  [Void]$StringBuilder.AppendLine("    [String]`$PublishLocation = `"https://artifactory.providence.org/artifactory/api/nuget/sie-powershell-local`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Zero Verion for Checks")
  [Void]$StringBuilder.AppendLine("  `$ZeroVersion = [Version]::new(0, 0, 0, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Get Module Common Parameters")
  [Void]$StringBuilder.AppendLine("  `$GMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Install Module Parameters")
  [Void]$StringBuilder.AppendLine("  `$IMParams = @{")
  [Void]$StringBuilder.AppendLine("    `"Name`"          = `$Name")
  [Void]$StringBuilder.AppendLine("    `"WarningAction`" = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"ErrorAction`"   = `"SilentlyContinue`"")
  [Void]$StringBuilder.AppendLine("    `"Verbose`"       = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Version`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IMParams.Add(`"RequiredVersion`", `$Version)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check if Module is Already Imported")
  [Void]$StringBuilder.AppendLine("  `$ChkInstalled = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Installed Module Versions")
  [Void]$StringBuilder.AppendLine("    `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If (((([Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -and (`$Scope -eq `"AllUsers`")) -or (`$Scope -eq `"CurrentUser`")) -and `$Install.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Check if Repo Exists")
  [Void]$StringBuilder.AppendLine("        `$ChkRepo = Get-PSRepository -Name `$Repository -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkRepo.Name))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Add Custom Repo")
  [Void]$StringBuilder.AppendLine("          Register-PSRepository -Name `$Repository -SourceLocation `$SourceLocation -PublishLocation `$PublishLocation -InstallationPolicy `"Trusted`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Install / Update Module")
  [Void]$StringBuilder.AppendLine("        Install-Module @IMParams -Repository `$Repository -Scope `$Scope -Force -AllowClobber | Out-Null")
  [Void]$StringBuilder.AppendLine("        If (`$Repository -ne `"PSGallery`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Remove Custom Repo")
  [Void]$StringBuilder.AppendLine("          Unregister-PSRepository -Name `$Repository")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ChkInstalled = Get-InstalledModule @GMParams -AllVersions | Where-Object -FilterScript { (`$PSItem.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion) } | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$ChkInstalled.Version))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Module Installed Failed")
  [Void]$StringBuilder.AppendLine("          [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install Failed`" }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Import Module")
  [Void]$StringBuilder.AppendLine("          Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("          # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("          `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("          If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Module Install / Import Succeeded")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Install / Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("            [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Failed`" }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Install / Import Failed")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Install / Import Not Installed`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Import Module")
  [Void]$StringBuilder.AppendLine("      Import-Module @IMParams")
  [Void]$StringBuilder.AppendLine("      # Verify Imported Module")
  [Void]$StringBuilder.AppendLine("      `$ChkImported = Get-Module @GMParams | Sort-Object -Property Version -Descending | Select-Object -Property Version -First 1")
  [Void]$StringBuilder.AppendLine("      If (`$ChkImported.Version -eq `$ChkInstalled.Version)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Import Succeeded")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Module Import Succeeded`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module Import Failed")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Module Import Failed`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Module Previously Imported")
  [Void]$StringBuilder.AppendLine("    If ((`$ChkInstalled.Version -eq `$Version) -or (`$Version -eq `$ZeroVersion))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Correct Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Message`" = `"Correct Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Wrong Module Version Imported")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Wrong Version Previously Loaded`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MyModule`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MyModule")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MyModule
  
  #region function Install-MSALPS
  [Void]$StringBuilder.AppendLine("#region function Install-MSALPS")
  [Void]$StringBuilder.AppendLine("function Install-MSALPS ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Install-MSALPS")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Installs the Microsoft MSAL.PS Module")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/21/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("      8/19/2021 - Change Write-Hosts to Status Messages")
  [Void]$StringBuilder.AppendLine("      12/24/2021 - Update / ReWrite")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Install-MSALPS`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ((Install-MyModule -Name `"MSAL.PS`" -Version `"2.0.0.0`" -Scope `"AllUsers`").Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If ((Install-MyPackageProvider -Name `"NuGet`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install).Success)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If ((Install-MyModule -Name `"MSAL.PS`" -Version `"2.0.0.0`" -Scope `"AllUsers`" -Install).Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Module MSAL.PS")
  [Void]$StringBuilder.AppendLine("        @{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # PackageProvider NuGet")
  [Void]$StringBuilder.AppendLine("      @{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Install-MSALPS`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Install-MSALPS")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Install-MSALPS
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Import / Install Module Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Import / Install Module Functions ********
  
  #region ******** Microsoft GraphAPI Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-UserToken
  [Void]$StringBuilder.AppendLine("#region function Get-UserToken")
  [Void]$StringBuilder.AppendLine("function Get-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -Interactive -ClientId `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`") -ExtraQueryParameters @{claims = '{`"access_token`" : {`"amr`": { `"values`": [`"mfa`"] }}}' }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UserToken
  
  #region function Refresh-UserToken
  [Void]$StringBuilder.AppendLine("#region function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("function Refresh-UserToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Refresh Users GraphAPI AuthToken")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MsResponse = Get-MSALToken -ForceRefresh -ClientId `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`" -RedirectUri `"urn:ietf:wg:oauth:2.0:oob`" -Authority `"https://login.microsoftonline.com/common`" -Scopes @(`"https://graph.microsoft.com/.default`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  @{")
  [Void]$StringBuilder.AppendLine("    `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Bearer `$(`$MsResponse.AccessToken)`"")
  [Void]$StringBuilder.AppendLine("    `"ExpiresOn`"     = (`$MsResponse.ExpiresOn.LocalDateTime.ToString())")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Refresh-UserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Refresh-UserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Refresh-UserToken
  
  #region function Get-MyOAuthApplicationToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Application OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Application OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyOAuthApplicationToken -TenantID `$TenantID -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"New`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("    `"Scope`"         = `$Scope")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = Invoke-RestMethod -Uri `$Uri -Body `$Body -Method Post -ContentType `"application/x-www-form-urlencoded`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$AuthResult = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Successful Authentication")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthApplicationToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthApplicationToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthApplicationToken
  
  #region function Get-MyOAuthCertToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Certificate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Certificate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Certificate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthCertToken -TenantID `$TenantID -ClientID `$ClientID -Certificate `$Certificate")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Certificate,")
  [Void]$StringBuilder.AppendLine("    [String]`$Scope = `"https://graph.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Cert = Get-Item -Path `"Cert:\CurrentUser\My\`$(`$Certificate)`")))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create base64 hash of certificate")
  [Void]$StringBuilder.AppendLine("    `$CertHash = [System.Convert]::ToBase64String(`$Cert.GetCertHash()) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT timestamp for expiration")
  [Void]$StringBuilder.AppendLine("    `$StartDate = (Get-Date -Date `"1970-01-01T00:00:00Z`").ToUniversalTime()")
  [Void]$StringBuilder.AppendLine("    `$JWTExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End (Get-Date).ToUniversalTime().AddMinutes(2)).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$JWTExpiration = [math]::Round(`$JWTExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT validity start timestamp")
  [Void]$StringBuilder.AppendLine("    `$NotBeforeExpirationTimeSpan = (New-TimeSpan -Start `$StartDate -End ((Get-Date).ToUniversalTime())).TotalSeconds")
  [Void]$StringBuilder.AppendLine("    `$NotBefore = [math]::Round(`$NotBeforeExpirationTimeSpan, 0)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT header")
  [Void]$StringBuilder.AppendLine("    `$JWTHeader = @{")
  [Void]$StringBuilder.AppendLine("      alg = `"RS256`"")
  [Void]$StringBuilder.AppendLine("      typ = `"JWT`"")
  [Void]$StringBuilder.AppendLine("      # Use the CertHash and replace/strip to match web encoding of base64")
  [Void]$StringBuilder.AppendLine("      x5t = `$CertHash")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Convert header and payload to base64")
  [Void]$StringBuilder.AppendLine("    `$JWTHeaderToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTHeader | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedHeader = [System.Convert]::ToBase64String(`$JWTHeaderToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create JWT payload")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoad = @{")
  [Void]$StringBuilder.AppendLine("      # What endpoint is allowed to use this JWT")
  [Void]$StringBuilder.AppendLine("      aud = `"https://login.microsoftonline.com/`$TenantID/oauth2/token`"")
  [Void]$StringBuilder.AppendLine("      # Expiration timestamp")
  [Void]$StringBuilder.AppendLine("      exp = `$JWTExpiration")
  [Void]$StringBuilder.AppendLine("      # Issuer = your application")
  [Void]$StringBuilder.AppendLine("      iss = `$ClientID")
  [Void]$StringBuilder.AppendLine("      # JWT ID: random guid")
  [Void]$StringBuilder.AppendLine("      jti = [guid]::NewGuid()")
  [Void]$StringBuilder.AppendLine("      # Not to be used before")
  [Void]$StringBuilder.AppendLine("      nbf = `$NotBefore")
  [Void]$StringBuilder.AppendLine("      # JWT Subject")
  [Void]$StringBuilder.AppendLine("      sub = `$ClientID")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$JWTPayLoadToByte = [System.Text.Encoding]::UTF8.GetBytes((`$JWTPayload | ConvertTo-Json))")
  [Void]$StringBuilder.AppendLine("    `$EncodedPayload = [System.Convert]::ToBase64String(`$JWTPayLoadToByte)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join header and Payload with `".`" to create a valid (unsigned) JWT")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$EncodedHeader + `".`" + `$EncodedPayload")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Define RSA signature and hashing algorithm")
  [Void]$StringBuilder.AppendLine("    `$RSAPadding = [Security.Cryptography.RSASignaturePadding]::Pkcs1")
  [Void]$StringBuilder.AppendLine("    `$HashAlgorithm = [Security.Cryptography.HashAlgorithmName]::SHA256")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a signature of the JWT")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$Cert.PrivateKey.SignData([System.Text.Encoding]::UTF8.GetBytes(`$JWT), `$HashAlgorithm, `$RSAPadding)) -replace '\+', '-' -replace '/', '_' -replace '='")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Join the signature to the JWT with `".`"")
  [Void]$StringBuilder.AppendLine("    `$JWT = `$JWT + `".`" + `$Signature")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create a hash with body parameters")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      client_id             = `$ClientID")
  [Void]$StringBuilder.AppendLine("      client_assertion      = `$JWT")
  [Void]$StringBuilder.AppendLine("      client_assertion_type = `"urn:ietf:params:oauth:client-assertion-type:jwt-bearer`"")
  [Void]$StringBuilder.AppendLine("      scope                 = `$Scope")
  [Void]$StringBuilder.AppendLine("      grant_type            = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Use the self-generated JWT as Authorization")
  [Void]$StringBuilder.AppendLine("    `$Header = @{")
  [Void]$StringBuilder.AppendLine("      Authorization = `"Bearer `$JWT`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Splat the parameters for Invoke-Restmethod for cleaner code")
  [Void]$StringBuilder.AppendLine("    `$PostSplat = @{")
  [Void]$StringBuilder.AppendLine("      ContentType = 'application/x-www-form-urlencoded'")
  [Void]$StringBuilder.AppendLine("      Method      = 'POST'")
  [Void]$StringBuilder.AppendLine("      Body        = `$Body")
  [Void]$StringBuilder.AppendLine("      Uri         = `"https://login.microsoftonline.com/`$TenantID/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("      Headers     = `$Header")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty((`$AuthResult = Invoke-RestMethod @PostSplat)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthCertToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthCertToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthCertToken
  
  #region function Get-MyOAuthDelegateToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Delegate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Delegate OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceUri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scope")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Application")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthDelegateToken -TenantID `$TenantID -ClientID `$ClientID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Updated Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [String]`$RedirectUri = `"https://localhost`",")
  [Void]$StringBuilder.AppendLine("    [String]`$State = `"MyState`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Scope = `"https://graph.microsoft.com/.default`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Web.HttpUtility`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Web`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]::New(`"System.Windows.Forms.Form`")).Type))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadWithPartialName(`"System.Windows.Forms`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempRedirectUri = [System.Web.HttpUtility]::UrlEncode(`$RedirectUri)")
  [Void]$StringBuilder.AppendLine("  `$TempScope = [System.Web.HttpUtility]::UrlEncode((`$Scope -join `"%20`"))")
  [Void]$StringBuilder.AppendLine("  `$AuthUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/authorize?client_id=`$(`$ClientID)&state=`$(`$State)&redirect_uri=`$(`$TempRedirectUri)&scope=`$(`$TempScope)&response_type=code&response_mode=query`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Size = [System.Drawing.Size]::New(480, 680)")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopLevel = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADForm.TopMost = `$True")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.add_Shown({ `$This.Activate() })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("  `$OADForm.Controls.Add(`$OADWebBrowser)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Location = [System.Drawing.Point]::New(4, 4)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Size = [System.Drawing.Size]::New(472, 672)")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.ScriptErrorsSuppressed = `$True")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.Url = `$AuthUri")
  [Void]$StringBuilder.AppendLine("  #endregion `$OADWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADWebBrowser.add_DocumentCompleted({ if (`$This.Url.Query -match `"error=[^&]*|code=[^&]*`") { `$This.Parent.Close() } })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$OADForm.ShowDialog(`$$($MyScriptName)Form) | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Code = [System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Code`"))))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      `"Error`"      = ([System.Web.HttpUtility]::ParseQueryString(`$OADWebBrowser.Url.Query).Get(`"Error`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Authorized")
  [Void]$StringBuilder.AppendLine("    `$TokenUri = `"https://login.microsoftonline.com/`$(`$TenantID)/oauth2/v2.0/token`"")
  [Void]$StringBuilder.AppendLine("    `$Body = @{")
  [Void]$StringBuilder.AppendLine("      `"Client_ID`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("      `"Scope`"         = `$Scope")
  [Void]$StringBuilder.AppendLine("      `"Code`"          = `$Code")
  [Void]$StringBuilder.AppendLine("      `"Redirect_Uri`"  = `$RedirectUri")
  [Void]$StringBuilder.AppendLine("      `"Grant_Type`"    = `"authorization_code`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AuthResult = (Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$TokenUri -ContentType `"application/x-www-form-urlencoded`" -Body `$Body -ErrorAction SilentlyContinue).Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch {}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$AuthResult))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`" = 0")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.Access_Token")
  [Void]$StringBuilder.AppendLine("        `"Expires_In`"    = `$AuthResult.Expires_In")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthDelegateToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthDelegateToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthDelegateToken
  
  #region function Get-MyOAuthUserToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get User OAuth Token")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get User OAuth Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EMail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PromptConsent")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -Credential `$Credential -TenantID `$TenantID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -EMail `$EMail -Password `$Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Get-MyOAuthUserToken -EMail `$EMail -PromptConsent")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$AuthToken.ExpiresOn -gt [System.DateTimeOffset]::MinValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # You are Good")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Logon Failed!")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Credential`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID = `"d1ddf0e4-d672-4dae-b554-9d5bdfd93547`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$EMail,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Password`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AskPassword`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PromptConsent,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Credential`")]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceUri = `"https://graph.microsoft.com/`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyOAuthUserToken`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$AzureADModule = @(Get-Module -Name `"AzureAD`" -ListAvailable | Sort-Object -Property `"Version`" -Descending)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$AzureADModule.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Credential`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Authority = `"https://login.microsoftonline.com/`$(`$TenantID)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Authority = `"https://login.microsoftonline.com/`$(`$EMail.Host)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadFrom(`"`$(`$AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.dll`")")
  [Void]$StringBuilder.AppendLine("    [Void][System.Reflection.Assembly]::LoadFrom(`"`$(`$AzureADModule[0].ModuleBase)\Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$AuthContext = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext]::New(`$Authority)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"AskPassword`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RedirectUri = `"urn:ietf:wg:oauth:2.0:oob`"")
  [Void]$StringBuilder.AppendLine("      `$PlatformParameters = [Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters]::New(`"Auto`")")
  [Void]$StringBuilder.AppendLine("      `$UserID = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier]::New((`$EMail.Address), `"OptionalDisplayableId`")")
  [Void]$StringBuilder.AppendLine("      if (`$PromptConsent.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$AuthResult = `$AuthContext.AcquireTokenAsync(`$ResourceUri, `$ClientID, `$RedirectUri, `$PlatformParameters, `$UserID, `"prompt=admin_consent`").Result")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$AuthResult = `$AuthContext.AcquireTokenAsync(`$ResourceUri, `$ClientID, `$RedirectUri, `$PlatformParameters, `$UserID).Result")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSCmdlet.ParameterSetName -eq `"Password`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New((`$EMail.Address), (ConvertTo-SecureString -String `$Password -AsPlainText -Force))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserCredentials = [Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential]::New((`$Credential.UserName), (`$Credential.Password))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$AuthResult = [Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions]::AcquireTokenAsync(`$AuthContext, `$ResourceUri, `$ClientID, `$UserCredentials).Result")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$AuthResult.AccessToken))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Failed to Authenticate")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`" = [System.DateTimeOffset]::MinValue")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Successful Authentication")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `" + `$AuthResult.AccessToken")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`"     = `$AuthResult.ExpiresOn")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Azure Module not Found")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"ExpiresOn`" = [System.DateTimeOffset]::MinValue")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyOAuthUserToken`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyOAuthUserToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyOAuthUserToken
  
  #region function Get-MyGraphQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Count")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Expand")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderBy")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Skip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGraphQuery -AuthToken `$AuthToken -Resource `$Resource")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Count,")
  [Void]$StringBuilder.AppendLine("    [String]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [String]`$Expand,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [String]`$Search,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$OrderBy,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 500,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Skip,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$MyFilters = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$Count.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$count=true`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$search=```"`$(`$Search)```"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"OrderBy`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$orderby=`$((`$OrderBy -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Skip`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$skip=`$(`$Skip)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Filter`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$filter=`$(`$Filter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Expand`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$MyFilters.Add(`"```$expand=`$(`$Expand)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion Build Graph Query Search Filter")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$MyFilters.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)?`$((`$MyFilters -join `"&`"))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGraphQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGraphQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGraphQuery
  
  #region function Get-MyGQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyGQuery -AuthToken `$AuthToken -Resource `$Resource")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:Authtoken,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Beta`", `"v1.0`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Resource,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Wait = 100")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://graph.microsoft.com/`$(`$Version)/`$(`$Resource)`"")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Query Graph API`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Get -ContentType application/json -ErrorAction SilentlyContinue -Verbose:`$False")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = (`$Content.`"@odata.nextLink`")")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds `$Wait")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  While ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyGQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyGQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyGQuery
  
  #region function Send-MyGraphMail
  [Void]$StringBuilder.AppendLine("#region function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("Function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Mail via Graph API")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Mail via Graph API")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UsedID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subject")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AsText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mention")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER BCC")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReplyTo")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Importance")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Flagged")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeliveryReceipt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReadReceipt")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachments")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SaveToSent")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Send-MyGraphMail -Subject `$Subject -Body `$Body -To `$To -AuthToken `$AuthToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      23/06/08 Add Mention Option")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Me`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"v1.0`", `"Beta`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"Beta`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UsedID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subject,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Body,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AsText,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$Mention,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress[]]`$ReplyTo,")
  [Void]$StringBuilder.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Importance = `"Normal`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Flagged,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$DeliveryReceipt,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$ReadReceipt,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachments,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$SaveToSent")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Message = [Ordered]@{ `"Message`" = [Ordered]@{ `"Subject`" = `$Subject } }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$AsText.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"TEXT`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Body`", [Ordered]@{ `"ContentType`" = `"HTML`" })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Body.Add(`"Content`", `$Body)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"Importance`", `$Importance)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isDeliveryReceiptRequested`", (`$DeliveryReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"isReadReceiptRequested`", (`$ReadReceipt.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$Flagged.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"flag`", [Ordered]@{ `"flagStatus`" = `"flagged`" })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"dueDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Flag.Add(`"startDateTime`", [Ordered]@{ `"dateTime`" = ([DateTime]::Now.ToString(`"yyyy-MM-ddT23:59:59`")); `"timeZone`" = ([TimeZone]::CurrentTimeZone.StandardName) })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"From`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"from`", [Ordered]@{ `"emailAddress`" = @{ `"address`" = (`$From.Address) } })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Message.Add(`"toRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("  `$TO | ForEach-Object -Process { [Void]`$Message.Message.toRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"`$Mention`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Mentions`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$Mention | ForEach-Object -Process { [Void]`$Message.Message.Mentions.Add(@{ `"Mentioned`" = @{ `"name`" = (`$PSItem.Address); `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"CC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"ccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$CC | ForEach-Object -Process { [Void]`$Message.Message.ccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"BCC`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"bccRecipients`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$BCC | ForEach-Object -Process { [Void]`$Message.Message.bccRecipients.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"ReplyTo`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"replyTo`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    `$ReplyTo | ForEach-Object -Process { [Void]`$Message.Message.replyTo.Add(@{ `"emailAddress`" = @{ `"address`" = (`$PSItem.Address) } }) }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Attachments`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Message.Message.Add(`"Attachments`", ([System.Collections.ArrayList]::New()))")
  [Void]$StringBuilder.AppendLine("    ForEach (`$File In `$Attachments)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      If ([System.IO.File]::Exists(`$File))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Base64Encode = [Convert]::ToBase64String(([System.IO.File]::ReadAllBytes(`$File)))")
  [Void]$StringBuilder.AppendLine("        [Void]`$Message.Message.attachments.Add([Ordered]@{ `"@odata.type`" = `"#microsoft.graph.fileAttachment`"; `"Name`" = ([System.IO.Path]::GetFileName(`$File)); `"contentType`" = `"MIME types`"; `"contentBytes`" = `"`$(`$Base64Encode)`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [Void]`$Message.Add(`"saveToSentItems`", (`$SaveToSent.IsPresent.ToString()))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Me`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/me/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://graph.microsoft.com/`$(`$Version)/users/`$(`$UserID)/sendmail`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Result = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Headers `$AuthToken -Method Post -Body (`$Message | ConvertTo-Json -Depth 99)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (`$Result.StatusCode -eq 202) }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MyGraphMail`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyGraphMail")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyGraphMail
  
  #region function Send-MSTeamNotification
  [Void]$StringBuilder.AppendLine("#region function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("function Send-MSTeamNotification ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send MS Teams WebHook Notification")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send MS Teams WebHook Notification")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebHookUri")
  [Void]$StringBuilder.AppendLine("      MS teams WebHoot Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ThemeColor")
  [Void]$StringBuilder.AppendLine("      Message Theme Coloe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("      Message Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Subtitle")
  [Void]$StringBuilder.AppendLine("      Message Sub Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facts")
  [Void]$StringBuilder.AppendLine("      Facts to Display")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Image")
  [Void]$StringBuilder.AppendLine("      Nine Test Images 1 - 9")
  [Void]$StringBuilder.AppendLine("      https://teamsnodesample.azurewebsites.net/static/img/image#.png")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Button")
  [Void]$StringBuilder.AppendLine("      Buttons to Display")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebHookURI = `"https://Web Hook URL`"")
  [Void]$StringBuilder.AppendLine("      `$Title = `"Title`"")
  [Void]$StringBuilder.AppendLine("      `$Subtitle = `"Subtitle`"")
  [Void]$StringBuilder.AppendLine("      `$Facts = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Fact 1 Name`" = `"Fact 1 Value`"")
  [Void]$StringBuilder.AppendLine("        `"Fact 2 Name`" = `"Fact 2 Value`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Buttons = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("        `"Button01`" = `"http://www.intel.com`"")
  [Void]$StringBuilder.AppendLine("        `"Button02`" = `"http://www.microsoft.com`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Send-MSTeamNotification -WebHookUri `$WebHookURI -Title `$Title -Subtitle `$Subtitle -Facts `$Facts -Button `$Buttons")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/28/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Simple`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$WebHookUri,")
  [Void]$StringBuilder.AppendLine("    [String]`$ThemeColor = `"0076D7`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Subtitle,")
  [Void]$StringBuilder.AppendLine("    [String]`$Text,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Facts,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 9)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Image = 9,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Button`")]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Button")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JSon = [Ordered]@{}")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@type`", `"MessageCard`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"@context`", `"http://schema.org/extensions`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"themeColor`", `$ThemeColor)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"summary`", `$Title)")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Add(`"sections`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections.Add([Ordered]@{`"activityTitle`" = `$Title})")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activitySubtitle`", `$Subtitle)")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Text`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"activityText`", `$Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"activityImage`", `"https://teamsnodesample.azurewebsites.net/static/img/image`$(`$Image).png`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"Text`", `$Message)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facts`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Sections[0].Add(`"facts`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Fact in `$Facts.Keys) ")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.Sections[0].Facts.Add(([Ordered]@{`"name`" = `$Fact; `"value`" = `$Facts[`$Fact]}))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  [Void]`$JSon.Sections[0].Add(`"markdown`", `"true`")")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Button`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$JSon.Add(`"potentialAction`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Btn in `$Button.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction.Add([Ordered]@{`"@type`" = `"OpenUri`"})")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"name`", `$Btn)")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].Add(`"targets`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("      [Void]`$JSon.potentialAction[(`$JSon.potentialAction.Count - 1)].targets.Add(@{`"os`" = `"default`"; `"uri`" = `$Button[`$Btn]})")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-RestMethod -Uri `$WebHookURI -Method Post -Body (`$JSon | ConvertTo-Json -Depth 99) -ContentType 'application/json' -ErrorAction `"SilentlyContinue`" | Out-Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Send-MSTeamNotification`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MSTeamNotification")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MSTeamNotification
  
  #region function Verify-MyPIMRoleActived
  [Void]$StringBuilder.AppendLine("#region function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("Function Verify-MyPIMRoleActived ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activated")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify PIM Role has been Activateds")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleName")
  [Void]$StringBuilder.AppendLine("      Name of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RoleID")
  [Void]$StringBuilder.AppendLine("      ID of Entra PIm Role")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      UPN of User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("      ID is User Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleID `$RoleID -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserID `$UserID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$PIMRoleActivated = Verify-MyPIMRoleActived -RoleName `$RoleName -UserName `$UserName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"MeRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RoleID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserNameRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserIDRoleID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Me*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMe = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/Me?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty(`$TmpMe.ID))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `$TmpMe.ID")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"UserName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Try")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpUser = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/users/`$(`$UserName)?```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$TmpUser.ID))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$UserID = `$TmpUser.ID")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Catch")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$UserID = `"UnknownUserID`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -like `"*RoleName`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRole = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles?```$filter=DisplayName eq '`$(`$RoleName)'&```$Select=ID`"")
  [Void]$StringBuilder.AppendLine("    `$RoleID = `$TmpRole.Value.ID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$RoleID) -or (`$UserID -eq `"UnknownUserID`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Role Not Found")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("      `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("      `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("      `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ChkRoleMember = Invoke-MgGraphRequest -Method Get -Uri `"https://graph.microsoft.com/v1.0/directoryRoles/`$(`$RoleID)/Members?```$filter=id eq '`$(`$UserID)'&```$Select=ID,userPrincipalName`"")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$ChkRoleMember.Value.ID))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is Not a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$UserID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$UserName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # User is a Member")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Activated`" = `$True")
  [Void]$StringBuilder.AppendLine("        `"UserID`"    = `$ChkRoleMember.Value.ID")
  [Void]$StringBuilder.AppendLine("        `"UPN`"       = `$ChkRoleMember.Value.userPrincipalName")
  [Void]$StringBuilder.AppendLine("        `"RoleID`"    = `$RoleID")
  [Void]$StringBuilder.AppendLine("        `"RoleName`"  = `$RoleName")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Verify-MyPIMRoleActived`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Verify-MyPIMRoleActived")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Verify-MyPIMRoleActived
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Microsoft GraphAPI Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Microsoft GraphAPI Functions ********
  
  #region ******** SharePoint Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MySPLists
  [Void]$StringBuilder.AppendLine("#region function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("function Get-MySPLists ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPLists -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)?```$select=Id,Title,ListItemEntityTypeFullName,ItemCount,LastItemDeletedDate,LastItemModifiedDate,LastItemUserModifiedDate`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return List of SharePoint Lists")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return SharePoint List")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | Select-Object -Property Id, Title, ListItemEntityTypeFullName, ItemCount, LastItemDeletedDate, LastItemModifiedDate, LastItemUserModifiedDate")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPLists`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPLists")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPLists
  
  #region function Get-MySPListFields
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("function Get-MySPListFields ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListFields -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Fields?```$filter=ReadOnlyField eq false&```$select=Id,Title,StaticName,InternalName,Required,ReadOnlyField,EnforceUniqueValues,FieldTypeKind,TypeAsString,TypeDisplayName`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return List of SharePoint List Fields")
  [Void]$StringBuilder.AppendLine("    (`$ReturnData.Content | ConvertFrom-Json).d.results | Select-Object -Property Id, Title, StaticName, InternalName, Required, ReadOnlyField, EnforceUniqueValues, FieldTypeKind, TypeAsString, TypeDisplayName")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListFields`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListFields")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListFields
  
  #region function Get-MySPListItems
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItems ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Max Number of Items to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Fields")
  [Void]$StringBuilder.AppendLine("      Name of the Fields to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Created")
  [Void]$StringBuilder.AppendLine("      Date Item was Created")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Date Item was Modified")
  [Void]$StringBuilder.AppendLine("    .PARAMETER All")
  [Void]$StringBuilder.AppendLine("      Return all List Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Created `"3/3/2023 10:00 am`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -Modified `"3/3/2023 11:45`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItems -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID 13")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByNameItemId`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByIDItemId`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 1000)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top = 100,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Fields = `"*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Created,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByNameFilter`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByIDFilter`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Configure Initial Rest API Query Uri")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Created`") -or `$PSBoundParameters.ContainsKey(`"Modified`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Created`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Created`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Created.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValName = `"Modified`"")
  [Void]$StringBuilder.AppendLine("        `$TmpTime = `$Modified.ToUniversalTime().ToString(`"s`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TmpFilter = `"&```$filter=`$(`$TmpValName) gt '`$(`$TmpTime)Z'`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items?```$top=`$(`$Top)&```$orderby=Modified desc`$(`$TmpFilter)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpData = (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      if (`$PSCmdlet.ParameterSetName -like `"*Filter`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Items Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData.results | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Item Found by ID")
  [Void]$StringBuilder.AppendLine("        `$TmpData | Select-Object -Property `$Fields")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$TmpData.`"__next`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((-not [String]::IsNullOrEmpty(`$Uri)) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItems`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItems")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItems
  
  #region function New-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("function New-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of New Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$NewItem = [Ordered]@{`"Title`" = `"New Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$NewItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$NewItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      New-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -Item `$NewItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -Headers `$AuthToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return New SharePoint List Item")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-MySPListItem
  
  #region function Update-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Update-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      HashTable of Updated Item Fields")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return Created Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem = [Ordered]@{`"Title`" = `"Updated Item Title`"}")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Choice`", `"Choice 1`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"MultiLine`", `"Text Line 01``r``nText Line 02`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Number`", 1)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"YesNo`", `"True`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"Currency`", 1.2)")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"LookupId`", 1) # Name of Field with Id added to the End")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.Add(`"HyperLink`", [Ordered]@{`"__metadata`" = @{ `"type`" = `"SP.FieldUrlValue`"}})")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Description`", `"Text Description`")")
  [Void]$StringBuilder.AppendLine("      `$UpdatedItem.HyperLink.Add(`"Url`", `"https://www.nytimes.com/games/wordle/index.html`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID -Item `$UpdatedItem")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Body = `$Item.Clone()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `"SP.Data.`$(`$ListName.Replace(' ', '_x0020_'))ListItem`"})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      [Void]`$Body.Add(`"__metadata`", @{`"type`" = `$ListItemName})")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$MergeToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$MergeToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Patch -Uri `$Uri -Headers `$MergeToken -Body (`$Body | ConvertTo-Json -Compress) -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri `$Uri -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Updated SharePoint List Item")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content -replace `"```"Id```"`", `"```"ID```"`" | ConvertFrom-Json).d")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MySPListItem
  
  #region function Delete-MySPListItem
  [Void]$StringBuilder.AppendLine("#region function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("function Delete-MySPListItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListItemName")
  [Void]$StringBuilder.AppendLine("      Typoe name of the SharePoint List items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Delete-MySPListItem -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ListItemName `$ListItemName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListItemName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add If-Match Header Parameter")
  [Void]$StringBuilder.AppendLine("  `$DeleteToken = `$AuthToken.Clone()")
  [Void]$StringBuilder.AppendLine("  [Void]`$DeleteToken.Add(`"If-Match`", `"*`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))`"")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Delete -Uri `$Uri -Headers `$DeleteToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Success")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$True}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Delete Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{`"Success`" = `$False}")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Delete-MySPListItem`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Delete-MySPListItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Delete-MySPListItem
  
  #region function Get-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Get-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment = `"None`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/getByFileName('{0}')`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  foreach (`$FileName in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Get -Uri (`$Uri -f `$FileName) -Headers `$AuthToken -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Attachment Success")
  [Void]$StringBuilder.AppendLine("      if (`$Attachment -eq `"None`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d.Results | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MySPListItemAttachment
  
  #region function Add-MySPListItemAttachment
  [Void]$StringBuilder.AppendLine("#region function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("function Add-MySPListItemAttachment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      SharePoint Reast API AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TenantName")
  [Void]$StringBuilder.AppendLine("      Name of the Azure Tenant")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SiteName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListName")
  [Void]$StringBuilder.AppendLine("      Name of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ItemID")
  [Void]$StringBuilder.AppendLine("      ID of the SharePoint List Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Attachment")
  [Void]$StringBuilder.AppendLine("      Name of the Attachment to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListName `$ListName -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MySPListItemAttachment -AuthToken `$AuthToken -TenantName `$TenantName -SiteName `$SiteName -ListID `$ListID -ItemID `$ItemID -Attachment `"C:\File1.Ext`", `"C:\File2.Ext`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      2023-03-03 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TenantName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SiteName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$ListID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ItemID,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Attachment")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Get List By Name or ID")
  [Void]$StringBuilder.AppendLine("  switch -wildcard (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"ByName*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"/getbytitle('`$(`$ListName)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"ByID*`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpGetBy = `"(guid'`$(`$ListID)')`"")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$TenantName).sharepoint.com/sites/`$(`$SiteName)/_api/web/lists`$(`$TmpGetBy)/Items(`$(`$ItemID))/AttachmentFiles/add(FileName='{0}')`"")
  [Void]$StringBuilder.AppendLine("  foreach (`$FilePath in `$Attachment)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke SharePoint Rest API")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method Post -Uri (`$Uri -f [System.IO.Path]::GetFileName(`$FilePath)) -Headers `$AuthToken -InFile `$FilePath -ContentType `"application/octet-stream`" -ErrorAction SilentlyContinue")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Delete Success")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json).d | ForEach-Object -Process { [PSCustomObject]@{ `"FileName`" = `$PSItem.FileName; `"Url`" = `"https://`$(`$TenantName).sharepoint.com`$(`$PSItem.ServerRelativeUrl)`" } }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MySPListItemAttachment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MySPListItemAttachment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MySPListItemAttachment
  
  [Void]$StringBuilder.AppendLine("#endregion ******* SharePoint Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** SharePoint Rest API Functions ********
  
  #region ******** Azure AD Storage Table Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Get-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Get-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Query Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Query")
  [Void]$StringBuilder.AppendLine("      Storage Account Table Query")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Top")
  [Void]$StringBuilder.AppendLine("      Top Number of Rows to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Select")
  [Void]$StringBuilder.AppendLine("      Property Values to Select")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey `"PKey1`" -RowKey `"RKey1`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'PKey2'`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq 'RKey2'`" -Top 1")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("      Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"RowKey eq 'RKey2'`" -Select Int32, Text, DateTime")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$C) -RowKey (`"RKey{0}`" -f `$C)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$C = 0; `$C -le 9; `$C++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        #Get-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("        Get-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -Query `"PartitionKey eq '`$(`"PKey{0}`" -f `$C)' and  RowKey eq '`$(`"RKey{0}`" -f `$C)'`" -Select Text, Double")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("   .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Query,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"AKAll`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASQuery`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"SASAll`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Top,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Select,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AKKey`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SASKey`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$All")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ArrayList = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Key`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Query`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$ArrayList.Add(`"```$filter=`$(`$Query)`")")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Top`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$top=`$(`$Top)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Select`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$ArrayList.Add(`"```$select=`$((`$Select -join `",`"))`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ArrayList.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TableQuery = `"?`$(`$ArrayList -join `"&`")`"")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$SASJoin = `"?`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Do")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -like `"AK*`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`$(`$TableQuery)`$(`$NextRecords)`$(`$SASJoin)`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("    if (`$ReturnData.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Content = `$ReturnData.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      if (@(`$Content.PSObject.Properties.match(`"value`")).Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content.Value | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Content | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$NextRecords = `"`$(`$SASJoin)NextPartitionKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextPartitionKey`"])&NextRowKey=`$(`$ReturnData.Headers[`"x-ms-continuation-NextRowKey`"])`"")
  [Void]$StringBuilder.AppendLine("        `$SASJoin = `"&`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  while ((`$ReturnData.StatusCode -eq 200) -and (`$ReturnData.Headers.ContainsKey(`"x-ms-continuation-NextPartitionKey`")) -and `$All.IsPresent)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyTableQuery
  
  #region function Add-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Add-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/202{2} {0:00}:{1:00}:{3:00}`" -f (`$A + 1), (`$B + 1), `$A, (`$A  + `$B)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Add-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Add-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"PartitionKey`", `$PartitionKey)")
  [Void]$StringBuilder.AppendLine("  [Void]`$Body.Add(`"RowKey`", `$RowKey)")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (-not `$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Prefer`", `"return-no-content`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)()`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)()?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201, 204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$ReturnData.Content | ConvertFrom-Json) | Select-Object -Property * -ExcludeProperty odata*")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyTableQuery
  
  #region function Merge-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Merge-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Merge with an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Merge-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Merge-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method MERGE -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Merge-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Merge-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Merge-MyTableQuery
  
  #region function Update-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Update-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add / Update a Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Body")
  [Void]$StringBuilder.AppendLine("      Update Data")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = [ordered]@{")
  [Void]$StringBuilder.AppendLine("            `"Text`"                = (`"Text Value {0}{1}`" -f `$A, `$B)")
  [Void]$StringBuilder.AppendLine("            `"Int32`"               = `$A")
  [Void]$StringBuilder.AppendLine("            `"DateTime@odata.type`" = `"Edm.DateTime`"")
  [Void]$StringBuilder.AppendLine("            `"DateTime`"            = (([DateTime]::Parse((`"{0:00}/{1:00}/2021 {0:00}:{1:00}`" -f (`$A + 1), (`$B + 1)))).ToUniversalTime().ToString(`"O`"))")
  [Void]$StringBuilder.AppendLine("            `"GUID@odata.type`"     = `"Edm.Guid`"")
  [Void]$StringBuilder.AppendLine("            `"GUID`"                = ([Guid]::NewGuid())")
  [Void]$StringBuilder.AppendLine("            `"Double@odata.type`"   = `"Edm.Double`"")
  [Void]$StringBuilder.AppendLine("            `"Double`"              = ([Double]`"`$(`$A).`$(`$B)`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          #Update-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("          Update-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B) -Body `$Body")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Body,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Json = `$Body | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"      = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`"   = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"         = `"application/Json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"Content-Length`" = `$Json.Length")
  #[Void]$StringBuilder.AppendLine("    `"If-Match`"       = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Json -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyTableQuery
  
  #region function Remove-MyTableQuery
  [Void]$StringBuilder.AppendLine("#region function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("function Remove-MyTableQuery ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete an Existing Storage Table Data Row")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER TableName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PartitionKey")
  [Void]$StringBuilder.AppendLine("      Table Partition Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RowKey")
  [Void]$StringBuilder.AppendLine("      Table Row Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      For (`$A = 0; `$A -le 9; `$A++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        For (`$B = 0; `$B -le 9; `$B++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          #Remove-MyTableQuery -StorageAccount `$StorageAccount -SAS `$SAS -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("          Remove-MyTableQuery -StorageAccount `$StorageAccount -AccessKey `$AccessKey -TableName `$TableName -PartitionKey (`"PKey{0}`" -f `$A) -RowKey (`"RKey{0}`" -f `$B)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$TableName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PartitionKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$RowKey,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Key = `"PartitionKey='`$(`$PartitionKey)',RowKey='`$(`$RowKey)'`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("    `"Accept`"       = `"application/json;odata=fullmetadata`"")
  [Void]$StringBuilder.AppendLine("    `"If-Match`"     = `"*`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"`$(`$GMTTime)``n/`$(`$StorageAccount)/`$(`$tableName)(`$(`$Key))`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).table.core.windows.net/`$(`$tableName)(`$(`$Key))?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/json")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyTableQuery`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyTableQuery")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyTableQuery
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Storage Table Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Storage Table Functions ********
  
  #region ******** Azure AD Message Queue Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Add-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Add-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("      Message to add to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageTTL")
  [Void]$StringBuilder.AppendLine("      Number of Seconds till Message Expires")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Encode")
  [Void]$StringBuilder.AppendLine("      Encode the text Message in Base64")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Add-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -Message `$Message")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(-1, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$MessageTTL = 604800,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Encode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Encode.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$(`$Message)</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"POST``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?visibilitytimeout=`$(`$VisibilityTimeout)&messagettl=`$(`$MessageTTL)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method POST -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(201))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Add-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyQueueMessage
  
  #region function Clear-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Clear-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Clean all Messages from Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Clear-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Clear-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Clear-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Clear-MyQueueMessage
  
  #region function Get-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Get-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Message to Queue Messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NumMessages")
  [Void]$StringBuilder.AppendLine("      Number of Messages to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Peek")
  [Void]$StringBuilder.AppendLine("      Get Messages but don't flag them")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Decode")
  [Void]$StringBuilder.AppendLine("      Decode the Base64 text Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -NumMessages `$NumMessages -Decode")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 32)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$NumMessages = 1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Peek,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Decode,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  if (`$Peek.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PeekOnly = `"&peekonly=true`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"GET``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages?numofmessages=`$(`$NumMessages)`$(`$PeekOnly)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method GET -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(200))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Messages = @(([XML]((`$ReturnData.Content).SubString(3))).QueueMessagesList.QueueMessage)")
  [Void]$StringBuilder.AppendLine("    if (`$Messages.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Decode.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Messages | ForEach-Object -Process { `$PSItem.MessageText = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((`$PSItem.MessageText))) }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$Messages")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyQueueMessage
  
  #region function Remove-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Remove-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Delete message Queue messages")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"DELETE``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method DELETE -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyQueueMessage
  
  #region function Update-MyQueueMessage
  [Void]$StringBuilder.AppendLine("#region function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("function Update-MyQueueMessage ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Message to Queue")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StorageAccount")
  [Void]$StringBuilder.AppendLine("      Name of the StorageAccount")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AccessKey")
  [Void]$StringBuilder.AppendLine("      StorageAccount Access Key")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SAS")
  [Void]$StringBuilder.AppendLine("      Shared Access Signature")
  [Void]$StringBuilder.AppendLine("    .PARAMETER QueueName")
  [Void]$StringBuilder.AppendLine("      Name of Storage Account Table")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageID")
  [Void]$StringBuilder.AppendLine("      ID of the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PopReceipt")
  [Void]$StringBuilder.AppendLine("      PopReceipt for the Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("      Visibility Timeout")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      Storage Version")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -AccessKey `$AccessKey -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Update-MyQueueMessage -StorageAccount `$StorageAccount -SAS `$SAS -QueueName `$QueueName -MessageID `$MessageID -PopReceipt `$PopReceipt -VisibilityTimeout `$VisibilityTimeout")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      7/30/2021 - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$StorageAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AK`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$AccessKey,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SAS`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SAS,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$QueueName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$PopReceipt,")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 604800)]")
  [Void]$StringBuilder.AppendLine("    [Long]`$VisibilityTimeout = 1800,")
  [Void]$StringBuilder.AppendLine("    [String]`$Version = `"2020-10-02`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$GMTTime = ([DateTime]::Now).ToUniversalTime().ToString(`"R`")")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"x-ms-date`"    = `$GMTTime")
  [Void]$StringBuilder.AppendLine("    `"x-ms-version`" = `$Version")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"AK`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)`"")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA = [System.Security.Cryptography.HMACSHA256]::New()")
  [Void]$StringBuilder.AppendLine("    `$HMACSHA.Key = [Convert]::FromBase64String(`$AccessKey)")
  [Void]$StringBuilder.AppendLine("    `$Signature = [Convert]::ToBase64String(`$HMACSHA.ComputeHash([Text.Encoding]::UTF8.GetBytes(`"PUT``n``napplication/x-www-form-urlencoded``n``nx-ms-date:`$(`$GMTTime)``nx-ms-version:`$(`$version)``n/`$(`$StorageAccount)/`$(`$QueueName)/messages/`$(`$MessageID)`")))")
  [Void]$StringBuilder.AppendLine("    [Void]`$Headers.Add(`"Authorization`", `"SharedKeyLite `$(`$StorageAccount):`$(`$Signature)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$StorageAccount).queue.core.windows.net/`$(`$QueueName)/messages/`$(`$MessageID)?popreceipt=`$(`$PopReceipt)&visibilitytimeout=`$(`$VisibilityTimeout)&`$(`$SAS)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Message`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body = `"<QueueMessage><MessageText>`$([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(`$Message)))</MessageText></QueueMessage>`"")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -Body `$Body -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnData = Invoke-WebRequest -UseBasicParsing -Method PUT -Uri `$Uri -Headers `$Headers -ContentType application/x-www-form-urlencoded")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  if (`$ReturnData.StatusCode -in @(204))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Update-MyQueueMessage`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyQueueMessage")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyQueueMessage
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Azure AD Message Queue Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Azure AD Message Queue Functions ********
  
  #region ******* Service Now Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******* Service Now Rest API Functions ********")
  
  #region ******** Class SNGroup ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("Class SNGroup")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$GroupID")
  [Void]$StringBuilder.AppendLine("  [String]`$Group_Name")
  [Void]$StringBuilder.AppendLine("  [String]`$Group_Description")
  [Void]$StringBuilder.AppendLine("  [String]`$ParentID")
  [Void]$StringBuilder.AppendLine("  [String]`$Parent_Name")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNGroup ([String]`$GroupID, [String]`$Group_Name, [String]`$Group_Description, [String]`$ParentID, [String]`$Parent_Name, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.GroupID = `$GroupID")
  [Void]$StringBuilder.AppendLine("    `$This.Group_Name = `$Group_Name")
  [Void]$StringBuilder.AppendLine("    `$This.Group_Description = `$Group_Description")
  [Void]$StringBuilder.AppendLine("    `$This.ParentID = `$ParentID")
  [Void]$StringBuilder.AppendLine("    `$This.Parent_Name = `$Parent_Name")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNGroup ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNGroup ********
  
  #region function Get-SNGroup
  [Void]$StringBuilder.AppendLine("#region function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("function Get-SNGroup()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN Assignment Group from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNGroup -Credential `$Credential -ID `$ID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name, description, parent.sys_id, parent.name, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$GroupResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_group`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$GroupResult.StatusCode -eq 200) -and (`$GroupResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$GroupResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNGroup]::New(`$PSItem.sys_id, `$PSItem.name, `$PSItem.description, `$PSItem.`"parent.sys_id`", `$PSItem.`"parent.name`", `$PSItem.`"manager.sys_id`", `$PSItem.`"manager.name`", `$PSItem.`"manager.first_name`", `$PSItem.`"manager.last_name`", `$PSItem.`"manager.email`") }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$GroupResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNGroup End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNGroup End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNGroup")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNGroup
  
  #region ******** Class SNUser ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("Class SNUser")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UPN")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  [System.Collections.ArrayList]`$Groups = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNUser ([String]`$UserID, [String]`$User_FullName, [String]`$User_FirstName, [String]`$User_LastName, [String]`$User_UPN, [String]`$User_UserID, [String]`$User_UserName, [String]`$User_EMail, [String]`$User_EmployeeID, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.UserID = `$UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_FullName = `$User_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.User_FirstName = `$User_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.User_LastName = `$User_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.User_UPN = `$User_UPN")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserID = `$User_UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserName = `$User_UserName")
  [Void]$StringBuilder.AppendLine("    `$This.User_EMail = `$User_EMail")
  [Void]$StringBuilder.AppendLine("    `$This.User_EmployeeID = `$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void] AddGroup ([String]`$GroupID, [String]`$Group_Name, [String]`$Group_Description, [String]`$ParentID, [String]`$Parent_Name, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$This.Groups.Add([SNGroup]::New(`$GroupID, `$Group_Name, `$Group_Description, `$ParentID, `$Parent_Name, `$MgrID, `$Mgr_FullName, `$Mgr_FirstName, `$Mgr_LastName, `$Mgr_EMail))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNUser ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNUser ********
  
  #region function Get-SNUser
  [Void]$StringBuilder.AppendLine("#region function Get-SNUser")
  [Void]$StringBuilder.AppendLine("function Get-SNUser()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN User from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UPN")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EMail")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EmployeeID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Groups")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNUser -UserName `$ENV:UserName -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UserID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UPN`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$UPN,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"EMail`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EMail,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"EmployeeID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$EmployeeID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Groups")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UserName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"user_name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_samaccountname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UPN`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"u_userprincipalname`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"email`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"employee_number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"UserName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserName")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UserID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UserID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"UPN`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$UPN")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EMail`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EMail")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"EmployeeID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$EmployeeID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`" = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$UserResult.StatusCode -eq 200) -and (`$UserResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNUser]::New(`$User.sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_userprincipalname, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("        if (`$Groups.IsPresent)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Body = @{")
  [Void]$StringBuilder.AppendLine("            `"user.sys_id`" = `"`$(`$User.sys_id)`"")
  [Void]$StringBuilder.AppendLine("            `"sysparm_fields`" = `"group.sys_id, group.name, group.description, group.parent.sys_id, group.parent.name, group.manager.sys_id, group.manager.name, group.manager.first_name, group.manager.last_name, group.manager.email`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          `$MemberResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/sys_user_grmember`" -Body `$Body -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("          if (`$MemberResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            (`$MemberResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { `$ReturnData.AddGroup(`$PSItem.`"group.sys_id`", `$PSItem.`"group.name`", `$PSItem.`"group.description`", `$PSItem.`"group.parent.sys_id`", `$PSItem.`"group.parent.name`", `$PSItem.`"group.manager.sys_id`", `$PSItem.`"group.manager.name`", `$PSItem.`"group.manager.first_name`", `$PSItem.`"group.manager.last_name`", `$PSItem.`"group.manager.email`") }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MemberResult = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNUser End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNUser End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNUser")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNUser
  
  #region ******** Class SNAsset ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("Class SNAsset")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetID")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDBID")
  [Void]$StringBuilder.AppendLine("  [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  [String]`$DomainName")
  [Void]$StringBuilder.AppendLine("  [String]`$AssetTag")
  [Void]$StringBuilder.AppendLine("  [String]`$SerialNumber")
  [Void]$StringBuilder.AppendLine("  [String]`$DeviceRole")
  [Void]$StringBuilder.AppendLine("  [String]`$Manufacturer")
  [Void]$StringBuilder.AppendLine("  [String]`$Model")
  [Void]$StringBuilder.AppendLine("  [String]`$Department")
  [Void]$StringBuilder.AppendLine("  [String]`$CostCenter")
  [Void]$StringBuilder.AppendLine("  [String]`$Location")
  [Void]$StringBuilder.AppendLine("  [String]`$LocationID")
  [Void]$StringBuilder.AppendLine("  [String]`$State")
  [Void]$StringBuilder.AppendLine("  [String]`$Region")
  [Void]$StringBuilder.AppendLine("  [String]`$Room")
  [Void]$StringBuilder.AppendLine("  [String]`$Floor")
  [Void]$StringBuilder.AppendLine("  [String]`$UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserID")
  [Void]$StringBuilder.AppendLine("  [String]`$User_UserName")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("  [String]`$MgrID")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("  [String]`$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroup")
  [Void]$StringBuilder.AppendLine("  [String]`$SGroupID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  SNAsset ([String]`$AssetID, [String]`$CMDBID, [String]`$ComputerName, [String]`$DomainName, [String]`$AssetTag, [String]`$SerialNumber, [String]`$DeviceRole, [String]`$Manufacturer, [String]`$Model, [String]`$Department, [String]`$CostCenter, [String]`$Location, [String]`$LocationID, [String]`$State, [String]`$Region, [String]`$Room, [String]`$Floor, [String]`$SGroup, [String]`$SGroupID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.AssetID = `$AssetID")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBID = `$CMDBID")
  [Void]$StringBuilder.AppendLine("    `$This.ComputerName = `$ComputerName")
  [Void]$StringBuilder.AppendLine("    `$This.DomainName = `$DomainName")
  [Void]$StringBuilder.AppendLine("    `$This.AssetTag = `$AssetTag")
  [Void]$StringBuilder.AppendLine("    `$This.SerialNumber = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("    `$This.DeviceRole = `$DeviceRole")
  [Void]$StringBuilder.AppendLine("    `$This.Manufacturer = `$Manufacturer")
  [Void]$StringBuilder.AppendLine("    `$This.Model = `$Model")
  [Void]$StringBuilder.AppendLine("    `$This.Department = `$Department")
  [Void]$StringBuilder.AppendLine("    `$This.CostCenter = `$CostCenter")
  [Void]$StringBuilder.AppendLine("    `$This.Location = `$Location")
  [Void]$StringBuilder.AppendLine("    `$This.LocationID = `$LocationID")
  [Void]$StringBuilder.AppendLine("    `$This.State = `$State")
  [Void]$StringBuilder.AppendLine("    `$This.Region = `$Region")
  [Void]$StringBuilder.AppendLine("    `$This.Room = `$Room")
  [Void]$StringBuilder.AppendLine("    `$This.Floor = `$Floor")
  [Void]$StringBuilder.AppendLine("    `$This.SGroup = `$SGroup")
  [Void]$StringBuilder.AppendLine("    `$This.SGroupID = `$SGroupID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [void] AddUser ([String]`$UserID, [String]`$User_FullName, [String]`$User_FirstName, [String]`$User_LastName, [String]`$User_UserID, [String]`$User_UserName, [String]`$User_EMail, [String]`$User_EmployeeID, [String]`$MgrID, [String]`$Mgr_FullName, [String]`$Mgr_FirstName, [String]`$Mgr_LastName, [String]`$Mgr_EMail)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.UserID = `$UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_FullName = `$User_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.User_FirstName = `$User_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.User_LastName = `$User_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserID = `$User_UserID")
  [Void]$StringBuilder.AppendLine("    `$This.User_UserName = `$User_UserName")
  [Void]$StringBuilder.AppendLine("    `$This.User_EMail = `$User_EMail")
  [Void]$StringBuilder.AppendLine("    `$This.User_EmployeeID = `$User_EmployeeID")
  [Void]$StringBuilder.AppendLine("    `$This.MgrID = `$MgrID")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FullName = `$Mgr_FullName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_FirstName = `$Mgr_FirstName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_LastName = `$Mgr_LastName")
  [Void]$StringBuilder.AppendLine("    `$This.Mgr_EMail = `$Mgr_EMail")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNAsset ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNAsset ********
  
  #region function Get-SNAsset
  [Void]$StringBuilder.AppendLine("#region function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("function Get-SNAsset()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get PSJH Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get PSJH Asset from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Computername")
  [Void]$StringBuilder.AppendLine("      Name of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetTag")
  [Void]$StringBuilder.AppendLine("      Asset tag of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      Serial Number of the Computer in the Asset Record")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -ComputerName `"OLT0069191`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -ComputerName `"OLT0069191`", `"WWA143874`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -AssetTag `"WWA143874`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -AssetTag `"WWA143874`", `"0069191`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -serialNumber `"CNU33890G2`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("      Get-SNAsset -serialNumber `"CNU33890G2`", `"CNU33890LQ`" -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `"OLT0069191`", `"WWA143874`" | Get-SNAsset -Credential `$Credential -Instance `"psjhdev`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance = `"psjh`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ComputerName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"AssetTag`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$AssetTag,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, ParameterSetName = `"SerialNumber`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset Begin Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"ci.name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"asset_tag`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"serial_number`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset Process Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"ComputerName`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ComputerName")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"AssetTag`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$AssetTag")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SerialNumber`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$SerialNumber")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"ID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Id")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`" = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, asset_tag, serial_number, u_device_role, u_room, u_floor, StockRoom, substatus, reserved_for, assigned_to, ci.name, ci.dns_domain, ci.sys_id, department.name, department.id, location.name, location.sys_id, location.state, location.u_region.u_description, support_group.name, model.name, model.manufacturer.name, support_group.sys_id, support_group.name, stockroom`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      `$CompResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/alm_hardware`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$CompResult.StatusCode -eq 200) -and (`$CompResult.Headers.`"X-Total-Count`" -ne `"0`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Comp = (`$CompResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("        `$ReturnData = [SNAsset]::New(`$Comp.sys_id, `$Comp.`"ci.sys_id`", `$Comp.`"ci.name`", `$Comp.`"ci.dns_domain`", `$Comp.asset_tag, `$Comp.serial_number, `$Comp.u_device_role, `$Comp.`"model.manufacturer.name`", `$Comp.`"model.name`", `$Comp.`"department.name`", `$Comp.`"department.id`", `$Comp.`"location.name`", `$Comp.`"location.sys_id`", `$Comp.`"location.state`", `$Comp.`"location.u_region.u_description`", `$Comp.u_room, `$Comp.u_floor, `$Comp.`"support_group.name`", `$Comp.`"support_group.sys_id`")")
  [Void]$StringBuilder.AppendLine("        if ((-not [String]::IsNullOrEmpty(`$Comp.StockRoom)) -and (`$Comp.substatus -in @(`"reserved`", `"pending_install`")))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (-not [String]::IsNullOrEmpty(`$Comp.reserved_for))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `$Comp.reserved_for.link -Credential `$Credential -Body @{ `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`" }")
  [Void]$StringBuilder.AppendLine("            if (`$UserResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("              `$ReturnData.AddUser(`$User.Sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (-not [String]::IsNullOrEmpty(`$Comp.assigned_to))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$UserResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `$Comp.assigned_to.link -Credential `$Credential -Body @{ `"sysparm_fields`" = `"sys_id, name, first_name, last_name, u_samaccountname, user_name, email, employee_number, manager.sys_id, manager.name, manager.first_name, manager.last_name, manager.email`" }")
  [Void]$StringBuilder.AppendLine("            if (`$UserResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$User = (`$UserResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("              `$ReturnData.AddUser(`$User.Sys_id, `$User.name, `$User.first_name, `$User.last_name, `$User.u_samaccountname, `$User.user_name, `$User.email, `$User.employee_number, `$User.`"manager.sys_id`", `$User.`"manager.name`", `$User.`"manager.first_name`", `$User.`"manager.last_name`", `$User.`"manager.email`")")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$ReturnData")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$Computer = `$Null")
  [Void]$StringBuilder.AppendLine("        `$UserResult = `$Null")
  [Void]$StringBuilder.AppendLine("        `$User = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$CompResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNAsset End Block`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNAsset End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNAsset")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNAsset
  
  #region ******** Class SNCMDBItem ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNCMDBItem ********")
  [Void]$StringBuilder.AppendLine("Class SNCMDBItem")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDBID")
  [Void]$StringBuilder.AppendLine("  [String]`$CMDB_Name")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNCMDBItem ([String]`$CMDBID, [String]`$CMDB_Name)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.CMDBID = `$CMDBID")
  [Void]$StringBuilder.AppendLine("    `$This.CMDB_Name = `$CMDB_Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNCMDBItem ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNCMDBItem ********
  
  #region function Get-SNCMDBItem
  [Void]$StringBuilder.AppendLine("#region function Get-SNCMDBItem")
  [Void]$StringBuilder.AppendLine("function Get-SNCMDBItem()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get SN Configuration Item from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get SN Configuration Item from Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-SNCMDBItem -Credential `$Credential -ID `$ID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Name`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Name,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SysID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"name`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$PropertyName = `"sys_id`"")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Name`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$Name")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"SysID`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Data = `$ID")
  [Void]$StringBuilder.AppendLine("        break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Item in `$Data)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body = @{")
  [Void]$StringBuilder.AppendLine("        `"sysparm_query`" = `"`$(`$PropertyName)=`$(`$Item)`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_limit`"  = `"1`"")
  [Void]$StringBuilder.AppendLine("        `"sysparm_fields`" = `"sys_id, name`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$CMDBItemResult = Invoke-WebRequest -UseBasicParsing -ContentType `"application/json`" -uri `"https://`$(`$Instance).service-now.com/api/now/table/cmdb_ci`" -Credential `$Credential -Body `$Body")
  [Void]$StringBuilder.AppendLine("      if ((`$CMDBItemResult.StatusCode -eq 200) -and (`$CMDBItemResult.Headers.`"X-Total-Count`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        (`$CMDBItemResult.Content | ConvertFrom-Json).Result | ForEach-Object -Process { [SNCMDBItem]::New(`$PSItem.sys_id, `$PSItem.name) }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$CMDBItemResult = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-SNCMDBItem End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-SNCMDBItem End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-SNCMDBItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-SNCMDBItem
  
  #region ******** Class SNNewIncident ********
  [Void]$StringBuilder.AppendLine("#region ******** Class SNNewIncident ********")
  [Void]$StringBuilder.AppendLine("Class SNNewIncident")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [String]`$ID")
  [Void]$StringBuilder.AppendLine("  [String]`$Number")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNNewIncident ()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  SNNewIncident ([String]`$ID, [String]`$Number)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.ID = `$ID")
  [Void]$StringBuilder.AppendLine("    `$This.Number = `$Number")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Class SNNewIncident ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Class SNNewIncident ********
  
  #region function Create-SNIncident
  [Void]$StringBuilder.AppendLine("#region function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("function Create-SNIncident ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Create New Service Now Incident")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Create New Service Now Incident")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Instance")
  [Void]$StringBuilder.AppendLine("      Service Now Instance Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignGroup")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssignUser")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AffectedUser")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Urgency")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Impact")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CMDBType")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CMDBItem")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Catagory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ShortDescription")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials users to connect to the Service Now Web Portal")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Create-SNIncident -AssignGroup `$AssignGroup -AffectedUser `$AffectedUser -CMDBItem `$CMDBItem -Catagory `$Catagory -ShortDescription `$ShortDescription -Description `$Description -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Instance,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssignUser,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AffectedUser,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Urgency = `"5`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"1`", `"2`", `"3`", `"4`", `"5`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Impact = `"5`",")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Application`", `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$CMDBType = `"Device`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$CMDBItem,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Catagory,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ShortDescription,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Create-SNIncident`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"assignment_group`"      = `$AssignGroup")
  [Void]$StringBuilder.AppendLine("    `"short_description`"     = `$ShortDescription")
  [Void]$StringBuilder.AppendLine("    `"description`"           = `$Description")
  [Void]$StringBuilder.AppendLine("    `"u_affected_end_user`"   = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("    `"urgency`"               = `$Urgency")
  [Void]$StringBuilder.AppendLine("    `"impact`"                = `$Impact")
  [Void]$StringBuilder.AppendLine("    `"sysparm_display_value`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    `"u_configuration_item_type`" = `$CMDBType")
  [Void]$StringBuilder.AppendLine("    `"cmdb_ci`"               = `$CMDBItem")
  [Void]$StringBuilder.AppendLine("    `"u_category`"            = `$Catagory")
  [Void]$StringBuilder.AppendLine("    `"caller_id`"             = `$AffectedUser")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"AssignUser`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Body.Add(`"assigned_to`", `$AssignUser)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$IncidentResult = Invoke-WebRequest -UseBasicParsing -Credential `$Credential -Method POST -Uri `"https://psjh.service-now.com/api/now/table/incident?sysparm_display_value=true`" -Body (`$Body | ConvertTo-Json) -ContentType `"application/json`"")
  [Void]$StringBuilder.AppendLine("    if (`$IncidentResult.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Incident = (`$IncidentResult.Content | ConvertFrom-Json).Result")
  [Void]$StringBuilder.AppendLine("      [SNNewIncident]::New(`$Incident.sys_id, `$Incident.Number)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [SNNewIncident]::New()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [SNNewIncident]::New()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Create-SNIncident`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Create-SNIncident")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Create-SNIncident
  
  [Void]$StringBuilder.AppendLine("#endregion ******* Service Now Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******* Service Now Rest API Functions ********
  
  #region ******** UMS Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-UMSRestAPI
  [Void]$StringBuilder.AppendLine("#region function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("function Connect-UMSRestAPI ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Connect to UMS Rest API and Returns a Web Session Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Username and Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$WebSession = Connect-UMSRestAPI -ComputerName `$ComputerName -Credential `$Credential")
  [Void]$StringBuilder.AppendLine("      If (`$WebSession.Cookies.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [PSCredential]`$Credential")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Logon Uri")
  [Void]$StringBuilder.AppendLine("  `$Uri = (`"https://{0}:{1}/umsapi/v{2}/login`" -f `$ComputerName, `$Port, `$Version)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Logon / Authorization Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"Authorization`" = `"Basic `" + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(`"`$(`$Credential.Username):`$(`$Credential.GetNetworkCredential().Password)`"))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create new Web Session")
  [Void]$StringBuilder.AppendLine("  `$WebSession = [Microsoft.Powershell.Commands.Webrequestsession]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Request WebSession Cookie")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing -Method Post -Uri `$Uri -ContentType `"application/json`" -Headers `$Headers")
  [Void]$StringBuilder.AppendLine("    if (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return WebSession")
  [Void]$StringBuilder.AppendLine("      `$TmpName, `$TmpValue = @((`$Response.Content | ConvertFrom-Json).Message -split `"=`")")
  [Void]$StringBuilder.AppendLine("      `$TmpCookie = [System.Net.Cookie]::New(`$TmpName, `$TmpValue, `"/`", `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      `$WebSession.Cookies.Add(`$TmpCookie)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch {}")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Return Web Session Object")
  [Void]$StringBuilder.AppendLine("  `$WebSession")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-UMSRestAPI
  
  #region function Get-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Get-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Short: Name, MAC, IP, Parent Folder")
  [Void]$StringBuilder.AppendLine("      OnLine: Short Info, OnLine Status")
  [Void]$StringBuilder.AppendLine("      Details: Short Info, OEM, Model, Serial, Hardware Info, IGEL OS Info")
  [Void]$StringBuilder.AppendLine("      Shadow: Short Info, VNC Password and Cert")
  [Void]$StringBuilder.AppendLine("      Children: Short Info")
  [Void]$StringBuilder.AppendLine("      Deviceattributes: Short Info")
  [Void]$StringBuilder.AppendLine("      Networkadapters: Short Info, NIC Info")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DeviceList = Get-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$DeviceList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"short`", `"details`", `"online`", `"shadow`", `"children`", `"deviceattributes`", `"networkadapters`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets = `"short`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DeviceID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Device to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DeviceID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `"/{0}`" -f `$DeviceID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDevice = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`"  = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"         = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$TmpDevice, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"      = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDevice
  
  #region function Get-UMSDirectories
  [Void]$StringBuilder.AppendLine("#region function Get-UMSDirectories")
  [Void]$StringBuilder.AppendLine("function Get-UMSDirectories ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Device Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Children: Directory IDs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectories -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSDirectories -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID -Facets children")
  [Void]$StringBuilder.AppendLine("      If (`$DirList.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"children`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DirectoryID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Directory to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DirectoryID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `"/{0}`" -f `$DirectoryID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facets`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$TmpDirectory, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@(`$Response.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSDirectories")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSDirectories
  
  #region function Move-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Move-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Move-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}?operation=move`" -f `$ComputerName, `$Port, `$Version, `"directories/tcdirectories`", `$DirectoryID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpMoves = `$Response.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpMove In `$TmpMoves)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$TmpMove.id")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = (`$TmpMove.results -eq `"successful`")")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `$TmpMove.results")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = 0")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `"Failed to Move Device`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("      `"DeviceID`" = -1")
  [Void]$StringBuilder.AppendLine("      `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("      `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Move-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Move-UMSDevice
  
  #region function Remove-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Remove-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes a Device from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Remove-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  foreach (`$ID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/deletetcoffline`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$ID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Delete`"")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$True")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("          `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("          `"Message`"  = `"Failed to Remove Device`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"DeviceID`" = `$ID")
  [Void]$StringBuilder.AppendLine("        `"Success`"  = `$False")
  [Void]$StringBuilder.AppendLine("        `"Message`"  = `$PSItem.Exception.Message")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-UMSDevice
  
  #region function Send-UMSDeviceComand
  [Void]$StringBuilder.AppendLine("#region function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("function Send-UMSDeviceComand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to send to the UMS Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Response = Send-UMSDeviceComand -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Command `$Command")
  [Void]$StringBuilder.AppendLine("      ForEach (`$TmpResponse In `$Response)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        If (`$TmpResponse.Success)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"rebootX`", `"reboot`", `"shutdown`", `"wakeup`", `"settings2tc`", `"tcreset2facdefs`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New()")
  [Void]$StringBuilder.AppendLine("  foreach (`$TmpID in `$DeviceID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(@{ `"id`" = `$TmpID; `"type`" = `"tc`" }) | Out-Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}?command={4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", (`$Command.ToLower()))")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Post`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = ( , `$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("    If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Status")
  [Void]$StringBuilder.AppendLine("      (`$Response.Content | ConvertFrom-Json).CommandExecList | ForEach-Object -Process { [PSCustomObject]@{ `"Success`" = (`$PSItem.Message -eq `"OK`"); `"id`" = `$PSItem.ID; `"state`" = `$PSItem.State; `"message`" = `$PSItem.Message } }")
  [Void]$StringBuilder.AppendLine("     }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"FAILED`"; `"message`" = `"Failed to Execute `$(`$Command) Command`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"id`" = 0; `"state`" = `"ERROR`"; `"message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-UMSDeviceComand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-UMSDeviceComand
  
  #region function Update-UMSDevice
  [Void]$StringBuilder.AppendLine("#region function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("function Update-UMSDevice ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      New UMS Device Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Site")
  [Void]$StringBuilder.AppendLine("      New UMS Device Site")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Department")
  [Void]$StringBuilder.AppendLine("      New UMS Device Department")
  [Void]$StringBuilder.AppendLine("    .PARAMETER CostCenter")
  [Void]$StringBuilder.AppendLine("      New UMS Device CostCenter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER LastIP")
  [Void]$StringBuilder.AppendLine("      New UMS Device LastIP")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      New UMS Device Comment")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AssetID")
  [Void]$StringBuilder.AppendLine("      New UMS Device AssetID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InserviceDate")
  [Void]$StringBuilder.AppendLine("      New UMS Device InserviceDate")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SerialNumber")
  [Void]$StringBuilder.AppendLine("      New UMS Device SerialNumber")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceAttributes")
  [Void]$StringBuilder.AppendLine("      New UMS Device DeviceAttributes")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Success = Update-UMSDevice -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID -Name `$NewName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Name,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Site,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Department,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$CostCenter,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$LastIP,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$AssetID,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$InserviceDate,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [String]`$SerialNumber,")
  [Void]$StringBuilder.AppendLine("    [Parameter(ParameterSetName = `"Update`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateNotNullOrEmpty()]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$DeviceAttributes")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = @{ }")
  [Void]$StringBuilder.AppendLine("  foreach (`$Key in `$PSBoundParameters.Keys | Where-Object -FilterScript { `$PSItem -in @(`"Name`", `"Site`", `"Department`", `"CostCenter`", `"LastIP`", `"Comment`", `"AssetID`", `"InserviceDate`", `"SerialNumber`") })")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`$Key.ToLower(), `$PSBoundParameters[`$Key])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Add Custom Device Attributes")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"DeviceAttributes`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Body.Add(`"deviceAttributes`", [System.Collections.ArrayList]::New())")
  [Void]$StringBuilder.AppendLine("    foreach (`$Key in `$DeviceAttributes.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Body.deviceAttributes.Add(@{ `"identifier`" = `$Key.ToLower(); `"value`" = `$DeviceAttributes[`$Key] }) | Out-Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify New Update Values were Passed")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Update`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Rest API Method Values")
  [Void]$StringBuilder.AppendLine("    `$Params = @{")
  [Void]$StringBuilder.AppendLine("      `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("      `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}`" -f `$ComputerName, `$Port, `$Version, `"thinclients`", `$DeviceID)")
  [Void]$StringBuilder.AppendLine("      `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("      `"Body`"       = (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("      `"Headers`"    = @{}")
  [Void]$StringBuilder.AppendLine("      `"ContentType`" = `"application/json`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("      `$Response = Invoke-WebRequest -UseBasicParsing @Params")
  [Void]$StringBuilder.AppendLine("      If (`$Response.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        `$TmpMessage = (`$Response.Content | ConvertFrom-Json).Message")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = (`$TmpMessage -eq `"Update successful`"); `"Message`" = `$TmpMessage }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"Failed to Update Values`" }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Message`" = `"No Updated Values`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-UMSDevice")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-UMSDevice
  
  
  #region function Get-UMSProfile
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfile")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfile ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get All Profiles")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Get-UMSProfile -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Specific Profile")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Get-UMSProfile -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ProfileID`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfile`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Profile to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"ProfileID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpProfile = `"/{0}`" -f `$ProfileID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpProfile = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$TmpProfile)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfile`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfile")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfile
  
  #region function Get-UMSProfileDirectories
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfileDirectories")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfileDirectories ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profile Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profile Directories from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Facets")
  [Void]$StringBuilder.AppendLine("      Specify what information the Rest API Call wil Return")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      Children: Directory IDs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Directory")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get All Folders")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSProfileDirectories -WebSession `$WebSession -ComputerName `$ComputerName")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Specific Folder with list of Child Folder ID's")
  [Void]$StringBuilder.AppendLine("      `$DirList = Get-UMSProfileDirectories -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID -Facets children")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"children`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Facets,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"DirectoryID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfileDirectories`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Specify Specific Directory to Return")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"DirectoryID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `"/{0}`" -f `$DirectoryID")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpDirectory = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set what information to return from Rest API Call")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Facets`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `"?facets={0}`" -f `$Facets")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpFacets = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}{4}{5}`" -f `$ComputerName, `$Port, `$Version, `"directories/profiledirectories`", `$TmpDirectory, `$TmpFacets)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfileDirectories`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfileDirectories")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfileDirectories
  
  #region function Get-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function Get-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function Get-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get list of Profile Assignments for a Device or a Diirectory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get list of Profile Assignments for a Device or a Diirectory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to Get Profile Assignments for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to Get Profile Assignments for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Get Profiles Assignments for Device")
  [Void]$StringBuilder.AppendLine("      Get-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Get Profiles Assignments for Directory")
  [Void]$StringBuilder.AppendLine("      Get-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Get Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"directories/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/assignments/profiles`" -f `$ComputerName, `$Port, `$Version, `$TmpType, `$TmpID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSProfileAssignment
  
  #region function New-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function New-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function New-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Profiles from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to Assign the Profile To")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to Assign the Profile To")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Assign Profile to a Device")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = New-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Assign Profile to a Device Directory")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = New-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function New-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # New Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"tc`"")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpType = `"tcdirectory`"")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create Update Request Data Payload")
  [Void]$StringBuilder.AppendLine("  `$Body = [System.Collections.ArrayList]::New(@(@{ `"assignee`" = @{ `"id`" = `$ProfileID; `"type`" = `"profile`" }; `"receiver`" = @{ `"id`" = `$TmpID; `"type`" = `$TmpType } }))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$ProfileID, `$TmpPath)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Put`"")
  [Void]$StringBuilder.AppendLine("    `"Body`"       = (,`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("    # Return Success Status")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = (`$Result.Message -match `"successfully`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"Error Removing Profile Assignment`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function New-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function New-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function New-UMSProfileAssignment
  
  #region function Remove-UMSProfileAssignment
  [Void]$StringBuilder.AppendLine("#region function Remove-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("function Remove-UMSProfileAssignment ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removed an Assigned profile from a Device or a Device Directory")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removed an Assigned profile from a Device or a Device Directory")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ProfileID")
  [Void]$StringBuilder.AppendLine("      ID of th UMS Profile")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DeviceID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device to remove the Profile from")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DirectoryID")
  [Void]$StringBuilder.AppendLine("      ID of the UMS Device Directory to remove the Profile from")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      # Remove Profile from a Device")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Remove-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DeviceID `$DeviceID")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("      # Remove Profile from a Device Directory")
  [Void]$StringBuilder.AppendLine("      `$ProfileList = Remove-UMSProfileAssignment -WebSession `$WebSession -ComputerName `$ComputerName -ProfileID `$ProfileID -DirectoryID `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Microsoft.Powershell.Commands.Webrequestsession]`$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$ProfileID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DeviceID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Directory`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$DirectoryID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Remove-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # New Assignments for a Device or a Directory")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"Device`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DeviceID")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/thinclients`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpID = `$DirectoryID")
  [Void]$StringBuilder.AppendLine("    `$TmpPath = `"assignments/tcdirectories`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Make Rest API Call and Return the Information")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}/{4}/{5}/{6}`" -f `$ComputerName, `$Port, `$Version, `"profiles`", `$ProfileID, `$TmpPath, `$TmpID)")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Delete`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Make Rest API Call and Return Success Status")
  [Void]$StringBuilder.AppendLine("    `$Response = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("    # Return Success Status")
  [Void]$StringBuilder.AppendLine("    @{ `"Success`" = (`$Result.Message -match `"deleted profile assignment`") }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    throw `"Error Removing Profile Assignment`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Return Failed Status")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Remove-UMSProfileAssignment`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-UMSProfileAssignment")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-UMSProfileAssignment
  
  #region function Get-UMSStatus
  [Void]$StringBuilder.AppendLine("#region function Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("function Get-UMSStatus ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get List of Devices from UMS Rest API Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WebSession")
  [Void]$StringBuilder.AppendLine("      Web Session with Auth Cookie Returned from Connect-UMSRestAPI")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of UMS Rest API Web Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Port")
  [Void]$StringBuilder.AppendLine("      UMS Web Server Port")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Version")
  [Void]$StringBuilder.AppendLine("      UMS Rest API Version")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ")
  [Void]$StringBuilder.AppendLine("    .EXAMPLEs")
  [Void]$StringBuilder.AppendLine("      Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By %YourName%")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      %Date% - Initial Release")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    `$WebSession,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 65535)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Port = 8443,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(3)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Version = 3")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Get-UMSStatus`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Params = @{")
  [Void]$StringBuilder.AppendLine("    `"WebSession`" = `$WebSession")
  [Void]$StringBuilder.AppendLine("    `"Uri`"        = (`"https://{0}:{1}/umsapi/v{2}/{3}`" -f `$ComputerName, `$Port, `$Version, `"serverstatus`")")
  [Void]$StringBuilder.AppendLine("    `"Method`"     = `"Get`"")
  [Void]$StringBuilder.AppendLine("    `"Headers`"    = @{ }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$ReturnData = Invoke-UMSRestMethod @Params")
  [Void]$StringBuilder.AppendLine("  `$ReturnData")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Get-UMSStatus`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-UMSStatus")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-UMSStatus
  
  [Void]$StringBuilder.AppendLine("#endregion ******** UMS Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** UMS Rest API Functions ********
  
  #region ******** Cyber Ark Rest API Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Connect-MyCyberArk
  [Void]$StringBuilder.AppendLine("#region function Connect-MyCyberArk")
  [Void]$StringBuilder.AppendLine("Function Connect-MyCyberArk ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Auth Token for Cyber Ark")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ClientSecret")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Client Secret")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$AuthToken = Connect-MyCyberArk -ClientID `$ClientID -ClientSecret `$ClientSecret")
  [Void]$StringBuilder.AppendLine("      If (`$AuthToken.ExpiresIn -ne [DateTime]::MinValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Logon Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ClientSecret")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Header")
  [Void]$StringBuilder.AppendLine("  `$Headers = @{")
  [Void]$StringBuilder.AppendLine("    `"content-type`" = `"application/x-www-form-urlencoded`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Creaste Request Body")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"grant_type`"    = `"client_credentials`"")
  [Void]$StringBuilder.AppendLine("    `"client_id`"     = `$ClientID")
  [Void]$StringBuilder.AppendLine("    `"client_secret`" = `$ClientSecret")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # invoke Cyber Ark Login Rest API")
  [Void]$StringBuilder.AppendLine("    `$Request = Invoke-WebRequest -UseBasicParsing -Method POST -Headers `$Headers -Uri `"https://aat4728.id.cyberark.cloud/oauth2/platformtoken`" -Body `$Body")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Request.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Cyber Ark Auth Token")
  [Void]$StringBuilder.AppendLine("      `$TmpToken = `$Request.Content | ConvertFrom-Json")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::Now.AddSeconds(`$TmpToken.expires_in)")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`$(`$TmpToken.token_type) `$(`$TmpToken.access_token)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("      @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"Failed`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Generate Failed Logon Auto Token")
  [Void]$StringBuilder.AppendLine("    @{")
  [Void]$StringBuilder.AppendLine("      `"Content-Type`"  = `"Error`"")
  [Void]$StringBuilder.AppendLine("      `"ExpiresIn`"     = [DateTime]::MinValue")
  [Void]$StringBuilder.AppendLine("      `"Authorization`" = `"`$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-MyCyberArk")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-MyCyberArk
  
  #region function Add-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Add-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Add-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add New Account to a Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EntryName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Entry")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DomainName")
  [Void]$StringBuilder.AppendLine("      Domain Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER UserName")
  [Void]$StringBuilder.AppendLine("      User Name of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Password of the Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Comment")
  [Void]$StringBuilder.AppendLine("      Comment for the Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Result = Add-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName -UserName `$UserName -Password `$Password -DomainName `$DomainName")
  [Void]$StringBuilder.AppendLine("      if (`$Result.ID -ne `"Error`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Cyber Ark Add Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$EntryName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$DomainName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$UserName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password,")
  [Void]$StringBuilder.AppendLine("    [String]`$Comment = `"Kiosk User Account Added by '`$([System.Environment]::UserDomainName)\`$([System.Environment]::UserName)'`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpAddUser = [Ordered]@{")
  [Void]$StringBuilder.AppendLine("    `"name`"                 = `$EntryName")
  [Void]$StringBuilder.AppendLine("    `"address`"              = `$DomainName")
  [Void]$StringBuilder.AppendLine("    `"username`"             = `$UserName")
  [Void]$StringBuilder.AppendLine("    `"platformId`"           = `"Autologon_Disable_rotation`"")
  [Void]$StringBuilder.AppendLine("    `"safeName`"             = `$SafeName")
  [Void]$StringBuilder.AppendLine("    `"secretType`"           = `"password`"")
  [Void]$StringBuilder.AppendLine("    `"secret`"               = `$Password")
  [Void]$StringBuilder.AppendLine("    `"secretManagement`"     = @{")
  [Void]$StringBuilder.AppendLine("      `"automaticManagementEnabled`" = `"False`"")
  [Void]$StringBuilder.AppendLine("      `"manualManagementReason`"     = `$Comment")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"remoteMachinesAccess`" = @{")
  [Void]$StringBuilder.AppendLine("      `"remoteMachines`"                   = `$UserName")
  [Void]$StringBuilder.AppendLine("      `"accessRestrictedToRemoteMachines`" = `"true`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("    `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/Accounts`"")
  [Void]$StringBuilder.AppendLine("    `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body (`$TmpAddUser | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("    # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("    If (`$Results.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Success Ststus")
  [Void]$StringBuilder.AppendLine("      `$Results.Content | ConvertFrom-Json | ForEach-Object -Process { [MyCyberArkAccount]::New(`$PSItem.ID, `$PSItem.Name, `$PSItem.Address, `$PSItem.UserName) }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Failed Stataus")
  [Void]$StringBuilder.AppendLine("      [MyCyberArkAccount]::New(`"Error`", `$Results.StatusCode, `"Error`", `"Error`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Error Stataus")
  [Void]$StringBuilder.AppendLine("    [MyCyberArkAccount]::New(`"Error`", `"0`", `"Error`", `"`$(`$PSItem.Exception.Message)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyCyberArkAccount
  
  #region function Get-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Get-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Get-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get list of Cyber Ark User Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SafeName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Safe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modified")
  [Void]$StringBuilder.AppendLine("      Modified Time")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search Criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchType")
  [Void]$StringBuilder.AppendLine("      Search Type")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SavedFilter")
  [Void]$StringBuilder.AppendLine("      Saved Cyber Ark Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Offset")
  [Void]$StringBuilder.AppendLine("      Offset, Skip X Number of Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Limit")
  [Void]$StringBuilder.AppendLine("      Max Number of aqccounts to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      Get Password")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Accounts = Get-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -SafeName `$SafeName")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SafeName,")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Modified,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Search,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"contains`", `"startswith`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchType = `"contains`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"SearchFilter`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Regular`", `"Recently`", `"New`", `"Link`", `"Deleted`", `"PolicyFailures`", `"AccessedByUsers`", `"ModifiedByUsers`", `"ModifiedByCPM`", `"DisabledPasswordByUserDisabledPasswordByCPM`", `"ScheduledForChange`", `"ScheduledForVerify`", `"ScheduledForReconcile`", `"SuccessfullyReconciled`", `"FailedChange`", `"FailedVerify`", `"FailedReconcile`", `"LockedOrNew`", `"Locked`", `"Favorites`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$SavedFilter,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Offset = 0,")
  [Void]$StringBuilder.AppendLine("    [UInt16]`$Limit = 100,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$GetPassword")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Create StringBuilder to Generate the Cyber Ark Rest API Query String")
  [Void]$StringBuilder.AppendLine("  `$TmpSearch = [System.Text.StringBuilder]::New(`"filter=safename eq `$(`$SafeName) and ModificationTime gte 0`")")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Search`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Criteria")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Search`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpSearch.Append(`"&search=`$(`$Search -join ' ')&searchType=`$(`$SearchType)`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Add Search Saved Filter")
  [Void]$StringBuilder.AppendLine("    [Void]`$TmpSearch.Append(`"&savedfilter=`$(`$SavedFilter)`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  # Set Search Offset and Limit")
  [Void]$StringBuilder.AppendLine("  [Void]`$TmpSearch.Append(`"&offset=`$(`$offset)&limit=`$(`$Limit)`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("  `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts?`$(`$TmpSearch.ToString())`"")
  [Void]$StringBuilder.AppendLine("  `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Get -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("  If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Process Returened Cyber Ark Records")
  [Void]$StringBuilder.AppendLine("    `$TmpUsers = (`$Results.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TmpUser In `$TmpUsers)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create Return Object")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount = [MyCyberArkAccount]::New(`$TmpUser.ID, `$TmpUser.Name, `$TmpUser.Address, `$TmpUser.UserName, `$TmpUser.CreatedTime, `$TmpUser.secretManagement.lastModifiedTime)")
  [Void]$StringBuilder.AppendLine("      # Check if Get Password Switch was Passed")
  [Void]$StringBuilder.AppendLine("      If (`$GetPassword.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Generate Request URL and Body")
  [Void]$StringBuilder.AppendLine("        `$PwdUri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpUser.id)/Password/Retrieve/`"")
  [Void]$StringBuilder.AppendLine("        `$PwdBody = @{")
  [Void]$StringBuilder.AppendLine("          `"Reason`"     = `"Deployment Automation`"")
  [Void]$StringBuilder.AppendLine("          `"ActionType`" = `"Show`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("        `$PwdResult = Invoke-WebRequest -UseBasicParsing -Uri `$PwdUri -Method Post -Headers `$AuthToken -Body (`$PwdBody | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("        # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("        If (`$PwdResult.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Check for and Get/AddPassword")
  [Void]$StringBuilder.AppendLine("          `$TmpPword = [RegEx]::Match(`$PwdResult.Content, `"^```"(?<Password>.+)```"`$`")")
  [Void]$StringBuilder.AppendLine("          If (`$TmpPword.Groups[`"Password`"].Success)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Add Password")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`$TmpPword.Groups[`"Password`"].Value)")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Else")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Password Missing?")
  [Void]$StringBuilder.AppendLine("            `$TmpAccount.AddPassword(`"Missing`")")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          # Error Getting Password")
  [Void]$StringBuilder.AppendLine("          `$TmpAccount.AddPassword(`"Error`")")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Return Cyber Ark Account To Pipeline")
  [Void]$StringBuilder.AppendLine("      `$TmpAccount")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyCyberArkAccount
  
  #region function Remove-MyCyberArkAccount
  [Void]$StringBuilder.AppendLine("#region function Remove-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("Function Remove-MyCyberArkAccount ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Deletes a Cyber Ark User Account")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Authentication Token")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Vault Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark User ID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Results = Remove-MyCyberArkAccount -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID")
  [Void]$StringBuilder.AppendLine("      If (`$Result.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/api/accounts/`$(`$TmpID)/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Delete -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 204)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Returen Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Delete User Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Delete User: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyCyberArkAccount")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyCyberArkAccount
  
  #region function Update-MyCyberArkAccountPassword
  [Void]$StringBuilder.AppendLine("#region function Update-MyCyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("Function Update-MyCyberArkAccountPassword ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Updates the Password for Cyber Ark Accounts")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Authentication Token from Connect-MyCyberArkVault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VaultName")
  [Void]$StringBuilder.AppendLine("      Name of the Cyber Ark Vault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ID")
  [Void]$StringBuilder.AppendLine("      Cyber Ark Account ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Password")
  [Void]$StringBuilder.AppendLine("      New Password for the Cyber Ark Account")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Update-MyCyberArkAccountPassword -AuthToken `$AuthToken -VaultName `$VaultName -ID `$ID -Password `$Password")
  [Void]$StringBuilder.AppendLine("      If (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Password Updated")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$AuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VaultName,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$ID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Password")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Set / Create Request Body")
  [Void]$StringBuilder.AppendLine("  `$TmpChange = @{")
  [Void]$StringBuilder.AppendLine("    `"NewCredentials`" = `$Password")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$TmpPwdBody = `$TmpChange | ConvertTo-Json")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # process Cyber Ark IDs")
  [Void]$StringBuilder.AppendLine("  ForEach (`$TmpID In `$ID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Invoke Cyber Ark Rest API")
  [Void]$StringBuilder.AppendLine("      `$Uri = `"https://`$(`$VaultName).privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/`$(`$TmpID)/Password/Update/`"")
  [Void]$StringBuilder.AppendLine("      `$Results = Invoke-WebRequest -UseBasicParsing -Uri `$Uri -Method Post -Headers `$AuthToken -Body `$TmpPwdBody")
  [Void]$StringBuilder.AppendLine("      # Check / Verify Request Status Code")
  [Void]$StringBuilder.AppendLine("      If (`$Results.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Success Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$True")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update was Successfull`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Return Failed Status")
  [Void]$StringBuilder.AppendLine("        [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("          `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("          `"Message`" = `"Password Update Failed`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error Status")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("        `"Success`" = `$False")
  [Void]$StringBuilder.AppendLine("        `"ID`"      = `$TmpID")
  [Void]$StringBuilder.AppendLine("        `"Message`" = `"Password Update: `$(`$PSItem.Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Update-MyCyberArkAccountPassword")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Update-MyCyberArkAccountPassword
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Cyber Ark Rest API Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Cyber Ark Rest API Functions ********
  
  #region ******** VPSX Server Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Set-MyVPSXWebService
  [Void]$StringBuilder.AppendLine("#region function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Set-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER passThru")
  [Void]$StringBuilder.AppendLine("      Return the Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyVPSXWebService -VPSXUri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Set-MyVPSXWebService -VPSXUri `$VPSXUri -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyVPSXWebService
  
  #region function Get-MyVPSXWebService
  [Void]$StringBuilder.AppendLine("#region function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Set-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Sets the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER passThru")
  [Void]$StringBuilder.AppendLine("      Return the Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyVPSXWebService -VPSXUri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Set-MyVPSXWebService -VPSXUri `$VPSXUri -PassThru")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXWebService ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get the default VPSX Web Service Object")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService = Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$Script:VPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXWebService")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXWebService
  
  #region function Connect-MyVPSXSession
  [Void]$StringBuilder.AppendLine("#region function Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("function Connect-MyVPSXSession ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Login to VPSX Gateway and Return a Session ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXUri")
  [Void]$StringBuilder.AppendLine("      VPSX Server Soap Uri")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      URL to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession -PSXUri `$PSXUri -VPSXToken `$VPSXToken")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Make Initial Connection")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Refresh Current Connection")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("      if (`$VPSXSessionID.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Refresh Current Connection")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Init`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXUri,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Init`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Refresh`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSCmdlet.ParameterSetName -eq `"Init`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Connect To UMS Web Services")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebService = New-WebServiceProxy -Uri `$VPSXUri")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebToken = `$VPSXToken")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebService = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Script:VPSXWebToken = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Verify Connected to Web Services")
  [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty(`$Script:VPSXWebService.SoapVersion))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Login to UMS Web Services")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = `$Script:VPSXWebService.Gateway_Logon(`$Null, `$Script:VPSXWebToken)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Nissing Web Service")
  [Void]$StringBuilder.AppendLine("      `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Error Clear Session ID")
  [Void]$StringBuilder.AppendLine("    `$VPSXSessionID = `$Null")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Return Status / Session ID")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{ `"Success`" = (-not [String]::IsNullOrEmpty(`$VPSXSessionID)); `"SessionID`" = `$VPSXSessionID }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Connect-MyVPSXSession")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Connect-MyVPSXSession
  
  #region function Get-MyVPSXLocation
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXLocation ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Locations")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Locations to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Locations to Return")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXLocation -Scroll 0 -Maximum 100 -Location `$Location")
  [Void]$StringBuilder.AppendLine("      if (`$Locations.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [String]`$Location = `$Null")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Location List")
  [Void]$StringBuilder.AppendLine("    `$TmpLocations = [Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy1exe_vpsx_nlrswc2_exe_trid_VPSX.LCLST_Struct[]]::New(`$Maximum)")
  [Void]$StringBuilder.AppendLine("    `$ChkCount = `$VPSXWebService.VPS_GetLocations((`$VPSXSessionID).SessionID, `$Location, `$Scroll, `$Maximum, [Ref]`$TmpLocations)")
  [Void]$StringBuilder.AppendLine("    if (`$ChkCount -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Locations")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpLocations | Sort-Object -Property Loc | ForEach-Object -Process { [PSCustomObject]@{ `"Location`" = `"`$(`$PSItem.Loc)`".ToUpper(); `"HasChildren`" = `$PSItem.Child } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXLocation")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXLocation
  
  #region function Get-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get VPSX Items (Devices)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Items = Get-MyVPSXItem -Device `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Locations = Get-MyVPSXItem -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Items.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Device`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Device")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @(`$VPSXWebService.VSPA_GetItems((`$VPSXSessionID).SessionID, 1, `$Item, `$Maximum, `$Scroll, `$Null))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Device List")
  [Void]$StringBuilder.AppendLine("      `$TmpItems = @(`$VPSXWebService.VSPA_GetItems((`$VPSXSessionID).SessionID, 1, `$Null, 1, 0, `$Item))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TmpItems.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpItems | ForEach-Object -Process { [PSCustomObject]@{ `"Item`" = `$PSItem.Item; `"Description`" = `$PSItem.Desc; `"DefaultPrt`" = `$PSItem.DefaultPrt } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXItem
  
  #region function Add-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Add-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("function Add-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Add a New Item / Device to the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Description")
  [Void]$StringBuilder.AppendLine("      Description of Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItem -Item `$Item -Description `$Description")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Description")
  [Void]$StringBuilder.AppendLine(")")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_SetItem((`$VPSXSessionID).SessionID, 1, `$Item, `$Description, 0)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `"Item Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Description`" = `$Description; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyVPSXItem
  
  #region function Remove-MyVPSXItem
  [Void]$StringBuilder.AppendLine("#region function Remove-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("Function Remove-MyVPSXItem ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Removes an Item / Device from the VPSX Server")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Remove-MyVPSXItem -Item `$Item")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_RemoveItem((`$VPSXSessionID).SessionID, 1, `$Item)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Message`" = `"Item Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyVPSXItem")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyVPSXItem
  
  #region function Get-MyVPSXPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXPrinter")
  [Void]$StringBuilder.AppendLine("function Get-MyVPSXPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Location")
  [Void]$StringBuilder.AppendLine("      Location of Printers")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXPrinter -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXPrinter -Scroll 0 -Maximum 100 -Printer `$Printer -Location `$Location -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Location,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Int]`$FirstPrt = 0")
  [Void]$StringBuilder.AppendLine("    [Int]`$LastPrt = 0")
  [Void]$StringBuilder.AppendLine("    [Int]`$TotalPrt = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VPS_PrtList7((`$VPSXSessionID).SessionID, `$Printer, `$Null, `$Null, 0, `$Maximum, `$Scroll, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Location, [ref]`$FirstPrt, [ref]`$LastPrt, [ref]`$TotalPrt))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Printer List")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VPS_PrtList7((`$VPSXSessionID).SessionID, `$Nullr, `$Null, `$Null, 0, 1, 0, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Null, `$Printe, `$Location, [ref]`$FirstPrt, [ref]`$LastPrt, [ref]`$TotalPrt))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TotalPrt -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ `"Printer`" = `$PSItem.PrtName; `"VPSID`" = `$PSItem.VPSID; `"LongName`" = `$PSItem.PrtLName; `"Department`" = `$PSItem.Dept; `"Location`" = `"`$(`$PSItem.Location)`".ToUpper() } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXPrinter
  
  #region function Get-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Get-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("Function Get-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Scroll")
  [Void]$StringBuilder.AppendLine("      Scroll Position")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Maximum")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Devices to Return")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Return pRINTERS FOR")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Return / Search For")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Search")
  [Void]$StringBuilder.AppendLine("      Search for Printer")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Printers = Get-MyVPSXItemPrinter -Scroll 0 -Maximum 100 -Item `$Item -Printer `$Printer -Search")
  [Void]$StringBuilder.AppendLine("      if (`$Printers.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Scroll = 0,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Maximum = 100,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Printer`")]")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer = `$Null,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Search")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Get Device List")
  [Void]$StringBuilder.AppendLine("    if (`$Search.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Search for Printer")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VSPA_GetPrinters((`$VPSXSessionID).SessionID, 1, `$Item, `$Printer, `$Null, `$Maximum, `$Scroll, `$Null))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Get Printer List")
  [Void]$StringBuilder.AppendLine("      `$TmpPrinters = @(`$VPSXWebService.VSPA_GetPrinters((`$VPSXSessionID).SessionID, 1, `$Item, `$Null, `$Null, 1, 0, `$Printer))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check Devices were Found")
  [Void]$StringBuilder.AppendLine("    if (`$TmpPrinters.Count -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Devices")
  [Void]$StringBuilder.AppendLine("      ,@(`$TmpPrinters | ForEach-Object -Process { [PSCustomObject]@{ `"Printer`" = `$PSItem.Prt; `"IsDefault`" = `$PSItem.IsDefault } })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Empty Array")
  [Void]$StringBuilder.AppendLine("      ,@()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Empty Array")
  [Void]$StringBuilder.AppendLine("    ,@()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyVPSXItemPrinter
  
  #region function Add-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Add-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Add-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Default")
  [Void]$StringBuilder.AppendLine("      Set Printer as Default")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer -Default")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Default")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_AddPrinter(`$VPSXSessionID, 1, `$Item, `$Printer, `"VPS1`", `$Default.IsPresent)")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Printer Added`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Add-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Add-MyVPSXItemPrinter
  
  #region function Remove-MyVPSXItemPrinter
  [Void]$StringBuilder.AppendLine("#region function Remove-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("function Remove-MyVPSXItemPrinter ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Assign Printer to Item")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXWebService")
  [Void]$StringBuilder.AppendLine("      VPSX Web Services Object")
  [Void]$StringBuilder.AppendLine("    .PARAMETER VPSXToken")
  [Void]$StringBuilder.AppendLine("      VPSX Token to Login to the Wev Services")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Item")
  [Void]$StringBuilder.AppendLine("      Name of Device to Add Printer to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Printer")
  [Void]$StringBuilder.AppendLine("      Printer to Assign to Device")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Status = Add-MyVPSXItemPrinter -Item `$Item -Printer `$Printer")
  [Void]$StringBuilder.AppendLine("      if (`$Status.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Success`"")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Object]`$VPSXWebService = `$Script:VPSXWebService,")
  [Void]$StringBuilder.AppendLine("    [String]`$VPSXToken = `$Script:VPSXWebToken,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Item,")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Printer,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Default")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Connect to VPSX Web Services")
  [Void]$StringBuilder.AppendLine("  if ((`$VPSXSessionID = Connect-MyVPSXSession -VPSXWebService `$VPSXWebService -VPSXToken `$VPSXToken).Success)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    try")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Add Item / Device")
  [Void]$StringBuilder.AppendLine("      `$VPSXWebService.VSPA_RemovePrinter(`$VPSXSessionID, 1, `$Item, `$Printer, `"VPS1`")")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$True; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Printer Removed`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    catch")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Error")
  [Void]$StringBuilder.AppendLine("      [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `$PSItem.Exception.Message }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Failed")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Item`" = `$Item; `"Printer`" = `$Printer; `"Message`" = `"Connection Failed`" }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyVPSXItemPrinter")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Remove-MyVPSXItemPrinter
  
  [Void]$StringBuilder.AppendLine("#endregion ******** VPSX Server Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** VPSX Server Functions ********
  
  #region ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#region ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region function Set-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AddMinutes")
  [Void]$StringBuilder.AppendLine("      Add Minutes to the Token Expiration")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("      if (`$MyRunbookToken.Success)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Success!")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [UInt32]`$AddMinutes = 15")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty(`$Script:AAAuthToken.ExpiresOn) -or (`$Script:AAAuthToken.ExpiresOn -le [DateTime]::Now.AddMinutes(`$AddMinutes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$AccessToken = Get-AzAccessToken -ResourceUrl `"https://management.azure.com/`" -AsSecureString")
  [Void]$StringBuilder.AppendLine("      `$Script:AAAuthToken = @{")
  [Void]$StringBuilder.AppendLine("        `"Content-Type`"  = `"application/json`"")
  [Void]$StringBuilder.AppendLine("        `"Authorization`" = `"Bearer `$([Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(`$AccessToken.Token)))`"")
  [Void]$StringBuilder.AppendLine("        `"ExpiresOn`"     = (`$AccessToken.ExpiresOn.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookToken
  
  #region function Get-MyRunbookToken
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookToken ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookToken = Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAuthToken")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookToken")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookToken
  
  #region function Set-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("Function Set-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Set the Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Set-MyRunbookOptions -SubscriptionID `$SubscriptionID -ResourceGroup `$ResourceGroup -AutomationAccount `$AutomationAccount -Runbook `$Runbook")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Script:AASubscriptionID = `$SubscriptionID")
  [Void]$StringBuilder.AppendLine("  `$Script:AAResourceGroup = `$ResourceGroup")
  [Void]$StringBuilder.AppendLine("  `$Script:AAAutomationAccount = `$AutomationAccount")
  [Void]$StringBuilder.AppendLine("  `$Script:AARunbook = `$Runbook")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Set-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Set-MyRunbookOptions
  
  #region function Get-MyRunbookOptions
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookOptions ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get the Set Runbook Automation Account Options")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$RunbookOptions = Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("    `"SubscriptionID`"    = `$Script:AASubscriptionID")
  [Void]$StringBuilder.AppendLine("    `"ResourceGroup`"     = `$Script:AAResourceGroup")
  [Void]$StringBuilder.AppendLine("    `"AutomationAccount`" = `$Script:AAAutomationAccount")
  [Void]$StringBuilder.AppendLine("    `"Runbook`"           = `$Script:AARunbook")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookOptions")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookOptions
  
  #region function Get-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Status")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status")
  [Void]$StringBuilder.AppendLine("    .PARAMETER StatusComp")
  [Void]$StringBuilder.AppendLine("      Runbook Job Status Comparison")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Create")
  [Void]$StringBuilder.AppendLine("      Runbook Jon Create Time")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Get-MyRunbookJob -Status `$Status")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ID`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Activating`", `"Blocked`", `"Completed`", `"Disconnected`", `"Failed`", `"New`", `"Queued`", `"Removing`", `"Resuming`", `"Running`", `"Stopped`", `"Stopping`", `"Suspended`", `"Suspending`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Status,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"eq`", `"ne`")]")
  [Void]$StringBuilder.AppendLine("    [string]`$StatusComp = `"eq`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Search`")]")
  [Void]$StringBuilder.AppendLine("    [DateTime]`$Create = [DateTime]::Now.AddHours(-12)")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$Search = [System.Text.StringBuilder]::New()")
  [Void]$StringBuilder.AppendLine("  if (`$PSCmdlet.ParameterSetName -ne `"ID`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"```$filter=properties/creationTime ge `$((`$Create.ToUniversalTime()).ToString(`"O`")) and properties/runbook/name eq '`$(`$Runbook)'`")")
  [Void]$StringBuilder.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Status`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$Search.Append(`" and properties/status `$(`$StatusComp) '`$(`$Status)'`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [Void]`$Search.Append(`"&`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)?`$(`$Search.ToString())api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Jobs = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$Jobs.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"ID`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$Jobs.Content | ConvertFrom-Json).Value")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJob
  
  #region function Get-MyRunbookJobOutput
  [Void]$StringBuilder.AppendLine("#region function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("Function Get-MyRunbookJobOutput ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Job Output")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobOutput = Get-MyRunbookJobOutput -JobID `$JobId")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/output?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method GET -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$JobOutput.Content")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRunbookJobOutput")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Get-MyRunbookJobOutput
  
  #region function Send-MyRunbookJobCommand
  [Void]$StringBuilder.AppendLine("#region function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("Function Send-MyRunbookJobCommand ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Send Comand to Runbook Job")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      Runbook Job JobID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Command")
  [Void]$StringBuilder.AppendLine("      Command to Send to the Runbook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Susprend`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Resume`"")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJobCommand = Send-MyRunbookJobCommand -JobID `$JobId -Command `"Stop`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Stop`", `"Susprend`", `"Resume`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$Command")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobID)/`$(`$Command)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$JobOutput = Invoke-WebRequest -Uri `$URI -Method POST -ContentType `"application/json`" -Headers `$AuthToken")
  [Void]$StringBuilder.AppendLine("  If (`$JobOutput.StatusCode -eq 200)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$True; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [PSCustomObject]@{ `"Success`" = `$False; `"Command`" = `$Command }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Send-MyRunbookJobCommand")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Send-MyRunbookJobCommand
  
  #region function Start-MyRunbookJob
  [Void]$StringBuilder.AppendLine("#region function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("Function Start-MyRunbookJob ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Runbook Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SubscriptionID")
  [Void]$StringBuilder.AppendLine("      Azure Subscriptuion ID")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ResourceGroup")
  [Void]$StringBuilder.AppendLine("      Azure Resource Group Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutomationAccount")
  [Void]$StringBuilder.AppendLine("      Azure Automation Account Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Runbook")
  [Void]$StringBuilder.AppendLine("      Azure Runbook Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AuthToken")
  [Void]$StringBuilder.AppendLine("      Automation Account AuthToken")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Runbook Job Name")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RunOn")
  [Void]$StringBuilder.AppendLine("      Hybrid Worker Group")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Parameters to Pass to the the RunBook Job")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRunbookJob = Start-MyRunbookJob -RunOn `$RunOn -Parameters `$Parameters")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$SubscriptionID = `$Script:AASubscriptionID,")
  [Void]$StringBuilder.AppendLine("    [String]`$ResourceGroup = `$Script:AAResourceGroup,")
  [Void]$StringBuilder.AppendLine("    [String]`$AutomationAccount = `$Script:AAAutomationAccount,")
  [Void]$StringBuilder.AppendLine("    [String]`$Runbook = `$Script:AARunbook,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$AuthToken = `$Script:AAAuthToken,")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = ([System.Guid]::NewGuid()).Guid,")
  [Void]$StringBuilder.AppendLine("    [String]`$RunOn,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Parameters = @{}")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$URI = `"https://management.azure.com/subscriptions/`$(`$SubscriptionID)/resourceGroups/`$(`$ResourceGroup)/providers/Microsoft.Automation/automationAccounts/`$(`$AutomationAccount)/jobs/`$(`$JobName)?api-version=2023-11-01`"")
  [Void]$StringBuilder.AppendLine("  `$Body = @{")
  [Void]$StringBuilder.AppendLine("    `"properties`" = @{")
  [Void]$StringBuilder.AppendLine("      `"runbook`" = @{ `"name`" = `$Runbook }")
  [Void]$StringBuilder.AppendLine("      `"parameters`" = `$Parameters")
  [Void]$StringBuilder.AppendLine("      `"runOn`"   = `$RunOn")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$NewJob = Invoke-WebRequest -Uri `$URI -Method PUT -ContentType `"application/json`" -Headers `$AuthToken -Body (`$Body | ConvertTo-Json)")
  [Void]$StringBuilder.AppendLine("  If (`$NewJob.StatusCode -eq 201)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$NewJob.Content | ConvertFrom-Json)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function `$(`$MyInvocation.MyCommand)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRunbookJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Start-MyRunbookJob
  
  [Void]$StringBuilder.AppendLine("#endregion ******** Automation Account Functions ********")
  [Void]$StringBuilder.AppendLine("")
  
  #endregion ******** Automation Account Functions ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ My Custom Functions ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptFunctions"
}
#endregion function Build-MyScriptFunctions

#region function Build-MyScriptMultiThread
function Build-MyScriptMultiThread ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptMultiThread -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptMultiThread"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Multiple Thread Functions <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Custom Objects MyRSPool / MyRSJob  ********
  [Void]$StringBuilder.AppendLine("#region ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Collections.Generic;")
  [Void]$StringBuilder.AppendLine("using System.Management.Automation;")
  [Void]$StringBuilder.AppendLine("using System.Threading;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSJob")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;")
  [Void]$StringBuilder.AppendLine("  private System.String _PoolName;")
  [Void]$StringBuilder.AppendLine("  private System.Guid _PoolID;")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.PowerShell _PowerShell;")
  [Void]$StringBuilder.AppendLine("  private System.IAsyncResult _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("  private System.Object _InputObject = null;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSJob(System.String Name, System.Management.Automation.PowerShell PowerShell, System.IAsyncResult PowerShellAsyncResult, System.Object InputObject, System.String PoolName, System.Guid PoolID)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _PoolName = PoolName;")
  [Void]$StringBuilder.AppendLine("    _PoolID = PoolID;")
  [Void]$StringBuilder.AppendLine("    _PowerShell = PowerShell;")
  [Void]$StringBuilder.AppendLine("    _PowerShellAsyncResult = PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    _InputObject = InputObject;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String PoolName")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolName;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid PoolID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PoolID;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PowerShell PowerShell")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSInvocationState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Exception Reason")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.InvocationStateInfo.Reason;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool HadErrors")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.HadErrors;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Command")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Commands.Commands[0].ToString();")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.IAsyncResult PowerShellAsyncResult")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public bool IsCompleted")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShellAsyncResult.IsCompleted;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Object InputObject")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _InputObject;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.DebugRecord> Debug")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Debug;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ErrorRecord> Error")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Error;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ProgressRecord> Progress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Progress;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.VerboseRecord> Verbose")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Verbose;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.WarningRecord> Warning")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _PowerShell.Streams.Warning;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("public class MyRSPool")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  private System.String _Name;  ")
  [Void]$StringBuilder.AppendLine("  private System.Management.Automation.Runspaces.RunspacePool _RunspacePool;")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Generic.List<MyRSJob> Jobs = new System.Collections.Generic.List<MyRSJob>();")
  [Void]$StringBuilder.AppendLine("  private System.Collections.Hashtable _SyncedHash;")
  [Void]$StringBuilder.AppendLine("  private System.Threading.Mutex _Mutex;  ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash, System.String Mutex) ")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    _Name = Name;")
  [Void]$StringBuilder.AppendLine("    _RunspacePool = RunspacePool;")
  [Void]$StringBuilder.AppendLine("    _SyncedHash = SyncedHash;")
  [Void]$StringBuilder.AppendLine("    _Mutex = new System.Threading.Mutex(false, Mutex);")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Collections.Hashtable SyncedHash")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _SyncedHash;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Threading.Mutex Mutex")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Mutex;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.String Name")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _Name;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Guid InstanceID")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.InstanceId;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  public System.Management.Automation.Runspaces.RunspacePoolState State")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    get")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      return _RunspacePool.RunspacePoolStateInfo.State;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$Script:MyHiddenRSPool = [System.Collections.Generic.Dictionary[[String], [MyRSPool]]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** Custom Objects MyRSPool / MyRSJob ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Custom Objects MyRSPool / MyRSJob  ********
  
  #region ******** function Start-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Start-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Functions")
  [Void]$StringBuilder.AppendLine("      Functions to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Variables")
  [Void]$StringBuilder.AppendLine("      Variables to include in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Modules")
  [Void]$StringBuilder.AppendLine("      Modules to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PSSnapins")
  [Void]$StringBuilder.AppendLine("      PSSnapins to load in the initial Session State")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Hashtable")
  [Void]$StringBuilder.AppendLine("      Synced Hasttable to pass values between threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mutex")
  [Void]$StringBuilder.AppendLine("      Protects access to a shared resource")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxJobs")
  [Void]$StringBuilder.AppendLine("      Maximum Number of Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create the Default RunspacePool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPool = Start-MyRSPool -PoolName `$PoolName -MaxJobs `$MaxJobs -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Create a New RunspacePool and Return the RSPool to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Functions,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Variables,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Modules,")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PSSnapins,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Hashtable = @{ `"Enabled`" = `$True },")
  [Void]$StringBuilder.AppendLine("    [String]`$Mutex,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(1, 64)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxJobs = 8,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # check if Runspace Pool already exists")
  [Void]$StringBuilder.AppendLine("  if (`$Script:MyHiddenRSPool.ContainsKey(`$PoolName))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Return Existing Runspace Pool")
  [Void]$StringBuilder.AppendLine("    [MyRSPool](`$Script:MyHiddenRSPool[`$PoolName])")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Create Default Session State")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import Modules")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Modules`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSModule(`$Modules)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Import PSSnapins")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"PSSnapins`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$InitialSessionState.ImportPSSnapIn(`$PSSnapins, [Ref]`$Null)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Common Functions")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Functions`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Functions.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New(`$Key, `$Functions[`$Key])))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Default Variables")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Variables`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Key in `$Variables.Keys)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`$Key, `$Variables[`$Key], `"`$Key = `$(`$Variables[`$Key])`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Create and Open RunSpacePool")
  [Void]$StringBuilder.AppendLine("    `$SyncedHash = [Hashtable]::Synchronized(`$Hashtable)")
  [Void]$StringBuilder.AppendLine("    `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"SyncedHash`", `$SyncedHash, `"SyncedHash = Synced Hashtable`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Mutex`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"Mutex`", `$Mutex, `"Mutex = `$Mutex`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash, `$Mutex)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
  [Void]$StringBuilder.AppendLine("      `$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.ApartmentState = `"STA`"")
  [Void]$StringBuilder.AppendLine("    #`$RSPool.RunspacePool.ApartmentState = `"MTA`"")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)")
  [Void]$StringBuilder.AppendLine("    `$RSPool.RunspacePool.Open()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Script:MyHiddenRSPool.Add(`$PoolName, `$RSPool)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Start-MyRSPool`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSPool ********
  
  #region ******** function Get-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Get-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get RunspacePools that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get all RSPools")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"All`" {")
  [Void]$StringBuilder.AppendLine("        # Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$PoolName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern})")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$PoolID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********
  
  #region ******** function Close-MyRSPool ********
  [Void]$StringBuilder.AppendLine("#region function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("function Close-MyRSPool()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Close RunspacePool and Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to clsoe")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RSPool to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      PoolID of Job to close")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to close")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close-MyRSPool -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Close Specified RSPools")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"RSPool`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Close RunspacePools, This will Stop all Running Jobs")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempPool in `$TempPools)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (-not [String]::IsNullOrEmpty(`$TempPool.Mutex))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Close()")
  [Void]$StringBuilder.AppendLine("        `$TempPool.Mutex.Dispose()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Close()")
  [Void]$StringBuilder.AppendLine("      `$TempPool.RunspacePool.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool.Remove(`$TempPool.Name)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function v ********
  
  #region ******** function Start-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Start-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Creates or Updates a RunspacePool")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to add new RunspacePool Jobs to")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of RunspacePool")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      Object / Value to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputParam")
  [Void]$StringBuilder.AppendLine("      Paramter to pass the Object / Value as")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of RunspacePool Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      RunspacePool Job ScriptBock to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Parameters")
  [Void]$StringBuilder.AppendLine("      Common Paramaters to pass to the RunspacePool Job ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Start-MyRSJob -ScriptBlock `$ScriptBlock -JobName `$JobName -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -RSPool `$RSPool -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolName `$PoolName -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolID `$PoolID -JobName `$JobName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Add new RSJobs to the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RSPool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$InputObject,")
  [Void]$StringBuilder.AppendLine("    [String]`$InputParam = `"InputObject`",")
  [Void]$StringBuilder.AppendLine("    [String]`$JobName = `"Job Name`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock,")
  [Void]$StringBuilder.AppendLine("    [Hashtable]`$Parameters,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"RSPool`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPool = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Start-MyRSPool -PoolName `$PoolName -PassThru)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPool = [MyRSPool](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for New Jobs")
  [Void]$StringBuilder.AppendLine("    `$NewJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"InputObject`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Object in `$InputObject)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("        `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("        # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("        `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("        # Add Parameters")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameter(`$InputParam, `$Object)")
  [Void]$StringBuilder.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        # set Job Name")
  [Void]$StringBuilder.AppendLine("        if ((`$Object -is [String]) -or (`$Object -is [ValueType]))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJobName = `"`$JobName - `$(`$Object)`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJobName = `$(`$Object.`$JobName)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        [Void]`$NewJobs.Add(([MyRSjob]::New(`$TempJobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Object, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Create New PowerShell Instance with ScriptBlock")
  [Void]$StringBuilder.AppendLine("      `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
  [Void]$StringBuilder.AppendLine("      # Set RunspacePool")
  [Void]$StringBuilder.AppendLine("      `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
  [Void]$StringBuilder.AppendLine("      # Add Parameters")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PowerShell.AddParameters(`$Parameters)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      [Void]`$NewJobs.Add(([MyRSjob]::New(`$JobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Null, `$TempPool.Name, `$TempPool.InstanceID)))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$NewJobs.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempPool.Jobs.AddRange(`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      # Return Jobs only if New RunspacePool")
  [Void]$StringBuilder.AppendLine("      if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$NewJobs)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$NewJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Start-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Start-MyRSJob ********
  
  #region ******** function Get-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Get-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set Job State RegEx Pattern")
  [Void]$StringBuilder.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `$State -join `"|`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StatePattern = `".*`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Pool`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool")
  [Void]$StringBuilder.AppendLine("        `$TempPools = `$RSPool")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolName`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set Pool Name and Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolName `$PoolName)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"PoolID`$`" {")
  [Void]$StringBuilder.AppendLine("        # Set PoolID Return Matching Pools")
  [Void]$StringBuilder.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolID `$PoolID)")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"^JobName`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job Name RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$NamePattern = `$JobName -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `"^JobID`" {")
  [Void]$StringBuilder.AppendLine("        # Set Job ID RegEx Pattern and Return Matching Jobs")
  [Void]$StringBuilder.AppendLine("        `$IDPattern = `$JobID -join `"|`"")
  [Void]$StringBuilder.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern } })")
  [Void]$StringBuilder.AppendLine("        Break;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Get-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Get-MyRSJob ********
  
  #region ******** function Wait-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Wait-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Wait for RSJob to Finish")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("      ScriptBlock to invoke while waiting")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      [System.Threading.Thread]::Sleep(250)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      TimeSpace to wait")
  [Void]$StringBuilder.AppendLine("    .PARAMETER NoWait")
  [Void]$StringBuilder.AppendLine("      No Wait, Return when any Job states changes to Stopped, Completed, or Failed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PassThru")
  [Void]$StringBuilder.AppendLine("      Return the New Jobs to the Pipeline")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -RSPool `$RSPool -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolName `$PoolName -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolID `$PoolID -PassThru")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Wait for and Get RSJobs from the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(`"0:00:00`", `"8:00:00`")]")
  [Void]$StringBuilder.AppendLine("    [TimeSpan]`$Wait = `"0:05:00`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$NoWait,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$PassThru")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"PassThru`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"PassThru`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Wait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Wait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"NoWait`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"NoWait`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ScriptBlock`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"ScriptBlock`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Wait Jobs")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](`$RSJob))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Wait for Jobs to be Finshed")
  [Void]$StringBuilder.AppendLine("    if (`$NoWait.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      While (@((`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -eq `$WaitJobs.Count)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Object[]]`$CheckJobs = `$WaitJobs.ToArray()")
  [Void]$StringBuilder.AppendLine("      `$Start = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("      While (@((`$CheckJobs = `$CheckJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -and ((([DateTime]::Now - `$Start) -le `$Wait) -or (`$Wait.Ticks -eq 0)))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$SciptBlock.Invoke()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassThru.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Return Completed Jobs")
  [Void]$StringBuilder.AppendLine("      [MyRSJob[]](`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -match `"Stopped|Completed|Failed`" })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$WaitJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Wait-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Wait-MyRSJob ********
  
  #region ******** function Stop-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Stop-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Stop all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Stop all Jobs that have not Finished")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Stop-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Stop-MyRSJob ********
  
  #region ******** function Receive-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Receive-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Receive Output from Completed Jobs")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolName")
  [Void]$StringBuilder.AppendLine("      Name of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER PoolID")
  [Void]$StringBuilder.AppendLine("      ID of Pool to Get Jobs From")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobName")
  [Void]$StringBuilder.AppendLine("      Name of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER JobID")
  [Void]$StringBuilder.AppendLine("      ID of Jobs to Get")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoRemove")
  [Void]$StringBuilder.AppendLine("      Remove Jobs after Receiving Output")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -RSPool `$RSPool -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolName `$PoolName -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$MyResults = Receive-MyRSJob -PoolID `$PoolID -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Receive Results from RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoRemove,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"AutoRemove`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"AutoRemove`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$PSBoundParameters.Add(`"State`", `"Completed`")")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Receive all Complted Jobs, Remove Job if Required")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.IsCompleted)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        Try")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TempJob.PowerShell.EndInvoke(`$TempJob.PowerShellAsyncResult)")
  [Void]$StringBuilder.AppendLine("          # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("          [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        Catch")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$AutoRemove.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("      foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("        [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Receive-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Receive-MyRSJob ********
  
  #region ******** function Remove-MyRSJob ********
  [Void]$StringBuilder.AppendLine("#region function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("function Remove-MyRSJob()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Function to do something specific")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSPool")
  [Void]$StringBuilder.AppendLine("      RunspacePool to search")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Name")
  [Void]$StringBuilder.AppendLine("      Name of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InstanceId")
  [Void]$StringBuilder.AppendLine("      InstanceId of Job to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RSJob")
  [Void]$StringBuilder.AppendLine("      RunspacePool Jobs to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER State")
  [Void]$StringBuilder.AppendLine("      State of Jobs to search for")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Force")
  [Void]$StringBuilder.AppendLine("      Force the Job to stop")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Default RSPool")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -RSPool `$RSPool")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolName `$PoolName")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove-MyRSJob -PoolID `$PoolID")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Remove all RSJobs in the Specified RSPool")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSPool[]]`$RSPool,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid]`$PoolID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$JobName = `".*`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [Guid[]]`$JobID,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
  [Void]$StringBuilder.AppendLine("    [MyRSJob[]]`$RSJob,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$State,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Force")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Begin")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Force`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Force`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # List for Remove Jobs")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Begin Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Process")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Add Passed RSJobs to `$Jobs")
  [Void]$StringBuilder.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = `$RSJob")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove all Jobs, Stop all Running if Forced")
  [Void]$StringBuilder.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (`$Force -and `$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempJob.PowerShell.Stop()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      if (`$TempJob.State -match `"Stopped|Completed|Failed`")")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Add Job to Remove List")
  [Void]$StringBuilder.AppendLine("        [Void]`$RemoveJobs.Add(`$TempJob)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Process Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  End")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Remove RSJobs")
  [Void]$StringBuilder.AppendLine("    foreach (`$RemoveJob in `$RemoveJobs)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RemoveJob.PowerShell.Dispose()")
  [Void]$StringBuilder.AppendLine("      [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$RemoveJobs.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Garbage Collect, Recover Resources")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob End Block`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Remove-MyRSJob")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** function Remove-MyRSJob ********
  
  #region ******** RSPools Sample Code ********
  [Void]$StringBuilder.AppendLine("#region ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region function Test-Function")
  [Void]$StringBuilder.AppendLine("Function Test-Function")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test Function for RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
  [Void]$StringBuilder.AppendLine("      Value Command Line Parameter")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Function -Value `"String`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, HelpMessage = `"Enter Value`", ParameterSetName = `"Default`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Value = `"Default Value`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds (1000 * 5)")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$Value)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: ```$Item = `$Item`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Test-Function`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Test-Function")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region Job `$ScriptBlock")
  [Void]$StringBuilder.AppendLine("`$ScriptBlock = {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Test RunspacePool ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InputObject")
  [Void]$StringBuilder.AppendLine("      InputObject passed to script")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-Script.ps1 -InputObject `$InputObject")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
  [Void]$StringBuilder.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Thread Script Variables")
  [Void]$StringBuilder.AppendLine("        [String]`$Mutex - Exist only if -Mutex was specified on the Start-MyRSPool command line")
  [Void]$StringBuilder.AppendLine("        [HashTable]`$SyncedHash - Always Exists, Default values `$SyncedHash.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"ByValue`")]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$InputObject")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Generate Error Message to show in Error Buffer")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("  GenerateErrorMessage")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Enable Verbose logging")
  [Void]$StringBuilder.AppendLine("  `$VerbosePreference = `"Continue`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Check is Thread is Enabled to Run")
  [Void]$StringBuilder.AppendLine("  if (`$SyncedHash.Enabled)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Call Imported Test Function")
  [Void]$StringBuilder.AppendLine("    Test-Function -Value `$InputObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Check if a Mutex exist")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Mutex))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Open and wait for Mutex")
  [Void]$StringBuilder.AppendLine("      `$MyMutex = [System.Threading.Mutex]::OpenExisting(`$Mutex)")
  [Void]$StringBuilder.AppendLine("      [Void](`$MyMutex.WaitOne())")
  [Void]$StringBuilder.AppendLine("      `$HasMutex = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Write Data to the Screen")
  [Void]$StringBuilder.AppendLine("    For (`$Count = 0; `$Count -le 8; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Host -Object `"```$InputObject = `$InputObject`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Release the Mutex if it Exists")
  [Void]$StringBuilder.AppendLine("    if (`$HasMutex)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$MyMutex.ReleaseMutex()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Return Value: RSJob was Canceled`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#region `$WaitScript")
  [Void]$StringBuilder.AppendLine("`$WaitScript = {")
  [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Completed `$(@(Get-MyRSJob | Where-Object -FilterScript { `$PSItem.State -eq 'Completed' }).Count) Jobs`"")
  [Void]$StringBuilder.AppendLine("  Start-Sleep -Milliseconds 1000")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("<#")
  [Void]$StringBuilder.AppendLine("`$TestFunction = @{}")
  [Void]$StringBuilder.AppendLine("`$TestFunction.Add(`"Test-Function`", (Get-Command -Type Function -Name Test-Function).ScriptBlock)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Start and Get RSPool")
  [Void]$StringBuilder.AppendLine("`$RSPool = Start-MyRSPool -MaxJobs 8 -Functions `$TestFunction -PassThru #-Mutex `"TestMutex`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Create new RunspacePool and start 5 Jobs")
  [Void]$StringBuilder.AppendLine("1..10 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Add 5 new Jobs to an existing RunspacePool")
  [Void]$StringBuilder.AppendLine("11..20 | Start-MyRSJob -ScriptBlock `$ScriptBlock -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Disable Thread Script")
  [Void]$StringBuilder.AppendLine("#`$RSPool.SyncedHash.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Wait for all Jobs to Complete or Fail")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Wait-MyRSJob -SciptBlock `$WaitScript -PassThru | Out-String")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Receive Completed Jobs and Remove them")
  [Void]$StringBuilder.AppendLine("Get-MyRSJob | Receive-MyRSJob -AutoRemove")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("# Close RunspacePool")
  [Void]$StringBuilder.AppendLine("Close-MyRSPool")
  [Void]$StringBuilder.AppendLine("#>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ******** RSPools Sample Code ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** RSPools Sample Code ********
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Multiple Thread Functions ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptMultiThread"
}
#endregion function Build-MyScriptMultiThread

#region function Build-MyScriptJobsThreads
function Build-MyScriptJobsThreads ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptJobsThreads -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptJobsThreads"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Jobs Multi Thread <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** Job Thread ScriptBlock ********
  [Void]$StringBuilder.AppendLine("#region ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("`$ThreadScriptJob = {")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ComputerName")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ErrorActionPreference = `"Stop`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Default Job Data that is returned to the Main Script, Returned values cannot be `$Null, Emptry strings are OK")
  [Void]$StringBuilder.AppendLine("  `$JobData = [PSCustomObject]@{`"Status`" = `"Processing...`";")
  [Void]$StringBuilder.AppendLine("                               `"BeginTime`" = (Get-Date);")
  [Void]$StringBuilder.AppendLine("                               `"EndTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("                               `"ErrorMessage`" = `"`"}")
  [Void]$StringBuilder.AppendLine("")
  #region function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("  #region function Test-MyWorkstation")
  [Void]$StringBuilder.AppendLine("  function Test-MyWorkstation()")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Verify Remote Workstation is the Correct One")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ComputerName")
  [Void]$StringBuilder.AppendLine("      Name of the Computer to Verify")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Credential")
  [Void]$StringBuilder.AppendLine("      Credentials to use when connecting to the Remote Computer")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Wait")
  [Void]$StringBuilder.AppendLine("      How Long to Wait for Job to be Completed")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Serial")
  [Void]$StringBuilder.AppendLine("      Return Serial Number")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Mobile")
  [Void]$StringBuilder.AppendLine("      Check if System is Desktop / Laptop")
  [Void]$StringBuilder.AppendLine("    .INPUTS")
  [Void]$StringBuilder.AppendLine("    .OUTPUTS")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
  [Void]$StringBuilder.AppendLine("      [String[]]`$ComputerName = [System.Environment]::MachineName,")
  [Void]$StringBuilder.AppendLine("      [PSCredential]`$Credential,")
  [Void]$StringBuilder.AppendLine("      [ValidateRange(30, 300)]")
  [Void]$StringBuilder.AppendLine("      [Int]`$Wait = 120,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Serial,")
  [Void]$StringBuilder.AppendLine("      [Switch]`$Mobile")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Begin")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Default Common Get-WmiObject Options")
  [Void]$StringBuilder.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null;")
  [Void]$StringBuilder.AppendLine("          `"Credential`" = `$Credential")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Params = @{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Null")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Process")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      ForEach (`$Computer in `$ComputerName)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Used to Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$StartTime = [DateTime]::Now")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Default Custom Object for the Verify Function to Return, Since it will always return a value I create the Object with the default error / failure values and update the poperties as needed")
  [Void]$StringBuilder.AppendLine("        #region >>>>>>>>>>>>>>>> Custom Return Object `$VerifyObject <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = [PSCustomObject]@{")
  [Void]$StringBuilder.AppendLine("          `"ComputerName`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"FQDN`" = `$Computer.ToUpper();")
  [Void]$StringBuilder.AppendLine("          `"Found`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"UserName`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Domain`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"DomainMember`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ProductType`" = 0;")
  [Void]$StringBuilder.AppendLine("          `"Manufacturer`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Model`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IsMobile`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"SerialNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Memory`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"OperatingSystem`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"BuildNumber`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Version`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"ServicePack`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Architecture`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Is64Bit`" = `$False;")
  [Void]$StringBuilder.AppendLine("          `"LocalDateTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"InstallDate`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"LastBootUpTime`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"IPAddress`" = `"`";")
  [Void]$StringBuilder.AppendLine("          `"Status`" = `"Off-Line`";")
  [Void]$StringBuilder.AppendLine("          `"Time`" = [TimeSpan]::Zero")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        #endregion")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Try")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
  [Void]$StringBuilder.AppendLine("            `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
  [Void]$StringBuilder.AppendLine("            ForEach (`$IPAddress in `$IPAddresses)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              # I think this is Faster than using Test-Connection")
  [Void]$StringBuilder.AppendLine("              if ((([System.Net.NetworkInformation.Ping]::New()).Send(`$IPAddress)).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$Params.ComputerName = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Setting Return Values as they are Found")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.Status = `"On-Line`"")
  [Void]$StringBuilder.AppendLine("                `$VerifyObject.IPAddress = `$IPAddress")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Start Primary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_ComputerSystem)")
  [Void]$StringBuilder.AppendLine("                # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  # Get Job Data")
  [Void]$StringBuilder.AppendLine("                  `$MyCompData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.ComputerName = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.PartOfDomain)")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)``.`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.UserName = `"`$(`$MyCompData.UserName)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Domain = `"`$(`$MyCompData.Domain)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.DomainMember = `$MyCompData.PartOfDomain")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Manufacturer = `"`$(`$MyCompData.Manufacturer)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Model = `"`$(`$MyCompData.Model)`"")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Memory = `"`$(`$MyCompData.TotalPhysicalMemory)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                  # Verify Remote Computer is the Connect Computer, No need to get any more information")
  [Void]$StringBuilder.AppendLine("                  if (`$MyCompData.Name -eq @(`$Computer.Split(`".`", [System.StringSplitOptions]::RemoveEmptyEntries))[0])")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    # Found Corrct Workstation")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Found = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                    [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_OperatingSystem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                    [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                    if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Get Job Data")
  [Void]$StringBuilder.AppendLine("                      `$MyOSData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Set Found Properties")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ProductType = `$MyOSData.ProductType")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.OperatingSystem = `"`$(`$MyOSData.Caption)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.ServicePack = `"`$(`$MyOSData.CSDVersion)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.BuildNumber = `"`$(`$MyOSData.BuildNumber)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Version = `"`$(`$MyOSData.Version)`"")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Architecture = `$(if ([String]::IsNullOrEmpty(`$MyOSData.OSArchitecture)) { `"32-bit`" }")
  [Void]$StringBuilder.AppendLine("                        else { `"`$(`$MyOSData.OSArchitecture)`" })")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Is64Bit = (`$VerifyObject.Architecture -eq `"64-bit`")")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LocalDateTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.InstallDate = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.LastBootUpTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                    else")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      `$VerifyObject.Status = `"Verify Operating System Error`"")
  [Void]$StringBuilder.AppendLine("                      [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional SerialNumber Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Serial.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyBIOSJob = Get-WmiObject -AsJob @Params -Class Win32_Bios)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyBIOSJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyBIOSJob.State -eq `"Completed`" -and `$MyBIOSJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyBIOSData = Get-Job -ID `$MyBIOSJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.SerialNumber = `"`$(`$MyBIOSData.SerialNumber)`"")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify SerialNumber Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyBIOSJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                    # Optional Mobile / ChassisType Job")
  [Void]$StringBuilder.AppendLine("                    if (`$Mobile.IsPresent)")
  [Void]$StringBuilder.AppendLine("                    {")
  [Void]$StringBuilder.AppendLine("                      # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
  [Void]$StringBuilder.AppendLine("                      [Void](`$MyChassisJob = Get-WmiObject -AsJob @Params -Class Win32_SystemEnclosure)")
  [Void]$StringBuilder.AppendLine("                      # Wait for Job to Finish or Wait Time has Elasped")
  [Void]$StringBuilder.AppendLine("                      [Void](Wait-Job -Job `$MyChassisJob -Timeout `$Wait)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                      # Check if Job is Complete and has Data")
  [Void]$StringBuilder.AppendLine("                      if (`$MyChassisJob.State -eq `"Completed`" -and `$MyChassisJob.HasMoreData)")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        # Get Job Data")
  [Void]$StringBuilder.AppendLine("                        `$MyChassisData = Get-Job -ID `$MyChassisJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("                        # Set Found Property")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.IsMobile = `$(@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains ((`$MyChassisData.ChassisTypes)[0]))")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                      else")
  [Void]$StringBuilder.AppendLine("                      {")
  [Void]$StringBuilder.AppendLine("                        `$VerifyObject.Status = `"Verify is Mobile Error`"")
  [Void]$StringBuilder.AppendLine("                        [Void](Remove-Job -Job `$MyChassisJob -Force)")
  [Void]$StringBuilder.AppendLine("                      }")
  [Void]$StringBuilder.AppendLine("                    }")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                  else")
  [Void]$StringBuilder.AppendLine("                  {")
  [Void]$StringBuilder.AppendLine("                    `$VerifyObject.Status = `"Wrong Workstation Name`"")
  [Void]$StringBuilder.AppendLine("                  }")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                else")
  [Void]$StringBuilder.AppendLine("                {")
  [Void]$StringBuilder.AppendLine("                  `$VerifyObject.Status = `"Verify Workstation Error`"")
  [Void]$StringBuilder.AppendLine("                  [Void](Remove-Job -Job `$MyJob -Force)")
  [Void]$StringBuilder.AppendLine("                }")
  [Void]$StringBuilder.AppendLine("                # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
  [Void]$StringBuilder.AppendLine("                Break")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("          Catch")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            # Workstation Not in DNS")
  [Void]$StringBuilder.AppendLine("            `$VerifyObject.Status = `"Workstation Not in DNS`"")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$VerifyObject.Status = `"Invalid Computer Name`"")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Calculate Verify Time")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject.Time = ([DateTime]::Now - `$StartTime)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        # Return Custom Object with Collected Verify Information")
  [Void]$StringBuilder.AppendLine("        Write-Output -InputObject `$VerifyObject")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        `$VerifyObject = `$Null")
  [Void]$StringBuilder.AppendLine("        `$Params = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyJob = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyCompData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyBIOSData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$MyChassisData = `$Null")
  [Void]$StringBuilder.AppendLine("        `$StartTime = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    End")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion")
  #endregion function Test-MyWorkstation
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if ((`$VerifyData = Test-MyWorkstation -ComputerName `$ComputerName).Found)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Clear all Previous Error Messages")
  [Void]$StringBuilder.AppendLine("      `$Error.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("          `$VerifyData is a Custom Object the has the following properties that you can use in your script")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          ComputerName    : This is the Name of the Computer that is found, may be different than expected computer name")
  [Void]$StringBuilder.AppendLine("          FQDN            : FQDN of Found Workstation")
  [Void]$StringBuilder.AppendLine("          Found           : True / False - This is True if the Workstation that was pinged was the expected Workstation")
  [Void]$StringBuilder.AppendLine("          UserName        : Domain\UserName of Logged on User, Will be Blank if user is Logged on via RDP")
  [Void]$StringBuilder.AppendLine("          Domain          : Domain \ WorkGroup Workstation is a member of")
  [Void]$StringBuilder.AppendLine("          DomainMember    : True if member of a Domain")
  [Void]$StringBuilder.AppendLine("          ProductType     : Product Type of Installed Operating system")
  [Void]$StringBuilder.AppendLine("          Manufacturer    : Manufacturer of Computer")
  [Void]$StringBuilder.AppendLine("          Model           : Model of Computer")
  [Void]$StringBuilder.AppendLine("          Memory          : Total Memory in Bytes")
  [Void]$StringBuilder.AppendLine("          OperatingSystem : Installed Operating System")
  [Void]$StringBuilder.AppendLine("          ServicePack     : Installed Service Pack")
  [Void]$StringBuilder.AppendLine("          BuildNumber     : Build Number of Operating System")
  [Void]$StringBuilder.AppendLine("          Architecture    : 32-Bit or 64-Bit")
  [Void]$StringBuilder.AppendLine("          LocalDateTime   : Date / Time on the Remote Workstation")
  [Void]$StringBuilder.AppendLine("          InstallDate     : Date / Time the Workstation was Imaged")
  [Void]$StringBuilder.AppendLine("          LastBootUpTime  : Date / Time the Workstation was Rebooted")
  [Void]$StringBuilder.AppendLine("          IPAddress       : IP Address of the Workstation")
  [Void]$StringBuilder.AppendLine("          Status          : On-Line, Wrong Name, Unknown, Off-Line, Error")
  [Void]$StringBuilder.AppendLine("          ErrorMessage    : Error Message if Any")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        ******** Begin Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is found")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # if your Script Completed Sucessfully set returned `$JabData.Status to `"Done`" so row will not be processed a second time")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `"Done`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        ******** End Put Your Code Here ********")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Set Returned Job Data for when the Remote Workstation is not found")
  [Void]$StringBuilder.AppendLine("      `$JobData.Status = `$VerifyData.Status")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      # Set returned Error Information `$JabData.ErrorMessage to the Last Error Message")
  [Void]$StringBuilder.AppendLine("      `$JobData.ErrorMessage = `$VerifyData.ErrorMessage")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # Set Returned Job Status to indicate an error")
  [Void]$StringBuilder.AppendLine("    `$JobData.Status = `"Error - Catch`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Set returned Error Information `$JabData.ErrorMessage to the last Error Message")
  [Void]$StringBuilder.AppendLine("    `$JobData.ErrorMessage = `"`$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Set Date / Time Job Finished")
  [Void]$StringBuilder.AppendLine("  `$JobData.EndTime = (Get-Date)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #Return Job Data to the Main Script")
  [Void]$StringBuilder.AppendLine("  `$JobData")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$JobData = `$Null")
  [Void]$StringBuilder.AppendLine("  `$VerifyData = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** Job Thread ScriptBlock ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** Job Thread ScriptBlock ********
  
  #region function Process-ListViewItemsJobs - Job
  [Void]$StringBuilder.AppendLine("#region function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("function Process-ListViewItemsJobs()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Process ListView Items in Multiple Threads")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Thread")
  [Void]$StringBuilder.AppendLine("       The Script Block to Execute")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxThreads")
  [Void]$StringBuilder.AppendLine("      Maximum Threads to Process")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Checked")
  [Void]$StringBuilder.AppendLine("      Process Checked ListView Items")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Process-ListViewItems [-Sender ```$MyFormListView] -Thread `$Thread [-MaxThreads 4] [-Checked]")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$MyFormListView,")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$Thread = `$ThreadscriptJob,")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxThreads = 4,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Checked")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("  Try")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$ListView.Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$False ")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      if (`$Checked)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.CheckedItems)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$ItemList = @(`$ListView.Items | Where-Object -FilterScript { `$PSItem.SubItems[1].Text -ne `"Done`" })")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = @{}")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$ItemList.Count - 1")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -le `$ItemCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          Write-Verbose -Message `"Break For Loop`"")
  [Void]$StringBuilder.AppendLine("          break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        Write-Verbose -Message `"Begin Job Thread - `$Count`"")
  [Void]$StringBuilder.AppendLine("        `$ThreadHash.Add(`"`$Count`", (Start-Job -ScriptBlock `$Thread -ArgumentList (`$ItemList[`$Count].Name) -Name `"`$Count`"))")
  [Void]$StringBuilder.AppendLine("        `$ItemList[`$Count].SubItems[1].Text = `"Processing...`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        While ((`$ThreadHash.Count -eq `$MaxThreads) -or (`$ThreadHash.Count -and (`$Count -eq `$ItemCount)))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            Write-Verbose -Message `"Break Outter While Loop`"")
  [Void]$StringBuilder.AppendLine("            break")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          While (@(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Running`" }).Count -eq `$ThreadHash.Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("            if (`$Script:ThreadCommand)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Break Inner While Loop`"")
  [Void]$StringBuilder.AppendLine("              break")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FailedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { @(`"Running`", `"Completed`") -NotContains `$PSItem.State })).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FailedJob in `$FailedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FailedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Failed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `"Failed`"")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FailedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [Void](Remove-Job -Id `$FailedJob.ID -Force)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("          if ((`$FinishedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Completed`"})).Count)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            ForEach (`$FinishedJob in `$FinishedJobs)")
  [Void]$StringBuilder.AppendLine("            {")
  [Void]$StringBuilder.AppendLine("              `$ThreadNum = `$([int]`$(`$FinishedJob.Name))")
  [Void]$StringBuilder.AppendLine("              Write-Verbose -Message `"Completed Job Thread - `$ThreadNum`"")
  [Void]$StringBuilder.AppendLine("              `$JobData = Receive-Job -Id `$FinishedJob.ID -Wait -AutoRemoveJob ")
  [Void]$StringBuilder.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `$JobData.Status")
  [Void]$StringBuilder.AppendLine("              if (`$Checked)")
  [Void]$StringBuilder.AppendLine("              {")
  [Void]$StringBuilder.AppendLine("                `$ItemList[`$ThreadNum].Checked = `$False")
  [Void]$StringBuilder.AppendLine("              }")
  [Void]$StringBuilder.AppendLine("              `$ThreadHash.Remove(`$FinishedJob.Name)")
  [Void]$StringBuilder.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("            }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Begin Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("      [Void](Get-Job | Remove-Job -Force)")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"End Removing Remaining Jobs`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ThreadHash = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemCount = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Count = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ItemList = `$Null")
  [Void]$StringBuilder.AppendLine("      `$ThreadNum = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FinishedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJobs = `$Null")
  [Void]$StringBuilder.AppendLine("      `$FailedJob = `$Null")
  [Void]$StringBuilder.AppendLine("      `$Script:ThreadCommand = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$True")
  [Void]$StringBuilder.AppendLine("      `$ListView.Sort()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Catch")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
  [Void]$StringBuilder.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Process-ListViewItemsJobs`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Process-ListViewItemsJobs - Job")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Process-ListViewItemsJobs - Job
  
  [Void]$StringBuilder.AppendLine("#endregion ================ Jobs Multi Thread ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptJobsThreads"
}
#endregion function Build-MyScriptJobsThreads

#region function Build-MyScriptCustomIcons
function Build-MyScriptCustomIcons ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptCustomIcons -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptCustomIcons"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region ******** $($MyScriptName) Custom Icons ********")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** $FormIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$$($MyScriptName)FormIcon ********")
  [Void]$StringBuilder.AppendLine("# Icons for Forms are 16x16")
  [Void]$StringBuilder.AppendLine("`$$($MyScriptName)FormIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi3EhFIxzJm2Pejh/kHs5f5B7OX+Qezl/kHs5f5B7OX+Qezl/j3o4f4xz")
  [Void]$StringBuilder.AppendLine("KG2LciUUAAAAAAAAAAAAAAAAjXMkFpeGU+Soo6D/qKSi/6ikov+opKL/qKSi/6ikov+opKL/qKSi/6ikov+oo6D/mIZT5I93LRYAAAAAAAAAAJB3K3azrqz/v7u6/725uP+9ubj/vbm4/725uP+9ubj/vbm4/725")
  [Void]$StringBuilder.AppendLine("uP+9ubj/v7u6/7OurP+SejF2AAAAAAAAAACXgDuHw8C//3x4d/91cXD/dXFw/3VxcP91cXD/dXFw/3VxcP91cXD/dXFw/3x4d//DwL//mYNBhwAAAAAAAAAAmoQ/h7y5uP9xbWz/cW1s/3FtbP9xbWz/cW1s/3Ft")
  [Void]$StringBuilder.AppendLine("bP9xbWz/cW1s/3FtbP9xbWz/vLm4/52HRocAAAAAAAAAAJ6IQ4e9u7n/Z2Rj/3Bta/9oaWb/ZWNh/2VhYP9lYWD/ZWFg/2VhYP9lYWD/ZWFg/727uf+hjEqHAAAAAAAAAACijEeHv7y7/2hlZP+fnZz/b4d9/11f")
  [Void]$StringBuilder.AppendLine("XP9YVVT/WFVU/1hVVP9YVVT/WFVU/1hVVP+/vLv/pZBOhwAAAAAAAAAAppBLh8C9vP+DkZn/Noaw/410HP9KVWP/JlGg/0pIR/9KSEf/SkhH/0pIR/9KSEf/wL28/6mUUocAAAAAAAAAAKmTTofCv77/oqKh/6Wo")
  [Void]$StringBuilder.AppendLine("qP+Vkor/cXBw/1dZXf9LSEf/Q0A//0NAP/9IRUT/VFJQ/8K/vv+tmFaHAAAAAAAAAACkjEB24N7d/3Bubf95d3b/eXd2/3l3dv95d3b/eXd2/3l3dv95d3b/eXd2/3Bubf/g3t3/qJJKdgAAAAAAAAAAooo+FsS1")
  [Void]$StringBuilder.AppendLine("guTu7ev/5OPj/+Tj4//k4+P/5OPj/+Tj4//k4+P/5OPj/+Tj4//u7ev/xLWD5KmSSxYAAAAAAAAAAAAAAACljkQUqpRMbbmnan+6qGx/uqhsf7qobH+6qGx/uqhsf7qobH+5p2t/q5ZPbaiSShQAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA//+sQf//rEHAA6xBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQYABrEGAAaxBgAGsQcADrEH//6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$$($MyScriptName)FormIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($MyScriptName)ImageList.Images.Add(`"$($MyScriptName)FormIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($MyScriptName)FormIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $FormIcon ********
  
  #region ******** $ExitIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$ExitIcon ********")
  [Void]$StringBuilder.AppendLine("`$ExitIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1ToVAgWar/F0B5/wAAAFcAAABNAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAABxQnCIfWKjvI1+x/xY8cv8AAABDAAAAPgAAADoAAAAmAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcUp/TIV6x/ylktP8VOW3/AAAALgAAACkAAAAjAAAAHgAAABgAAAAFAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAjYLP/HlSg/yVkt/8ybrz/FDhq/wAAADgAAAAuAAAAJAAAABgAAAAJI2Cz/wAAAAAAAAAAAAAAAAAAAAAAAAAAJWS3/yFZpv8par3/O3fC/xM1Zf8AAAA4AAAALgAAACQAAAAYAAAACQ6F")
  [Void]$StringBuilder.AppendLine("RP8AcwD/AAAAAAAAAAAAAAAAAAAAAGRziP8kXqr/LG/C/0Bup/85SmL/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AHMA/wAAAAAAAAAAAAAAAAAAAAAqar7/J2Ov/y90yP9adpb/Tl93/wAAADgAAAAuAAAAJACE")
  [Void]$StringBuilder.AppendLine("AG8AmQD/a8lw/wBzAP8AcwD/AHMA/wBzAP8AcwD/LG3B/ylmtP8yec3/VJHV/xQ2Z/8AAAA4AAAALgB7AHcAmQD/V8Bb/0q8T/9Yw17/X8Zm/2bKbv910H3/AHMA/y1ww/8rarf/NH3Q/1yZ2/8UNmf/AAAAOAAA")
  [Void]$StringBuilder.AppendLine("AC4AmQD/fs6A/0K4Rv82tDv/PrhE/0a8TP9QwVf/Zspu/wBzAP8vcsb/LWy6/zeA0/9koOD/FDZn/wAAADgAAAAuAHsAdwCZAP+Az4L/ccp0/2zIcP93zXz/ftCC/2jJbv8AcwD/MHTI/y5uvP84gtb/YaDh/xQ2")
  [Void]$StringBuilder.AppendLine("Z/8AAAA4AAAALgAAACQAhABvAJkA/4TQhv8AmQD/AJkA/wCZAP8AmQD/AJkA/2Z2i/8vcL7/P4jZ/4m/7v8vYpa/AAAAOAAAAC4AAAAkAAAAGACUAKQAmQD/AJkA/wAAAAAAAAAAAAAAAAAAAAAxdsr/M3TA/3ey")
  [Void]$StringBuilder.AppendLine("6P9xnsO/AAMFRgAAADgAAAAuAAAAJAAAABgAAAAJEoxM/wCZAP8AAAAAAAAAAAAAAAAAAAAAMnfL/0yMz/9FgsDeAAMFRgADBUYAAAA4AAAALgAAACQAAAAYAAAACTJ3y/8AAAAAAAAAAAAAAAAAAAAAAAAAADJ3")
  [Void]$StringBuilder.AppendLine("y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/MnfL/zJ3y/8yd8v/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAwP+sQYA/rEGAH6xBAB+sQQAPrEEAD6xBAACsQQAArEEAAKxBAACsQQAArEEAD6xBAA+sQQAfrEEAH6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$ExitIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($MyScriptName)ImageList.Images.Add(`"ExitIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$ExitIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $ExitIcon ********
  
  #region ******** $HelpIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$HelpIcon ********")
  [Void]$StringBuilder.AppendLine("`$HelpIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6XSwQvF8sgMFiLd/IZzH/0nI7/9Z7Q//UeD7/0W8yz9VyM2AAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAC2Wiswulwr38lgKP/WaCv/2nE1/998P//jiUr/6Jlb/+ypbv/kl1r/23s7z9x3NRAAAAAAAAAAAAAAAACyVykwuVkr78xbKf/SYSX/1mkq/+CPXv/w4t7/8NrM/+uWUv/vnFL/9bRu//W9")
  [Void]$StringBuilder.AppendLine("f//ffj3P23Y1EAAAAAAAAAAAs1cqz8heMf/OWiL/0mEk/9ZpKv/lrIz/8Ojo//Do6P/spnD/75pO//SlVv/5uG//8bZ3/9h0NK8AAAAArlMoYLxeM//LWyj/zlke/9FgJP/VZyn/23c7/+rFsf/qvJ3/6IxE/+yV")
  [Void]$StringBuilder.AppendLine("S//xnVH/9KNV//S2df/fjVD/03AzMKxSKK/Ia0L/ylMb/81XHf/QXiL/1GUn/+Sri//x6ur/8enp/+WGQP/pjkb/7JRK/+6YTf/unFP/56Bm/9BuMo+yWzP/0XhP/8tUHf/MVRz/z1sg/9NiJf/gmXL/8uvr//Lq")
  [Void]$StringBuilder.AppendLine("6v/mm2f/5YY//+eLQ//pjkX/6Y5F/+eZXv/MazG/tWA5/9J4Tv/QZTL/zVgh/85YHv/RXiP/1GUn/+7UyP/z7Oz/79bK/+GERP/igTz/44M+/+ODPv/iilD/yWkwv7VhO//Vflb/0GY0/9FnNP/RYy3/z10j/9Jg")
  [Void]$StringBuilder.AppendLine("JP/YdkD/8uXi//Pt7f/sx7P/3Xc1/955Nv/eeTb/3ntD/8VmL7+qUyzf2o5s/9BlNP/RZjT/0mg0/9NrNf/UajL/1Ggu/9+Saf/17+//9O7u/91/R//acDD/2nAw/9hwOP/CYy6vpUwmj9GKav/TckX/0GY0/9Fn")
  [Void]$StringBuilder.AppendLine("NP/puaL/7su7/96PZv/rwq3/9vLy//Xw8P/ei1z/2nU7/9p1O//PbTX/v2AtYKRMJSC0Yj7/3ZNy/9BlNP/WeU3//v39//z7+//7+Pj/+fb2//j19f/z4tv/1m83/9dwOP/Vbzf/v2Au77xeLBAAAAAApEslgMd9")
  [Void]$StringBuilder.AppendLine("XP/bjGn/0Gg4/9mCWv/wzr///fz8//z6+v/uy7r/2oVZ/9RrNv/UbDn/wmEv/7hbK1AAAAAAAAAAAAAAAACjSyWfw3dV/96Xd//UeE7/0Gg4/9BmNP/RZjT/0Wk4/9JuQP/QbUP/vV4x/7RZKmAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAKNLJXCtWDLvxntZ/86DYv/XjGv/1Ihl/8h1T/+9ZTz/slcr37FWKVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApEwlEKVMJmCmTiaPqE8mv6lQJ7+rUSeArFIoUAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA4A+sQcADrEGAAaxBgAGsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBgAGsQcADrEHgB6xB8B+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$HelpIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($MyScriptName)ImageList.Images.Add(`"HelpIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$HelpIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $HelpIcon ******** 
  
  #region ******** $BugIcon ********
  [Void]$StringBuilder.AppendLine("#region ******** `$BugIcon ********")
  [Void]$StringBuilder.AppendLine("`$BugIcon = @`"")
  [Void]$StringBuilder.AppendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE/UHwBQ1VsAUNVaAFDVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFjYfAp57/oAfvf/AH/4/wBx7vkAVtp0AAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVvYaSuR+P8jlv//DYX4/wB/+f8Acu//AHz2/gBV2GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABycHAgL2CxCyB86u4YbOL/BU7R/xd+8P8Jdu7/AELK/wB4")
  [Void]$StringBuilder.AppendLine("8/8AaejoKF2zCnFwcRwAAAAAAAAAAAAAAAAAAAAAdXJupTVdpY8tnvv/AkjO/wVLz/8lh/P/Ho35/w2D9/8Ah/7/AIH6/0Bfm7R0cW9zAAAAAAAAAAAAAAAAAAAAAGxudR08aKbzJ6b//y6g/P81of3/MJX4/yqT")
  [Void]$StringBuilder.AppendLine("+f8ilP3/AEnP/wBu7P83YqbXYmt9BgAAAAAAAAAAAAAAAAAAAAAAAAAAE2XNkheo//8npv//MaX//y+X+P8xl/r/MZz+/xp+7/8MiPr/CFrUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZZ0W0Fpv7/CGrf/wtc")
  [Void]$StringBuilder.AppendLine("2P8qmfj/MJn5/xNl3v8ff+7/IpX+/wlX02MAAAAAAAAAAAAAAAAAAAAAAAAAAHBwcltIZJSJAJD0/xKX9P8QjfH/IJr4/yua+f8MW9j/In3r/yWG8f9LZZWFbm9zSgAAAAAAAAAAAAAAAAAAAAB0cW5HZ2xzYSZe")
  [Void]$StringBuilder.AppendLine("luFPkLD/Inyv/yp1q/8ydaz/Onqu/zx4rf8yW5TbZmt0XnRxbjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRT1CZkI2M/2pmZf9jYF//XFlY/1RRUP9LSEf/RUNFjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AABxbmsbbWpny3BtbPGCfn3/Y2Bf/1xZWP9UUVD/SUZF72xpZr1vbGkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXJvMmxpZjBVUlFMdXJy9oOAf/9tamn/UExM9ExIR0RsaWZKdHFuGAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9MSyVSTk55UExMd0pGRiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
  [Void]$StringBuilder.AppendLine("AAAAAAAA//+sQfw/rEH4H6xB8A+sQcADrEHAA6xBwAOsQeAHrEHgB6xBwAOsQcADrEHwD6xB4AesQeAHrEH8P6xB//+sQQ==")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("#endregion ******** `$BugIcon ********")
  [Void]$StringBuilder.AppendLine("`$$($MyScriptName)ImageList.Images.Add(`"BugIcon`", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$BugIcon))))")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** $BugIcon ********
  
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyScriptName) Custom Icons ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptCustomIcons"
}
#endregion function Build-MyScriptCustomIcons

#region function Build-MyScriptListViewSort
function Build-MyScriptListViewSort ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptListViewSort -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Build-MyScriptListViewSort"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> My Custom ListView Sort <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$MyCode = @`"")
  [Void]$StringBuilder.AppendLine("using System;")
  [Void]$StringBuilder.AppendLine("using System.Windows.Forms;")
  [Void]$StringBuilder.AppendLine("using System.Collections;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("namespace MyCustom")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  public class ListViewSort : IComparer")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    private int _Column = 0;")
  [Void]$StringBuilder.AppendLine("    private bool _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    private bool _Enable = true;")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort()")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = 0;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = true;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public ListViewSort(int Column, bool Order)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      _Column = Column;")
  [Void]$StringBuilder.AppendLine("      _Ascending = Order;")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Column")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Column; }")
  [Void]$StringBuilder.AppendLine("      set { _Column = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Ascending")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Ascending; }")
  [Void]$StringBuilder.AppendLine("      set { _Ascending = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public bool Enable")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      get { return _Enable; }")
  [Void]$StringBuilder.AppendLine("      set { _Enable = value; }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    public int Compare(object RowX, object RowY)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if (_Enable)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        if (_Ascending)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text);")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        return 0;")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("`"@")
  [Void]$StringBuilder.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies `"System.Windows.Forms`" -Debug:`$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion ================ My Custom ListView Sort ================")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptListViewSort"
}
#endregion function Build-MyScriptListViewSort 


#region function Build-MyScriptDialog
function Build-MyScriptDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .PARAMETER MyControlType
    .EXAMPLE
      Build-MyScriptDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object[]]`$ReturnValue")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Object]`$DialogResult, [Object[]]`$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.ReturnValue = `$ReturnValue")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupText")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents = [System.ComponentModel.Container]::New()")
  [Void]$StringBuilder.AppendLine("")
  
  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogForm.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Load({ Start-$($MyControlName)DialogFormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Move({ Start-$($MyControlName)DialogFormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form
  
  Switch ($MyControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyControlName)DialogMainGroupBox.Controls[`$$($MyControlName)DialogMainGroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyControlName)DialogMainGroupBox.Controls[`$$($MyControlName)DialogMainGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyControlName)DialogMainPanel.Controls[`$$($MyControlName)DialogMainPanel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyControlName)DialogMainPanel.Controls[`$$($MyControlName)DialogMainPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainSplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Name = `"$($MyControlName)DialogMainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Text = `"$($MyControlName)DialogMainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }
  
  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmPanel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmLeftButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # OK Code Goes here")
  [Void]$StringBuilder.AppendLine("    [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyScriptName)Form, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmRightButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmRightButton.Tag = [System.Object]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons
  
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ReturnValue = @()")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$DialogResult, `$ReturnValue)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptDialog"
}
#endregion function Build-MyScriptDialog

#region function Build-MyScriptAdvDialog
function Build-MyScriptAdvDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .PARAMETER MyControlType
    .EXAMPLE
      Build-MyScriptAdvDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("GroupBox", "Panel", "SplitContainer")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptAdvDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER GroupText")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle -GroupBoxText `$GroupBoxText")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  }
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  if ($MyControlType -eq "GroupBox")
  {
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$GroupBoxText,")
  }
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 15,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents = [System.ComponentModel.Container]::New()")
  [Void]$StringBuilder.AppendLine("")
  
  #region Dialog Form
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogForm.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormLoad ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormLoad")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Load Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Load Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Load Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormLoad -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Load Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Load Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormLoad ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Load({ Start-$($MyControlName)DialogFormLoad -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Move({ Start-$($MyControlName)DialogFormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By $([System.Environment]::UserName))")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Form
  
  Switch ($MyControlType)
  {
    "GroupBox"
    {
      #region Main GroupBox
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Bold")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$GroupBoxText")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyControlName)DialogMainGroupBox.Controls[`$$($MyControlName)DialogMainGroupBox.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyControlName)DialogMainGroupBox.Controls[`$$($MyControlName)DialogMainGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main GroupBox
      Break
    }
    "Panel"
    {
      #region Main Panel
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.ClientSize = [System.Drawing.Size]::New((`$(`$$($MyControlName)DialogMainPanel.Controls[`$$($MyControlName)DialogMainPanel.Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$(`$$($MyControlName)DialogMainPanel.Controls[`$$($MyControlName)DialogMainPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main Panel
      Break
    }
    "SplitContainer"
    {
      #region Main SplitContainer
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain SplitContainer")
      [Void]$StringBuilder.AppendLine("  # ************************************************")
      [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainSplitContainer)")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.BackColor = [MyConfig]::Colors.Back")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::None")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.ForeColor = [MyConfig]::Colors.Fore")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.IsSplitterFixed = `$True")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Name = `"$($MyControlName)DialogMainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2Collapsed = `$False")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2MinSize = 25")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterDistance = 50")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterIncrement = 1")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.SplitterWidth = 4")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.TabIndex = 0")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.TabStop = `$True")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Tag = [System.Object]::New()")
      [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainSplitContainer.Text = `"$($MyControlName)DialogMainSplitContainer`"")
      [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainSplitContainer Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainSplitContainer Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion Main SplitContainer
      Break
    }
  }
  
  #region Bottom Panel / Buttons
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($MyControlName)DialogButtons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 1) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  #endregion Bottom Panel / Buttons
  
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$$($MyControlName)DialogForm.Tag -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptAdvDialog"
}
#endregion function Build-MyScriptAdvDialog

#region function Build-MyScriptUserInputDialog
function Build-MyScriptUserInputDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptUserInputDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptUserInputDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String[]]`$Items")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [String[]]`$Items)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Items = `$Items")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HintText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidChars")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidOutput")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MaxLength")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Single`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$HintText = `"Enter Value Here`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_,;]`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidOutput = `".+`",")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Int]`$MaxLength = [Int]::MaxValue,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Multi`")]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 18,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.DeselectAll()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainGroupBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Controls.Add(`$$($MyControlName)DialogMainTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.MaxLength = `$MaxLength")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Multiline = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Name = `"$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("    If (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Lines = `$Items")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Lines = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `$Items }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainGroupBox.ClientSize.Height - (`$$($MyControlName)DialogMainTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None")
  [Void]$StringBuilder.AppendLine("    if (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Text = `$Items[0]")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$False; `"Items`" = `$Items[0] } ")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Tag = @{ `"HintText`" = `$HintText; `"HintEnabled`" = `$True; `"Items`" = `"`" }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyControlName)DialogMainTextBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMainTextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMainTextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.add_GotFocus({ Start-$($MyControlName)DialogMainTextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.add_KeyDown({ Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMainTextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogMainTextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.add_KeyPress({Start-$($MyControlName)DialogMainTextBoxKeyPress -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMainTextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMainTextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.add_KeyUp({ Start-$($MyControlName)DialogMainTextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMainTextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.add_LostFocus({ Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainGroupBox.ClientSize.Width, (`$$($MyControlName)DialogMainTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ((-not `$$($MyControlName)DialogMainTextBox.Tag.HintEnabled) -and (`"`$(`$$($MyControlName)DialogMainTextBox.Text.Trim())`".Length -gt 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ChkOutput = `$True")
  [Void]$StringBuilder.AppendLine("      (`$$($MyControlName)DialogMainTextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries) | ForEach-Object -Process { `$ChkOutput = (`$ChkOutput -and `$PSItem -match `$ValidOutput) }")
  [Void]$StringBuilder.AppendLine("      If (`$ChkOutput)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Lines = `$$($MyControlName)DialogMainTextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTextBox.Text = `$$($MyControlName)DialogMainTextBox.Tag.Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Tag.HintEnabled = (`$$($MyControlName)DialogMainTextBox.TextLength -gt 0)")
  [Void]$StringBuilder.AppendLine("    Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$$($MyControlName)DialogMainTextBox -EventArg `"LostFocus`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  If (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, ((`$$($MyControlName)DialogMainTextBox.Text -replace `"\s*[\n,;]+\s*`", `",`").Split(`",`", [System.StringSplitOptions]::RemoveEmptyEntries)))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyControlName)DialogMainTextBox.Text)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptUserInputDialog"
}
#endregion function Build-MyScriptUserInputDialog

#region function Build-MyScriptShowChangeLog
Function Build-MyScriptShowChangeLog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptShow$($MyControlName) -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptShowChangeLog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowCancel")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$Title = `"Change Log - `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$ChangeText,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("     .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("     .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("     .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("     .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.AppendText(`$ChangeText)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.SelectionStart = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.ScrollToCaret()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Font = [System.Drawing.Font]::New(`"Courier New`", [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.MaxLength = [Int]::MaxValue")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Multiline = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Name = `"$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainTextBox.Top + [MyConfig]::FormSpacer)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `"&Ok`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptShowChangeLog"
}
#endregion function Build-MyScriptShowChangeLog

#region function Build-MyScriptUserResponseDialog
Function Build-MyScriptUserResponseDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptUserResponseDialog -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptUserResponseDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Icon")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [System.Drawing.Icon]`$Icon = [System.Drawing.SystemIcons]::Information,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"`$$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainPictureBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.Image = `$Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.Name = `"$($MyControlName)DialogMainPictureBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.Size = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::CenterImage")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPictureBox = [System.Windows.Forms.PictureBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogMainPictureBox.Right + [MyConfig]::FormSpacer), `$$($MyControlName)DialogMainPictureBox.Top)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - (`$$($MyControlName)DialogMainPictureBox.Width + ([MyConfig]::FormSpacer * 3))), `$$($MyControlName)DialogMainPanel.ClientSize.Width)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"`$$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyControlName)DialogButtons -eq 1) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$$($MyControlName)DialogForm.ClientSize.Height - (`$$($MyControlName)DialogMainPanel.ClientSize.Height - ([Math]::Max(`$$($MyControlName)DialogMainPictureBox.Bottom, `$$($MyControlName)DialogMainLabel.Bottom) + ([MyConfig]::FormSpacer * 2)))))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$$($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptUserResponseDialog"
}
#endregion function Build-MyScriptUserResponseDialog

#region function Build-MyScriptUserAlertDialog
Function Build-MyScriptUserAlertDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptUserAlertDialog -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptUserAlertDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Title")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MsgType")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Title,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 25,")
  [Void]$StringBuilder.AppendLine("    [ValidateSet(`"Good`", `"Warn`", `"Error`", `"Info`")]")
  [Void]$StringBuilder.AppendLine("    [String]`$MsgType = `"Info`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogForm.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogForm.ClientSize.Height - ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainTitleLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Switch (`$MsgType)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Info`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextInfo")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Good`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Warn`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Error`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainTitleLabel.BackColor = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.ForeColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Name = `"$($MyControlName)DialogMainTitleLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyControlName)DialogMainTitleLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.Text = `$Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTitleLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainTitleLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainMessageLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainTitleLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Name = `"$($MyControlName)DialogMainMessageLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Size = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainTitleLabel.Width, (`$$($MyControlName)DialogMainTitleLabel.Width - (`$$($MyControlName)DialogMainMessageLabel.Top * 3)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainMessageLabel.Text = `$Message")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainMessageLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainPanel.ClientSize.Width, (`$$($MyControlName)DialogMainMessageLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$$($MyControlName)DialogMainPanel.Bottom)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"`$$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `"OK`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainPanel.ClientSize.Width, ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$$($MyControlName)DialogForm.ClientSize.Height - (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainMessageLabel.Bottom + ([MyConfig]::FormSpacer * 2)))))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, `$$($MyControlName)DialogBtmPanel.Bottom)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$$($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptUserAlertDialog"
}
#endregion function Build-MyScriptUserAlertDialog

#region function Build-MyScriptOrderedListDialog
Function Build-MyScriptOrderedListDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptOrderedListDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptOrderedListDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [System.Collections.Specialized.OrderedDictionary]`$OrderedItems")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [System.Collections.Specialized.OrderedDictionary]`$OrderedItems)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.OrderedItems = `$OrderedItems")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-GetMultiValueDialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-GetMultiValueDialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ReturnTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValidCars")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllRequired")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-GetMultiValueDialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText,")
  [Void]$StringBuilder.AppendLine("    [String]`$ReturnTitle,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [String]`$ValidChars = `"[\s\w\d\.\-_]`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllRequired")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * 25))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = `$AllRequired.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"SearchTextMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.Name = `"$($MyControlName)DialogGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.Text = `$ReturnTitle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.Width = (`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TmpLabelWidth = 0")
  [Void]$StringBuilder.AppendLine("  `$Count = 0")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogGroupBox.Controls.Add(`$$($MyControlName)DialogLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.Location = [System.Drawing.Size]::New([MyConfig]::FormSpacer, ([MyConfig]::Font.Height + ((`$$($MyControlName)DialogLabel.PreferredHeight + [MyConfig]::FormSpacer) * `$Count)))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.Name = `"`$(`$Key)Label`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.Text = `"`$(`$Key):`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpLabelWidth = [Math]::Max(`$TmpLabelWidth, `$$($MyControlName)DialogLabel.Width)")
  [Void]$StringBuilder.AppendLine("    `$Count += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogTextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      GotFocus Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogTextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogTextBox.add_GotFocus({ Start-$($MyControlName)DialogTextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Main TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    if ((-not `$Sender.Multiline) -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogTextBox.add_KeyDown({ Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogTextBoxKeyPress")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyPress Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyPress Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogTextBoxKeyPress -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyPress Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (3, 8, 22, 24)))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyPress Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogTextBoxKeyPress ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogTextBox.add_KeyPress({ Start-$($MyControlName)DialogTextBoxKeyPress -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogTextBoxKeyUp")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyUp Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox KeyUp Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogTextBoxKeyUp -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyUp Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyUp Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogTextBoxKeyUp ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogTextBox.add_KeyUp({ Start-$($MyControlName)DialogTextBoxKeyUp -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogTextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      LostFocus Event for the $($MyControlName)Dialog TextBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogTextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("      `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyControlName)DialogTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogTextBox.add_LostFocus({ Start-$($MyControlName)DialogTextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel = `$$($MyControlName)DialogGroupBox.Controls[`"`$(`$Key)Label`"]")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$TmpLabel.Size = [System.Drawing.Size]::New(`$TmpLabelWidth, `$TmpLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogGroupBox.Controls.Add(`$$($MyControlName)DialogTextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Location = [System.Drawing.Size]::New((`$TmpLabel.Right + [MyConfig]::FormSpacer), `$TmpLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.MaxLength = 25")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Name = `"`$(`$Key)`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Text = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Tag = @{ `"HintText`" = `"Enter Value for '`$(`$Key)'`"; `"HintEnabled`" = (`$$($MyControlName)DialogTextBox.TextLength -eq 0); `"Value`" = `$OrderedItems[`$Key] }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogGroupBox.ClientSize.Width - (`$TmpLabel.Right + ([MyConfig]::FormSpacer) * 2)), `$TmpLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.add_GotFocus({ Start-$($MyControlName)DialogTextBoxGotFocus -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.add_KeyDown({ Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.add_KeyPress({Start-$($MyControlName)DialogTextBoxKeyPress -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.add_KeyUp({ Start-$($MyControlName)DialogTextBoxKeyUp -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogTextBox.add_LostFocus({ Start-$($MyControlName)DialogTextBoxLostFocus -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("    Start-$($MyControlName)DialogTextBoxLostFocus -Sender `$$($MyControlName)DialogTextBox -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogGroupBox.ClientSize.Width, ((`$$($MyControlName)DialogGroupBox.Controls[`$$($MyControlName)DialogGroupBox.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpValidCheck = `$$($MyControlName)DialogForm.Tag")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItemValue = `"`$(`$$($MyControlName)DialogGroupBox.Controls[`$Key].Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$ChkItemValue = (-not (([String]::IsNullOrEmpty(`$TmpItemValue) -or `$$($MyControlName)DialogGroupBox.Controls[`$Key].Tag.HintEnabled)))")
  [Void]$StringBuilder.AppendLine("      if (`$ChkItemValue)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$TmpItemValue")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$OrderedItems[`$Key] = `$Null")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      if (`$$($MyControlName)DialogForm.Tag)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -and `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpValidCheck = `$ChkItemValue -or `$TmpValidCheck")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$TmpValidCheck)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In @(`$OrderedItems.Keys))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogGroupBox.Controls[`$Key].Text = `$$($MyControlName)DialogGroupBox.Controls[`$Key].Tag.Value")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogGroupBox.Controls[`$Key].Tag.HintEnabled = (`$$($MyControlName)DialogGroupBox.TextLength -eq 0)")
  [Void]$StringBuilder.AppendLine("      Start-$($MyControlName)DialogTextBoxLostFocus -Sender `$$($MyControlName)DialogGroupBox.Controls[`$Key] -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$OrderedItems)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptOrderedListDialog"
}
#endregion function Build-MyScriptOrderedListDialog

#region function Build-MyScriptSelectOptionDialog
function Build-MyScriptSelectOptionDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptSelectOptionDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptSelectOptionDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MySelectOptionDialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MySelectOptionDialog Result Class
  
  #region function Show-MySelectOptionDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sorted")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DisplayMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ValueMember")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [String]`$SelectText = `"Select Value`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Sorted,")
  [Void]$StringBuilder.AppendLine("    [String]`$DisplayMember = `"Text`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ValueMember = `"Value`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TmpBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Controls.Add(`$$($MyControlName)ComboBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.DisplayMember = `$DisplayMember")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  [void]`$$($MyControlName)ComboBox.Items.Add([PSCustomObject]@{ `$DisplayMember = `" - `$(`$SelectText) - `"; `$ValueMember = `" - `$(`$SelectText) - `"})")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Name = `"$($MyControlName)ComboBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyControlName)ComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Sorted = `$Sorted.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Text = `"$($MyControlName)ComboBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.ValueMember = `$ValueMember")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)ComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)ComboBox.Items.AddRange(`$Items)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"Selected`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)ComboBox.Tag = `$Items | Where-Object -FilterScript { `$PSItem -eq `$Selected}")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)ComboBox.SelectedItem = `$$($MyControlName)ComboBox.Tag")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainGroupBox.ClientSize.Width, (`$$($MyControlName)ComboBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyControlName)ComboBox.SelectedIndex -gt 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$$($MyControlName)ComboBox.Tag))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)ComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)ComboBox.SelectedItem = `$$($MyControlName)ComboBox.Tag")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$$($MyControlName)ComboBox.SelectedItem)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MySelectOptionDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptSelectOptionDialog"
}
#endregion function Build-MyScriptSelectOptionDialog

#region function Build-MyScriptFilterComboDialog
Function Build-MyScriptFilterComboDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptFilterComboDialog -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  Param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptFilterComboDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [HashTable]`$Values")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [HashTable]`$Values)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Values = `$Values")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Properties")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Properties,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$Selected = @{},")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"Properties`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = `$Properties")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$FilterOptionNames = (`$Items | Select-Object -First 1).PSObject.Properties | Select-Object -ExpandProperty Name")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainLabel.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 50)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)ComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)ComboBoxSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the GetSiteComboChoice ComboBox Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ComboBox Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ComboBox SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)ComboBoxSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ComboBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$ValidItems = @(`$Items)")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItems = @(`$ValidItems | Where-Object -FilterScript { `$PSItem.(`$FilterOptionName) -like `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedItem.Value })")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidItemNames = @(`$ValidItems | Select-Object -ExpandProperty `$FilterOptionName -Unique)")
  [Void]$StringBuilder.AppendLine("      If (`$FilterOptionName -ne `$Sender.Name)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RemoveList = @(`$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { (`$PSItem.Text -notin `$ValidItemNames) -and (`$PSItem.Value -ne `"*`") })")
  [Void]$StringBuilder.AppendLine("        ForEach (`$RemoveItem In `$RemoveList)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Items.Remove(`$RemoveItem)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$HaveItemNames = @(`$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Items | Select-Object -ExpandProperty Text -Unique)")
  [Void]$StringBuilder.AppendLine("      `$AddList = @(`$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Tag.Items | Where-Object -FilterScript { (`$PSItem.Text -in `$ValidItemNames) -and (`$PSItem.Text -notin `$HaveItemNames) })")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Items.AddRange(`$AddList)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$GetSiteComboChoiceComboBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)ComboBoxSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainGroupBox.Controls.Add(`$TmpFilterComboBox)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DisplayMember = `"Text`"")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    [void]`$TmpFilterComboBox.Items.Add([PSCustomObject]@{ `"Text`" = `" - Return All `$(`$FilterOptionName) Values - `"; `"Value`" = `"*`" })")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Name = `$FilterOptionName")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$TmpFilterComboBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Sorted = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = `$Null")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.ValueMember = `"Value`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$TmpFilterComboBox = [System.Windows.Forms.ComboBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Items.AddRange(@(`$Items | Where-Object -FilterScript { -not [String]::IsNullOrEmpty(`$PSITem.(`$FilterOptionName)) } | Sort-Object -Property `$FilterOptionName -Unique | ForEach-Object -Process { [MyListItem]::New(`$PSITem.(`$FilterOptionName), `$PSITem.(`$FilterOptionName)) }))")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.Tag = @{ `"Items`" = @(`$TmpFilterComboBox.Items); `"SelectedItem`" = `$Null }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TmpFilterComboBox.add_SelectedIndexChanged({ Start-$($MyControlName)ComboBoxSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$TmpFilterComboBox.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainGroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # `$Sender")
  [Void]$StringBuilder.AppendLine("    If (`$Selected.ContainsKey(`$FilterOptionName))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$TmpItem = `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Items | Where-Object -FilterScript { `$PSItem.Value -eq `$Selected.(`$FilterOptionName) }")
  [Void]$StringBuilder.AppendLine("      If (-not [String]::IsNullOrEmpty(`$TmpItem.Text))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedItem = `$TmpItem")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Tag.SelectedItem = `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedItem")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainGroupBox.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainGroupBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$ValidateClick = 0")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ValidateClick = `$ValidateClick + `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedIndex")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    If (`$ValidateClick -eq 0)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedIndex = 0")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedItem = `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].Tag.SelectedItem")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog()")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpHash = [HashTable]::New()")
  [Void]$StringBuilder.AppendLine("    ForEach (`$FilterOptionName In `$FilterOptionNames)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void]`$TmpHash.Add(`$FilterOptionName, `$$($MyControlName)DialogMainGroupBox.Controls[`$FilterOptionName].SelectedItem.Value)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, `$TmpHash)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult, @{ })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptFilterComboDialog"
}
#endregion function Build-MyScriptFilterComboDialog

#region function Build-MyScriptInfoDialog
function Build-MyScriptInfoDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptInfoDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("WebBrowser", "RichTextBox")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptInfoDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Info Topics
  [Void]$StringBuilder.AppendLine("#region $($MyControlName) Dialog Info Topics")
  [Void]$StringBuilder.AppendLine("")
  if ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("# Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmySZ15JUX5KaXJJZn4e0AwjiKw+UBvMhKQi")
    [Void]$StringBuilder.AppendLine("KCskI7NYAYh8KxUwtEKcALcYzgQaCfKOggIAU+uXZNoAAAA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoEhUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQAohQVwzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoERUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQDX1agEzwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("H4sIAAAAAAAEAHu/e79NRklujh0vl4KCTUZqYgqYBWSXZJbkpNr5Rip4pOYUKITkF2QmF9voQ0TBivXhqm2S8lMqYfpSMssUEnMy0/NslZJT80pSi5TsbDKKgNjIDmGSgoExUL8RREYfqAWmO6kIygrJyCxWACLf")
    [Void]$StringBuilder.AppendLine("SiQHQOyF2wZnAs0C+UFBAQC95xyezwAAAA==")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed HTML")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("# Web Site / Pages")
    [Void]$StringBuilder.AppendLine("#`$InfoIntro = `"http://www.MyDomain.Local/Help/Intro,html`"")
    [Void]$StringBuilder.AppendLine("#`$Info01 = `"http://www.MyDomain.Local/Help/Topic01.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info02 = `"http://www.MyDomain.Local/Help/Topic02.html`"")
    [Void]$StringBuilder.AppendLine("#`$Info03 = `"http://www.MyDomain.Local/Help/Topic03.html`"")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("#region `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$InfoIntro = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc")
    [Void]$StringBuilder.AppendLine("ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$InfoIntro Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info01 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc")
    [Void]$StringBuilder.AppendLine("ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info01 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info02 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info02 Compressed RTF")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("#region `$Info03 Compressed RTF")
    [Void]$StringBuilder.AppendLine("`$Info03 = @`"")
    [Void]$StringBuilder.AppendLine("77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p")
    [Void]$StringBuilder.AppendLine("bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K")
    [Void]$StringBuilder.AppendLine("XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA")
    [Void]$StringBuilder.AppendLine("`"@")
    [Void]$StringBuilder.AppendLine("#endregion `$Info03 Compressed RTF")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogTopics = [Ordered]@{ }")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogContent = [Ordered]@{ }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogTopics.Add(`"InfoIntro`", `"Info Introduction`")")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogContent.Add(`"InfoIntro`", `$InfoIntro)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogTopics.Add(`"Info01`", `"Info Topic 01`")")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogContent.Add(`"Info01`", `$Info01)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogTopics.Add(`"Info02`", `"Info Topic 02`")")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogContent.Add(`"Info02`", `$Info02)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogTopics.Add(`"Info03`", `"Info Topic 03`")")
  [Void]$StringBuilder.AppendLine("`$$($MyControlName)DialogContent.Add(`"Info03`", `$Info03)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("`$InfoIntro = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info01 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info02 = `$Null")
  [Void]$StringBuilder.AppendLine("`$Info03 = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName) Dialog Info Topics")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Info Topics

  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER WindowsTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER InfoTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DefInfoTopic")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$WindowTitle = `"`$([MyConfig]::ScriptName) Info`",")
  [Void]$StringBuilder.AppendLine("    [String]`$InfoTitle = `" << $($MyScriptName) Info Topics >> `",")
  [Void]$StringBuilder.AppendLine("    [String]`$DefInfoTopic = `"InfoIntro`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 60,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 24")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Move({ Start-$($MyControlName)DialogFormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormResize ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormResize")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Resize Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Resize Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Resize Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormResize -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Resize Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Resize Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormResize ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Resize({ Start-$($MyControlName)DialogFormResize -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Start-$($MyControlName)DialogLeftToolStripItemClick -Sender (`$$($MyControlName)DialogLeftMenuStrip.Items[`$DefInfoTopic]) -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  if ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainWebBrowser)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.AllowWebBrowserDrop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.DocumentText = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.IsWebBrowserContextMenuEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Name = `"$($MyControlName)DialogMainWebBrowser`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.ScriptErrorsSuppressed = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainWebBrowser.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.WebBrowserShortcutsEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainRichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Name = `"$($MyControlName)DialogMainRichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Rtf = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogLeft MenuStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogLeftMenuStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MainMenuStrip = `$$($MyControlName)DialogLeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.ImageList = `$$($MyScriptName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.Name = `"$($MyControlName)DialogLeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogLeftMenuStrip.Text = `"$($MyControlName)DialogLeftMenuStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogLeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogLeftToolStripItemClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogLeft ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogLeft ToolStripItem Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ToolStripItem Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ToolStripItem Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogLeftToolStripItemClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ToolStripItem]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogLeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmStatusStrip.Items[`"Status`"].Text = `"Showing: `$(`$Sender.Text)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Switch (`$Sender.Name)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `"Exit`"")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Default")
  [Void]$StringBuilder.AppendLine("      {")
  if ($MyControlType -eq "WebBrowser")
  {
    [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainWebBrowser.DocumentText = `$Null")
    [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainWebBrowser.DocumentText = (Decode-MyData -Data `$$($MyControlName)DialogContent[`$Sender.Name] -AsString)")
    [Void]$StringBuilder.AppendLine("        #`$$($MyControlName)DialogMainWebBrowser.Navigate((`$$($MyControlName)DialogContent[`$Sender.Name]))")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainRichTextBox.Clear()")
    [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainRichTextBox.Rtf = (Decode-MyData -Data `$$($MyControlName)DialogContent[`$Sender.Name] -AsString)")
  }
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogLeftToolStripItem`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogLeftToolStripItemClick ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyControlName)DialogLeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($MyControlName)DialogLeftMenuStrip -Text `$InfoTitle -Name `"Info Topics`" -Tag `"Info Topics`" -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyControlName)DialogLeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  forEach (`$Key in `$$($MyControlName)DialogTopics.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (New-MenuItem -Menu `$$($MyControlName)DialogLeftMenuStrip -Text (`$$($MyControlName)DialogTopics[`$Key]) -Name `$Key -Tag `$Key -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"HelpIcon`" -PassThru).add_Click({ Start-$($MyControlName)DialogLeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyControlName)DialogLeftMenuStrip")
  [Void]$StringBuilder.AppendLine("  (New-MenuItem -Menu `$$($MyControlName)DialogLeftMenuStrip -Text `"E&xit`" -Name `"Exit`" -Tag `"Exit`" -Alignment `"MiddleLeft`" -DisplayStyle `"ImageAndText`" -ImageKey `"ExitIcon`" -PassThru).add_Click({ Start-$($MyControlName)DialogLeftToolStripItemClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  New-MenuSeparator -Menu `$$($MyControlName)DialogLeftMenuStrip")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogTopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogTopPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.Dock = [System.Windows.Forms.DockStyle]::Top")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.Name = `"$($MyControlName)DialogTopPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.Text = `"$($MyControlName)DialogTopPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogTopPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogTopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogTopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.Controls.Add(`$$($MyControlName)DialogTopLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.BackColor = [MyConfig]::Colors.TitleBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Font = [MyConfig]::Font.Title")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.ForeColor = [MyConfig]::Colors.TitleFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Name = `"$($MyControlName)DialogTopLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Text = `$WindowTitle")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogTopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), `$$($MyControlName)DialogTopLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogTopLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogTopPanel.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogTopPanel.ClientSize.Width, (`$$($MyControlName)DialogTopLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogTopPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm StatusStrip")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmStatusStrip)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.ImageList = `$$($MyScriptName)ImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.Name = `"$($MyControlName)DialogBtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.ShowItemToolTips = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmStatusStrip.Text = `"$($MyControlName)DialogBtmStatusStrip`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  New-MenuLabel -Menu `$$($MyControlName)DialogBtmStatusStrip -Text `"Status`" -Name `"Status`" -Tag `"Status`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [Void]`$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptInfoDialog"
}
#endregion function Build-MyScriptInfoDialog

#region function Build-MyScriptSelectIconDialog
function Build-MyScriptSelectIconDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptSelectIconDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptSelectIconDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region ******** $($MyControlName)Dialog Result Class ********")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$IconPath")
  [Void]$StringBuilder.AppendLine("  [Int[]]`$IconIndex")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$False")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Object]`$DialogResult, [String]`$IconPath, [Int[]]`$IconIndex)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$True")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.IconPath = `$IconPath")
  [Void]$StringBuilder.AppendLine("    `$This.IconIndex = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion ******** $($MyControlName)Dialog Result Class ********")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER FileMessage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconMessage")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconPath")
  [Void]$StringBuilder.AppendLine("    .PARAMETER IconIndex")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$FileMessage = `"Selected Icon File / Library`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconMessage = `"File / Library Icons...`",")
  [Void]$StringBuilder.AppendLine("    [String]`$IconPath = `"`",")
  [Void]$StringBuilder.AppendLine("    [Int[]]`$IconIndex = -1,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(35, 60)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 38,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(25, 35)]")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 25,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents = [System.ComponentModel.Container]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog ImageList")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogImageList = [System.Windows.Forms.ImageList]::New(`$$($MyControlName)DialogFormComponents)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogImageList.ImageSize = [System.Drawing.Size]::New(32, 32)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogImageList = [System.Windows.Forms.ImageList]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormMove")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Move Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Move Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Move Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormMove -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Move Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormMove ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Move({ Start-$($MyControlName)DialogFormMove -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconPath = `"`$(`$$($MyControlName)DialogMainFileTextBox.Text)`".Trim()")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = @(`$$($MyControlName)DialogMainFileTextBox.Tag)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      if ([System.IO.File]::Exists(`$TempIconPath))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainIconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("        For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("          [Void](`$$($MyControlName)DialogMainIconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainIconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("        if (`$$($MyControlName)DialogMainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$TempIconIndex | ForEach-Object -Process { `$$($MyControlName)DialogMainIconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("          {")
  [Void]$StringBuilder.AppendLine("            `$$($MyControlName)DialogMainIconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("            `$$($MyControlName)DialogMainIconListView.Select()")
  [Void]$StringBuilder.AppendLine("            `$$($MyControlName)DialogMainIconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("          }")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainFileLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.Name = `"$($MyControlName)DialogMainFileLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.Text = `$FileMessage")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainFileLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainFileButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.Name = `"$($MyControlName)DialogMainFileButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.Text = `"  &Browse...  `"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - (`$$($MyControlName)DialogMainFileButton.Width + [MyConfig]::FormSpacer)), (`$$($MyControlName)DialogMainFileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainFileButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainFileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainFileButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogMainFile Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogMainFile Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMainFileButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogMainFileButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.Title = `"Extact Icons`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.Filter = `"All Icon Files|*.ico;*.exe;*.dll|Icon Files|*.ico|EXE Files|*.exe|DLL Files|*.dll|All Files|*.*`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.FilterIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)OpenFileDialog.FileName = `"`"")
  [Void]$StringBuilder.AppendLine("    If (`$$($MyScriptName)OpenFileDialog.ShowDialog(`$$($MyScriptName)Form) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogImageList.Images.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainIconListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$TempIconPath = `"`$(`$$($MyScriptName)OpenFileDialog.FileName)`".Trim()")
  [Void]$StringBuilder.AppendLine("      `$TempIconCount = [Extract.MyIcon]::IconCount(`$TempIconPath)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainIconListView.BeginUpdate()")
  [Void]$StringBuilder.AppendLine("      For (`$Count = 0; `$Count -lt `$TempIconCount; `$Count++)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogImageList.Images.Add(([Extract.MyIcon]::IconReturn(`$TempIconPath, `$Count, `$True)))")
  [Void]$StringBuilder.AppendLine("        [Void](`$$($MyControlName)DialogMainIconListView.Items.Add(`"`$(`"{0:###00}`" -f `$Count)`", `$Count))")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainIconListView.EndUpdate()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainFileTextBox.Text = `$TempIconPath")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainFileTextBox.Tag = @(-1)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogMainFileButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainFileButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileButton.add_Click({ Start-$($MyControlName)DialogMainFileButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainFileTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainFileLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Name = `"$($MyControlName)DialogMainFileTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.ReadOnly = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Size = [System.Drawing.Size]::New(((`$$($MyControlName)DialogMainFileButton.Left - [MyConfig]::FormSpacer) - `$$($MyControlName)DialogMainFileTextBox.Left), `$$($MyControlName)DialogMainFileButton.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Text = `$IconPath")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.Tag = `$IconIndex")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainFileTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainIconLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainFileTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.Name = `"$($MyControlName)DialogMainIconLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.Text = `$IconMessage")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainIconLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainIconListView)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.LabelWrap = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.LargeImageList = `$$($MyControlName)DialogImageList")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainIconLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Name = `"$($MyControlName)DialogMainIconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ((`$$($MyControlName)DialogMainPanel.ClientSize.Height - [MyConfig]::FormSpacer) - `$$($MyControlName)DialogMainIconListView.Top))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Sorting = [System.Windows.Forms.SortOrder]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.Text = `"$($MyControlName)DialogMainIconListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.View = [System.Windows.Forms.View]::LargeIcon")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainIconListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainIconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainIconListViewSelectedIndexChanged")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($MyControlName)DialogMainIcon ListView Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      SelectedIndexChanged Event for the $($MyControlName)DialogMainIcon ListView Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The ListView Control that fired the SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the ListView SelectedIndexChanged Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMainIconListViewSelectedIndexChanged -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$$($MyControlName)DialogMainIconListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$$($MyControlName)DialogMainIconListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainIconListViewSelectedIndexChanged ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainIconListView.add_SelectedIndexChanged({ Start-$($MyControlName)DialogMainIconListViewSelectedIndexChanged -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($MyControlName)DialogMainIconListView.CheckedIndices.Count -and `$$($MyControlName)DialogMainIconListView.CheckBoxes) -or (`$$($MyControlName)DialogMainIconListView.SelectedIndices.Count -and (-not `$$($MyControlName)DialogMainIconListView.CheckBoxes)))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"No Icons Selected`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempIconIndex = `$$($MyControlName)DialogMainFileTextBox.Tag")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyControlName)DialogMainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainIconListView.CheckedIndices | ForEach-Object -Process { `$$($MyControlName)DialogMainIconListView.Items[`$PSItem].Checked = `$False }")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex.Count -and (`$TempIconIndex[0] -gt -1))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TempIconIndex | ForEach-Object -Process { `$$($MyControlName)DialogMainIconListView.Items[`$PSItem].Checked = `$True }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainIconListView.SelectedIndices.Clear()")
  [Void]$StringBuilder.AppendLine("      if (`$TempIconIndex[0] -gt -1)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainIconListView.Items[`$TempIconIndex[0]].Selected = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainIconListView.Select()")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainIconListView.Items[`$TempIconIndex[0]].EnsureVisible()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 5")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if ((`$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)) -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$$($MyControlName)DialogMainIconListView.CheckBoxes)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$DialogResult, `$$($MyControlName)DialogMainFileTextBox.Text, `$$($MyControlName)DialogMainIconListView.CheckedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$DialogResult, `$$($MyControlName)DialogMainFileTextBox.Text, `$$($MyControlName)DialogMainIconListView.SelectedIndices)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogFormComponents.Dispose()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptSelectIconDialog"
}
#endregion function Build-MyScriptSelectIconDialog

#region function Build-MyScriptStatusDialog
function Build-MyScriptStatusDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptStatusDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("TextBox", "RichTextBox")]
    [String]$MyControlType,
    [ValidateRange(1, 2)]
    [Int]$Buttons = 1
  )
  Write-Verbose -Message "Enter Function Build-MyScriptStatusDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Items")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  if ($Buttons -eq 1)
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
    [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  }
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowCancel")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = { },")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Items = @(),")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 18,")
  if ($Buttons -eq 1)
  {
    [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&OK`",")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
    [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`",")
  }
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowCancel,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoClose")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$AllowCancel.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt -and (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::End))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Tag = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowCancel.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("     .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("     .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("       Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("     .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("     .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$Items.Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyControlName)DialogMain$($MyControlType), `$Items")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyControlName)DialogMain$($MyControlType)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  if ($Buttons -eq 1)
  {
    [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.Enabled = `$True")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmMidButton.DialogResult = `$DialogResult")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.Enabled = `$True")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmLeftButton.DialogResult = `$DialogResult")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmRightButton.Enabled = `$True")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK) -and `$AutoClose.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainRichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Name = `"$($MyControlName)DialogMainRichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Rtf = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Name = `"$($MyControlName)DialogMainTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
    [Void]$StringBuilder.AppendLine("")
  }
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyControlName)DialogMain $($MyControlType) Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyControlName)DialogMain $($MyControlType) Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The $($MyControlType) Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the $($MyControlType) MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMain$($MyControlType)MouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.$($MyControlType)]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($MyControlName)DialogMain$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMain$($MyControlType).SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMain$($MyControlType).SelectionStart = `$$($MyControlName)DialogMain$($MyControlType).TextLength")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($MyControlName)DialogMain$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMain$($MyControlType).add_MouseDown({ Start-$($MyControlName)DialogMain$($MyControlType)MouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  if ($Buttons -eq 1)
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Enabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.DialogResult = [System.Windows.Forms.DialogResult]::None")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Enabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Enabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 1")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMain$($MyControlType).Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  [Void]$StringBuilder.Append((Build-MyScriptStatusSample -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType))
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptStatusDialog"
}
#endregion function Build-MyScriptStatusDialog

#region function Build-MyScriptAdvStatusDialog
function Build-MyScriptAdvStatusDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptAdvStatusDialog -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("TextBox", "RichTextBox")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptAdvStatusDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  #region MyControlName Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion MyControlName Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ScriptBlock")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AllowControl")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoClose")
  [Void]$StringBuilder.AppendLine("    .PARAMETER AutoCloseWait")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Zero`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [ScriptBlock]`$ScriptBlock = {},")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable = @{},")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 45,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 30,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AllowControl,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$AutoClose,")
  [Void]$StringBuilder.AppendLine("    [ValidateRange(0, 300)]")
  [Void]$StringBuilder.AppendLine("    [int]`$AutoCloseWait = 10")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$AllowControl.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Size = `$$($MyControlName)DialogForm.MinimumSize")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Tag = @{ `"Cancel`" = `$False; `"Pause`" = `$False }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.Control -and `$EventArg.Alt)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Back }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::End }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Cancel = `$True")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Switch (`$EventArg.KeyCode)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        { `$PSItem -eq [System.Windows.Forms.Keys]::Pause }")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$Sender.Tag.Pause = (-not `$Sender.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("          Break")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  If (`$AllowControl.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Disable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$PassHashTable)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyControlName)DialogMain$($MyControlType), `$HashTable")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$$($MyControlName)DialogMain$($MyControlType)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    If ([MyConfig]::Production)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      # Re-enable Auto Exit Timer")
  [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    switch (`$$($MyControlName)DialogButtons)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      1")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmMidButton.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      2")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      3")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogBtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("        Break")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (((`$DialogResult -eq `$ButtonDefault) -and `$AutoClose.IsPresent) -or (`$$($MyControlName)DialogButtons -eq 0))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("      while (`$StopWatch.Elapsed.TotalSeconds -le `$AutoCloseWait)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        [System.Threading.Thread]::Sleep(10)")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"`$$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainRichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Name = `"$($MyControlName)DialogMainRichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Rtf = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Name = `"$($MyControlName)DialogMainTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyControlName)DialogMain $($MyControlType) Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      MouseDown Event for the $($MyControlName)DialogMain $($MyControlType) Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The $($MyControlType) Control that fired the MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the $($MyControlType) MouseDown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogMain$($MyControlType)MouseDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.$($MyControlType)]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter MouseDown Event for ```$$($MyControlName)DialogMain$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMain$($MyControlType).SelectionLength = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMain$($MyControlType).SelectionStart = `$$($MyControlName)DialogMain$($MyControlType).TextLength")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit MouseDown Event for ```$$($MyControlName)DialogMain$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMain$($MyControlType)MouseDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMain$($MyControlType).add_MouseDown({ Start-$($MyControlName)DialogMain$($MyControlType)MouseDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"Zero`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 0")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($MyControlName)DialogButtons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Text = `"`$$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 1) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Enabled = `$False")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$$($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$PassHashTable = `$PSBoundParameters.ContainsKey(`"HashTable`")")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  [Void]$StringBuilder.Append((Build-MyScriptStatusSample -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType))
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptAdvStatusDialog"
}
#endregion function Build-MyScriptAdvStatusDialog

#region function Build-MyScriptStatusSample
function Build-MyScriptStatusSample ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .EXAMPLE
      Build-MyScriptStatusSample -MyScriptName $MyScriptName -MyControlName $MyControlName -MyControlType $MyControlType
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("TextBox", "RichTextBox")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptStatusSample"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ********* My Code ********
  
  if ($MyControlType -eq "RichTextBox")
  {
    #region Function Write-RichTextBox
    [Void]$StringBuilder.AppendLine("#region Function Write-$($MyControlType)")
    [Void]$StringBuilder.AppendLine("Function Write-$($MyControlType)")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      Write to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      Write to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .PARAMETER $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Alignment")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
    [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
    [Void]$StringBuilder.AppendLine("    .PARAMETER NoNewLine")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `$Text")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
    [Void]$StringBuilder.AppendLine("    .LINK")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"NewLine`")]")
    [Void]$StringBuilder.AppendLine("  param (")
    [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.$($MyControlType)]`$$($MyControlType) = `$MyStatusDialogMain$($MyControlType),")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
    [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = [System.Windows.Forms.HorizontalAlignment]::Left,")
    [Void]$StringBuilder.AppendLine("    [String]`$Text,")
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"NewLine`")]")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"NoNewLine`")]")
    [Void]$StringBuilder.AppendLine("    [Switch]`$NoNewLine")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionLength = 0")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionStart = `$$($MyControlType).TextLength")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionAlignment = `$Alignment")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionFont = `$Font")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionColor = `$TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`$Text)")
    [Void]$StringBuilder.AppendLine("  if (-not `$NoNewLine.IsPresent)")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlType).SelectionColor = `$BulletFore")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlType).AppendText(`"``r``n`")")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).ScrollToCaret()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).Refresh()")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion Function Write-$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    #endregion Function Write-RichTextBox
    
    #region Function Write-RichTextBoxValue
    [Void]$StringBuilder.AppendLine("#region Function Write-$($MyControlType)Value")
    [Void]$StringBuilder.AppendLine("Function Write-$($MyControlType)Value")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      Write Property Value to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      Write Property Value to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .PARAMETER $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .PARAMETER TextFore")
    [Void]$StringBuilder.AppendLine("    .PARAMETER ValueFore")
    [Void]$StringBuilder.AppendLine("    .PARAMETER BulletFore")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Font")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Text")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Value")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType)Value -$($MyControlType) `$$($MyControlType) -Text `$Text -Value `$Value")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
    [Void]$StringBuilder.AppendLine("    .LINK")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
    [Void]$StringBuilder.AppendLine("  Param (")
    [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.$($MyControlType)]`$$($MyControlType) = `$MyStatusDialogMain$($MyControlType),")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$TextFore = [MyConfig]::Colors.TextFore,")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$ValueFore = [MyConfig]::Colors.TextInfo,")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Color]`$BulletFore = [MyConfig]::Colors.TextFore,")
    [Void]$StringBuilder.AppendLine("    [System.Drawing.Font]`$Font = [MyConfig]::Font.Regular,")
    [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$Text,")
    [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [String]`$Value")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionLength = 0")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionStart = `$$($MyControlType).TextLength")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionFont = `$Font")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionColor = `$TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`"`$(`$Text)`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionColor = `$BulletFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`": `")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionColor = `$ValueFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`"`$(`$Value)`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionColor = `$BulletFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`"``r``n`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).ScrollToCaret()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).Refresh()")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion Function Write-$($MyControlType)Value")
    [Void]$StringBuilder.AppendLine("")
    #endregion Function Write-RichTextBoxValue
    
    #region Function Write-RichTextBoxError
    [Void]$StringBuilder.AppendLine("#region Function Write-RichTextBoxError")
    [Void]$StringBuilder.AppendLine("Function Write-RichTextBoxError")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      Write Error Message to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      Write Error Message to $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .PARAMETER $($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      Write-RichTextBoxError -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
    [Void]$StringBuilder.AppendLine("    .LINK")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
    [Void]$StringBuilder.AppendLine("  param (")
    [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.$($MyControlType)]`$$($MyControlType) = `$$($MyControlName)DialogMainRichTextBox")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Error: `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `$(`$Error[0].Exception.Message) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Code: `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text ((`$Error[0].InvocationInfo.Line).Trim()) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Line: `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text (`$Error[0].InvocationInfo.ScriptLineNumber) -TextFore ([MyConfig]::Colors.TextBad) -NoNewLine")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion Function Write-RichTextBoxError")
    [Void]$StringBuilder.AppendLine("")
    #endregion Function Write-RichTextBoxError
  }
  else
  {
    #region Function Write-TextBox
    [Void]$StringBuilder.AppendLine("#region Function Write-TextBox")
    [Void]$StringBuilder.AppendLine("Function Write-TextBox")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      Write to TextBox")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      Write to TextBox")
    [Void]$StringBuilder.AppendLine("    .PARAMETER TextBox")
    [Void]$StringBuilder.AppendLine("    .PARAMETER NoNewLine")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("      Write-TextBox -TextFore `$TextFore -Text `$Text")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
    [Void]$StringBuilder.AppendLine("    .LINK")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
    [Void]$StringBuilder.AppendLine("  param (")
    [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.TextBox]`$$($MyControlType) = `$$($MyControlName)DialogMainTextBox,")
    [Void]$StringBuilder.AppendLine("    [String]`$Text,")
    [Void]$StringBuilder.AppendLine("    [Switch]`$NoNewLine")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).AppendText(`$Text)")
    [Void]$StringBuilder.AppendLine("  if (-not `$NoNewLine.IsPresent)")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlType).AppendText(`"``r``n`")")
    [Void]$StringBuilder.AppendLine("  }")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).ScrollToCaret()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).Refresh()")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion Function Write-TextBox")
    [Void]$StringBuilder.AppendLine("")
    #endregion Function Write-TextBox
  }
  
  #region function Display-MyStatusControlType - Sample Code
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("# Sample Function Display Status Messages")
  [Void]$StringBuilder.AppendLine("# ---------------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Display-$($MyControlName)$($MyControlType)")
  [Void]$StringBuilder.AppendLine("function Display-$($MyControlName)$($MyControlType)()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER $($MyControlType)")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Display-$($MyControlName)$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Display-$($MyControlName)$($MyControlType) -$($MyControlType) `$$($MyControlType) -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.$($MyControlType)]`$$($MyControlType),")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Display-$($MyControlName)$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlType).Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$HashTable.ContainsKey(`"ShowHeader`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$HashTable.ShowHeader")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("  # **************")
    [Void]$StringBuilder.AppendLine("  # RFT Formatting")
    [Void]$StringBuilder.AppendLine("  # **************")
    [Void]$StringBuilder.AppendLine("  # Permanate till Changed")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionAlignment = [System.Windows.Forms.HorizontalAlignment]::Left")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionBullet = `$True")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionIndent = 10")
    [Void]$StringBuilder.AppendLine("  # Resets After AppendText")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionBackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionCharOffset = 0")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  #`$$($MyControlType).SelectionFont = [MyConfig]::Font.Bold")
    [Void]$StringBuilder.AppendLine("  # **********************")
    [Void]$StringBuilder.AppendLine("  # Update $($MyControlType) Text...")
    [Void]$StringBuilder.AppendLine("  # **********************")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionIndent = 10")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionBullet = `$False")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  # Write KPI Event")
    [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -Text `"`$(`$$($MyControlType).Parent.Parent.Text)`" -TextFore ([MyConfig]::Colors.TextTitle)")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    # Initialize StopWatch")
    [Void]$StringBuilder.AppendLine("    `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
    [Void]$StringBuilder.AppendLine(" }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Started Proccess List Data Here...`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionIndent = 20")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionBullet = `$True")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  # **********************")
    [Void]$StringBuilder.AppendLine("  # Update $($MyControlType) Text...")
    [Void]$StringBuilder.AppendLine("  # **********************")
    [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
    [Void]$StringBuilder.AppendLine("  {")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"`$(`$$($MyControlType).Parent.Parent.Text)`"")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine(" }")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Started Proccess List Data Here...`"")
    [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel foreach (`$Key in `$HashTable.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Found Key`" -TextFore ([MyConfig]::Colors.TextInfo) -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `": `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"`$(`$Key) = `$(`$HashTable[`$Key])`" -TextFore ([MyConfig]::Colors.TextGood) -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Found List Item: `$(`$Item)`"")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("        `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    :UserCancel For (`$Count = 1; `$Count -le 19; `$Count++)")
  [Void]$StringBuilder.AppendLine("    {")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"`$(`"X`" * `$Count)`" -TextFore ([MyConfig]::Colors.TextInfo) -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `" - `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Green`" -TextFore ([MyConfig]::Colors.TextGood) -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"`$(`"X`" * `$Count)`"  -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `" - `" -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Green`" -NoNewLine")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  [Void]$StringBuilder.AppendLine("      # Check for Fast Exit")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("      If (`$$($MyControlType).Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$$($MyControlType)")
  [Void]$StringBuilder.AppendLine("        Write-RichTextBox -RichTextBox `$$($MyControlType) -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("        `$DisplayResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("        Break UserCancel")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      # Pause Processing Loop")
  [Void]$StringBuilder.AppendLine("      If (`$$($MyControlType).Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$TmpPause = `$$($MyControlType).SelectionBullet")
  [Void]$StringBuilder.AppendLine("        `$TmpTitle = `$$($MyControlType).Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("        While (`$$($MyControlType).Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("          [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlType).Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Start-Sleep -Milliseconds 100")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Pause Before Deployment")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Tag.Pause = `$True")
  [Void]$StringBuilder.AppendLine("  `$TmpPause = `$RichTextBox.SelectionBullet")
  [Void]$StringBuilder.AppendLine("  `$TmpTitle = `$RichTextBox.Parent.Parent.Text")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `"`$(`$TmpTitle) - PAUSED!`"")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Pause to Review Status`" -Font ([MyConfig]::Font.Bold) -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Press 'Pause' to Continue with the Current Deployment`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"or Ctrl-Alt-Backspace to Exit / Cancel`" -Alignment Center")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  While (`$RichTextBox.Parent.Parent.Tag.Pause)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [System.Threading.Thread]::Sleep(100)")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::DoEvents()")
  [Void]$StringBuilder.AppendLine("    If (`$RichTextBox.Parent.Parent.Tag.Cancel)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.Parent.Parent.Tag.Pause = `$False")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Exiting - User Canceled`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextBad) -Alignment Center")
  [Void]$StringBuilder.AppendLine("      `$DisplayResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$TmpPause")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Parent.Parent.Text = `$TmpTitle")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  [Void]$StringBuilder.AppendLine("  Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Show Fake Error Message`"-TextFore ([MyConfig]::Colors.TextWarn) -Font ([MyConfig]::Font.Bold)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlType).SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Try")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      Throw `"This is a Fake Error!`"")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("    Catch")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      # Write Error to Status Dialog")
    [Void]$StringBuilder.AppendLine("      Write-RichTextBoxError -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlType).SelectionIndent = 10")
    [Void]$StringBuilder.AppendLine("    `$$($MyControlType).SelectionBullet = `$False")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    if (`$DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Add Success Message Here!`"")
    [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextGood")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("    else")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Add Error Message Here!`"")
    [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextBad")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -TextFore `$FinalClr -Text `$FinalMsg")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Alignment `"Center`" -Text (`$StopWatch.Elapsed.ToString())")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Try")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      Throw `"This is a Fake Error!`"")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("    Catch")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Error: `$(`$Error[0].Exception.Message)`"")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
    [Void]$StringBuilder.AppendLine("      Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    if (`$DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Add Success Message Here!`"")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("    else")
    [Void]$StringBuilder.AppendLine("    {")
    [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Add Error Nessage Here!`"")
    [Void]$StringBuilder.AppendLine("    }")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text `$FinalMsg")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType) -Text (`$StopWatch.Elapsed.ToString())")
    [Void]$StringBuilder.AppendLine("    Write-$($MyControlType) -$($MyControlType) `$$($MyControlType)")
  }
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Display-$($MyControlName)$($MyControlType)`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Display-$($MyControlName)$($MyControlType)")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Display-$($MyControlName)ControlType - Sample Code
  
  #region function Display-InitiliazeUtility
  [Void]$StringBuilder.AppendLine("# ---------------------------------")
  [Void]$StringBuilder.AppendLine("# Add Custom Display Status Message")
  [Void]$StringBuilder.AppendLine("# ---------------------------------")
  [Void]$StringBuilder.AppendLine("#region function Display-Initiliaze$($MyScriptName)Utility")
  [Void]$StringBuilder.AppendLine("Function Display-Initiliaze$($MyScriptName)Utility()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Display Utility Status Sample Function")
  [Void]$StringBuilder.AppendLine("    .PARAMETER RichTextBox")
  [Void]$StringBuilder.AppendLine("    .PARAMETER HashTable")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Display-Initiliaze$($MyScriptName)Utility -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Display-Initiliaze$($MyScriptName)Utility -RichTextBox `$RichTextBox -HashTable `$HashTable")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [Parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.RichTextBox]`$RichTextBox,")
  [Void]$StringBuilder.AppendLine("    [HashTable]`$HashTable")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Display-Initiliaze$($MyScriptName)Utility`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.Refresh()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"HashTable`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    If (`$HashTable.ContainsKey(`"ShowHeader`"))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$HashTable.ShowHeader")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$ShowHeader = `$True")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Write KPI Event")
  [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Some Unknown KPI Event`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -Text `"`$(`$RichTextBox.Parent.Parent.Text)`" -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Initialize StopWatch")
  [Void]$StringBuilder.AppendLine("    `$StopWatch = [System.Diagnostics.Stopwatch]::StartNew()")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Validate Runtime Parameters`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Validating Runtime Parameters ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Script / Utility")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Utility`" -Value ([MyConfig]::ScriptName) -ValueFore ([MyConfig]::Colors.TextGood)")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Version`" -Value ([MyConfig]::ScriptVersion) -ValueFore ([MyConfig]::Colors.TextGood)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Run From/As Info")
  [Void]$StringBuilder.AppendLine("  `$TmpRunFrom = Get-WmiObject -Query `"Select Name, Domain, PartOfDomain From Win32_ComputerSystem`"")
  [Void]$StringBuilder.AppendLine("  If (`$TmpRunFrom.PartOfDomain)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRunFromText = `"`$(`$TmpRunFrom.Name).`$(`$TmpRunFrom.Domain)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpRunFromText = `"`$(`$TmpRunFrom.Name)`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Run From`" -Value `$TmpRunFromText")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Run As`" -Value `"`$([Environment]::UserDomainName)\`$([Environment]::UserName)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Microsoft Entra Logon")
  [Void]$StringBuilder.AppendLine("  #Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Microsoft Entra Logon: `" -Value ([MyConfig]::AADLogonInfo.Context.Account.Id)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Logon Authentication")
  [Void]$StringBuilder.AppendLine("  If ([MyConfig]::CurrentUser.AuthenticationType -eq `"CloudAP`")")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpText = `"Microsoft Entra`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpText = `"Active Directory`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Authentication`" -Value `"`$(`$TmpText)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify OS Architecture")
  [Void]$StringBuilder.AppendLine("  `$TempRunOS = Get-WmiObject -Query `"Select Caption, Version, OSArchitecture From Win32_OperatingSystem`"")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Op Sys`" -Value `"`$(`$TempRunOS.Caption)`"")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Build`" -Value `"`$(`$TempRunOS.Version)`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Verify AC Power")
  [Void]$StringBuilder.AppendLine("  `$ChkBattery = (Get-WmiObject -Class Win32_Battery).BatteryStatus")
  [Void]$StringBuilder.AppendLine("  If ([String]::IsNullOrEmpty(`$ChkBattery) -or (`$ChkBattery -eq 2))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpText = `"Yes`"")
  [Void]$StringBuilder.AppendLine("    `$TmpColor = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TmpText = `"No`"")
  [Void]$StringBuilder.AppendLine("    `$TmpColor = [MyConfig]::Colors.TextWarn")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"AC Power`" -Value `"`$(`$TmpText)`" -ValueFore `$TmpColor")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # -------------------------")
  [Void]$StringBuilder.AppendLine("  # Display Passed Parameters")
  [Void]$StringBuilder.AppendLine("  # -------------------------")
  [Void]$StringBuilder.AppendLine("  `$CheckParams = `$Script:PSBoundParameters")
  [Void]$StringBuilder.AppendLine("  If (`$CheckParams.Keys.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Runtime Parameters`"")
  [Void]$StringBuilder.AppendLine("    ForEach (`$Key In `$CheckParams.Keys)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RichTextBox.SelectionIndent = 30")
  [Void]$StringBuilder.AppendLine("      Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `$Key -Value `$(`$CheckParams[`$Key])")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Validating Runtime Parameters ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBox -RichTextBox `$RichTextBox -Text `"Start Script Specific Init Here`" -Font ([MyConfig]::Font.Bold) -TextFore ([MyConfig]::Colors.TextTitle)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionIndent = 20")
  [Void]$StringBuilder.AppendLine("  `$RichTextBox.SelectionBullet = `$True")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Config Step`" -Value `"Step Value`"")
  [Void]$StringBuilder.AppendLine("  Write-RichTextBoxValue -RichTextBox `$RichTextBox -Text `"Config Step`" -Value `"Step Value`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$ShowHeader)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionIndent = 10")
  [Void]$StringBuilder.AppendLine("    `$RichTextBox.SelectionBullet = `$False")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$DisplayResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Initialization was Successful`"")
  [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextGood")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$FinalMsg = `"Initialization Failed`"")
  [Void]$StringBuilder.AppendLine("      `$FinalClr = [MyConfig]::Colors.TextBad")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Font ([MyConfig]::Font.Title) -Alignment `"Center`" -TextFore `$FinalClr -Text `$FinalMsg")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox -Alignment `"Center`" -Text (`$StopWatch.Elapsed.ToString())")
  [Void]$StringBuilder.AppendLine("    Write-RichTextBox -RichTextBox `$RichTextBox")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult")
  [Void]$StringBuilder.AppendLine("  `$DisplayResult = `$Null")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Display-Initiliaze$($MyScriptName)Utility`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Display-Initiliaze$($MyScriptName)Utility")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Display-InitiliazeUtility
  
  #endregion ********* My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptStatusSample"
}
#endregion function Build-MyScriptStatusSample

#region function Build-MyScriptMessageDialog
function Build-MyScriptMessageDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyScriptMessageDialog -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName,
    [parameter(Mandatory = $True)]
    [ValidateSet("WebBrowser", "RichTextBox")]
    [String]$MyControlType
  )
  Write-Verbose -Message "Enter Function Build-MyScriptMessageDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Message")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonDefault")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String]`$Message = `"<html><head><title>Message Title</title></head><body><img src='data:image/png; base64,{MyBase64Txt}' /><br>My Message Text<br><A target='_blank' href='http://www.microsoft.com'>Microsoft</a></body></html>`",")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 18,")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonDefault = `"OK`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonLeft,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"One`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonMid,")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Two`")]")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Three`")]")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.DialogResult]`$ButtonRight")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** `$$($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shown Event for the `$$($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("       The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("       The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("       Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # `$$($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"`$$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  
  if ($MyControlType -eq "RichTextBox")
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainRichTextBox)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.DetectUrls = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.MaxLength = [Int]::MaxValue")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Multiline = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Name = `"$($MyControlName)DialogMainRichTextBox`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ReadOnly = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Rtf = `$Message")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.Text = `"`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainRichTextBox.WordWrap = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()")
  }
  else
  {
    [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainWebBrowser)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.AllowWebBrowserDrop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.BackColor = [MyConfig]::Colors.TextBack")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.DocumentText = `$Message")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Font = [MyConfig]::Font.Regular")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.ForeColor = [MyConfig]::Colors.TextFore")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.IsWebBrowserContextMenuEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Name = `"$($MyControlName)DialogMainWebBrowser`"")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.ScriptErrorsSuppressed = `$True")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.ScrollBarsEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (`$$($MyControlName)DialogMainPanel.ClientSize.Height - (`$$($MyControlName)DialogMainWebBrowser.Top + [MyConfig]::FormSpacer)))")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.TabStop = `$False")
    [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainWebBrowser.WebBrowserShortcutsEnabled = `$False")
    [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainWebBrowser = [System.Windows.Forms.WebBrowser]::New()")
  }
  
  
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  switch (`$PSCmdlet.ParameterSetName)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `"One`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 1")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Two`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 2")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `"Three`"")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogButtons = 3")
  [Void]$StringBuilder.AppendLine("      Break")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  if (`$$($MyControlName)DialogButtons -gt 0)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    # `$$($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("    # ************************************************")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.Text = `"`$$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("    `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("    `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.DialogResult = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Text = `"&`$(`$ButtonLeft.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 1) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.DialogResult = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$TempWidth + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Text = `"&`$(`$ButtonMid.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("    If ((`$$($MyControlName)DialogButtons -eq 2) -or (`$$($MyControlName)DialogButtons -eq 3))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.DialogResult = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Enabled = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + `$TempWidth + `$TempMod + ([MyConfig]::FormSpacer * 2)), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Text = `"&`$(`$ButtonRight.ToString())`"")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), ((`$$($MyControlName)DialogBtmPanel.Controls[`$$($MyControlName)DialogBtmPanel.Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for `$$($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** `$$($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$$($MyScriptName)Form)")
  [Void]$StringBuilder.AppendLine("  [$($MyControlName)Dialog]::New((`$DialogResult -eq `$ButtonDefault), `$DialogResult)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptMessageDialog"
}
#endregion function Build-MyScriptMessageDialog

#region function Show-MySIDialog
function Show-MySIDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-MySIDialog
    .DESCRIPTION
      Shows Show-MySIDialog
    .PARAMETER DialogTitle
    .PARAMETER FileMessage
    .PARAMETER IconMessage
    .PARAMETER IconPath
    .PARAMETER IconIndex
    .PARAMETER Multi
    .PARAMETER Width
    .PARAMETER Height
    .PARAMETER ButtonLeft
    .PARAMETER ButtonMid
    .PARAMETER ButtonRight
    .EXAMPLE
      $Return = Show-MySIDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$FileMessage = "Selected Icon File / Library",
    [String]$IconMessage = "File / Library Icons...",
    [String]$IconPath = "",
    [Int[]]$IconIndex = -1,
    [Switch]$Multi,
    [ValidateRange(35, 60)]
    [Int]$Width = 38,
    [ValidateRange(25, 35)]
    [Int]$Height = 25,
    [String]$ButtonLeft = "&OK",
    [String]$ButtonMid = "&Reset",
    [String]$ButtonRight = "&Cancel"
  )
  Write-Verbose -Message "Enter Function Show-MySIDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** MySIDialog **** Begin <<<<<<<<<<<<<<<<
  
  $MySIDialogFormComponents = [System.ComponentModel.Container]::New()
  
  # ************************************************
  # MySIDialog ImageList
  # ************************************************
  #region $MySIDialogImageList = [System.Windows.Forms.ImageList]::New()
  $MySIDialogImageList = [System.Windows.Forms.ImageList]::New($MySIDialogFormComponents)
  $MySIDialogImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit
  $MySIDialogImageList.ImageSize = [System.Drawing.Size]::New(32, 32)
  #endregion $MySIDialogImageList = [System.Windows.Forms.ImageList]::New()
  
  # ************************************************
  # MySIDialog Form
  # ************************************************
  #region $MySIDialogForm = [System.Windows.Forms.Form]::New()
  $MySIDialogForm = [System.Windows.Forms.Form]::New()
  $MySIDialogForm.BackColor = [MyConfig]::Colors.Back
  $MySIDialogForm.Font = [MyConfig]::Font.Regular
  $MySIDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $MySIDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
  $MySIDialogForm.Icon = $MyFCGForm.Icon
  $MySIDialogForm.KeyPreview = $True
  $MySIDialogForm.MaximizeBox = $False
  $MySIDialogForm.MinimizeBox = $False
  $MySIDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $MySIDialogForm.Name = "MySIDialogForm"
  $MySIDialogForm.Owner = $MyFCGForm
  $MySIDialogForm.ShowInTaskbar = $False
  $MySIDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $MySIDialogForm.Text = $DialogTitle
  #endregion $MySIDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-MySIDialogFormKeyDown ********
  function Start-MySIDialogFormKeyDown
  {
    <#
      .SYNOPSIS
        KeyDown Event for the MySIDialog Form Control
      .DESCRIPTION
        KeyDown Event for the MySIDialog Form Control
      .PARAMETER Sender
         The Form Control that fired the KeyDown Event
      .PARAMETER EventArg
         The Event Arguments for the Form KeyDown Event
      .EXAMPLE
         Start-MySIDialogFormKeyDown -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter KeyDown Event for `$MySIDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    if ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)
    {
      $MySIDialogForm.Close()
    }
    
    Write-Verbose -Message "Exit KeyDown Event for `$MySIDialogForm"
  }
  #endregion ******** Function Start-MySIDialogFormKeyDown ********
  $MySIDialogForm.add_KeyDown({ Start-MySIDialogFormKeyDown -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-MySIDialogFormMove ********
  function Start-MySIDialogFormMove
  {
    <#
      .SYNOPSIS
        Move Event for the MySIDialog Form Control
      .DESCRIPTION
        Move Event for the MySIDialog Form Control
      .PARAMETER Sender
         The Form Control that fired the Move Event
      .PARAMETER EventArg
         The Event Arguments for the Form Move Event
      .EXAMPLE
         Start-MySIDialogFormMove -Sender $Sender -EventArg $EventArg
      .NOTES
        Original Function By Ken Sweet)
    #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Move Event for `$MySIDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    Write-Verbose -Message "Exit Move Event for `$MySIDialogForm"
  }
  #endregion ******** Function Start-MySIDialogFormMove ********
  $MySIDialogForm.add_Move({ Start-MySIDialogFormMove -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-MySIDialogFormShown ********
  function Start-MySIDialogFormShown
  {
  <#
    .SYNOPSIS
      Shown Event for the MySIDialog Form Control
    .DESCRIPTION
      Shown Event for the MySIDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-MySIDialogFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$MySIDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    $TempIconPath = "$($MySIDialogMainFileTextBox.Text)".Trim()
    $TempIconIndex = @($MySIDialogMainFileTextBox.Tag)
    
    if (-not [String]::IsNullOrEmpty($TempIconPath))
    {
      if ([System.IO.File]::Exists($TempIconPath))
      {
        $TempIconCount = [Extract.MyIcon]::IconCount($TempIconPath)
        $MySIDialogMainIconListView.BeginUpdate()
        For ($Count = 0; $Count -lt $TempIconCount; $Count++)
        {
          $MySIDialogImageList.Images.Add(([Extract.MyIcon]::IconReturn($TempIconPath, $Count, $True)))
          [Void]($MySIDialogMainIconListView.Items.Add("$("{0:###00}" -f $Count)", $Count))
        }
        $MySIDialogMainIconListView.EndUpdate()
        
        if ($MySIDialogMainIconListView.CheckBoxes)
        {
          if ($TempIconIndex.Count -and ($TempIconIndex[0] -gt -1))
          {
            $TempIconIndex | ForEach-Object -Process { $MySIDialogMainIconListView.Items[$PSItem].Checked = $True }
          }
        }
        else
        {
          if ($TempIconIndex[0] -gt -1)
          {
            $MySIDialogMainIconListView.Items[$TempIconIndex[0]].Selected = $True
            $MySIDialogMainIconListView.Select()
            $MySIDialogMainIconListView.Items[$TempIconIndex[0]].EnsureVisible()
          }
        }
      }
    }
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Shown Event for `$MySIDialogForm"
  }
  #endregion ******** Function Start-MySIDialogFormShown ********
  $MySIDialogForm.add_Shown({ Start-MySIDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for MySIDialog Form ********
  
  # ************************************************
  # MySIDialogMain Panel
  # ************************************************
  #region $MySIDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MySIDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MySIDialogForm.Controls.Add($MySIDialogMainPanel)
  $MySIDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MySIDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $MySIDialogMainPanel.Name = "MySIDialogMainPanel"
  $MySIDialogMainPanel.Text = "MySIDialogMainPanel"
  #endregion $MySIDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $MySIDialogMainPanel Controls ********
  
  #region $MySIDialogMainFileLabel = [System.Windows.Forms.Label]::New()
  $MySIDialogMainFileLabel = [System.Windows.Forms.Label]::New()
  $MySIDialogMainPanel.Controls.Add($MySIDialogMainFileLabel)
  $MySIDialogMainFileLabel.AutoSize = $True
  $MySIDialogMainFileLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))
  $MySIDialogMainFileLabel.Name = "MySIDialogMainFileLabel"
  $MySIDialogMainFileLabel.TabStop = $False
  $MySIDialogMainFileLabel.Text = $FileMessage
  $MySIDialogMainFileLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $MySIDialogMainFileLabel = [System.Windows.Forms.Label]::New()
  
  #region $MySIDialogMainFileButton = [System.Windows.Forms.Button]::New()
  $MySIDialogMainFileButton = [System.Windows.Forms.Button]::New()
  $MySIDialogMainPanel.Controls.Add($MySIDialogMainFileButton)
  $MySIDialogMainFileButton.AutoSize = $True
  $MySIDialogMainFileButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MySIDialogMainFileButton.Font = [MyConfig]::Font.Bold
  $MySIDialogMainFileButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MySIDialogMainFileButton.Name = "MySIDialogMainFileButton"
  $MySIDialogMainFileButton.TabIndex = 0
  $MySIDialogMainFileButton.TabStop = $True
  $MySIDialogMainFileButton.Text = "  &Browse...  "
  $MySIDialogMainFileButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $MySIDialogMainFileButton.Location = [System.Drawing.Point]::New(($MySIDialogMainPanel.ClientSize.Width - ($MySIDialogMainFileButton.Width + [MyConfig]::FormSpacer)), ($MySIDialogMainFileLabel.Bottom + [MyConfig]::FormSpacer))
  #endregion $MySIDialogMainFileButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-MySIDialogMainFileButtonClick ********
  function Start-MySIDialogMainFileButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the MySIDialogMainFile Button Control
    .DESCRIPTION
      Click Event for the MySIDialogMainFile Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-MySIDialogMainFileButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MySIDialogMainFileButton"
    
    [MyConfig]::AutoExit = 0
    
    $MyFCGOpenFileDialog.Title = "Extact Icons"
    $MyFCGOpenFileDialog.Filter = "All Icon Files|*.ico;*.exe;*.dll|Icon Files|*.ico|EXE Files|*.exe|DLL Files|*.dll|All Files|*.*"
    $MyFCGOpenFileDialog.FilterIndex = 0
    $MyFCGOpenFileDialog.FileName = ""
    If ($MyFCGOpenFileDialog.ShowDialog($MyFCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $MySIDialogImageList.Images.Clear()
      $MySIDialogMainIconListView.Items.Clear()
      
      $TempIconPath = "$($MyFCGOpenFileDialog.FileName)".Trim()
      $TempIconCount = [Extract.MyIcon]::IconCount($TempIconPath)
      $MySIDialogMainIconListView.BeginUpdate()
      For ($Count = 0; $Count -lt $TempIconCount; $Count++)
      {
        $MySIDialogImageList.Images.Add(([Extract.MyIcon]::IconReturn($TempIconPath, $Count, $True)))
        [Void]($MySIDialogMainIconListView.Items.Add("$("{0:###00}" -f $Count)", $Count))
      }
      $MySIDialogMainIconListView.EndUpdate()
      $MySIDialogMainFileTextBox.Text = $TempIconPath
      $MySIDialogMainFileTextBox.Tag = @(-1)
    }
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Click Event for `$MySIDialogMainFileButton"
  }
  #endregion ******** Function Start-MySIDialogMainFileButtonClick ********
  $MySIDialogMainFileButton.add_Click({ Start-MySIDialogMainFileButtonClick -Sender $This -EventArg $PSItem })
  
  #region $MySIDialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()
  $MySIDialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()
  $MySIDialogMainPanel.Controls.Add($MySIDialogMainFileTextBox)
  $MySIDialogMainFileTextBox.AutoSize = $False
  $MySIDialogMainFileTextBox.BackColor = [MyConfig]::Colors.TextBack
  $MySIDialogMainFileTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $MySIDialogMainFileTextBox.Font = [MyConfig]::Font.Regular
  $MySIDialogMainFileTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $MySIDialogMainFileTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($MySIDialogMainFileLabel.Bottom + [MyConfig]::FormSpacer))
  $MySIDialogMainFileTextBox.Name = "MySIDialogMainFileTextBox"
  $MySIDialogMainFileTextBox.ReadOnly = $True
  $MySIDialogMainFileTextBox.Size = [System.Drawing.Size]::New((($MySIDialogMainFileButton.Left - [MyConfig]::FormSpacer) - $MySIDialogMainFileTextBox.Left), $MySIDialogMainFileButton.Height)
  $MySIDialogMainFileTextBox.TabStop = $False
  $MySIDialogMainFileTextBox.Text = $IconPath
  $MySIDialogMainFileTextBox.Tag = $IconIndex
  $MySIDialogMainFileTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left
  $MySIDialogMainFileTextBox.WordWrap = $False
  #endregion $MySIDialogMainFileTextBox = [System.Windows.Forms.TextBox]::New()
  
  #region $MySIDialogMainIconLabel = [System.Windows.Forms.Label]::New()
  $MySIDialogMainIconLabel = [System.Windows.Forms.Label]::New()
  $MySIDialogMainPanel.Controls.Add($MySIDialogMainIconLabel)
  $MySIDialogMainIconLabel.AutoSize = $True
  $MySIDialogMainIconLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($MySIDialogMainFileTextBox.Bottom + ([MyConfig]::FormSpacer * 2)))
  $MySIDialogMainIconLabel.Name = "MySIDialogMainIconLabel"
  $MySIDialogMainIconLabel.TabStop = $False
  $MySIDialogMainIconLabel.Text = $IconMessage
  $MySIDialogMainIconLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleLeft
  #endregion $MySIDialogMainIconLabel = [System.Windows.Forms.Label]::New()
  
  #region $MySIDialogMainIconListView = [System.Windows.Forms.ListView]::New()
  $MySIDialogMainIconListView = [System.Windows.Forms.ListView]::New()
  $MySIDialogMainPanel.Controls.Add($MySIDialogMainIconListView)
  $MySIDialogMainIconListView.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  $MySIDialogMainIconListView.BackColor = [MyConfig]::Colors.TextBack
  $MySIDialogMainIconListView.CheckBoxes = $Multi.IsPresent
  $MySIDialogMainIconListView.Font = [MyConfig]::Font.Bold
  $MySIDialogMainIconListView.ForeColor = [MyConfig]::Colors.TextFore
  $MySIDialogMainIconListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::None
  $MySIDialogMainIconListView.HideSelection = $False
  $MySIDialogMainIconListView.LabelWrap = $False
  $MySIDialogMainIconListView.LargeImageList = $MySIDialogImageList
  $MySIDialogMainIconListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ($MySIDialogMainIconLabel.Bottom + [MyConfig]::FormSpacer))
  $MySIDialogMainIconListView.MultiSelect = $Multi.IsPresent
  $MySIDialogMainIconListView.Name = "MySIDialogMainIconListView"
  $MySIDialogMainIconListView.ShowGroups = $False
  $MySIDialogMainIconListView.Size = [System.Drawing.Size]::New(($MySIDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), (($MySIDialogMainPanel.ClientSize.Height - [MyConfig]::FormSpacer) - $MySIDialogMainIconListView.Top))
  $MySIDialogMainIconListView.Sorting = [System.Windows.Forms.SortOrder]::None
  $MySIDialogMainIconListView.TabIndex = 1
  $MySIDialogMainIconListView.TabStop = $True
  $MySIDialogMainIconListView.Text = "MySIDialogMainIconListView"
  $MySIDialogMainIconListView.View = [System.Windows.Forms.View]::LargeIcon
  #endregion $MySIDialogMainIconListView = [System.Windows.Forms.ListView]::New()
  
  #region ******** Function Start-MySIDialogMainIconListViewSelectedIndexChanged ********
  function Start-MySIDialogMainIconListViewSelectedIndexChanged
  {
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the MySIDialogMainIcon ListView Control
    .DESCRIPTION
      SelectedIndexChanged Event for the MySIDialogMainIcon ListView Control
    .PARAMETER Sender
       The ListView Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ListView SelectedIndexChanged Event
    .EXAMPLE
       Start-MySIDialogMainIconListViewSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ListView]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter SelectedIndexChanged Event for `$MySIDialogMainIconListView"
    
    [MyConfig]::AutoExit = 0
    
    Write-Verbose -Message "Exit SelectedIndexChanged Event for `$MySIDialogMainIconListView"
  }
  #endregion ******** Function Start-MySIDialogMainIconListViewSelectedIndexChanged ********
  $MySIDialogMainIconListView.add_SelectedIndexChanged({ Start-MySIDialogMainIconListViewSelectedIndexChanged -Sender $This -EventArg $PSItem })
  
  #endregion ******** $MySIDialogMainPanel Controls ********
  
  # ************************************************
  # MySIDialogBtm Panel
  # ************************************************
  #region $MySIDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $MySIDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  $MySIDialogForm.Controls.Add($MySIDialogBtmPanel)
  $MySIDialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MySIDialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $MySIDialogBtmPanel.Name = "MySIDialogBtmPanel"
  $MySIDialogBtmPanel.Text = "MySIDialogBtmPanel"
  #endregion $MySIDialogBtmPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $MySIDialogBtmPanel Controls ********
  
  # Evenly Space Buttons - Move Size to after Text
  $NumButtons = 3
  $TempSpace = [Math]::Floor($MySIDialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * ($NumButtons + 1)))
  $TempWidth = [Math]::Floor($TempSpace / $NumButtons)
  $TempMod = $TempSpace % $NumButtons
  
  #region $MySIDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmPanel.Controls.Add($MySIDialogBtmLeftButton)
  $MySIDialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left")
  $MySIDialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MySIDialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MySIDialogBtmLeftButton.Font = [MyConfig]::Font.Bold
  $MySIDialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MySIDialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $MySIDialogBtmLeftButton.Name = "MySIDialogBtmLeftButton"
  $MySIDialogBtmLeftButton.TabIndex = 2
  $MySIDialogBtmLeftButton.TabStop = $True
  $MySIDialogBtmLeftButton.Text = $ButtonLeft
  $MySIDialogBtmLeftButton.Size = [System.Drawing.Size]::New($TempWidth, $MySIDialogBtmLeftButton.PreferredSize.Height)
  #endregion $MySIDialogBtmLeftButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-MySIDialogBtmLeftButtonClick ********
  function Start-MySIDialogBtmLeftButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the MySIDialogBtmLeft Button Control
    .DESCRIPTION
      Click Event for the MySIDialogBtmLeft Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-MySIDialogBtmLeftButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MySIDialogBtmLeftButton"
    
    [MyConfig]::AutoExit = 0
    
    if (($MySIDialogMainIconListView.CheckedIndices.Count -and $MySIDialogMainIconListView.CheckBoxes) -or ($MySIDialogMainIconListView.SelectedIndices.Count -and (-not $MySIDialogMainIconListView.CheckBoxes)))
    {
      $MySIDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
    }
    else
    {
      [Void][System.Windows.Forms.MessageBox]::Show($MySIDialogForm, "No Icons Selected", [MyConfig]::ScriptName, "OK", "Warning")
    }
    
    
    Write-Verbose -Message "Exit Click Event for `$MySIDialogBtmLeftButton"
  }
  #endregion ******** Function Start-MySIDialogBtmLeftButtonClick ********
  $MySIDialogBtmLeftButton.add_Click({ Start-MySIDialogBtmLeftButtonClick -Sender $This -EventArg $PSItem })
  
  #region $MySIDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmPanel.Controls.Add($MySIDialogBtmMidButton)
  $MySIDialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top")
  $MySIDialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MySIDialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MySIDialogBtmMidButton.Font = [MyConfig]::Font.Bold
  $MySIDialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MySIDialogBtmMidButton.Location = [System.Drawing.Point]::New(($MySIDialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $MySIDialogBtmMidButton.Name = "MySIDialogBtmMidButton"
  $MySIDialogBtmMidButton.TabIndex = 3
  $MySIDialogBtmMidButton.TabStop = $True
  $MySIDialogBtmMidButton.Text = $ButtonMid
  $MySIDialogBtmMidButton.Size = [System.Drawing.Size]::New(($TempWidth + $TempMod), $MySIDialogBtmMidButton.PreferredSize.Height)
  #endregion $MySIDialogBtmMidButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-MySIDialogBtmMidButtonClick ********
  function Start-MySIDialogBtmMidButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the MySIDialogBtmMid Button Control
    .DESCRIPTION
      Click Event for the MySIDialogBtmMid Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-MySIDialogBtmMidButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MySIDialogBtmMidButton"
    
    [MyConfig]::AutoExit = 0
    
    $TempIconIndex = $MySIDialogMainFileTextBox.Tag
    if ($MySIDialogMainIconListView.CheckBoxes)
    {
      $MySIDialogMainIconListView.CheckedIndices | ForEach-Object -Process { $MySIDialogMainIconListView.Items[$PSItem].Checked = $False }
      if ($TempIconIndex.Count -and ($TempIconIndex[0] -gt -1))
      {
        $TempIconIndex | ForEach-Object -Process { $MySIDialogMainIconListView.Items[$PSItem].Checked = $True }
      }
    }
    else
    {
      $MySIDialogMainIconListView.SelectedIndices.Clear()
      if ($TempIconIndex[0] -gt -1)
      {
        $MySIDialogMainIconListView.Items[$TempIconIndex[0]].Selected = $True
        $MySIDialogMainIconListView.Select()
        $MySIDialogMainIconListView.Items[$TempIconIndex[0]].EnsureVisible()
      }
    }
    
    Write-Verbose -Message "Exit Click Event for `$MySIDialogBtmMidButton"
  }
  #endregion ******** Function Start-MySIDialogBtmMidButtonClick ********
  $MySIDialogBtmMidButton.add_Click({ Start-MySIDialogBtmMidButtonClick -Sender $This -EventArg $PSItem })
  
  #region $MySIDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  $MySIDialogBtmPanel.Controls.Add($MySIDialogBtmRightButton)
  $MySIDialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Right")
  $MySIDialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink
  $MySIDialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack
  $MySIDialogBtmRightButton.Font = [MyConfig]::Font.Bold
  $MySIDialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore
  $MySIDialogBtmRightButton.Location = [System.Drawing.Point]::New(($MySIDialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)
  $MySIDialogBtmRightButton.Name = "MySIDialogBtmRightButton"
  $MySIDialogBtmRightButton.TabIndex = 5
  $MySIDialogBtmRightButton.TabStop = $True
  $MySIDialogBtmRightButton.Text = $ButtonRight
  $MySIDialogBtmRightButton.Size = [System.Drawing.Size]::New($TempWidth, $MySIDialogBtmRightButton.PreferredSize.Height)
  #endregion $MySIDialogBtmRightButton = [System.Windows.Forms.Button]::New()
  
  #region ******** Function Start-MySIDialogBtmRightButtonClick ********
  function Start-MySIDialogBtmRightButtonClick
  {
  <#
    .SYNOPSIS
      Click Event for the MySIDialogBtmRight Button Control
    .DESCRIPTION
      Click Event for the MySIDialogBtmRight Button Control
    .PARAMETER Sender
       The Button Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the Button Click Event
    .EXAMPLE
       Start-MySIDialogBtmRightButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Button]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MySIDialogBtmRightButton"
    
    [MyConfig]::AutoExit = 0
    
    # Cancel Code Goes here
    
    $MySIDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    
    Write-Verbose -Message "Exit Click Event for `$MySIDialogBtmRightButton"
  }
  #endregion ******** Function Start-MySIDialogBtmRightButtonClick ********
  $MySIDialogBtmRightButton.add_Click({ Start-MySIDialogBtmRightButtonClick -Sender $This -EventArg $PSItem })
  
  $MySIDialogBtmPanel.ClientSize = [System.Drawing.Size]::New(($MySIDialogBtmRightButton.Right + [MyConfig]::FormSpacer), ($MySIDialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $MySIDialogBtmPanel Controls ********
  
  #endregion ******** Controls for MySIDialog Form ********
  
  #endregion ================ End **** MySIDialog **** End ================
  
  if (($DialogResult = $MySIDialogForm.ShowDialog($MyFCGForm)) -eq [System.Windows.Forms.DialogResult]::OK)
  {
    if ($MySIDialogMainIconListView.CheckBoxes)
    {
      [MySIDialog]::New($DialogResult, $MySIDialogMainFileTextBox.Text, $MySIDialogMainIconListView.CheckedIndices)
    }
    else
    {
      [MySIDialog]::New($DialogResult, $MySIDialogMainFileTextBox.Text, $MySIDialogMainIconListView.SelectedIndices)
    }
  }
  else
  {
    [MySIDialog]::New($DialogResult)
  }
  
  $MySIDialogFormComponents.Dispose()
  $MySIDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-MySIDialog"
}
#endregion function Show-MySIDialog

#region MyHelp Dialog Info Topics

#region $InfoIntro Compressed RTF
$InfoIntro = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgSW50b2R1Y3Rpb25ccGFyDQpcYjBc
ZjFcZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBJbnRvZHVjdGlvbiFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=
"@
#endregion $InfoIntro Compressed RTF

#region $Info01 Compressed RTF
$Info01 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMDFccGFyDQpcYjBcZjFc
ZnMyMFxwYXINClRoaXMgaXMgTXkgSGVscCBUb3BpYyFccGFyDQoNClxwYXJkXHNhMjAwXHNsMjc2XHNsbXVsdDFcZjJcZnMyMlxsYW5nOVxwYXINCn0NCgA=
"@
#endregion $Info01 Compressed RTF

#region $Info02 Compressed RTF
$Info02 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAyXGYwXHBhcg0K
XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA
"@
#endregion $Info02 Compressed RTF

#region $Info03 Compressed RTF
$Info03 = @"
77u/e1xydGYxXGFuc2lcYW5zaWNwZzEyNTJcZGVmZjBcbm91aWNvbXBhdFxkZWZsYW5nMTAzM3tcZm9udHRibHtcZjBcZm5pbCBWZXJkYW5hO317XGYxXGZuaWxcZmNoYXJzZXQwIFZlcmRhbmE7fXtcZjJcZm5p
bFxmY2hhcnNldDAgQ2FsaWJyaTt9fQ0Ke1wqXGdlbmVyYXRvciBSaWNoZWQyMCAxMC4wLjE5MDQxfVx2aWV3a2luZDRcdWMxIA0KXHBhcmRccWNcYlxmMFxmczMwIEhlbHAgVG9waWMgMFxmMSAzXGYwXHBhcg0K
XGIwXGYxXGZzMjBccGFyDQpUaGlzIGlzIE15IEhlbHAgVG9waWMhXHBhcg0KDQpccGFyZFxzYTIwMFxzbDI3NlxzbG11bHQxXGYyXGZzMjJcbGFuZzlccGFyDQp9DQoA
"@
#endregion $Info03 Compressed RTF

$MyHelpDialogTopics = [Ordered]@{ }
$MyHelpDialogContent = [Ordered]@{ }

$MyHelpDialogTopics.Add("InfoIntro", "Info Introduction")
$MyHelpDialogContent.Add("InfoIntro", $InfoIntro)

$MyHelpDialogTopics.Add("Info01", "Info Topic 01")
$MyHelpDialogContent.Add("Info01", $Info01)

$MyHelpDialogTopics.Add("Info02", "Info Topic 02")
$MyHelpDialogContent.Add("Info02", $Info02)

$MyHelpDialogTopics.Add("Info03", "Info Topic 03")
$MyHelpDialogContent.Add("Info03", $Info03)

$InfoIntro = $Null
$Info01 = $Null
$Info02 = $Null
$Info03 = $Null

#endregion MyHelp Dialog Info Topics

#region function Show-MyHelpDialog
function Show-MyHelpDialog ()
{
  <#
    .SYNOPSIS
      Shows Show-MyHelpDialog
    .DESCRIPTION
      Shows Show-MyHelpDialog
    .PARAMETER DialogTitle
    .PARAMETER WindowsTitle
    .PARAMETER InfoTitle
    .PARAMETER DefInfoTopic
    .PARAMETER Width
    .PARAMETER Height
    .EXAMPLE
      $Return = Show-MyHelpDialog -DialogTitle $DialogTitle
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$DialogTitle = "$([MyConfig]::ScriptName)",
    [String]$WindowTitle = "$([MyConfig]::ScriptName) Info",
    [String]$InfoTitle = " << MyFCG Info Topics >> ",
    [String]$DefInfoTopic = "InfoIntro",
    [Int]$Width = 60,
    [Int]$Height = 24
  )
  Write-Verbose -Message "Enter Function Show-MyHelpDialog"
  
  #region >>>>>>>>>>>>>>>> Begin **** MyHelpDialog **** Begin <<<<<<<<<<<<<<<<
  
  # ************************************************
  # MyHelpDialog Form
  # ************************************************
  #region $MyHelpDialogForm = [System.Windows.Forms.Form]::New()
  $MyHelpDialogForm = [System.Windows.Forms.Form]::New()
  $MyHelpDialogForm.BackColor = [MyConfig]::Colors.Back
  $MyHelpDialogForm.Font = [MyConfig]::Font.Regular
  $MyHelpDialogForm.ForeColor = [MyConfig]::Colors.Fore
  $MyHelpDialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
  $MyHelpDialogForm.Icon = $MyFCGForm.Icon
  $MyHelpDialogForm.MaximizeBox = $False
  $MyHelpDialogForm.MinimizeBox = $False
  $MyHelpDialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * $Width), ([MyConfig]::Font.Height * $Height))
  $MyHelpDialogForm.Name = "MyHelpDialogForm"
  $MyHelpDialogForm.Owner = $MyFCGForm
  $MyHelpDialogForm.ShowInTaskbar = $False
  $MyHelpDialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent
  $MyHelpDialogForm.Text = $DialogTitle
  #endregion $MyHelpDialogForm = [System.Windows.Forms.Form]::New()
  
  #region ******** Function Start-MyHelpDialogFormMove ********
  function Start-MyHelpDialogFormMove
  {
  <#
    .SYNOPSIS
      Move Event for the MyHelpDialog Form Control
    .DESCRIPTION
      Move Event for the MyHelpDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the Move Event
    .PARAMETER EventArg
       The Event Arguments for the Form Move Event
    .EXAMPLE
       Start-MyHelpDialogFormMove -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Move Event for `$MyHelpDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    Write-Verbose -Message "Exit Move Event for `$MyHelpDialogForm"
  }
  #endregion ******** Function Start-MyHelpDialogFormMove ********
  $MyHelpDialogForm.add_Move({ Start-MyHelpDialogFormMove -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-MyHelpDialogFormResize ********
  function Start-MyHelpDialogFormResize
  {
  <#
    .SYNOPSIS
      Resize Event for the MyHelpDialog Form Control
    .DESCRIPTION
      Resize Event for the MyHelpDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the Resize Event
    .PARAMETER EventArg
       The Event Arguments for the Form Resize Event
    .EXAMPLE
       Start-MyHelpDialogFormResize -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Resize Event for `$MyHelpDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    Write-Verbose -Message "Exit Resize Event for `$MyHelpDialogForm"
  }
  #endregion ******** Function Start-MyHelpDialogFormResize ********
  $MyHelpDialogForm.add_Resize({ Start-MyHelpDialogFormResize -Sender $This -EventArg $PSItem })
  
  #region ******** Function Start-MyHelpDialogFormShown ********
  function Start-MyHelpDialogFormShown
  {
  <#
    .SYNOPSIS
      Shown Event for the MyHelpDialog Form Control
    .DESCRIPTION
      Shown Event for the MyHelpDialog Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-MyHelpDialogFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet)
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.Form]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Shown Event for `$MyHelpDialogForm"
    
    [MyConfig]::AutoExit = 0
    
    $Sender.Refresh()
    
    Start-MyHelpDialogLeftToolStripItemClick -Sender ($MyHelpDialogLeftMenuStrip.Items[$DefInfoTopic]) -EventArg $EventArg
    
    Write-Verbose -Message "Exit Shown Event for `$MyHelpDialogForm"
  }
  #endregion ******** Function Start-MyHelpDialogFormShown ********
  $MyHelpDialogForm.add_Shown({ Start-MyHelpDialogFormShown -Sender $This -EventArg $PSItem })
  
  #region ******** Controls for MyHelpDialog Form ********
  
  # ************************************************
  # MyHelpDialogMain Panel
  # ************************************************
  #region $MyHelpDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MyHelpDialogMainPanel = [System.Windows.Forms.Panel]::New()
  $MyHelpDialogForm.Controls.Add($MyHelpDialogMainPanel)
  $MyHelpDialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MyHelpDialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill
  $MyHelpDialogMainPanel.Name = "MyHelpDialogMainPanel"
  $MyHelpDialogMainPanel.Text = "MyHelpDialogMainPanel"
  #endregion $MyHelpDialogMainPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $MyHelpDialogMainPanel Controls ********
  
  #region $MyHelpDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $MyHelpDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  $MyHelpDialogMainPanel.Controls.Add($MyHelpDialogMainRichTextBox)
  $MyHelpDialogMainRichTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Bottom, Right")
  $MyHelpDialogMainRichTextBox.BackColor = [MyConfig]::Colors.TextBack
  $MyHelpDialogMainRichTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
  $MyHelpDialogMainRichTextBox.DetectUrls = $True
  $MyHelpDialogMainRichTextBox.Font = [MyConfig]::Font.Regular
  $MyHelpDialogMainRichTextBox.ForeColor = [MyConfig]::Colors.TextFore
  $MyHelpDialogMainRichTextBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $MyHelpDialogMainRichTextBox.MaxLength = [Int]::MaxValue
  $MyHelpDialogMainRichTextBox.Multiline = $True
  $MyHelpDialogMainRichTextBox.Name = "MyHelpDialogMainRichTextBox"
  $MyHelpDialogMainRichTextBox.ReadOnly = $True
  $MyHelpDialogMainRichTextBox.Rtf = ""
  $MyHelpDialogMainRichTextBox.ScrollBars = [System.Windows.Forms.RichTextBoxScrollBars]::Both
  $MyHelpDialogMainRichTextBox.Size = [System.Drawing.Size]::New(($MyHelpDialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ($MyHelpDialogMainPanel.ClientSize.Height - ($MyHelpDialogMainRichTextBox.Top + [MyConfig]::FormSpacer)))
  $MyHelpDialogMainRichTextBox.TabStop = $False
  $MyHelpDialogMainRichTextBox.Text = ""
  $MyHelpDialogMainRichTextBox.WordWrap = $False
  #endregion $MyHelpDialogMainRichTextBox = [System.Windows.Forms.RichTextBox]::New()
  
  #endregion ******** $MyHelpDialogMainPanel Controls ********
  
  # ************************************************
  # MyHelpDialogLeft MenuStrip
  # ************************************************
  #region $MyHelpDialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()
  $MyHelpDialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()
  $MyHelpDialogForm.Controls.Add($MyHelpDialogLeftMenuStrip)
  $MyHelpDialogForm.MainMenuStrip = $MyHelpDialogLeftMenuStrip
  $MyHelpDialogLeftMenuStrip.BackColor = [MyConfig]::Colors.Back
  $MyHelpDialogLeftMenuStrip.Dock = [System.Windows.Forms.DockStyle]::Left
  $MyHelpDialogLeftMenuStrip.Font = [MyConfig]::Font.Regular
  $MyHelpDialogLeftMenuStrip.ForeColor = [MyConfig]::Colors.Fore
  $MyHelpDialogLeftMenuStrip.ImageList = $MyFCGImageList
  $MyHelpDialogLeftMenuStrip.Name = "MyHelpDialogLeftMenuStrip"
  $MyHelpDialogLeftMenuStrip.ShowItemToolTips = $True
  $MyHelpDialogLeftMenuStrip.Text = "MyHelpDialogLeftMenuStrip"
  #endregion $MyHelpDialogLeftMenuStrip = [System.Windows.Forms.MenuStrip]::New()
  
  #region ******** Function Start-MyHelpDialogLeftToolStripItemClick ********
  function Start-MyHelpDialogLeftToolStripItemClick
  {
  <#
    .SYNOPSIS
      Click Event for the MyHelpDialogLeft ToolStripItem Control
    .DESCRIPTION
      Click Event for the MyHelpDialogLeft ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-MyHelpDialogLeftToolStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
    [CmdletBinding()]
    param (
      [parameter(Mandatory = $True)]
      [System.Windows.Forms.ToolStripItem]$Sender,
      [parameter(Mandatory = $True)]
      [Object]$EventArg
    )
    Write-Verbose -Message "Enter Click Event for `$MyHelpDialogLeftToolStripItem"
    
    [MyConfig]::AutoExit = 0
    
    $MyHelpDialogBtmStatusStrip.Items["Status"].Text = "Showing: $($Sender.Text)"
    
    Switch ($Sender.Name)
    {
      "Exit"
      {
        $MyHelpDialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK
        Break
      }
      Default
      {
        $MyHelpDialogMainRichTextBox.Clear()
        $MyHelpDialogMainRichTextBox.Rtf = (Decode-MyData -Data $MyHelpDialogContent[$Sender.Name] -AsString)
        Break
      }
    }
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    
    Write-Verbose -Message "Exit Click Event for `$MyHelpDialogLeftToolStripItem"
  }
  #endregion ******** Function Start-MyHelpDialogLeftToolStripItemClick ********
  
  New-MenuSeparator -Menu $MyHelpDialogLeftMenuStrip
  New-MenuLabel -Menu $MyHelpDialogLeftMenuStrip -Text $InfoTitle -Name "Info Topics" -Tag "Info Topics" -Font ([MyConfig]::Font.Bold)
  New-MenuSeparator -Menu $MyHelpDialogLeftMenuStrip
  
  forEach ($Key in $MyHelpDialogTopics.Keys)
  {
    (New-MenuItem -Menu $MyHelpDialogLeftMenuStrip -Text ($MyHelpDialogTopics[$Key]) -Name $Key -Tag $Key -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({ Start-MyHelpDialogLeftToolStripItemClick -Sender $This -EventArg $PSItem })
  }
  
  New-MenuSeparator -Menu $MyHelpDialogLeftMenuStrip
  (New-MenuItem -Menu $MyHelpDialogLeftMenuStrip -Text "E&xit" -Name "Exit" -Tag "Exit" -Alignment "MiddleLeft" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({ Start-MyHelpDialogLeftToolStripItemClick -Sender $This -EventArg $PSItem })
  New-MenuSeparator -Menu $MyHelpDialogLeftMenuStrip
  
  #region $MyHelpDialogTopPanel = [System.Windows.Forms.Panel]::New()
  $MyHelpDialogTopPanel = [System.Windows.Forms.Panel]::New()
  $MyHelpDialogForm.Controls.Add($MyHelpDialogTopPanel)
  $MyHelpDialogTopPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None
  $MyHelpDialogTopPanel.Dock = [System.Windows.Forms.DockStyle]::Top
  $MyHelpDialogTopPanel.Name = "MyHelpDialogTopPanel"
  $MyHelpDialogTopPanel.Text = "MyHelpDialogTopPanel"
  #endregion $MyHelpDialogTopPanel = [System.Windows.Forms.Panel]::New()
  
  #region ******** $MyHelpDialogTopPanel Controls ********
  
  #region $MyHelpDialogTopLabel = [System.Windows.Forms.Label]::New()
  $MyHelpDialogTopLabel = [System.Windows.Forms.Label]::New()
  $MyHelpDialogTopPanel.Controls.Add($MyHelpDialogTopLabel)
  $MyHelpDialogTopLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
  $MyHelpDialogTopLabel.BackColor = [MyConfig]::Colors.TitleBack
  $MyHelpDialogTopLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
  $MyHelpDialogTopLabel.Font = [MyConfig]::Font.Title
  $MyHelpDialogTopLabel.ForeColor = [MyConfig]::Colors.TitleFore
  $MyHelpDialogTopLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)
  $MyHelpDialogTopLabel.Name = "MyHelpDialogTopLabel"
  $MyHelpDialogTopLabel.Text = $WindowTitle
  $MyHelpDialogTopLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
  $MyHelpDialogTopLabel.Size = [System.Drawing.Size]::New(($MyHelpDialogTopPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), $MyHelpDialogTopLabel.PreferredHeight)
  #endregion $MyHelpDialogTopLabel = [System.Windows.Forms.Label]::New()
  
  $MyHelpDialogTopPanel.ClientSize = [System.Drawing.Size]::New($MyHelpDialogTopPanel.ClientSize.Width, ($MyHelpDialogTopLabel.Bottom + [MyConfig]::FormSpacer))
  
  #endregion ******** $MyHelpDialogTopPanel Controls ********
  
  # ************************************************
  # MyHelpDialogBtm StatusStrip
  # ************************************************
  #region $MyHelpDialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
  $MyHelpDialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
  $MyHelpDialogForm.Controls.Add($MyHelpDialogBtmStatusStrip)
  $MyHelpDialogBtmStatusStrip.BackColor = [MyConfig]::Colors.Back
  $MyHelpDialogBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom
  $MyHelpDialogBtmStatusStrip.Font = [MyConfig]::Font.Regular
  $MyHelpDialogBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore
  $MyHelpDialogBtmStatusStrip.ImageList = $MyFCGImageList
  $MyHelpDialogBtmStatusStrip.Name = "MyHelpDialogBtmStatusStrip"
  $MyHelpDialogBtmStatusStrip.ShowItemToolTips = $True
  $MyHelpDialogBtmStatusStrip.Text = "MyHelpDialogBtmStatusStrip"
  #endregion $MyHelpDialogBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
  
  New-MenuLabel -Menu $MyHelpDialogBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"
  
  #endregion ******** Controls for MyHelpDialog Form ********
  
  #endregion ================ End **** MyHelpDialog **** End ================
  
  [Void]$MyHelpDialogForm.ShowDialog($MyFCGForm)
  
  $MyHelpDialogForm.Dispose()
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Show-MyHelpDialog"
}
#endregion function Show-MyHelpDialog

#region function Build-MyScriptChoiceDialog
function Build-MyScriptChoiceDialog ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyScriptChoiceDialog -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptChoiceDialog"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [String]`$Item = `$Null")
  [Void]$StringBuilder.AppendLine("  [Object]`$Object = `$Null")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [String]`$Item, [Object]`$Object)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("    `$This.Object = `$Object")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("Function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER OrderedItems")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  Param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [Object]`$Selected = `"`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$OrderedItems,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 35,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #`$$($MyControlName)DialogMainPanel.Padding = [System.Windows.Forms.Padding]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0, ([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain GroupBox")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  # Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainGroupBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ForeColor = [MyConfig]::Colors.GroupFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Name = `"$($MyControlName)DialogMainGroupBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainGroupBox = [System.Windows.Forms.GroupBox]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)Number = 0")
  [Void]$StringBuilder.AppendLine("  `$GroupBottom = [MyConfig]::Font.Height")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Key In `$OrderedItems.Keys)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainGroupBox.Controls.Add(`$$($MyControlName)DialogMainRadioButton)")
  [Void]$StringBuilder.AppendLine("    #`$$($MyControlName)DialogMainRadioButton.AutoCheck = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Checked = (`$OrderedItems[`$Key] -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Location = [System.Drawing.Point]::New(([MyConfig]::FormSpacer * [MyConfig]::FormSpacer), `$GroupBottom)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Name = `"RadioChoice`$(`$$($MyControlName)Number)`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Tag = `$OrderedItems[`$Key]")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainRadioButton.Text = `$Key")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainRadioButton = [System.Windows.Forms.RadioButton]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$GroupBottom = (`$$($MyControlName)DialogMainRadioButton.Bottom + [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)Number += 1")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainGroupBox.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogMainGroupBox.ClientSize.Width, (`$GroupBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainGroupBox Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    If (@(`$$($MyControlName)DialogMainGroupBox.Controls | Where-Object -FilterScript { (`$PSItem.GetType().Name -eq `"RadioButton`") -and `$PSItem.Checked }).Count)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    Else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    ForEach (`$RadioButton In @(`$$($MyControlName)DialogMainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" }))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$RadioButton.Checked = (`$RadioButton.Tag -eq `$Selected)")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  Function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By CDUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    Param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$$($MyControlName)DialogMainGroupBox.Bottom + [MyConfig]::FormSpacer + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$TESTForm)")
  [Void]$StringBuilder.AppendLine("  If (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempItem = `$$($MyControlName)DialogMainGroupBox.Controls | Where-Object -FilterScript { `$PSItem.Name -Like `"RadioChoice*`" -and `$PSItem.Checked } | Select-Object -Property Text, Tag")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$True, `$DialogResult, (`$TempItem.Text), (`$TempItem.Tag))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$False, `$DialogResult)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptChoiceDialog"
}
#endregion function Build-MyScriptChoiceDialog

#region function Build-MyScriptListViewChoice
function Build-MyScriptListViewChoice ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyScriptListViewChoice -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptListViewChoice"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER List")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Tooltip")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Selected")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Filter")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resize")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$List = @(),")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Property,")
  [Void]$StringBuilder.AppendLine("    [String]`$Tooltip,")
  [Void]$StringBuilder.AppendLine("    [Object[]]`$Selected = `"xX NONE Xx`",")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 50,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 12,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Filter,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Resize,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  if (`$Resize.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainListView)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.FullRowSelect = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.GridLines = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Name = `"LAU$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.OwnerDraw = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.ShowItemToolTips = `$PSBoundParameters.ContainsKey(`"ToolTip`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Text = `"LAU$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.View = [System.Windows.Forms.View]::Details")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainListViewDrawColumnHeader")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawColumnHeader Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawColumnHeader Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogMainListViewDrawColumnHeader -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawColumnHeader Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), `$EventArg.Bounds)")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, `$EventArg.Bounds.Width, (`$EventArg.Bounds.Height - 1))")
  [Void]$StringBuilder.AppendLine("    `$EventArg.Graphics.DrawString(`$EventArg.Header.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), (`$EventArg.Bounds.X + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Y + ((`$EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawColumnHeader Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainListViewDrawColumnHeader ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.add_DrawColumnHeader({Start-$($MyControlName)DialogMainListViewDrawColumnHeader -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainListViewDrawItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawItem Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogMainListViewDrawItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawItem Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawItem Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainListViewDrawItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.add_DrawItem({Start-$($MyControlName)DialogMainListViewDrawItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogMainListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogMainListViewDrawSubItem")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        DrawSubItem Event for the $($MyControlName)DialogMain ListView Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The ListView Control that fired the DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the ListView DrawSubItem Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogMainListViewDrawSubItem -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.ListView]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter DrawSubItem Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Return to Default Draw")
  [Void]$StringBuilder.AppendLine("    `$EventArg.DrawDefault = `$True")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit DrawSubItem Event for ```$$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogMainListViewDrawSubItem ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.add_DrawSubItem({Start-$($MyControlName)DialogMainListViewDrawSubItem -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  foreach (`$PropName in `$Property)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$$($MyControlName)DialogMainListView.Columns.Add(`$PropName, -2)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  ForEach (`$Item in `$List)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    (`$$($MyControlName)DialogMainListView.Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`"`$(`$Item.(`$Property[0]))`")))).SubItems.AddRange(@(`$Property[1..99] | ForEach-Object -Process { `"`$(`$Item.(`$PSItem))`" }))")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Name = `"`$(`$Item.(`$Property[0]))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tag = `$Item")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Tooltiptext = `"`$(`$Item.(`$Tooltip))`"")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Selected = (`$Item -in `$Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Checked = (`$Multi.IsPresent -and `$ListViewItem.Selected)")
  [Void]$StringBuilder.AppendLine("    `$ListViewItem.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Tag = @(`$$($MyControlName)DialogMainListView.Items)")
  [Void]$StringBuilder.AppendLine("  ")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogFilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogFilterLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogMainListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Name = `"$($MyControlName)DialogFilterLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Size = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::LabelWidth), `$$($MyControlName)DialogFilterLabel.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Text = `"Filter List:`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogFilterLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainTextBox)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.AutoSize = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogFilterLabel.Right + [MyConfig]::FormSpacer), `$$($MyControlName)DialogFilterLabel.Top)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.MaxLength = 100")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Name = `"$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainListView.Right - `$$($MyControlName)DialogMainTextBox.Left), `$$($MyControlName)DialogFilterLabel.Height)")
  [Void]$StringBuilder.AppendLine("    #`$$($MyControlName)DialogMainTextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.TabStop = `$False")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Tag = @{ `"HintText`" = `"Enter Text and Press [Enter] to Filter List Items.`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Text = `"`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyControlName)DialogMainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyControlName)DialogMainTextBoxGotFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          GotFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox GotFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyControlName)DialogMainTextBoxGotFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter GotFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If (`$Sender.Tag.HintEnabled)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `"`"")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit GotFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxGotFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.add_GotFocus({ Start-$($MyControlName)DialogMainTextBoxGotFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyControlName)DialogMainTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          KeyDown Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      If (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Enter)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        # Suppress KeyPress")
  [Void]$StringBuilder.AppendLine("        `$EventArg.SuppressKeyPress = `$True")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        If ([String]::IsNullOrEmpty(`$Sender.Text.Trim()))")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogMainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogMainListView.Items.AddRange(`$$($MyControlName)DialogMainListView.Tag)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("        else")
  [Void]$StringBuilder.AppendLine("        {")
  [Void]$StringBuilder.AppendLine("          `$TmpNewList = @(`$$($MyControlName)DialogMainListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$Sender.Text) -or (`$PSItem.SubItems[1].Text -Match `$Sender.Text) })")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogMainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("          `$$($MyControlName)DialogMainListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("        }")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.add_KeyDown({ Start-$($MyControlName)DialogMainTextBoxKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    #region ******** Function Start-$($MyControlName)DialogMainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    Function Start-$($MyControlName)DialogMainTextBoxLostFocus")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      <#")
  [Void]$StringBuilder.AppendLine("        .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("          LostFocus Event for the $($MyControlName)DialogMain TextBox Control")
  [Void]$StringBuilder.AppendLine("        .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("           The TextBox Control that fired the LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("           The Event Arguments for the TextBox LostFocus Event")
  [Void]$StringBuilder.AppendLine("        .EXAMPLE")
  [Void]$StringBuilder.AppendLine("           Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("        .NOTES")
  [Void]$StringBuilder.AppendLine("          Original Function By ken.sweet")
  [Void]$StringBuilder.AppendLine("      #>")
  [Void]$StringBuilder.AppendLine("      [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("      Param (")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("        [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("        [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("      )")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Enter LostFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
  [Void]$StringBuilder.AppendLine("      If ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Text = `$Sender.Tag.HintText")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$True")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Hint")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainListView.Items.AddRange(`$$($MyControlName)DialogMainListView.Tag)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      Else")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Sender.Tag.HintEnabled = `$False")
  [Void]$StringBuilder.AppendLine("        `$Sender.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("        `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("        ")
  [Void]$StringBuilder.AppendLine("        `$TmpNewList = @(`$$($MyControlName)DialogMainListView.Tag | Where-Object -FilterScript { (`$PSItem.Text -Match `$$($MyControlName)DialogMainTextBox.Text) -or (`$PSItem.SubItems[1].Text -Match `$$($MyControlName)DialogMainTextBox.Text) })")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("        `$$($MyControlName)DialogMainListView.Items.AddRange(`$TmpNewList)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("      ")
  [Void]$StringBuilder.AppendLine("      Write-Verbose -Message `"Exit LostFocus Event for ```$$($MyControlName)DialogMainTextBox`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    #endregion ******** Function Start-$($MyControlName)DialogMainTextBoxLostFocus ********")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.add_LostFocus({ Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    Start-$($MyControlName)DialogMainTextBoxLostFocus -Sender `$$($MyControlName)DialogMainTextBox -EventArg `"Lost Focus`"")
  [Void]$StringBuilder.AppendLine("    ")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainTextBox.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainTextBox.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  Else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainListView.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($MyControlName)DialogMainListView.SelectedItems.Count -and (-not `$Multi.IsPresent)) -or (`$$($MyControlName)DialogMainListView.CheckedItems.Count -and `$Multi.IsPresent))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ([String]::IsNullOrEmpty(`$Selected))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainListView.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogMainListView.Items | ForEach-Object -Process { `$PSItem.Checked = `$False }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      foreach (`$Item in `$$($MyControlName)DialogMainListView.Items)")
  [Void]$StringBuilder.AppendLine("      {")
  [Void]$StringBuilder.AppendLine("        `$Item.Selected = (`$Item.Tag -in `$Selected)")
  [Void]$StringBuilder.AppendLine("        `$Item.Checked = (`$Multi.IsPresent -and `$Item.Selected)")
  [Void]$StringBuilder.AppendLine("      }")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainListView.Refresh()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainListView.Select()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = `$$($MyControlName)DialogForm.Size")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  If (`$Filter.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogFilterLabel.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom`")")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$LAUForm)")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$True, `$DialogResult, (`$$($MyControlName)DialogMainListView.CheckedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$True, `$DialogResult, (`$$($MyControlName)DialogMainListView.SelectedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$False, `$DialogResult, `"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptListViewChoice"
}
#endregion function Build-MyScriptListViewChoice

#region function Build-MyScriptListViewSearch
function Build-MyScriptListViewSearch ()
{
  <#
    .SYNOPSIS
      Gererates Script Dialog
    .DESCRIPTION
      Gererates Script Dialog
    .PARAMETER MyScriptName
    .PARAMETER MyControlName
    .EXAMPLE
      Build-MyScriptListViewSearch -MyScriptName $MyScriptName -MyControlName $MyControlName
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [parameter(Mandatory = $True)]
    [String]$MyControlName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptListViewSearch"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  #region Dialog Result Class
  [Void]$StringBuilder.AppendLine("#region $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("Class $($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  [Bool]`$Success")
  [Void]$StringBuilder.AppendLine("  [Object]`$DialogResult")
  [Void]$StringBuilder.AppendLine("  [Object]`$Item")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  $($MyControlName)Dialog ([Bool]`$Success, [Object]`$DialogResult, [Object]`$Item)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$This.Success = `$Success")
  [Void]$StringBuilder.AppendLine("    `$This.DialogResult = `$DialogResult")
  [Void]$StringBuilder.AppendLine("    `$This.Item = `$Item")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion $($MyControlName)Dialog Result Class")
  [Void]$StringBuilder.AppendLine("")
  #endregion Dialog Result Class
  
  #region function Show-MyControlNameDialog
  [Void]$StringBuilder.AppendLine("#region function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("function Show-$($MyControlName)Dialog ()")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Shows Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("    .PARAMETER DialogTitle")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SelectText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER MessageText")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Property")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Multi")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Width")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Height")
  [Void]$StringBuilder.AppendLine("    .PARAMETER Resize")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonLeft")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonMid")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ButtonRight")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      `$Return = Show-$($MyControlName)Dialog -DialogTitle `$DialogTitle")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By Ken Sweet")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [String]`$DialogTitle = `"`$([MyConfig]::ScriptName)`",")
  [Void]$StringBuilder.AppendLine("    [String]`$MessageText = `"Status Message`",")
  [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("    [String[]]`$Property,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Multi,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Width = 50,")
  [Void]$StringBuilder.AppendLine("    [Int]`$Height = 12,")
  [Void]$StringBuilder.AppendLine("    [Switch]`$Resize,")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonLeft = `"&OK`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonMid = `"&Reset`",")
  [Void]$StringBuilder.AppendLine("    [String]`$ButtonRight = `"&Cancel`"")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region >>>>>>>>>>>>>>>> Begin **** $($MyControlName)Dialog **** Begin <<<<<<<<<<<<<<<<")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)Dialog Form")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.BackColor = [MyConfig]::Colors.Back")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("  if (`$Resize.IsPresent)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Icon = `$$($MyScriptName)Form.Icon")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.KeyPreview = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MaximizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimizeBox = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * `$Width), 0)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Name = `"$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Owner = `$$($MyScriptName)Form")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ShowInTaskbar = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Text = `$DialogTitle")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogForm = [System.Windows.Forms.Form]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Escape)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.Close()")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_KeyDown({ Start-$($MyControlName)DialogFormKeyDown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogFormShown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Shown Event for the $($MyControlName)Dialog Form Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Form Control that fired the Shown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Form Shown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogFormShown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By Ken Sweet)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Form]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$Sender.Refresh()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Shown Event for ```$$($MyControlName)DialogForm`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogFormShown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.add_Shown({ Start-$($MyControlName)DialogFormShown -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogMain Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogMainPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Dock = [System.Windows.Forms.DockStyle]::Fill")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Name = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Text = `"$($MyControlName)DialogMainPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"MessageText`"))")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    #region `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainLabel)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.ForeColor = [MyConfig]::Colors.Fore")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, ([MyConfig]::FormSpacer * 2))")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Name = `"$($MyControlName)DialogMainLabel`"")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Text = `$MessageText")
  [Void]$StringBuilder.AppendLine("    #endregion `$$($MyControlName)DialogMainLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Returns the minimum size required to display the text")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainLabel.Size = [System.Windows.Forms.TextRenderer]::MeasureText(`$$($MyControlName)DialogMainLabel.Text, `$$($MyControlName)DialogMainLabel.Font, `$$($MyControlName)DialogMainLabel.Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = `$$($MyControlName)DialogMainLabel.Bottom + [MyConfig]::FormSpacer")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$TempBottom = 0")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogSearchLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogSearchLabel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.AutoSize = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.ForeColor = [MyConfig]::Colors.LabelFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.Name = `"$($MyControlName)DialogSearchLabel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogSearchPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), 23)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.Text = `"Search Text:`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleRight")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogSearchLabel = [System.Windows.Forms.Label]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogSearchButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogSearchButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.Name = `"$($MyControlName)DialogSearchButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.Text = `"Search`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogSearchButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - (`$$($MyControlName)DialogSearchButton.Width + [MyConfig]::FormSpacer)), `$$($MyControlName)DialogSearchLabel.Top)")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogSearchButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogSearchButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogSearch Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogSearch Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogSearchButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogSearchButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (-not [String]::IsNullOrEmpty(`$Sender.Text.Trim()))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      Get-$($MyControlName)ListViewItems -ListView `$$($MyControlName)DialogMainListView -SearchText `"`$(`$Sender.Text.Trim())`"")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogSearchButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogSearchButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchButton.add_Click({ Start-$($MyControlName)DialogSearchButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogSearchTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogSearchTextBox)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogSearchLabel.Right + [MyConfig]::FormSpacer), (`$TempBottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.MaxLength = 255")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Name = `"SearchMainTextBox`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Text = `$Null")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogSearchButton.Left - (`$$($MyControlName)DialogSearchTextBox.Left + [MyConfig]::FormSpacer)), `$$($MyControlName)DialogSearchTextBox.PreferredHeight)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.TabIndex = 0")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.WordWrap = `$False")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogSearchTextBox = [System.Windows.Forms.TextBox]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogSearchTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogSearchTextBoxKeyDown")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyScriptName)Search TextBox Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        KeyDown Event for the $($MyScriptName)Search TextBox Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The TextBox Control that fired the KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the TextBox KeyDown Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogSearchTextBoxKeyDown -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By kensw")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.TextBox]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter KeyDown Event for ```$$($MyControlName)DialogSearchTextBox`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::Return)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogSearchButton.PerformClick()")
  [Void]$StringBuilder.AppendLine("      `$EventArg.SuppressKeyPress = `$True")
  [Void]$StringBuilder.AppendLine("      `$EventArg.Handled = `$True")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit KeyDown Event for ```$$($MyControlName)DialogSearchTextBox`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogSearchTextBoxKeyDown ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.add_KeyDown({Start-$($MyControlName)DialogSearchTextBoxKeyDown -Sender `$This -EventArg `$PSItem})")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainPanel.Controls.Add(`$$($MyControlName)DialogMainListView)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.BackColor = [MyConfig]::Colors.TextBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.CheckBoxes = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.ForeColor = [MyConfig]::Colors.TextFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.FullRowSelect = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.GridLines = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.HeaderStyle = [System.Windows.Forms.ColumnHeaderStyle]::Nonclickable")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.HideSelection = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, (`$$($MyControlName)DialogSearchLabel.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.MultiSelect = `$Multi.IsPresent")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Name = `"LAU$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.ShowGroups = `$False")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Size = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainPanel.ClientSize.Width - ([MyConfig]::FormSpacer * 2)), ([MyConfig]::Font.Height * `$Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Text = `"LAU$($MyControlName)DialogMainListView`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.View = [System.Windows.Forms.View]::Details")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogMainListView = [System.Windows.Forms.ListView]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  foreach (`$ColumnName in `$Property)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [Void]`$$($MyControlName)DialogMainListView.Columns.Add(`$ColumnName, -2)")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$TempClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogMainListView.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogMainListView.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogMainPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  # $($MyControlName)DialogBtm Panel")
  [Void]$StringBuilder.AppendLine("  # ************************************************")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Controls.Add(`$$($MyControlName)DialogBtmPanel)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.BorderStyle = [System.Windows.Forms.BorderStyle]::None")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Dock = [System.Windows.Forms.DockStyle]::Bottom")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Name = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Text = `"$($MyControlName)DialogBtmPanel`"")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmPanel = [System.Windows.Forms.Panel]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  # Evenly Space Buttons - Move Size to after Text")
  [Void]$StringBuilder.AppendLine("  `$NumButtons = 3")
  [Void]$StringBuilder.AppendLine("  `$TempSpace = [Math]::Floor(`$$($MyControlName)DialogBtmPanel.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
  [Void]$StringBuilder.AppendLine("  `$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
  [Void]$StringBuilder.AppendLine("  `$TempMod = `$TempSpace % `$NumButtons")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmLeftButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Location = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Name = `"$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabIndex = 1")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Text = `$ButtonLeft")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmLeftButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmLeftButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmLeftButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmLeft Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("         The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("         The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("         Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    if ((`$$($MyControlName)DialogMainListView.SelectedItems.Count -and (-not `$Multi.IsPresent)) -or (`$$($MyControlName)DialogMainListView.CheckedItems.Count -and `$Multi.IsPresent))")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [Void][System.Windows.Forms.MessageBox]::Show(`$$($MyControlName)DialogForm, `"Missing or Invalid Value.`", [MyConfig]::ScriptName, `"OK`", `"Warning`")")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmLeftButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmLeftButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmLeftButton.add_Click({ Start-$($MyControlName)DialogBtmLeftButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmMidButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmLeftButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Name = `"$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabIndex = 2")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Text = `$ButtonMid")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.Size = [System.Drawing.Size]::New((`$TempWidth + `$TempMod), `$$($MyControlName)DialogBtmMidButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmMidButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmMidButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmMid Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainListView.SelectedItems.Clear()")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogMainListView.Items | ForEach-Object -Process { `$PSItem.Checked = `$False }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmMidButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmMidButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmMidButton.add_Click({ Start-$($MyControlName)DialogBtmMidButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.Controls.Add(`$$($MyControlName)DialogBtmRightButton)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.AutoSizeMode = [System.Windows.Forms.AutoSizeMode]::GrowAndShrink")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.BackColor = [MyConfig]::Colors.ButtonBack")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Font = [MyConfig]::Font.Bold")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.ForeColor = [MyConfig]::Colors.ButtonFore")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Location = [System.Drawing.Point]::New((`$$($MyControlName)DialogBtmMidButton.Right + [MyConfig]::FormSpacer), [MyConfig]::FormSpacer)")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Name = `"$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabIndex = 3")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.TabStop = `$True")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Text = `$ButtonRight")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.Size = [System.Drawing.Size]::New(`$TempWidth, `$$($MyControlName)DialogBtmRightButton.PreferredSize.Height)")
  [Void]$StringBuilder.AppendLine("  #endregion `$$($MyControlName)DialogBtmRightButton = [System.Windows.Forms.Button]::New()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #region ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  function Start-$($MyControlName)DialogBtmRightButtonClick")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    <#")
  [Void]$StringBuilder.AppendLine("      .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("        Click Event for the $($MyControlName)DialogBtmRight Button Control")
  [Void]$StringBuilder.AppendLine("      .PARAMETER Sender")
  [Void]$StringBuilder.AppendLine("        The Button Control that fired the Click Event")
  [Void]$StringBuilder.AppendLine("      .PARAMETER EventArg")
  [Void]$StringBuilder.AppendLine("        The Event Arguments for the Button Click Event")
  [Void]$StringBuilder.AppendLine("      .EXAMPLE")
  [Void]$StringBuilder.AppendLine("        Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$Sender -EventArg `$EventArg")
  [Void]$StringBuilder.AppendLine("      .NOTES")
  [Void]$StringBuilder.AppendLine("        Original Function By MyUserName)")
  [Void]$StringBuilder.AppendLine("    #>")
  [Void]$StringBuilder.AppendLine("    [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("    param (")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [System.Windows.Forms.Button]`$Sender,")
  [Void]$StringBuilder.AppendLine("      [parameter(Mandatory = `$True)]")
  [Void]$StringBuilder.AppendLine("      [Object]`$EventArg")
  [Void]$StringBuilder.AppendLine("    )")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Enter Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    [MyConfig]::AutoExit = 0")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    # Cancel Code Goes here")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    `$$($MyControlName)DialogForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("    Write-Verbose -Message `"Exit Click Event for ```$$($MyControlName)DialogBtmRightButton`"")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Function Start-$($MyControlName)DialogBtmRightButtonClick ********")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmRightButton.add_Click({ Start-$($MyControlName)DialogBtmRightButtonClick -Sender `$This -EventArg `$PSItem })")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogBtmPanel.ClientSize = [System.Drawing.Size]::New((`$$($MyControlName)DialogBtmRightButton.Right + [MyConfig]::FormSpacer), (`$$($MyControlName)DialogBtmRightButton.Bottom + [MyConfig]::FormSpacer))")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** `$$($MyControlName)DialogBtmPanel Controls ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.ClientSize = [System.Drawing.Size]::New(`$$($MyControlName)DialogForm.ClientSize.Width, (`$TempClientSize.Height + `$$($MyControlName)DialogBtmPanel.Height))")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.MinimumSize = `$$($MyControlName)DialogForm.Size")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogSearchTextBox.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogMainListView.Anchor = [System.Windows.Forms.AnchorStyles](`"Top, Left, Bottom, Right`")")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ******** Controls for $($MyControlName)Dialog Form ********")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  #endregion ================ End **** $($MyControlName)Dialog **** End ================")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$DialogResult = `$$($MyControlName)DialogForm.ShowDialog(`$LAUForm)")
  [Void]$StringBuilder.AppendLine("  if (`$DialogResult -eq [System.Windows.Forms.DialogResult]::OK)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    if (`$Multi.IsPresent)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$True, `$DialogResult, (`$$($MyControlName)DialogMainListView.CheckedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("    else")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      [$($MyControlName)Dialog]::New(`$True, `$DialogResult, (`$$($MyControlName)DialogMainListView.SelectedItems | Select-Object -ExpandProperty `"Tag`"))")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("  else")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    [$($MyControlName)Dialog]::New(`$False, `$DialogResult, `"`")")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$$($MyControlName)DialogForm.Dispose()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  [System.GC]::Collect()")
  [Void]$StringBuilder.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit Function Show-$($MyControlName)Dialog`"")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion function Show-$($MyControlName)Dialog")
  [Void]$StringBuilder.AppendLine("")
  #endregion function Show-MyControlNameDialog
  
  #region Function Get-SearchListViewItems
  [Void]$StringBuilder.AppendLine("#region Function Get-$($MyControlName)ListViewItems")
  [Void]$StringBuilder.AppendLine("function Get-$($MyControlName)ListViewItems")
  [Void]$StringBuilder.AppendLine("{")
  [Void]$StringBuilder.AppendLine("  <#")
  [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
  [Void]$StringBuilder.AppendLine("      Get ListView Search Results")
  [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
  [Void]$StringBuilder.AppendLine("      Get ListView Search Results")
  [Void]$StringBuilder.AppendLine("    .PARAMETER ListView")
  [Void]$StringBuilder.AppendLine("    .PARAMETER SearchText")
  [Void]$StringBuilder.AppendLine("    .EXAMPLE")
  [Void]$StringBuilder.AppendLine("      Get-$($MyControlName)ListViewItems -ListView `$ListBiew -SearchText `$SearchText")
  [Void]$StringBuilder.AppendLine("    .NOTES")
  [Void]$StringBuilder.AppendLine("      Original Script By Ken Sweet")
  [Void]$StringBuilder.AppendLine("    .LINK")
  [Void]$StringBuilder.AppendLine("  #>")
  [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
  [Void]$StringBuilder.AppendLine("  param (")
  [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$$($MyControlName)DialogMainListView,")
  [Void]$StringBuilder.AppendLine("    [String]`$SearchText")
  [Void]$StringBuilder.AppendLine("  )")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("  `$ListView.Items.Clear()")
  [Void]$StringBuilder.AppendLine("  `$List = @()")
  [Void]$StringBuilder.AppendLine("  if (`$List.Count)")
  [Void]$StringBuilder.AppendLine("  {")
  [Void]$StringBuilder.AppendLine("    `$PropertyList = @(`"Second`", `"Third`", `"Forth`", `"Fifth`")")
  [Void]$StringBuilder.AppendLine("    foreach (`$Item in `$List)")
  [Void]$StringBuilder.AppendLine("    {")
  [Void]$StringBuilder.AppendLine("      (`$ListView.Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Item.MainProperty)))).SubItems.AddRange(@(`$PropertyList[1..99] | ForEach-Object -Process {`"`$(`$Item.(`$PSItem))`"}))")
  [Void]$StringBuilder.AppendLine("      `$ListViewItem.Tag = `$Item")
  [Void]$StringBuilder.AppendLine("      `$ListViewItem.Name = `$Item.NameProperty")
  [Void]$StringBuilder.AppendLine("      `$ListViewItem.Font = [MyConfig]::Font.Regular")
  [Void]$StringBuilder.AppendLine("    }")
  [Void]$StringBuilder.AppendLine("  }")
  [Void]$StringBuilder.AppendLine("")
  [Void]$StringBuilder.AppendLine("}")
  [Void]$StringBuilder.AppendLine("#endregion Function Get-$($MyControlName)ListViewItems")
  [Void]$StringBuilder.AppendLine("")
  #endregion Function Get-SearchListViewItems
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptListViewSearch"
}
#endregion function Build-MyScriptListViewSearch


#region function Build-MyScriptLibrary
function Build-MyScriptLibrary ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScriptLibrary -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName
  )
  Write-Verbose -Message "Enter Function Build-MyScriptLibrary"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  #region ******** My Code ********
  
  [Void]$StringBuilder.Append((Build-MyScriptDefEnums -MyScriptName $MyScriptName))
  [Void]$StringBuilder.Append((Build-MyScriptDefClasses -MyScriptName $MyScriptName))
  [Void]$StringBuilder.Append((Build-MyScriptWindowsAPIs -MyScriptName $MyScriptName))
  [Void]$StringBuilder.Append((Build-MyScriptFunctions -MyScriptName $MyScriptName))
  [Void]$StringBuilder.Append((Build-MyScriptMultiThread -MyScriptName $MyScriptName))
  [Void]$StringBuilder.Append((Build-MyScriptJobsThreads -MyScriptName $MyScriptName))
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptLibrary"
}
#endregion function Build-MyScriptLibrary

#region function Build-MyScriptEvent
function Build-MyScriptEvent ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Build-MyScriptEvent
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$MyScriptName,
    [String]$MyControlName,
    [Object]$Control,
    [Object[]]$ControlEvent,
    [Switch]$NoAdd
  )
  Write-Verbose -Message "Enter Function Build-MyScriptEvent"
  
  $ControlName = $Control.Name
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  ForEach ($TempEvent in $ControlEvent)
  {
    $EventName = $TempEvent.Name
    if ($Control.Name -eq "Form")
    {
      $FunctionName = "$($MyScriptName)$($ControlName)$($EventName)"
    }
    else
    {
      $FunctionName = "$($MyScriptName)$($MyControlName)$($ControlName)$($EventName)"
    }
    
    #region ******** My Code ********
    [Void]$StringBuilder.AppendLine("#region ******** Function Start-$($FunctionName) ********")
    [Void]$StringBuilder.AppendLine("function Start-$($FunctionName)")
    [Void]$StringBuilder.AppendLine("{")
    [Void]$StringBuilder.AppendLine("  <#")
    [Void]$StringBuilder.AppendLine("    .SYNOPSIS")
    [Void]$StringBuilder.AppendLine("      $($EventName) Event for the $($MyScriptName)$($MyControlName) $($ControlName) Control")
    [Void]$StringBuilder.AppendLine("    .DESCRIPTION")
    [Void]$StringBuilder.AppendLine("      $($EventName) Event for the $($MyScriptName)$($MyControlName) $($ControlName) Control")
    [Void]$StringBuilder.AppendLine("    .PARAMETER Sender")
    [Void]$StringBuilder.AppendLine("       The $($ControlName) Control that fired the $($EventName) Event")
    [Void]$StringBuilder.AppendLine("    .PARAMETER EventArg")
    [Void]$StringBuilder.AppendLine("       The Event Arguments for the $($ControlName) $($EventName) Event")
    [Void]$StringBuilder.AppendLine("    .EXAMPLE")
    [Void]$StringBuilder.AppendLine("       Start-$($FunctionName) -Sender `$Sender -EventArg `$EventArg")
    [Void]$StringBuilder.AppendLine("    .NOTES")
    [Void]$StringBuilder.AppendLine("      Original Function By $([System.Environment]::UserName)")
    [Void]$StringBuilder.AppendLine("  #>")
    [Void]$StringBuilder.AppendLine("  [CmdletBinding()]")
    [Void]$StringBuilder.AppendLine("  param (")
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [$($Control.Fullname)]`$Sender,")
    [Void]$StringBuilder.AppendLine("    [parameter(Mandatory = `$True)]")
    [Void]$StringBuilder.AppendLine("    [Object]`$EventArg")
    [Void]$StringBuilder.AppendLine("  )")
    [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Enter $($EventName) Event for ```$$($MyScriptName)$($MyControlName)$($ControlName)`"")
    [Void]$StringBuilder.AppendLine("")
    
    if (($Control.Name -eq "Timer") -and ($TempEvent.Name -eq "Tick"))
    {
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AutoExit += 1")
      [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Auto Exit in `$([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes`"")
      [Void]$StringBuilder.AppendLine("  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)Form.Close()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Auto Exit in `$([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes`"")
      [Void]$StringBuilder.AppendLine("  }")
    }
    else
    {
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AutoExit = 0")
      #[Void]$StringBuilder.AppendLine("")
      #[Void]$StringBuilder.AppendLine("  # **** Testing - Exit to Nested Prompt ****")
      #[Void]$StringBuilder.AppendLine("  #Write-Host -Object `"Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
      #[Void]$StringBuilder.AppendLine("  #`$Host.EnterNestedPrompt()")
      #[Void]$StringBuilder.AppendLine("  # **** Testing - Exit to Nested Prompt ****")
    }
    [Void]$StringBuilder.AppendLine("")
    
    
    Switch ($Control.Name)
    {
      { $PSItem -in @("ListBox", "CheckedListBox") }
      {
        Switch ($TempEvent.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  `$TempIndex = `$Sender.IndexFromPoint(`$EventArg.location)")
            [Void]$StringBuilder.AppendLine("  if ((`$TempIndex -gt -1) -and (`$Sender.SelectedIndices -notcontains `$TempIndex))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.SelectedItems.Clear()")
            [Void]$StringBuilder.AppendLine("    `$Sender.SelectedIndex = `$TempIndex")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  `$TempIndex = `$Null")
            Break
          }
        }
        break
      }
      "TextBox"
      {
        Switch ($TempEvent.Name)
        {
          "GotFocus"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  if (`$Sender.Tag.HintEnabled)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Text = `"`"")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "KeyPress"
          {
            [Void]$StringBuilder.AppendLine("    # 3 = Ctrl-C, 8 = Backspace, 22 = Ctrl-V, 24 = Ctrl-X")
            [Void]$StringBuilder.AppendLine("    # `$ValidChars = `"[\s\w\d\.\-_]`"")
            [Void]$StringBuilder.AppendLine("    #`$EventArg.Handled = ((`$EventArg.KeyChar -notmatch `$ValidChars) -and ([Int](`$EventArg.KeyChar) -notin (3, 8, 22, 24)))")
            Break
          }
          "KeyUp"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  `$Sender.Tag.HintEnabled = (`$Sender.Text.Trim().Length -eq 0)")
            break
          }
          "LostFocus"
          {
            [Void]$StringBuilder.AppendLine("  # `$TextBox.Tag = @{ `"HintText`" = `"`"; `"HintEnabled`" = `$True }")
            [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty((`$Sender.Text.Trim())))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Text = `$Sender.Tag.HintText")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = `$True")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Hint")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextHint")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.HintEnabled = `$False")
            [Void]$StringBuilder.AppendLine("    `$Sender.Font = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("    `$Sender.ForeColor = [MyConfig]::Colors.TextFore")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
      }
      "WebBrowser"
      {
        Switch ($TempEvent.Name)
        {
          "NewWindow"
          {
            [Void]$StringBuilder.AppendLine("  #`$WebBrowser.Tag = @{ `"URL`" = `"`" }")
            [Void]$StringBuilder.AppendLine("  if (-not [String]::IsNullOrEmpty(`$Sender.Tag.URL))")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$EventArg.Cancel = `$True")
            [Void]$StringBuilder.AppendLine("    Show-MyWebReport -ReportURL (`$Sender.Tag.URL)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "StatusTextChanged"
          {
            [Void]$StringBuilder.AppendLine("  #`$WebBrowser.Tag = @{ `"URL`" = `"`"}")
            [Void]$StringBuilder.AppendLine("  if (`$Sender.StatusText -match `"https?://`")")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.Tag.URL = `$Sender.StatusText")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$Sender.StatusText = `"`"")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
      }
      "ListView"
      {
        Switch ($TempEvent.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty((`$TmpItem = `$Sender.GetItemAt(`$EventArg.Location.X, `$EventArg.Location.Y))))")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      # Show Item Selected Context Menu")
            [Void]$StringBuilder.AppendLine("      If (`$Sender.SelectedIndices -notcontains `$TmpItem.Index)")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$Sender.SelectedIndices.Add(`$TmpItem.Index) | Out-Null")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("      #`$ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("    #`$ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "ColumnClick"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Column = `$EventArg.Column")
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Ascending = (-not `$Sender.ListViewItemSorter.Ascending)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Sort()")
            Break
          }
          "DrawColumnHeader"
          {
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleBack)), `$EventArg.Bounds)")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawRectangle(([System.Drawing.Pen]::New([MyConfig]::Colors.TitleFore)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, `$EventArg.Bounds.Width, (`$EventArg.Bounds.Height - 1))")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawString(`$EventArg.Header.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New([MyConfig]::Colors.TitleFore)), (`$EventArg.Bounds.X + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Y + ((`$EventArg.Bounds.Height - [MyConfig]::Font.Height) / 1)))")
            Break
          }
          {
            $PSItem -in @("DrawItem", "DrawSubItem")
          }
          {
            [Void]$StringBuilder.AppendLine("  # Return to Default Draw")
            [Void]$StringBuilder.AppendLine("  `$EventArg.DrawDefault = `$True")
          }
          
        }
        Break
      }
      "TabControl"
      {
        Switch ($TempEvent.Name)
        {
          "DrawItem"
          {
            [Void]$StringBuilder.AppendLine("  `$TmpTabPage = `$Sender.TabPages[`$EventArg.Index]")
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Index -eq `$Sender.SelectedIndex)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$TmpForeClr = [MyConfig]::Colors.TitleFore")
            [Void]$StringBuilder.AppendLine("    `$TmpBackClr = [MyConfig]::Colors.TitleBack")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  Else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    `$TmpForeClr = `$TmpTabPage.ForeColor")
            [Void]$StringBuilder.AppendLine("    `$TmpBackClr = `$TmpTabPage.BackColor")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  ")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.FillRectangle(([System.Drawing.SolidBrush]::New(`$TmpBackClr)), `$EventArg.Bounds)")
            [Void]$StringBuilder.AppendLine("  `$TmpIcon = `$Sender.ImageList.Images[`$TmpTabPage.ImageKey]")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawImage(`$TmpIcon, (`$EventArg.Bounds.Left + [MyConfig]::FormSpacer), (`$EventArg.Bounds.Top + ((`$EventArg.Bounds.Height - `$TmpIcon.Height) / 2)))")
            [Void]$StringBuilder.AppendLine("  `$TmpSize = `$EventArg.Graphics.MeasureString(`$TmpTabPage.Text, `$Sender.Font)")
            [Void]$StringBuilder.AppendLine("  `$EventArg.Graphics.DrawString(`$TmpTabPage.Text, `$Sender.Font, ([System.Drawing.SolidBrush]::New(`$TmpForeClr)), (`$EventArg.Bounds.Left + (((`$EventArg.Bounds.Width + `$TmpIcon.Width) - `$TmpSize.Width) / 2)), (`$EventArg.Bounds.Top + ((`$EventArg.Bounds.Height - `$TmpSize.Height) / 2)))")
            Break
          }
        }
        Break
      }
      "DataGridView"
      {
        Switch ($TempEvent.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  #`$Sender.HitTest(`$EventArg.X, `$EventArg.Y)")
            Break
          }
        }
        Break
      }
      "TreeView"
      {
        Switch ($TempEvent.Name)
        {
          "MouseDown"
          {
            [Void]$StringBuilder.AppendLine("  # Show Context Menu")
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Button -eq [System.Windows.Forms.MouseButtons]::Right)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    If (-not [String]::IsNullOrEmpty((`$TempNode = `$Sender.GetNodeAt(`$EventArg.Location))))")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      #`$Sender.SelectedNode = `$TempNode")
            [Void]$StringBuilder.AppendLine("      #`$ContextMenuStrip.Show(`$Sender, `$EventArg.Location)")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
      }
      "ToolStripItem"
      {
        Switch ($TempEvent.Name)
        {
          "Click"
          {
            [Void]$StringBuilder.AppendLine("  Switch (`$Sender.Name)")
            [Void]$StringBuilder.AppendLine("  {")
            
            If ($MyControlName -eq "MySampleDialogs")
            {
              #region Sample Dialogs Code
              [Void]$StringBuilder.AppendLine("    `"Status01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Status Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Status Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$HashTable = @{`"ShowHeader`" = `$True; `"Name`" = `"Item Name`"; `"Value`" = `"Item Value`"}")
              [Void]$StringBuilder.AppendLine("      `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Display-MyStatusRichTextBox -RichTextBox `$RichTextBox -HashTable `$HashTable }")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-MyStatusDialog -ScriptBlock `$ScriptBlock -DialogTitle `"This is a Test Status 01`" -ButtonMid `"OK`" -HashTable `$HashTable")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Status Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("")
              [Void]$StringBuilder.AppendLine("        # Write KPI Event")
              [Void]$StringBuilder.AppendLine("        #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Successfull KPI Event`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Status Dialog 01`"")
              [Void]$StringBuilder.AppendLine("")
              [Void]$StringBuilder.AppendLine("        # Write KPI Event")
              [Void]$StringBuilder.AppendLine("        #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Failed KPI Event`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Status Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"Status02`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Status Dialog 02")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Status Dialog 02`"")
              [Void]$StringBuilder.AppendLine("      `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Display-MyStatusRichTextBox -RichTextBox `$RichTextBox }")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-MyStatusDialog -ScriptBlock `$ScriptBlock -DialogTitle `"This is a Test Status 02`" -ButtonMid `"OK`" -AllowControl")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Status Dialog 02`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("")
              [Void]$StringBuilder.AppendLine("        # Write KPI Event")
              [Void]$StringBuilder.AppendLine("        #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Successfull KPI Event`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Status Dialog 02`"")
              [Void]$StringBuilder.AppendLine("")
              [Void]$StringBuilder.AppendLine("        # Write KPI Event")
              [Void]$StringBuilder.AppendLine("        #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Failed KPI Event`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Status Dialog 02")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"UserAlert01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show User Alert 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show User Alert 01`"")
              [Void]$StringBuilder.AppendLine("      # Write KPI Event")
              [Void]$StringBuilder.AppendLine("      #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 0 -Category 0 -Message `"Successfull KPI Event`"")
              [Void]$StringBuilder.AppendLine("      Show-UserAlertDialog -Title `"Message Alert Title`" -Message `"Display this Alert Message Text to the user.`" -MsgType `"Info`"")
              [Void]$StringBuilder.AppendLine("      # Success")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Show User Alert 01`"")
              [Void]$StringBuilder.AppendLine("      #endregion Show User Alert 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"UserResponse01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Get User Response 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Get User Response 01`"")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetUserResponseDialog -MessageText `"This is the Sample Message I wish to Display.`" -ButtonLeft Yes -ButtonRight No -ButtonDefault Yes")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Get User Response 01 - `$(`$CommandResult.DialogResult)`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Get User Response 01 - `$(`$CommandResult.DialogResult)`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Get User Response 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"UserText01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show User Text Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show User Text Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetUserTextDialog -DialogTitle `"This is User Text 01`" -MessageText `"Show this Message Prompt`" -Items `"Sample Text`"")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success User Text Dialog 01 - `$(`$CommandResult.Items[0])`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Items")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed User Text Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show User Text Dialog 02")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"UserText02`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show User Text Dialog 02")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show User Text Dialog 02`"")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetUserTextDialog -DialogTitle `"This is User Text 02`" -MessageText `"Show this Message Prompt`" -Items @(`"Computer01`", `"Computer02`", `"Computer03`") -Height 20 -Multi")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success User Text Dialog 02 - `$(`$CommandResult.Items.Count) Items`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Items")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed User Text Dialog 02`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show User Text Dialog 02")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"MultiValue01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Multi Value Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Multi Value Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$OrderedItems = [Ordered]@{ `"FirstName`" = `"John`"; `"LastName`" = `"Doe`"; `"Height`" = `"5' 11''`"; `"Weight`" = `"180 Lbs`"}")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetMultiValueDialog -DialogTitle `"Multi Value Dialog 01`" -MessageText `"Show this Message Prompt`" -OrderedItems `$OrderedItems")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Multi Value Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.OrderedItems")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Multi Value Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Multi Value Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"RadioChoice01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Radio Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Radio Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$OrderedItems = [Ordered]@{ `"First Choice in the List.`" = `"1`"; `"Pick this Item!`" = `"2`"; `"No, Pick this one!!`" = `"3`"; `"Never Pick this Option.`" = `"4`"}")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetRadioChoiceDialog -DialogTitle `"Radio Choice Dialog 01`" -MessageText `"Show this Message Prompt`" -OrderedItems `$OrderedItems -Selected `$OrderedItems[`"Never Pick this Option.`"]")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Radio Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Item")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Object")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Radio Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Radio Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"ListViewChoice01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show ListView Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show ListView Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$Functions = @(Get-ChildItem -Path `"Function:\`")")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetListViewChoiceDialog -DialogTitle `"ListView Choice Dialog 01`" -MessageText `"Show this Message Prompt`" -List `$Functions -Property `"Name`", `"Version`", `"Source`" -Selected (`$Functions[2]) -Tooltip `"Name`"")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success ListView Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Item")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed ListView Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show ListView Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"ListViewChoice02`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show ListView Choice Dialog 02")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show ListView Choice Dialog 02`"")
              [Void]$StringBuilder.AppendLine("      `$Functions = @(Get-ChildItem -Path `"Function:\`")")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetListViewChoiceDialog -DialogTitle `"ListView Choice Dialog 01`" -MessageText `"Show this Message Prompt`" -List `$Functions -Property `"Name`", `"Version`", `"Source`" -Multi -Selected (`$Functions[3..5])")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success ListView Choice Dialog 02`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Item")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed ListView Choice Dialog 02`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show ListView Choice Dialog 02")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"ComboChoice01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Combo Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Combo Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$Variables = @(Get-ChildItem -Path `"Variable:\`")")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetComboChoiceDialog -DialogTitle `"Combo Choice Dialog 01`" -MessageText `"Show this Message Prompt`" -Items `$Variables -DisplayMember `"Name`" -ValueMember `"Value`" -Selected (`$Variables[4])")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Combo Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Item")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Combo Choice Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Combo Choice Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              [Void]$StringBuilder.AppendLine("    `"ComboFilter01`"")
              [Void]$StringBuilder.AppendLine("    {")
              [Void]$StringBuilder.AppendLine("      #region Show Combo Filter Dialog 01")
              [Void]$StringBuilder.AppendLine("      `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Combo Filter Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      `$ServiceList = @(Get-Service | Select-Object -Property Status, Name, StartType)")
              [Void]$StringBuilder.AppendLine("      `$CommandResult = Show-GetComboFilterDialog -DialogTitle `"Combo Filter Dialog 01`" -MessageText `"Show this Message Prompt`" -Items `$ServiceList -Properties Status, Name, StartType")
              [Void]$StringBuilder.AppendLine("      If (`$CommandResult.Success)")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Success")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Success Combo Filter Dialog 01`"")
              [Void]$StringBuilder.AppendLine("        Write-Host -Object (`$CommandResult | Format-List -Property * | Out-String)")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Success")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.DialogResult")
              [Void]$StringBuilder.AppendLine("        # `$CommandResult.Values")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      Else")
              [Void]$StringBuilder.AppendLine("      {")
              [Void]$StringBuilder.AppendLine("        # Failed")
              [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Failed Combo Filter Dialog 01`"")
              [Void]$StringBuilder.AppendLine("      }")
              [Void]$StringBuilder.AppendLine("      #endregion Show Combo Filter Dialog 01")
              [Void]$StringBuilder.AppendLine("      Break")
              [Void]$StringBuilder.AppendLine("    }")
              #endregion Sample Dialogs Code
            }
            Else
            {
              If ($MyControlName -eq "Top")
              {
                [Void]$StringBuilder.AppendLine("    `"Bug`"")
                [Void]$StringBuilder.AppendLine("    {")
                [Void]$StringBuilder.AppendLine("      Show-MyWebReport -ReportURL ([MyConfig]::BugURL)")
                [Void]$StringBuilder.AppendLine("      Break")
                [Void]$StringBuilder.AppendLine("    }")
                [Void]$StringBuilder.AppendLine("    `"Help`"")
                [Void]$StringBuilder.AppendLine("    {")
                [Void]$StringBuilder.AppendLine("      Show-MyWebReport -ReportURL ([MyConfig]::HelpURL)")
                [Void]$StringBuilder.AppendLine("      Break")
                [Void]$StringBuilder.AppendLine("    }")
                [Void]$StringBuilder.AppendLine("    `"Exit`"")
                [Void]$StringBuilder.AppendLine("    {")
                [Void]$StringBuilder.AppendLine("      if ([MyConfig]::Production)")
                [Void]$StringBuilder.AppendLine("      {")
                [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)Form.Close()")
                [Void]$StringBuilder.AppendLine("      }")
                [Void]$StringBuilder.AppendLine("      else")
                [Void]$StringBuilder.AppendLine("      {")
                [Void]$StringBuilder.AppendLine("        # **** Testing - Exit to Nested Prompt ****")
                [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
                [Void]$StringBuilder.AppendLine("        `$Host.EnterNestedPrompt()")
                [Void]$StringBuilder.AppendLine("        # **** Testing - Exit to Nested Prompt ****")
                [Void]$StringBuilder.AppendLine("      }")
                [Void]$StringBuilder.AppendLine("      Break")
                [Void]$StringBuilder.AppendLine("    }")
              }
            }
            
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
      }
      "Form"
      {
        Switch ($TempEvent.Name)
        {
          "Shown"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.Refresh()")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 1 -Category 0 -Message `"Begin Running `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  `$HashTable = @{`"ShowHeader`" = `$True}")
            [Void]$StringBuilder.AppendLine("  `$ScriptBlock = { [CmdletBinding()] param ([System.Windows.Forms.RichTextBox]`$RichTextBox, [HashTable]`$HashTable) Display-Initiliaze$($MyScriptName)Utility -RichTextBox `$RichTextBox -HashTable `$HashTable }")
            [Void]$StringBuilder.AppendLine("  `$DialogResult = Show-MyStatusDialog -ScriptBlock `$ScriptBlock -DialogTitle `"Initializing `$([MyConfig]::ScriptName)`" -ButtonMid `"OK`" -HashTable `$HashTable")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    # Enable `$$($MyScriptName)Timer")
            [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)Timer.Enabled = ([MyConfig]::AutoExitMax -gt 0)")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "KeyDown"
          {
            [Void]$StringBuilder.AppendLine("  If (`$EventArg.Control -and `$EventArg.Alt)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    Switch (`$EventArg.KeyCode)")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      `"F10`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        If (`$$($MyScriptName)Form.Tag)")
            [Void]$StringBuilder.AppendLine("        {")
            [Void]$StringBuilder.AppendLine("          # Hide Console Window")
            [Void]$StringBuilder.AppendLine("          `$Script:VerbosePreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("          `$Script:DebugPreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("          [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("          [Void][Console.Window]::Hide()")
            [Void]$StringBuilder.AppendLine("          `$$($MyScriptName)Form.Tag = `$False")
            [Void]$StringBuilder.AppendLine("        }")
            [Void]$StringBuilder.AppendLine("        Else")
            [Void]$StringBuilder.AppendLine("        {")
            [Void]$StringBuilder.AppendLine("          # Show Console Window")
            [Void]$StringBuilder.AppendLine("          `$Script:VerbosePreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("          `$Script:DebugPreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("          [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("          [System.Console]::Title = `"DEBUG: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("          `$$($MyScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("        }")
            [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)Form.Activate()")
            [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)Form.Select()")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  Else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    Switch (`$EventArg.KeyCode)")
            [Void]$StringBuilder.AppendLine("    {")
            [Void]$StringBuilder.AppendLine("      `"F1`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)ToolTip.Active = (-not `$$($MyScriptName)ToolTip.Active)")
            [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Enable / Disable $([MyConfig]::ScriptName) ToolTips = `$(`$$($MyScriptName)ToolTip.Active)`"")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("      `"F2`"")
            [Void]$StringBuilder.AppendLine("      {")
            [Void]$StringBuilder.AppendLine("        `$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"Show Change Log for `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("        `$ScriptContents = (`$Script:MyInvocation.MyCommand.ScriptBlock).ToString()")
            [Void]$StringBuilder.AppendLine("        `$CLogStart = (`$ScriptContents.IndexOf(`"<#`") + 2)")
            [Void]$StringBuilder.AppendLine("        `$CLogEnd = `$ScriptContents.IndexOf(`"#>`")")
            [Void]$StringBuilder.AppendLine("        Show-ChangeLogDialog -ChangeText (`$ScriptContents.SubString(`$CLogStart, (`$CLogEnd - `$CLogStart)))")
            [Void]$StringBuilder.AppendLine("        Break")
            [Void]$StringBuilder.AppendLine("      }")
            [Void]$StringBuilder.AppendLine("    }")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "Closing"
          {
            [Void]$StringBuilder.AppendLine("  #Write-KPIEvent -Source `"Utility`" -EntryType `"Information`" -EventID 2 -Category 0 -Message `"Exiting `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    # Show Console Window")
            [Void]$StringBuilder.AppendLine("    `$Script:VerbosePreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("    `$Script:DebugPreference = `"Continue`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"CLOSING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
          "Load"
          {
            [Void]$StringBuilder.AppendLine("  `$Screen = ([System.Windows.Forms.Screen]::FromControl(`$Sender)).WorkingArea")
            [Void]$StringBuilder.AppendLine("  `$Sender.Left = [Math]::Floor((`$Screen.Width - `$Sender.Width) / 2)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Top = [Math]::Floor((`$Screen.Height - `$Sender.Height) / 2)")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("  if ([MyConfig]::Production)")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    # Disable Control Close Menu / [X]")
            [Void]$StringBuilder.AppendLine("    #[ControlBox.Menu]::DisableFormClose(`$$($MyScriptName)Form.Handle)")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("    # Hide Console Window")
            [Void]$StringBuilder.AppendLine("    `$Script:VerbosePreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("    `$Script:DebugPreference = `"SilentlyContinue`"")
            [Void]$StringBuilder.AppendLine("")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Hide()")
            [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)Form.Tag = `$False")
            [Void]$StringBuilder.AppendLine("  }")
            [Void]$StringBuilder.AppendLine("  else")
            [Void]$StringBuilder.AppendLine("  {")
            [Void]$StringBuilder.AppendLine("    [Void][Console.Window]::Show()")
            [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"DEBUG: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
            [Void]$StringBuilder.AppendLine("    `$$($MyScriptName)Form.Tag = `$True")
            [Void]$StringBuilder.AppendLine("  }")
            Break
          }
        }
        Break
      }
      Default
      {
        Switch ($TempEvent.Name)
        {
          "ColumnClick"
          {
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Column = `$EventArg.Column")
            [Void]$StringBuilder.AppendLine("  `$Sender.ListViewItemSorter.Ascending = (-not `$Sender.ListViewItemSorter.Ascending)")
            [Void]$StringBuilder.AppendLine("  `$Sender.Sort()")
            Break
          }
          "DrawItem"
          {
            [Void]$StringBuilder.AppendLine("  #`$EventArg.DrawBackground()")
            [Void]$StringBuilder.AppendLine("  #`$EventArg.Graphics.DrawString(`$Sender.Items[`$EventArg.Index].Text, `$EventArg.Font, `$([System.Drawing.SolidBrush]::New(`$Sender.ForeColor)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, [System.Drawing.StringFormat]::GenericTypographic)")
            break
          }
          Default
          {
            [Void]$StringBuilder.AppendLine("  #`$$($MyScriptName)BtmStatusStrip.Items[`"Status`"].Text = `"`$(`$Sender.Name)`"")
            Break
          }
        }
        Break
      }
    }
    
    [Void]$StringBuilder.AppendLine("")
    [Void]$StringBuilder.AppendLine("  Write-Verbose -Message `"Exit $($EventName) Event for ```$$($MyScriptName)$($MyControlName)$($ControlName)`"")
    [Void]$StringBuilder.AppendLine("}")
    [Void]$StringBuilder.AppendLine("#endregion ******** Function Start-$($FunctionName) ********")
    If (-not $NoAdd.IsPresent)
    {
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)$($MyControlName)$($ControlName).$($TempEvent.AddMethod.Name)({Start-$($FunctionName) -Sender `$This -EventArg `$PSItem})")
    }
    [Void]$StringBuilder.AppendLine("")
    #endregion ******** My Code ********
    
    $EventName = $Null
    $FunctionName = $Null
  }
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  $ControlName = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptEvent"
}
#endregion function Build-MyScriptEvent

#region function Build-MyScriptControl
function Build-MyScriptControl ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .EXAMPLE
      Build-MyScriptControl
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [String]$MyScriptName,
    [String]$MyControlName,
    [Object]$Control
  )
  Write-Verbose -Message "Enter Function Build-MyScriptControl"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  if ($Control.Name -eq "Form")
  {
    $TempName = "$($MyScriptName)"
    $TempControlName = "$($MyScriptName)$($Control.Name)"
    $TempControl = "`$$($MyScriptName)$($Control.Name)"
  }
  else
  {
    $TempName = "$($MyScriptName)$($MyControlName)"
    $TempControlName = "$($MyScriptName)$($MyControlName)$($Control.Name)"
    $TempControl = "`$$($MyScriptName)$($MyControlName)$($Control.Name)"
  }
  
  #region ******** My Code ********
  
  # Form Container Controls Notes / Comments Section
  if ($Control.Name -in @("ImageList", "Form", "ContextMenuStrip", "MenuStrip", "ToolStrip", "ToolStripContainer", "StatusStrip", "GroupBox", "Panel", "SplitContainer", "TabControl"))
  {
    [Void]$StringBuilder.AppendLine("# ************************************************")
    [Void]$StringBuilder.AppendLine("# $($TempName) $($Control.Name)")
    [Void]$StringBuilder.AppendLine("# ************************************************")
  }
  [Void]$StringBuilder.AppendLine("#region $($TempControl) = [$($Control.FullName)]::New()")
  
  #region ******** Add Constructors ********
  if ($Control.Name -in @("Timer", "ImageList", "ToolTip", "NotifyIcon"))
  {
    [Void]$StringBuilder.AppendLine("$($TempControl) = [$($Control.FullName)]::New(`$$($TempName)FormComponents)")
  }
  else
  {
    ForEach ($Constructor in @(Get-MyFormControlConstructors -Control $Control))
    {
      [Void]$StringBuilder.AppendLine("$($TempControl) = [$($Control.FullName)]::New($($Constructor | ForEach-Object -Process { @($PSItem.GetParameters() | ForEach-Object -Process { "[$($PSItem.ParameterType.FullName)]`$$($PSItem.Name.SubString(0, 1).ToUpper())$($PSItem.Name.SubString(1))" }) -join ", " }))")
    }
  }
  #endregion ******** Add Constructors ********
  
  #region ******** Add Control ********
  Switch ($Control.Name)
  {
    { $PSItem -in @("Timer", "ImageList", "ToolTip", "NotifyIcon", "Form", "ColorDialog", "FolderBrowserDialog", "FontDialog", "OpenFileDialog", "PageSetupDialog", "PrintPreviewDialog", "SaveFileDialog") }
    {
      # Skip These Controls
      Break
    }
    "Button"
    {
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Controls.Add($($TempControl))")
      [Void]$StringBuilder.AppendLine("# Evenly Space Buttons - Move Size to after Text")
      [Void]$StringBuilder.AppendLine("#`$NumButtons = 2")
      [Void]$StringBuilder.AppendLine("#`$TempSpace = [Math]::Floor(`$Container.ClientSize.Width - ([MyConfig]::FormSpacer * (`$NumButtons + 1)))")
      [Void]$StringBuilder.AppendLine("#`$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
      [Void]$StringBuilder.AppendLine("#`$TempMod = `$TempSpace % `$NumButtons")
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Drawing.Size]::New(`$TempWidth, $($TempControl).PreferredSize.Height)")
      Break
    }
    "ColumnHeader"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$ListView.Columns.Add($($StringBuilder))")
      Break
    }
    "TreeNode"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$TreeView.Nodes.Add($($TempControl))")
      Break
    }
    "ListViewItem"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$ListView.Items.Add($($TempControl))")
      Break
    }
    "GroupBox"
    {
      [Void]$StringBuilder.AppendLine("# Location of First Control = [System.Drawing.Point]::New([MyConfig]::FormSpacer, [MyConfig]::Font.Height)")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Controls.Add($($TempControl))")
      Break
    }
    "TabPage"
    {
      [Void]$StringBuilder.AppendLine("[Void]`$TabControl.Controls.Add($($TempControl))")
      Break
    }
    "DataGridView"
    {
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Controls.Add($TempControl)")
      Break
    }
    { $PSItem -like @("DataGridView*") }
    {
      [Void]$StringBuilder.AppendLine("[Void]`$DataGridView.Columns.Add($($TempControl))")
      Break
    }
    { $PSItem -in @("ContextMenuStrip", "MenuStrip", "ToolStrip", "StatusStrip") }
    {
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Controls.Add($($TempControl))")
      if ($Control.Name -eq "MenuStrip")
      {
        [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Main$($Control.Name) = $($TempControl)")
      }
      else
      {
        [Void]$StringBuilder.AppendLine("#`$$($MyScriptName)Form.$($Control.Name) = $($TempControl)")
      }
      Break
    }
    { $PSItem -like @("ToolStrip*") }
    {
      [Void]$StringBuilder.AppendLine("#[Void]`$ToolMenuStrip.Items.Add($($TempControl))")
      [Void]$StringBuilder.AppendLine("#[Void]`$ToolMenuStrip.DropDownItems.Add($($TempControl))")
      Break
    }
    Default
    {
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Controls.Add($TempControl)")
      Break
    }
  }
  #endregion ******** Add Control ********
  
  #region ******** Add Properties ********
  $DefaultControl = $Control::New()
  ForEach ($Property in @(Get-MyFormControlProperties -Control $Control | Where-Object -FilterScript { $PSItem.Name -notlike "Access*" }))
  {
    $DefaultValue = $($DefaultControl.PSObject.Properties[($Property.Name)].Value)
    Switch ($Property.PropertyType.FullName)
    {
      { $PSItem -in @("System.Windows.Forms.IWindowTarget", "System.ComponentModel.ISite", "System.IFormatProvider") }
      {
        # Ignore These Properties...
        Break
      }
      "System.String"
      {
        #region System.String
        Switch ($Property.Name)
        {
          "DisplayMember" { $CodeValue = "`"Text`""; Break }
          "ValueMember" { $CodeValue = "`"Value`""; Break }
          "Name" { $CodeValue = "`"$($TempControlName)`""; Break }
          "ToolTipTitle" { $CodeValue = "`"`$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`""; Break }
          "Text"
          {
            if ($Control.Name -eq "Form")
            {
              $CodeValue = "`"`$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`""
            }
            else
            {
              $CodeValue = "`"$($TempControlName)`""
            }
            Break
          }
          Default { $CodeValue = "`"$($DefaultValue)`""; Break }
        }
        if ($Property.Name -in @("Name", "Text"))
        {
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.String
        Break
      }
      "System.Char"
      {
        #region System.Char
        if ($Property.Name -eq "PasswordChar")
        {
          $CodeValue = "`"`""
        }
        else
        {
          $CodeValue = "`"$($DefaultValue)`""
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Char
        Break
      }
      "System.Boolean"
      {
        #region System.Boolean
        if ((($Control.Name -eq "Form") -and ($Property.Name -eq "KeyPreview")) -or (($Control.Name -eq "Button") -and ($Property.Name -eq "KeyPreview")))
        {
          $CodeValue = "`$True"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        ElseIf (($Control.Name -in @("ListBox", "CheckedListBox")) -and ($Property.Name -eq "IntegralHeight"))
        {
          $CodeValue = "`$False"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "`$$($DefaultValue)"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Boolean
        Break
      }
      "System.Int32"
      {
        #region System.Int32
        Switch ($Property.Name)
        {
          "ItemHeight" { $CodeValue = "[MyConfig]::Font.Height"; Break }
          "Interval" { $CodeValue = "[MyConfig]::AutoExitTic"; Break }
          Default { $CodeValue = "$($DefaultValue)"; Break }
        }
        if ($Control.Name -eq "Timer")
        {
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Int32
        Break
      }
      "System.Int32[]"
      {
        $CodeValue = ($DefaultValue -join ", ")
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.String[]"
      {
        $CodeValue = ($DefaultValue -join ", ")
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Double"
      {
        $CodeValue = "$($DefaultValue)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Single"
      {
        $CodeValue = "$($DefaultValue)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Decimal"
      {
        $CodeValue = "$($DefaultValue)"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.DateTime"
      {
        $CodeValue = "[DateTime]::Parse(`"$($DefaultValue))`""
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Object"
      {
        #region System.Object
        switch ($Property.Name)
        {
          "Tag"
          {
            Switch ($Control.Name)
            {
              "Form"
              {
                $CodeValue = "(-not [MyConfig]::Production)"
                Break
              }
              "WebBrowser"
              {
                $CodeValue = "@{ `"URL`" = `"`" }"
                Break
              }
              "TextBox"
              {
                $CodeValue = "@{ `"HintText`" = `"Please Enter a Valid Value.`"; `"HintEnabled`" = `$True }"
                Break
              }
              Default
              {
                $CodeValue = "[$($Property.PropertyType.FullName)]::New()"
                Break
              }
            }
          }
          Default
          {
            $CodeValue = "[$($Property.PropertyType.FullName)]::New()"
            Break
          }
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Object
        Break
      }
      "System.Drawing.Color"
      {
        #region System.Drawing.Color
        Switch ($Control.Name)
        {
          { $PSItem -in @("Form", "ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip") }
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.Fore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.Back"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($DefaultValue.ToString())")
            }
            Break
          }
          { $PSItem -in @("TextBox", "ComboBox", "CheckedListBox", "ListBox", "ListView", "TreeView", "RichTextBox", "DateTimePicker", "DataGridView", "ToolStripComboBox", "ToolStripTextBox", "WebBrowser") }
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.TextFore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.TextBack"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($DefaultValue.ToString())")
            }
            Break
          }
          "GroupBox"
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor"
                {
                  $CodeValue = "[MyConfig]::Colors.GroupFore"
                  [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
                  Break
                }
                "BackColor"
                {
                  $CodeValue = "[MyConfig]::Colors.Back"
                  [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
                  Break
                }
              }
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($DefaultValue.ToString())")
            }
            Break
          }
          "Button"
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.ButtonFore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.ButtonBack"; Break }
              }
              [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($DefaultValue.ToString())")
            }
            Break
          }
          { $PSItem -in @("Label", "CheckBox", "RadioButton") }
          {
            Switch ($Property.Name)
            {
              "ForeColor"
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.Fore")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.TitleFore")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.LabelFore")
                Break
              }
              "BackColor"
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.Back")
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Colors.TitleBack")
                Break
              }
              Default
              {
                [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [System.Drawing.Color]::$($DefaultValue.ToString())")
                Break
              }
            }
          }
          Default
          {
            if ($Property.Name -in @("ForeColor", "BackColor"))
            {
              Switch ($Property.Name)
              {
                "ForeColor" { $CodeValue = "[MyConfig]::Colors.Fore"; Break }
                "BackColor" { $CodeValue = "[MyConfig]::Colors.Back"; Break }
              }
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
            }
            else
            {
              [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [$($Property.PropertyType.FullName)]::$($DefaultValue.ToString())")
            }
            Break
          }
          
        }
        #endregion System.Drawing.Color
        Break
      }
      "System.Drawing.Font"
      {
        #region System.Drawing.Font
        Switch ($Control.Name)
        {
          { $PSItem -in @("Form", "ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip") }
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            Break
          }
          "Label"
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Bold")
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Title")
            Break
          }
          { $PSItem -in @("GroupBox", "Button", "ListView", "TabControl", "CheckBox", "RadioButton") }
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Bold")
            Break
          }
          Default
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = [MyConfig]::Font.Regular")
            Break
          }
        }
        #endregion System.Drawing.Font
        Break
      }
      "System.Drawing.Icon"
      {
        #region System.Drawing.Icon
        if ($Control.Name -eq "Form")
        {
          $CodeValue = "[System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$$($MyScriptName)FormIcon)))"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = `$$($MyScriptName)Form.Icon")
          $CodeValue = "[System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$IconString)))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Drawing.Icon
        Break
      }
      "System.Drawing.Image"
      {
        $CodeValue = "[System.Drawing.Image]::FromStream([System.IO.MemoryStream]::New([System.Convert]::FromBase64String(`$ImageString)))"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Drawing.Point"
      {
        #region System.Drawing.Point
        if (($Control.Name -ne "Form") -and ($Property.Name -eq "Location"))
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New([MyConfig]::FormSpacer, [MyConfig]::FormSpacer)"
          if (($Control.Name -in @("ContextMenuStrip", "MenuStrip", "StatusStrip", "ToolStrip")) -or (($Control.Name -in @("Panel", "SplitContainer")) -and ($MyControlName -eq "Main")))
          {
            [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
          }
          else
          {
            [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
          }
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New($($DefaultValue.X), $($DefaultValue.Y))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Drawing.Point
        Break
      }
      "System.Drawing.Rectangle"
      {
        $CodeValue = "[$($Property.PropertyType.FullName)]::New($($DefaultValue.X), $($DefaultValue.Y), $($DefaultValue.Width), $($DefaultValue.Height))"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.AnchorStyles"
      {
        $CodeValue = "[$($Property.PropertyType.FullName)](`"$($DefaultValue.ToString())`")"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.Cursor"
      {
        $CodeValue = "[$($Property.PropertyType.FullName)s]::Default"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
      "System.Windows.Forms.ImageList"
      {
        #region System.Windows.Forms.ImageList
        $CodeValue = "`$$($MyScriptName)ImageList"
        if ($Control.Name -in @("ContextMenuStrip", "MenuStrip", "ToolStrip", "StatusStrip"))
        {
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Windows.Forms.ImageList
        Break
      }
      "System.Windows.Forms.Padding"
      {
        #region System.Windows.Forms.Padding
        if ($Control.Name -in @("Form", "Panel"))
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New([MyConfig]::FormSpacer, $($DefaultValue.Top), [MyConfig]::FormSpacer, $($DefaultValue.Bottom))"
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New($($DefaultValue.Left), $($DefaultValue.Top), $($DefaultValue.Right), $($DefaultValue.Bottom))"
        }
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        #endregion System.Windows.Forms.Padding
        Break
      }
      { $PSItem -in @("System.Drawing.Size", "System.Drawing.SizeF") }
      {
        #region @("System.Drawing.Size", "System.Drawing.SizeF")
        if (($Control.Name -eq "Form") -and ($Property.Name -eq "MinimumSize"))
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New($($DefaultValue.Width), $($DefaultValue.Height))"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion @("System.Drawing.Size", "System.Drawing.SizeF")
        Break
      }
      "System.Collections.IComparer"
      {
        #region System.Collections.IComparer
        if ($Property.Name -eq "ListViewItemSorter")
        {
          $CodeValue = "[MyCustom.ListViewSort]::New()"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::New()"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion System.Collections.IComparer
        Break
      }
      { $Property.PropertyType.BaseType.Name -eq "Enum" }
      {
        #region All Enumeration
        if (($Property.Name -eq "Dock") -and ($Control.Name -in @("Panel", "SplitContainer")) -and ($MyControlName -eq "Main"))
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::Fill"
          [Void]$StringBuilder.AppendLine("$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        else
        {
          $CodeValue = "[$($Property.PropertyType.FullName)]::$($DefaultValue.ToString())"
          [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        }
        #endregion All Enumeration
        Break
      }
      Default
      {
        $CodeValue = "[$($Property.PropertyType.FullName)]::New()"
        [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name) = $($CodeValue)")
        Break
      }
    }
  }
  
  Try
  {
    $DefaultControl.Dispose()
  }
  Catch { }
  $DefaultControl = $Null
  #endregion ******** Add Properties ********
  
  [Void]$StringBuilder.AppendLine("#endregion $($TempControl) = [$($Control.FullName)]::New()")
  [Void]$StringBuilder.AppendLine("")
  
  #region ******** How To Use / Call Dialogs ********
  If ($Control.Name -in @("OpenFileDialog", "SaveFileDialog", "FolderBrowserDialog"))
  {
    [Void]$StringBuilder.AppendLine("# How to Call / Use $($TempControl)")
    Switch ($Control.Name)
    {
      "OpenFileDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).FileName = `"`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Filter = `"CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).FilterIndex = 1")
        [Void]$StringBuilder.AppendLine("#$($TempControl).InitialDirectory = `$PSScriptRoot")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Multiselect = `$False")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Title = `"Show this Title to the User`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
      "SaveFileDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).FileName = `"`")")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Filter = `"CSV Files (*.csv)|*.csv|Text Files (*.txt)|*.txt|All Files (*.*)|*.*`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).FilterIndex = 1")
        [Void]$StringBuilder.AppendLine("#$($TempControl).InitialDirectory = `$PSScriptRoot")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Title = `"Show this Title to the User`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
      "FolderBrowserDialog"
      {
        [Void]$StringBuilder.AppendLine("#$($TempControl).Description = `"Select a Random Folder`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).RootFolder = [System.Environment+SpecialFolder]::Desktop")
        [Void]$StringBuilder.AppendLine("#$($TempControl).SelectedPath = `"C:\Windows`"")
        [Void]$StringBuilder.AppendLine("#$($TempControl).ShowNewFolderButton = `$True")
        [Void]$StringBuilder.AppendLine("#$($TempControl).Tag = `$Null")
        [Void]$StringBuilder.AppendLine("#`$Response = $($TempControl).ShowDialog()")
        Break
      }
    }
    [Void]$StringBuilder.AppendLine("#If (`$Response = [System.Windows.Forms.DialogResult]::OK)")
    [Void]$StringBuilder.AppendLine("#{")
    [Void]$StringBuilder.AppendLine("#  # Do Work Here")
    [Void]$StringBuilder.AppendLine("#}")
    [Void]$StringBuilder.AppendLine("")
  }
  #endregion ******** How To Use / Call Dialogs ********
  
  #region ******** Add Control Items ********
  $CodeValue = $Null
  ForEach ($Property in @(Get-MyFormControlItems -Control $Control))
  {
    ForEach ($Add in $Property.PropertyType.GetDeclaredMethods("Add"))
    {
      $CodeValue = @($Add.GetParameters() | ForEach-Object -Process { "[$($PSItem.ParameterType.FullName)]`$$($PSItem.Name.SubString(0, 1).ToUpper())$($PSItem.Name.SubString(1))" }) -join ", "
      [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name).Add($($CodeValue))")
    }
    ForEach ($Add in $Property.PropertyType.GetDeclaredMethods("AddRange"))
    {
      $CodeValue = @($Add.GetParameters() | ForEach-Object -Process { "[$($PSItem.ParameterType.FullName)]`$$($PSItem.Name.SubString(0, 1).ToUpper())$($PSItem.Name.SubString(1))" }) -join ", "
      [Void]$StringBuilder.AppendLine("#$($TempControl).$($Property.Name).AddRange($($CodeValue))")
    }
  }
  if (-not [String]::IsNullOrEmpty($CodeValue))
  {
    [Void]$StringBuilder.AppendLine("#$($TempControl).BeginUpdate()")
    [Void]$StringBuilder.AppendLine("#$($TempControl).EndUpdate()")
    [Void]$StringBuilder.AppendLine("")
  }
  #endregion ******** Add Control Items ********
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScriptControl"
}
#endregion function Build-MyScriptControl

#region function Build-MyScript
function Build-MyScript ()
{
  <#
    .SYNOPSIS
      Function to do something specific
    .DESCRIPTION
      Function to do something specific
    .PARAMETER Value
      Value Command Line Parameter
    .EXAMPLE
      Build-MyScript -Value "String"
    .NOTES
      Original Function By 
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [String]$MyScriptName,
    [String]$MyControlName,
    [Object]$Control,
    [Object[]]$ControlEvent,
    [String]$GUIContainer
  )
  Write-Verbose -Message "Enter Function Build-MyScript"
  
  $StringBuilder = [System.Text.StringBuilder]::New()
  
  if ($Control.Name -eq "Form")
  {
    $TempName = "$($MyScriptName)"
    $TempControl = "`$$($MyScriptName)$($Control.Name)"
  }
  else
  {
    $TempName = "$($MyScriptName)$($MyControlName)"
    $TempControl = "`$$($MyScriptName)$($MyControlName)$($Control.Name)"
  }
  
  #region ******** My Code ********
  
  #region ******** Form / ListView Header ********
  Switch ($Control.Name)
  {
    "Form"
    {
      [Void]$StringBuilder.Append((Build-MyScriptHeader -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptConfig -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptColors -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptFonts -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptRuntime -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptDefEnums -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptDefClasses -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptWindowsAPIs -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptFunctions -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptMultiThread -MyScriptName $MyScriptName))
      [Void]$StringBuilder.Append((Build-MyScriptJobsThreads -MyScriptName $MyScriptName))
      
      [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> $($MyScriptName) Common Dialogs <<<<<<<<<<<<<<<<")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScriptUserAlertDialog -MyScriptName $MyScriptName -MyControlName "UserAlert"))
      [Void]$StringBuilder.Append((Build-MyScriptUserResponseDialog -MyScriptName $MyScriptName -MyControlName "GetUserResponse"))
      [Void]$StringBuilder.Append((Build-MyScriptUserInputDialog -MyScriptName $MyScriptName -MyControlName "GetUserText"))
      [Void]$StringBuilder.Append((Build-MyScriptOrderedListDialog -MyScriptName $MyScriptName -MyControlName "GetMultiValue"))
      [Void]$StringBuilder.Append((Build-MyScriptChoiceDialog -MyScriptName $MyScriptName -MyControlName "GetRadioChoice"))
      [Void]$StringBuilder.Append((Build-MyScriptListViewChoice -MyScriptName $MyScriptName -MyControlName "GetListViewChoice"))
      [Void]$StringBuilder.Append((Build-MyScriptSelectOptionDialog -MyScriptName $MyScriptName -MyControlName "GetComboChoice"))
      [Void]$StringBuilder.Append((Build-MyScriptFilterComboDialog -MyScriptName $MyScriptName -MyControlName "GetComboFilter"))
      [Void]$StringBuilder.Append((Build-MyScriptShowChangeLog -MyScriptName $MyScriptName -MyControlName "ChangeLog"))
      [Void]$StringBuilder.Append((Build-MyScriptAdvStatusDialog -MyScriptName $MyScriptName -MyControlName "MyStatus" -MyControlType "RichTextBox"))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ================ $($MyScriptName) Common Dialogs ================")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> $($MyScriptName) Custom Dialogs <<<<<<<<<<<<<<<<")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ================ $($MyScriptName) Custom Dialogs ================")
      [Void]$StringBuilder.AppendLine("")
      
      [Void]$StringBuilder.AppendLine("#region >>>>>>>>>>>>>>>> Begin **** $($MyScriptName) **** Begin <<<<<<<<<<<<<<<<")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#`$Result = [System.Windows.Forms.MessageBox]::Show($($TempControl), `"Message Text`", [MyConfig]::ScriptName, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)FormComponents = [System.ComponentModel.Container]::New()")
      [Void]$StringBuilder.AppendLine("")
      
      [Void]$StringBuilder.Append((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.OpenFileDialog])))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.SaveFileDialog])))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.FolderBrowserDialog])))
      [Void]$StringBuilder.AppendLine("")
      
      [Void]$StringBuilder.Append((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.ToolTip])))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.ImageList])))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScriptCustomIcons -MyScriptName $MyScriptName))
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    "ListView"
    {
      [Void]$StringBuilder.Append((Build-MyScriptListViewSort))
      Break
    }
  }
  #endregion ******** Form / ListView Header ********
  
  if (($Control.Name -eq "Form") -or (-not ($PSBoundParameters.ContainsKey("MyControlName"))))
  {
    [Void]$StringBuilder.Append((Build-MyScriptControl -MyScriptName $MyScriptName -Control $Control))
    if ($PSBoundParameters.ContainsKey("ControlEvent"))
    {
      [Void]$StringBuilder.Append((Build-MyScriptEvent -MyScriptName $MyScriptName -Control $Control -ControlEvent $ControlEvent))
    }
  }
  else
  {
    [Void]$StringBuilder.Append((Build-MyScriptControl -MyScriptName $MyScriptName -MyControlName $MyControlName -Control $Control))
    if ($PSBoundParameters.ContainsKey("ControlEvent"))
    {
      [Void]$StringBuilder.Append((Build-MyScriptEvent -MyScriptName $MyScriptName -MyControlName $MyControlName -Control $Control -ControlEvent $ControlEvent))
    }
  }
  
  #region ******* Form / Code Footer ********
  Switch ($Control.Name)
  {
    "Form"
    {
      #[Void]$StringBuilder.Append((Build-MyScriptEvent -MyScriptName $MyScriptName -MyControlName $MyControlName -Control $Control -ControlEvent $ControlEvent))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** Controls for $($TempName) $($Control.Name) ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.Timer]) -ControlEvent (([System.Windows.Forms.Timer]).GetEvent("Tick"))))
      [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -Control ([System.Windows.Forms.NotifyIcon]) -ControlEvent (([System.Windows.Forms.NotifyIcon]).GetEvent("MouseClick"))))
      Switch ($GUIContainer)
      {
        "Panel"
        {
          [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -MyControlName "Main" -Control ([System.Windows.Forms.Panel])))
          Break
        }
        "Split"
        {
          [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -MyControlName "Main" -Control ([System.Windows.Forms.SplitContainer])))
          Break
        }
      }
      [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -MyControlName "Top" -Control ([System.Windows.Forms.MenuStrip])))
      [Void]$StringBuilder.AppendLine((Build-MyScript -MyScriptName $MyScriptName -MyControlName "Btm" -Control ([System.Windows.Forms.StatusStrip])))
      [Void]$StringBuilder.AppendLine("#$($TempControl).ClientSize = [System.Drawing.Size]::New(($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Right + [MyConfig]::FormSpacer, ($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Controls for $($TempName) $($Control.Name) ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ================ End **** $($MyScriptName) **** End ================")
      [Void]$StringBuilder.AppendLine("")
      
      #region ******** Start Form  ********
      [Void]$StringBuilder.AppendLine("#region ******** Start Form  ********")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("# Add Form Code here...")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("[System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
      [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [Void][Console.Window]::Hide()")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("Try")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [System.Windows.Forms.Application]::Run(`$$($MyScriptName)Form)")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("Catch")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # **** Testing - Exit to Nested Prompt ****")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
      [Void]$StringBuilder.AppendLine("    #`$Host.EnterNestedPrompt()")
      [Void]$StringBuilder.AppendLine("    # **** Testing - Exit to Nested Prompt ****")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)OpenFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)SaveFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)FolderBrowserDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)FormComponents.Dispose()")
      [Void]$StringBuilder.AppendLine("`$$($MyScriptName)Form.Dispose()")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("# Add Form Code here...")
      [Void]$StringBuilder.AppendLine("# *********************")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion ******** Start Form  ********
      
      #region ******** Azure Logon and Start Form  ********
      [Void]$StringBuilder.AppendLine("#region ******** Azure Logon and Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Set Defaut Screen Colors")
      [Void]$StringBuilder.AppendLine("[Console]::ForegroundColor = `"Gray`"")
      [Void]$StringBuilder.AppendLine("[Console]::BackgroundColor = `"Black`"")
      [Void]$StringBuilder.AppendLine("[Console]::Clear()")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Set Default Flag / Check Values")
      [Void]$StringBuilder.AppendLine("`$ChkUser = `$True")
      [Void]$StringBuilder.AppendLine("`$RunMe = `$True")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# Import / Install Required Azure Modules")
      [Void]$StringBuilder.AppendLine("Write-Host -Object (`"-`" * 32) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("Write-Host -Object `"Importing Required Azure Modules`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("Write-Host -Object (`"-`" * 32) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("# Process Required Modules")
      [Void]$StringBuilder.AppendLine(":ModInstall foreach (`$Key in [MyConfig]::RequiredModules.Keys)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  # Module Info / Status")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Module: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `$Key -ForegroundColor Cyan -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `" Version: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object ([MyConfig]::RequiredModules[`$Key]) -ForegroundColor Cyan")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Status: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("  # Check if Module is Installed")
      [Void]$StringBuilder.AppendLine("  if ((Install-MyModule -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key])).Success)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Imported`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Check for Admion Rights")
      [Void]$StringBuilder.AppendLine("    if ([MyConfig]::IsLocalAdmin)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      # Insatll Module for All Users")
      [Void]$StringBuilder.AppendLine("      if ((Install-MyModule -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key]) -Install).Success)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Suceeded")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Installed`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      else")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Installation Failed")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("        break ModInstall")
      [Void]$StringBuilder.AppendLine("        `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    else")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      if (`$ChkUser)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Ask user to Install in User Profile")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Prompt User`" -ForegroundColor DarkYellow")
      [Void]$StringBuilder.AppendLine("        [Console]::ForegroundColor = `"Green`"")
      [Void]$StringBuilder.AppendLine("        `$Choice = `$Host.UI.PromptForChoice(`"Install Azure Module`", `"Install the Azure Module to your user profile?`", ([System.Management.Automation.Host.ChoiceDescription[]](`"&Yes`", `"&No`")), 1)")
      [Void]$StringBuilder.AppendLine("        [Console]::ForegroundColor = `"Gray`"")
      [Void]$StringBuilder.AppendLine("        if (`$Choice -eq 1)")
      [Void]$StringBuilder.AppendLine("        {")
      [Void]$StringBuilder.AppendLine("          # User Said No")
      [Void]$StringBuilder.AppendLine("          break ModInstall")
      [Void]$StringBuilder.AppendLine("          `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("        }")
      [Void]$StringBuilder.AppendLine("        else")
      [Void]$StringBuilder.AppendLine("        {")
      [Void]$StringBuilder.AppendLine("          # User Said Yes")
      [Void]$StringBuilder.AppendLine("          Write-Host")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Module: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `$Key -ForegroundColor Cyan -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `" Version: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object ([MyConfig]::RequiredModules[`$Key]) -ForegroundColor Cyan")
      [Void]$StringBuilder.AppendLine("          Write-Host -Object `"Status: `" -ForegroundColor Gray -NoNewline")
      [Void]$StringBuilder.AppendLine("          `$ChkUser = `$False")
      [Void]$StringBuilder.AppendLine("        }")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      ")
      [Void]$StringBuilder.AppendLine("      # Install Module as the Current User")
      [Void]$StringBuilder.AppendLine("      if ((Install-MyModule -Scope CurrentUser -Name `$Key -Version ([MyConfig]::RequiredModules[`$Key]) -Install).Success)")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Suceeded")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Installed`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("      else")
      [Void]$StringBuilder.AppendLine("      {")
      [Void]$StringBuilder.AppendLine("        # Instalation Failed")
      [Void]$StringBuilder.AppendLine("        Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("        break ModInstall")
      [Void]$StringBuilder.AppendLine("        `$RunMe = `$False")
      [Void]$StringBuilder.AppendLine("      }")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("if (`$RunMe)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  # Login to Azure")
      [Void]$StringBuilder.AppendLine("  Write-Host")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object (`"-`" * 19) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Azure / Entre Login`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object (`"-`" * 19) -ForegroundColor DarkGray")
      [Void]$StringBuilder.AppendLine("  Write-Host -Object `"Logon to Azure: `" -ForegroundColor Gray -NoNewLine")
      [Void]$StringBuilder.AppendLine("  Update-AzConfig -EnableLoginByWam `$False -DisplayBreakingChangeWarning `$False -WarningAction SilentlyContinue | Out-Null")
      [Void]$StringBuilder.AppendLine("  #[MyConfig]::AADLogonInfo = Connect-AzAccount -Tenant ([MyConfig]::TenantID) -SubscriptionID ([MyConfig]::SubscriptionID) -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue")
      [Void]$StringBuilder.AppendLine("  [MyConfig]::AADLogonInfo = Connect-AzAccount -ServicePrincipal -Tenant ([MyConfig]::TenantID) -Credential ([PSCredential]::New([MyConfig]::ApplicationID, (ConvertTo-SecureString -AsPlainText -Force -String (Encrypt-WithCert -Decrypt -Universal -Salt 2 -CertKey ([MyConfig]::CertKey) -TextString ([MyConfig]::SecretCode))))) -ErrorAction SilentlyContinue")
      [Void]$StringBuilder.AppendLine("  if ([String]::IsNullOrEmpty([MyConfig]::AADLogonInfo))")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Azure Login Failed")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Failed`" -ForegroundColor DarkRed")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("  else")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Azure Login Succeeded")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Success`" -ForegroundColor DarkGreen")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Update Console")
      [Void]$StringBuilder.AppendLine("    [System.Console]::Title = `"RUNNING: `$([MyConfig]::ScriptName) - `$([MyConfig]::ScriptVersion)`"")
      [Void]$StringBuilder.AppendLine("    if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("    {")
      [Void]$StringBuilder.AppendLine("      [Void][Console.Window]::Hide()")
      [Void]$StringBuilder.AppendLine("    }")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Launch / Run Script")
      [Void]$StringBuilder.AppendLine("    [System.Windows.Forms.Application]::Run(`$IDPForm)")
      [Void]$StringBuilder.AppendLine("    ")
      [Void]$StringBuilder.AppendLine("    # Close / Dispose of Form Objects")
      [Void]$StringBuilder.AppendLine("    `$IDPOpenFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$IDPSaveFileDialog.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$IDPFormComponents.Dispose()")
      [Void]$StringBuilder.AppendLine("    `$IDPForm.Dispose()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("else")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  if (-not [MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("  {")
      [Void]$StringBuilder.AppendLine("    # Exit to Nested Prompt - Testing Only")
      [Void]$StringBuilder.AppendLine("    Write-Host -Object `"Exit Line Num: `$((Get-PSCallStack).ScriptLineNumber)`"")
      [Void]$StringBuilder.AppendLine("    `$Host.EnterNestedPrompt()")
      [Void]$StringBuilder.AppendLine("  }")
      [Void]$StringBuilder.AppendLine("}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** Azure Logon and Start Form  ********")
      [Void]$StringBuilder.AppendLine("")
      #endregion ******** Azure Logon and Start Form  ********
            
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("if ([MyConfig]::Production)")
      [Void]$StringBuilder.AppendLine("{")
      [Void]$StringBuilder.AppendLine("  [System.Environment]::Exit(0)")
      [Void]$StringBuilder.AppendLine("}")
      Break
    }
    "SplitContainer"
    {
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) Panel1 Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("$($TempControl).Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Panel1 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) Panel2 Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("$($TempControl).Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Panel2 Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    "TabControl"
    {
      [Void]$StringBuilder.Append((Build-MyScriptEvent -MyScriptName $MyScriptName -MyControlName $MyControlName -Control ([System.Windows.Forms.TabPage]) -ControlEvent (([System.Windows.Forms.TabPage]).GetEvent("Enter"))))
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Tab Pages ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Tab Pages ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    "tooltip"
    {
      [Void]$StringBuilder.AppendLine("#$($TempControl).SetToolTip(`$FormControl, `"Form Control Help`")")
      break
    }
    "Label"
    {
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Drawing.Size]::New((([MyConfig]::Font.Width) * ([MyConfig]::FontTitle) * ($($TempControl).Text.Length + 4)), $($TempControl).PreferredHeight)")
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = [System.Windows.Forms.TextRenderer]::MeasureText($($TempControl).Text, $($TempControl).Font, $($TempControl).Size, ([System.Windows.Forms.TextFormatFlags](`"Top`", `"Left`", `"WordBreak`")))")
      [Void]$StringBuilder.AppendLine("#$($TempControl).Size = $($TempControl).PreferredSize")
      break
    }
    "ListView"
    {
      [Void]$StringBuilder.AppendLine("#ForEach (`$Item in `$Objects)")
      [Void]$StringBuilder.AppendLine("#{")
      [Void]$StringBuilder.AppendLine("#  ($($TempControl).Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Item.Text)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$StringBuilder.AppendLine("#  #($($TempControl).Items.Add((`$ListViewItem = [System.Windows.Forms.ListViewItem]::New(`$Item.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$StringBuilder.AppendLine("#  `$ListViewItem.Font = [MyConfig]::Font.Regular")
      [Void]$StringBuilder.AppendLine("#}")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#`$Objects | ForEach-Object -Process { ($($TempControl).Items.Add(([System.Windows.Forms.ListViewItem]::New(`$PSItem.Text)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$StringBuilder.AppendLine("#`$Objects | ForEach-Object -Process { ($($TempControl).Items.Add(([System.Windows.Forms.ListViewItem]::New(`$PSItem.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$StringBuilder.AppendLine("")
      break
    }
    "ToolStripContainer"
    {
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) ContentPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) ContentPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) ContentPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) TopToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) TopToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) TopToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) LeftToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) LeftToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) LeftToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) RightToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) RightToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) RightToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("# $($TempControl) BottomToolStripPanel Controls")
      [Void]$StringBuilder.AppendLine("# ************************************************")
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) BottomToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) BottomToolStripPanel Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    { $PSItem -in @("ContextMenuStrip", "MenuStrip", "ToolStrip") }
    {
      [Void]$StringBuilder.AppendLine("`$$($TempName)$($Control.Name)Item = New-MenuItem -Menu $($TempControl) -Text `"$($MyScriptName)`" -Name `"$($MyScriptName)`" -Tag `"$($MyScriptName)`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.Append((Build-MyScriptEvent -NoAdd -MyScriptName $MyScriptName -MyControlName $MyControlName -Control ([System.Windows.Forms.ToolStripItem]) -ControlEvent (([System.Windows.Forms.ToolStripItem]).GetEvent("Click"))).Replace("$($TempName)ToolStrip", "$($TempName)$($Control.Name)"))
      If ($MyControlName -eq "Top")
      {
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"&Bug`" -Name `"Bug`" -Tag `"Bug`" -DisplayStyle `"ImageAndText`" -ImageKey `"BugIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"&Help`" -Name `"Help`" -Tag `"Help`" -DisplayStyle `"ImageAndText`" -ImageKey `"HelpIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu $($TempControl) -Text `"E&xit`" -Name `"Exit`" -Tag `"Exit`" -DisplayStyle `"ImageAndText`" -ImageKey `"ExitIcon`" -PassThru).add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
        [Void]$StringBuilder.AppendLine("")
        [Void]$StringBuilder.AppendLine("# Right Dropdown")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu = New-MenuItem -Menu $($TempControl) -Text `"DropDown Menu`" -Name `"DropMenu`" -Tag `"DropMenu`" -DisplayStyle `"ImageAndText`" -TextImageRelation `"TextBeforeImage`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu.DropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::BelowRight")
        [Void]$StringBuilder.AppendLine("#`$DropDownMenu.DropDown.RightToLeft = [System.Windows.Forms.RightToLeft]::No")
        [Void]$StringBuilder.AppendLine("")
        [Void]$StringBuilder.AppendLine("# Sample Dialogs")
        [Void]$StringBuilder.Append((Build-MyScriptEvent -NoAdd -MyScriptName $MyScriptName -MyControlName "MySampleDialogs" -Control ([System.Windows.Forms.ToolStripItem]) -ControlEvent (([System.Windows.Forms.ToolStripItem]).GetEvent("Click"))).Replace("$($MyScriptName)MySampleDialogsToolStrip", "$($MyScriptName)MySampleDialogs$($Control.Name)"))
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Status Dialog - 01`" -Name `"Status01`" -Tag `"Status01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Status Dialog - 02`" -Name `"Status02`" -Tag `"Status02`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"User Alert Dialog - 01`" -Name `"UserAlert01`" -Tag `"UserAlert01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"User Response Dialog - 01`" -Name `"UserResponse01`" -Tag `"UserResponse01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"User Text Dialog - 01`" -Name `"UserText01`" -Tag `"UserText01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"User Text Dialog - 02`" -Name `"UserText02`" -Tag `"UserText01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Multi Value Dialog - 01`" -Name `"MultiValue01`" -Tag `"MultiValue01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Radio Choice Dialog - 01`" -Name `"RadioChoice01`" -Tag `"RadioChoice01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"ListView Choice Dialog - 01`" -Name `"ListViewChoice01`" -Tag `"ListViewChoice01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"ListView Choice Dialog - 02`" -Name `"ListViewChoice02`" -Tag `"ListViewChoice02`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Combo Choice Dialog - 01`" -Name `"ComboChoice01`" -Tag `"ComboChoice01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
        [Void]$StringBuilder.AppendLine("(New-MenuItem -Menu `$$($TempName)$($Control.Name)Item -Text `"Combo Filter Dialog - 01`" -Name `"ComboFilter01`" -Tag `"ComboFilter01`" -DisplayStyle `"ImageAndText`" -ImageKey `"$($MyScriptName)FormIcon`" -PassThru).add_Click({ Start-$($MyScriptName)MySampleDialogs$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem })")
      }
      Else
      {
        [Void]$StringBuilder.AppendLine("`$$($TempName)$($Control.Name)Item.add_Click({Start-$($TempName)$($Control.Name)ItemClick -Sender `$This -EventArg `$PSItem})")
      }
      Break
    }
    "StatusStrip"
    {
      [Void]$StringBuilder.AppendLine("New-MenuLabel -Menu $($TempControl) -Text `"Status`" -Name `"Status`" -Tag `"Status`"")
    }
    { $PSItem -in @("ToolStripPanel", "TabPage") }
    {
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
    { $PSItem -in @("GroupBox", "Panel") }
    {
      [Void]$StringBuilder.AppendLine("#region ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#$($TempControl).ClientSize = [System.Drawing.Size]::New((`$($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Right + [MyConfig]::FormSpacer), (`$($($TempControl).Controls[$($TempControl).Controls.Count - 1]).Bottom + [MyConfig]::FormSpacer))")
      [Void]$StringBuilder.AppendLine("")
      [Void]$StringBuilder.AppendLine("#endregion ******** $($TempControl) Controls ********")
      [Void]$StringBuilder.AppendLine("")
      Break
    }
  }
  #endregion ******* Form / Code Footer ********
  
  #endregion ******** My Code ********
  
  $StringBuilder.ToString()
  $StringBuilder = $Null
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Function Build-MyScript"
}
#endregion function Build-MyScript

#endregion ================ Generate Script Code - MyFCG Custom Code ================

# Add Default Events for Controls
#[Void][MyConfig]::DefaultEvents.Add("ControlName", @("EventName", "EventName"))
[Void][MyConfig]::DefaultEvents.Add("Button", @("Click"))
[Void][MyConfig]::DefaultEvents.Add("CheckBox", @("CheckedChanged"))
[Void][MyConfig]::DefaultEvents.Add("CheckedListBox", @("ItemCheck", "SelectedIndexChanged"))
[Void][MyConfig]::DefaultEvents.Add("ComboBox", @("SelectedIndexChanged"))
[Void][MyConfig]::DefaultEvents.Add("ContextMenuStrip", @("Opening"))
[Void][MyConfig]::DefaultEvents.Add("Form", @("Closing", "KeyDown", "Load", "Move", "Resize", "Shown"))
[Void][MyConfig]::DefaultEvents.Add("ListBox", @("MouseDown", "SelectedIndexChanged"))
[Void][MyConfig]::DefaultEvents.Add("ListView", @("ColumnClick", "DrawColumnHeader", "DrawItem", "DrawSubItem"))
[Void][MyConfig]::DefaultEvents.Add("NotifyIcon", @("MouseClick"))
[Void][MyConfig]::DefaultEvents.Add("RadioButton", @("CheckedChanged"))
[Void][MyConfig]::DefaultEvents.Add("TabControl", @("DrawItem"))
[Void][MyConfig]::DefaultEvents.Add("TextBox", @("GotFocus", "KeyDown", "KeyPress", "KeyUp", "LostFocus"))
[Void][MyConfig]::DefaultEvents.Add("Timer", @("Tick"))
[Void][MyConfig]::DefaultEvents.Add("TreeView", @("AfterSelect", "BeforeExpand"))
[Void][MyConfig]::DefaultEvents.Add("WebBrowser", @("NewWindow", "StatusTextChanged"))

#region >>>>>>>>>>>>>>>> Begin **** MyFCG **** Begin <<<<<<<<<<<<<<<<

$MyFCGFormComponents = [System.ComponentModel.Container]::New()

# ************************************************
# MyFCG ImageList
# ************************************************
#region $MyFCGImageList = [System.Windows.Forms.ImageList]::New()
$MyFCGImageList = [System.Windows.Forms.ImageList]::New($MyFCGFormComponents)
$MyFCGImageList.ColorDepth = [System.Windows.Forms.ColorDepth]::Depth32Bit
$MyFCGImageList.ImageSize = [System.Drawing.Size]::New(16, 16)
#endregion $MyFCGImageList = [System.Windows.Forms.ImageList]::New()


$MyFCGImageList.Images.Add("MyFCGFormIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($MyFCGFormIcon))))
$MyFCGImageList.Images.Add("ExitIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExitIcon))))
$MyFCGImageList.Images.Add("HelpIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($HelpIcon))))
$MyFCGImageList.Images.Add("GenerateIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($GenerateIcon))))
$MyFCGImageList.Images.Add("ControlIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ControlIcon))))
$MyFCGImageList.Images.Add("EventIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($EventIcon))))
$MyFCGImageList.Images.Add("LibraryIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($LibraryIcon))))
$MyFCGImageList.Images.Add("ExtractIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ExtractIcon))))
$MyFCGImageList.Images.Add("ImageIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($ImageIcon))))
$MyFCGImageList.Images.Add("DataIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($DataIcon))))
$MyFCGImageList.Images.Add("DialogIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($DialogIcon))))
$MyFCGImageList.Images.Add("SourceIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($SourceIcon))))
$MyFCGImageList.Images.Add("CheckAllIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($CheckAllIcon))))
$MyFCGImageList.Images.Add("UnCheckAllIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($UnCheckAllIcon))))
$MyFCGImageList.Images.Add("FavoritesIcon", [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($FavoritesIcon))))

#region $MyFCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
$MyFCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()
#endregion $MyFCGOpenFileDialog = [System.Windows.Forms.OpenFileDialog]::New()


# ************************************************
# MyFCG Form
# ************************************************
#region $MyFCGForm = [System.Windows.Forms.Form]::New()
$MyFCGForm = [System.Windows.Forms.Form]::New()
$MyFCGForm.BackColor = [MyConfig]::Colors.Back
$MyFCGForm.Font = [MyConfig]::Font.Regular
$MyFCGForm.ForeColor = [MyConfig]::Colors.Fore
$MyFCGForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Sizable
$MyFCGForm.Icon = [System.Drawing.Icon]::New([System.IO.MemoryStream]::New([System.Convert]::FromBase64String($MyFCGFormIcon)))
$MyFCGForm.KeyPreview = $True
$MyFCGForm.MinimumSize = [System.Drawing.Size]::New(([MyConfig]::Font.Width * [MyConfig]::FormMinWidth), ([MyConfig]::Font.Height * [MyConfig]::FormMinHeight))
$MyFCGForm.Name = "MyFCGForm"
$MyFCGForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen
$MyFCGForm.TabStop = $True
$MyFCGForm.Text = "$([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
#endregion $MyFCGForm = [System.Windows.Forms.Form]::New()

#region ******** Function Start-MyFCGFormClosing ********
function Start-MyFCGFormClosing
{
  <#
    .SYNOPSIS
      Closing Event for the MyFCG Form Control
    .DESCRIPTION
      Closing Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Closing Event
    .PARAMETER EventArg
       The Event Arguments for the Form Closing Event
    .EXAMPLE
       Start-MyFCGFormClosing -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Closing Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  if ([MyConfig]::Production)
  {
    # Show Console Window
    $Script:VerbosePreference = "Continue"
    $Script:DebugPreference = "Continue"
    
    [Void][Console.Window]::Show()
    [System.Console]::Title = "Closing: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $MyFCGForm.Tag = $True
  }
  
  Write-Verbose -Message "Exit Closing Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormClosing ********
$MyFCGForm.add_Closing({ Start-MyFCGFormClosing -Sender $This -EventArg $PSItem })

#region ******** Function Start-MyFCGFormKeyDown ********
function Start-MyFCGFormKeyDown
{
  <#
    .SYNOPSIS
      KeyDown Event for the MyFCG Form Control
    .DESCRIPTION
      KeyDown Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the KeyDown Event
    .PARAMETER EventArg
       The Event Arguments for the Form KeyDown Event
    .EXAMPLE
       Start-MyFCGFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  if ($EventArg.Control -and $EventArg.Alt -and $EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F10)
  {
    if ($MyFCGForm.Tag)
    {
      # Hide Console Window
      $Script:VerbosePreference = "SilentlyContinue"
      $Script:DebugPreference = "SilentlyContinue"
      [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
      [Void][Console.Window]::Hide()
      $MyFCGForm.Tag = $False
    }
    else
    {
      # Show Console Window
      $Script:VerbosePreference = "Continue"
      $Script:DebugPreference = "Continue"
      [Void][Console.Window]::Show()
      [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
      $MyFCGForm.Tag = $True
    }
    $MyFCGForm.Activate()
    $MyFCGForm.Select()
  }
  elseif ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F1)
  {
    $MyFCGToolTip.Active = (-not $MyFCGToolTip.Active)
  }
  
  Write-Verbose -Message "Exit KeyDown Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormKeyDown ********
$MyFCGForm.add_KeyDown({ Start-MyFCGFormKeyDown -Sender $This -EventArg $PSItem })

#region ******** Function Start-MyFCGFormLoad ********
function Start-MyFCGFormLoad
{
  <#
    .SYNOPSIS
      Load Event for the MyFCG Form Control
    .DESCRIPTION
      Load Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Load Event
    .PARAMETER EventArg
       The Event Arguments for the Form Load Event
    .EXAMPLE
       Start-MyFCGFormLoad -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Load Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea
  $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)
  $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)
  
  if ([MyConfig]::Production)
  {
    # Enable $MyFCGTimer
    $MyFCGTimer.Enabled = ([MyConfig]::AutoExitMax -gt 0)
    
    # Hide Console Window
    $Script:VerbosePreference = "SilentlyContinue"
    $Script:DebugPreference = "SilentlyContinue"
    
    [System.Console]::Title = "RUNNING: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    [Void][Console.Window]::Hide()
    $MyFCGForm.Tag = $False
  }
  else
  {
    [Void][Console.Window]::Show()
    [System.Console]::Title = "DEBUG: $([MyConfig]::ScriptName) - $([MyConfig]::ScriptVersion)"
    $MyFCGForm.Tag = $True
  }
  
  Write-Verbose -Message "Exit Load Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormLoad ********
$MyFCGForm.add_Load({ Start-MyFCGFormLoad -Sender $This -EventArg $PSItem })

#region ******** Function Start-MyFCGFormMove ********
function Start-MyFCGFormMove
{
  <#
    .SYNOPSIS
      Move Event for the MyFCG Form Control
    .DESCRIPTION
      Move Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Move Event
    .PARAMETER EventArg
       The Event Arguments for the Form Move Event
    .EXAMPLE
       Start-MyFCGFormMove -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Move Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  Write-Verbose -Message "Exit Move Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormMove ********
$MyFCGForm.add_Move({ Start-MyFCGFormMove -Sender $This -EventArg $PSItem })

#region ******** Function Start-MyFCGFormResize ********
function Start-MyFCGFormResize
{
  <#
    .SYNOPSIS
      Resize Event for the MyFCG Form Control
    .DESCRIPTION
      Resize Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Resize Event
    .PARAMETER EventArg
       The Event Arguments for the Form Resize Event
    .EXAMPLE
       Start-MyFCGFormResize -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Resize Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  Write-Verbose -Message "Exit Resize Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormResize ********
$MyFCGForm.add_Resize({ Start-MyFCGFormResize -Sender $This -EventArg $PSItem })

#region ******** Function Start-MyFCGFormShown ********
function Start-MyFCGFormShown
{
  <#
    .SYNOPSIS
      Shown Event for the MyFCG Form Control
    .DESCRIPTION
      Shown Event for the MyFCG Form Control
    .PARAMETER Sender
       The Form Control that fired the Shown Event
    .PARAMETER EventArg
       The Event Arguments for the Form Shown Event
    .EXAMPLE
       Start-MyFCGFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Form]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Shown Event for `$MyFCGForm"
  
  [MyConfig]::AutoExit = 0
  
  $Sender.Refresh()
  
  $MyFCGScriptNameTextBox.Text = [MyConfig]::DefScriptName
  $MyFCGScriptNameTextBox.Select()
  
  $MyFCGControlListListBox.Items.AddRange(@(Get-MyFormControls))
  $MyFCGBtmStatusStrip.Items["Status"].Text = "Found $($MyFCGControlListListBox.Items.Count) .Net Form Controls..."
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit Shown Event for `$MyFCGForm"
}
#endregion ******** Function Start-MyFCGFormShown ********
$MyFCGForm.add_Shown({ Start-MyFCGFormShown -Sender $This -EventArg $PSItem })


#region ******** Controls for MyFCG Form ********

#region $MyFCGTimer = [System.Windows.Forms.Timer]::New()
$MyFCGTimer = [System.Windows.Forms.Timer]::New($MyFCGFormComponents)
$MyFCGTimer.Interval = [MyConfig]::AutoExitTic
#endregion $MyFCGTimer = [System.Windows.Forms.Timer]::New()

#region ******** Function Start-MyFCGTimerTick ********
function Start-MyFCGTimerTick
{
  <#
    .SYNOPSIS
      Tick Event for the MyFCG Timer Control
    .DESCRIPTION
      Tick Event for the MyFCG Timer Control
    .PARAMETER Sender
       The Timer Control that fired the Tick Event
    .PARAMETER EventArg
       The Event Arguments for the Timer Tick Event
    .EXAMPLE
       Start-MyFCGTimerTick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.Timer]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Tick Event for `$MyFCGTimer"
  
  [MyConfig]::AutoExit += 1
  Write-Verbose -Message "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  if ([MyConfig]::AutoExit -ge [MyConfig]::AutoExitMax)
  {
    $MyFCGForm.Close()
  }
  ElseIf (([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) -le 5)
  {
    $MyFCGBtmStatusStrip.Items["Status"].Text = "Auto Exit in $([MyConfig]::AutoExitMax - [MyConfig]::AutoExit) Minutes"
  }
  
  Write-Verbose -Message "Exit Tick Event for `$MyFCGTimer"
}
#endregion ******** Function Start-MyFCGTimerTick ********
$MyFCGTimer.add_Tick({ Start-MyFCGTimerTick -Sender $This -EventArg $PSItem })

# ************************************************
# MyFCGMain SplitContainer
# ************************************************
#region $MyFCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$MyFCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()
$MyFCGForm.Controls.Add($MyFCGMainSplitContainer)
#$MyFCGMainSplitContainer.ActiveControl = [System.Windows.Forms.Control]::New()
$MyFCGMainSplitContainer.BorderStyle = [System.Windows.Forms.BorderStyle]::None
$MyFCGMainSplitContainer.Dock = [System.Windows.Forms.DockStyle]::Fill
$MyFCGMainSplitContainer.FixedPanel = [System.Windows.Forms.FixedPanel]::Panel1
$MyFCGMainSplitContainer.Name = "MyFCGMainSplitContainer"
$MyFCGMainSplitContainer.Panel1MinSize = ([MyConfig]::Font.Width * [MyConfig]::InfoMinWidth)
$MyFCGMainSplitContainer.SplitterDistance = $MyFCGMainSplitContainer.Panel1MinSize
$MyFCGMainSplitContainer.SplitterIncrement = [MyConfig]::FormSpacer
$MyFCGMainSplitContainer.SplitterWidth = ([MyConfig]::FormSpacer * 2)
$MyFCGMainSplitContainer.TabStop = $False
$MyFCGMainSplitContainer.Text = "MyFCGMainSplitContainer"
#endregion $MyFCGMainSplitContainer = [System.Windows.Forms.SplitContainer]::New()

#region ******** Function Start-MyFCGMainSplitContainerSplitterMoved ********
function Start-MyFCGMainSplitContainerSplitterMoved
{
  <#
    .SYNOPSIS
      SplitterMoved Event for the MyFCGMain SplitContainer Control
    .DESCRIPTION
      SplitterMoved Event for the MyFCGMain SplitContainer Control
    .PARAMETER Sender
       The SplitContainer Control that fired the SplitterMoved Event
    .PARAMETER EventArg
       The Event Arguments for the SplitContainer SplitterMoved Event
    .EXAMPLE
       Start-MyFCGMainSplitContainerSplitterMoved -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By MyUserName
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.SplitContainer]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter SplitterMoved Event for `$MyFCGMainSplitContainer"
  
  [MyConfig]::AutoExit = 0
  
  Write-Verbose -Message "Exit SplitterMoved Event for `$MyFCGMainSplitContainer"
}
#endregion ******** Function Start-MyFCGMainSplitContainerSplitterMoved ********
$MyFCGMainSplitContainer.add_SplitterMoved({ Start-MyFCGMainSplitContainerSplitterMoved -Sender $This -EventArg $PSItem })

# ************************************************
# $MyFCGMainSplitContainer Panel1 Controls
# ************************************************
#region ******** $MyFCGMainSplitContainer Panel1 Controls ********

$MyFCGMainSplitContainer.Panel1.Padding = [System.Windows.Forms.Padding]::New([MyConfig]::FormSpacer, 0, 0, 0)

# ************************************************
# MyFCGControl GroupBox
# ************************************************
#region $MyFCGControlGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGControlGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGMainSplitContainer.Panel1.Controls.Add($MyFCGControlGroupBox)
$MyFCGControlGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$MyFCGControlGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$MyFCGControlGroupBox.Name = "MyFCGControlGroupBox"
$MyFCGControlGroupBox.TabStop = $False
$MyFCGControlGroupBox.Text = "Control Information"
#endregion $MyFCGControlGroupBox = [System.Windows.Forms.GroupBox]::New()

#region ******** $MyFCGControlGroupBox Controls ********

#region $MyFCGControlNameLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlNameLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlNameLabel)
$MyFCGControlNameLabel.BackColor = [MyConfig]::Colors.TitleBack
$MyFCGControlNameLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$MyFCGControlNameLabel.Dock = [System.Windows.Forms.DockStyle]::Top
$MyFCGControlNameLabel.Font = [MyConfig]::Font.Bold
$MyFCGControlNameLabel.ForeColor = [MyConfig]::Colors.TitleFore
$MyFCGControlNameLabel.Name = "MyFCGControlNameLabel"
$MyFCGControlNameLabel.TabStop = $False
$MyFCGControlNameLabel.Text = "Control Name"
$MyFCGControlNameLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion $MyFCGControlNameLabel = [System.Windows.Forms.Label]::New()

$MyFCGControlNameLabel.Height = $MyFCGControlNameLabel.PreferredSize.Height

#region $MyFCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlNameTextBox)
$MyFCGControlNameTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
$MyFCGControlNameTextBox.BackColor = [MyConfig]::Colors.TextBack
$MyFCGControlNameTextBox.ForeColor = [MyConfig]::Colors.TextFore
$MyFCGControlNameTextBox.Location = [System.Drawing.Point]::New($MyFCGControlNameLabel.Left, ($MyFCGControlNameLabel.Bottom + [MyConfig]::FormSpacer))
$MyFCGControlNameTextBox.Name = "MyFCGControlNameTextBox"
$MyFCGControlNameTextBox.TabIndex = 1
$MyFCGControlNameTextBox.TabStop = $True
$MyFCGControlNameTextBox.Text = ""
$MyFCGControlNameTextBox.Width = $MyFCGControlNameLabel.Width
#endregion $MyFCGControlNameTextBox = [System.Windows.Forms.TextBox]::New()

#region $MyFCGControlListLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlListLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlListLabel)
$MyFCGControlListLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
$MyFCGControlListLabel.BackColor = [MyConfig]::Colors.TitleBack
$MyFCGControlListLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$MyFCGControlListLabel.Font = [MyConfig]::Font.Bold
$MyFCGControlListLabel.ForeColor = [MyConfig]::Colors.TitleFore
$MyFCGControlListLabel.Location = [System.Drawing.Point]::New($MyFCGControlNameLabel.Left, ($MyFCGControlNameTextBox.Bottom + [MyConfig]::FormSpacer))
$MyFCGControlListLabel.Name = "MyFCGControlListLabel"
$MyFCGControlListLabel.Size = $MyFCGControlNameLabel.Size
$MyFCGControlListLabel.TabStop = $False
$MyFCGControlListLabel.Text = "Control List"
$MyFCGControlListLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion $MyFCGControlListLabel = [System.Windows.Forms.Label]::New()

#region $MyFCGControlEventCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
$MyFCGControlEventCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlEventCheckedListBox)
$MyFCGControlEventCheckedListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Bottom, Left, Right")
$MyFCGControlEventCheckedListBox.BackColor = [MyConfig]::Colors.TextBack
$MyFCGControlEventCheckedListBox.CheckOnClick = $True
$MyFCGControlEventCheckedListBox.DisplayMember = "Name"
$MyFCGControlEventCheckedListBox.ForeColor = [MyConfig]::Colors.TextFore
$MyFCGControlEventCheckedListBox.Height = ([MyConfig]::Font.Height * [MyConfig]::EventHeight)
$MyFCGControlEventCheckedListBox.IntegralHeight = $False
$MyFCGControlEventCheckedListBox.ItemHeight = [MyConfig]::Font.Height
$MyFCGControlEventCheckedListBox.Location = [System.Drawing.Point]::New($MyFCGControlNameLabel.Left, ($MyFCGControlGroupBox.ClientSize.Height - (([MyConfig]::FormSpacer * 2) + $MyFCGControlEventCheckedListBox.Height)))
$MyFCGControlEventCheckedListBox.Name = "MyFCGControlEventCheckedListBox"
$MyFCGControlEventCheckedListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One
$MyFCGControlEventCheckedListBox.Sorted = $True
$MyFCGControlEventCheckedListBox.TabIndex = 3
$MyFCGControlEventCheckedListBox.TabStop = $True
$MyFCGControlEventCheckedListBox.Text = "MyFCGControlEventListBox"
$MyFCGControlEventCheckedListBox.ValueMember = "Name"
$MyFCGControlEventCheckedListBox.Width = $MyFCGControlNameLabel.Width
#endregion $MyFCGControlEventCheckedListBox = [System.Windows.Forms.CheckedListBox]::New()

#region ******** Function Start-MyFCGControlEventCheckedListBoxItemCheck ********
function Start-MyFCGControlEventCheckedListBoxItemCheck
{
  <#
    .SYNOPSIS
      ItemCheck Event for the MyFCGControlEvent CheckedListBox Control
    .DESCRIPTION
      ItemCheck Event for the MyFCGControlEvent CheckedListBox Control
    .PARAMETER Sender
       The CheckedListBox Control that fired the ItemCheck Event
    .PARAMETER EventArg
       The Event Arguments for the CheckedListBox ItemCheck Event
    .EXAMPLE
       Start-MyFCGControlEventCheckedListBoxItemCheck -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter ItemCheck Event for `$MyFCGControlEventCheckedListBox"
  
  [MyConfig]::AutoExit = 0
  
  $Contains = $MyFCGControlEventCheckedListBox.CheckedItems.Contains($Sender.SelectedItem)
  $Count = $MyFCGControlEventCheckedListBox.CheckedItems.Count
  
  $MyFCGTopMenuStrip.Items["Event"].Enabled = ((-not $Contains -and $Count -eq 0) -or (-not ($Contains -and $Count -eq 1)) -or ($Count -gt 1))
  
  Write-Verbose -Message "Exit ItemCheck Event for `$MyFCGControlEventCheckedListBox"
}
#endregion ******** Function Start-MyFCGControlEventCheckedListBoxItemCheck ********
$MyFCGControlEventCheckedListBox.add_ItemCheck({ Start-MyFCGControlEventCheckedListBoxItemCheck -Sender $This -EventArg $PSItem })

#region $MyFCGControlEventLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlEventLabel = [System.Windows.Forms.Label]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlEventLabel)
$MyFCGControlEventLabel.Anchor = [System.Windows.Forms.AnchorStyles]("Bottom, Left, Right")
$MyFCGControlEventLabel.BackColor = [MyConfig]::Colors.TitleBack
$MyFCGControlEventLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$MyFCGControlEventLabel.Font = [MyConfig]::Font.Bold
$MyFCGControlEventLabel.ForeColor = [MyConfig]::Colors.TitleFore
$MyFCGControlEventLabel.Location = [System.Drawing.Point]::New($MyFCGControlNameLabel.Left, ($MyFCGControlEventCheckedListBox.Top - ($MyFCGControlNameLabel.Height + [MyConfig]::FormSpacer)))
$MyFCGControlEventLabel.Name = "MyFCGControlEventLabel"
$MyFCGControlEventLabel.Size = $MyFCGControlNameLabel.Size
$MyFCGControlEventLabel.TabStop = $False
$MyFCGControlEventLabel.Text = "Control Events"
$MyFCGControlEventLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion $MyFCGControlEventLabel = [System.Windows.Forms.Label]::New()

#region $MyFCGControlListListBox = [System.Windows.Forms.ListBox]::New()
$MyFCGControlListListBox = [System.Windows.Forms.ListBox]::New()
$MyFCGControlGroupBox.Controls.Add($MyFCGControlListListBox)
$MyFCGControlListListBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Bottom, Left, Right")
$MyFCGControlListListBox.BackColor = [MyConfig]::Colors.TextBack
$MyFCGControlListListBox.DisplayMember = "Name"
$MyFCGControlListListBox.ForeColor = [MyConfig]::Colors.TextFore
$MyFCGControlListListBox.Height = ($MyFCGControlEventLabel.Top - [MyConfig]::FormSpacer) - ($MyFCGControlListLabel.Bottom + [MyConfig]::FormSpacer)
$MyFCGControlListListBox.IntegralHeight = $False
$MyFCGControlListListBox.Location = [System.Drawing.Point]::New($MyFCGControlNameLabel.Left, ($MyFCGControlListLabel.Bottom + [MyConfig]::FormSpacer))
$MyFCGControlListListBox.Name = "MyFCGControlListListBox"
$MyFCGControlListListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One
$MyFCGControlListListBox.Sorted = $True
$MyFCGControlListListBox.TabIndex = 2
$MyFCGControlListListBox.TabStop = $True
$MyFCGControlListListBox.Text = "MyFCGControlListListBox"
$MyFCGControlListListBox.ValueMember = "Name"
$MyFCGControlListListBox.Width = $MyFCGControlNameLabel.Width
#endregion $MyFCGControlListListBox = [System.Windows.Forms.ListBox]::New()

#region ******** Function Start-MyFCGControlListListBoxSelectedIndexChanged ********
function Start-MyFCGControlListListBoxSelectedIndexChanged
{
  <#
    .SYNOPSIS
      SelectedIndexChanged Event for the MyFCGControlList ListBox Control
    .DESCRIPTION
      SelectedIndexChanged Event for the MyFCGControlList ListBox Control
    .PARAMETER Sender
       The ListBox Control that fired the SelectedIndexChanged Event
    .PARAMETER EventArg
       The Event Arguments for the ListBox SelectedIndexChanged Event
    .EXAMPLE
       Start-MyFCGControlListListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ListBox]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter SelectedIndexChanged Event for `$MyFCGControlListListBox"
  
  [MyConfig]::AutoExit = 0
  
  $MyFCGControlEventCheckedListBox.Items.Clear()
  if ($MyFCGControlListListBox.SelectedIndex -gt -1)
  {
    $MyFCGControlEventCheckedListBox.Items.AddRange(@(Get-MyFormControlEvents -Control ($MyFCGControlListListBox.SelectedItem)))
    $MyFCGBtmStatusStrip.Items["Status"].Text = "Found $($MyFCGControlEventCheckedListBox.Items.Count) $(($MyFCGControlListListBox.SelectedItem).Name) Control Events..."
  }
  
  if ([MyConfig]::DefaultEvents.ContainsKey("$(($MyFCGControlListListBox.SelectedItem).Name)"))
  {
    ($MyFCGControlEventCheckedListBox.Items | Where-Object -FilterScript { $PSItem.Name -in @([MyConfig]::DefaultEvents["$(($MyFCGControlListListBox.SelectedItem).Name)"]) }) | ForEach-Object -Process { $MyFCGControlEventCheckedListBox.SetItemChecked($MyFCGControlEventCheckedListBox.Items.IndexOf($PSItem), $True) }
  }
  
  $MyFCGTopMenuStrip.Items["Generate"].Enabled = ($MyFCGControlListListBox.SelectedIndex -gt -1)
  
  If ($Sender.SelectedItem.Name -eq "Form")
  {
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateControl"].Enabled = $False
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateControl"].Visible = $False
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GeneratePanel"].Enabled = $True
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GeneratePanel"].Visible = $True
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateSplit"].Enabled = $True
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateSplit"].Visible = $True
  }
  Else
  {
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateControl"].Enabled = $True
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateControl"].Visible = $True
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GeneratePanel"].Enabled = $False
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GeneratePanel"].Visible = $False
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateSplit"].Enabled = $False
    $MyFCGTopMenuStrip.Items["Generate"].DropDownItems["GenerateSplit"].Visible = $False
  }
  $MyFCGTopMenuStrip.Items["Control"].Enabled = ($MyFCGControlListListBox.SelectedIndex -gt -1)
  $MyFCGTopMenuStrip.Items["Event"].Enabled = ($MyFCGControlEventCheckedListBox.CheckedItems.Count -gt 0)
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  Write-Verbose -Message "Exit SelectedIndexChanged Event for `$MyFCGControlListListBox"
}
#endregion ******** Function Start-MyFCGControlListListBoxSelectedIndexChanged ********
$MyFCGControlListListBox.add_SelectedIndexChanged({ Start-MyFCGControlListListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem })

# ************************************************
# MyFCGControlEvent ContextMenuStrip
# ************************************************
#region $MyFCGControlEventContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
$MyFCGControlEventContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()
#$MyFCGControlEventCheckedListBox.Controls.Add($MyFCGControlEventContextMenuStrip)
$MyFCGControlEventCheckedListBox.ContextMenuStrip = $MyFCGControlEventContextMenuStrip
$MyFCGControlEventContextMenuStrip.BackColor = [MyConfig]::Colors.Back
$MyFCGControlEventContextMenuStrip.Font = [MyConfig]::Font.Regular
$MyFCGControlEventContextMenuStrip.ForeColor = [MyConfig]::Colors.Fore
$MyFCGControlEventContextMenuStrip.ImageList = $MyFCGImageList
$MyFCGControlEventContextMenuStrip.Name = "MyFCGControlEventContextMenuStrip"
#endregion $MyFCGControlEventContextMenuStrip = [System.Windows.Forms.ContextMenuStrip]::New()

#region ******** Function Start-MyFCGControlEventContextMenuStripOpening ********
function Start-MyFCGControlEventContextMenuStripOpening
{
  <#
    .SYNOPSIS
      Opening Event for the MyFCGControlEvent ContextMenuStrip Control
    .DESCRIPTION
      Opening Event for the MyFCGControlEvent ContextMenuStrip Control
    .PARAMETER Sender
       The ContextMenuStrip Control that fired the Opening Event
    .PARAMETER EventArg
       The Event Arguments for the ContextMenuStrip Opening Event
    .EXAMPLE
       Start-MyFCGControlEventContextMenuStripOpening -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ContextMenuStrip]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Opening Event for `$MyFCGControlEventContextMenuStrip"

  [MyConfig]::AutoExit = 0
  If ($MyFCGControlEventCheckedListBox.Items.Count)
  {
    $MyFCGControlEventContextMenuStrip.Items["CheckAll"].Enabled = ($MyFCGControlEventCheckedListBox.CheckedIndices.Count -ne $MyFCGControlEventCheckedListBox.Items.Count)
    $MyFCGControlEventContextMenuStrip.Items["UnCheckAll"].Enabled = ($MyFCGControlEventCheckedListBox.CheckedIndices.Count -gt 0)
    $MyFCGControlEventContextMenuStrip.Items["Favorites"].Enabled = ([MyConfig]::DefaultEvents.ContainsKey(($MyFCGControlListListBox.SelectedItem.Name)))
  }
  else
  {
    $EventArg.Cancel = $True
  }
  
  #$MyFCGBtmStatusStrip.Items["Status"].Text = "$($Sender.Name)"

  Write-Verbose -Message "Exit Opening Event for `$MyFCGControlEventContextMenuStrip"
}
#endregion ******** Function Start-MyFCGControlEventContextMenuStripOpening ********
$MyFCGControlEventContextMenuStrip.add_Opening({Start-MyFCGControlEventContextMenuStripOpening -Sender $This -EventArg $PSItem})

#region ******** Function Start-MyFCGControlEventContextMenuStripItemClick ********
function Start-MyFCGControlEventContextMenuStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the MyFCGControlEvent ToolStripItem Control
    .DESCRIPTION
      Click Event for the MyFCGControlEvent ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-MyFCGControlEventContextMenuStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By kensw
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$MyFCGControlEventContextMenuStripItem"

  [MyConfig]::AutoExit = 0
  
  Switch ($Sender.Name)
  {
    "CheckAll"
    {
      $NumItems = $MyFCGControlEventCheckedListBox.Items.Count - 1
      For ($Index = 0; $Index -le $NumItems; $Index++)
      {
        $MyFCGControlEventCheckedListBox.SetItemCheckState($Index, [System.Windows.Forms.CheckState]::Checked)
      }
      $MyFCGBtmStatusStrip.Items["Status"].Text = "Checked All Events"
      Break
    }
    "UnCheckAll"
    {
      $NumItems = $MyFCGControlEventCheckedListBox.Items.Count - 1
      For ($Index = 0; $Index -le $NumItems; $Index++)
      {
        $MyFCGControlEventCheckedListBox.SetItemCheckState($Index, [System.Windows.Forms.CheckState]::Unchecked)
      }
      $MyFCGBtmStatusStrip.Items["Status"].Text = "Unchecked All Events"
      Break
    }
    "Favorites"
    {
      $FavList = @([MyConfig]::DefaultEvents[($MyFCGControlListListBox.SelectedItem.Name)])
      $NumItems = $MyFCGControlEventCheckedListBox.Items.Count - 1
      For ($Index = 0; $Index -le $NumItems; $Index++)
      {
        If ($MyFCGControlEventCheckedListBox.Items[$Index].Name -in $FavList)
        {
          $MyFCGControlEventCheckedListBox.SetItemCheckState($Index, [System.Windows.Forms.CheckState]::Checked)
        }
        Else
        {
          $MyFCGControlEventCheckedListBox.SetItemCheckState($Index, [System.Windows.Forms.CheckState]::Unchecked)
        }
      }
      $MyFCGBtmStatusStrip.Items["Status"].Text = "Checked All Favorite Events"
      Break
    }
  }
  
  Write-Verbose -Message "Exit Click Event for `$MyFCGControlEventContextMenuStripItem"
}
#endregion ******** Function Start-MyFCGControlEventContextMenuStripItemClick ********

(New-MenuItem -Menu $MyFCGControlEventContextMenuStrip -Text "Check All" -Name "CheckAll" -Tag "CheckAll" -DisplayStyle "ImageAndText" -ImageKey "CheckAllIcon" -PassThru).add_Click({Start-MyFCGControlEventContextMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $MyFCGControlEventContextMenuStrip -Text "UnCheck All" -Name "UnCheckAll" -Tag "UnCheckAll" -DisplayStyle "ImageAndText" -ImageKey "UnCheckAllIcon" -PassThru).add_Click({Start-MyFCGControlEventContextMenuStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $MyFCGControlEventContextMenuStrip -Text "Check Favorites" -Name "Favorites" -Tag "Favorites" -DisplayStyle "ImageAndText" -ImageKey "FavoritesIcon" -PassThru).add_Click({Start-MyFCGControlEventContextMenuStripItemClick -Sender $This -EventArg $PSItem})

# Right Dropdown
#$DropDownMenu = New-MenuItem -Menu $MyFCGControlEventContextMenuStrip -Text "DropDown Menu" -Name "DropMenu" -Tag "DropMenu" -DisplayStyle "ImageAndText" -TextImageRelation "TextBeforeImage" -ImageKey "MyFCGFormIcon" -PassThru
#$DropDownMenu.DropDownDirection = [System.Windows.Forms.ToolStripDropDownDirection]::BelowRight
#$DropDownMenu.DropDown.RightToLeft = [System.Windows.Forms.RightToLeft]::No


#endregion ******** $MyFCGControlGroupBox Controls ********


# ************************************************
# MyFCGScript GroupBox
# ************************************************
#region $MyFCGScriptGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGScriptGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGMainSplitContainer.Panel1.Controls.Add($MyFCGScriptGroupBox)
$MyFCGScriptGroupBox.Dock = [System.Windows.Forms.DockStyle]::Top
$MyFCGScriptGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$MyFCGScriptGroupBox.Name = "MyFCGScriptGroupBox"
$MyFCGScriptGroupBox.TabStop = $False
$MyFCGScriptGroupBox.Text = "Script Information"
#endregion $MyFCGScriptGroupBox = [System.Windows.Forms.GroupBox]::New()

#region ******** $MyFCGScriptGroupBox Controls ********

#region $MyFCGScriptNameLabel = [System.Windows.Forms.Label]::New()
$MyFCGScriptNameLabel = [System.Windows.Forms.Label]::New()
$MyFCGScriptGroupBox.Controls.Add($MyFCGScriptNameLabel)
$MyFCGScriptNameLabel.BackColor = [MyConfig]::Colors.TitleBack
$MyFCGScriptNameLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$MyFCGScriptNameLabel.Dock = [System.Windows.Forms.DockStyle]::Top
$MyFCGScriptNameLabel.Font = [MyConfig]::Font.Bold
$MyFCGScriptNameLabel.ForeColor = [MyConfig]::Colors.TitleFore
$MyFCGScriptNameLabel.Name = "MyFCGScriptNameLabel"
$MyFCGScriptNameLabel.TabStop = $False
$MyFCGScriptNameLabel.Text = "Script Name"
$MyFCGScriptNameLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion $MyFCGScriptNameLabel = [System.Windows.Forms.Label]::New()

$MyFCGScriptNameLabel.Height = $MyFCGScriptNameLabel.PreferredSize.Height

#region $MyFCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGScriptGroupBox.Controls.Add($MyFCGScriptNameTextBox)
$MyFCGScriptNameTextBox.Anchor = [System.Windows.Forms.AnchorStyles]("Top, Left, Right")
$MyFCGScriptNameTextBox.BackColor = [MyConfig]::Colors.TextBack
$MyFCGScriptNameTextBox.ForeColor = [MyConfig]::Colors.TextFore
$MyFCGScriptNameTextBox.Location = [System.Drawing.Point]::New($MyFCGScriptNameLabel.Left, ($MyFCGScriptNameLabel.Bottom + [MyConfig]::FormSpacer))
$MyFCGScriptNameTextBox.Name = "MyFCGScriptNameTextBox"
$MyFCGScriptNameTextBox.TabIndex = 0
$MyFCGScriptNameTextBox.TabStop = $True
$MyFCGScriptNameTextBox.Text = ""
$MyFCGScriptNameTextBox.Width = $MyFCGScriptNameLabel.Width
#endregion $MyFCGScriptNameTextBox = [System.Windows.Forms.TextBox]::New()

$MyFCGScriptGroupBox.ClientSize = [System.Drawing.Size]::New(($MyFCGScriptNameTextBox.Right + [MyConfig]::FormSpacer), ($MyFCGScriptNameTextBox.Bottom + [MyConfig]::FormSpacer))

#endregion ******** $MyFCGScriptGroupBox Controls ********


#endregion ******** $MyFCGMainSplitContainer Panel1 Controls ********

# ************************************************
# $MyFCGMainSplitContainer Panel2 Controls
# ************************************************
#region ******** $MyFCGMainSplitContainer Panel2 Controls ********

$MyFCGMainSplitContainer.Panel2.Padding = [System.Windows.Forms.Padding]::New(0, 0, [MyConfig]::FormSpacer, 0)

# ************************************************
# MyFCGCode GroupBox
# ************************************************
#region $MyFCGCodeGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGCodeGroupBox = [System.Windows.Forms.GroupBox]::New()
$MyFCGMainSplitContainer.Panel2.Controls.Add($MyFCGCodeGroupBox)
$MyFCGCodeGroupBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$MyFCGCodeGroupBox.ForeColor = [MyConfig]::Colors.GroupFore
$MyFCGCodeGroupBox.Name = "MyFCGCodeGroupBox"
$MyFCGCodeGroupBox.TabStop = $False
$MyFCGCodeGroupBox.Text = "My Generated Form Code"
#endregion $MyFCGCodeGroupBox = [System.Windows.Forms.GroupBox]::New()

#region ******** $MyFCGCodeGroupBox Controls ********

#region $MyFCGCodeTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGCodeTextBox = [System.Windows.Forms.TextBox]::New()
$MyFCGCodeGroupBox.Controls.Add($MyFCGCodeTextBox)
$MyFCGCodeTextBox.BackColor = [MyConfig]::Colors.TextBack
$MyFCGCodeTextBox.Dock = [System.Windows.Forms.DockStyle]::Fill
$MyFCGCodeTextBox.Font = [System.Drawing.Font]::New([MyConfig]::CodeFont, [MyConfig]::FontSize, [System.Drawing.FontStyle]::Regular)
$MyFCGCodeTextBox.ForeColor = [MyConfig]::Colors.TextFore
$MyFCGCodeTextBox.MaxLength = [System.Int32]::MaxValue
$MyFCGCodeTextBox.Multiline = $True
$MyFCGCodeTextBox.Name = "MyFCGCodeTextBox"
$MyFCGCodeTextBox.ReadOnly = $True
$MyFCGCodeTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
$MyFCGCodeTextBox.TabStop = $False
$MyFCGCodeTextBox.Text = ""
$MyFCGCodeTextBox.WordWrap = $False
#endregion $MyFCGCodeTextBox = [System.Windows.Forms.TextBox]::New()

#endregion ******** $MyFCGCodeGroupBox Controls ********

#endregion ******** $MyFCGMainSplitContainer Panel2 Controls ********


# ************************************************
# MyFCGTop MenuStrip
# ************************************************
#region $MyFCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$MyFCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()
$MyFCGForm.Controls.Add($MyFCGTopMenuStrip)
$MyFCGForm.MainMenuStrip = $MyFCGTopMenuStrip
$MyFCGTopMenuStrip.BackColor = [MyConfig]::Colors.Back
$MyFCGTopMenuStrip.Font = [MyConfig]::Font.Regular
$MyFCGTopMenuStrip.ForeColor = [MyConfig]::Colors.Fore
$MyFCGTopMenuStrip.ImageList = $MyFCGImageList
$MyFCGTopMenuStrip.Name = "MyFCGTopMenuStrip"
$MyFCGTopMenuStrip.TabIndex = 4
$MyFCGTopMenuStrip.TabStop = $False
$MyFCGTopMenuStrip.Text = "MyFCGTopMenuStrip"
#endregion $MyFCGTopMenuStrip = [System.Windows.Forms.MenuStrip]::New()

#region ******** Function Start-MyFCGTopToolStripItemClick ********
function Start-MyFCGTopToolStripItemClick
{
  <#
    .SYNOPSIS
      Click Event for the MyFCGTop ToolStripItem Control
    .DESCRIPTION
      Click Event for the MyFCGTop ToolStripItem Control
    .PARAMETER Sender
       The ToolStripItem Control that fired the Click Event
    .PARAMETER EventArg
       The Event Arguments for the ToolStripItem Click Event
    .EXAMPLE
       Start-MyFCGTopToolStripItemClick -Sender $Sender -EventArg $EventArg
    .NOTES
      Original Function By Ken Sweet
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [System.Windows.Forms.ToolStripItem]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$MyFCGTopToolStripItem"
  $MyFCGForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
  
  [MyConfig]::AutoExit = 0
  
  Switch ($Sender.Name)
  {
    "Dialog-Template"
    {
      #region GroupBox
      if ((-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)) -and (-not [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text)))
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Form Control Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script and/or Control Names", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion GroupBox
      Break
    }
    "Dialog-AdvTemplate"
    {
      #region GroupBox
      if ((-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)) -and (-not [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text)))
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptAdvDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Form Control Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script and/or Control Names", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion GroupBox
      Break
    }
    "Display-AdvStatus"
    {
      #region Display-TextBox
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptAdvStatusDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Display-TextBox
      Break
    }
    "Display-Status1"
    {
      #region Display-TextBox
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptStatusDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag) -Buttons 1
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Display-TextBox
      Break
    }
    "Display-Status2"
    {
      #region Display-TextBox
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptStatusDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag) -Buttons 2
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Display-TextBox
      Break
    }
    "UserAlertMsg"
    {
      #region UserAlertMessage
      If ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      Else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptUserAlertDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion UserAlertMessage
    }
    "Get-UserResponse"
    {
      #region Get-UserResponse
      If ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      Else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptUserResponseDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-UserResponse
    }
    "Get-TextBoxInput"
    {
      #region Get-UserInput
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptUserInputDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-UserInput
      Break
    }
    "Get-OrderedList"
    {
      #region Get-UserInput
      If ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      Else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptOrderedListDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-UserInput
      Break
    }
    "Get-RadioButtonChoice"
    {
      #region Get-UserChoice
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptChoiceDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-UserChoice
    }
    "Get-ComboBoxChoice"
    {
      #region Get-SelectOption
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptSelectOptionDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-SelectOption
      Break
    }
    "Get-ComboBoxFilter"
    {
      #region Get-SelectOption
      If ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      Else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptFilterComboDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-SelectOption
      Break
    }
    "Get-ListViewChoice"
    {
      #region Get-ListViewChoice
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptListViewChoice -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-ListViewChoice
    }
    "Get-ListViewSearch"
    {
      #region Get-ListViewSearch
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptListViewSearch -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-ListViewSearch
    }
    "Show-Message"
    {
      #region Show-MsgDialog
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptMessageDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Show-MsgDialog
      break
    }
    "Get-ChangeLog"
    {
      #region Get-UserInput
      If ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      Else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptShowChangeLog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Get-UserInput
      Break
    }
    "Show-Info"
    {
      #region Show-Info
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptInfoDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -MyControlType ($Sender.Tag)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Show-Info
      Break
    }
    "Select-Icon"
    {
      #region Select-Icon
      if ([String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text) -or [String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script or Control Name ", [MyConfig]::ScriptName, "OK", "Warning")
      }
      else
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptSelectIconDialog -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Select-Icon
      Break
    }
    "Extract"
    {
      #region Extract
      If (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text))
      {
        If (($Result = Show-MySIDialog -DialogTitle "Extract Icon" -Multi).DialogResult -eq [System.Windows.Forms.DialogResult]::OK)
        {
          $MyFCGCodeTextBox.Clear()
          $TempIconPath = $Result.IconPath
          ForEach ($TempIconIndex In $Result.IconIndex)
          {
            Try
            {
              $MyFCGCodeTextBox.AppendText((Convert-MyImageToBase64 -MyScriptName ($MyFCGScriptNameTextBox.Text) -Icon ([Extract.MyIcon]::IconReturn($TempIconPath, $TempIconIndex)) -Name ("SmallIcon{0:0000}" -f $TempIconIndex)))
              $MyFCGCodeTextBox.AppendText("`r`n")
              $MyFCGCodeTextBox.AppendText((Convert-MyImageToBase64 -MyScriptName ($MyFCGScriptNameTextBox.Text) -Icon ([Extract.MyIcon]::IconReturn($TempIconPath, $TempIconIndex, $True)) -Name ("LargeIcon{0:0000}" -f $TempIconIndex)))
              $MyFCGCodeTextBox.AppendText("`r`n")
            }
            Catch
            {
            }
          }
          $MyFCGCodeTextBox.SelectAll()
          $MyFCGCodeTextBox.Copy()
          $MyFCGCodeTextBox.DeselectAll()
          $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
        }
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Extract
      break
    }
    "GenerateControl"
    {
      #region Generate
      If (($MyFCGControlListListBox.SelectedIndex -gt -1) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
      {
        If ($MyFCGControlEventCheckedListBox.CheckedItems.Count -gt 0)
        {
          If ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
          Else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
        }
        Else
        {
          If ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
          Else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
        }
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Generate
      Break
    }
    "GeneratePanel"
    {
      #region Generate-Panel
      If (($MyFCGControlListListBox.SelectedIndex -gt -1) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
      {
        If ($MyFCGControlEventCheckedListBox.CheckedItems.Count -gt 0)
        {
          If ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Panel" -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
          Else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Panel" -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
        }
        Else
        {
          If ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Panel" -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
          Else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Panel" -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
        }
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Generate-Panel
      Break
    }
    "GenerateSplit"
    {
      #region Generate-Split
      if (($MyFCGControlListListBox.SelectedIndex -gt -1) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
      {
        if ($MyFCGControlEventCheckedListBox.CheckedItems.Count -gt 0)
        {
          if ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Split" -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
          else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Split" -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
          }
        }
        else
        {
          if ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Split" -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
          else
          {
            $MyFCGCodeTextBox.Text = Build-MyScript -GUIContainer "Split" -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
          }
        }
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Generate-Split
      Break
    }
    "Control"
    {
      #region Control
      if (($MyFCGControlListListBox.SelectedIndex -gt -1) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
      {
        if (([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text)) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
        {
          $MyFCGCodeTextBox.Text = Build-MyScriptControl -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
        }
        else
        {
          $MyFCGCodeTextBox.Text = Build-MyScriptControl -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem)
        }
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Form Control Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Control
      Break
    }
    "Event"
    {
      #region Event
      if (($MyFCGControlEventCheckedListBox.CheckedItems.Count -gt 0) -and (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text)))
      {
        if ([String]::IsNullOrEmpty($MyFCGControlNameTextBox.Text))
        {
          $MyFCGCodeTextBox.Text = Build-MyScriptEvent -MyScriptName ($MyFCGScriptNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
        }
        else
        {
          $MyFCGCodeTextBox.Text = Build-MyScriptEvent -MyScriptName ($MyFCGScriptNameTextBox.Text) -MyControlName ($MyFCGControlNameTextBox.Text) -Control ($MyFCGControlListListBox.SelectedItem) -ControlEvent ($MyFCGControlEventCheckedListBox.CheckedItems)
        }
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Control Event Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Events Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Event
      Break
    }
    "Library"
    {
      #region Library
      if (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text))
      {
        $MyFCGCodeTextBox.Text = Build-MyScriptLibrary -MyScriptName ($MyFCGScriptNameTextBox.Text)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "Script Code Generated: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Library
      Break
    }
    "Source"
    {
      #region Source
      $CallStack = Get-PSCallStack
      $MyFCGCodeTextBox.Text = ($CallStack[$CallStack.Count - 1].InvocationInfo.MyCommand.ScriptBlock).ToString()
      $CallStack = $Null
      $MyFCGCodeTextBox.SelectAll()
      $MyFCGCodeTextBox.Copy()
      $MyFCGCodeTextBox.DeselectAll()
      $MyFCGBtmStatusStrip.Items["Status"].Text = "$([MyConfig]::ScriptName) Source Code: $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      #endregion Source
      Break
    }
    "Image"
    {
      #region Image
      If (-not [String]::IsNullOrEmpty($MyFCGScriptNameTextBox.Text))
      {
        $MyFCGOpenFileDialog.Title = "Encode Icon / Image"
        $MyFCGOpenFileDialog.Filter = "All Icon and Image Files|*.ico;*.bmp;*.gif;*.jpg;*.jpeg;*.png|Icon Files Only|*.ico|Image Files Only|*.bmp;*.gif;*.jpg;*.jpeg;*.png"
        $MyFCGOpenFileDialog.FilterIndex = 0
        $MyFCGOpenFileDialog.FileName = ""
        If ($MyFCGOpenFileDialog.ShowDialog($MyFCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
        {
          $MyFCGCodeTextBox.Text = $(Convert-MyImageToBase64 -MyScriptName ($MyFCGScriptNameTextBox.Text) -Path $MyFCGOpenFileDialog.FileName -Name $MyFCGOpenFileDialog.SafeFileName)
          $MyFCGCodeTextBox.SelectAll()
          $MyFCGCodeTextBox.Copy()
          $MyFCGCodeTextBox.DeselectAll()
          $MyFCGBtmStatusStrip.Items["Status"].Text = "Image Encoded: $([System.IO.Path]::GetFileName($MyFCGOpenFileDialog.FileName)) - $($MyFCGCodeTextBox.Lines.Count) Line(s)"
        }
      }
      Else
      {
        [Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "Missing Script Name or No Control Selected", [MyConfig]::ScriptName, "OK", "Warning")
      }
      #endregion Image
      Break
    }
    "EData"
    {
      #region Data
      $MyFCGOpenFileDialog.Title = "Encode File Data"
      $MyFCGOpenFileDialog.Filter = "Text Files|*.txt|XML Files|*.xml|HTM/HTML Files|*.htm;*.html|Rich Text Documents|*.rtf|Microsoft Office Files|*.doc;*.docx;*.xls;*.xlsx|Applications|*.exe|All Files|*.*"
      $MyFCGOpenFileDialog.FilterIndex = 0
      $MyFCGOpenFileDialog.FileName = ""
      If ($MyFCGOpenFileDialog.ShowDialog($MyFCGForm) -eq [System.Windows.Forms.DialogResult]::OK)
      {
        $MyFCGCodeTextBox.Text = $(Encode-MyDataFile -Path $MyFCGOpenFileDialog.FileName -Name $MyFCGOpenFileDialog.SafeFileName)
        $MyFCGCodeTextBox.SelectAll()
        $MyFCGCodeTextBox.Copy()
        $MyFCGCodeTextBox.DeselectAll()
        $MyFCGBtmStatusStrip.Items["Status"].Text = "File Encoded: $([System.IO.Path]::GetFileName($MyFCGOpenFileDialog.FileName)) - $($MyFCGCodeTextBox.Lines.Count) Line(s)"
      }
      #endregion Data
      Break
    }
    "Help"
    {
      $MyFCGBtmStatusStrip.Items["Status"].Text = "Help!"
      Show-MyHelpDialog
      #[Void][System.Windows.Forms.MessageBox]::Show($MyFCGForm, "There is no Help!", [MyConfig]::ScriptName, "OK", "Information")
      Break
    }
    "Exit"
    {
      $MyFCGBtmStatusStrip.Items["Status"].Text = "Exiting..."
      $MyFCGForm.Close()
      Break
    }
  }
  
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  
  $MyFCGForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
  Write-Verbose -Message "Exit Click Event for `$MyFCGTopToolStripItem"
}
#endregion ******** Function Start-MyFCGTopToolStripItemClick ********

#region ******** MyFCG Menu items ********

# Main Menu
$NewMenuItem = New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Generate" -Name "Generate" -Tag "Generate" -DisplayStyle "ImageAndText" -ImageKey "GenerateIcon" -Disable -PassThru
(New-MenuItem -Menu $NewMenuItem -Text "Generate - Control" -Name "GenerateControl" -Tag "GenerateControl" -DisplayStyle "ImageAndText" -ImageKey "GenerateIcon" -Disable -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Generate - Panel" -Name "GeneratePanel" -Tag "GeneratePanel" -DisplayStyle "ImageAndText" -ImageKey "GenerateIcon" -Disable -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Generate - SplitContainer" -Name "GenerateSplit" -Tag "GenerateSplit" -DisplayStyle "ImageAndText" -ImageKey "GenerateIcon" -Disable -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Control" -Name "Control" -Tag "Control" -DisplayStyle "ImageAndText" -ImageKey "ControlIcon" -Disable -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "E&vent" -Name "Event" -Tag "Event" -DisplayStyle "ImageAndText" -ImageKey "EventIcon" -Disable -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $MyFCGTopMenuStrip
(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "Li&brary" -Name "Library" -Tag "Library" -DisplayStyle "ImageAndText" -ImageKey "LibraryIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
$NewMenuItem = New-MenuItem -Menu $MyFCGTopMenuStrip -Text "Dia&logs" -Name "Dialogs" -Tag "Dialogs" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru

# Dialogs Sub Menu
$SubMenuItem = New-MenuItem -Menu $NewMenuItem -Text "Dialog &Templates" -Name "Dialog Templates" -Tag "Dialog Templates" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $SubMenuItem -Text "&GroupBox" -Name "Dialog-Template" -Tag "GroupBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "&Panel" -Name "Dialog-Template" -Tag "Panel" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "&SplitContainer" -Name "Dialog-Template" -Tag "SplitContainer" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

$SubMenuItem = New-MenuItem -Menu $NewMenuItem -Text "Dialog &AdvTemplates" -Name "Dialog AdvTemplates" -Tag "Dialog AdvTemplates" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $SubMenuItem -Text "&GroupBox" -Name "Dialog-AdvTemplate" -Tag "GroupBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "&Panel" -Name "Dialog-AdvTemplate" -Tag "Panel" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "&SplitContainer" -Name "Dialog-AdvTemplate" -Tag "SplitContainer" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

New-MenuSeparator -Menu $NewMenuItem

$SubMenuItem = New-MenuItem -Menu $NewMenuItem -Text "Dialog - Display-&Status" -Name "Display-Status" -Tag "Display-Status" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $SubMenuItem -Text "TextBox - &One Button" -Name "Display-Status1" -Tag "TextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "TextBox - &Two Buttons" -Name "Display-Status2" -Tag "TextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "TextBox - &Advanced" -Name "Display-AdvStatus" -Tag "TextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
New-MenuSeparator -Menu $SubMenuItem
(New-MenuItem -Menu $SubMenuItem -Text "RichTextBox - O&ne Button" -Name "Display-Status1" -Tag "RichTextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "RichTextBox - T&wo Buttons" -Name "Display-Status2" -Tag "RichTextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "RichTextBox - A&dvanced" -Name "Display-AdvStatus" -Tag "RichTextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

$SubMenuItem = New-MenuItem -Menu $NewMenuItem -Text "Dialog - Show-I&nfo" -Name "Show-Info" -Tag "Show-Info" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $SubMenuItem -Text "WebBrowser - &HTML" -Name "Show-Info" -Tag "WebBrowser" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "RichTextBox - &RTF" -Name "Show-Info" -Tag "RichTextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

$SubMenuItem = New-MenuItem -Menu $NewMenuItem -Text "Dialog - Show-&Message" -Name "Show-Message" -Tag "Show-Message" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru
(New-MenuItem -Menu $SubMenuItem -Text "WebBrowser - &HTML" -Name "Show-Message" -Tag "WebBrowser" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $SubMenuItem -Text "RichTextBox - &RTF" -Name "Show-Message" -Tag "RichTextBox" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

New-MenuSeparator -Menu $NewMenuItem

(New-MenuItem -Menu $NewMenuItem -Text "Dialog - User Alert Message" -Name "UserAlertMsg" -Tag "UserAlertMsg" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&UserResponse" -Name "Get-UserResponse" -Tag "Get-UserResponse" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&TextBoxInput" -Name "Get-TextBoxInput" -Tag "Get-TextBoxInput" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&OrderedList" -Name "Get-OrderedList" -Tag "Get-OrderedList" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&RadioButtonChoice" -Name "Get-RadioButtonChoice" -Tag "Get-RadioButtonChoice" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&ListViewChoice" -Name "Get-ListViewChoice" -Tag "Get-ListViewChoice" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem})
#(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&ListViewSearch" -Name "Get-ListViewSearch" -Tag "Get-ListViewSearch" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem})
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-&ComboBoxChoice" -Name "Get-ComboBoxChoice" -Tag "Get-ComboBoxChoice" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Get-ComboBoxFilter" -Name "Get-ComboBoxFilter" -Tag "Get-ComboBoxFilter" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })


(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Show-ChangeLog" -Name "Get-ChangeLog" -Tag "Get-ChangeLog" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $NewMenuItem -Text "Dialog - Select-&Icon" -Name "Select-Icon" -Tag "Select-Icon" -DisplayStyle "ImageAndText" -ImageKey "DialogIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
$NewMenuItem = $Null

# Main Menu
(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Source" -Name "Source" -Tag "Source" -DisplayStyle "ImageAndText" -ImageKey "SourceIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

New-MenuSeparator -Menu $MyFCGTopMenuStrip

if ($Host.Version.Major -le 5)
{
  (New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Extract" -Name "Extract" -Tag "Extract" -DisplayStyle "ImageAndText" -ImageKey "ExtractIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
}
(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Image" -Name "Image" -Tag "Image" -DisplayStyle "ImageAndText" -ImageKey "ImageIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Data" -Name "EData" -Tag "EData" -DisplayStyle "ImageAndText" -ImageKey "DataIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

New-MenuSeparator -Menu $MyFCGTopMenuStrip

(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "&Help" -Name "Help" -Tag "Help" -DisplayStyle "ImageAndText" -ImageKey "HelpIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })
(New-MenuItem -Menu $MyFCGTopMenuStrip -Text "E&xit" -Name "Exit" -Tag "Exit" -DisplayStyle "ImageAndText" -ImageKey "ExitIcon" -PassThru).add_Click({ Start-MyFCGTopToolStripItemClick -Sender $This -EventArg $PSItem })

#endregion ******** MyFCG Menu items ********

# ************************************************
# MyFCGBtm StatusStrip
# ************************************************
#region $MyFCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$MyFCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()
$MyFCGForm.Controls.Add($MyFCGBtmStatusStrip)
#$MyFCGForm.StatusStrip = $MyFCGBtmStatusStrip
$MyFCGBtmStatusStrip.BackColor = [MyConfig]::Colors.Back
$MyFCGBtmStatusStrip.Dock = [System.Windows.Forms.DockStyle]::Bottom
$MyFCGBtmStatusStrip.Font = [MyConfig]::Font.Regular
$MyFCGBtmStatusStrip.ForeColor = [MyConfig]::Colors.Fore
$MyFCGBtmStatusStrip.ImageList = $MyFCGImageList
$MyFCGBtmStatusStrip.Name = "MyFCGBtmStatusStrip"
$MyFCGBtmStatusStrip.TabStop = $False
$MyFCGBtmStatusStrip.Text = "MyFCGBtmStatusStrip"
#endregion $MyFCGBtmStatusStrip = [System.Windows.Forms.StatusStrip]::New()

New-MenuLabel -Menu $MyFCGBtmStatusStrip -Text "Status" -Name "Status" -Tag "Status"

#endregion ******** Controls for MyFCG Form ********

#endregion ================ End **** MyFCG **** End ================

[System.Windows.Forms.Application]::Run($MyFCGForm)

$MyFCGOpenFileDialog.Dispose()
$MyFCGFormComponents.Dispose()
$MyFCGForm.Dispose()

if ([MyConfig]::Production)
{
  [System.Environment]::Exit(0)
}

