#requires -version 3.0
<#
  .SYNOPSIS
  .DESCRIPTION
  .PARAMETER <Parameter-Name>
  .EXAMPLE
  .NOTES
    Script CGen.ps1 Version 1.0 by Thanatos on 07/23/2016
  .LINK
#>

$ErrorActionPreference = "Stop"

# Comment Out $VerbosePreference Line for Production Deployment
$VerbosePreference = "Continue"

# Comment Out $DebugPreference Line for Production Deployment
$DebugPreference = "Continue"

# Clear Previous Error Messages
$Error.Clear()

[void][System.Reflection.Assembly]::Load("System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][System.Reflection.Assembly]::Load("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[System.Windows.Forms.Application]::EnableVisualStyles()

#region ******** CGen Configuration  ********

$CGenConfig = @{}

# CGen Script Configuration
$CGenConfig.ScriptName = "My PowerShell Form Code Generator"
$CGenConfig.ScriptVersion = "4.8.00.00"
$CGenConfig.ScriptAuthor = "Ken Sweet"

# CGen Form Control Space
$CGenConfig.FormSpacer = 4

$CGenConfig.MainWidth = 42

# CGen Script Font Settings
$CGenConfig.FontFamily = "Tahoma"
$CGenConfig.FontSize = 8

# CGen Script Production Mode
$CGenConfig.Production = $True

$CGenConfig.ToolName = "MyForm"

#region ******** Form Control List ********
$CGenConfig.ControlList = @(
  "Button",
  "CheckBox",
  "CheckedListBox",
  "ColorDialog",
  "ColumnHeader",
  "ComboBox",
  "ContextMenuStrip",
  "DataGrid",
  "DataGridView",
  "DataGridViewButtonColumn",
  "DataGridViewCellStyle",
  "DataGridViewCheckBoxColumn",
  "DataGridViewComboBoxColumn",
  "DataGridViewImageColumn",
  "DataGridViewLinkColumn",
  "DataGridViewTextBoxColumn",
  "DataGridViewRow",
  "DateTimePicker",
  "DomainUpDown",
  "ErrorProvider",
  "FlowLayoutPanel",
  "FolderBrowserDialog",
  "FontDialog",
  "Form",
  "GroupBox",
  "HScrollBar",
  "ImageList",
  "Label",
  "LinkLabel",
  "ListBox",
  "ListView",
  "ListViewGroup",
  "ListViewItem",
  "MaskedTextBox",
  "MenuStrip",
  "MonthCalendar",
  "NotifyIcon",
  "NumericUpDown",
  "OpenFileDialog",
  "Panel",
  "PictureBox",
  "PrintDialog",
  "ProgressBar",
  "PropertyGrid",
  "RadioButton",
  "RichTextBox",
  "SaveFileDialog",
  "SplitContainer",
  "Splitter",
  "StatusBar",
  "StatusStrip",
  "TabControl",
  "TabPage",
  "TableLayoutPanel",
  "TextBox",
  "Timer",
  "ToolBar",
  "ToolStrip",
  "ToolStripContainer",
  "ToolStripButton",
  "ToolStripComboBox",
  "ToolStripDropDownButton",
  "ToolStripDropDown",
  "ToolStripLabel",
  "ToolStripMenuItem",
  "ToolStripPanel",
  "ToolStripProgressBar",
  "ToolStripSeparator",
  "ToolStripSplitButton",
  "ToolStripStatusLabel",
  "ToolStripTextBox",
  "ToolTip",
  "TrackBar",
  "TreeNode",
  "TreeView",
  "VScrollBar",
  "WebBrowser",
  "* Get-MyItemList",
  "* Get-MyNamedList",
  "* Get-MyItem",
  "* Get-MyADOrgUnit",
  "* Get-MyADObject",
  "* Get-MyResponse",
  "* Select-MySCCMObject",
  "* Load-MyItemList",
  "* Select-MyItemList",
  "* Display-MyStatus",
  "* Display-MyMessage",
  "* Help-About")
#endregion

#endregion

#region ******** CGen Form Custom Colors ********

$CGenColor = @{
}

# Main Form Colors - Mine - Dark
$CGenColor.BackColor = [System.Drawing.Color]::Black
$CGenColor.ForeColor = [System.Drawing.Color]::DarkRed

# Default Color for Labels
$CGenColor.LabelForeColor = [System.Drawing.Color]::DarkRed

# Default Color for Title Labels
$CGenColor.TitleBackColor = [System.Drawing.Color]::DimGray
$CGenColor.TitleForeColor = [System.Drawing.Color]::Black

# Default Color for GroupBoxes, CheckBoxes, and RadioButtons
$CGenColor.GroupForeColor = [System.Drawing.Color]::DarkRed

# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
$CGenColor.TextBackColor = [System.Drawing.Color]::LightGray
$CGenColor.TextForeColor = [System.Drawing.Color]::Black

# Default Color for Buttons
$CGenColor.ButtonBackColor = [System.Drawing.Color]::DarkGray
$CGenColor.ButtonForeColor = [System.Drawing.Color]::Black

#endregion

#region ******** My Custom Functions ********

#region ******** CGen Host Custom Console Colors ********

#$Host.PrivateData.ErrorForegroundColor = [System.ConsoleColor]::Red
#$Host.PrivateData.ErrorBackgroundColor = [System.ConsoleColor]::Black
#
#$Host.PrivateData.VerboseForegroundColor = [System.ConsoleColor]::DarkGray
#$Host.PrivateData.VerboseBackgroundColor = [System.ConsoleColor]::Black
#
#$Host.PrivateData.WarningForegroundColor = [System.ConsoleColor]::DarkMagenta
#$Host.PrivateData.WarningBackgroundColor = [System.ConsoleColor]::Black
#
#$Host.PrivateData.DebugForegroundColor = [System.ConsoleColor]::DarkRed
#$Host.PrivateData.DebugBackgroundColor = [System.ConsoleColor]::Black
#
#$Host.PrivateData.ProgressForegroundColor = [System.ConsoleColor]::DarkCyan
#$Host.PrivateData.ProgressBackgroundColor = [System.ConsoleColor]::Black

#endregion

#region ********* Show / Hide PowerShell Window *********
$WindowDisplay = @"
using System;
using System.Runtime.InteropServices;

namespace Window
{
  public class Display
  {
    [DllImport("Kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

    public static bool Hide()
    {
      return ShowWindowAsync(GetConsoleWindow(), 0);
    }

    public static bool Show()
    {
      return ShowWindowAsync(GetConsoleWindow(), 5);
    }
  }
}
"@
Add-Type -TypeDefinition $WindowDisplay -Debug:$False
if ($VerbosePreference -eq "SilentlyContinue")
{
  [Void][Window.Display]::Hide()
}
#endregion

#region function New-MyListItem
function New-MyListItem()
{
  <#
    .SYNOPSIS
      Makes and Adds a New ListItem for a ComboBox or ListBox Control
    .DESCRIPTION
      Makes and Adds a New ListItem for a ComboBox or ListBox Control
    .PARAMETER Control
    .PARAMETER Text
    .PARAMETER Value
    .PARAMETER Tag
    .PARAMETER PassThru
    .EXAMPLE
      $NewItem = New-MyListItem -Text "Text" -Tag "Tag"
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param(
    [parameter(Mandatory = $True)]
    [Object]$Control,
    [parameter(Mandatory = $True)]
    [String]$Text,
    [parameter(Mandatory = $True)]
    [String]$Value,
    [Object]$Tag,
    [switch]$PassThru
  )
  Write-Verbose -Message "Enter Function New-MyListItem"
  Try
  {
    If ($PassThru)
    {
      $Control.Items.Add(([PSCustomObject]@{"Text" = $Text; "Value" = $Value; "Tag" = $Tag}))
    }
    Else
    {
      [Void]$Control.Items.Add(([PSCustomObject]@{"Text" = $Text; "Value" = $Value; "Tag" = $Tag}))
    }
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code:$($Error[0].InvocationInfo.Line)"
  }
  Write-Verbose -Message "Exit Function New-MyListItem"
}
#endregion

#endregion

#region ******** Form Code Generation functions ********

#region function Get-MyWindowsFormControlProperty
function Get-MyWindowsFormControlProperty()
{     
  <#
    .SYNOPSIS
      Gets Form Control Properties
    .DESCRIPTION
      Gets Form Control Properties
    .PARAMETER Control
    .EXAMPLE
      Get-MyWindowsFormControlProperty -Control <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, ValueFromPipeline = $True)]
    [String[]]$Control
  )
  Begin 
  {
    Write-Verbose -Message "Enter Function Get-MyWindowsFormControlProperty"
  }
  Process 
  {
    ForEach ($Item in $Control)
    {
      $MyObject = New-Object -TypeName "System.Windows.Forms.$Item"
      ForEach($Property in $MyObject.PSObject.Properties)
      {
        If ($Property.IsSettable)
        {
          $Property
        }
        Else
        {
          if (-not [String]::IsNullOrEmpty($Property.Value.PSObject.Methods))
          {
            If (@($Property.Value.PSObject.Methods | Where-Object -FilterScript { $PSItem.Name -contains "Add" }).Count)
            {
              $Property
            }
          }
        }
      }

      $MyObject = $Null
      [System.GC]::Collect()
      [System.GC]::WaitForPendingFinalizers()
    }
  }
  End 
  {
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    Write-Verbose -Message "Exit Function Get-MyWindowsFormControlProperty"
  }
 } 
#endregion

#region function Get-EnumValue
function Get-EnumValue() 
{
  <#
    .SYNOPSIS
      Generates ENum Values Code
    .DESCRIPTION
      Generates ENum Values Code
    .PARAMETER Value
    .EXAMPLE
      Get-EnumValue -Value <Object>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Value
  )
  Write-Verbose -Message "Enter Function Get-EnumValue"
  $GetType = $Value.GetType()
  if ($($GetType.FullName) -eq "System.Windows.Forms.AnchorStyles")
  {
    "[$($GetType.FullName)](`"Top`", `"Left`", `"Bottom`", `"Right`")"
  } 
  else 
  {
    "[$($GetType.FullName)]::$($MyProp.Value.ToString())"
  }
  $GetType = $Null
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  Write-Verbose -Message "Exit Function Get-EnumValue"
}
#endregion

#region function New-MyWindowsFormControl
function New-MyWindowsFormControl()
{     
  <#
    .SYNOPSIS
      Generatesn Windows Firm Controls PowerShell Code
    .DESCRIPTION
      Generatesn Windows Firm Controls PowerShell Code
    .PARAMETER Control
    .PARAMETER Name
    .EXAMPLE
      New-MyWindowsFormControl -Control <String> -Name <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory=$True)]
    [String]$Control,
    [parameter(Mandatory=$True)]
    [String]$Name
  )
  Write-Verbose -Message "Enter Function New-MyWindowsFormControl"
  $Code = New-Object -TypeName System.Text.StringBuilder
  Try 
  {
    Switch ($Control)
    {
      "Form"
      {
        $CGenConfig.ToolName = "`$$Name"
        [Void]$Code.AppendLine("#requires -version 3.0")
        [Void]$Code.AppendLine("<#")
        [Void]$Code.AppendLine("  .SYNOPSIS")
        [Void]$Code.AppendLine("  .DESCRIPTION")
        [Void]$Code.AppendLine("  .PARAMETER <Parameter-Name>")
        [Void]$Code.AppendLine("  .EXAMPLE")
        [Void]$Code.AppendLine("  .NOTES")
        [Void]$Code.AppendLine("    Script $($Name).ps1 Version 1.0 by $($ENV:UserName) on $([DateTime]::Now.ToShortDateString())")
        [Void]$Code.AppendLine("    Script Code Generator Version: $($CGenConfig.ScriptVersion)")
        [Void]$Code.AppendLine("  .LINK")
        [Void]$Code.AppendLine("#>")
        [Void]$Code.AppendLine("#[CmdletBinding()]")
        [Void]$Code.AppendLine("#param (")
        [Void]$Code.AppendLine("#)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$ErrorActionPreference = `"Stop`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# Comment Out `$VerbosePreference Line for Production Deployment")
        [Void]$Code.AppendLine("`$VerbosePreference = `"Continue`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# Comment Out `$DebugPreference Line for Production Deployment")
        [Void]$Code.AppendLine("`$DebugPreference = `"Continue`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# Clear Previous Error Messages")
        [Void]$Code.AppendLine("`$Error.Clear()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("[void][System.Reflection.Assembly]::Load(`"System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`")")
        [Void]$Code.AppendLine("[void][System.Reflection.Assembly]::Load(`"System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`")")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("[System.Windows.Forms.Application]::EnableVisualStyles()")
        [Void]$Code.AppendLine("")
        
        #region ******** Config and Colors *******
        
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> $($Name) Configuration  <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$$($Name)Config = @{}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Production Mode")
        [Void]$Code.AppendLine("`$$($Name)Config.Production = `$False")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Configuration")
        [Void]$Code.AppendLine("`$$($Name)Config.ScriptName = `"$($Name).ps1`"")
        [Void]$Code.AppendLine("`$$($Name)Config.ScriptVersion = `"0.00.00.00`"")
        [Void]$Code.AppendLine("`$$($Name)Config.ScriptAuthor = `"$($ENV:UserName)`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Form Control Space")
        [Void]$Code.AppendLine("`$$($Name)Config.FormSpacer = 4")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Default Font Settings")
        [Void]$Code.AppendLine("`$$($Name)Config.FontFamily = `"Tahoma`"")
        [Void]$Code.AppendLine("`$$($Name)Config.FontSize = 10")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$$($Name)Config.DarkMode = ((Get-ItemProperty -Path `"Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize`" -ErrorAction `"SilentlyContinue`").AppsUseLightTheme -eq `"0`")")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Auto Exit Settings")
        [Void]$Code.AppendLine("`$$($Name)Config.AutoExit = 0")
        [Void]$Code.AppendLine("`$$($Name)Config.AutoExitTic = 60000")
        [Void]$Code.AppendLine("`$$($Name)Config.AutoExitMax = 60")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$$($Name)Config.IsLocalAdmin = (New-Object -TypeName Security.Principal.WindowsPrincipal(`$([Security.Principal.WindowsIdentity]::GetCurrent()))).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)")
        [Void]$Code.AppendLine("#`$$($Name)Config.IsLocalAdmin = [Security.Principal.WindowsPrincipal]::New([Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)")
        [Void]$Code.AppendLine("`$$($Name)Config.IsConnected = [Activator]::CreateInstance([Type]::GetTypeFromCLSID([Guid]`"{DCB00C01-570F-4A9B-8D69-199FDBA5723B}`"))")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Credentials")
        [Void]$Code.AppendLine("`$$($Name)Config.UseCreds = `$False")
        [Void]$Code.AppendLine("`$$($Name)Config.UserName = `"Domain\UserName`"")
        [Void]$Code.AppendLine("`$$($Name)Config.Password = `"P@ssw0rd`"")
        [Void]$Code.AppendLine("`$$($Name)Config.Credential = New-Object -TypeName System.Management.Automation.PSCredential(`$$($Name)Config.UserName, (ConvertTo-SecureString -String `$$($Name)Config.Password -AsPlainText -Force))")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) SMTP Configuration")
        [Void]$Code.AppendLine("`$$($Name)Config.SMTPServer = `"smtp.mydomain.local`"")
        [Void]$Code.AppendLine("`$$($Name)Config.SMTPPort = 25")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) SCCM Configuration")
        [Void]$Code.AppendLine("`$$($Name)Config.SCCMServer = `"MySCCM.MyDomain.Local`"")
        [Void]$Code.AppendLine("`$$($Name)Config.SCCMSite = `"XYZ`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# Current DateTime Offset")
        [Void]$Code.AppendLine("`$$($Name)Config.DateTime = [System.DateTimeOffset]::Now")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# Get Script Path")
        [Void]$Code.AppendLine("if ([String]::IsNullOrEmpty(`$HostInvocation))")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  `$$($Name)Config.ScriptPath = [System.IO.Path]::GetDirectoryName(`$Script:MyInvocation.MyCommand.Path)")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("else")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  `$$($Name)Config.ScriptPath = [System.IO.Path]::GetDirectoryName(`$HostInvocation.MyCommand.Path)")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ $($Name) Configuration  ================")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> $($Name) Form Custom Colors <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$$($Name)Color = @{}")
        [Void]$Code.AppendLine("")
        Switch ($CGenLabel.Tag)
        {
          0
          {
            [Void]$Code.AppendLine("if (`$$($Name)Config.DarkMode)")
            [Void]$Code.AppendLine("{")
            [Void]$Code.AppendLine("  # Main Form Colors - Mine - Dark")
            [Void]$Code.AppendLine("  `$$($Name)Color.BackColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("  `$$($Name)Color.ForeColor = [System.Drawing.Color]::DarkRed")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("  `$$($Name)Color.LabelForeColor = [System.Drawing.Color]::DarkRed")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  `$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Title Labels")
            [Void]$Code.AppendLine("  `$$($Name)Color.TitleBackColor = [System.Drawing.Color]::DimGray")
            [Void]$Code.AppendLine("  `$$($Name)Color.TitleForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for GroupBoxes")
            [Void]$Code.AppendLine("  `$$($Name)Color.GroupForeColor = [System.Drawing.Color]::DarkRed")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("  `$$($Name)Color.TextBackColor = [System.Drawing.Color]::LightGray")
            [Void]$Code.AppendLine("  `$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Buttons")
            [Void]$Code.AppendLine("  `$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::DarkGray")
            [Void]$Code.AppendLine("  `$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("}")
            [Void]$Code.AppendLine("else")
            [Void]$Code.AppendLine("{")
            [Void]$Code.AppendLine("  # Main Form Colors - Mine - Light")
            [Void]$Code.AppendLine("  `$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("  `$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("  `$$($Name)Color.LabelForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  `$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Title Labels")
            [Void]$Code.AppendLine("  `$$($Name)Color.TitleBackColor = [System.Drawing.Color]::LightBlue")
            [Void]$Code.AppendLine("  `$$($Name)Color.TitleForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for GroupBoxes")
            [Void]$Code.AppendLine("  `$$($Name)Color.GroupForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("  `$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("  `$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("  # Default Color for Buttons")
            [Void]$Code.AppendLine("  `$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("  `$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("}")
            Break
          }
          1
          {
            [Void]$Code.AppendLine("# Main Form Colors - Mine - Light")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::LightBlue")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
          2
          {
            [Void]$Code.AppendLine("# Main Form Colors - Default")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.SystemColors]::Control")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.SystemColors]::ControlText")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButton")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.SystemColors]::ControlText")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.SystemColors]::Control")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.SystemColors]::ControlText")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxess")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.SystemColors]::ControlText")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.SystemColors]::Window")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.SystemColors]::WindowText")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.SystemColors]::Control")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.SystemColors]::ControlText")
            Break
          }
          3
          {
            [Void]$Code.AppendLine("# Main Form Colors - PSJH")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#1F3D7D`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#1F3D7D`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#419639`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
          4
          {
            [Void]$Code.AppendLine("# Main Form Colors - Providence")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#004B8E`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#004B8E`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#FF8C0E`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
          5
          {
            [Void]$Code.AppendLine("# Main Form Colors - Swedish")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#000000`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#000000`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#639EC8`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
          6
          {
            [Void]$Code.AppendLine("# Main Form Colors - Facey")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#000000`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#000000`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#005092`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
          7
          {
            [Void]$Code.AppendLine("# Main Form Colors - Kadlec")
            [Void]$Code.AppendLine("`$$($Name)Color.BackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.ForeColor = [System.Drawing.Color]::Navy")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Labels, CheckBoxes, and RadioButtons")
            [Void]$Code.AppendLine("`$$($Name)Color.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#0D3B5F`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("`$$($Name)Color.ErrorForeColor = [System.Drawing.Color]::Red")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Title Labels")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#0D3B5F`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for GroupBoxes")
            [Void]$Code.AppendLine("`$$($Name)Color.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml(`"#0D3B5F`")")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews")
            [Void]$Code.AppendLine("`$$($Name)Color.TextBackColor = [System.Drawing.Color]::White")
            [Void]$Code.AppendLine("`$$($Name)Color.TextForeColor = [System.Drawing.Color]::Black")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("# Default Color for Buttons")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonBackColor = [System.Drawing.Color]::Gainsboro")
            [Void]$Code.AppendLine("`$$($Name)Color.ButtonForeColor = [System.Drawing.Color]::Navy")
            Break
          }
        }
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ $($Name) Form Custom Colors ================")
        [Void]$Code.AppendLine("")
        
        #endregion
        
        #region ******** Default Enmerations and MyListItem Class ********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> My Default Enumerations <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("[Flags()]")
        [Void]$Code.AppendLine("enum MyAnswer")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  Unknown = 0")
        [Void]$Code.AppendLine("  No      = 1")
        [Void]$Code.AppendLine("  Yes     = 2")
        [Void]$Code.AppendLine("  Maybe   = 3")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("enum MyDigit")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  Zero")
        [Void]$Code.AppendLine("  One")
        [Void]$Code.AppendLine("  Two")
        [Void]$Code.AppendLine("  Three")
        [Void]$Code.AppendLine("  Four")
        [Void]$Code.AppendLine("  Five")
        [Void]$Code.AppendLine("  Six")
        [Void]$Code.AppendLine("  Seven")
        [Void]$Code.AppendLine("  Eight")
        [Void]$Code.AppendLine("  Nine")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("[Flags()]")
        [Void]$Code.AppendLine("enum MyBits")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  Bit01 = 0x00000001")
        [Void]$Code.AppendLine("  Bit02 = 0x00000002")
        [Void]$Code.AppendLine("  Bit03 = 0x00000004")
        [Void]$Code.AppendLine("  Bit04 = 0x00000008")
        [Void]$Code.AppendLine("  Bit05 = 0x00000010")
        [Void]$Code.AppendLine("  Bit06 = 0x00000020")
        [Void]$Code.AppendLine("  Bit07 = 0x00000040")
        [Void]$Code.AppendLine("  Bit08 = 0x00000080")
        [Void]$Code.AppendLine("  Bit09 = 0x00000100")
        [Void]$Code.AppendLine("  Bit10 = 0x00000200")
        [Void]$Code.AppendLine("  Bit11 = 0x00000400")
        [Void]$Code.AppendLine("  Bit12 = 0x00000800")
        [Void]$Code.AppendLine("  Bit13 = 0x00001000")
        [Void]$Code.AppendLine("  Bit14 = 0x00002000")
        [Void]$Code.AppendLine("  Bit15 = 0x00004000")
        [Void]$Code.AppendLine("  Bit16 = 0x00008000")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ My Default Enumerations ================")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> My Custom Class <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("Class MyListItem")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  [String]`$Text")
        [Void]$Code.AppendLine("  [Object]`$Value")
        [Void]$Code.AppendLine("  [Object]`$Tag")
        [Void]$Code.AppendLine("  [Int]`$Flags = 0")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$This.Text = `$Text")
        [Void]$Code.AppendLine("    `$This.Value = `$Value")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [MyBits]`$Flags)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$This.Text = `$Text")
        [Void]$Code.AppendLine("    `$This.Value = `$Value")
        [Void]$Code.AppendLine("    `$This.Flags = `$Flags")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$This.Text = `$Text")
        [Void]$Code.AppendLine("    `$This.Value = `$Value")
        [Void]$Code.AppendLine("    `$This.Tag = `$Tag")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  MyListItem ([String]`$Text, [Object]`$Value, [Object]`$Tag, [MyBits]`$Flags)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$This.Text = `$Text")
        [Void]$Code.AppendLine("    `$This.Value = `$Value")
        [Void]$Code.AppendLine("    `$This.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$This.Flags = `$Flags")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ My Custom Class ================")
        [Void]$Code.AppendLine("")
        #endregion ******** Default Enmerations and MyListItem Class ********
        
        #region ******** My Custom Functions ********
        
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> My Custom Functions <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")

        #region ********* Show / Hide PowerShell Window *********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Show / Hide PowerShell Window <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("`$WindowDisplay = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("namespace Window")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  public class Display")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [DllImport(`"Kernel32.dll`")]")
        [Void]$Code.AppendLine("    private static extern IntPtr GetConsoleWindow();")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"user32.dll`")]")
        [Void]$Code.AppendLine("    private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static bool Hide()")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 0);")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static bool Show()")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return ShowWindowAsync(GetConsoleWindow(), 5);")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$WindowDisplay -Debug:`$False")
        [Void]$Code.AppendLine("#endregion ================ Show / Hide PowerShell Window ================")
        [Void]$Code.AppendLine("")
#endregion

        #region ********* Disable Control Close Menu / [X] *********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Disable Control Close Menu / [X] <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("`$ControlBoxMenu = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("namespace ControlBox")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  public class Menu")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    const int MF_BYPOSITION = 0x400;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"User32.dll`")]")
        [Void]$Code.AppendLine("    private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"User32.dll`")]")
        [Void]$Code.AppendLine("    private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"User32.dll`")]")
        [Void]$Code.AppendLine("    private static extern int GetMenuItemCount(IntPtr hWnd);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static void DisableFormClose(IntPtr hWnd)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      IntPtr hMenu = GetSystemMenu(hWnd, false);")
        [Void]$Code.AppendLine("      int menuItemCount = GetMenuItemCount(hMenu);")
        [Void]$Code.AppendLine("      RemoveMenu(hMenu, menuItemCount - 1, MF_BYPOSITION);")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$ControlBoxMenu -Debug:`$False")
        [Void]$Code.AppendLine("#endregion ================ Disable Control Close Menu / [X] ================")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region  ********* User Desktop Refresh *********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> User Desktop Refresh <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("`$MyCode = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("namespace User")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  public class Desktop")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
        [Void]$Code.AppendLine("    private static extern IntPtr SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, string lParam, uint fuFlags, uint uTimeout, IntPtr lpdwResult);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    private static readonly IntPtr HWND_BROADCAST = new IntPtr(0xffff);")
        [Void]$Code.AppendLine("    private const int WM_SETTINGCHANGE = 0x1a;")
        [Void]$Code.AppendLine("    private const int SMTO_ABORTIFHUNG = 0x0002;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [System.Runtime.InteropServices.DllImport(`"Shell32.dll`")] ")
        [Void]$Code.AppendLine("    private static extern int SHChangeNotify(int eventId, int flags, IntPtr item1, IntPtr item2);")
        [Void]$Code.AppendLine("    public static void Refresh()")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, IntPtr.Zero, null, SMTO_ABORTIFHUNG, 100, IntPtr.Zero);")
        [Void]$Code.AppendLine("      SHChangeNotify(0x8000000, 0x1000, IntPtr.Zero, IntPtr.Zero);    ")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
        [Void]$Code.AppendLine("#[User.Desktop]::Refresh()")
        [Void]$Code.AppendLine("#endregion ================ User Desktop Refresh ================")
        [Void]$Code.AppendLine("")
        #endregion ********* User Desktop Refresh *********
        
        #region ********* [Extract.MyIcon] ********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> [Extract.MyIcon] <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#`$TempIcon = [Extract.MyIcon]::IconReturn(`"C:\Windows\System32\shell32.dll`", 1, `$False)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$MyCode = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Drawing;")
        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("namespace Extract")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  public class MyIcon")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [DllImport(`"user32.dll`", SetLastError = true)]")
        [Void]$Code.AppendLine("    [return: MarshalAs(UnmanagedType.Bool)]")
        [Void]$Code.AppendLine("    private static extern bool DestroyIcon(IntPtr hIcon);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"shell32.dll`", CharSet = CharSet.Auto)]")
        [Void]$Code.AppendLine("    private static extern uint ExtractIconEx(string szFileName, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, uint nIcons);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static int IconCount(string FileName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      try")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
        [Void]$Code.AppendLine("        IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
        [Void]$Code.AppendLine("        return (int)ExtractIconEx(FileName, -1, LIcons, SIcons, 1);")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      catch { }")
        [Void]$Code.AppendLine("      return 0;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static Icon IconReturn(string FileName, int IconNum, bool GetLarge)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      IntPtr[] SIcons = new IntPtr[1] { IntPtr.Zero };")
        [Void]$Code.AppendLine("      IntPtr[] LIcons = new IntPtr[1] { IntPtr.Zero };")
        [Void]$Code.AppendLine("      Icon RetData = null;")
        [Void]$Code.AppendLine("      try")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        int IconCount = (int)ExtractIconEx(FileName, IconNum, LIcons, SIcons, 1);")
        [Void]$Code.AppendLine("        if (GetLarge)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          if (IconCount > 0 && LIcons[0] != IntPtr.Zero)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            RetData = (Icon)Icon.FromHandle(LIcons[0]).Clone();")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          if (IconCount > 0 && SIcons[0] != IntPtr.Zero)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            RetData = (Icon)Icon.FromHandle(SIcons[0]).Clone();")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      catch { }")
        [Void]$Code.AppendLine("      finally")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        foreach (IntPtr ptr in LIcons)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          if (ptr != IntPtr.Zero)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            DestroyIcon(ptr);")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        foreach (IntPtr ptr in SIcons)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          if (ptr != IntPtr.Zero)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            DestroyIcon(ptr);")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      return RetData;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static Icon IconReturn(string FileName, int IconNum)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return IconReturn(FileName, IconNum, false);")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCode -ReferencedAssemblies System.Drawing -Debug:`$False")
        [Void]$Code.AppendLine("#endregion ================ [Extract.MyIcon] ================")
        [Void]$Code.AppendLine("")
        #endregion ********* [Extract.MyIcon] ********
        
        #region ********* [Login.Sessions] ********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> [Login.Sessions] <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("`$MyCode = @`"")
        [Void]$Code.AppendLine("namespace Login")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  using System;")
        [Void]$Code.AppendLine("  using System.Collections.Generic;")
        [Void]$Code.AppendLine("  using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public class Sessions")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    public enum WTS_CONNECTSTATE_CLASS")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      WTSActive,")
        [Void]$Code.AppendLine("      WTSConnected,")
        [Void]$Code.AppendLine("      WTSConnectQuery,")
        [Void]$Code.AppendLine("      WTSShadow,")
        [Void]$Code.AppendLine("      WTSDisconnected,")
        [Void]$Code.AppendLine("      WTSIdle,")
        [Void]$Code.AppendLine("      WTSListen,")
        [Void]$Code.AppendLine("      WTSReset,")
        [Void]$Code.AppendLine("      WTSDown,")
        [Void]$Code.AppendLine("      WTSInit")
        [Void]$Code.AppendLine("    } ")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [StructLayout(LayoutKind.Sequential)]")
        [Void]$Code.AppendLine("    public struct WTS_SESSION_INFO")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      public Int32 SessionID;")
        [Void]$Code.AppendLine("      [MarshalAs(UnmanagedType.LPStr)]")
        [Void]$Code.AppendLine("      public String SessionName;")
        [Void]$Code.AppendLine("      public WTS_CONNECTSTATE_CLASS State;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
        [Void]$Code.AppendLine("    static extern IntPtr WTSOpenServer(string pServerName);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
        [Void]$Code.AppendLine("    static extern void WTSCloseServer(IntPtr hServer);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"wtsapi32.dll`", SetLastError=true)]")
        [Void]$Code.AppendLine("    static extern int WTSEnumerateSessions(System.IntPtr hServer, int Reserved, int Version, ref System.IntPtr ppSessionInfo, ref int pCount);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [DllImport(`"wtsapi32.dll`")]")
        [Void]$Code.AppendLine("    static extern void WTSFreeMemory(IntPtr pMemory);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (bool All = false)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return EnumSessions(System.Environment.MachineName, All);")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    public static List<WTS_SESSION_INFO> EnumSessions (string ComputerName, bool All = false)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Int32 Count = 0;")
        [Void]$Code.AppendLine("      IntPtr Computer = IntPtr.Zero;")
        [Void]$Code.AppendLine("      IntPtr SessionInfo = IntPtr.Zero;")
        [Void]$Code.AppendLine("      Int32 DataSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      List<WTS_SESSION_INFO> SessionList = new List<WTS_SESSION_INFO>();")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      try")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Computer = WTSOpenServer(ComputerName);")
        [Void]$Code.AppendLine("        if (Computer !=IntPtr.Zero)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          Int64 RetValue = WTSEnumerateSessions(Computer, 0, 1, ref SessionInfo, ref Count);")
        [Void]$Code.AppendLine("          if (RetValue != 0)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            Int64 Start = (Int64)SessionInfo;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("            for (Int32 Index = 0; Index < Count; Index++)")
        [Void]$Code.AppendLine("            {")
        [Void]$Code.AppendLine("              WTS_SESSION_INFO SessionData = (WTS_SESSION_INFO)Marshal.PtrToStructure((System.IntPtr)(Start + (DataSize * Index)), typeof(WTS_SESSION_INFO));")
        [Void]$Code.AppendLine("              if ((SessionData.State == WTS_CONNECTSTATE_CLASS.WTSActive) | All)")
        [Void]$Code.AppendLine("              {")
        [Void]$Code.AppendLine("                SessionList.Add(SessionData);")
        [Void]$Code.AppendLine("              }")
        [Void]$Code.AppendLine("            }")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("          WTSFreeMemory(SessionInfo);")
        [Void]$Code.AppendLine("          WTSCloseServer(Computer);")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      catch")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      return SessionList;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
        [Void]$Code.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions()")
        [Void]$Code.AppendLine("#`$Sessions = [Login.Sessions]::EnumSessions(`"ComputerName`")")
        [Void]$Code.AppendLine("#endregion ================ [Login.Sessions] ================")
        [Void]$Code.AppendLine("")
        #endregion ********* [Login.Sessions] ********
        
        #region ********* [Impersonate.User] ********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> [Impersonate.User] <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("`$MyCode = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("namespace Impersonate")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  public enum LogonType")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    LOGON32_LOGON_INTERACTIVE = 2,")
        [Void]$Code.AppendLine("    LOGON32_LOGON_NETWORK = 3,")
        [Void]$Code.AppendLine("    LOGON32_LOGON_BATCH = 4,")
        [Void]$Code.AppendLine("    LOGON32_LOGON_SERVICE = 5,")
        [Void]$Code.AppendLine("    LOGON32_LOGON_UNLOCK = 7,")
        [Void]$Code.AppendLine("    LOGON32_LOGON_NETWORK_CLEARTEXT = 8, // Win2K or higher")
        [Void]$Code.AppendLine("    LOGON32_LOGON_NEW_CREDENTIALS = 9 // Win2K or higher")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public enum LogonProvider")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    LOGON32_PROVIDER_DEFAULT = 0,")
        [Void]$Code.AppendLine("    LOGON32_PROVIDER_WINNT35 = 1,")
        [Void]$Code.AppendLine("    LOGON32_PROVIDER_WINNT40 = 2,")
        [Void]$Code.AppendLine("    LOGON32_PROVIDER_WINNT50 = 3")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public class User")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [DllImport(`"advapi32.dll`", SetLastError = true, CharSet = CharSet.Unicode)]")
        [Void]$Code.AppendLine("    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr Token);")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("		[DllImport(`"kernel32.dll`", SetLastError = true)]")
        [Void]$Code.AppendLine("		public static extern bool CloseHandle(IntPtr hHandle);")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCode -Debug:`$False")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region Impersonate Example")
        [Void]$Code.AppendLine("#`$UserToken = [IntPtr]::Zero")
        [Void]$Code.AppendLine("#if ([Impersonate.User]::LogonUser(`$UserID, `$Domain, `$Password, 2, 0, [Ref]`$UserToken))")
        [Void]$Code.AppendLine("#{")
        [Void]$Code.AppendLine("#  Try")
        [Void]$Code.AppendLine("#  {")
        [Void]$Code.AppendLine("#    `$Impersonate = [System.Security.Principal.WindowsIdentity]::Impersonate(`$UserToken)")
        [Void]$Code.AppendLine("#    #region ******** Put Work Here ********")
        [Void]$Code.AppendLine("#    #endregion ******** Put Work Here ********")
        [Void]$Code.AppendLine("#  }")
        [Void]$Code.AppendLine("#  Catch")
        [Void]$Code.AppendLine("#  {")
        [Void]$Code.AppendLine("#  }")
        [Void]$Code.AppendLine("#  if (-not [String]::IsNullOrEmpty(`$Impersonate))")
        [Void]$Code.AppendLine("#  {")
        [Void]$Code.AppendLine("#    `$Impersonate.Undo()")
        [Void]$Code.AppendLine("#    `$Impersonate = `$Null")
        [Void]$Code.AppendLine("#  }")
        [Void]$Code.AppendLine("#  if (-not [String]::IsNullOrEmpty(`$Identity))")
        [Void]$Code.AppendLine("#  {")
        [Void]$Code.AppendLine("#    `$Identity.Dispose()")
        [Void]$Code.AppendLine("#    `$Identity = `$Null")
        [Void]$Code.AppendLine("#  }")
        [Void]$Code.AppendLine("#  [Void]([Impersonate.User]::CloseHandle(`$UserToken))")
        [Void]$Code.AppendLine("#  `$UserToken = `$Null")
        [Void]$Code.AppendLine("#}")
        [Void]$Code.AppendLine("#endregion Impersonate Example")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ [Impersonate.User] ================")
        [Void]$Code.AppendLine("")
        #endregion ********* [Impersonate.User] ********
        
        #region ******** function New-MyListItem *********
        [Void]$Code.AppendLine("#region function New-MyListItem")
        [Void]$Code.AppendLine("function New-MyListItem()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New ListItem for a ComboBox or ListBox Control")
        [Void]$Code.AppendLine("    .PARAMETER Control")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Value")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-MyListItem -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [Object]`$Control,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Value,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-MyListItem`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    If (`$PassThru)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    Else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Control.Items.Add(([PSCustomObject]@{`"Text`" = `$Text; `"Value`" = `$Value; `"Tag`" = `$Tag}))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$($("`$Error[0].Exception.Message"))`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-MyListItem`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-MyListItem")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function New-TreeNode *********
        [Void]$Code.AppendLine("#region function New-TreeNode")
        [Void]$Code.AppendLine("function New-TreeNode()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and adds a New TreeNode to a TreeView Node")
        [Void]$Code.AppendLine("    .PARAMETER TreeNode")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER FontStyle")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .PARAMETER ImageIndex")
        [Void]$Code.AppendLine("    .PARAMETER SelectedImageIndex")
        [Void]$Code.AppendLine("    .PARAMETER ToolTip")
        [Void]$Code.AppendLine("    .PARAMETER AtTop")
        [Void]$Code.AppendLine("    .PARAMETER Checked")
        [Void]$Code.AppendLine("    .PARAMETER Expand")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      New-TreeNode -TreeNode `$TreeNode -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Index`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [Object]`$TreeNode,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
        [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
        [Void]$Code.AppendLine("    [System.Drawing.FontStyle]`$FontStyle = `"Regular`",")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
        [Void]$Code.AppendLine("    [Int]`$ImageIndex = -1,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
        [Void]$Code.AppendLine("    [Int]`$SelectedImageIndex = -1,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
        [Void]$Code.AppendLine("    [String]`$ImageKey,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
        [Void]$Code.AppendLine("    [String]`$SelectedImageKey,")
        [Void]$Code.AppendLine("    [String]`$ToolTip,")
        [Void]$Code.AppendLine("    [switch]`$AtTop,")
        [Void]$Code.AppendLine("    [switch]`$Checked,")
        [Void]$Code.AppendLine("    [switch]`$Expand,")
        [Void]$Code.AppendLine("    [switch]`$AddChild,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-TreeNode`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempTreeNode = System.Windows.Forms.TreeNode")
        [Void]$Code.AppendLine("    if (`$AddChild.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode = New-Object -TypeName System.Windows.Forms.TreeNode(`$Text, [System.Windows.Forms.TreeNode[]](@(`"`$*`$`")))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode = New-Object -TypeName System.Windows.Forms.TreeNode(`$Text)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$AtTop.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$TreeNode.Nodes.Insert(0, `$TempTreeNode)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$TreeNode.Nodes.Add(`$TempTreeNode)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTreeNode.Checked = `$Checked.IsPresent")
        [Void]$Code.AppendLine("    `$TempTreeNode.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempTreeNode.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Name`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode.Name = `$Name")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode.Name = `$Text")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTreeNode.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempTreeNode.NodeFont = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, `$FontStyle, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"Index`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        if (`$ImageIndex -gt -1)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempTreeNode.ImageIndex = `$ImageIndex")
        [Void]$Code.AppendLine("          if (`$SelectedImageIndex -eq -1)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            `$TempTreeNode.SelectedImageIndex = `$ImageIndex")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("          else")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            `$TempTreeNode.SelectedImageIndex = `$SelectedImageIndex")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"Key`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempTreeNode.ImageKey = `$ImageKey")
        [Void]$Code.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"SelectedImageKey`"))")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempTreeNode.SelectedImageKey = `$SelectedImageKey")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempTreeNode.SelectedImageKey = `$ImageKey")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTreeNode.ToolTipText = `$ToolTip")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    if (`$Expand.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode.Expand()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    If (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTreeNode")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTreeNode = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-TreeNode`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-TreeNode")
        [Void]$Code.AppendLine("")
        #endregion
                
        #region ******** function New-MenuItem ********
        [Void]$Code.AppendLine("#region function New-MenuItem")
        [Void]$Code.AppendLine("function New-MenuItem()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuItem for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .PARAMETER Control")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("    .PARAMETER ToolTip")
        [Void]$Code.AppendLine("    .PARAMETER Icon")
        [Void]$Code.AppendLine("    .PARAMETER ImageIndex")
        [Void]$Code.AppendLine("    .PARAMETER ImageKey")
        [Void]$Code.AppendLine("    .PARAMETER DisplayStyle")
        [Void]$Code.AppendLine("    .PARAMETER Alignment")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER Disable")
        [Void]$Code.AppendLine("    .PARAMETER Check")
        [Void]$Code.AppendLine("    .PARAMETER ClickOnCheck")
        [Void]$Code.AppendLine("    .PARAMETER ShortcutKeys")
        [Void]$Code.AppendLine("    .PARAMETER Disable")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER FontStyle")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-MenuItem -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [Object]`$Menu,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [String]`$ToolTip,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Icon`")]")
        [Void]$Code.AppendLine("    [System.Drawing.Icon]`$Icon,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageIndex`")]")
        [Void]$Code.AppendLine("    [Int]`$ImageIndex,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ImageKey`")]")
        [Void]$Code.AppendLine("    [String]`$ImageKey,")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
        [Void]$Code.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [Switch]`$Disable,")
        [Void]$Code.AppendLine("    [Switch]`$Check,")
        [Void]$Code.AppendLine("    [Switch]`$ClickOnCheck,")
        [Void]$Code.AppendLine("    [System.Windows.Forms.Keys]`$ShortcutKeys = `"None`",")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = `$PUCConfig.FontFamily,")
        [Void]$Code.AppendLine("    [Int]`$FontSize = `$PUCConfig.FontSize,")
        [Void]$Code.AppendLine("    [System.Drawing.FontStyle]`$FontStyle = `"Regular`",")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = `$PUCColor.BackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = `$PUCColor.ForeColor,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuItem`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempMenuItem = System.Windows.Forms.ToolStripMenuItem")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$TempMenuItem`"")
        [Void]$Code.AppendLine("    `$TempMenuItem = New-Object -TypeName System.Windows.Forms.ToolStripMenuItem(`$Text)")
        [Void]$Code.AppendLine("    if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.DropDownItems.Add(`$TempMenuItem)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.Items.Add(`$TempMenuItem)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuItem.TextAlign = `$Alignment")
        [Void]$Code.AppendLine("    `$TempMenuItem.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempMenuItem.Checked = `$Check")
        [Void]$Code.AppendLine("    `$TempMenuItem.CheckOnClick = `$ClickOnCheck")
        [Void]$Code.AppendLine("    `$TempMenuItem.DisplayStyle = `$DisplayStyle")
        [Void]$Code.AppendLine("    `$TempMenuItem.Enabled = (-not `$Disable)")
        [Void]$Code.AppendLine("    `$TempMenuItem.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, `$FontStyle, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    `$TempMenuItem.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"Default`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `"Icon`"")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempMenuItem.Image = `$Icon")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        `"ImageIndex`"")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempMenuItem.ImageIndex = `$ImageIndex")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        `"ImageKey`"")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempMenuItem.ImageKey = `$ImageKey")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$TempMenuItem.ImageAlign = `$Alignment")
        [Void]$Code.AppendLine("      `$TempMenuItem.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Name`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuItem.Name = `$Name")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuItem.Name = `$Text")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuItem.ShortcutKeys = `$ShortcutKeys")
        [Void]$Code.AppendLine("    `$TempMenuItem.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempMenuItem.ToolTipText = `$ToolTip")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    If (`$PassThru)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuItem")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuItem = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuItem`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-MenuItem")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function New-MenuLabel ********
        [Void]$Code.AppendLine("#region function New-MenuLabel")
        [Void]$Code.AppendLine("function New-MenuLabel()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuLabel for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .PARAMETER Control")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("    .PARAMETER ToolTip")
        [Void]$Code.AppendLine("    .PARAMETER Icon")
        [Void]$Code.AppendLine("    .PARAMETER DisplayStyle")
        [Void]$Code.AppendLine("    .PARAMETER Alignment")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER Disable")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER FontStyle")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-MenuLabel -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [Object]`$Menu,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [String]`$ToolTip,")
        [Void]$Code.AppendLine("    [System.Drawing.Icon]`$Icon,")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ToolStripItemDisplayStyle]`$DisplayStyle = `"Text`",")
        [Void]$Code.AppendLine("    [System.Drawing.ContentAlignment]`$Alignment = `"MiddleCenter`",")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [Switch]`$Disable,")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
        [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
        [Void]$Code.AppendLine("    [System.Drawing.FontStyle]`$FontStyle = `"Regular`",")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuLabel`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempMenuLabel = System.Windows.Forms.ToolStripMenuLabel")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$TempMenuLabel`"")
        [Void]$Code.AppendLine("    `$TempMenuLabel = New-Object -TypeName System.Windows.Forms.ToolStripLabel(`$Text)")
        [Void]$Code.AppendLine("    if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.DropDownItems.Add(`$TempMenuLabel)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.Items.Add(`$TempMenuLabel)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuLabel.TextAlign = `$Alignment")
        [Void]$Code.AppendLine("    `$TempMenuLabel.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempMenuLabel.DisplayStyle = `$DisplayStyle")
        [Void]$Code.AppendLine("    `$TempMenuLabel.Enabled = (-not `$Disable)")
        [Void]$Code.AppendLine("    `$TempMenuLabel.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, `$FontStyle, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    `$TempMenuLabel.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Icon`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuLabel.Image = `$Icon")
        [Void]$Code.AppendLine("      `$TempMenuLabel.ImageAlign = `$Alignment")
        [Void]$Code.AppendLine("      `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::ImageBeforeText")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuLabel.TextImageRelation = [System.Windows.Forms.TextImageRelation]::TextBeforeImage")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Name`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuLabel.Name = `$Name")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("        `$TempMenuLabel.Name = `$Text")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuLabel.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempMenuLabel.ToolTipText = `$ToolTip")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    If (`$PassThru)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempMenuLabel")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempMenuLabel = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuLabel`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-MenuLabel")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function New-MenuSeparator ********
        [Void]$Code.AppendLine("#region function New-MenuSeparator")
        [Void]$Code.AppendLine("function New-MenuSeparator()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New MenuSeparator for a Menu or ToolStrip Control")
        [Void]$Code.AppendLine("    .PARAMETER Menu")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      New-MenuSeparator -Menu `$Menu")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [Object]`$Menu,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-MenuSeparator`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempSeparator = System.Windows.Forms.ToolStripSeparator")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$TempSeparator`"")
        [Void]$Code.AppendLine("    `$TempSeparator = New-Object -TypeName System.Windows.Forms.ToolStripSeparator")
        [Void]$Code.AppendLine("    if (`$Menu.GetType().Name -eq `"ToolStripMenuItem`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.DropDownItems.Add(`$TempSeparator)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Menu.Items.Add(`$TempSeparator)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempSeparator.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempSeparator.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    `$TempSeparator.Name = `"TempSeparator`"")
        [Void]$Code.AppendLine("    `$TempSeparator.Text = `"TempSeparator`"")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    `$TempSeparator = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-MenuSeparator`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-MenuSeparator")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** ListViewItem Functions *******
        [Void]$Code.AppendLine("#region function New-ListViewItem")
        [Void]$Code.AppendLine("function New-ListViewItem()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and adds a New ListViewItem to a ListView Control")
        [Void]$Code.AppendLine("    .PARAMETER ListView")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER FontStyle")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER SubItems")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER IndentCount")
        [Void]$Code.AppendLine("    .PARAMETER ImageIndex")
        [Void]$Code.AppendLine("    .PARAMETER Imagekey")
        [Void]$Code.AppendLine("    .PARAMETER Group")
        [Void]$Code.AppendLine("    .PARAMETER ToolTip")
        [Void]$Code.AppendLine("    .PARAMETER Checked")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-ListViewItem -ListView `$listView -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
        [Void]$Code.AppendLine("    [String]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
        [Void]$Code.AppendLine("    [System.Drawing.FontStyle]`$FontStyle = `"Regular`",")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [String[]]`$SubItems,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Index`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Key`")]")
        [Void]$Code.AppendLine("    [Int]`$IndentCount = 0,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Index`")]")
        [Void]$Code.AppendLine("    [Int]`$ImageIndex = -1,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Key`")]")
        [Void]$Code.AppendLine("    [String]`$ImageKey,")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ListViewGroup]`$Group,")
        [Void]$Code.AppendLine("    [String]`$ToolTip,")
        [Void]$Code.AppendLine("    [Switch]`$Checked,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewItem`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempListViewItem = System.Windows.Forms.ListViewItem")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Default`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempListViewItem = New-Object -TypeName System.Windows.Forms.ListViewItem(`$Text, `$Group)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$PSCmdlet.ParameterSetName -eq `"Index`")")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempListViewItem = New-Object -TypeName System.Windows.Forms.ListViewItem(`$Text, `$ImageIndex, `$Group)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      else")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempListViewItem = New-Object -TypeName System.Windows.Forms.ListViewItem(`$Text, `$ImageKey, `$Group)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$TempListViewItem.IndentCount = `$IndentCount")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempListViewItem.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempListViewItem.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    `$TempListViewItem.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, `$FontStyle, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Name`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempListViewItem.Name = `$Name")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempListViewItem.Name = `$Text")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempListViewItem.Tag = `$Tag")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"SubItems`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempListViewItem.SubItems.AddRange(`$SubItems)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempListViewItem.ToolTipText = `$ToolTip")
        [Void]$Code.AppendLine("    `$TempListViewItem.Checked = `$Checked.IsPresent")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    [Void]`$ListView.Items.Add(`$TempListViewItem)")
        [Void]$Code.AppendLine("    If (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempListViewItem")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempListViewItem = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewItem`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-ListViewItem")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function New-ColumnHeader")
        [Void]$Code.AppendLine("function New-ColumnHeader()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New ColumnHeader for a ListView Control")
        [Void]$Code.AppendLine("    .PARAMETER ListView")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER Width")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-ColumnHeader -Text `"Text`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [Int]`$Width = -2,")
        [Void]$Code.AppendLine("    [switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-ColumnHeader`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempColumnHeader = System.Windows.Forms.ColumnHeader")
        [Void]$Code.AppendLine("    `$TempColumnHeader = New-Object -TypeName System.Windows.Forms.ColumnHeader")
        [Void]$Code.AppendLine("    [Void]`$ListView.Columns.Add(`$TempColumnHeader)")
        [Void]$Code.AppendLine("    `$TempColumnHeader.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempColumnHeader.Text = `$Text")
        [Void]$Code.AppendLine("    `$TempColumnHeader.Name = `$Text")
        [Void]$Code.AppendLine("    `$TempColumnHeader.Width = `$Width")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    If (`$PassThru)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempColumnHeader")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempColumnHeader = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$($("`$Error[0].Exception.Message"))`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-ColumnHeader`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-ColumnHeader")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function New-ListViewGroup")
        [Void]$Code.AppendLine("function New-ListViewGroup()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and Adds a New ListViewGroup to a ListView Control")
        [Void]$Code.AppendLine("    .PARAMETER Header")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER Alignment")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$NewItem = New-ListViewGroup -Header `"Header`" -Tag `"Tag`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [System.Windows.Forms.ListView]`$ListView,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Header,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [System.Windows.Forms.HorizontalAlignment]`$Alignment = `"Left`"")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-ListViewGroup`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempListViewGroup = System.Windows.Forms.ListViewGroup")
        [Void]$Code.AppendLine("    `$TempListViewGroup = New-Object -TypeName System.Windows.Forms.ListViewGroup")
        [Void]$Code.AppendLine("    [Void]`$ListView.Groups.Add(`$TempListViewGroup)")
        [Void]$Code.AppendLine("    `$TempListViewGroup.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempListViewGroup.Header = `$Header")
        [Void]$Code.AppendLine("    `$TempListViewGroup.Name = `$Header")
        [Void]$Code.AppendLine("    `$TempListViewGroup.HeaderAlignment = `$Alignment")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    `$TempListViewGroup")
        [Void]$Code.AppendLine("    `$TempListViewGroup = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$($("`$Error[0].Exception.Message"))`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-ListViewGroup`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-ListViewGroup")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function New-TabPage *******
        [Void]$Code.AppendLine("#region function New-TabPage")
        [Void]$Code.AppendLine("function New-TabPage()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Makes and adds a New TabPage to a TabControl Node")
        [Void]$Code.AppendLine("    .PARAMETER TabControl")
        [Void]$Code.AppendLine("    .PARAMETER BackColor")
        [Void]$Code.AppendLine("    .PARAMETER ForeColor")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER Text")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("    .PARAMETER Tag")
        [Void]$Code.AppendLine("    .PARAMETER ImageIndex")
        [Void]$Code.AppendLine("    .PARAMETER ToolTip")
        [Void]$Code.AppendLine("    .PARAMETER Disabled")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$TabPage = New-TabPage -TabControl $TabControl -Text `"Text`" -Tag `"Tag`" -PassThru")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param(")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [System.Windows.Forms.TabControl]`$TabControl,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
        [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
        [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Text,")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [Object]`$Tag,")
        [Void]$Code.AppendLine("    [Int]`$ImageIndex = -1,")
        [Void]$Code.AppendLine("    [String]`$ToolTip,")
        [Void]$Code.AppendLine("    [Switch]`$Disabled,")
        [Void]$Code.AppendLine("    [Switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-TabPage`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    #region `$TempTabPage = System.Windows.Forms.TabPage")
        [Void]$Code.AppendLine("    `$TempTabPage = New-Object -TypeName System.Windows.Forms.TabPage")
        [Void]$Code.AppendLine("    `$TabControl.Controls.Add(`$TempTabPage)")
        [Void]$Code.AppendLine("    `$TempTabPage.BackColor = `$BackColor")
        [Void]$Code.AppendLine("    `$TempTabPage.ForeColor = `$ForeColor")
        [Void]$Code.AppendLine("    `$TempTabPage.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    `$TempTabPage.ImageIndex = `$ImageIndex")
        [Void]$Code.AppendLine("    If (`$PSBoundParameters.ContainsKey(`"Name`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTabPage.Name = `$Name")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTabPage.Name = `$Text")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTabPage.Tag = `$Tag")
        [Void]$Code.AppendLine("    `$TempTabPage.Text = `$Text")
        [Void]$Code.AppendLine("    `$TempTabPage.ToolTipText = `$ToolTip")
        [Void]$Code.AppendLine("    `$TempTabPage.Enabled = (-not `$Disabled)")
        [Void]$Code.AppendLine("    #endregion")
        [Void]$Code.AppendLine("    If (`$PassThru)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempTabPage")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempTabPage = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$($("`$Error[0].Exception.Message"))`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-TabPage`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function New-TabPage")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function Set-MyClipBoard ********
        [Void]$Code.AppendLine("#region function Set-MyClipboard")
        [Void]$Code.AppendLine("function Set-MyClipboard()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Copies Object Data to the ClipBoard")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Copies Object Data to the ClipBoard")
        [Void]$Code.AppendLine("    .PARAMETER MyData")
        [Void]$Code.AppendLine("    .PARAMETER Title")
        [Void]$Code.AppendLine("    .PARAMETER TitleColor")
        [Void]$Code.AppendLine("    .PARAMETER Columns")
        [Void]$Code.AppendLine("    .PARAMETER ColumnColor")
        [Void]$Code.AppendLine("    .PARAMETER RowEven")
        [Void]$Code.AppendLine("    .PARAMETER RowOdd")
        [Void]$Code.AppendLine("    .PARAMETER OfficeFix")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyClipBoard -MyData `$MyData -Title `"This is My Title`"")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyData | Set-MyClipBoard -Title `"This is My Title`"")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyClipBoard -MyData `$MyData -Title `"This is My Title`" -Property `"Property1`", `"Property2`", `"Property3`"")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyClipBoard -MyData `$MyData -Title `"This is My Title`" -Columns ([Ordered@{`"Property1`" = `"Left`"; `"Property2`" = `"Right`"; `"Property3`" = `"Center`"})")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True)]")
        [Void]$Code.AppendLine("    [Object[]]`$MyData,")
        [Void]$Code.AppendLine("    [String]`$Title,")
        [Void]$Code.AppendLine("    [String]`$TitleColor = `"DodgerBlue`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Columns`")]")
        [Void]$Code.AppendLine("    [System.Collections.Specialized.OrderedDictionary]`$Columns,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Names`")]")
        [Void]$Code.AppendLine("    [String[]]`$Property,")
        [Void]$Code.AppendLine("    [String]`$ColumnColor = `"SkyBlue`",")
        [Void]$Code.AppendLine("    [String]`$RowEven = `"White`",")
        [Void]$Code.AppendLine("    [String]`$RowOdd = `"Gainsboro`",")
        [Void]$Code.AppendLine("    [Switch]`$OfficeFix,")
        [Void]$Code.AppendLine("    [Switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Begin Block`"")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    `$HTMLStringBuilder = New-Object -TypeName System.Text.StringBuilder")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"Version:1.0``r``nStartHTML:000START``r``nEndHTML:00000END``r``nStartFragment:00FSTART``r``nEndFragment:0000FEND``r``n`")")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"000START`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<html><head><style>``r``nth { text-align: center; color: black; font: bold; background:`$ColumnColor; }``r``ntd:nth-child(1) { text-align:right; }``r``ntable, th, td { border: 1px solid black; border-collapse: collapse; }``r``ntr:nth-child(odd) {background: `$RowEven;}``r``ntr:nth-child(`$RowOdd) {background: gainsboro;}``r``n</style><title>`$Title</title></head><body><!--StartFragment-->`")")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00FSTART`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    `$ObjectList = New-Object -TypeName System.Collections.ArrayList")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    `$GetColumns = `$True")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard Process Block`"")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    if (`$GetColumns)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$Cols = [Ordered]@{ }")
        [Void]$Code.AppendLine("      Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `"Columns`"")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$Cols = `$Columns")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        `"Names`"")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$Property | ForEach-Object -Process { `$Cols.Add(`$PSItem, `"Left`") }")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        Default")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$MyData[0].PSObject.Properties | Where-Object -FilterScript { `$PSItem.MemberType -match `"Property|NoteProperty`" } | ForEach-Object -Process { `$Cols.Add(`$PSItem.Name, `"Left`") }")
        [Void]$Code.AppendLine("          Break")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$ColNames = @(`$Cols.Keys)")
        [Void]$Code.AppendLine("      `$GetColumns = `$False")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    `$ObjectList.AddRange(@(`$MyData | Select-Object -Property `$ColNames))")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    if (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MyData")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Set-MyClipboard End Block`"")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    if (`$OfficeFix.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Title`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$HTMLStringBuilder.Append(`"<table><tr><th style='background:`$TitleColor;' colspan='`$(`$Cols.Keys.Count)'>&nbsp;`$(`$Title)&nbsp;</th></tr>`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      else")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$HTMLStringBuilder.Append(`"<table>`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      [Void]`$HTMLStringBuilder.Append((`"<tr style='background:`$ColumnColor;'><th>&nbsp;`" + (`$Cols.Keys -join `"&nbsp;</th><th>&nbsp;`") + `"&nbsp;</th></tr>`"))")
        [Void]$Code.AppendLine("      `$Row = -1")
        [Void]$Code.AppendLine("      `$RowColor = @(`$RowEven, `$RowOdd)")
        [Void]$Code.AppendLine("      ForEach (`$Item in `$ObjectList)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$HTMLStringBuilder.Append(`"<tr style='background: `$(`$RowColor[(`$Row = (`$Row + 1) % 2)])'>`")")
        [Void]$Code.AppendLine("        ForEach (`$Key in `$Cols.Keys)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          [Void]`$HTMLStringBuilder.Append(`"<td style='text-align:`$(`$Cols[`$Key])'>&nbsp;`$(`$Item.`$Key)&nbsp;</td>`")")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        [Void]`$HTMLStringBuilder.Append(`"</tr>`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      [Void]`$HTMLStringBuilder.Append(`"</table><br><br>`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$HTMLStringBuilder.Append((`$ObjectList | ConvertTo-Html -Property `$ColNames -Fragment | Out-String))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"0000FEND`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Append(`"<!--EndFragment--></body></html>`")")
        [Void]$Code.AppendLine("    [Void]`$HTMLStringBuilder.Replace(`"00000END`", (`"{0:X8}`" -f `$HTMLStringBuilder.Length))")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    [System.Windows.Forms.Clipboard]::Clear()")
        [Void]$Code.AppendLine("    `$DataObject = New-Object -TypeName System.Windows.Forms.DataObject")
        [Void]$Code.AppendLine("    `$DataObject.SetData(`"Text`", (`$ObjectList | Select-Object -Property `$ColNames | ConvertTo-Csv -NoTypeInformation | Out-String))")
        [Void]$Code.AppendLine("    `$DataObject.SetData(`"HTML Format`", `$HTMLStringBuilder.ToString())")
        [Void]$Code.AppendLine("    [System.Windows.Forms.Clipboard]::SetDataObject(`$DataObject)")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    `$ObjectList = `$Null")
        [Void]$Code.AppendLine("    `$HTMLStringBuilder = `$Null")
        [Void]$Code.AppendLine("    `$DataObject = `$Null")
        [Void]$Code.AppendLine("    `$Cols = `$Null")
        [Void]$Code.AppendLine("    `$ColNames = `$Null")
        [Void]$Code.AppendLine("    `$Row = `$Null")
        [Void]$Code.AppendLine("    `$RowColor = `$Null")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("    ")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Set-MyClipboard End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Set-MyClipboard")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function Send-MyEMail ********
        [Void]$Code.AppendLine("#region function Send-MyEMail")
        [Void]$Code.AppendLine("function Send-MyEMail()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Sends an E-mail")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Sends an E-mail")
        [Void]$Code.AppendLine("    .PARAMETER SMTPServer")
        [Void]$Code.AppendLine("    .PARAMETER SMTPPort")
        [Void]$Code.AppendLine("    .PARAMETER To")
        [Void]$Code.AppendLine("    .PARAMETER From")
        [Void]$Code.AppendLine("    .PARAMETER Subject")
        [Void]$Code.AppendLine("    .PARAMETER Body")
        [Void]$Code.AppendLine("    .PARAMETER MsgFile")
        [Void]$Code.AppendLine("    .PARAMETER IsHTML")
        [Void]$Code.AppendLine("    .PARAMETER CC")
        [Void]$Code.AppendLine("    .PARAMETER BCC")
        [Void]$Code.AppendLine("    .PARAMETER Attachments")
        [Void]$Code.AppendLine("    .PARAMETER Priority")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$SMTPServer = $($CGenConfig.ToolName)Config.SMTPServer,")
        [Void]$Code.AppendLine("    [Int]`$SMTPPort = $($CGenConfig.ToolName)Config.SMTPPort,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True, HelpMessage = `"Enter To`")]")
        [Void]$Code.AppendLine("    [System.Net.Mail.MailAddress[]]`$To,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter From`")]")
        [Void]$Code.AppendLine("    [System.Net.Mail.MailAddress]`$From,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Subject`")]")
        [Void]$Code.AppendLine("    [String]`$Subject,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, HelpMessage = `"Enter Message Text`")]")
        [Void]$Code.AppendLine("    [String]`$Body,")
        [Void]$Code.AppendLine("    [Switch]`$IsHTML,")
        [Void]$Code.AppendLine("    [System.Net.Mail.MailAddress[]]`$CC,")
        [Void]$Code.AppendLine("    [System.Net.Mail.MailAddress[]]`$BCC,")
        [Void]$Code.AppendLine("    [System.Net.Mail.Attachment[]]`$Attachment,")
        [Void]$Code.AppendLine("    [ValidateSet(`"Low`", `"Normal`", `"High`")]")
        [Void]$Code.AppendLine("    [System.Net.Mail.MailPriority]`$Priority = `"Normal`"")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin ")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Begin`"")
        [Void]$Code.AppendLine("    `$MyMessage = New-Object -TypeName System.Net.Mail.MailMessage")
        [Void]$Code.AppendLine("    `$MyMessage.From = `$From")
        [Void]$Code.AppendLine("    `$MyMessage.Subject = `$Subject")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"CC`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      foreach (`$SendCC in `$CC) ")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$MyMessage.CC.Add(`$SendCC)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"BCC`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      foreach (`$SendBCC in `$BCC) ")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$MyMessage.BCC.Add(`$SendBCC)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if ([System.IO.File]::Exists(`$Body)) ")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MyMessage.Body = `$([System.IO.File]::ReadAllText(`$Body))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MyMessage.Body = `$Body")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$MyMessage.IsBodyHtml = `$IsHTML")
        [Void]$Code.AppendLine("    `$MyMessage.Priority = `$Priority")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Attachment`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      foreach (`$AttachedFile in `$Attachment) ")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$MyMessage.Attachments.Add(`$AttachedFile)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Begin`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process ")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail Process`"")
        [Void]$Code.AppendLine("    `$MyMessage.To.Clear()")
        [Void]$Code.AppendLine("    foreach (`$SendTo in `$To) ")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MyMessage.To.Add(`$SendTo)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$SMTPClient = New-Object -TypeName System.Net.Mail.SmtpClient(`$SMTPServer, `$SMTPPort)")
        [Void]$Code.AppendLine("    `$SMTPClient.Send(`$MyMessage)")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail Process`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End ")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Send-MyEMail End`"")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Send-MyEMail End`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Send-MyEMail")
        [Void]$Code.AppendLine("")
#endregion

        #region ******** function Get-MyADObject ********
        [Void]$Code.AppendLine("#region function Get-MyADObject")
        [Void]$Code.AppendLine("function Get-MyADObject()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Searches AD and returns an AD SearchResultCollection ")
        [Void]$Code.AppendLine("    .PARAMETER LDAPFilter")
        [Void]$Code.AppendLine("      AD Search LDAP Filter")
        [Void]$Code.AppendLine("    .PARAMETER PageSize")
        [Void]$Code.AppendLine("      Search Page Size")
        [Void]$Code.AppendLine("    .PARAMETER SizeLimit")
        [Void]$Code.AppendLine("      Search Search Size")
        [Void]$Code.AppendLine("    .PARAMETER SearchRoot")
        [Void]$Code.AppendLine("      Starting Search OU")
        [Void]$Code.AppendLine("    .PARAMETER ServerName")
        [Void]$Code.AppendLine("      Name of DC or Domain to query")
        [Void]$Code.AppendLine("    .PARAMETER SearchScope")
        [Void]$Code.AppendLine("      Search Scope")
        [Void]$Code.AppendLine("    .PARAMETER Sort")
        [Void]$Code.AppendLine("      Sort Direction")
        [Void]$Code.AppendLine("    .PARAMETER SortProperty")
        [Void]$Code.AppendLine("      Property to Sort By")
        [Void]$Code.AppendLine("    .PARAMETER PropertiesToLoad")
        [Void]$Code.AppendLine("      Properties to Load")
        [Void]$Code.AppendLine("    .PARAMETER UserName")
        [Void]$Code.AppendLine("      User Name to use when searching active directory")
        [Void]$Code.AppendLine("    .PARAMETER Password")
        [Void]$Code.AppendLine("      Password to use when searching active directory")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Get-MyADObject [<String>]")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Get-MyADObject -filter [<String>]")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$LDAPFilter = `"(objectClass=*)`",")
        [Void]$Code.AppendLine("    [Long]`$PageSize = 1000,")
        [Void]$Code.AppendLine("    [Long]`$SizeLimit = 1000,")
        [Void]$Code.AppendLine("    [String]`$SearchRoot = `"LDAP://`$(`$([ADSI]'').distinguishedName)`",")
        [Void]$Code.AppendLine("    [String]`$ServerName,")
        [Void]$Code.AppendLine("    [ValidateSet(`"Base`", `"OneLevel`", `"Subtree`")]")
        [Void]$Code.AppendLine("    [System.DirectoryServices.SearchScope]`$SearchScope = `"SubTree`",")
        [Void]$Code.AppendLine("    [ValidateSet(`"Ascending`", `"Descending`")]")
        [Void]$Code.AppendLine("    [System.DirectoryServices.SortDirection]`$Sort = `"Ascending`",")
        [Void]$Code.AppendLine("    [String]`$SortProperty,")
        [Void]$Code.AppendLine("    [String[]]`$PropertiesToLoad,")
        [Void]$Code.AppendLine("    [String]`$UserName,")
        [Void]$Code.AppendLine("    [String]`$Password")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyADObject`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$MySearcher = New-Object -TypeName System.DirectoryServices.DirectorySearcher")
        [Void]$Code.AppendLine("    `$MySearcher.PageSize = `$PageSize")
        [Void]$Code.AppendLine("    `$MySearcher.SizeLimit = `$SizeLimit")
        [Void]$Code.AppendLine("    `$MySearcher.Filter = `$LDAPFilter")
        [Void]$Code.AppendLine("    `$MySearcher.SearchScope = `$SearchScope")
        [Void]$Code.AppendLine("    `$TempSearchRoot = `$SearchRoot.ToUpper()")
        [Void]$Code.AppendLine("    Switch -regex (`$TempSearchRoot)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"(?:LDAP|GC)://*`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$MySearchRoot = `$TempSearchRoot -replace `"(?<LG>(?:LDAP|GC)://)(?:[\w\d\.-]+/)?(?<DN>.+)`", `"```${LG}`$ServerName/```${DN}`"")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$MySearchRoot = `$TempSearchRoot")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      Default")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"ServerName`"))")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$MySearchRoot = `"LDAP://`$ServerName/`$TempSearchRoot`"")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$MySearchRoot = `"LDAP://`$TempSearchRoot`"")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"UserName`") -and `$PSBoundParameters.ContainsKey(`"Password`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MySearcher.SearchRoot = New-Object -TypeName System.DirectoryServices.DirectoryEntry(`$MySearchRoot, `$UserName, `$Password)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MySearcher.SearchRoot = New-Object -TypeName System.DirectoryServices.DirectoryEntry(`$MySearchRoot)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"SortProperty`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MySearcher.Sort.PropertyName = `$SortProperty")
        [Void]$Code.AppendLine("      `$MySearcher.Sort.Direction = `$Sort")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"PropertiesToLoad`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$MySearcher.PropertiesToLoad.AddRange(`$PropertiesToLoad)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$MySearcher.FindAll()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$MySearcher.Dispose()")
        [Void]$Code.AppendLine("    `$MySearcher = `$Null")
        [Void]$Code.AppendLine("    `$MySearchRoot = `$Null")
        [Void]$Code.AppendLine("    `$TempSearchRoot = `$Null")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyADObject`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion  function Get-MyADObject")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function Translate-DomainName ********
        [Void]$Code.AppendLine("#region function Translate-DomainName")
        [Void]$Code.AppendLine("function Translate-DomainName()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("    .PARAMETER List")
        [Void]$Code.AppendLine("    .PARAMETER Filter")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_1779 = 1")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_CANONICAL = 2")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_NT4 = 3")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_DISPLAY = 4")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_DOMAIN_SIMPLE = 5")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_GUID = 7")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_UNKNOWN = 8")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_CANONICAL_EX = 10")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11")
        [Void]$Code.AppendLine("      ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"ByDN`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByDN`")]")
        [Void]$Code.AppendLine("    [String]`$DN,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"ByFQDN`")]")
        [Void]$Code.AppendLine("    [String]`$FQDN")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Translate-DomainName`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$NameTranslate = New-Object -ComObject `"NameTranslate`"")
        [Void]$Code.AppendLine("    [System.Void]([System.__ComObject].InvokeMember(`"Init`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (3, `$Null)))")
        [Void]$Code.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"ByDN`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (1, `$DN)))")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"ByFQDN`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [System.Void]([System.__ComObject].InvokeMember(`"Set`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, (2, `"`$FQDN/`")))")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    [PSCustomObject]@{")
        [Void]$Code.AppendLine("      `"DN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 1));")
        [Void]$Code.AppendLine("      `"FQDN`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 2)).Trim('/');")
        [Void]$Code.AppendLine("      `"NetBIOS`" = ([System.__ComObject].InvokeMember(`"Get`", [System.Reflection.BindingFlags]::InvokeMethod, `$Null, `$NameTranslate, 3)).Trim('\')")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$NameTranslate = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Translate-DomainName`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion ******** function Translate-DomainName ********
        
        #region ******** function Validate-MyADAccount ********
        [Void]$Code.AppendLine("#region function Validate-MyADAccount")
        [Void]$Code.AppendLine("function Validate-MyADAccount()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Validates AD Credentials")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Validates AD Credentials")
        [Void]$Code.AppendLine("    .PARAMETER Domain")
        [Void]$Code.AppendLine("    .PARAMETER UserName")
        [Void]$Code.AppendLine("    .PARAMETER Password")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Validate-MyADAccount -Domain <String> -UserName <String> -Password <String>")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Validate-MyADAccount -UserName <String> -Password <String>")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Validate-MyADAccount -Password <String>")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$Domain = [System.Environment]::UserDomainName,")
        [Void]$Code.AppendLine("    [String]`$UserName = [System.Environment]::UserName,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Password")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Validate-MyADAccount`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]`"System.DirectoryServices.AccountManagement.ContextType`").Type))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [void][System.Reflection.Assembly]::LoadWithPartialName(`"System.DirectoryServices.AccountManagement`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    (New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, `$Domain)).ValidateCredentials(`$UserName, `$Password)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$False")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Validate-MyADAccount`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion ******** function Validate-MyADAccount ********
        
        #region ******** function New-MyComObject ********
        [Void]$Code.AppendLine("#region function New-MyComObject")
        [Void]$Code.AppendLine("function New-MyComObject()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates Local and Remote COMObjects")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Creates Local and Remote COMObjects")
        [Void]$Code.AppendLine("    .PARAMETER ComputerName")
        [Void]$Code.AppendLine("    .PARAMETER ComObject")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      New-MyComObject -ComObject <String>")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      New-MyComObject -ComputerName <String> -ComObject <String>")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$ComputerName = [System.Environment]::MachineName,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$COMObject")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-MyComObject`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [Activator]::CreateInstance([Type]::GetTypeFromProgID(`$COMObject, `$ComputerName))")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-MyComObject`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion ******** function New-MyComObject ********
        
        #region ******** Function Compress / Decompress Data ********
        [Void]$Code.AppendLine("#region function Compress-MyData")
        [Void]$Code.AppendLine("function Compress-MyData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Compress String Data")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Compress String Data")
        [Void]$Code.AppendLine("    .PARAMETER Data")
        [Void]$Code.AppendLine("      Data to Compress")
        [Void]$Code.AppendLine("    .PARAMETER LineLength")
        [Void]$Code.AppendLine("      Max Line Length")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Compress-MyData -Data `"String`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Data,")
        [Void]$Code.AppendLine("    [Int]`$LineLength = 160")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Compress-MyData`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$MemoryStream = New-Object -TypeName System.IO.MemoryStream")
        [Void]$Code.AppendLine("    `$GZipStream = New-Object -TypeName System.IO.Compression.GZipStream(`$MemoryStream, [System.IO.Compression.CompressionMode]::Compress)")
        [Void]$Code.AppendLine("    `$StreamWriter = New-Object -TypeName System.IO.StreamWriter(`$GZipStream, [System.Text.Encoding]::UTF8)")
        [Void]$Code.AppendLine("    `$StreamWriter.Write(`$Data)")
        [Void]$Code.AppendLine("    `$StreamWriter.Close()")
        [Void]$Code.AppendLine("    `$Code = New-Object -TypeName System.Text.StringBuilder")
        [Void]$Code.AppendLine("    ForEach (`$Line in @([System.Convert]::ToBase64String(`$MemoryStream.ToArray()) -split `"(?<=\G.{`$LineLength})(?=.)`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$Code.AppendLine(`$Line)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$Code.ToString()")
        [Void]$Code.AppendLine("    `$GZipStream.Close()")
        [Void]$Code.AppendLine("    `$MemoryStream.Close()")
        [Void]$Code.AppendLine("    `$MemoryStream = `$Null")
        [Void]$Code.AppendLine("    `$GZipStream = `$Null")
        [Void]$Code.AppendLine("    `$StreamWriter = `$Null")
        [Void]$Code.AppendLine("    `$Code = `$Null")
        [Void]$Code.AppendLine("    `$Line = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Compress-MyData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Compress-MyData")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Decompress-MyData")
        [Void]$Code.AppendLine("function Decompress-MyData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Decompress Compresed String Data")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Decompress Compresed String Data")
        [Void]$Code.AppendLine("    .PARAMETER Data")
        [Void]$Code.AppendLine("      Data to Decompress")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Decompress-MyData -Data `"String`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Data,")
        [Void]$Code.AppendLine("    [Switch]`$AsString")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Decompress-MyData`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$CompressedData = [System.Convert]::FromBase64String(`$Data)")
        [Void]$Code.AppendLine("    `$MemoryStream = New-Object -TypeName System.IO.MemoryStream")
        [Void]$Code.AppendLine("    `$MemoryStream.Write(`$CompressedData, 0, `$CompressedData.Length)")
        [Void]$Code.AppendLine("    [Void]`$MemoryStream.Seek(0, 0)")
        [Void]$Code.AppendLine("    `$GZipStream = New-Object -TypeName System.IO.Compression.GZipStream(`$MemoryStream, [System.IO.Compression.CompressionMode]::Decompress)")
        [Void]$Code.AppendLine("    `$StreamReader = New-Object -TypeName System.IO.StreamReader(`$GZipStream, [System.Text.Encoding]::UTF8)")
        [Void]$Code.AppendLine("    if (`$AsString.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$StreamReader.ReadToEnd()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$ArrayList = New-Object -TypeName System.Collections.ArrayList")
        [Void]$Code.AppendLine("      `$Buffer = New-Object -TypeName System.Char[] -ArgumentList 4096")
        [Void]$Code.AppendLine("      While (`$StreamReader.EndOfStream -eq `$False)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Bytes = `$StreamReader.Read(`$Buffer, 0, 4096)")
        [Void]$Code.AppendLine("        if (`$Bytes)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$ArrayList.AddRange(`$Buffer[0..(`$Bytes - 1)])")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$ArrayList")
        [Void]$Code.AppendLine("      `$ArrayList.Clear()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$StreamReader.Close()")
        [Void]$Code.AppendLine("    `$GZipStream.Close()")
        [Void]$Code.AppendLine("    `$MemoryStream.Close()")
        [Void]$Code.AppendLine("    `$MemoryStream = `$Null")
        [Void]$Code.AppendLine("    `$GZipStream = `$Null")
        [Void]$Code.AppendLine("    `$StreamReader = `$Null")
        [Void]$Code.AppendLine("    `$CompressedData = `$Null")
        [Void]$Code.AppendLine("    `$ArrayList = `$Null")
        [Void]$Code.AppendLine("    `$Buffer = `$Null")
        [Void]$Code.AppendLine("    `$Bytes = `$Null")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Decompress-MyData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Decompress-MyData")
        [Void]$Code.AppendLine("")
        #endregion ******** Function Compress / Decompress Data ********
        
        #region ******** function Encrypt/Decrypt MyTextString ********
        [Void]$Code.AppendLine("#region function Encrypt-MyTextString")
        [Void]$Code.AppendLine("function Encrypt-MyTextString()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Encrypts a Password for use in a Script")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Encrypts a Password for use in a Script")
        [Void]$Code.AppendLine("    .PARAMETER Password")
        [Void]$Code.AppendLine("      Password to be Encrypted")
        [Void]$Code.AppendLine("    .PARAMETER ProtectionScope")
        [Void]$Code.AppendLine("      Who can Decrypt")
        [Void]$Code.AppendLine("        Currentuser = = Specific User")
        [Void]$Code.AppendLine("        LocalMachine = = Any User")
        [Void]$Code.AppendLine("    .PARAMETER EncryptKey")
        [Void]$Code.AppendLine("      Option Extra Encryption Security")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Encrypt-MyTextString -Password `"Password`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Password,")
        [Void]$Code.AppendLine("    [ValidateSet(`"LocalMachine`", `"CurrentUser`")]")
        [Void]$Code.AppendLine("    [System.Security.Cryptography.DataProtectionScope]`$ProtectionScope = `"CurrentUser`",")
        [Void]$Code.AppendLine("    [String]`$EncryptKey = `$Null")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Encrypt-MyTextString`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]`"System.Security.Cryptography.ProtectedData`").Type))")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Add-Type -AssemblyName System.Security -Debug:`$False")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"EncryptKey`"))")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes(`$EncryptKey)")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$OptionalEntropy = `$Null")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  `$TempData = [System.Text.Encoding]::ASCII.GetBytes(`$Password)")
        [Void]$Code.AppendLine("  `$EncryptedData = [System.Security.Cryptography.ProtectedData]::Protect(`$TempData, `$OptionalEntropy, `$ProtectionScope)")
        [Void]$Code.AppendLine("  [System.Convert]::ToBase64String(`$EncryptedData)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Encrypt-MyTextString`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Encrypt-MyTextString")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Decrypt-MyTextString")
        [Void]$Code.AppendLine("function Decrypt-MyTextString()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Decrypts a Password for use in a Script")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Decrypts a Password for use in a Script")
        [Void]$Code.AppendLine("    .PARAMETER Password")
        [Void]$Code.AppendLine("      Password to be Decrypted")
        [Void]$Code.AppendLine("    .PARAMETER ProtectionScope")
        [Void]$Code.AppendLine("      Who can Decrypt")
        [Void]$Code.AppendLine("        Currentuser = = Specific User")
        [Void]$Code.AppendLine("        LocalMachine = = Any User")
        [Void]$Code.AppendLine("    .PARAMETER DecryptKey")
        [Void]$Code.AppendLine("      Option Extra Encryption Security")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Encrypt-MyTextString -Password `"Password`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Password,")
        [Void]$Code.AppendLine("    [System.Security.Cryptography.DataProtectionScope]`$ProtectionScope = `"CurrentUser`",")
        [Void]$Code.AppendLine("    [String]`$DecryptKey = `$Null")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if ([String]::IsNullOrEmpty(([Management.Automation.PSTypeName]`"System.Security.Cryptography.ProtectedData`").Type))")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Add-Type -AssemblyName System.Security -Debug:`$False")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Decrypt-MyTextString`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if (`$PSBoundParameters.ContainsKey(`"DecryptKey`"))")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$OptionalEntropy = [System.Text.Encoding]::ASCII.GetBytes(`$DecryptKey)")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$OptionalEntropy = `$Null")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  `$EncryptedData = [System.Convert]::FromBase64String(`$Password)")
        [Void]$Code.AppendLine("  `$DecryptedData = [System.Security.Cryptography.ProtectedData]::Unprotect(`$EncryptedData, `$OptionalEntropy, `$ProtectionScope)")
        [Void]$Code.AppendLine("  [System.Text.Encoding]::ASCII.GetString(`$DecryptedData)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Decrypt-MyTextString`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Decrypt-MyTextString")
        [Void]$Code.AppendLine("")
        #endregion ******** function Encrypt/Decrypt MyTextString ********
        
        #region ******** function Test-MyWorkstation ********
        [Void]$Code.AppendLine("#region function Test-MyWorkstation")
        [Void]$Code.AppendLine("function Test-MyWorkstation()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Verify Remote Workstation is the Correct One")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Verify Remote Workstation is the Correct One")
        [Void]$Code.AppendLine("    .PARAMETER ComputerName")
        [Void]$Code.AppendLine("      Name of the Computer to Verify")
        [Void]$Code.AppendLine("    .PARAMETER Credential")
        [Void]$Code.AppendLine("      Credentials to use when connecting to the Remote Computer")
        [Void]$Code.AppendLine("    .PARAMETER Wait")
        [Void]$Code.AppendLine("      How Long to Wait for Job to be Completed")
        [Void]$Code.AppendLine("    .PARAMETER Serial")
        [Void]$Code.AppendLine("      Return Serial Number")
        [Void]$Code.AppendLine("    .PARAMETER Mobile")
        [Void]$Code.AppendLine("      Check if System is Desktop / Laptop")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
        [Void]$Code.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
        [Void]$Code.AppendLine("    [PSCredential]`$Credential,")
        [Void]$Code.AppendLine("    [ValidateRange(30, 300)]")
        [Void]$Code.AppendLine("    [Int]`$Wait = 120,")
        [Void]$Code.AppendLine("    [Switch]`$Serial,")
        [Void]$Code.AppendLine("    [Switch]`$Mobile")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Default Common Get-WmiObject Options")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$Params = @{")
        [Void]$Code.AppendLine("        `"ComputerName`" = `$Null;")
        [Void]$Code.AppendLine("        `"Credential`" = `$Credential")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$Params = @{")
        [Void]$Code.AppendLine("        `"ComputerName`" = `$Null")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    ForEach (`$Computer in `$ComputerName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      # Used to Calculate Verify Time")
        [Void]$Code.AppendLine("      `$StartTime = [DateTime]::Now")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      # Default Custom Object for the Verify Function to Return, Since it will always return a value I create the Object with the default error / failure values and update the poperties as needed")
        [Void]$Code.AppendLine("      #region >>>>>>>>>>>>>>>> Custom Return Object `$VerifyObject <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("      `$VerifyObject = [PSCustomObject]@{")
        [Void]$Code.AppendLine("        `"ComputerName`" = `$Computer.ToUpper();")
        [Void]$Code.AppendLine("        `"FQDN`" = `$Computer.ToUpper();")
        [Void]$Code.AppendLine("        `"Found`" = `$False;")
        [Void]$Code.AppendLine("        `"UserName`" = `"`";")
        [Void]$Code.AppendLine("        `"Domain`" = `"`";")
        [Void]$Code.AppendLine("        `"DomainMember`" = `"`";")
        [Void]$Code.AppendLine("        `"ProductType`" = 0;")
        [Void]$Code.AppendLine("        `"Manufacturer`" = `"`";")
        [Void]$Code.AppendLine("        `"Model`" = `"`";")
        [Void]$Code.AppendLine("        `"IsMobile`" = `$False;")
        [Void]$Code.AppendLine("        `"SerialNumber`" = `"`";")
        [Void]$Code.AppendLine("        `"Memory`" = `"`";")
        [Void]$Code.AppendLine("        `"OperatingSystem`" = `"`";")
        [Void]$Code.AppendLine("        `"BuildNumber`" = `"`";")
        [Void]$Code.AppendLine("        `"Version`" = `"`";")
        [Void]$Code.AppendLine("        `"ServicePack`" = `"`";")
        [Void]$Code.AppendLine("        `"Architecture`" = `"`";")
        [Void]$Code.AppendLine("        `"Is64Bit`" = `$False;")
        [Void]$Code.AppendLine("        `"LocalDateTime`" = `"`";")
        [Void]$Code.AppendLine("        `"InstallDate`" = `"`";")
        [Void]$Code.AppendLine("        `"LastBootUpTime`" = `"`";")
        [Void]$Code.AppendLine("        `"IPAddress`" = `"`";")
        [Void]$Code.AppendLine("        `"Status`" = `"Off-Line`";")
        [Void]$Code.AppendLine("        `"Time`" = [TimeSpan]::Zero")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      #endregion")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Try")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
        [Void]$Code.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
        [Void]$Code.AppendLine("          ForEach (`$IPAddress in `$IPAddresses)")
        [Void]$Code.AppendLine("          {")
        [Void]$Code.AppendLine("            # I think this is Faster than using Test-Connection")
        [Void]$Code.AppendLine("            if (((New-Object -TypeName System.Net.NetworkInformation.Ping).Send(`$IPAddress)).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
        [Void]$Code.AppendLine("            {")
        [Void]$Code.AppendLine("              `$Params.ComputerName = `$IPAddress")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("              # Start Setting Return Values as they are Found")
        [Void]$Code.AppendLine("              `$VerifyObject.Status = `"On-Line`"")
        [Void]$Code.AppendLine("              `$VerifyObject.IPAddress = `$IPAddress")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("              # Start Primary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
        [Void]$Code.AppendLine("              [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_ComputerSystem)")
        [Void]$Code.AppendLine("              # Wait for Job to Finish or Wait Time has Elasped")
        [Void]$Code.AppendLine("              [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("              # Check if Job is Complete and has Data")
        [Void]$Code.AppendLine("              if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
        [Void]$Code.AppendLine("              {")
        [Void]$Code.AppendLine("                # Get Job Data")
        [Void]$Code.AppendLine("                `$MyCompData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                # Set Found Properties")
        [Void]$Code.AppendLine("                `$VerifyObject.ComputerName = `"`$(`$MyCompData.Name)`"")
        [Void]$Code.AppendLine("                if (`$MyCompData.PartOfDomain)")
        [Void]$Code.AppendLine("                {")
        [Void]$Code.AppendLine("                  `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)``.`$(`$MyCompData.Domain)`"")
        [Void]$Code.AppendLine("                }")
        [Void]$Code.AppendLine("                else")
        [Void]$Code.AppendLine("                {")
        [Void]$Code.AppendLine("                  `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)`"")
        [Void]$Code.AppendLine("                }")
        [Void]$Code.AppendLine("                `$VerifyObject.UserName = `"`$(`$MyCompData.UserName)`"")
        [Void]$Code.AppendLine("                `$VerifyObject.Domain = `"`$(`$MyCompData.Domain)`"")
        [Void]$Code.AppendLine("                `$VerifyObject.DomainMember = `$MyCompData.PartOfDomain")
        [Void]$Code.AppendLine("                `$VerifyObject.Manufacturer = `"`$(`$MyCompData.Manufacturer)`"")
        [Void]$Code.AppendLine("                `$VerifyObject.Model = `"`$(`$MyCompData.Model)`"")
        [Void]$Code.AppendLine("                `$VerifyObject.Memory = `"`$(`$MyCompData.TotalPhysicalMemory)`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                # Verify Remote Computer is the Connect Computer, No need to get any more information")
        [Void]$Code.AppendLine("                if (`$MyCompData.Name -eq @(`$Computer.Split(`".`", [System.StringSplitOptions]::RemoveEmptyEntries))[0])")
        [Void]$Code.AppendLine("                {")
        [Void]$Code.AppendLine("                  # Found Corrct Workstation")
        [Void]$Code.AppendLine("                  `$VerifyObject.Found = `$True")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                  # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
        [Void]$Code.AppendLine("                  [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_OperatingSystem)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                  # Wait for Job to Finish or Wait Time has Elasped")
        [Void]$Code.AppendLine("                  [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                  # Check if Job is Complete and has Data")
        [Void]$Code.AppendLine("                  if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
        [Void]$Code.AppendLine("                  {")
        [Void]$Code.AppendLine("                    # Get Job Data")
        [Void]$Code.AppendLine("                    `$MyOSData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                    # Set Found Properties")
        [Void]$Code.AppendLine("                    `$VerifyObject.ProductType = `$MyOSData.ProductType")
        [Void]$Code.AppendLine("                    `$VerifyObject.OperatingSystem = `"`$(`$MyOSData.Caption)`"")
        [Void]$Code.AppendLine("                    `$VerifyObject.ServicePack = `"`$(`$MyOSData.CSDVersion)`"")
        [Void]$Code.AppendLine("                    `$VerifyObject.BuildNumber = `"`$(`$MyOSData.BuildNumber)`"")
        [Void]$Code.AppendLine("                    `$VerifyObject.Version = `"`$(`$MyOSData.Version)`"")
        [Void]$Code.AppendLine("                    `$VerifyObject.Architecture = `$(if ([String]::IsNullOrEmpty(`$MyOSData.OSArchitecture)) { `"32-bit`" } else { `"`$(`$MyOSData.OSArchitecture)`" })")
        [Void]$Code.AppendLine("                    `$VerifyObject.Is64Bit = (`$VerifyObject.Architecture -eq `"64-bit`")")
        [Void]$Code.AppendLine("                    `$VerifyObject.LocalDateTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)")
        [Void]$Code.AppendLine("                    `$VerifyObject.InstallDate = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)")
        [Void]$Code.AppendLine("                    `$VerifyObject.LastBootUpTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)")
        [Void]$Code.AppendLine("                  }")
        [Void]$Code.AppendLine("                  else")
        [Void]$Code.AppendLine("                  {")
        [Void]$Code.AppendLine("                    `$VerifyObject.Status = `"Verify Operating System Error`"")
        [Void]$Code.AppendLine("                    [Void](Remove-Job -Job `$MyJob -Force)")
        [Void]$Code.AppendLine("                  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                  # Optional SerialNumber Job")
        [Void]$Code.AppendLine("                  if (`$Serial.IsPresent)")
        [Void]$Code.AppendLine("                  {")
        [Void]$Code.AppendLine("                    # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
        [Void]$Code.AppendLine("                    [Void](`$MyBIOSJob = Get-WmiObject -AsJob @Params -Class Win32_Bios)")
        [Void]$Code.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
        [Void]$Code.AppendLine("                    [Void](Wait-Job -Job `$MyBIOSJob -Timeout `$Wait)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                    # Check if Job is Complete and has Data")
        [Void]$Code.AppendLine("                    if (`$MyBIOSJob.State -eq `"Completed`" -and `$MyBIOSJob.HasMoreData)")
        [Void]$Code.AppendLine("                    {")
        [Void]$Code.AppendLine("                      # Get Job Data")
        [Void]$Code.AppendLine("                      `$MyBIOSData = Get-Job -ID `$MyBIOSJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                      # Set Found Property")
        [Void]$Code.AppendLine("                      `$VerifyObject.SerialNumber = `"`$(`$MyBIOSData.SerialNumber)`"")
        [Void]$Code.AppendLine("                    }")
        [Void]$Code.AppendLine("                    else")
        [Void]$Code.AppendLine("                    {")
        [Void]$Code.AppendLine("                      `$VerifyObject.Status = `"Verify SerialNumber Error`"")
        [Void]$Code.AppendLine("                      [Void](Remove-Job -Job `$MyBIOSJob -Force)")
        [Void]$Code.AppendLine("                    }")
        [Void]$Code.AppendLine("                  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                  # Optional Mobile / ChassisType Job")
        [Void]$Code.AppendLine("                  if (`$Mobile.IsPresent)")
        [Void]$Code.AppendLine("                  {")
        [Void]$Code.AppendLine("                    # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
        [Void]$Code.AppendLine("                    [Void](`$MyChassisJob = Get-WmiObject -AsJob @Params -Class Win32_SystemEnclosure)")
        [Void]$Code.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
        [Void]$Code.AppendLine("                    [Void](Wait-Job -Job `$MyChassisJob -Timeout `$Wait)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                    # Check if Job is Complete and has Data")
        [Void]$Code.AppendLine("                    if (`$MyChassisJob.State -eq `"Completed`" -and `$MyChassisJob.HasMoreData)")
        [Void]$Code.AppendLine("                    {")
        [Void]$Code.AppendLine("                      # Get Job Data")
        [Void]$Code.AppendLine("                      `$MyChassisData = Get-Job -ID `$MyChassisJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("                      # Set Found Property")
        [Void]$Code.AppendLine("                      `$VerifyObject.IsMobile = `$(@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains ((`$MyChassisData.ChassisTypes)[0]))")
        [Void]$Code.AppendLine("                    }")
        [Void]$Code.AppendLine("                    else")
        [Void]$Code.AppendLine("                    {")
        [Void]$Code.AppendLine("                      `$VerifyObject.Status = `"Verify is Mobile Error`"")
        [Void]$Code.AppendLine("                      [Void](Remove-Job -Job `$MyChassisJob -Force)")
        [Void]$Code.AppendLine("                    }")
        [Void]$Code.AppendLine("                  }")
        [Void]$Code.AppendLine("                }")
        [Void]$Code.AppendLine("                else")
        [Void]$Code.AppendLine("                {")
        [Void]$Code.AppendLine("                  `$VerifyObject.Status = `"Wrong Workstation Name`"")
        [Void]$Code.AppendLine("                }")
        [Void]$Code.AppendLine("              }")
        [Void]$Code.AppendLine("              else")
        [Void]$Code.AppendLine("              {")
        [Void]$Code.AppendLine("                `$VerifyObject.Status = `"Verify Workstation Error`"")
        [Void]$Code.AppendLine("                [Void](Remove-Job -Job `$MyJob -Force)")
        [Void]$Code.AppendLine("              }")
        [Void]$Code.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
        [Void]$Code.AppendLine("              Break")
        [Void]$Code.AppendLine("            }")
        [Void]$Code.AppendLine("          }")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        Catch")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          # Workstation Not in DNS")
        [Void]$Code.AppendLine("          `$VerifyObject.Status = `"Workstation Not in DNS`"")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      else")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$VerifyObject.Status = `"Invalid Computer Name`"")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      # Calculate Verify Time")
        [Void]$Code.AppendLine("      `$VerifyObject.Time = ([DateTime]::Now - `$StartTime)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      # Return Custom Object with Collected Verify Information")
        [Void]$Code.AppendLine("      Write-Output -InputObject `$VerifyObject")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$VerifyObject = `$Null")
        [Void]$Code.AppendLine("      `$Params = `$Null")
        [Void]$Code.AppendLine("      `$MyJob = `$Null")
        [Void]$Code.AppendLine("      `$MyCompData = `$Null")
        [Void]$Code.AppendLine("      `$MyOSData = `$Null")
        [Void]$Code.AppendLine("      `$MyBIOSData = `$Null")
        [Void]$Code.AppendLine("      `$MyChassisData = `$Null")
        [Void]$Code.AppendLine("      `$StartTime = `$Null")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      [System.GC]::Collect()")
        [Void]$Code.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion ******** function Test-MyWorkstation ********
        
        #region ******** function Write-MyLogFile ********
        [Void]$Code.AppendLine("#region function Write-MyLogFile")
        [Void]$Code.AppendLine("function Write-MyLogFile()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("    .PARAMETER LogPath")
        [Void]$Code.AppendLine("    .PARAMETER LogFolder")
        [Void]$Code.AppendLine("    .PARAMETER LogName")
        [Void]$Code.AppendLine("    .PARAMETER Severity")
        [Void]$Code.AppendLine("    .PARAMETER Message")
        [Void]$Code.AppendLine("    .PARAMETER Context")
        [Void]$Code.AppendLine("    .PARAMETER Thread")
        [Void]$Code.AppendLine("    .PARAMETER StackInfo")
        [Void]$Code.AppendLine("    .PARAMETER MaxSize")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Message `"This is My Info Log File Message`"")
        [Void]$Code.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Info`" -Message `"This is My Info Log File Message`"")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Warning`" -Message `"This is My Warning Log File Message`"")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Write-MyLogFile -LogFolder `"MyLogFolder`" -Severity `"Error`" -Message `"This is My Error Log File Message`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"LogFolder`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"LogPath`")]")
        [Void]$Code.AppendLine("    [ValidateScript({ [System.IO.Directory]::Exists(`$PSItem) })]")
        [Void]$Code.AppendLine("    [String]`$LogPath = `"`$(`$ENV:SystemRoot)\Logs`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"LogFolder`")]")
        [Void]$Code.AppendLine("    [String]`$LogFolder = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
        [Void]$Code.AppendLine("    [String]`$LogName = `"`$([System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName)).log`",")
        [Void]$Code.AppendLine("    [ValidateSet(`"Info`", `"Warning`", `"Error`")]")
        [Void]$Code.AppendLine("    [String]`$Severity = `"Info`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Message,")
        [Void]$Code.AppendLine("    [String]`$Context = `"`",")
        [Void]$Code.AppendLine("    [Int]`$Thread = `$PID,")
        [Void]$Code.AppendLine("    [Switch]`$StackInfo,")
        [Void]$Code.AppendLine("    [ValidateRange(0, 16777216)]")
        [Void]$Code.AppendLine("    [Int]`$MaxSize = 5242880")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Write-MyLogFile`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if (`$PSCmdlet.ParameterSetName -eq `"LogPath`")")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$TempFile = `"`$LogPath\`$LogName`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (-not [System.IO.Directory]::Exists(`"`$LogPath\`$LogFolder`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void][System.IO.Directory]::CreateDirectory(`"`$LogPath\`$LogFolder`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$TempFile = `"`$LogPath\`$LogFolder\`$LogName`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Switch (`$Severity)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `"Info`" { `$TempSeverity = 1; Break }")
        [Void]$Code.AppendLine("    `"Warning`" { `$TempSeverity = 2; Break }")
        [Void]$Code.AppendLine("    `"Error`" { `$TempSeverity = 3; Break }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  `$TempDate = [DateTime]::Now")
        [Void]$Code.AppendLine("  `$TempSource = [System.IO.Path]::GetFileName(`$MyInvocation.ScriptName)")
        [Void]$Code.AppendLine("  if (`$StackInfo.IsPresent)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$TempStack = @(Get-PSCallStack)")
        [Void]$Code.AppendLine("    `$TempCommand = `$TempCommand = [System.IO.Path]::GetFileNameWithoutExtension(`$TempStack[1].Command)")
        [Void]$Code.AppendLine("    `$TempSource = `"Line: `$(`$TempStack[1].ScriptLineNumber) - Scope: `$(`$TempStack.Count - 3)`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$TempCommand = [System.IO.Path]::GetFileNameWithoutExtension(`$TempSource)")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  if ([System.IO.File]::Exists(`$TempFile) -and `$MaxSize -gt 0)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (([System.IO.FileInfo]`$TempFile).Length -gt `$MaxSize)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempBackup = [System.IO.Path]::ChangeExtension(`$TempFile, `"lo_`")")
        [Void]$Code.AppendLine("      if ([System.IO.File]::Exists(`$TempBackup))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Remove-Item -Force -Path `$TempBackup")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      Rename-Item -Force -Path `$TempFile -NewName ([System.IO.Path]::GetFileName(`$TempBackup))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Add-Content -Path `$TempFile -Value (`"<![LOG[{0}]LOG]!><time=```"{1}```" date=```"{2}```" component=```"{3}```" context=```"{4}```" type=```"{5}```" thread=```"{6}```" file=```"{7}```">`" -f `$Message, `$(`$TempDate.ToString(`"HH:mm:ss.fff+000`")), `$(`$TempDate.ToString(`"MM-dd-yyyy`")), `$TempCommand, `$Context, `$TempSeverity, `$Thread, `$TempSource)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  `$TempFile = `$Null")
        [Void]$Code.AppendLine("  `$TempBackup = `$Null")
        [Void]$Code.AppendLine("  `$TempSeverity = `$Null")
        [Void]$Code.AppendLine("  `$TempDate = `$Null")
        [Void]$Code.AppendLine("  `$TempSource = `$Null")
        [Void]$Code.AppendLine("  `$TempCommand = `$Null")
        [Void]$Code.AppendLine("  `$TempStack = `$Null")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Write-MyLogFile`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function Get/Set/Remove MyISScriptData ********
        [Void]$Code.AppendLine("#region function Set-MyISScriptData")
        [Void]$Code.AppendLine("function Set-MyISScriptData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Writes Script Data to the Registry")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Writes Script Data to the Registry")
        [Void]$Code.AppendLine("    .PARAMETER Script")
        [Void]$Code.AppendLine("     Name of the Regsitry Key to write the values under. Defaults to the name of the script.")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("     Name of the Value to write")
        [Void]$Code.AppendLine("    .PARAMETER Value")
        [Void]$Code.AppendLine("      The Data to write")
        [Void]$Code.AppendLine("    .PARAMETER MultiValue")
        [Void]$Code.AppendLine("      Write Multiple values to the Registry")
        [Void]$Code.AppendLine("    .PARAMETER User")
        [Void]$Code.AppendLine("      Write to the HKCU Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Computer")
        [Void]$Code.AppendLine("      Write to the HKLM Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Bitness")
        [Void]$Code.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value `"Value`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Write REG_SZ value to the HKCU Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value @(`"This`", `"That`") -User -Script `"ScriptName`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Write REG_MULTI_SZ value to the HKCU Registry Hive under the Specified Script Name registry key")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Single element arrays will be written as REG_SZ. To ensure they are written as REG_MULTI_SZ")
        [Void]$Code.AppendLine("      Use @() or (,) when specifing the Value paramter value")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value (,8) -Bitness `"64`" -Computer")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Write REG_MULTI_SZ value to the 64 bit HKLM Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Number arrays are written to the registry as strings.")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyISScriptData -Name `"Name`" -Value 0 -Computer")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Write REG_DWORD value to the HKLM Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-MyISScriptData -MultiValue @{`"Name`" = `"MyName`"; `"Number`" = 4; `"Array`" = @(`"First`", 2, `"3rd`", 4)} -Computer -Bitness `"32`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Write multiple values to the 32 bit HKLM Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [String]`$Name,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [Object]`$Value,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"UserMulti`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
        [Void]$Code.AppendLine("    [HashTable]`$MultiValue,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"UserMulti`")]")
        [Void]$Code.AppendLine("    [Switch]`$User,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"CompMulti`")]")
        [Void]$Code.AppendLine("    [Switch]`$Computer,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"CompMulti`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
        [Void]$Code.AppendLine("    [String]`$Bitness = `"All`"")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Set-MyISScriptData`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Get Default Registry Paths")
        [Void]$Code.AppendLine("  `$RegPaths = New-Object -TypeName System.Collections.ArrayList")
        [Void]$Code.AppendLine("  if (`$Computer.IsPresent)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (`$Bitness -match `"All|32`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$Bitness -match `"All|64`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Create the Registry Keys if Needed.")
        [Void]$Code.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData`" -ErrorAction `"SilentlyContinue`")))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Try")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void](New-Item -Path `$RegPath -Name `"MyISScriptData`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      Catch")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Throw `"Error Creating Registry Key : MyISScriptData`"")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if ([String]::IsNullOrEmpty((Get-Item -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`")))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Try")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void](New-Item -Path `"`$RegPath\MyISScriptData`" -Name `$Script)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      Catch")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Throw `"Error Creating Registry Key : `$Script`"")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Write the values to the registry.")
        [Void]$Code.AppendLine("  Switch -regex (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `"Multi`"")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      ForEach (`$Key in `$MultiValue.Keys)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        if (`$MultiValue[`$Key] -is [Array])")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$Data = [String[]]`$MultiValue[`$Key]")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$Data = `$MultiValue[`$Key]")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        ForEach (`$RegPath in `$RegPaths)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Key -Value `$Data)")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    Default")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$Value -is [Array])")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Data = [String[]]`$Value")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      else")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Data = `$Value")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      ForEach (`$RegPath in `$RegPaths)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void](Set-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -Name `$Name -Value `$Data)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Set-MyISScriptData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Get-MyISScriptData")
        [Void]$Code.AppendLine("function Get-MyISScriptData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Reads Script Data from the Registry")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Reads Script Data from the Registry")
        [Void]$Code.AppendLine("    .PARAMETER Script")
        [Void]$Code.AppendLine("     Name of the Regsitry Key to read the values from. Defaults to the name of the script.")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("     Name of the Value to read")
        [Void]$Code.AppendLine("    .PARAMETER User")
        [Void]$Code.AppendLine("      Read from the HKCU Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Computer")
        [Void]$Code.AppendLine("      Read from the HKLM Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Bitness")
        [Void]$Code.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Read the value from the HKCU Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -User -Script `"ScriptName`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Read the value from the HKCU Registry Hive under the Specified Script Name registry key")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Computer")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Read the value from the 64 bit HKLM Registry Hive under the Default Script Name registry key")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$RegValues = Get-MyISScriptData -Name `"Name`" -Bitness `"32`" -Script `"ScriptName`" -Computer")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Read the value from the 32 bit HKLM Registry Hive under the Specified Script Name registry key")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
        [Void]$Code.AppendLine("    [String[]]`$Name = `"*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("    [Switch]`$User,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [Switch]`$Computer,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"32`", `"64`")]")
        [Void]$Code.AppendLine("    [String]`$Bitness = `"64`"")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyISScriptData`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Get Default Registry Path")
        [Void]$Code.AppendLine("  if (`$Computer.IsPresent)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (`$Bitness -eq `"64`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$RegPath = `"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$RegPath = `"Registry::HKEY_CURRENT_USER\Software`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Get the values from the registry.")
        [Void]$Code.AppendLine("  Get-ItemProperty -Path `"`$RegPath\MyISScriptData\`$Script`" -ErrorAction `"SilentlyContinue`" | Select-Object -Property `$Name")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyISScriptData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Remove-MyISScriptData")
        [Void]$Code.AppendLine("function Remove-MyISScriptData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Removes Script Data from the Registry")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Removes Script Data from the Registry")
        [Void]$Code.AppendLine("    .PARAMETER Script")
        [Void]$Code.AppendLine("     Name of the Regsitry Key to remove. Defaults to the name of the script.")
        [Void]$Code.AppendLine("    .PARAMETER User")
        [Void]$Code.AppendLine("      Remove from the HKCU Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Computer")
        [Void]$Code.AppendLine("      Remove from the HKLM Registry Hive")
        [Void]$Code.AppendLine("    .PARAMETER Bitness")
        [Void]$Code.AppendLine("      Specify 32/64 bit HKLM Registry Hive")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyISScriptData")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Removes the default script registry key from the HKCU Registry Hive")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyISScriptData -User -Script `"ScriptName`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Removes the Specified Script Name registry key from the HKCU Registry Hive")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyISScriptData -Computer")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Removes the default script registry key from the 32/64 bit HKLM Registry Hive")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyISScriptData -Computer -Script `"ScriptName`" -Bitness `"32`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Removes the Specified Script Name registry key from the 32 bit HKLM Registry Hive")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By ken.sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$Script = [System.IO.Path]::GetFileNameWithoutExtension(`$MyInvocation.ScriptName),")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"User`")]")
        [Void]$Code.AppendLine("    [Switch]`$User,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [Switch]`$Computer,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Comp`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"32`", `"64`", `"All`")]")
        [Void]$Code.AppendLine("    [String]`$Bitness = `"All`"")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Remove-MyISScriptData`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Get Default Registry Paths")
        [Void]$Code.AppendLine("  `$RegPaths = New-Object -TypeName System.Collections.ArrayList")
        [Void]$Code.AppendLine("  if (`$Computer.IsPresent)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (`$Bitness -match `"All|32`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software\WOW6432Node`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    if (`$Bitness -match `"All|64`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$RegPaths.Add(`"Registry::HKEY_LOCAL_MACHINE\Software`")")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [Void]`$RegPaths.Add(`"Registry::HKEY_CURRENT_USER\Software`")")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # Remove the values from the registry.")
        [Void]$Code.AppendLine("  ForEach (`$RegPath in `$RegPaths)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    [Void](Remove-Item -Path `"`$RegPath\MyISScriptData\`$Script`")")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Remove-MyISScriptData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** Get/Set/Remove EnvironmentVariable ********
        [Void]$Code.AppendLine("#region function Get-EnvironmentVariable")
        [Void]$Code.AppendLine("function Get-EnvironmentVariable()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .PARAMETER ComputerName")
        [Void]$Code.AppendLine("    .PARAMETER Variable")
        [Void]$Code.AppendLine("    .PARAMETER UserName")
        [Void]$Code.AppendLine("    .PARAMETER Credential")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Get-EnvironmentVariable -Variable <String>")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Kenneth D. Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
        [Void]$Code.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Variable,")
        [Void]$Code.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
        [Void]$Code.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    ForEach (`$Computer in `$ComputerName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Get-WmiObject -ComputerName `$Computer -Query `$Query -Credential `$Credential")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Get-EnvironmentVariable")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Set-EnvironmentVariable")
        [Void]$Code.AppendLine("function Set-EnvironmentVariable()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .PARAMETER ComputerName")
        [Void]$Code.AppendLine("    .PARAMETER Variable")
        [Void]$Code.AppendLine("    .PARAMETER Value")
        [Void]$Code.AppendLine("    .PARAMETER UserName")
        [Void]$Code.AppendLine("    .PARAMETER Credential")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-EnvironmentVariable -ComputerName <String> -Variable <String> -Value <string>")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Set-EnvironmentVariable -ComputerName <String> -Variable <String>")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Kenneth D. Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
        [Void]$Code.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Variable,")
        [Void]$Code.AppendLine("    [String]`$Value,")
        [Void]$Code.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
        [Void]$Code.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$Arguments = @{")
        [Void]$Code.AppendLine("      `"Name`" = `$Variable;")
        [Void]$Code.AppendLine("      `"VariableValue`" = `$Value;")
        [Void]$Code.AppendLine("      `"UserName`" = `$UserName")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Set-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    ForEach (`$Computer in `$ComputerName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Set-WmiInstance -ComputerName `$Computer -Class Win32_Environment -Arguments `$Arguments -Credential `$Credential")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Set-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Set-EnvironmentVariable")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region function Remove-EnvironmentVariable")
        [Void]$Code.AppendLine("function Remove-EnvironmentVariable()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Creates an Environment Variable on the Local or Remote Workstation")
        [Void]$Code.AppendLine("    .PARAMETER ComputerName")
        [Void]$Code.AppendLine("    .PARAMETER Variable")
        [Void]$Code.AppendLine("    .PARAMETER UserName")
        [Void]$Code.AppendLine("    .PARAMETER Credential")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-EnvironmentVariable -Variable <String>")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Kenneth D. Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
        [Void]$Code.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [String]`$Variable,")
        [Void]$Code.AppendLine("    [String]`$UserName = `"<SYSTEM>`",")
        [Void]$Code.AppendLine("    [PSCredential]`$Credential = [PSCredential]::Empty")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$Query = `"Select * from Win32_Environment Where Name = '`$Variable' and UserName = '`$UserName'`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Remove-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    ForEach (`$Computer in `$ComputerName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      Get-WmiObject -ComputerName `$Computer -Query `$Query -Credential `$Credential | Remove-WmiObject")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Remove-EnvironmentVariable Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Remove-EnvironmentVariable")
        [Void]$Code.AppendLine("")
        #endregion ******** Get/Set/Remove EnvironmentVariable ********
        
        #region ******** function Test-MyClassLoaded ********
        [Void]$Code.AppendLine("#region function Test-MyClassLoaded")
        [Void]$Code.AppendLine("function Test-MyClassLoaded()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Test if Custom Class is Loaded")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Test if Custom Class is Loaded")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("      Name of Custom Class")
        [Void]$Code.AppendLine("    .INPUTS")
        [Void]$Code.AppendLine("    .OUTPUTS")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$IsLoaded = Test-MyClassLoaded -Name `"CustomClass`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("    [String]`$Name")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Test-MyClassLoaded`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  (-not [String]::IsNullOrEmpty(([Management.Automation.PSTypeName]`$Name).Type))")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Test-MyClassLoaded`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion 
        
        #region ******** function Scale-MyForm ********
        [Void]$Code.AppendLine("#region function Scale-MyForm")
        [Void]$Code.AppendLine("function Scale-MyForm()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Scale Form")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Scale Form")
        [Void]$Code.AppendLine("    .PARAMETER Control")
        [Void]$Code.AppendLine("    .PARAMETER Scale")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Scale-MyForm -Control `$Control -`$Scale")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [Object]`$Control = $($CGenConfig.ToolName)Form,")
        [Void]$Code.AppendLine("    [Single]`$Scale = 1")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Scale-MyForm`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    if (`$Control -is [System.Windows.Forms.Form])")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$Control.Scale(`$Scale)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$Control.Font = New-Object -TypeName System.Drawing.Font(`$Control.Font.FontFamily, (`$Control.Font.Size * `$Scale), `$Control.Font.Style, `$Control.Font.Unit)")
        [Void]$Code.AppendLine("    if ([String]::IsNullOrEmpty(`$Control.PSObject.Properties.Match(`"Items`")))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$Control.Controls.Count)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        ForEach (`$ChildControl in `$Control.Controls)")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          Scale-MyForm -Control `$ChildControl -Scale `$Scale")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      ForEach (`$Item in `$Control.Items)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Scale-MyForm -Control `$Item -Scale `$Scale")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Scale-MyForm`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** function Get-MyFontData ********
        [Void]$Code.AppendLine("#region function Get-MyFontData")
        [Void]$Code.AppendLine("function Get-MyFontData()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Get New Font Size Based on Current Dpi")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Get New Font Size Based on Current Dpi")
        [Void]$Code.AppendLine("    .PARAMETER FontFamily")
        [Void]$Code.AppendLine("    .PARAMETER FontSize")
        [Void]$Code.AppendLine("    .PARAMETER TextString")
        [Void]$Code.AppendLine("    .PARAMETER Up")
        [Void]$Code.AppendLine("    .PARAMETER Down")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$FontData = Get-MyFontData")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$FontData = Get-MyFontData -FontFamily `"Verdana`" -FontSize 10")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$FontData = Get-MyFontData -FontFamily `"Verdana`" -FontSize 10 -TextString `"Sample Text`"")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Function By Ken Sweet")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Default`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
        [Void]$Code.AppendLine("    [Single]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
        [Void]$Code.AppendLine("    [String]`$TextString = `"The quick brown fox jumped over the lazy dogs back`",")
        [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Up`")]")
        [Void]$Code.AppendLine("    [Switch]`$Up,")
        [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True, ParameterSetName = `"Down`")]")
        [Void]$Code.AppendLine("    [Switch]`$Down")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Get-MyFontData`"")
        [Void]$Code.AppendLine("  Try")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    `$Graphics = [System.Drawing.Graphics]::FromHwnd([System.IntPtr]::Zero)")
        [Void]$Code.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"Up`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Ratio = `$Graphics.DpiX / 96")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"Down`"")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Ratio = 96 / `$Graphics.DpiX")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      Default")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$Ratio = 1")
        [Void]$Code.AppendLine("        Break")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$BoldFont = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    `$MeasureString = `$Graphics.MeasureString(`$TextString, `$BoldFont)")
        [Void]$Code.AppendLine("    [PSCustomObject]@{")
        [Void]$Code.AppendLine("      `"Ratio`" = `$Ratio;")
        [Void]$Code.AppendLine("      `"Width`" = [Math]::Floor(`$MeasureString.Width / `$TextString.Length);")
        [Void]$Code.AppendLine("      `"Height`" = [Math]::Ceiling(`$MeasureString.Height);")
        [Void]$Code.AppendLine("      `"DpiX`" = `$Graphics.DpiX;")
        [Void]$Code.AppendLine("      `"DpiY`" = `$Graphics.DpiY;")
        [Void]$Code.AppendLine("      `"Bold`" = `$BoldFont")
        [Void]$Code.AppendLine("      `"Regular`" = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("      `"Title`" = New-Object -TypeName System.Drawing.Font(`$FontFamily, (`$FontSize * 1.5), [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$BoldFont = `$Null")
        [Void]$Code.AppendLine("    `$MeasureString = `$Null")
        [Void]$Code.AppendLine("    `$Graphics.Dispose()")
        [Void]$Code.AppendLine("    `$Graphics = `$Null")
        [Void]$Code.AppendLine("    `$Ratio = `$Null")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Catch")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
        [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Get-MyFontData`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Get-MyFontData")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("# $($Name) Script Default Font Settings")
        [Void]$Code.AppendLine("$($CGenConfig.ToolName)Config.FontData = Get-MyFontData -Up")
        [Void]$Code.AppendLine("")
        #endregion
        
        [Void]$Code.AppendLine("#endregion ================ My Custom Functions ================")
        [Void]$Code.AppendLine("")
        
        #region ******** Multiple Thread Functions ********
        
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Multiple Thread Functions <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        
        #region ********* Custom Objects MyRSPool / MyRSJob *********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Custom Objects MyRSPool / MyRSJob <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$MyCustom = @`"")
        [Void]$Code.AppendLine("using System;")
        [Void]$Code.AppendLine("using System.Collections.Generic;")
        [Void]$Code.AppendLine("using System.Management.Automation;")
        [Void]$Code.AppendLine("using System.Threading;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("public class MyRSJob")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  private System.String _Name;")
        [Void]$Code.AppendLine("  private System.String _PoolName;")
        [Void]$Code.AppendLine("  private System.Guid _PoolID;")
        [Void]$Code.AppendLine("  private System.Management.Automation.PowerShell _PowerShell;")
        [Void]$Code.AppendLine("  private System.IAsyncResult _PowerShellAsyncResult;")
        [Void]$Code.AppendLine("  private System.Object _InputObject = null;")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public MyRSJob(System.String Name, System.Management.Automation.PowerShell PowerShell, System.IAsyncResult PowerShellAsyncResult, System.Object InputObject, System.String PoolName, System.Guid PoolID)")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    _Name = Name;")
        [Void]$Code.AppendLine("    _PoolName = PoolName;")
        [Void]$Code.AppendLine("    _PoolID = PoolID;")
        [Void]$Code.AppendLine("    _PowerShell = PowerShell;")
        [Void]$Code.AppendLine("    _PowerShellAsyncResult = PowerShellAsyncResult;")
        [Void]$Code.AppendLine("    _InputObject = InputObject;")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.String Name")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _Name;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Guid InstanceID")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.InstanceId;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.String PoolName")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PoolName;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Guid PoolID")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PoolID;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PowerShell PowerShell")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSInvocationState State")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.InvocationStateInfo.State;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Exception Reason")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.InvocationStateInfo.Reason;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public bool HadErrors")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.HadErrors;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.String Command")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Commands.Commands[0].ToString();")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.RunspacePool;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.IAsyncResult PowerShellAsyncResult")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShellAsyncResult;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public bool IsCompleted")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShellAsyncResult.IsCompleted;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Object InputObject")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _InputObject;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.DebugRecord> Debug")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Streams.Debug;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ErrorRecord> Error")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Streams.Error;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.ProgressRecord> Progress")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Streams.Progress;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.VerboseRecord> Verbose")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Streams.Verbose;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.PSDataCollection<System.Management.Automation.WarningRecord> Warning")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _PowerShell.Streams.Warning;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("public class MyRSPool")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  private System.String _Name;  ")
        [Void]$Code.AppendLine("  private System.Management.Automation.Runspaces.RunspacePool _RunspacePool;")
        [Void]$Code.AppendLine("  public System.Collections.Generic.List<MyRSJob> Jobs = new System.Collections.Generic.List<MyRSJob>();")
        [Void]$Code.AppendLine("  private System.Collections.Hashtable _SyncedHash;")
        [Void]$Code.AppendLine("  private System.Threading.Mutex _Mutex;  ")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash) ")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    _Name = Name;")
        [Void]$Code.AppendLine("    _RunspacePool = RunspacePool;")
        [Void]$Code.AppendLine("    _SyncedHash = SyncedHash;")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public MyRSPool(System.String Name, System.Management.Automation.Runspaces.RunspacePool RunspacePool, System.Collections.Hashtable SyncedHash, System.String Mutex) ")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    _Name = Name;")
        [Void]$Code.AppendLine("    _RunspacePool = RunspacePool;")
        [Void]$Code.AppendLine("    _SyncedHash = SyncedHash;")
        [Void]$Code.AppendLine("    _Mutex = new System.Threading.Mutex(false, Mutex);")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Collections.Hashtable SyncedHash")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _SyncedHash;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Threading.Mutex Mutex")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _Mutex;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.String Name")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _Name;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Guid InstanceID")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _RunspacePool.InstanceId;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.Runspaces.RunspacePool RunspacePool")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _RunspacePool;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  public System.Management.Automation.Runspaces.RunspacePoolState State")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    get")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      return _RunspacePool.RunspacePoolStateInfo.State;")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCustom -Debug:`$False")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("`$Script:MyHiddenRSPool = New-Object -TypeName `"System.Collections.Generic.Dictionary[[String], [MyRSPool]]`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ Custom Objects MyRSPool / MyRSJob ================")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region function Start-MyRSPool
        [Void]$Code.AppendLine("#region function Start-MyRSPool")
        [Void]$Code.AppendLine("function Start-MyRSPool()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates or Updates a RunspacePool")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of RunspacePool")
        [Void]$Code.AppendLine("    .PARAMETER Functions")
        [Void]$Code.AppendLine("      Functions to include in the initial Session State")
        [Void]$Code.AppendLine("    .PARAMETER Variables")
        [Void]$Code.AppendLine("      Variables to include in the initial Session State")
        [Void]$Code.AppendLine("    .PARAMETER Modules")
        [Void]$Code.AppendLine("      Modules to load in the initial Session State")
        [Void]$Code.AppendLine("    .PARAMETER PSSnapins")
        [Void]$Code.AppendLine("      PSSnapins to load in the initial Session State")
        [Void]$Code.AppendLine("    .PARAMETER Hashtable")
        [Void]$Code.AppendLine("      Synced Hasttable to pass values between threads")
        [Void]$Code.AppendLine("    .PARAMETER Mutex")
        [Void]$Code.AppendLine("      Protects access to a shared resource")
        [Void]$Code.AppendLine("    .PARAMETER MaxJobs")
        [Void]$Code.AppendLine("      Maximum Number of Jobs")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("      Return the New RSPool to the Pipeline")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Start-MyRSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Create the Default RunspacePool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSPool = Start-MyRSPool -PoolName `$PoolName -MaxJobs `$MaxJobs -PassThru")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Create a New RunspacePool and Return the RSPool to the Pipeline")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding()]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [Hashtable]`$Functions,")
        [Void]$Code.AppendLine("    [Hashtable]`$Variables,")
        [Void]$Code.AppendLine("    [String[]]`$Modules,")
        [Void]$Code.AppendLine("    [String[]]`$PSSnapins,")
        [Void]$Code.AppendLine("    [Hashtable]`$Hashtable = @{ `"Enabled`" = `$True },")
        [Void]$Code.AppendLine("    [String]`$Mutex,")
        [Void]$Code.AppendLine("    [ValidateRange(1, 64)]")
        [Void]$Code.AppendLine("    [Int]`$MaxJobs = 8,")
        [Void]$Code.AppendLine("    [Switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Start-MyRSPool`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  # check if Runspace Pool already exists")
        [Void]$Code.AppendLine("  if (`$Script:MyHiddenRSPool.ContainsKey(`$PoolName))")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    # Return Existing Runspace Pool")
        [Void]$Code.AppendLine("    [MyRSPool](`$Script:MyHiddenRSPool[`$PoolName])")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  else")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    # Create Default Session State")
        [Void]$Code.AppendLine("    `$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Import Modules")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Modules`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$InitialSessionState.ImportPSModule(`$Modules)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Import PSSnapins")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"PSSnapins`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$InitialSessionState.ImportPSSnapIn(`$PSSnapins, [Ref]`$Null)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Common Functions")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Functions`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      ForEach (`$Key in `$Functions.Keys)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        #`$InitialSessionState.Commands.Add(([System.Management.Automation.Runspaces.SessionStateFunctionEntry]::New(`$Key, `$Functions[`$Key])))")
        [Void]$Code.AppendLine("        `$InitialSessionState.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList `$Key, `$Functions[`$Key]))")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Default Variables")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Variables`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      ForEach (`$Key in `$Variables.Keys)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        #`$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`$Key, `$Variables[`$Key], `"`$Key = `$(`$Variables[`$Key])`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
        [Void]$Code.AppendLine("        `$InitialSessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList `$Key, `$Variables[`$Key], `"`$Key = `$(`$Variables[`$Key])`", ([System.Management.Automation.ScopedItemOptions]::AllScope)))")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Create and Open RunSpacePool")
        [Void]$Code.AppendLine("    `$SyncedHash = [Hashtable]::Synchronized(`$Hashtable)")
        [Void]$Code.AppendLine("    #`$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"SyncedHash`", `$SyncedHash, `"SyncedHash = Synced Hashtable`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
        [Void]$Code.AppendLine("    `$InitialSessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList `"SyncedHash`", `$SyncedHash, `"SyncedHash = Synced Hashtable`", ([System.Management.Automation.ScopedItemOptions]::AllScope)))")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Mutex`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      #`$InitialSessionState.Variables.Add(([System.Management.Automation.Runspaces.SessionStateVariableEntry]::New(`"Mutex`", `$Mutex, `"Mutex = `$Mutex`", ([System.Management.Automation.ScopedItemOptions]::AllScope))))")
        [Void]$Code.AppendLine("      `$InitialSessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList `"Mutex`", `$Mutex, `"Mutex = `$Mutex`", ([System.Management.Automation.ScopedItemOptions]::AllScope)))")
        [Void]$Code.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
        [Void]$Code.AppendLine("      #`$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash, `$Mutex)")
        [Void]$Code.AppendLine("      `$RSPool = New-Object -TypeName `"MyRSPool`" -ArgumentList `$PoolName, `$CreateRunspacePool, `$SyncedHash, `$Mutex")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$CreateRunspacePool = [Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, `$MaxJobs, `$InitialSessionState, `$Host)")
        [Void]$Code.AppendLine("      #`$RSPool = [MyRSPool]::New(`$PoolName, `$CreateRunspacePool, `$SyncedHash)")
        [Void]$Code.AppendLine("      `$RSPool = New-Object -TypeName `"MyRSPool`" -ArgumentList `$PoolName, `$CreateRunspacePool, `$SyncedHash")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$RSPool.RunspacePool.ApartmentState = `"STA`"")
        [Void]$Code.AppendLine("    #`$RSPool.RunspacePool.ApartmentState = `"MTA`"")
        [Void]$Code.AppendLine("    `$RSPool.RunspacePool.CleanupInterval = [TimeSpan]::FromMinutes(2)")
        [Void]$Code.AppendLine("    `$RSPool.RunspacePool.Open()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    `$Script:MyHiddenRSPool.Add(`$PoolName, `$RSPool)")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    if (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$RSPool")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Start-MyRSPool`"")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Start-MyRSPool")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Get-MyRSPool
        [Void]$Code.AppendLine("#region function Get-MyRSPool")
        [Void]$Code.AppendLine("function Get-MyRSPool()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Get RunspacePools that match specified criteria")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Get RunspacePools that match specified criteria")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of RSPool to search for")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      PoolID of Job to search for")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to search for")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSPools = Get-MyRSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Get all RSPools")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolName `$PoolName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyRSPools = Get-MyRSPool -PoolID `$PoolID")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Get Specified RSPools")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"PoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
        [Void]$Code.AppendLine("    [String[]]`$State")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Set Job State RegEx Pattern")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$StatePattern = `$State -join `"|`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$StatePattern = `".*`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSPool Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"All`" {")
        [Void]$Code.AppendLine("        # Return Matching Pools")
        [Void]$Code.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern })")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolName`" {")
        [Void]$Code.AppendLine("        # Set Pool Name and Return Matching Pools")
        [Void]$Code.AppendLine("        `$NamePattern = `$PoolName -join `"|`"")
        [Void]$Code.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern})")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolID`" {")
        [Void]$Code.AppendLine("        # Set PoolID and Return Matching Pools")
        [Void]$Code.AppendLine("        `$IDPattern = `$PoolID -join `"|`"")
        [Void]$Code.AppendLine("        [MyRSPool[]](`$Script:MyHiddenRSPool.Values | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern })")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSPool Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Get-MyRSPool")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Close-MyRSPool
        [Void]$Code.AppendLine("#region function Close-MyRSPool")
        [Void]$Code.AppendLine("function Close-MyRSPool()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Close RunspacePool and Stop all Running Jobs")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Close RunspacePool and Stop all Running Jobs")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to clsoe")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of RSPool to close")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      PoolID of Job to close")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to close")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Close-MyRSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Close the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Close-MyRSPool -PoolName `$PoolName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Close-MyRSPool -PoolID `$PoolID")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Close Specified RSPools")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"All`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSPool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("    [String[]]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"All`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolID`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"BeforeOpen`", `"Opening`", `"Opened`", `"Closed`", `"Closing`", `"Broken`", `"Disconnecting`", `"Disconnected`", `"Connecting`")]")
        [Void]$Code.AppendLine("    [String[]]`$State")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    If (`$PSCmdlet.ParameterSetName -eq `"RSPool`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempPools = `$RSPool")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempPools = [MyRSPool[]](Get-MyRSPool @PSBoundParameters)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Close RunspacePools, This will Stop all Running Jobs")
        [Void]$Code.AppendLine("    ForEach (`$TempPool in `$TempPools)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (-not [String]::IsNullOrEmpty(`$TempPool.Mutex))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempPool.Mutex.Close()")
        [Void]$Code.AppendLine("        `$TempPool.Mutex.Dispose()")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$TempPool.RunspacePool.Close()")
        [Void]$Code.AppendLine("      `$TempPool.RunspacePool.Dispose()")
        [Void]$Code.AppendLine("      [Void]`$Script:MyHiddenRSPool.Remove(`$TempPool.Name)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Close-MyRSPool End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Garbage Collect, Recover Resources")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Close-MyRSPool End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Close-MyRSPool")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Start-MyRSJob
        [Void]$Code.AppendLine("#region function Start-MyRSJob")
        [Void]$Code.AppendLine("function Start-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Creates or Updates a RunspacePool")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to add new RunspacePool Jobs to")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of RunspacePool")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      ID of RunspacePool")
        [Void]$Code.AppendLine("    .PARAMETER InputObject")
        [Void]$Code.AppendLine("      Object / Value to pass to the RunspacePool Job ScriptBlock")
        [Void]$Code.AppendLine("    .PARAMETER InputParam")
        [Void]$Code.AppendLine("      Paramter to pass the Object / Value as")
        [Void]$Code.AppendLine("    .PARAMETER JobName")
        [Void]$Code.AppendLine("      Name of RunspacePool Jobs")
        [Void]$Code.AppendLine("    .PARAMETER ScriptBlock")
        [Void]$Code.AppendLine("      RunspacePool Job ScriptBock to Execute")
        [Void]$Code.AppendLine("    .PARAMETER Parameters")
        [Void]$Code.AppendLine("      Common Paramaters to pass to the RunspacePool Job ScriptBlock")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("      Return the New Jobs to the Pipeline")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Start-MyRSJob -ScriptBlock `$ScriptBlock -JobName `$JobName -InputObject `$InputObject")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Add new RSJobs to the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -RSPool `$RSPool -JobName `$JobName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolName `$PoolName -JobName `$JobName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$InputObject | Start-MyRSJob -ScriptBlock `$ScriptBlock -PoolID `$PoolID -JobName `$JobName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Add new RSJobs to the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"RSPool`")]")
        [Void]$Code.AppendLine("    [MyRSPool]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"PoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"PoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True)]")
        [Void]$Code.AppendLine("    [Object[]]`$InputObject,")
        [Void]$Code.AppendLine("    [String]`$InputParam = `"InputObject`",")
        [Void]$Code.AppendLine("    [String]`$JobName = `"Job Name`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
        [Void]$Code.AppendLine("    [ScriptBlock]`$ScriptBlock,")
        [Void]$Code.AppendLine("    [Hashtable]`$Parameters,")
        [Void]$Code.AppendLine("    [Switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Switch (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"RSPool`" {")
        [Void]$Code.AppendLine("        # Set Pool")
        [Void]$Code.AppendLine("        `$TempPool = `$RSPool")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolName`" {")
        [Void]$Code.AppendLine("        # Set Pool Name and Return Matching Pools")
        [Void]$Code.AppendLine("        `$TempPool = [MyRSPool](Start-MyRSPool -PoolName `$PoolName -PassThru)")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolID`" {")
        [Void]$Code.AppendLine("        # Set PoolID Return Matching Pools")
        [Void]$Code.AppendLine("        `$TempPool = [MyRSPool](Get-MyRSPool -PoolID `$PoolID)")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # List for New Jobs")
        [Void]$Code.AppendLine("    #`$NewJobs = [System.Collections.Generic.List[MyRSJob]]::New())")
        [Void]$Code.AppendLine("    `$NewJobs = New-Object -TypeName `"System.Collections.Generic.List[MyRSJob]`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"InputObject`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      ForEach (`$Object in `$InputObject)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        # Create New PowerShell Instance with ScriptBlock")
        [Void]$Code.AppendLine("        `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
        [Void]$Code.AppendLine("        # Set RunspacePool")
        [Void]$Code.AppendLine("        `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
        [Void]$Code.AppendLine("        # Add Parameters")
        [Void]$Code.AppendLine("        [Void]`$PowerShell.AddParameter(`$InputParam, `$Object)")
        [Void]$Code.AppendLine("        if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          [Void]`$PowerShell.AddParameters(`$Parameters)")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        # set Job Name")
        [Void]$Code.AppendLine("        if ((`$Object -is [String]) -or (`$Object -is [ValueType]))")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempJobName = `"`$JobName - `$(`$Object)`"")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        else")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempJobName = `$(`$Object.`$JobName)")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        #[Void]`$NewJobs.Add(([MyRSjob]::New(`$TempJobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Object, `$TempPool.Name, `$TempPool.InstanceID)))")
        [Void]$Code.AppendLine("        [Void]`$NewJobs.Add((New-Object -TypeName `"MyRSjob`" -ArgumentList `$TempJobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Object, `$TempPool.Name, `$TempPool.InstanceID))")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      # Create New PowerShell Instance with ScriptBlock")
        [Void]$Code.AppendLine("      `$PowerShell = ([Management.Automation.PowerShell]::Create()).AddScript(`$ScriptBlock)")
        [Void]$Code.AppendLine("      # Set RunspacePool")
        [Void]$Code.AppendLine("      `$PowerShell.RunspacePool = `$TempPool.RunspacePool")
        [Void]$Code.AppendLine("      # Add Parameters")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Parameters`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PowerShell.AddParameters(`$Parameters)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      #[Void]`$NewJobs.Add(([MyRSjob]::New(`$JobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Null, `$TempPool.Name, `$TempPool.InstanceID)))")
        [Void]$Code.AppendLine("      [Void]`$NewJobs.Add((New-Object -TypeName `"MyRSjob`" -ArgumentList `$JobName, `$PowerShell, `$PowerShell.BeginInvoke(), `$Null, `$TempPool.Name, `$TempPool.InstanceID))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Start-MyRSJob End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    if (`$NewJobs.Count)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempPool.Jobs.AddRange(`$NewJobs)")
        [Void]$Code.AppendLine("      # Return Jobs only if New RunspacePool")
        [Void]$Code.AppendLine("      if (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [MyRSJob[]](`$NewJobs)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$NewJobs.Clear()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Start-MyRSJob End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Start-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Get-MyRSJob
        [Void]$Code.AppendLine("#region function Get-MyRSJob")
        [Void]$Code.AppendLine("function Get-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Get Jobs from RunspacePool that match specified criteria")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to search")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      ID of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER JobName")
        [Void]$Code.AppendLine("      Name of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER JobID")
        [Void]$Code.AppendLine("      ID of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to search for")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSJobs = Get-MyRSJob")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Get RSJobs from the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSJobs = Get-MyRSJob -RSPool `$RSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolName `$PoolName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyRSJobs = Get-MyRSJob -PoolID `$PoolID")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Get RSJobs from the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [String[]]`$JobName = `".*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$JobID,")
        [Void]$Code.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
        [Void]$Code.AppendLine("    [String[]]`$State")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Set Job State RegEx Pattern")
        [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"State`"))")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$StatePattern = `$State -join `"|`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$StatePattern = `".*`"")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"Pool`$`" {")
        [Void]$Code.AppendLine("        # Set Pool")
        [Void]$Code.AppendLine("        `$TempPools = `$RSPool")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolName`$`" {")
        [Void]$Code.AppendLine("        # Set Pool Name and Return Matching Pools")
        [Void]$Code.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolName `$PoolName)")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"PoolID`$`" {")
        [Void]$Code.AppendLine("        # Set PoolID Return Matching Pools")
        [Void]$Code.AppendLine("        `$TempPools = [MyRSPool[]](Get-MyRSPool -PoolID `$PoolID)")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Get-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Switch -regex (`$PSCmdlet.ParameterSetName)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `"^JobName`" {")
        [Void]$Code.AppendLine("        # Set Job Name RegEx Pattern and Return Matching Jobs")
        [Void]$Code.AppendLine("        `$NamePattern = `$JobName -join `"|`"")
        [Void]$Code.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.Name -match `$NamePattern } })")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `"^JobID`" {")
        [Void]$Code.AppendLine("        # Set Job ID RegEx Pattern and Return Matching Jobs")
        [Void]$Code.AppendLine("        `$IDPattern = `$JobID -join `"|`"")
        [Void]$Code.AppendLine("        [MyRSJob[]](`$TempPools | ForEach-Object -Process { `$PSItem.Jobs | Where-Object -FilterScript { `$PSItem.State -match `$StatePattern -and `$PSItem.InstanceId -match `$IDPattern } })")
        [Void]$Code.AppendLine("        Break;")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Get-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Get-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Wait-MyRSJob
        [Void]$Code.AppendLine("#region function Wait-MyRSJob")
        [Void]$Code.AppendLine("function Wait-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Wait for RSJob to Finish")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Wait for RSJob to Finish")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to search")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      ID of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER JobName")
        [Void]$Code.AppendLine("      Name of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER JobID")
        [Void]$Code.AppendLine("      ID of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to search for")
        [Void]$Code.AppendLine("    .PARAMETER ScriptBlock")
        [Void]$Code.AppendLine("      ScriptBlock to invoke while waiting")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      For windows Forms scripts add the DoEvents method in to the Wait ScritpBlock")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
        [Void]$Code.AppendLine("      [System.Threading.Thread]::Sleep(250)")
        [Void]$Code.AppendLine("    .PARAMETER Wait")
        [Void]$Code.AppendLine("      TimeSpace to wait")
        [Void]$Code.AppendLine("    .PARAMETER NoWait")
        [Void]$Code.AppendLine("      No Wait, Return when any Job states changes to Stopped, Completed, or Failed")
        [Void]$Code.AppendLine("    .PARAMETER PassThru")
        [Void]$Code.AppendLine("      Return the New Jobs to the Pipeline")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PassThru")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Wait for and Get RSJobs from the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyRSJobs = Wait-MyRSJob -RSPool `$RSPool -PassThru")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolName `$PoolName -PassThru")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyRSJobs = Wait-MyRSJob -PoolID `$PoolID -PassThru")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Wait for and Get RSJobs from the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [String[]]`$JobName = `".*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$JobID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
        [Void]$Code.AppendLine("    [MyRSJob[]]`$RSJob,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
        [Void]$Code.AppendLine("    [String[]]`$State,")
        [Void]$Code.AppendLine("    [ScriptBlock]`$SciptBlock = { [System.Windows.Forms.Application]::DoEvents(); Start-Sleep -Milliseconds 200 },")
        [Void]$Code.AppendLine("    [ValidateRange(`"0:00:00`", `"8:00:00`")]")
        [Void]$Code.AppendLine("    [TimeSpan]`$Wait = `"0:05:00`",")
        [Void]$Code.AppendLine("    [Switch]`$NoWait,")
        [Void]$Code.AppendLine("    [Switch]`$PassThru")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"PassThru`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"PassThru`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Wait`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Wait`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"NoWait`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"NoWait`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"ScriptBlock`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"ScriptBlock`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # List for Wait Jobs")
        [Void]$Code.AppendLine("    #`$WaitJobs = [System.Collections.Generic.List[MyRSJob]]::New())")
        [Void]$Code.AppendLine("    `$WaitJobs = New-Object -TypeName `"System.Collections.Generic.List[MyRSJob]`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Passed RSJobs to `$Jobs")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](`$RSJob))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$WaitJobs.AddRange([MyRSJob[]](Get-MyRSJob @PSBoundParameters))")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Wait-MyRSJob End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Wait for Jobs to be Finshed")
        [Void]$Code.AppendLine("    if (`$NoWait.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      While (@((`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -eq `$WaitJobs.Count)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$SciptBlock.Invoke()")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Object[]]`$CheckJobs = `$WaitJobs.ToArray()")
        [Void]$Code.AppendLine("      `$Start = [DateTime]::Now")
        [Void]$Code.AppendLine("      While (@((`$CheckJobs = `$CheckJobs | Where-Object -FilterScript { `$PSItem.State -notmatch `"Stopped|Completed|Failed`" })).Count -and ((([DateTime]::Now - `$Start) -le `$Wait) -or (`$Wait.Ticks -eq 0)))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$SciptBlock.Invoke()")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    if (`$PassThru.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      # Return Completed Jobs")
        [Void]$Code.AppendLine("      [MyRSJob[]](`$WaitJobs | Where-Object -FilterScript { `$PSItem.State -match `"Stopped|Completed|Failed`" })")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$WaitJobs.Clear()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Wait-MyRSJob End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Wait-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region function Stop-MyRSJob
        [Void]$Code.AppendLine("#region function Stop-MyRSJob")
        [Void]$Code.AppendLine("function Stop-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to search")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("      Name of Job to search for")
        [Void]$Code.AppendLine("    .PARAMETER InstanceId")
        [Void]$Code.AppendLine("      InstanceId of Job to search for")
        [Void]$Code.AppendLine("    .PARAMETER RSJob")
        [Void]$Code.AppendLine("      RunspacePool Jobs to Process")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to search for")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Stop-MyRSJob")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Stop all RSJobs in the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Stop-MyRSJob -RSPool `$RSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Stop-MyRSJob -PoolName `$PoolName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Stop-MyRSJob -PoolID `$PoolID")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Stop all RSJobs in the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [String[]]`$JobName = `".*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$JobID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
        [Void]$Code.AppendLine("    [MyRSJob[]]`$RSJob,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
        [Void]$Code.AppendLine("    [String[]]`$State")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Passed RSJobs to `$Jobs")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempJobs = `$RSJob")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Stop all Jobs that have not Finished")
        [Void]$Code.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempJob.PowerShell.Stop()")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Stop-MyRSJob End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Garbage Collect, Recover Resources")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Stop-MyRSJob End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Stop-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion        
        
        #region function Receive-MyRSJob
        [Void]$Code.AppendLine("#region function Receive-MyRSJob")
        [Void]$Code.AppendLine("function Receive-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Receive Output from Completed Jobs")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Receive Output from Completed Jobs")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to search")
        [Void]$Code.AppendLine("    .PARAMETER PoolName")
        [Void]$Code.AppendLine("      Name of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER PoolID")
        [Void]$Code.AppendLine("      ID of Pool to Get Jobs From")
        [Void]$Code.AppendLine("    .PARAMETER JobName")
        [Void]$Code.AppendLine("      Name of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER JobID")
        [Void]$Code.AppendLine("      ID of Jobs to Get")
        [Void]$Code.AppendLine("    .PARAMETER RSJob")
        [Void]$Code.AppendLine("      Jobs to Process")
        [Void]$Code.AppendLine("    .PARAMETER AutoRemove")
        [Void]$Code.AppendLine("      Remove Jobs after Receiving Output")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyResults = Receive-MyRSJob -AutoRemove")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Receive Results from RSJobs in the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      `$MyResults = Receive-MyRSJob -RSPool `$RSPool -AutoRemove")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyResults = Receive-MyRSJob -PoolName `$PoolName -AutoRemove")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      `$MyResults = Receive-MyRSJob -PoolID `$PoolID -AutoRemove")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Receive Results from RSJobs in the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [String[]]`$JobName = `".*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$JobID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
        [Void]$Code.AppendLine("    [MyRSJob[]]`$RSJob,")
        [Void]$Code.AppendLine("    [Switch]`$AutoRemove,")
        [Void]$Code.AppendLine("    [Switch]`$Force")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"AutoRemove`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"AutoRemove`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # List for Remove Jobs")
        [Void]$Code.AppendLine("    #`$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New())")
        [Void]$Code.AppendLine("    `$RemoveJobs = New-Object -TypeName `"System.Collections.Generic.List[MyRSJob]`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Passed RSJobs to `$Jobs")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempJobs = `$RSJob")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      [Void]`$PSBoundParameters.Add(`"State`", `"Completed`")")
        [Void]$Code.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Receive all Complted Jobs, Remove Job if Required")
        [Void]$Code.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$TempJob.IsCompleted)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        Try")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("          `$TempJob.PowerShell.EndInvoke(`$TempJob.PowerShellAsyncResult)")
        [Void]$Code.AppendLine("          # Add Job to Remove List")
        [Void]$Code.AppendLine("          [Void]`$RemoveJobs.Add(`$TempJob)")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("        Catch")
        [Void]$Code.AppendLine("        {")
        [Void]$Code.AppendLine("        }")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Receive-MyRSJob End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    if (`$AutoRemove.IsPresent)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      # Remove RSJobs")
        [Void]$Code.AppendLine("      foreach (`$RemoveJob in `$RemoveJobs)")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$RemoveJob.PowerShell.Dispose()")
        [Void]$Code.AppendLine("        [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      `$RemoveJobs.Clear()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Garbage Collect, Recover Resources")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Receive-MyRSJob End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Receive-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion
        
        #region function Remove-MyRSJob
        [Void]$Code.AppendLine("#region function Remove-MyRSJob")
        [Void]$Code.AppendLine("function Remove-MyRSJob()")
        [Void]$Code.AppendLine("{")
        [Void]$Code.AppendLine("  <#")
        [Void]$Code.AppendLine("    .SYNOPSIS")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .DESCRIPTION")
        [Void]$Code.AppendLine("      Function to do something specific")
        [Void]$Code.AppendLine("    .PARAMETER RSPool")
        [Void]$Code.AppendLine("      RunspacePool to search")
        [Void]$Code.AppendLine("    .PARAMETER Name")
        [Void]$Code.AppendLine("      Name of Job to search for")
        [Void]$Code.AppendLine("    .PARAMETER InstanceId")
        [Void]$Code.AppendLine("      InstanceId of Job to search for")
        [Void]$Code.AppendLine("    .PARAMETER RSJob")
        [Void]$Code.AppendLine("      RunspacePool Jobs to Process")
        [Void]$Code.AppendLine("    .PARAMETER State")
        [Void]$Code.AppendLine("      State of Jobs to search for")
        [Void]$Code.AppendLine("    .PARAMETER Force")
        [Void]$Code.AppendLine("      Force the Job to stop")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyRSJob")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Remove all RSJobs in the Default RSPool")
        [Void]$Code.AppendLine("    .EXAMPLE")
        [Void]$Code.AppendLine("      Remove-MyRSJob -RSPool `$RSPool")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Remove-MyRSJob -PoolName `$PoolName")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Remove-MyRSJob -PoolID `$PoolID")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("      Remove all RSJobs in the Specified RSPool")
        [Void]$Code.AppendLine("    .NOTES")
        [Void]$Code.AppendLine("      Original Script By Ken Sweet on 10/15/2017 at 06:53 AM")
        [Void]$Code.AppendLine("      Updated Script By Ken Sweet on 02/04/2019 at 06:53 AM")
        [Void]$Code.AppendLine("    .LINK")
        [Void]$Code.AppendLine("  #>")
        [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("  param (")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [MyRSPool[]]`$RSPool,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [String]`$PoolName = `"MyDefaultRSPool`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [Guid]`$PoolID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [String[]]`$JobName = `".*`",")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [Guid[]]`$JobID,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$True, ValueFromPipeline = `$True, ParameterSetName = `"RSJob`")]")
        [Void]$Code.AppendLine("    [MyRSJob[]]`$RSJob,")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobNamePoolID`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPool`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolName`")]")
        [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"JobIDPoolID`")]")
        [Void]$Code.AppendLine("    [ValidateSet(`"NotStarted`", `"Running`", `"Stopping`", `"Stopped`", `"Completed`", `"Failed`", `"Disconnected`")]")
        [Void]$Code.AppendLine("    [String[]]`$State,")
        [Void]$Code.AppendLine("    [Switch]`$Force")
        [Void]$Code.AppendLine("  )")
        [Void]$Code.AppendLine("  Begin")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Remove Invalid Get-MyRSJob Parameters")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -ne `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$PSBoundParameters.ContainsKey(`"Force`"))")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        [Void]`$PSBoundParameters.Remove(`"Force`")")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # List for Remove Jobs")
        [Void]$Code.AppendLine("    #`$RemoveJobs = [System.Collections.Generic.List[MyRSJob]]::New())")
        [Void]$Code.AppendLine("    `$RemoveJobs = New-Object -TypeName `"System.Collections.Generic.List[MyRSJob]`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Begin Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  Process")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Add Passed RSJobs to `$Jobs")
        [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"RSJob`")")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempJobs = `$RSJob")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$TempJobs = [MyRSJob[]](Get-MyRSJob @PSBoundParameters)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Remove all Jobs, Stop all Running if Forced")
        [Void]$Code.AppendLine("    ForEach (`$TempJob in `$TempJobs)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      if (`$Force -and `$TempJob.State -notmatch `"Stopped|Completed|Failed`")")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        `$TempJob.PowerShell.Stop()")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("      if (`$TempJob.State -match `"Stopped|Completed|Failed`")")
        [Void]$Code.AppendLine("      {")
        [Void]$Code.AppendLine("        # Add Job to Remove List")
        [Void]$Code.AppendLine("        [Void]`$RemoveJobs.Add(`$TempJob)")
        [Void]$Code.AppendLine("      }")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob Process Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("  End")
        [Void]$Code.AppendLine("  {")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Remove-MyRSJob End Block`"")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Remove RSJobs")
        [Void]$Code.AppendLine("    foreach (`$RemoveJob in `$RemoveJobs)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      `$RemoveJob.PowerShell.Dispose()")
        [Void]$Code.AppendLine("      [Void]`$Script:MyHiddenRSPool[`$RemoveJob.PoolName].Jobs.Remove(`$RemoveJob)")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    `$RemoveJobs.Clear()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    # Garbage Collect, Recover Resources")
        [Void]$Code.AppendLine("    [System.GC]::Collect()")
        [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Remove-MyRSJob End Block`"")
        [Void]$Code.AppendLine("  }")
        [Void]$Code.AppendLine("}")
        [Void]$Code.AppendLine("#endregion function Remove-MyRSJob")
        [Void]$Code.AppendLine("")
        #endregion        
        
        [Void]$Code.AppendLine("#endregion ================ Multiple Thread Functions ================")
        [Void]$Code.AppendLine("")
        
        #endregion
        
        #endregion
        
        #region ******** Copied from Sapian ********
#        [Void]$Code.AppendLine("#region Set DPI Awareness")
#        [Void]$Code.AppendLine("`$null = Add-Type -TypeDefinition @`"")
#        [Void]$Code.AppendLine("using System;")
#        [Void]$Code.AppendLine("using System.Runtime.InteropServices;")
#        [Void]$Code.AppendLine("namespace SAPIEN")
#        [Void]$Code.AppendLine("{")
#        [Void]$Code.AppendLine("	public static class DPIAware")
#        [Void]$Code.AppendLine("	{")
#        [Void]$Code.AppendLine("		public enum PROCESS_DPI_AWARENESS")
#        [Void]$Code.AppendLine("		{")
#        [Void]$Code.AppendLine("			PROCESS_DPI_UNAWARE = 0,")
#        [Void]$Code.AppendLine("			PROCESS_SYSTEM_DPI_AWARE = 1,")
#        [Void]$Code.AppendLine("			PROCESS_PER_MONITOR_DPI_AWARE = 2")
#        [Void]$Code.AppendLine("		}")
#        [Void]$Code.AppendLine("")
#        [Void]$Code.AppendLine("		[DllImport(`"SHCore.dll`", SetLastError = true)]")
#        [Void]$Code.AppendLine("		public static extern int SetProcessDpiAwareness(PROCESS_DPI_AWARENESS awareness);")
#        [Void]$Code.AppendLine("  }")
#        [Void]$Code.AppendLine("}")
#        [Void]$Code.AppendLine("`"@")
#        [Void]$Code.AppendLine("#Call before displaying a GUI")
#        [Void]$Code.AppendLine("[SAPIEN.DPIAware]::SetProcessDpiAwareness('PROCESS_SYSTEM_DPI_AWARE')")
#        [Void]$Code.AppendLine("#endregion Set DPI Awareness")
#        [Void]$Code.AppendLine("")
        #endregion
        
        #region ******** $Name Custom Code ********
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> $Name Custom Code <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region ******** `$$($Name)$($Control)ICO ********")
        [Void]$Code.AppendLine("# Icons for Forms are 16x16")
        [Void]$Code.AppendLine("`$$($Name)$($Control)ICO = @`"")
        [Void]$Code.AppendLine("AAABAAEAEBAAAAAAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgTgAAHpfAACDQQAAiQIAAAAAAAAAAAAAAAAAAAAA/T8SBPxFEUb8UxJe/D4MMQAA")
        [Void]$Code.AppendLine("AAAAAAAAAgKODAAAiLkJCaH/CAi6/wAAsv8AAJDMAACQGQAAAAAAAAAA/VYlIf11Ldb8p0X//KU8//yRKP/8UxCr/EQMBwcHlpUnJ7L/QEDH/05O1v9DQ+D/DQ3f/wAAlbsAAAAAAAAAAP19Q8f9wnn//ceE//7I")
        [Void]$Code.AppendLine("hv/9vW3//KE0//xQEIgODp7vIyOx/zIyw/8+PtP/R0fg/0RE7P8EBMP/BgCTHulKOST+unX//saF//7Jif/+yIj//seD//29av/8ch3qBwea+xkZrf8iIr//LS3P/zU13f85Oer/Fhbe/wcAmTTnTkAy/sWG//7K")
        [Void]$Code.AppendLine("kP/+ypD//siK//3FgP/9wHT//Icx/QAAmsKOjtf/Gxu9/xsby/8hIdr/JSXo/xER1fQHA6oL51FFCP6me+7+6NH//syX//7Iiv/+wnz//bxr//16M80GBp82MjK19aqq5v85OdL/Nzfe/w8P5P8HB8l0AAAAAAAA")
        [Void]$Code.AppendLine("AAD+clpg/9a9/v7r1//+zpj//saE//2nWPv9XitFAAAAAAwMqC4GBq+qEBDA211d1cIRF79bAAAAAAAAAAAAAAAAAAAAAO90Wkn+kWy6/qV63P6Zd7X+Yjg9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFHlpDxCZ")
        [Void]$Code.AppendLine("QowSp0LUEKI90RGUM4NGhjgKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFKtQBx20V8060Hv/RtOC/znNd/8XvFX/DZo1wgqWNAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABq2")
        [Void]$Code.AppendLine("XWU/14b/UNuR/1rclf9i25f/WNaN/xq6VP8MlzVcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkxW6aPNyL/0nekv9R3pX/VtuU/1fYkP89znn/D6A8lwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        [Void]$Code.AppendLine("AAAAAAAAIMNthF/mpf9E4pb/R+CU/0nckP9I14n/P9B9/xKnRYoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABy6ZShU4p/5tvXY/0Pilv8724r/OdWB/yzJb/0UqUw0AAAAAAAAAAAAAAAAAAAAAAAA")
        [Void]$Code.AppendLine("AAAAAAAAAAAAAAAAAAAAAAAAKsR1VlTfnfOA7Lj/iuq6/zfPfPkYtVprAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAivWoSJcNwVDLEdVk0um0bAAAAAAAAAAAAAAAAAAAAAAAA")
        [Void]$Code.AppendLine("AAAAAAAAw8MAAAGAAAABgAAAAAAAAAAAAAAAAAAAAYAAAIPBAAD4HwAA8A8AAPAPAADwDwAA8A8AAPAPAAD4HwAA/D8AAA==")
        [Void]$Code.AppendLine("`"@")
        [Void]$Code.AppendLine("#endregion ******** `$$($Name)$($Control)ICO ********")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#region ******** `$$($Name)$($Control)Logo ********")
        [Void]$Code.AppendLine("#endregion ******** `$$($Name)$($Control)Logo ********")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("#endregion ================ $Name Custom Code ================")
        [Void]$Code.AppendLine("")
        #endregion
        
        [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) <<<<<<<<<<<<<<<<")
        [Void]$Code.AppendLine("")
        [Void]$Code.AppendLine("$($CGenConfig.ToolName)FormComponents = New-Object -TypeName System.ComponentModel.Container")
        [Void]$Code.AppendLine("")
        [Void]$Code.Append($(New-MyWindowsFormControl -Name $Name -Control "ToolTip"))
        [Void]$Code.AppendLine("")
        break
      }
      "ListView"
      {
#region ******** ListView Sort *********
	      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> ListView Sort <<<<<<<<<<<<<<<<")
	      [Void]$Code.AppendLine("`$MyCustomListViewSort = @`"")
	      [Void]$Code.AppendLine("using System;")
	      [Void]$Code.AppendLine("using System.Windows.Forms;")
	      [Void]$Code.AppendLine("using System.Collections;")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("namespace MyCustom")
	      [Void]$Code.AppendLine("{")
	      [Void]$Code.AppendLine("  public class ListViewSort : IComparer")
	      [Void]$Code.AppendLine("  {")
	      [Void]$Code.AppendLine("    private int _Column = 0;")
	      [Void]$Code.AppendLine("    private bool _Ascending = true;")
	      [Void]$Code.AppendLine("    private bool _Enable = true;")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public ListViewSort()")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      _Column = 0;")
	      [Void]$Code.AppendLine("      _Ascending = true;")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public ListViewSort(int Column)")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      _olumn = Column;")
	      [Void]$Code.AppendLine("      _Ascending = true;")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public ListViewSort(int Column, bool Order)")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      _Column = Column;")
	      [Void]$Code.AppendLine("      _Ascending = Order;")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public int Column")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      get { return _Column; }")
	      [Void]$Code.AppendLine("      set { _Column = value; }")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public bool Ascending")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      get { return _Ascending; }")
	      [Void]$Code.AppendLine("      set { _Ascending = value; }")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public bool Enable")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      get { return _Enable; }")
	      [Void]$Code.AppendLine("      set { _Enable = value; }")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("")
	      [Void]$Code.AppendLine("    public int Compare(object RowX, object RowY)")
	      [Void]$Code.AppendLine("    {")
	      [Void]$Code.AppendLine("      if (_Enable)")
	      [Void]$Code.AppendLine("      {")
	      [Void]$Code.AppendLine("        if (_Ascending)")
	      [Void]$Code.AppendLine("        {")
	      [Void]$Code.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text);")
	      [Void]$Code.AppendLine("        }")
	      [Void]$Code.AppendLine("        else")
	      [Void]$Code.AppendLine("        {")
	      [Void]$Code.AppendLine("          return String.Compare(((System.Windows.Forms.ListViewItem)RowY).SubItems[_Column].Text, ((System.Windows.Forms.ListViewItem)RowX).SubItems[_Column].Text);")
	      [Void]$Code.AppendLine("        }")
	      [Void]$Code.AppendLine("      }")
	      [Void]$Code.AppendLine("      else")
	      [Void]$Code.AppendLine("      {")
	      [Void]$Code.AppendLine("        return 0;")
	      [Void]$Code.AppendLine("      }")
	      [Void]$Code.AppendLine("    }")
	      [Void]$Code.AppendLine("  }")
	      [Void]$Code.AppendLine("}")
	      [Void]$Code.AppendLine("`"@")
	      [Void]$Code.AppendLine("Add-Type -TypeDefinition `$MyCustomListViewSort -ReferencedAssemblies `"System.Windows.Forms`" -Debug:`$False")
	      [Void]$Code.AppendLine("#endregion ================ ListView Sort ================")
	      [Void]$Code.AppendLine("")
#endregion
        break
      }
    }
    if (@("ImageList", "Form", "ContextMenuStrip", "MenuStrip", "ToolStrip", "ToolStripContainer", "StatusStrip", "GroupBox", "Panel", "SplitContainer", "TabControl") -Contains $Control)
    {
      [Void]$Code.AppendLine("# ************************************************")
      [Void]$Code.AppendLine("# $Name $Control for?")
      [Void]$Code.AppendLine("# ************************************************")
      [Void]$Code.AppendLine("")
    }
    [Void]$Code.AppendLine("#region `$$($Name)$($Control) = System.Windows.Forms.$Control")
    [Void]$Code.AppendLine("Write-Verbose -Message `"Creating Form Control ```$$($Name)$($Control)`"")
    if (@("Timer", "ImageList", "ToolTip", "NotifyIcon") -Contains $Control) 
    {
      [Void]$Code.AppendLine("`$$($Name)$($Control) = New-Object -TypeName System.Windows.Forms.$Control($($CGenConfig.ToolName)FormComponents)")
    } 
    else 
    {
      [Void]$Code.AppendLine("`$$($Name)$($Control) = New-Object -TypeName System.Windows.Forms.$Control")
    }
    if (($Control -ne "form") -and (-not $Control.EndsWith("Dialog"))) 
    {
      Switch ($Control) {
        {@("Timer", "ImageList", "ToolTip", "NotifyIcon") -contains $PSItem} 
        {
          break
        }
        "Button"
        {
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          [Void]$Code.AppendLine("# Evenly Space Buttons - Move Size to after Text")
          [Void]$Code.AppendLine("#`$NumButtons = 2")
          [Void]$Code.AppendLine("#`$TempSpace = [Math]::Floor(`$PUCSubSplitContainer.Panel2.ClientSize.Width - (`$PUCConfig.FormSpacer * (`$NumButtons + 1)))")
          [Void]$Code.AppendLine("#`$TempWidth = [Math]::Floor(`$TempSpace / `$NumButtons)")
          [Void]$Code.AppendLine("#`$TempMod = `$TempSpace % `$NumButtons")
          [Void]$Code.AppendLine("#`$$($Name)$($Control).Size = New-Object -TypeName System.Drawing.Size(`$TempWidth, `$$($Name)$($Control).PreferredSize.Height)")
          break
        }
        "ColumnHeader"
        {
          [Void]$Code.AppendLine("[Void]`$ListView.Columns.Add(`$$($Name)$($Control))")
          break
        }
        "ContextMenuStrip" 
        {
          #[Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          [Void]$Code.AppendLine("#$($CGenConfig.ToolName)Form.ContextMenuStrip = `$$($Name)$($Control)")
          break
        }
        "MenuStrip" 
        {
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.MainMenuStrip = `$$($Name)$($Control)")
          break
        }
        "TreeNode" 
        {
          [Void]$Code.AppendLine("`$TreeView.Nodes.Add(`$$($Name)$($Control))")
          break
        }
        "GroupBox" 
        {
          [Void]$Code.AppendLine("# Location of First Control New-Object -TypeName System.Drawing.Point($($CGenConfig.ToolName)Config.FormSpacer, $($CGenConfig.ToolName)Config.FontData.Height)")
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          break
        }
        "ListViewItem" 
        {
          [Void]$Code.AppendLine("[Void]`$ListView.Items.Add(`$$($Name)$($Control))")
          break
        }
        "ListBox" 
        {
          [Void]$Code.AppendLine("# Set ItemHeight based on Font Size `$$($Name)$($Control)ListBox.ItemHeight = $($CGenConfig.ToolName)Config.FontData.Height")
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          break
        }
        "TabPage" 
        {
          [Void]$Code.AppendLine("`$TabControl.Controls.Add(`$$($Name)$($Control))")
          break
        }
        "ToolStrip" 
        {
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          break
        }
        "ToolStripPanel" 
        {
          [Void]$Code.AppendLine("#[Void]`$$($Name)$($Control).Join(`$$($Name)_ToolStrip)")
          break
        }
        {$PSItem -like "ToolStrip*"} 
        {
          [Void]$Code.AppendLine("#[Void]`$ToolMenuStrip.Items.Add(`$$($Name)$($Control))")
          [Void]$Code.AppendLine("#[Void]`$ToolMenuStrip.DropDownItems.Add(`$$($Name)$($Control))")
          break
        }
        "DataGridView" 
        {
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          break
        }
        {$PSItem -like "DataGridView*"} 
        {
          [Void]$Code.AppendLine("[Void]`$DataGridView.Columns.Add(`$$($Name)$($Control))")
          break
        }
        Default 
        {
          [Void]$Code.AppendLine("$($CGenConfig.ToolName)Form.Controls.Add(`$$($Name)$($Control))")
          break
        }
      }
    }
    $MyProps = Get-MyWindowsFormControlProperty -Control $Control | Sort-Object -Property Name
    ForEach ($MyProp in $MyProps) 
    {
      Switch ($MyProp.TypeNameOfValue) 
      {
        {@("System.ComponentModel.AttributeCollection", "System.ComponentModel.ISite", "System.Drawing.Printing.PrinterSettings", "System.Drawing.region", "System.IFormatProvider", "System.IO.Stream", "System.Object[]", "System.Type", "System.Windows.Forms.AutoCompleteStringCollection", "System.Windows.Forms.BindingContext", "System.Windows.Forms.Control", "System.Windows.Forms.DataGridCell", "System.Windows.Forms.DataGridViewCell", "System.Windows.Forms.DataGridViewColumnHeaderCell", "System.Windows.Forms.DataGridViewHeaderCell", "System.Windows.Forms.DataGridViewRowHeaderCell", "System.Windows.Forms.Form", "System.Windows.Forms.GridItem", "System.Windows.Forms.ImageListStreamer", "System.Windows.Forms.IWindowTarget", "System.Windows.Forms.LayoutSettings", "System.Windows.Forms.ListViewItem", "System.Windows.Forms.TabPage", "System.Windows.Forms.ToolStrip", "System.Windows.Forms.ToolStripItem", "System.Windows.Forms.ToolStripRenderer", "System.Windows.Forms.ToolStripTextDirection", "System.Windows.Forms.TreeNode") -contains $PSItem} 
        {
         [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($MyProp.TypeNameOfValue)")
          Break
        }
        {@("System.Drawing.ContentAlignment", "System.Environment+SpecialFolder", "System.Windows.Forms.AccessibleRole", "System.Windows.Forms.AnchorStyles", "System.Windows.Forms.Appearance", "System.Windows.Forms.AutoCompleteMode", "System.Windows.Forms.AutoCompleteSource", "System.Windows.Forms.AutoScaleMode", "System.Windows.Forms.AutoSizeMode", "System.Windows.Forms.AutoValidate", "System.Windows.Forms.Border3DStyle", "System.Windows.Forms.BorderStyle", "System.Windows.Forms.CharacterCasing", "System.Windows.Forms.CheckState", "System.Windows.Forms.ColorDepth", "System.Windows.Forms.ColumnHeaderStyle", "System.Windows.Forms.ComboBoxStyle", "System.Windows.Forms.DataGridLineStyle", "System.Windows.Forms.DataGridParentRowsLabelStyle", "System.Windows.Forms.DataGridViewAutoSizeColumnMode", "System.Windows.Forms.DataGridViewAutoSizeColumnsMode", "System.Windows.Forms.DataGridViewAutoSizeRowsMode", "System.Windows.Forms.DataGridViewCellBorderStyle", "System.Windows.Forms.DataGridViewCellStyle", "System.Windows.Forms.DataGridViewClipboardCopyMode", "System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode", "System.Windows.Forms.DataGridViewColumnSortMode", "System.Windows.Forms.DataGridViewComboBoxDisplayStyle", "System.Windows.Forms.DataGridViewContentAlignment", "System.Windows.Forms.DataGridViewEditMode", "System.Windows.Forms.DataGridViewHeaderBorderStyle", "System.Windows.Forms.DataGridViewImageCellLayout", "System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode", "System.Windows.Forms.DataGridViewSelectionMode", "System.Windows.Forms.DataGridViewTriState", "System.Windows.Forms.DateTimePickerFormat", "System.Windows.Forms.DialogResult", "System.Windows.Forms.DockStyle", "System.Windows.Forms.DrawMode", "System.Windows.Forms.FixedPanel", "System.Windows.Forms.FlatStyle", "System.Windows.Forms.FlowDirection", "System.Windows.Forms.FormBorderStyle", "System.Windows.Forms.FormStartPosition", "System.Windows.Forms.FormWindowState", "System.Windows.Forms.HorizontalAlignment", "System.Windows.Forms.ImageLayout", "System.Windows.Forms.ImeMode", "System.Windows.Forms.InsertKeyMode",  "System.Windows.Forms.ItemActivation", "System.Windows.Forms.Keys", "System.Windows.Forms.LeftRightAlignment", "System.Windows.Forms.LinkBehavior", "System.Windows.Forms.ListViewAlignment", "System.Windows.Forms.MaskFormat", "System.Windows.Forms.MergeAction", "System.Windows.Forms.Orientation", "System.Windows.Forms.PictureBoxSizeMode", "System.Windows.Forms.ProgressBarStyle", "System.Windows.Forms.PropertySort", "System.Windows.Forms.RichTextBoxLanguageOptions", "System.Windows.Forms.RichTextBoxScrollBars", "System.Windows.Forms.RightToLeft", "System.Windows.Forms.ScrollBars", "System.Windows.Forms.SelectionMode", "System.Windows.Forms.SizeGripStyle", "System.Windows.Forms.SortOrder", "System.Windows.Forms.TabAlignment", "System.Windows.Forms.TabAppearance", "System.Windows.Forms.TabDrawMode", "System.Windows.Forms.TabSizeMode", "System.Windows.Forms.TextImageRelation", "System.Windows.Forms.TickStyle", "System.Windows.Forms.ToolStripDropDownDirection", "System.Windows.Forms.ToolStripGripStyle", "System.Windows.Forms.ToolStripItemAlignment", "System.Windows.Forms.ToolStripItemImageScaling", "System.Windows.Forms.ToolStripItemOverflow", "System.Windows.Forms.ToolStripLayoutStyle", "System.Windows.Forms.ToolStripRenderMode", "System.Windows.Forms.ToolStripStatusLabelBorderSides", "System.Windows.Forms.ToolTipIcon", "System.Windows.Forms.TreeViewDrawMode", "System.Windows.Forms.View") -contains $PSItem} 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(Get-EnumValue -Value $($MyProp.Value))")
          Break
        }
        {@("System.Drawing.Printing.PrintDocument", "System.Windows.Forms.ContextMenu", "System.Windows.Forms.ContextMenuStrip", "System.Windows.Forms.DataGridViewRow", "System.Windows.Forms.ImageList", "System.Windows.Forms.ListViewGroup", "System.Windows.Forms.MainMenu", "System.Windows.Forms.MenuStrip", "System.Windows.Forms.ToolStripDropDown", "System.Windows.Forms.ToolStripMenuItem") -contains $PSItem} 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($MyProp.TypeNameOfValue)")
          Break
        }
        {@("System.Windows.Forms.ComboBox+ObjectCollection", "System.Windows.Forms.ListBox+ObjectCollection", "System.Windows.Forms.ListView+ColumnHeaderCollection","System.Windows.Forms.ListView+ListViewItemCollection","System.Windows.Forms.ListViewGroupCollection","System.Windows.Forms.ToolStripItemCollection") -contains $PSItem} 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control).BeginUpdate()")
          [Void]$Code.AppendLine("#[Void]`$$($Name)$($Control)`.$($MyProp.Name).Add(`$$($Control)$($MyProp.Name))")
          [Void]$Code.AppendLine("#`$$($Name)$($Control).EndUpdate()")
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name).AddRange(@(`$$($Control)$($MyProp.Name)))")
          Break
        }
        "System.Boolean" 
        {
          if (($Control -eq "Form" -and $MyProp.Name -eq "KeyPreview") -or ($Control -eq "Button" -and $MyProp.Name -eq "AutoSize"))
          {
            [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `$True")
          }
          elseif ($Control -eq "ListBox" -and $MyProp.Name -eq "IntegralHeight")
          {
            [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `$False")
          }
          else
          {
            [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ([String]::IsNullOrEmpty($MyProp.Value)) { "`$True / `$False" } else { "`$$($MyProp.Value.ToString())" })")
          }
          Break
        }
        "System.Char" 
        {
          if ($MyProp.Value -eq 0) 
          {
            [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = ''")
          } 
          else 
          {
            [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = '$($MyProp.Value.ToString())'")
          }
          Break
        }
        "System.Collections.IComparer" 
        {
          Switch ($MyProp.Name)
          {
            "ListViewItemSorter" {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName MyCustom.ListViewSort")
              Break
            }
            Default 
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($MyProp.TypeNameOfValue) # Custom Sort")
              Break
            }
          }
          Break
        }
        "System.DateTime" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [DateTime]::Parse(`"$($MyProp.Value.ToString())`")")
          Break
        }
        "System.Decimal" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value.ToString()})")
          Break
        }
        "System.Double" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value.ToString()})")
          Break
        }
        "System.Drawing.Color" 
        {
          if ($MyProp.Value.Name -ne 0) 
          {
            Switch ($Control)
            {
              {@("Form", "Panel", "TabControl", "TabPage", "ContextMenuStrip", "MenuStrip", "StatusBar", "StatusStrip", "ToolBar", "ToolStrip", "ToolStripContainer", "ToolStripButton", "ToolStripDropDownButton", "ToolStripDropDown", "ToolStripMenuItem", "ToolStripPanel", "ToolStripProgressBar", "ToolStripSeparator", "ToolStripSplitButton", " SplitContainer", "Panel") -contains $PSItem}
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.BackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.ForeColor")
                    Break
                  }
                }
                Break
              }
              "Button"
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.ButtonBackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.ButtonForeColor")
                    Break
                  }
                }
                Break
              }
              { @("Label") -contains $PSItem }
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.BackColor")
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.TitleBackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.ForeColor")
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.TitleForeColor")
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.LabelForeColor")
                    Break
                  }
                }
                Break
              }
              { @("CheckBox", "RadioButton", "ToolStripStatusLabel", "ToolStripLabel") -contains $PSItem }
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.BackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.ForeColor")
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.LabelForeColor")
                    Break
                  }
                }
                Break
              }
              {@("GroupBox") -contains $PSItem}
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.BackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.GroupForeColor")
                    Break
                  }
                }
                Break
              }
              {@("TextBox", "ComboBox", "CheckedListBox", "ListBox", "ListView", "TreeView", "RichTextBox", "DateTimePicker", "DataGridView", "ToolStripComboBox", "ToolStripTextBox") -contains $PSItem}
              {
                Switch ($MyProp.Name)
                {
                  "BackColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.TextBackColor")
                    Break
                  }
                  "ForeColor"
                  {
                    [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Color.TextForeColor")
                    Break
                  }
                }
                Break
              }
              Default
              {
                [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ($MyProp.Value.IsSystemColor) {"[System.Drawing.SystemColors]"} else {"[System.Drawing.Color]"})::$($MyProp.Value.Name.ToString())")
                Break
              }
            }
          } 
          else 
          {
            [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = `$Null")
          }
          Break
        }
        "System.Drawing.Font" 
        {
          Switch ($Control)
          {
            "Form"
            {
              #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Font(`$$($Name)Config.FontFamily, (`$$($Name)Config.FontSize * (96 / (`$$($Name)$($Control).CreateGraphics()).DpiX)), [$($MyProp.value.Style.getType().Fullname)]::$($MyProp.value.Style), [$($MyProp.value.Unit.getType().Fullname)]::$($MyProp.value.Unit))")
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Regular")
              Break
            }
            "Label"
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Title")
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Bold")
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Regular")
              Break
            }
            {@("GroupBox", "Button", "ListView", "TabControl") -contains $PSItem}
            {
              #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Font($($CGenConfig.ToolName)Config.FontFamily, $($CGenConfig.ToolName)Config.FontSize, [System.Drawing.FontStyle]::Bold, [$($MyProp.value.Unit.getType().Fullname)]::$($MyProp.value.Unit))")
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Bold")
              Break
            }
            {@("CheckBox", "RadioButton") -contains $PSItem}
            {
              #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Font($($CGenConfig.ToolName)Config.FontFamily, $($CGenConfig.ToolName)Config.FontSize, [System.Drawing.FontStyle]::Bold, [$($MyProp.value.Unit.getType().Fullname)]::$($MyProp.value.Unit))")
              #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Form.Font")
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Bold")
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Regular")
              Break
            }
            {@("TextBox", "ComboBox", "CheckedListBox", "ListBox", "TreeView", "RichTextBox", "DateTimePicker", "DataGridView", "TabPage", "ContextMenuStrip", "MenuStrip", "StatusBar", "StatusStrip", "ToolBar", "ToolStripContainer", "ToolStripButton", "ToolStripDropDownButton", "ToolStripDropDown", "ToolStripMenuItem", "ToolStripPanel", "ToolStripProgressBar", "ToolStripSeparator", "ToolStripSplitButton", "ToolStripLabel", "ToolStripStatusLabel", "ToolStripComboBox", "ToolStripTextBox") -contains $PSItem}
            {
              #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Form.Font")
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Regular")
              Break
            }
            Default
            {
              if ([String]::IsNullOrEmpty($MyProp.Value)) 
              {
                [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Font()")
              } 
              else 
              {
                #[Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Font(`"$($MyProp.Value.Name)`", $($MyProp.Value.Size), [$($MyProp.value.Style.getType().Fullname)]::$($MyProp.Value.Style), [$($MyProp.value.Unit.getType().Fullname)]::$($MyProp.value.Unit))")
                Switch ($MyProp.Value.Style)
                {
                  "Bold"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Bold")
                  }
                  "Regular"
                  {
                    [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Regular")
                  }
                }
              }
              Break
            }
          }
          Break
        }
        "System.Drawing.Icon" 
        {
          Switch ($Control)
          {
            "Form"
            {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = [System.Drawing.Icon]([System.Convert]::FromBase64String((`$$($Name)$($Control)ICO)))")
              Break
            }
            Default
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [System.Drawing.Icon]([System.Convert]::FromBase64String((`$Icon)))")
              Break
            }
          }
          Break
        }
        "System.Drawing.Image" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [System.Drawing.Image]([System.Convert]::FromBase64String(`$ImageFile))")
          Break
        }
        "System.Drawing.Point" 
        {
          Switch ($MyProp.Name) 
          {
            {"Location" -eq $PSItem -and $Control -ne "Form"} 
            {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Point($($CGenConfig.ToolName)Config.FormSpacer, $($CGenConfig.ToolName)Config.FormSpacer)")
              break
            }
            Default 
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Point($($MyProp.Value.X), $($MyProp.Value.Y))")
              break
            }
          }
          Break
        }
        "System.Drawing.Rectangle" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Windows.Forms.Padding($($MyProp.Value.Left), $($MyProp.Value.Top), $($MyProp.Value.Right), $($MyProp.Value.Bottom))")
          Break
        }
        "System.Drawing.Size" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Size($($MyProp.Value.Width), $($MyProp.Value.Height))")
          Break
        }
        "System.Drawing.SizeF" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Drawing.Size($($MyProp.Value.Width), $($MyProp.Value.Height))")
          Break
        }
        "System.Globalization.CultureInfo" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [System.Globalization.CultureInfo]::CurrentCulture")
          Break
        }
        "System.Int32" 
        {
          Switch ($MyProp.Name) 
          {
            "ItemHeight"
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($CGenConfig.ToolName)Config.FontData.Height")
              break
            }
            "Interval"
            {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `$$($Name)Config.AutoExitTic")
              break
            }
            Default 
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value.ToString()})")
              break
            }
          }
          Break
        }
        "System.Int32[]" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = `@`($(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value -Join ", "})`)")
          Break
        }
        "System.Object" 
        {
          Switch ($MyProp.Name) 
          {
            "Tag"
            {
              Switch ($Control)
              {
                "Form"
                {
                  [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = (-not `$$($Name)Config.Production)")
                  Break
                }
                Default
                {
                  [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = `$Null")
                  Break
                }
              }
              Break
            }
            {@("FalseValue", "IndeterminateValue", "TrueValue") -contains $PSItem} 
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($MyProp.TypeNameOfValue)")
              Break
            }
            Default 
            {
             [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $($MyProp.TypeNameOfValue)")
              Break
            }
          }
          Break
        }
        "System.Single" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = $(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value.ToString()})")
          Break
        }
        "System.String" 
        {
          Switch ($MyProp.Name)
          {
            "DisplayMember" {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"Text`"")
              Break
            }
            "ValueMember" {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"Value`"")
              Break
            }
            "Name" {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"$($Name)$($Control)`"")
              Break
            }
            "ToolTipTitle" 
            {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"`$(`$$($Name)Config.ScriptName) - `$(`$$($Name)Config.ScriptVersion)`"")
              Break
            }
            {"Text" -eq $PSItem -and $Control -eq "Form"} 
            {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"`$(`$$($Name)Config.ScriptName) - `$(`$$($Name)Config.ScriptVersion)`"")
              Break
            }
            "Text" {
              [Void]$Code.AppendLine("`$$($Name)$($Control)`.$($MyProp.Name) = `"$($Name)$($Control)`"")
              Break
            }
            Default 
            {
              [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = `"$(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value.ToString()})`"")
              Break
            }
          }
          Break
        }
        "System.String[]" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = `@`($(if ([String]::IsNullOrEmpty($MyProp.Value)) {$Null} else {$MyProp.Value -Join ", "})`)")
          Break
        }
        "System.Uri" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Uri(`"`")")
          Break
        }
        "System.Windows.Forms.Cursor" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [System.Windows.Forms.Cursors]::Default")
          Break
        }
        "System.Windows.Forms.IButtonControl" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = System.Windows.Forms.Button")
          Break
        }
        "System.Windows.Forms.Padding" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = New-Object -TypeName System.Windows.Forms.Padding($($MyProp.Value.Left), $($MyProp.Value.Top), $($MyProp.Value.Right), $($MyProp.Value.Bottom))")
          Break
        }
        "System.Windows.Forms.ToolStripItemDisplayStyle" 
        {
          [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = [System.Windows.Forms.ToolStripItemDisplayStyle]::$($MyProp.Value.ToString())")
          Break
        }
        Default 
        {
          if (@("Accelerations", "AutoCompleteCustomSource", "CheckedIndices", "CheckedItems", "Controls", "CustomTabOffsets", "DataBindings", "OwnedForms", "SelectedCells", "SelectedColumns", "SelectedIndices", "SelectedItems", "SelectedObjects", "SelectedRows", "SelectionTabs", "TableStyles") -notcontains $MyProp.Name)
          {
            [Void]$Code.AppendLine("#`$$($Name)$($Control)`.$($MyProp.Name) = Unknown")
          }
        }
      }
    }
  }
  Catch 
  {
  }
  [Void]$Code.AppendLine("#endregion")
  Switch ($Control) 
  {
    "Form" 
    {
      [Void]$Code.AppendLine("$($CGenConfig.ToolName)ToolTip.SetToolTip(`$$($Name)$($Control), `"Help for Control `$(`$$($Name)$($Control)`.Name)`")")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control $($CGenControlListListBox.SelectedItem.Value) -Name $($CGenControlNameTextBox.Text) -Events $($CGenControlEventListBox.SelectedItems)))
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.Append($(New-MyWindowsFormControl -Name $Name -Control "Timer"))
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control "Timer" -Name $Name -Events ([PSCustomObject]@{"Text" = "Tick" ; "Value" = "add_Tick"})).Trim())
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#`$$($Name)$($Control).ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$$($Name)$($Control).Controls[`$$($Name)$($Control).Controls.Count - 1]).Right + $($CGenConfig.ToolName)Config.FormSpacer), (`$(`$$($Name)$($Control).Controls[`$$($Name)$($Control).Controls.Count - 1]).Bottom + $($CGenConfig.ToolName)Config.FormSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Controls ================")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) ================")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("[System.Windows.Forms.Application]::Run($("`$$($Name)$($Control)"))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("$($CGenConfig.ToolName)FormComponents.Dispose()")
      [Void]$Code.AppendLine("`$$($Name)$($Control).Dispose()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("if ($($CGenConfig.ToolName)Config.Production)")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  [Environment]::Exit(0)")
      [Void]$Code.AppendLine("}")
      break
    }
    {@("MenuStrip", "StatusStrip", "ToolStrip") -contains $PSItem} 
    {
      [Void]$Code.AppendLine("")
      #[Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) $($Control) MenuItems <<<<<<<<<<<<<<<<")
      #[Void]$Code.AppendLine("")
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control "ToolStripButton" -Name $Name -Events ([PSCustomObject]@{"Text" = "Click" ; "Value" = "add_Click"})).Trim())
      [Void]$Code.AppendLine("#(New-MenuItem -Menu `$$($Name)$($Control) -Text `"Text`" -Tag `"Tag`" -PassThru).add_Click({Start-$($Name)ToolStripButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("#`$NewMenuItem = New-MenuItem -Menu `$$($Name)$($Control) -Text `"Text`" -Tag `"Tag`" -PassThru")
      [Void]$Code.AppendLine("#`$NewMenuItem.add_Click({Start-$($Name)ToolStripButtonClick -Sender `$This -EventArg `$PSItem})")
      #[Void]$Code.AppendLine("")
      #[Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) $($Control) MenuItems ================")
      [Void]$Code.AppendLine("")
      break
    }
    {@("ContextMenuStrip") -contains $PSItem} 
    {
      [Void]$Code.AppendLine("")
      #[Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) $($Control) MenuItems <<<<<<<<<<<<<<<<")
      #[Void]$Code.AppendLine("")
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control $Control -Name $Name -Events ([PSCustomObject]@{"Text" = "Opening" ; "Value" = "add_Opening"})).Trim())
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control "ToolStripButton" -Name $Name -Events ([PSCustomObject]@{"Text" = "Click" ; "Value" = "add_Click"})).Trim())
      [Void]$Code.AppendLine("#(New-MenuItem -Menu `$$($Name)$($Control) -Text `"Text`" -Tag `"Tag`" -PassThru).add_Click({Start-$($Name)ToolStripButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("#`$NewMenuItem = New-MenuItem -Menu `$$($Name)$($Control) -Text `"Text`" -Tag `"Tag`" -PassThru")
      [Void]$Code.AppendLine("#`$NewMenuItem.add_Click({Start-$($Name)ToolStripButtonClick -Sender `$This -EventArg `$PSItem})")
      #[Void]$Code.AppendLine("")
      #[Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) $($Control) MenuItems ================")
      [Void]$Code.AppendLine("")
      break
    }
    "ToolStripPanel"
    {
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) ToolStrips <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) ToolStrips ================")
      [Void]$Code.AppendLine("")
      break
    }
    {@("GroupBox", "Panel") -contains $PSItem}
    {
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#`$$($Name)$($Control).ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$$($Name)$($Control).Controls[`$$($Name)$($Control).Controls.Count - 1]).Right + $($CGenConfig.ToolName)Config.FormSpacer), (`$(`$$($Name)$($Control).Controls[`$$($Name)$($Control).Controls.Count - 1]).Bottom + $($CGenConfig.ToolName)Config.FormSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Controls ================")
      [Void]$Code.AppendLine("")
      break
    }
    "SplitContainer"
    {
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("# ************************")
      [Void]$Code.AppendLine("# Panel1 = ?")
      [Void]$Code.AppendLine("# ************************")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Panel1 Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Panel1 Controls ================")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("# ************************")
      [Void]$Code.AppendLine("# Panel2 = ?")
      [Void]$Code.AppendLine("# ************************")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Panel2 Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Panel2 Controls ================")
      [Void]$Code.AppendLine("")
      break
    }
    "DataGridView"
    {
#region ******** DataGridView Functions ********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) DataGridView Functions <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVCellStyle")
      [Void]$Code.AppendLine("function New-DGVCellStyle()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes a New DataGridViewCellStyle")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes a New DataGridViewCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER Alignment")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("    .PARAMETER SelectionForeColor")
      [Void]$Code.AppendLine("    .PARAMETER SelectionBackColor")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("    .PARAMETER Format")
      [Void]$Code.AppendLine("    .PARAMETER TriState")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVCellStyle")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewContentAlignment]`$Alignment = [System.Windows.Forms.DataGridViewContentAlignment]::NotSet,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = [System.Drawing.Color]::Empty,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = [System.Drawing.Color]::Empty,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$SelectionBackColor = [System.Drawing.Color]::Empty,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$SelectionForeColor = [System.Drawing.Color]::Empty,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [String]`$Format,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$TriState = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Object]`$Tag")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVCellStyle`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DGVCellStyle = System.Windows.Forms.DataGridViewCellStyle")
      [Void]$Code.AppendLine("    `$DGVCellStyle = New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle")
      [Void]$Code.AppendLine("    `$DGVCellStyle.Alignment = `$Alignment")
      [Void]$Code.AppendLine("    `$DGVCellStyle.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DGVCellStyle.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DGVCellStyle.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DGVCellStyle.Format = `$Format")
      [Void]$Code.AppendLine("    `$DGVCellStyle.SelectionBackColor = `$SelectionBackColor")
      [Void]$Code.AppendLine("    `$DGVCellStyle.SelectionForeColor = `$SelectionForeColor")
      [Void]$Code.AppendLine("    `$DGVCellStyle.Tag = `$Tag")
      [Void]$Code.AppendLine("    `$DGVCellStyle.WrapMode = `$TriState")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DGVCellStyle")
      [Void]$Code.AppendLine("    `$DGVCellStyle = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVCellStyle`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVCellStyle")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVTextBoxColumn")
      [Void]$Code.AppendLine("function New-DGVTextBoxColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewTextBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewTextBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER MaxInputLength")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVTextBoxColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [int]`$MaxInputLength = 32767")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVTextBoxColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewTextBoxColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVTextBoxColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVTextBoxColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVCheckBoxColumn")
      [Void]$Code.AppendLine("function New-DGVCheckBoxColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewCheckBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewCheckBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER FalseValue")
      [Void]$Code.AppendLine("    .PARAMETER FlatStyle")
      [Void]$Code.AppendLine("    .PARAMETER IndeterminateValue")
      [Void]$Code.AppendLine("    .PARAMETER ThreeState")
      [Void]$Code.AppendLine("    .PARAMETER TrueValue")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVCheckBoxColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"CheckBoxColumn`")]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [Object]`$FalseValue,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.FlatStyle]`$FlatStyle = [System.Windows.Forms.FlatStyle]::Standard,")
      [Void]$Code.AppendLine("    [Object]`$IndeterminateValue,")
      [Void]$Code.AppendLine("    [Switch]`$ThreeState = `$False,")
      [Void]$Code.AppendLine("    [Object]`$TrueValue")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVCheckBoxColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewCheckBoxColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVCheckBoxColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVCheckBoxColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVButtonColumn")
      [Void]$Code.AppendLine("function New-DGVButtonColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewButtonColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewButtonColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER FlatStyle")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVButtonColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.FlatStyle]`$FlatStyle = [System.Windows.Forms.FlatStyle]::Standard,")
      [Void]$Code.AppendLine("    [String]`$Text = `"`",")
      [Void]$Code.AppendLine("    [Switch]`$UseColumnTextForButtonValue = `$False")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVButtonColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewButtonColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVButtonColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVButtonColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVLinkColumn")
      [Void]$Code.AppendLine("function New-DGVLinkColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewLinkColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewLinkColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER ActiveLinkColor")
      [Void]$Code.AppendLine("    .PARAMETER LinkBehavior")
      [Void]$Code.AppendLine("    .PARAMETER LinkColor")
      [Void]$Code.AppendLine("    .PARAMETER TrackVisitedState")
      [Void]$Code.AppendLine("    .PARAMETER UseColumnTextForLinkValue")
      [Void]$Code.AppendLine("    .PARAMETER VisitedLinkColor")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVLinkColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ActiveLinkColor = [System.Drawing.Color]::Red,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.LinkBehavior]`$LinkBehavior = [System.Windows.Forms.LinkBehavior]::SystemDefault,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$LinkColor = [System.Drawing.Color]::Blue,")
      [Void]$Code.AppendLine("    [Switch]`$TrackVisitedState = `$True,")
      [Void]$Code.AppendLine("    [Switch]`$UseColumnTextForLinkValue = `$False,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$VisitedLinkColor = [System.Drawing.Color]::Purple")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVLinkColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewLinkColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVLinkColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVLinkColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVComboBoxColumn")
      [Void]$Code.AppendLine("function New-DGVComboBoxColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewComboBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewComboBoxColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER AutoComplete")
      [Void]$Code.AppendLine("    .PARAMETER DisplayMember")
      [Void]$Code.AppendLine("    .PARAMETER DisplayStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayStyleForCurrentCellOnly")
      [Void]$Code.AppendLine("    .PARAMETER DropDownWidth")
      [Void]$Code.AppendLine("    .PARAMETER FlatStyle")
      [Void]$Code.AppendLine("    .PARAMETER MaxDropDownItems")
      [Void]$Code.AppendLine("    .PARAMETER Sorted")
      [Void]$Code.AppendLine("    .PARAMETER ValueMember")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVComboBoxColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [Switch]`$AutoComplete = `$True,")
      [Void]$Code.AppendLine("    [String]`$DisplayMember = `"Text`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewComboBoxDisplayStyle]`$DisplayStyle = [System.Windows.Forms.DataGridViewComboBoxDisplayStyle]::DropDownButton,")
      [Void]$Code.AppendLine("    [Switch]`$DisplayStyleForCurrentCellOnly = `$False,")
      [Void]$Code.AppendLine("    [Int]`$DropDownWidth = 1,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.FlatStyle]`$FlatStyle = [System.Windows.Forms.FlatStyle]::Standard,")
      [Void]$Code.AppendLine("    [Int]`$MaxDropDownItems = 8,")
      [Void]$Code.AppendLine("    [Switch]`$Sorted = `$False,")
      [Void]$Code.AppendLine("    [String]`$ValueMember = `"Value`"")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVComboBoxColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewComboBoxColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVComboBoxColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVComboBoxColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function New-DGVImageColumn")
      [Void]$Code.AppendLine("function New-DGVImageColumn()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewImageColumn to a DataGridView")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Makes and adds a New DataGridViewImageColumn to a DataGridView")
      [Void]$Code.AppendLine("    .PARAMETER AutoSizeMode")
      [Void]$Code.AppendLine("    .PARAMETER DataPropertyName")
      [Void]$Code.AppendLine("    .PARAMETER DefaultCellStyle")
      [Void]$Code.AppendLine("    .PARAMETER DisplayIndex")
      [Void]$Code.AppendLine("    .PARAMETER DividerWidth")
      [Void]$Code.AppendLine("    .PARAMETER FillWeight")
      [Void]$Code.AppendLine("    .PARAMETER Frozen")
      [Void]$Code.AppendLine("    .PARAMETER HeaderText")
      [Void]$Code.AppendLine("    .PARAMETER MinimumWidth")
      [Void]$Code.AppendLine("    .PARAMETER ReadOnly")
      [Void]$Code.AppendLine("    .PARAMETER Resizable")
      [Void]$Code.AppendLine("    .PARAMETER Selected")
      [Void]$Code.AppendLine("    .PARAMETER SortMode")
      [Void]$Code.AppendLine("    .PARAMETER Tag")
      [Void]$Code.AppendLine("    .PARAMETER ToolTipText")
      [Void]$Code.AppendLine("    .PARAMETER Visible")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("    .PARAMETER Description")
      [Void]$Code.AppendLine("    .PARAMETER Icon")
      [Void]$Code.AppendLine("    .PARAMETER Image")
      [Void]$Code.AppendLine("    .PARAMETER ImageLayout")
      [Void]$Code.AppendLine("    .PARAMETER ValuesAreIcons")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      New-DGVImageColumn -DGV `$DGV -Text `"Text`" -Tag `"Tag`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridView]`$DGV = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewAutoSizeColumnMode]`$AutoSizeMode = [System.Windows.Forms.DataGridViewAutoSizeColumnMode]::NotSet,")
      [Void]$Code.AppendLine("    [String]`$DataPropertyName = `"`",")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewCellStyle]`$DefaultCellStyle = (New-Object -TypeName System.Windows.Forms.DataGridViewCellStyle),")
      [Void]$Code.AppendLine("    [int]`$DisplayIndex = -1,")
      [Void]$Code.AppendLine("    [int]`$DividerWidth = 0,")
      [Void]$Code.AppendLine("    [Float]`$FillWeight = 100,")
      [Void]$Code.AppendLine("    [Switch]`$Frozen = `$False,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$HeaderText = `"`",")
      [Void]$Code.AppendLine("    [int]`$MinimumWidth = 5,")
      [Void]$Code.AppendLine("    [Switch]`$ReadOnly = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewTriState]`$Resizable = [System.Windows.Forms.DataGridViewTriState]::NotSet,")
      [Void]$Code.AppendLine("    [Switch]`$Selected = `$False,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewColumnSortMode]`$SortMode = [System.Windows.Forms.DataGridViewColumnSortMode]::Automatic,")
      [Void]$Code.AppendLine("    [Object]`$Tag,")
      [Void]$Code.AppendLine("    [String]`$ToolTipText = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 100,")
      [Void]$Code.AppendLine("    [String]`$Description = `"`",")
      [Void]$Code.AppendLine("    [System.Drawing.Icon]`$Icon, # = [System.Drawing.Icon]([System.Convert]::FromBase64String(`$Icon)),")
      [Void]$Code.AppendLine("    [System.Drawing.Image]`$Image, # = [System.Drawing.Image]([System.Convert]::FromBase64String(`$ImageFile)),")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DataGridViewImageCellLayout]`$ImageLayout = [System.Windows.Forms.DataGridViewImageCellLayout]::Normal,")
      [Void]$Code.AppendLine("    [Switch]`$ValuesAreIcons = `$False")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function New-DGVImageColumn`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DGVColumn = New-Object -TypeName System.Windows.Forms.DataGridViewImageColumn")
      [Void]$Code.AppendLine("    [Void]`$DGV.Columns.Add(`$DGVColumn)")
      [Void]$Code.AppendLine("    ForEach (`$Key in `$PSBoundParameters.Keys)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DGVColumn.`$Key = `$PSBoundParameters[`$Key]")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DGVColumn.Name = `"DGV_`$HeaderText`"")
      [Void]$Code.AppendLine("    `$DGVColumn")
      [Void]$Code.AppendLine("    `$DGVColumn = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function New-DGVImageColumn`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion Function New-DGVImageColumn")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion  ================ `$$($Name)$($Control) DataGridView Functions ================")
      [Void]$Code.AppendLine("")
#endregion
      break
    }
    "TabControl" 
    {
#region ******** TabControl Tab Pages ********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine((New-MyWindowsFormEventsfunction -Control "TabPage" -Name $Name -Events ([PSCustomObject]@{"Text" = "Enter" ; "Value" = "add_Enter"})).Trim())
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Controls Tab Pages <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("`$NewTabPage = New-TabPage -TabControl `$$($Name)$($Control) -Text `"Text`" -Tag `"Tag`" -PassThru")
      [Void]$Code.AppendLine("`$NewTabPage.add_Enter({Start-$($Name)TabPageEnter -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$NewTabPage Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$NewTabPage Controls ================")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Controls Tab Pages ================")
#endregion
      break
    }
    "TabPage" 
    {
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$($Name)$($Control) Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#endregion ================ `$$($Name)$($Control) Controls ================")
      [Void]$Code.AppendLine("")
      break
    }
    "ListView" 
    {
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#ForEach (`$Item in `$Objects)")
      [Void]$Code.AppendLine("#{")
      [Void]$Code.AppendLine("#  (`$$($Name)$($Control).Items.Add((`$ListViewItem = New-Object -TypeName System.Windows.Forms.ListViewItem(`$Item.Text)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$Code.AppendLine("#  #(`$$($Name)$($Control).Items.Add((`$ListViewItem = New-Object -TypeName System.Windows.Forms.ListViewItem(`$Item.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$Item.Value)`", `"`$(`$Item.Value)`", `"`$(`$Item.Value)`"))")
      [Void]$Code.AppendLine("#  `$ListViewItem.Font = $($CGenConfig.ToolName)Form.Font")
      [Void]$Code.AppendLine("#}")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#`$Objects | ForEach-Object -Process { (`$$($Name)$($Control).Items.Add((New-Object -TypeName System.Windows.Forms.ListViewItem(`$PSItem.Text)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$Code.AppendLine("#`$Objects | ForEach-Object -Process { (`$$($Name)$($Control).Items.Add((New-Object -TypeName System.Windows.Forms.ListViewItem(`$PSItem.Text, `$Group)))).SubItems.AddRange(@(`"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`", `"`$(`$PSItem.Value)`")) }")
      [Void]$Code.AppendLine("")
      
#region ******** ListView Thread ScriptBlock Job ********
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Job Thread ScriptBlock <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("`$ThreadScriptJob = {")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$ComputerName")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  `$ErrorActionPreference = `"Stop`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  # Set Default Job Data that is returned to the Main Script, Returned values cannot be `$Null, Emptry strings are OK")
      [Void]$Code.AppendLine("  `$JobData = [PSCustomObject]@{`"Status`" = `"Processing...`";")
      [Void]$Code.AppendLine("                               `"BeginTime`" = (Get-Date);")
      [Void]$Code.AppendLine("                               `"EndTime`" = `"`";")
      [Void]$Code.AppendLine("                               `"ErrorMessage`" = `"`"}")
      [Void]$Code.AppendLine((Generate-VerifyWorkstation))
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    if ((`$VerifyData = Verify-Workstation -ComputerName `$ComputerName).Found)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      # Clear all Previous Error Messages")
      [Void]$Code.AppendLine("      `$Error.Clear()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("          `$VerifyData is a Custom Object the has the following properties that you can use in your script")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          ComputerName    : This is the Name of the Computer that is found, may be different than expected computer name")
      [Void]$Code.AppendLine("          Found           : True / False - This is True if the Workstation that was pinged was the expected Workstation")
      [Void]$Code.AppendLine("          UserName        : Domain\UserName of Logged on User, Will be Blank if user is Logged on via RDP")
      [Void]$Code.AppendLine("          Domain          : Domain \ WorkGroup Workstation is a member of")
      [Void]$Code.AppendLine("          Manufacturer    : Manufacturer of Computer")
      [Void]$Code.AppendLine("          Model           : Model of Computer")
      [Void]$Code.AppendLine("          Memory          : Total Memory in Bytes")
      [Void]$Code.AppendLine("          OperatingSystem : Installed Operating System")
      [Void]$Code.AppendLine("          ServicePack     : Installed Service Pack")
      [Void]$Code.AppendLine("          Architecture    : 32-Bit or 64-Bit")
      [Void]$Code.AppendLine("          LocalDateTime   : Date / Time on the Remote Workstation")
      [Void]$Code.AppendLine("          InstallDate     : Date / Time the Workstation was Imaged")
      [Void]$Code.AppendLine("          LastBootUpTime  : Date / Time the Workstation was Rebooted")
      [Void]$Code.AppendLine("          IPAddress       : IP Address of the Workstation")
      [Void]$Code.AppendLine("          Status          : On-Line, Wrong Name, Unknown, Off-Line, Error")
      [Void]$Code.AppendLine("          ErrorMessage    : Error Message if Any")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        ******** Begin Put Your Code Here ********")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # Set Returned Job Data for when the Remote Workstation is found")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # if your Script Completed Sucessfully set returned `$JabData.Status to `"Done`" so row will not be processed a second time")
      [Void]$Code.AppendLine("      `$JobData.Status = `"Done`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        ******** End Put Your Code Here ********")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      # Set Returned Job Data for when the Remote Workstation is not found")
      [Void]$Code.AppendLine("      `$JobData.Status = `$VerifyData.Status")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # Set returned Error Information `$JabData.ErrorMessage to the Last Error Message")
      [Void]$Code.AppendLine("      `$JobData.ErrorMessage = `$VerifyData.ErrorMessage")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    # Set Returned Job Status to indicate an error")
      [Void]$Code.AppendLine("    `$JobData.Status = `"Error - Catch`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    # Set returned Error Information `$JabData.ErrorMessage to the last Error Message")
      [Void]$Code.AppendLine("    `$JobData.ErrorMessage = `"`$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  # Set Date / Time Job Finished")
      [Void]$Code.AppendLine("  `$JobData.EndTime = (Get-Date)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  #Return Job Data to the Main Script")
      [Void]$Code.AppendLine("  `$JobData")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  `$JobData = `$Null")
      [Void]$Code.AppendLine("  `$VerifyData = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  [System.GC]::Collect()")
      [Void]$Code.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion ================ Job Thread ScriptBlock ================")
      [Void]$Code.AppendLine("")
#endregion

#region function Process-ListViewItems - Job
      [Void]$Code.AppendLine("#region function Process-ListViewItemsJobs - Job")
      [Void]$Code.AppendLine("function Process-ListViewItemsJobs()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Process ListView Items in Multiple Threads")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Process ListView Items in Multiple Threads")
      [Void]$Code.AppendLine("    .PARAMETER Sender")
      [Void]$Code.AppendLine("       The ListView Control")
      [Void]$Code.AppendLine("    .PARAMETER Thread")
      [Void]$Code.AppendLine("       The Script Block to Execute")
      [Void]$Code.AppendLine("    .PARAMETER MaxThreads")
      [Void]$Code.AppendLine("      Maximum Threads to Process")
      [Void]$Code.AppendLine("    .PARAMETER Checked")
      [Void]$Code.AppendLine("      Process Checked ListView Items")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("       Process-ListViewItems [-Sender ```$$($Name)$($Control)] -Thread `$Thread [-MaxThreads 4] [-Checked]")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [ScriptBlock]`$Thread = `$ThreadscriptJob,")
      [Void]$Code.AppendLine("    [Int]`$MaxThreads = 4,")
      [Void]$Code.AppendLine("    [Switch]`$Checked")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Process-ListViewItemsJobs`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    if (`$ListView.Items.Count)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$False")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$Script:ThreadCommand = `$False ")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if (`$Checked)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$ItemList = @(`$ListView.CheckedItems)")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$ItemList = @(`$ListView.Items | Where-Object -FilterScript { `$PSItem.SubItems[1].Text -ne `"Done`" })")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$ThreadHash = @{}")
      [Void]$Code.AppendLine("      `$ItemCount = `$ItemList.Count - 1")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      For (`$Count = 0; `$Count -le `$ItemCount; `$Count++)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$Script:ThreadCommand)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Verbose -Message `"Break For Loop`"")
      [Void]$Code.AppendLine("          break")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        Write-Verbose -Message `"Begin Job Thread - `$Count`"")
      [Void]$Code.AppendLine("        `$ThreadHash.Add(`"`$Count`", (Start-Job -ScriptBlock `$Thread -ArgumentList (`$ItemList[`$Count].Name) -Name `"`$Count`"))")
      [Void]$Code.AppendLine("        `$ItemList[`$Count].SubItems[1].Text = `"Processing...`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        While ((`$ThreadHash.Count -eq `$MaxThreads) -or (`$ThreadHash.Count -and (`$Count -eq `$ItemCount)))")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          if (`$Script:ThreadCommand)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            Write-Verbose -Message `"Break Outter While Loop`"")
      [Void]$Code.AppendLine("            break")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          While (@(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Running`" }).Count -eq `$ThreadHash.Count)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("            Start-Sleep -Milliseconds 100")
      [Void]$Code.AppendLine("            if (`$Script:ThreadCommand)")
      [Void]$Code.AppendLine("            {")
      [Void]$Code.AppendLine("              Write-Verbose -Message `"Break Inner While Loop`"")
      [Void]$Code.AppendLine("              break")
      [Void]$Code.AppendLine("            }")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          if ((`$FailedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { @(`"Running`", `"Completed`") -NotContains `$PSItem.State })).Count)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            ForEach (`$FailedJob in `$FailedJobs)")
      [Void]$Code.AppendLine("            {")
      [Void]$Code.AppendLine("              `$ThreadNum = `$([int]`$(`$FailedJob.Name))")
      [Void]$Code.AppendLine("              Write-Verbose -Message `"Failed Job Thread - `$ThreadNum`"")
      [Void]$Code.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `"Failed`"")
      [Void]$Code.AppendLine("              `$ThreadHash.Remove(`$FailedJob.Name)")
      [Void]$Code.AppendLine("              [Void](Remove-Job -Id `$FailedJob.ID -Force)")
      [Void]$Code.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("            }")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          if ((`$FinishedJobs = @(`$ThreadHash.Values | Where-Object -FilterScript { `$PSItem.State -eq `"Completed`"})).Count)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            ForEach (`$FinishedJob in `$FinishedJobs)")
      [Void]$Code.AppendLine("            {")
      [Void]$Code.AppendLine("              `$ThreadNum = `$([int]`$(`$FinishedJob.Name))")
      [Void]$Code.AppendLine("              Write-Verbose -Message `"Completed Job Thread - `$ThreadNum`"")
      [Void]$Code.AppendLine("              `$JobData = Receive-Job -Id `$FinishedJob.ID -Wait -AutoRemoveJob ")
      [Void]$Code.AppendLine("              `$ItemList[`$ThreadNum].SubItems[1].Text = `$JobData.Status")
      [Void]$Code.AppendLine("              if (`$Checked)")
      [Void]$Code.AppendLine("              {")
      [Void]$Code.AppendLine("                `$ItemList[`$ThreadNum].Checked = `$False")
      [Void]$Code.AppendLine("              }")
      [Void]$Code.AppendLine("              `$ThreadHash.Remove(`$FinishedJob.Name)")
      [Void]$Code.AppendLine("              [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("            }")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Begin Removing Remaining Jobs`"")
      [Void]$Code.AppendLine("      [Void](Get-Job | Remove-Job -Force)")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"End Removing Remaining Jobs`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$ThreadHash = `$Null")
      [Void]$Code.AppendLine("      `$ItemCount = `$Null")
      [Void]$Code.AppendLine("      `$Count = `$Null")
      [Void]$Code.AppendLine("      `$ItemList = `$Null")
      [Void]$Code.AppendLine("      `$ThreadNum = `$Null")
      [Void]$Code.AppendLine("      `$FinishedJobs = `$Null")
      [Void]$Code.AppendLine("      `$FinishedJob = `$Null")
      [Void]$Code.AppendLine("      `$FailedJobs = `$Null")
      [Void]$Code.AppendLine("      `$FailedJob = `$Null")
      [Void]$Code.AppendLine("      `$Script:ThreadCommand = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      [System.GC]::Collect()")
      [Void]$Code.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$True")
      [Void]$Code.AppendLine("      `$ListView.Sort()")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Process-ListViewItemsJobs`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion function Process-ListViewItemsJobs - Job")
      [Void]$Code.AppendLine("")
#endregion

#region ******** ListView Thread ScriptBlock Pool ********        
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> Pool Thread ScriptBlock <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("`$ThreadScriptPool = {")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object]`$Item,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object]`$ThreadCommand")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  `$ErrorActionPreference = `"Stop`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  if (`$ThreadCommand.Kill)")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$Item.SubItems[1].Text = `"Terminated`"")
      [Void]$Code.AppendLine("    Return")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  `$Item.SubItems[2].Text = (Get-Date)")
      [Void]$Code.AppendLine((Generate-VerifyWorkstation))
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    if ((`$VerifyData = Verify-Workstation -ComputerName `$ComputerName).Found)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      if (`$ThreadCommand.Kill)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$Item.SubItems[1].Text = `"Terminated`"")
      [Void]$Code.AppendLine("        Return")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # Clear all Previous Error Messages")
      [Void]$Code.AppendLine("      `$Error.Clear()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("          `$VerifyData is a Custom Object the has the following properties that you can use in your script")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          ComputerName    : This is the Name of the Computer that is found, may be different than expected computer name")
      [Void]$Code.AppendLine("          Found           : True / False - This is True if the Workstation that was pinged was the expected Workstation")
      [Void]$Code.AppendLine("          UserName        : Domain\UserName of Logged on User, Will be Blank if user is Logged on via RDP")
      [Void]$Code.AppendLine("          Domain          : Domain \ WorkGroup Workstation is a member of")
      [Void]$Code.AppendLine("          Manufacturer    : Manufacturer of Computer")
      [Void]$Code.AppendLine("          Model           : Model of Computer")
      [Void]$Code.AppendLine("          Memory          : Total Memory in Bytes")
      [Void]$Code.AppendLine("          OperatingSystem : Installed Operating System")
      [Void]$Code.AppendLine("          ServicePack     : Installed Service Pack")
      [Void]$Code.AppendLine("          Architecture    : 32-Bit or 64-Bit")
      [Void]$Code.AppendLine("          LocalDateTime   : Date / Time on the Remote Workstation")
      [Void]$Code.AppendLine("          InstallDate     : Date / Time the Workstation was Imaged")
      [Void]$Code.AppendLine("          LastBootUpTime  : Date / Time the Workstation was Rebooted")
      [Void]$Code.AppendLine("          IPAddress       : IP Address of the Workstation")
      [Void]$Code.AppendLine("          Status          : On-Line, Wrong Name, Unknown, Off-Line, Error")
      [Void]$Code.AppendLine("          ErrorMessage    : Error Message if Any")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        ******** Begin Put Your Code Here ********")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # Set Returned Job Data for when the Remote Workstation is found")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # if your Script Completed Sucessfully set returned `$JabData.Status to `"Done`" so row will not be processed a second time")
      [Void]$Code.AppendLine("      `$Item.Checked = `$False")
      [Void]$Code.AppendLine("      `$Item.SubItems[1].Text = `"Done`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        ******** End Put Your Code Here ********")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      # Set Returned Job Data for when the Remote Workstation is not found")
      [Void]$Code.AppendLine("      `$Item.SubItems[1].Text = `$VerifyData.Status")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      # Set returned Error Information `$JabData.ErrorMessage to the Last Error Message")
      [Void]$Code.AppendLine("      `$Item.SubItems[4].Text = `$VerifyData.ErrorMessage")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    # Set Returned Job Status to indicate an error")
      [Void]$Code.AppendLine("    `$Item.SubItems[1].Text = `"Error - Catch`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    # Set returned Error Information `$JabData.ErrorMessage to the last Error Message")
      [Void]$Code.AppendLine("    `$Item.SubItems[4].Text = `"`$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  # Set Date / Time Job Finished")
      [Void]$Code.AppendLine("  `$Item.SubItems[3].Text = (Get-Date)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  `$VerifyData = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("  [System.GC]::Collect()")
      [Void]$Code.AppendLine("  [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion ================ Pool Thread ScriptBlock ================")
      [Void]$Code.AppendLine("")
#endregion

#region function Process-ListViewItems - Pool
      [Void]$Code.AppendLine("#region function Process-ListViewItems - Pool")
      [Void]$Code.AppendLine("function Process-ListViewItemsPool()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Process ListView Items in Multiple Threads")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Process ListView Items in Multiple Threads")
      [Void]$Code.AppendLine("    .PARAMETER Sender")
      [Void]$Code.AppendLine("       The ListView Control")
      [Void]$Code.AppendLine("    .PARAMETER Thread")
      [Void]$Code.AppendLine("       The Script Block to Execute")
      [Void]$Code.AppendLine("    .PARAMETER MaxThreads")
      [Void]$Code.AppendLine("      Maximum Threads to Process")
      [Void]$Code.AppendLine("    .PARAMETER Checked")
      [Void]$Code.AppendLine("      Process Checked ListView Items")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("       Process-ListViewItems [-Sender ```$$($Name)$($Control)] -Thread `$Thread [-MaxThreads 4] [-Checked]")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [System.Windows.Forms.ListView]`$ListView = `$$($Name)$($Control),")
      [Void]$Code.AppendLine("    [ScriptBlock]`$Thread = `$ThreadScriptPool,")
      [Void]$Code.AppendLine("    [Int]`$MaxThreads = 4,")
      [Void]$Code.AppendLine("    [Switch]`$Checked")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Process-ListViewItemsPool`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    if (`$ListView.Items.Count)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$False")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if (`$Checked)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$ItemList = @(`$ListView.CheckedItems)")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$ItemList = @(`$ListView.Items | Where-Object -FilterScript { `$PSItem.SubItems[1].Text -ne `"Done`" })")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if (`$ItemList.Count)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$Script:ThreadCommand = @{`"Kill`"=`$False}")
      [Void]$Code.AppendLine("        if ((Create-MyRunspace -MaxPools `$MaxThreads -PassThru).Success)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$ListThreads = @()")
      [Void]$Code.AppendLine("          `$TempThreadScript = [System.Management.Automation.ScriptBlock]::Create(`$Thread)")
      [Void]$Code.AppendLine("          ForEach (`$Item in `$ItemList)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$ListThreads += Start-MyThread -ScriptBlock `$TempThreadScript -Parameters @{ `"Item`" = `$Item; `"ThreadCommand`"=`$Script:ThreadCommand }")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          `$ReturnedData = Wait-MyThread -Threads `$ListThreads")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$ItemList = `$Null")
      [Void]$Code.AppendLine("      `$Item = `$Null")
      [Void]$Code.AppendLine("      `$ListThreads = `$Null")
      [Void]$Code.AppendLine("      `$TempThreadScript = `$Null")
      [Void]$Code.AppendLine("      `$ReturnedData = `$Null")
      [Void]$Code.AppendLine("      `$Script:ThreadCommand = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      [System.GC]::Collect()")
      [Void]$Code.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$ListView.ListViewItemSorter.SortEnable = `$True")
      [Void]$Code.AppendLine("      `$ListView.Sort()")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Process-ListViewItemsPool`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion function Process-ListViewItems - Pool")
      [Void]$Code.AppendLine("")
#endregion

      break
    }
    "tooltip" 
    {
      [Void]$Code.AppendLine("#`$$($Name)$($Control).SetToolTip(`$FormControl, `"Form Control Help`")")
      break
    }
    "Label" 
    {
      #[Void]$Code.AppendLine("`$TempHeight = `$$($Name)$($Control)`.Height")
      #[Void]$Code.AppendLine("`$$($Name)$($Control)`.AutoSize = `$False")
      [Void]$Code.AppendLine("#`$$($Name)$($Control)`.Size = New-Object -TypeName System.Drawing.Size(($($CGenConfig.ToolName)Config.FontData.Width * 1.5 * (`$$($Name)$($Control).Text.Length + 4)), `$$($Name)$($Control)`.PreferredHeight)")
      [Void]$Code.AppendLine("`$$($Name)$($Control)`.Size = `$$($Name)$($Control)`.PreferredSize")
      break
    }
    {@("Button", "CheckBox", "CheckedListBox", "ComboBox", "DataGrid", "DateTimePicker", "DomainUpDown", "ListBox", "ListView", "NumericUpDown", "PictureBox", "ProgressBar", "RadioButton", "RichTextBox", "TabControl", "TabPage", "TextBox", "TreeView") -contains $PSItem} 
    {
      [Void]$Code.AppendLine("$($CGenConfig.ToolName)ToolTip.SetToolTip(`$$($Name)$($Control), `"Help for Control `$(`$$($Name)$($Control)`.Name)`")")
      break
    }
    Default 
    {
      break
    }
  }
  [Void]$Code.AppendLine("")
  $Code.ToString()
  $Code = $Null
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  Write-Verbose -Message "Exit Function New-MyWindowsFormControl"
} 
#endregion

#region function Get-MyWindowsFormControlEvent
function Get-MyWindowsFormControlEvent()
{     
  <#
    .SYNOPSIS
      Gets Form Control Events
    .DESCRIPTION
      Gets Form Control Events
    .PARAMETER Control
    .EXAMPLE
      Get-MyWindowsFormControlEvent -Control <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, HelpMessage = "Enter Control")]
    [String]$Control
  )
  Write-Verbose -Message "Enter Function Get-MyWindowsFormControlEvent"
  Try 
  {
    $MyObject = New-Object -TypeName "System.Windows.Forms.$Control"
    $MyObject.PSObject.Methods | Where-Object -FilterScript {$PSItem.Name.StartsWith("add")} | Sort-Object -Property Name
    
    $MyObject = $Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch 
  {
  }
  Write-Verbose -Message "Exit Function Get-MyWindowsFormControlEvent"
 } 
#endregion

#region function New-MyWindowsFormEventsfunction
function New-MyWindowsFormEventsfunction()
{     
  <#
    .SYNOPSIS
      Generates Event Functiosn for Form Controls
    .DESCRIPTION
      Generates Event Functiosn for Form Controls
    .PARAMETER Control
    .PARAMETER Name
    .PARAMETER Events
    .EXAMPLE
      New-MyWindowsFormEventsfunction -Control <String>] -Name <String> -Events <Object[]>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory=$True)]
    [String]$Control,
    [parameter(Mandatory=$True)]
    [String]$Name,
    [parameter(Mandatory=$True)]
    [Object[]]$Events
  )
  Begin 
  {
    Write-Verbose -Message "Enter Function New-MyWindowsFormEventsfunction"
    $Code = New-Object -TypeName System.Text.StringBuilder
  }
  Process 
  {
    ForEach ($Event in $Events) 
    {
      [Void]$Code.AppendLine("#region function Start-$($Name)$($Control)$($Event.Text)")
      [Void]$Code.AppendLine("function Start-$($Name)$($Control)$($Event.Text)()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      $($Event.Text) event for the $($Name)$($Control) Control")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      $($Event.Text) event for the $($Name)$($Control) Control")
      [Void]$Code.AppendLine("    .PARAMETER Sender")
      [Void]$Code.AppendLine("       The Form Control that fired the Event")
      [Void]$Code.AppendLine("    .PARAMETER EventArg")
      [Void]$Code.AppendLine("       The Event Arguments for the Event")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("       Start-$($Name)$($Control)$($Event.Text) -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object]`$Sender,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object]`$EventArg")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter $($Event.Text) Event for ```$$($Name)$($Control)`"")
      [Void]$Code.AppendLine("  #$($CGenConfig.ToolName)Form.Cursor = [System.Windows.Forms.Cursors]::WaitCursor")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      if ($Event.Text -eq "Tick")
      {
        [Void]$Code.AppendLine("    if ($($CGenConfig.ToolName)Config.AutoExit -ge $($CGenConfig.ToolName)Config.AutoExitMax)")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Form.Close()")
        [Void]$Code.AppendLine("    }")
        [Void]$Code.AppendLine("    else")
        [Void]$Code.AppendLine("    {")
        [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Config.AutoExit += 1")
        [Void]$Code.AppendLine("      Write-Verbose -Message `"Auto Exit in `$($($CGenConfig.ToolName)Config.AutoExitMax - $($CGenConfig.ToolName)Config.AutoExit) Minutes`"")
        [Void]$Code.AppendLine("    }")
      }
      else
      {
        [Void]$Code.AppendLine("    $($CGenConfig.ToolName)Config.AutoExit = 0")
      }
      Switch ($Event.Text) 
      {
        "KeyDown"
        {
          if ($Control -eq "Form")
          {
            [Void]$Code.AppendLine("    if (`$EventArg.Control -and `$EventArg.Alt -and `$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F10)")
            [Void]$Code.AppendLine("    {")
            [Void]$Code.AppendLine("      if ($($CGenConfig.ToolName)Form.Tag)")
            [Void]$Code.AppendLine("      {")
            [Void]$Code.AppendLine("        # Hide Console Window")
            [Void]$Code.AppendLine("        `$Script:VerbosePreference = `"SilentlyContinue`"")
            [Void]$Code.AppendLine("        `$Script:DebugPreference = `"SilentlyContinue`"")
            [Void]$Code.AppendLine("        [Void][Window.Display]::Hide()")
            [Void]$Code.AppendLine("        $($CGenConfig.ToolName)Form.Tag = `$False")
            [Void]$Code.AppendLine("      }")
            [Void]$Code.AppendLine("      else")
            [Void]$Code.AppendLine("      {")
            [Void]$Code.AppendLine("        # Show Console Window")
            [Void]$Code.AppendLine("        `$Script:VerbosePreference = `"Continue`"")
            [Void]$Code.AppendLine("        `$Script:DebugPreference = `"Continue`"")
            [Void]$Code.AppendLine("        [Void][Window.Display]::Show()")
            [Void]$Code.AppendLine("        [System.Console]::Title = `"DEBUG: `$($($CGenConfig.ToolName)Config.ScriptName)`"")
            [Void]$Code.AppendLine("        $($CGenConfig.ToolName)Form.Tag = `$True")
            [Void]$Code.AppendLine("      }")
            [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Form.Activate()")
            [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Form.Select()")
            [Void]$Code.AppendLine("    }")
            [Void]$Code.AppendLine("    elseif (`$EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F1)")
            [Void]$Code.AppendLine("    {")
            [Void]$Code.AppendLine("      `$$($Name)ToolTip.Active = (-not `$$($Name)ToolTip.Active)")
            [Void]$Code.AppendLine("    }")
          }
          break
        }
        "Closing"
        {
          if ($Control -eq "Form")
          {
            [Void]$Code.AppendLine("    # Show Console Window")
            [Void]$Code.AppendLine("    `$Script:VerbosePreference = `"Continue`"")
            [Void]$Code.AppendLine("    `$Script:DebugPreference = `"Continue`"")
            [Void]$Code.AppendLine("    [Void][Window.Display]::Show()")
            [Void]$Code.AppendLine("    $($CGenConfig.ToolName)Form.Tag = `$True")
          }
          break
        }
        "Load"
        {
          if ($Control -eq "Form")
          {
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("    `$Screen = ([System.Windows.Forms.Screen]::FromControl(`$Sender)).WorkingArea")
            [Void]$Code.AppendLine("    `$Sender.Left = [Math]::Floor((`$Screen.Width - `$Sender.Width) / 2)")
            [Void]$Code.AppendLine("    `$Sender.Top = [Math]::Floor((`$Screen.Height - `$Sender.Height) / 2)")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("    if ($($CGenConfig.ToolName)Config.Production)")
            [Void]$Code.AppendLine("    {")
            [Void]$Code.AppendLine("      # Enable $($CGenConfig.ToolName)Timer")
            [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Timer.Enabled = ($($CGenConfig.ToolName)Config.AutoExitMax -gt 0)")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("      # Disable Control Close Menu / [X]")
            [Void]$Code.AppendLine("      #[ControlBox.Menu]::DisableFormClose($($CGenConfig.ToolName)Form.Handle)")
            [Void]$Code.AppendLine("")
            [Void]$Code.AppendLine("      # Hide Console Window")
            [Void]$Code.AppendLine("      `$Script:VerbosePreference = `"SilentlyContinue`"")
            [Void]$Code.AppendLine("      `$Script:DebugPreference = `"SilentlyContinue`"")
            [Void]$Code.AppendLine("      [Void][Window.Display]::Hide()")
            [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Form.Tag = `$False")
            [Void]$Code.AppendLine("    }")
            [Void]$Code.AppendLine("    else")
            [Void]$Code.AppendLine("    {")
            [Void]$Code.AppendLine("      $($CGenConfig.ToolName)Form.Tag = `$True")
            [Void]$Code.AppendLine("    }")
          }
          break
        }
        "Shown"
        {
          [Void]$Code.AppendLine("    `$Sender.Refresh()")
          break
        }
        "DrawItem" 
        {
          [Void]$Code.AppendLine("    `$EventArg.DrawBackground()")
          [Void]$Code.AppendLine("    `$EventArg.Graphics.DrawString(`$Sender.Items[`$EventArg.Index].Text, `$EventArg.Font, `$(New-Object -TypeName System.Drawing.SolidBrush(`$Sender.ForeColor)), `$EventArg.Bounds.X, `$EventArg.Bounds.Y, [System.Drawing.StringFormat]::GenericTypographic)")
          break
        }
        "ColumnClick" 
        {
          [Void]$Code.AppendLine("    if (`$Sender.ListViewItemSorter.Ascending -and `$Sender.ListViewItemSorter.Column -eq `$EventArg.Column)")
          [Void]$Code.AppendLine("    {")
          [Void]$Code.AppendLine("      `$Sender.ListViewItemSorter.Ascending = `$False")
          [Void]$Code.AppendLine("    }")
          [Void]$Code.AppendLine("    else")
          [Void]$Code.AppendLine("    {")
          [Void]$Code.AppendLine("      `$Sender.ListViewItemSorter.Column = `$EventArg.Column")
          [Void]$Code.AppendLine("      `$Sender.ListViewItemSorter.Ascending = `$True")
          [Void]$Code.AppendLine("    }")
          [Void]$Code.AppendLine("    `$Sender.Sort()")
          break
        }
      }
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$($("`$Error[0].Exception.Message"))`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  #$($CGenConfig.ToolName)Form.Cursor = [System.Windows.Forms.Cursors]::Arrow")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit $($Event.Text) Event for ```$$($Name)$($Control)`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion function Start-$($Name)$($Control)$($Event.Text)")
      [Void]$Code.AppendLine("`$$($Name)$($Control).$($Event.Value)({Start-$($Name)$($Control)$($Event.Text) -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
    }
  }
  End 
  {
    $Code.ToString()
    $Code = $Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    Write-Verbose -Message "Exit Function New-MyWindowsFormEventsfunction"
  }
 } 
#endregion

#region function Convert-MyFormImageToBase64
function Convert-MyFormImageToBase64() 
{
  <#
    .SYNOPSIS
      Converts and image to base64 Text
    .DESCRIPTION
      Converts and image to base64 Text
    .PARAMETER Path
    .PARAMETER Name
    .EXAMPLE
      Convert-MyFormImageToBase64 -Path <String> -Name <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, HelpMessage="Enter Path")]
    [String]$Path,
    [parameter(Mandatory = $True, HelpMessage="Enter Name")]
    [String]$Name,
    [int]$LineSize = 160
  )
  Begin 
  {
    Write-Verbose -Message "Enter Function Convert-MyFormImageToBase64"
    $Code = New-Object -TypeName System.Text.StringBuilder
  }
  Process 
  {
    Try 
    {
      $ImageName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "")
      [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$ImageName <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("`$$ImageName = @`"")
#      
      $MemoryStream = New-Object -TypeName System.IO.MemoryStream
      if ([System.IO.Path]::GetExtension($path) -eq ".ico")
      {
        $Image = [System.Drawing.Icon]::New($Path)
        $Image.Save($MemoryStream)
      }
      else
      {
        $Image = [System.Drawing.Image]::FromFile($Path)
        if ($CGenEncodeCheckBox.Checked)
        {
          $Image.Save($MemoryStream, [guid]::Parse("{b96b3cae-0728-11d3-9d7b-0000f81ef32e}"))
        }
        else
        {
          $Image.Save($MemoryStream, $Image.RawFormat)
        }
      }
      ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
      {
        [Void]$Code.AppendLine($Line)
      }
      $MemoryStream.Close()
#      ForEach ($Line in @([Convert]::ToBase64String($([System.IO.File]::ReadAllBytes($Path))) -split "(?<=\G.{$LineSize})(?=.)"))
#      {
#        [Void]$Code.AppendLine($Line)
#      }
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("#endregion")
      if ([System.IO.Path]::GetExtension($path) -eq ".ico")
      {
        [Void]$Code.AppendLine("#`$Form.Icon = [System.Drawing.Icon]([System.Convert]::FromBase64String(`$$ImageName))")
      }
      else
      {
        [Void]$Code.AppendLine("#`$PictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$$ImageName))")
      }
    }
    Catch
    {
      #$Host.EnterNestedPrompt()
    }
  }
  End 
  {
    $Code.ToString()
    $Image = $Null
    $MemoryStream = $Null
    $Code = $Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
    Write-Verbose -Message "Exit Function Convert-MyFormImageToBase64"
  }
}
#endregion

#region function Compress-MyDataFile
function Compress-MyDataFile()
{
  <#
    .SYNOPSIS
      Compress String Data
    .DESCRIPTION
      Compress String Data
    .PARAMETER Text
      Text to Compress
    .EXAMPLE
      Compress-MyDataFile -Value "String"
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True, HelpMessage = "Enter Path")]
    [String]$Path,
    [parameter(Mandatory = $True, HelpMessage = "Enter Name")]
    [String]$Name,
    [int]$LineSize = 160
  )
  Write-Verbose -Message "Enter Function Compress-MyDataFile"
  Try
  {
    $CompressName = $Name.Replace(".", "").Replace("-", "").Replace(" ", "")
    $MemoryStream = New-Object -TypeName System.IO.MemoryStream
    $GZipStream = New-Object -TypeName System.IO.Compression.GZipStream($MemoryStream, [System.IO.Compression.CompressionMode]::Compress)
    $StreamWriter = New-Object -TypeName System.IO.StreamWriter($GZipStream, [System.Text.Encoding]::UTF8)
    $StreamWriter.Write(([Char[]][System.IO.File]::ReadAllBytes($Path)))
    $StreamWriter.Close()
    $Code = New-Object -TypeName System.Text.StringBuilder
    [Void]$Code.AppendLine("#region >>>>>>>>>>>>>>>> `$$CompressName Compressed Text <<<<<<<<<<<<<<<<")
    [Void]$Code.AppendLine("`$$CompressName = @`"")
    ForEach ($Line in @([System.Convert]::ToBase64String($MemoryStream.ToArray()) -split "(?<=\G.{$LineSize})(?=.)"))
    {
      [Void]$Code.AppendLine($Line)
    }
    $GZipStream.Close()
    $MemoryStream.Close()
    [Void]$Code.AppendLine("`"@")
    [Void]$Code.AppendLine("#endregion")
    [Void]$Code.AppendLine("#`$DecompressedData = Decompress-MyData -Data `$$CompressName -AsString")
    [Void]$Code.AppendLine("#[System.IO.File]::WriteAllText(`$FilePath, `$DecompressedData)")
    [Void]$Code.AppendLine("#`$DecompressedData = Decompress-MyData -Data `$$CompressName")
    [Void]$Code.AppendLine("#[System.IO.File]::WriteAllBytes(`$FilePath, `$DecompressedData)")
    $Code.ToString()
    $CompressName = $Null
    $MemoryStream = $Null
    $GZipStream = $Null
    $StreamWriter = $Null
    $Code = $Null
    $Line = $Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code:$($Error[0].InvocationInfo.Line)"
  }
  Write-Verbose -Message "Exit Function Compress-MyDataFile"
}
#endregion

#region function New-MyDialog
function New-MyDialog()
{     
  <#
    .SYNOPSIS
    .DESCRIPTION
    .PARAMETER Dialog
    .EXAMPLE
      New-MyDialog -DialogName <String>
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [String]$Dialogname
  )
  Write-Verbose -Message "Enter Function New-MyDialog"
  $Code = New-Object -TypeName System.Text.StringBuilder
  Switch ($DialogName)
  {
    "Select-MyItemList"
    {
      #region ******** function DialogSelect-MyItemList *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogSelect-MyItemList")
      [Void]$Code.AppendLine("function DialogSelect-MyItemList()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Prompts User to Select Items from a List")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Prompts User to Select Items from a List")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.AppendLine("    .PARAMETER ReturnName")
      [Void]$Code.AppendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.AppendLine("    .PARAMETER MultiSelect")
      [Void]$Code.AppendLine("      Allow User to Select and Return More than One Item")
      [Void]$Code.AppendLine("    .PARAMETER DisplayMember")
      [Void]$Code.AppendLine("      ListBox Display Property Name")
      [Void]$Code.AppendLine("    .PARAMETER ValueMember")
      [Void]$Code.AppendLine("      ListBox Value Property Name")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER Height")
      [Void]$Code.AppendLine("      Dialog Height")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      TextBox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      TextBox Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogSelect-MyItemList -DialogName `"Select Process`" -FontFamily `"Verdana`" -FontSize 16 -ReturnName `"Processes`" -Items @(Get-Process) -DisplayMember `"ProcessName`" -ValueMember `"ID`" -MultiSelect).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogSelect-MyItemList -DialogName `"Select Service`" -Width 22 -ReturnName `"Services`" -Items @(Get-Service) -DisplayMember `"DisplayName`" -ValueMember `"Name`" -MultiSelect).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogSelect-MyItemList -DialogName `"Add Computer Names`" -ReturnName `"Computer Names`" -BackColor `"Black`" -ForeColor `"Red`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Select Item List`",")
      [Void]$Code.AppendLine("    [String]`$ReturnName = `"Item List`",")
      [Void]$Code.AppendLine("    [Switch]`$MultiSelect,")
      [Void]$Code.AppendLine("    [String]`$DisplayMember = `"Text`",")
      [Void]$Code.AppendLine("    [String]`$ValueMember = `"Value`",")
      [Void]$Code.AppendLine("    [Object[]]`$Items = @(([PSCustomObject]@{`"Text`" = `"Text 01`"; `"Value`" = `"Value 01`"}), ([PSCustomObject]@{`"Text`" = `"Text 02`"; `"Value`" = `"Value 02`"})),")
      [Void]$Code.AppendLine("    [int]`$Width = 16,")
      [Void]$Code.AppendLine("    [int]`$Height = 12,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogSelect-MyItemList`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Name = `"DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Tag = @()")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Start-DialogMyItemListCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.add_KeyDown({Start-DialogMyItemListFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>> `$DialogMyItemListForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemListReturnGroupBox.Text, `$DialogMyItemListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListReturnGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Name = `"DialogMyItemListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Width = 200")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemListReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListReturnListBox = System.Windows.Forms.ListBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox = New-Object -TypeName System.Windows.Forms.ListBox")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Controls.Add(`$DialogMyItemListReturnListBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.AutoSize = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.DisplayMember = `$DisplayMember")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyItemListReturnListBox.CreateGraphics().MeasureString(`"X`", `$DialogMyItemListReturnListBox.Font)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.ItemHeight = `$TempSize.Height")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.IntegralHeight = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.BeginUpdate()")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Items.AddRange(`$Items)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.EndUpdate()")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemListReturnGroupBox.Text, `$DialogMyItemListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Name = `"DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("    if (`$MultiSelect)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyItemListReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyItemListReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Size = New-Object -TypeName System.Drawing.Size((`$TempSize.Width * `$Width), (`$TempSize.Height * `$Height))")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Sorted = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Text = `"DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.ValueMember = `$ValueMember")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListReturnListBoxKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListReturnListBoxKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListReturnListBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListReturnListBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 13)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$EventArg.SuppressKeyPress = `$True")
      [Void]$Code.AppendLine("          Start-DialogMyItemListOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.add_KeyDown({Start-DialogMyItemListReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListReturnListBoxMouseDoubleClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListReturnListBoxMouseDoubleClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          MouseDoubleClick event for the DialogMyItemListReturnListBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          MouseDoubleClick event for the DialogMyItemListReturnListBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter MouseDoubleClick Event for ```$DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Start-DialogMyItemListOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit MouseDoubleClick Event for ```$DialogMyItemListReturnListBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.add_MouseDoubleClick({Start-DialogMyItemListReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListReturnGroupBox.Controls[`$DialogMyItemListReturnGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListReturnGroupBox.Controls[`$DialogMyItemListReturnGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempWidth = [int]((`$DialogMyItemListReturnGroupBox.Width - `$DialogSpacer) / 2)")
      [Void]$Code.AppendLine("    `$TempSpace = (`$DialogMyItemListReturnGroupBox.Width - `$DialogSpacer) % 2")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListOKButton)")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyItemListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Name = `"DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.AcceptButton = `$DialogMyItemListOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListOKButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListOKButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListOKButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListOKButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.Tag = @(`$DialogMyItemListReturnListBox.SelectedItems)")
      [Void]$Code.AppendLine("        if (`$DialogMyItemListForm.Tag.Count)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemListForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("          `$DialogMyItemListReturnListBox.Items.Clear()")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.add_Click({Start-DialogMyItemListOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListCancelButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListCancelButton)")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyItemListOKButton.Right + `$DialogSpacer + `$TempSpace), (`$DialogMyItemListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Name = `"DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Text = `"&Cancel`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.CancelButton = `$DialogMyItemListCancelButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListCancelButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListCancelButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListCancelButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListCancelButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.Tag = @()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.add_Click({Start-DialogMyItemListCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox.Select()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$DialogMyItemListForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMyItemListForm.Tag}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = `$Null}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$TempWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempSpace = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnListBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogSelect-MyItemList`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Get-MyItemList"
    {
      #region ******** function DialogGet-MyItemList *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogGet-MyItemList")
      [Void]$Code.AppendLine("function DialogGet-MyItemList()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Prompts User to Enter a List of Text Strings seperated by a Comma (,), Semicolen (;), Space ( ), Carrage Return (CR), or a Line Feed (LF)")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Prompts User to Enter a List of Text Strings seperated by a Comma (,), Semicolen (;), Space ( ), Carrage Return (CR), or a Line Feed (LF)")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.AppendLine("    .PARAMETER ReturnName")
      [Void]$Code.AppendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.AppendLine("    .PARAMETER MaxTextLength")
      [Void]$Code.AppendLine("      Maximum Text Length")
      [Void]$Code.AppendLine("    .PARAMETER AllowDups")
      [Void]$Code.AppendLine("      Allow Return of Duplicate Values")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER Height")
      [Void]$Code.AppendLine("      Dialog Height")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Space between Controls")
      [Void]$Code.AppendLine("    .PARAMETER NoSpace")
      [Void]$Code.AppendLine("      Do Not use Spaces to Split Text")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      TextBox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      TextBox Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyItemList -FontFamily `"Verdana`" -FontSize 16).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyItemList -DialogName `"Add User Names`" -ReturnName `"User Names`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyItemList -DialogName `"Add Computer Names`" -ReturnName `"Computer Names`" -BackColor `"Black`" -ForeColor `"Red`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Get Item List`",")
      [Void]$Code.AppendLine("    [String]`$ReturnName = `"Item List`",")
      [Void]$Code.AppendLine("    [ValidateRange(0, 65536)]")
      [Void]$Code.AppendLine("    [int]`$MaxTextLength = 32768,")
      [Void]$Code.AppendLine("    [Switch]`$AllowDups,")
      [Void]$Code.AppendLine("    [int]`$Width = 20,")
      [Void]$Code.AppendLine("    [int]`$Height = 15,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogGet-MyItemList`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Name = `"DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Tag = @()")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Start-DialogMyItemListCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.add_KeyDown({Start-DialogMyItemListFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>> `$DialogMyItemListForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemListReturnGroupBox.Text, `$DialogMyItemListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListReturnGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Name = `"DialogMyItemListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Width = 200")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemListReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListReturnTextBox = System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListReturnTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox = New-Object -TypeName System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.Controls.Add(`$DialogMyItemListReturnTextBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.AcceptsReturn = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.HideSelection = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemListReturnGroupBox.Text, `$DialogMyItemListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.MaxLength = `$MaxTextLength")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Multiline = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Name = `"DialogMyItemListReturnTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyItemListReturnTextBox.CreateGraphics().MeasureString(`"X`", `$DialogMyItemListReturnTextBox.Font)")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Size = New-Object -TypeName System.Drawing.Size((`$TempSize.Width * `$Width), (`$TempSize.Height * `$Height))")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Text = `"`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.WordWrap = `$True")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListReturnTextBoxKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListReturnTextBoxKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListReturnTextBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemListReturnTextBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListReturnTextBoxKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyItemListReturnTextBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        If (`$EventArg.Control -and (`$EventArg.KeyValue -eq 65))")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$Sender.SelectionStart = 0")
      [Void]$Code.AppendLine("          `$Sender.SelectionLength = `$Sender.Text.Length")
      [Void]$Code.AppendLine("          `$EventArg.SuppressKeyPress = `$True")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyItemListReturnTextBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.add_KeyDown({Start-DialogMyItemListReturnTextBoxKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListReturnGroupBox.Controls[`$DialogMyItemListReturnGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListReturnGroupBox.Controls[`$DialogMyItemListReturnGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempWidth = [int]((`$DialogMyItemListReturnGroupBox.Width - `$DialogSpacer) / 2)")
      [Void]$Code.AppendLine("    `$TempSpace = (`$DialogMyItemListReturnGroupBox.Width - `$DialogSpacer) % 2")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListOKButton)")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyItemListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Name = `"DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.AcceptButton = `$DialogMyItemListOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListOKButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListOKButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListOKButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListOKButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        If (`$NoSpace)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$SplitChars = @(`",`", `";`", `"``r`", `"``n`")")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$SplitChars = @(`",`", `";`", `"``r`", `"``n`", `" `")")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        if (`$AllowDups)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemListForm.Tag = @(`$DialogMyItemListReturnTextBox.Text.Split(`$SplitChars, [System.StringSplitOptions]::RemoveEmptyEntries))")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemListForm.Tag = @(`$DialogMyItemListReturnTextBox.Text.Split(`$SplitChars, [System.StringSplitOptions]::RemoveEmptyEntries) | Select-Object -Unique)")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        if (`$DialogMyItemListForm.Tag.Count)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemListForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("          `$DialogMyItemListReturnTextBox.Text = `"`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$SplitChars = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemListOKButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton.add_Click({Start-DialogMyItemListOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListCancelButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListCancelButton)")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemListForm.Font.FontFamily, `$DialogMyItemListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyItemListOKButton.Right + `$DialogSpacer + `$TempSpace), (`$DialogMyItemListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Name = `"DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Text = `"&Cancel`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.CancelButton = `$DialogMyItemListCancelButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListCancelButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListCancelButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListCancelButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemListCancelButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.Tag = @()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemListCancelButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton.add_Click({Start-DialogMyItemListCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox.Select()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$DialogMyItemListForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMyItemListForm.Tag}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = `$Null}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$TempWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempSpace = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListReturnTextBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListOKButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListCancelButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogGet-MyItemList`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Load-MyItemList"
    {
      #region ******** function DialogLoad-MyItemList *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogLoad-MyItemList")
      [Void]$Code.AppendLine("function DialogLoad-MyItemList()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Displays Items as they are Loading")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Displays Items as they are Loading")
      [Void]$Code.AppendLine("    .PARAMETER ItemList")
      [Void]$Code.AppendLine("      List of items to Load")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER LabelForeColor")
      [Void]$Code.AppendLine("      Label Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ProgressColor")
      [Void]$Code.AppendLine("      ProgressBar Color")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogLoad-MyItemList -ItemList @(0..10) -FontFamily `"Verdana`" -FontSize 15 ")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogLoad-MyItemList -ItemList @(0..10) -BackColor `"Black`" -ForeColor `"Red`" -LabelForeColor `"Yellow`" -ProgressColor `"Red`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [int]`$Width = 15,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ProgressColor = [System.Drawing.SystemColors]::Highlight,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [ScriptBlock]`$ScriptBlock,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogLoad-MyItemList`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ControlBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Name = `"DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Tag = @()")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemListFormShown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemListFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogMyItemListForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemListFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$DialogMyItemListInputProgressBar.Minimum = 0")
      [Void]$Code.AppendLine("        `$DialogMyItemListInputProgressBar.Maximum = `$ItemList.Count")
      [Void]$Code.AppendLine("        `$DialogMyItemListInputProgressBar.Value = 0")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$DialogMyItemListForm.DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$DialogMyItemListInputLabel, `$DialogMyItemListInputProgressBar, `$ItemList")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyItemListForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.add_Shown({Start-DialogMyItemListFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemListForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListInputGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListInputGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListInputGroupBox.CreateGraphics().MeasureString(`$DialogMyItemListInputGroupBox.Text, `$DialogMyItemListInputGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.Controls.Add(`$DialogMyItemListInputGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, 0)")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Name = `"DialogMyItemListInputGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Text = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Width = 300")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemListInputGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListInputLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListInputLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Controls.Add(`$DialogMyItemListInputLabel)")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.ForeColor = `$LabelForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemListInputGroupBox.CreateGraphics().MeasureString(`"I`", `$DialogMyItemListInputGroupBox.Font).Height)))")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.Name = `"DialogMyItemListInputLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.Text = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.TextAlign = [System.Drawing.ContentAlignment]::TopCenter")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$TempHeight = `$DialogMyItemListInputLabel.Height")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.AutoSize = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel.Size = New-Object -TypeName System.Drawing.Size(([Math]::Floor(`$DialogMyItemListInputLabel.CreateGraphics().MeasureString(`"X`", `$DialogMyItemListInputLabel.Font).Width) * `$Width), `$TempHeight)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemListInputProgressBar = System.Windows.Forms.ProgressBar")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemListInputProgressBar`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar = New-Object -TypeName System.Windows.Forms.ProgressBar")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.Controls.Add(`$DialogMyItemListInputProgressBar)")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.AutoSize = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.ForeColor = `$ProgressColor")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Height = `$FontSize * 2")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyItemListInputLabel.Bottom + (`$DialogSpacer / 2)))")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Name = `"DialogMyItemListInputProgressBar`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Style = [System.Windows.Forms.ProgressBarStyle]::Continuous")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Text = `"DialogMyItemListInputProgressBar`"")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar.Width = `$DialogMyItemListInputLabel.Width")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListInputGroupBox.Controls[`$DialogMyItemListInputGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListInputGroupBox.Controls[`$DialogMyItemListInputGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemListForm.Controls[`$DialogMyItemListForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [Void]`$DialogMyItemListForm.ShowDialog()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemListForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemListInputProgressBar = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogLoad-MyItemList`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion

      #region ******** function DialogLoad-MyItemList Sample *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function Display-MyLoadSample")
      [Void]$Code.AppendLine("function Display-MyLoadSample() ")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .PARAMETER Value")
      [Void]$Code.AppendLine("      Value Command Line Parameter")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      Display-MyLoadSamplePipe -Value `"String`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Label]`$Label,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [System.Windows.Forms.ProgressBar]`$Progress,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Display-MyLoadSample`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("    `$Label.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    # ***********************************")
      [Void]$Code.AppendLine("    # Update Control Text and Progress...")
      [Void]$Code.AppendLine("    # ***********************************")
      [Void]$Code.AppendLine("    ForEach (`$Item in `$ItemList)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$Label.Text = `"`$Item - Workstation - `$Item`"")
      [Void]$Code.AppendLine("      `$Progress.Value += 1")
      [Void]$Code.AppendLine("      [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("      Start-Sleep -Milliseconds 250")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DisplayResult")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DisplayResult = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DialogResult]::Abort")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Display-MyLoadSample`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion      Break
    }
    "Get-MyNamedList"
    {
      #region ******** function DialogGet-MyNamedList *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogGet-MyNamedList")
      [Void]$Code.AppendLine("function DialogGet-MyNamedList()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("    .PARAMETER ReturnName")
      [Void]$Code.AppendLine("    .PARAMETER NamedItems")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.AppendLine("      Control Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      TextBox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      TextBox Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyNamedList -FontFamily `"Verdana`" -FontSize 16).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyNamedList -DialogName `"Add User Names`" -ReturnName `"User Names`" -FontSize 8 -Columns @{`"User &A`" = `"UserA`"; `"User &B`" = `"UserB`"; `"User &C`" = `"UserC`"; `"User &D`" = `"UserD`"; `"User &E`" = `"UserE`"}).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyNamedList -DialogName `"Add Computer Names`" -ReturnName `"Computer Names`" -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`" -Columns @{`"Computer &A`" = `"ComputerA`"; `"Computer &B`" = `"ComputerB`"; `"Computer &C`" = `"ComputerC`"; `"Computer &D`" = `"ComputerD`"; `"Computer &E`" = `"ComputerE`"}).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .IBPUTS")
      [Void]$Code.AppendLine("    .OUTPUTS")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Get Named List`",")
      [Void]$Code.AppendLine("    [String]`$ReturnName = `"Named List`",")
      [Void]$Code.AppendLine("    [HashTable]`$NamedItems = @{`"Named Item &A`" = `"NamedItemA`"; `"Named Item &B`" = `"NamedItemB`"; `"Named Item &C`" = `"NamedItemC`"; `"Named Item &D`" = `"NamedItemD`"; `"Named Item &E`" = `"NamedItemE`"; `"Named Item &F`" = `"NamedItemF`"; `"Named Item &G`" = `"NamedItemG`"; `"Named Item &H`" = `"NamedItemH`"; `"Named Item &I`" = `"NamedItemI`"; `"Named Item &J`" = `"NamedItemJ`"},")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogGet-MyNamedList`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyNamedListForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyNamedListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Name = `"DialogMyNamedListForm`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Tag = @()")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyNamedListFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyNamedListFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyNamedListForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyNamedListForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyNamedListFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .ReturnS")
      [Void]$Code.AppendLine("        .OUTPUTS")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyNamedListForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Start-DialogMyNamedListCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyNamedListForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.add_KeyDown({Start-DialogMyNamedListFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyNamedListForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyNamedListReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyNamedListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyNamedListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyNamedListReturnGroupBox.Text, `$DialogMyNamedListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Controls.Add(`$DialogMyNamedListReturnGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyNamedListForm.Font.FontFamily, `$DialogMyNamedListForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.Name = `"DialogMyNamedListReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyNamedListReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogKeys = @(`$NamedItems.Keys | Sort-Object)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TotalKeys = `$DialogKeys.Count")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$LableWidth = (`$DialogKeys | Sort-Object -Property Length -Descending | Select-Object -ExpandProperty Length -Unique -First 1) - 1")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempTop = [System.Math]::Floor(`$DialogMyNamedListReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyNamedListReturnGroupBox.Text, `$DialogMyNamedListReturnGroupBox.Font).Height + (`$DialogSpacer / 2))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogLabel = New-Object -TypeName System.Windows.Forms.Label[] -ArgumentList `$TotalKeys")
      [Void]$Code.AppendLine("    `$DialogTextBox = New-Object -TypeName System.Windows.Forms.TextBox[] -ArgumentList `$TotalKeys")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    For (`$Count = 0; `$Count -lt `$TotalKeys; `$Count++)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      #region `$DialogLabel[`$Count] = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Creating Form Control ```$DialogLabel[`$Count]`"")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count] = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("      `$DialogMyNamedListReturnGroupBox.Controls.Add(`$DialogLabel[`$Count])")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].BackColor = `$BackColor")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Font = `$DialogMyNamedListForm.Font")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Name = `"DialogMyNamedListReturn_Label_`$Count`"")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Tag = `$Null")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Text = `"`$(`$DialogKeys[`$Count]):`"")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
      [Void]$Code.AppendLine("      #endregion")
      [Void]$Code.AppendLine("      if (`$Count -eq 0)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogLabel[`$Count].AutoSize = `$True")
      [Void]$Code.AppendLine("        `$TempWidth = [System.Math]::Floor(`$DialogMyNamedListForm.CreateGraphics().MeasureString(`"X`", `$DialogMyNamedListForm.Font).Width)")
      [Void]$Code.AppendLine("        `$TempHeight = `$DialogLabel[`$Count].Height")
      [Void]$Code.AppendLine("        `$DialogLabel[`$Count].AutoSize = `$False")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Size = New-Object -TypeName System.Drawing.Size((`$TempWidth * `$LableWidth), `$TempHeight)")
      [Void]$Code.AppendLine("      `$DialogLabel[`$Count].Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$TempTop + ((`$TempHeight + `$DialogSpacer) * `$Count)))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      #region `$DialogTextBox[`$Count] = System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Creating Form Control ```$DialogTextBox[`$Count]`"")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count] = New-Object -TypeName System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("      `$DialogMyNamedListReturnGroupBox.Controls.Add(`$DialogTextBox[`$Count])")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].AutoSize = `$True")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Font = `$DialogMyNamedListForm.Font")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Location = New-Object -TypeName System.Drawing.Point((`$DialogLabel[`$Count].Right + `$DialogSpacer), `$DialogLabel[`$Count].Top)")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].MaxLength = 25")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Name = `"DialogMyNamedListReturn_TextBox_`$Count`"")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].TabStop = `$True")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Tag = `$Null")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Text = `$NamedItems[`$DialogKeys[`$Count]]")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
      [Void]$Code.AppendLine("      `$DialogTextBox[`$Count].Size = New-Object -TypeName System.Drawing.Size((`$TempWidth * 20), `$TempHeight)")
      [Void]$Code.AppendLine("      #endregion")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyNamedListReturnGroupBox.Controls[`$DialogMyNamedListReturnGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyNamedListReturnGroupBox.Controls[`$DialogMyNamedListReturnGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyNamedListOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyNamedListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Controls.Add(`$DialogMyNamedListOKButton)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    #`$DialogMyNamedListOKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Font = `$DialogMyNamedListForm.Font")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyNamedListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Name = `"DialogMyNamedListOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.Width = (`$DialogMyNamedListReturnGroupBox.Width - `$DialogSpacer) / 2")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.AcceptButton = `$DialogMyNamedListOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyNamedListOKButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyNamedListOKButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyNamedListOKButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyNamedListOKButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyNamedListOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .ReturnS")
      [Void]$Code.AppendLine("        .OUTPUTS")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyNamedListOKButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$Return = @{}")
      [Void]$Code.AppendLine("        For (`$Count = 0; `$Count -lt `$TotalKeys; `$Count++)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          if ([String]::IsNullOrEmpty(`$DialogTextBox[`$Count].Text))")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            Return")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          else")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$Return.Add(`$DialogLabel[`$Count].Text.Replace(`"&`", `"`").Replace(`":`", `"`"), `$DialogTextBox[`$Count].Text)")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        `$DialogMyNamedListForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("        `$DialogMyNamedListForm.Tag = [PSCustomObject]`$Return")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyNamedListOKButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton.add_Click({Start-DialogMyNamedListOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyNamedListCancelButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyNamedListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.Controls.Add(`$DialogMyNamedListCancelButton)")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    #`$DialogMyNamedListCancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Font = `$DialogMyNamedListForm.Font")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyNamedListOKButton.Right + `$DialogSpacer), (`$DialogMyNamedListReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Name = `"DialogMyNamedListCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Text = `"&Cancel`"")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.Width = `$DialogMyNamedListOKButton.Width")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.CancelButton = `$DialogMyNamedListCancelButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyNamedListCancelButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyNamedListCancelButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyNamedListCancelButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyNamedListCancelButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyNamedListCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .ReturnS")
      [Void]$Code.AppendLine("        .OUTPUTS")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyNamedListCancelButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyNamedListForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("        `$DialogMyNamedListForm.Tag = @()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyNamedListCancelButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton.add_Click({Start-DialogMyNamedListCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyNamedListForm.Controls[`$DialogMyNamedListForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyNamedListForm.Controls[`$DialogMyNamedListForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$DialogMyNamedListForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMyNamedListForm.Tag}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = `$Null}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListReturnGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogKeys = `$Null")
      [Void]$Code.AppendLine("    `$TotalKeys = `$Null")
      [Void]$Code.AppendLine("    `$LableWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempTop = `$Null")
      [Void]$Code.AppendLine("    `$DialogLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogTextBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListOKButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyNamedListCancelButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogGet-MyNamedList`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Get-MyItem"
    {
      #region ******** function DialogGet-MyItem *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogGet-MyItem")
      [Void]$Code.AppendLine("function DialogGet-MyItem()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Prompts User to Enter a Text Value")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Prompts User to Enter a Text Value")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.AppendLine("    .PARAMETER ReturnName")
      [Void]$Code.AppendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.AppendLine("    .PARAMETER MaxTextLength")
      [Void]$Code.AppendLine("      Maximum Text Length")
      [Void]$Code.AppendLine("    .PARAMETER Value")
      [Void]$Code.AppendLine("      Default Value")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER NoCancel")
      [Void]$Code.AppendLine("      Do not Display Cancel Button")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Space between Controls")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      TextBox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      TextBox Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$Return = DialogGet-MyItem -FontFamily `"Verdana`" -FontSize 16).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"User Entered: `$(`$Return.Item)`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$Return = DialogGet-MyItem -DialogName `"User Name`" -ReturnName `"User Name`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"User Entered: `$(`$Return.Item)`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$Return = DialogGet-MyItem -DialogName `"Computer Name`" -ReturnName `"Computer Name`" -BackColor `"Black`" -ForeColor `"Red`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"User Entered: `$(`$Return.Item)`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Get Item`",")
      [Void]$Code.AppendLine("    [String]`$ReturnName = `"Item`",")
      [Void]$Code.AppendLine("    [String]`$Message,")
      [Void]$Code.AppendLine("    [ValidateRange(0, 65536)]")
      [Void]$Code.AppendLine("    [int]`$MaxTextLength = 25,")
      [Void]$Code.AppendLine("    [String]`$Value = `"`",")
      [Void]$Code.AppendLine("    [int]`$Width = 30,")
      [Void]$Code.AppendLine("    [Switch]`$NoCancel,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogGet-MyItem`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyItemForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.KeyPreview = -not `$NoCancel")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Name = `"DialogMyItemForm`"")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Tag = @()")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyItemFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyItemForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyItemForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Start-DialogMyItemCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyItemForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.add_KeyDown({Start-DialogMyItemFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemReturnGroupBox.Text, `$DialogMyItemReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Controls.Add(`$DialogMyItemReturnGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemForm.Font.FontFamily, `$DialogMyItemForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Name = `"DialogMyItemReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Width = 200")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyItemReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemReturnLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemReturnLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Controls.Add(`$DialogMyItemReturnLabel)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemForm.Font.FontFamily, `$DialogMyItemForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemReturnGroupBox.Text, `$DialogMyItemReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.Name = `"DialogMyItemReturnLabel`"")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyItemReturnLabel.CreateGraphics().MeasureString(`"X`", `$DialogMyItemReturnLabel.Font)")
      [Void]$Code.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSize.Width * `$Width)")
      [Void]$Code.AppendLine("    `$TempHeight = [Math]::Ceiling((`$DialogMyItemReturnLabel.CreateGraphics().MeasureString(`"X`$(`$Message)X`", `$DialogMyItemReturnLabel.Font)).Width / `$TempWidth) * `$TempSize.Height")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.Size = New-Object -TypeName System.Drawing.Size(`$TempWidth, `$TempHeight)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.Text = `$Message")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnLabel.TextAlign = [System.Drawing.ContentAlignment]::TopLeft")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemReturnTextBox = System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemReturnTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox = New-Object -TypeName System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.Controls.Add(`$DialogMyItemReturnTextBox)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.AcceptsReturn = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemForm.Font.FontFamily, `$DialogMyItemForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.HideSelection = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.MaxLength = `$MaxTextLength")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.Name = `"DialogMyItemReturnTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.Text = `$Value")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Message`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyItemReturnTextBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyItemReturnLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("      `$DialogMyItemReturnTextBox.Width = `$DialogMyItemReturnLabel.Width")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyItemReturnLabel.Visible = `$False")
      [Void]$Code.AppendLine("      `$DialogMyItemReturnTextBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyItemReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyItemReturnGroupBox.Text, `$DialogMyItemReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("      `$DialogMyItemReturnTextBox.Size = New-Object -TypeName System.Drawing.Size(((`$DialogMyItemReturnTextBox.CreateGraphics().MeasureString(`"I`", `$DialogMyItemReturnTextBox.Font)).Width * `$Width), `$DialogMyItemReturnTextBox.Height)")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemReturnGroupBox.Controls[`$DialogMyItemReturnGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemReturnGroupBox.Controls[`$DialogMyItemReturnGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$NoCancel)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$TempWidth = `$DialogMyItemReturnGroupBox.Width")
      [Void]$Code.AppendLine("      `$TempSpace = 0")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$TempWidth = [int]((`$DialogMyItemReturnGroupBox.Width - `$DialogSpacer) / 2)")
      [Void]$Code.AppendLine("      `$TempSpace = (`$DialogMyItemReturnGroupBox.Width - `$DialogSpacer) % 2")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyItemOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyItemOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.Controls.Add(`$DialogMyItemOKButton)")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemForm.Font.FontFamily, `$DialogMyItemForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyItemReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Name = `"DialogMyItemOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.AcceptButton = `$DialogMyItemOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyItemOKButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyItemOKButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemOKButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyItemOKButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyItemOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemOKButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyItemForm.Tag = `$DialogMyItemReturnTextBox.Text.Trim()")
      [Void]$Code.AppendLine("        if (`$DialogMyItemForm.Tag.Length)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("          `$DialogMyItemReturnTextBox.Text = `"`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemOKButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton.add_Click({Start-DialogMyItemOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (-not `$NoCancel)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      #region `$DialogMyItemCancelButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Creating Form Control ```$DialogMyItemCancelButton`"")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("      `$DialogMyItemForm.Controls.Add(`$DialogMyItemCancelButton)")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.AutoSize = `$True")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyItemForm.Font.FontFamily, `$DialogMyItemForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyItemOKButton.Right + `$DialogSpacer + `$TempSpace), (`$DialogMyItemReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Name = `"DialogMyItemCancelButton`"")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.TabStop = `$True")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Tag = `$Null")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Text = `"&Cancel`"")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.Width = `$TempWidth")
      [Void]$Code.AppendLine("      #endregion")
      [Void]$Code.AppendLine("      `$DialogMyItemForm.CancelButton = `$DialogMyItemCancelButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      #region function Start-DialogMyItemCancelButtonClick")
      [Void]$Code.AppendLine("      function Start-DialogMyItemCancelButtonClick()")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        <#")
      [Void]$Code.AppendLine("          .SYNOPSIS")
      [Void]$Code.AppendLine("            Click event for the DialogMyItemCancelButton Control")
      [Void]$Code.AppendLine("          .DESCRIPTION")
      [Void]$Code.AppendLine("            Click event for the DialogMyItemCancelButton Control")
      [Void]$Code.AppendLine("          .PARAMETER Sender")
      [Void]$Code.AppendLine("             The Form Control that fired the Event")
      [Void]$Code.AppendLine("          .PARAMETER EventArg")
      [Void]$Code.AppendLine("             The Event Arguments for the Event")
      [Void]$Code.AppendLine("          .EXAMPLE")
      [Void]$Code.AppendLine("             Start-DialogMyItemCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("          .NOTES")
      [Void]$Code.AppendLine("            Original Function By Ken Sweet")
      [Void]$Code.AppendLine("          .LINK")
      [Void]$Code.AppendLine("        #>")
      [Void]$Code.AppendLine("        [CmdletBinding()]")
      [Void]$Code.AppendLine("        param (")
      [Void]$Code.AppendLine("          [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("          [Object]`$Sender,")
      [Void]$Code.AppendLine("          [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("          [Object]`$EventArg")
      [Void]$Code.AppendLine("        )")
      [Void]$Code.AppendLine("        Write-Verbose -Message `"Enter Click Event for ```$DialogMyItemCancelButton`"")
      [Void]$Code.AppendLine("        Try")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyItemForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("          `$DialogMyItemForm.Tag = @()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          [System.GC]::Collect()")
      [Void]$Code.AppendLine("          [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        Catch")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("          Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("          Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        Write-Verbose -Message `"Exit Click Event for ```$DialogMyItemCancelButton`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      #endregion")
      [Void]$Code.AppendLine("      `$DialogMyItemCancelButton.add_Click({Start-DialogMyItemCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyItemForm.Controls[`$DialogMyItemForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyItemForm.Controls[`$DialogMyItemForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox.Select()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$DialogMyItemForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Item`" = `$DialogMyItemForm.Tag}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Item`" = `$Null}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$TempWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempHeight = `$Null")
      [Void]$Code.AppendLine("    `$TempSpace = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemReturnTextBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemOKButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyItemCancelButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogGet-MyItem`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Get-MyADOrgUnit"
    {
      #region ******** function DialogGet-MyADOrgUnit *********
      [Void]$Code.AppendLine("")
      [Void]$Code.appendLine("#region function DialogGet-MyADOrgUnit")
      [Void]$Code.appendLine("function DialogGet-MyADOrgUnit()")
      [Void]$Code.appendLine("{")
      [Void]$Code.appendLine("  <#")
      [Void]$Code.appendLine("    .SYNOPSIS")
      [Void]$Code.appendLine("    .DESCRIPTION")
      [Void]$Code.appendLine("    .PARAMETER DialogName")
      [Void]$Code.appendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.appendLine("    .PARAMETER ReturnName")
      [Void]$Code.appendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.appendLine("    .PARAMETER SearchRoot")
      [Void]$Code.appendLine("      Active Directory SearchRoot to Search. Can also be set to `"Forest`" to Allow Selecting of all")
      [Void]$Code.appendLine("      Domains in the AD Forest or `"Current`" for the Curent Domain the User is Logged in to")
      [Void]$Code.appendLine("    .PARAMETER ShowCheckBox")
      [Void]$Code.appendLine("      Show CheckBox on Dialog")
      [Void]$Code.appendLine("    .PARAMETER CheckBoxText")
      [Void]$Code.appendLine("      Text to Display next to the CheckBox")
      [Void]$Code.appendLine("    .PARAMETER EnableCheckBox")
      [Void]$Code.appendLine("      Check CheckBox")
      [Void]$Code.appendLine("    .PARAMETER Containers")
      [Void]$Code.appendLine("      Include Containers")
      [Void]$Code.appendLine("    .PARAMETER Width")
      [Void]$Code.appendLine("      Dialog Width")
      [Void]$Code.appendLine("    .PARAMETER Height")
      [Void]$Code.appendLine("      Dialog Height")
      [Void]$Code.appendLine("    .PARAMETER ImageIndex")
      [Void]$Code.appendLine("      Folder Image")
      [Void]$Code.appendLine("    .PARAMETER FontFamily")
      [Void]$Code.appendLine("      Dialog Font Family")
      [Void]$Code.appendLine("    .PARAMETER FontSize")
      [Void]$Code.appendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.appendLine("    .PARAMETER Owner")
      [Void]$Code.appendLine("      Parent Calling Form")
      [Void]$Code.appendLine("    .PARAMETER BackColor")
      [Void]$Code.appendLine("      Dialog Back Color")
      [Void]$Code.appendLine("    .PARAMETER ForeColor")
      [Void]$Code.appendLine("      Dialog Fore Color")
      [Void]$Code.appendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.appendLine("      Control Fore Color")
      [Void]$Code.appendLine("    .PARAMETER TextBackColor")
      [Void]$Code.appendLine("      TextBox back Color")
      [Void]$Code.appendLine("    .PARAMETER TextForeColor")
      [Void]$Code.appendLine("      TextBox Fore Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.appendLine("      Button Back Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.appendLine("      Button Fore Color")
      [Void]$Code.appendLine("    .PARAMETER SelectedDomain")
      [Void]$Code.appendLine("      Name of the Default Domain")
      [Void]$Code.appendLine("    .PARAMETER SelectedOU")
      [Void]$Code.appendLine("      Canonical Name of the Default Selected OU")
      [Void]$Code.appendLine("    .EXAMPLE")
      [Void]$Code.appendLine("      if ((`$List = DialogGet-MyADOrgUnit -FontFamily `"Verdana`" -FontSize 10).Result)")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    .EXAMPLE")
      [Void]$Code.appendLine("      if ((`$List = DialogGet-MyADOrgUnit -DialogName `"Add User Names`" -ReturnName `"User Names`" -ShowRadioButton).Result)")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    .EXAMPLE")
      [Void]$Code.appendLine("      if ((`$List = DialogGet-MyADOrgUnit -DialogName `"Add Computer Names`" -InputName `"Search Database`" -ReturnName `"Computer Names`" -ShowRadioButton -ShowCheckBox -Security -Distribution -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`" -RadioForeColor `"Green`" -GroupForeColor `"Blue`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`").Result)")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.appendLine("    .LINK")
      [Void]$Code.appendLine("  #>")
      [Void]$Code.appendLine("  [CmdletBinding()]")
      [Void]$Code.appendLine("  param(")
      [Void]$Code.appendLine("    [parameter()]")
      [Void]$Code.appendLine("    [String]`$DialogName = `"Select AD Org Unit`",")
      [Void]$Code.appendLine("    [String]`$ReturnName = `"O&rganizational Units`",")
      [Void]$Code.appendLine("    [String]`$SearchRoot = `"Current`",")
      [Void]$Code.appendLine("    [Switch]`$ShowCheckBox,")
      [Void]$Code.appendLine("    [String]`$CheckBoxText = `"Search Child Organization &Units`",")
      [Void]$Code.appendLine("    [Switch]`$EnableCheckBox,")
      [Void]$Code.appendLine("    [Switch]`$Containers,")
      [Void]$Code.appendLine("    [int]`$Width = 25,")
      [Void]$Code.appendLine("    [int]`$Height = 15,")
      [Void]$Code.appendLine("    [ValidateRange(0, 4)]")
      [Void]$Code.appendLine("    [Int]`$ImageIndex = 0,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$LineColor = $($CGenConfig.ToolName)Color.TextForeColor,")
      [Void]$Code.appendLine("    [String]`$SelectedDomain = `$Null,")
      [Void]$Code.appendLine("    [String]`$SelectedOU = `$Null")
      [Void]$Code.appendLine("  )")
      [Void]$Code.appendLine("  Write-Verbose -Message `"Enter Function DialogGet-MyADOrgUnit`"")
      [Void]$Code.appendLine("  Try")
      [Void]$Code.appendLine("  {")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitFormComponents = New-Object -TypeName System.ComponentModel.Container")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitForm = System.Windows.Forms.Form")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.ForeColor = `$ForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.KeyPreview = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.MaximizeBox = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.MinimizeBox = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Name = `"DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Owner = `$Owner")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.ShowInTaskbar = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Tag = @()")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Text = `$DialogName")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitFormKeyDown")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitFormKeyDown()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          KeyDown event for the DialogMyADOrgUnitForm Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          KeyDown event for the DialogMyADOrgUnitForm Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          Start-DialogMyADOrgUnitCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.add_KeyDown({Start-DialogMyADOrgUnitFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitFormShown")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitFormShown()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Shown event for the DialogMyADOrgUnitForm Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Shown event for the DialogMyADOrgUnitForm Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitForm.Refresh()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        if (-not [String]::IsNullOrEmpty(`$SelectedDomain))")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$TempItem = `$DialogMyADOrgUnitInput_DomainComboBox.Items | Where-Object -FilterScript { `$PSItem.Value -eq `$SelectedDomain }")
      [Void]$Code.appendLine("          if (-not [String]::IsNullOrEmpty(`$TempItem))")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$DialogMyADOrgUnitInput_DomainComboBox.SelectedItem = `$TempItem")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        if (-not [String]::IsNullOrEmpty(`$SelectedOU))")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$OUs = `$SelectedOU.Split(`"/`")")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitReturnTreeView.SelectedNode = `$DialogMyADOrgUnitReturnTreeView.Nodes[0]")
      [Void]$Code.appendLine("          ForEach (`$OU in `$OUs[1..(`$OUs.Count - 1)])")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$TempNodes = `$DialogMyADOrgUnitReturnTreeView.SelectedNode.Nodes.Find(`$OU, `$True)")
      [Void]$Code.appendLine("            if (`$TempNodes.Count)")
      [Void]$Code.appendLine("            {")
      [Void]$Code.appendLine("              `$DialogMyADOrgUnitReturnTreeView.SelectedNode = `$TempNodes[0]")
      [Void]$Code.appendLine("              `$DialogMyADOrgUnitReturnTreeView.SelectedNode.Expand()")
      [Void]$Code.appendLine("            }")
      [Void]$Code.appendLine("            else")
      [Void]$Code.appendLine("            {")
      [Void]$Code.appendLine("              Break")
      [Void]$Code.appendLine("            }")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitReturnTreeView.Select()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        `$TempItem = `$Null")
      [Void]$Code.appendLine("        `$TempNodes = `$Null")
      [Void]$Code.appendLine("        `$OU = `$Null")
      [Void]$Code.appendLine("        `$OUs = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyADOrgUnitForm`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.add_Shown({Start-DialogMyADOrgUnitFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADOrgUnitForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitReturnGroupBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.appendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADOrgUnitReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyADOrgUnitReturnGroupBox.Text, `$DialogMyADOrgUnitReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Controls.Add(`$DialogMyADOrgUnitReturnGroupBox)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADOrgUnitForm.Font.FontFamily, `$DialogMyADOrgUnitForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.ForeColor = `$GroupForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Name = `"DialogMyADOrgUnitReturnGroupBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.appendLine("    #`$DialogMyADOrgUnitReturnGroupBox.Width = `$DialogMyADOrgUnitReturnGroupBox.Width")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADOrgUnitReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitReturnDomainLabel = System.Windows.Forms.Label")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitReturnDomainLabel`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Controls.Add(`$DialogMyADOrgUnitReturnDomainLabel)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADOrgUnitForm.Font.FontFamily, `$DialogMyADOrgUnitForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.Name = `"DialogMyADOrgUnitReturnDomainLabel`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.Text = `"&Domain:`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitReturnDomainComboBox = System.Windows.Forms.ComboBox")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitReturnDomainComboBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox = New-Object -TypeName System.Windows.Forms.ComboBox")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Controls.Add(`$DialogMyADOrgUnitReturnDomainComboBox)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.BackColor = `$TextBackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.DisplayMember = `"Text`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADOrgUnitForm.Font.FontFamily, `$DialogMyADOrgUnitForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.ForeColor = `$TextForeColor")
      [Void]$Code.appendLine("    `$TempSizeCB = `$DialogMyADOrgUnitReturnDomainComboBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADOrgUnitReturnDomainComboBox.Font)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.ItemHeight = `$TempSizeCB.Height")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.MaxDropDownItems = 8")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.Name = `"DialogMyADOrgUnitReturnDomainComboBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.Sorted = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.Tag = -1")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.Text = `"DialogMyADOrgUnitReturnDomainComboBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.ValueMember = `"Value`"")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitReturnDomainComboBoxSelectedIndexChanged")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitReturnDomainComboBoxSelectedIndexChanged()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          SelectedIndexChanged event for the DialogMyADOrgUnitReturnDomainComboBox Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          SelectedIndexChanged event for the DialogMyADOrgUnitReturnDomainComboBox Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitReturnDomainComboBoxSelectedIndexChanged -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter SelectedIndexChanged Event for ```$DialogMyADOrgUnitReturnDomainComboBox`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$Sender.SelectedIndex -gt -1)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitReturnTreeView.BeginUpdate()")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitReturnTreeView.Nodes.Clear()")
      [Void]$Code.appendLine("          if ([String]::IsNullOrEmpty(`$Sender.SelectedItem.Tag))")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$MySearcher = [ADSISearcher]`"(name=*)`"")
      [Void]$Code.appendLine("            `$MySearcher.SearchRoot = [ADSI]`"`$(`$Sender.SelectedItem.Value)`"")
      [Void]$Code.appendLine("            `$MySearcher.SearchScope = `"Base`"")
      [Void]$Code.appendLine("            `$MySearcher.SizeLimit = 1")
      [Void]$Code.appendLine("            [Void]`$MySearcher.PropertiesToLoad.Add(`"ou`")")
      [Void]$Code.appendLine("            [Void]`$MySearcher.PropertiesToLoad.Add(`"canonicalname`")")
      [Void]$Code.appendLine("            [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.appendLine("            ForEach (`$Item in `$MySearcher.FindOne())")
      [Void]$Code.appendLine("            {")
      [Void]$Code.appendLine("              `$TempNode = New-Object -TypeName System.Windows.Forms.TreeNode(`$Sender.SelectedItem.Text, [System.Windows.Forms.TreeNode[]](@(`"`$*`$`")))")
      [Void]$Code.appendLine("              `$TempNode.Name = `$Sender.SelectedItem.Text")
      [Void]$Code.appendLine("              `$TempNode.Tag = [PSCustomObject]@{`"DN`" = (`$Item.Properties[`"distinguishedname`"][0]); `"CanonicalName`" = (`$Item.Properties[`"canonicalname`"][0]).Trim(`"/`")}")
      [Void]$Code.appendLine("              `$TempNode.Checked = `$True")
      [Void]$Code.appendLine("              `$TempNode.ImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("              `$TempNode.SelectedImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("              `$Sender.SelectedItem.Tag = `$TempNode")
      [Void]$Code.appendLine("            }")
      [Void]$Code.appendLine("            `$DialogMyADOrgUnitReturnTreeView.Nodes.Add(`$Sender.SelectedItem.Tag)")
      [Void]$Code.appendLine("            `$DialogMyADOrgUnitReturnTreeView.Nodes.Item(0).Expand()")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          else")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$DialogMyADOrgUnitReturnTreeView.Nodes.Add(`$Sender.SelectedItem.Tag)")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitReturnTreeView.EndUpdate()")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        `$TempOU = `$Null")
      [Void]$Code.appendLine("        `$TempNode = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit SelectedIndexChanged Event for ```$DialogMyADOrgUnitReturnDomainComboBox`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox.add_SelectedIndexChanged({Start-DialogMyADOrgUnitReturnDomainComboBoxSelectedIndexChanged -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitImageList = System.Windows.Forms.ImageList")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitImageList`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList = New-Object -TypeName System.Windows.Forms.ImageList(`$DialogMyADOrgUnitFormComponents)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.ImageSize = New-Object -TypeName System.Drawing.Size(16, 16)")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADOrgUnitImageList Icons <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$YellowIcon")
      [Void]$Code.appendLine("`$YellowIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgAaKK8ANlTSADZU0gA2VNIANlTSADZU0gA2VNIANlTSADZU0gA2VNIANlTSADZU0gA2VNIAGiivAAAAHgIiNMEGpPf/Bqj9/wao/f8GqP3/Bqj9/wao/f8GqP3/Bqj9/wao/f8GqP3/Bqj9/wao")
      [Void]$Code.appendLine("/f8GqP3/BqT3/wIiNMEAV339AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8AV339AFyB/wC3//8At///ALf//wC3//8At///ALf//wC3//8At///ALf//wC3")
      [Void]$Code.appendLine("//8At///ALf//wC3//8At///AFyB/wBggf8Cv///Ar///wG+//8Avv//AL7//wC+//8Avv//AL7//wC+//8Avv//AL7//wC+//8Avv//AL7//wBggf8EZYH/Dsn//w7J//8Oyf//Dsn//wzJ//8JyP//BMf//wDG")
      [Void]$Code.appendLine("//8Axv//AMb//wDG//8Axv//AMb//wDG//8AZIH/C2qB/yHU//8h1P//IdT//yHU//8h1P//IdT//yHU//8g1P//GdL//xDQ//8Ezv//AM3//wDN//8Azf//AGiB/xRvgf8+3///Pt///z7f//8+3///Pt///z7f")
      [Void]$Code.appendLine("//8+3///Pt///z7f//8+3///Pt///zXd//8l2///E9j//wFsgf8hdIH/Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//8UZ37/MHiB/5Dz//+Q8///kPP//5Dz")
      [Void]$Code.appendLine("//+Q8///kPP//3Xt/v9M0/j/TNP4/0zT+P9M0/j/TNP4/0zT+P8sv/X/AE18/x5ZY+vC+v//xvr//8b6///G+v//xvr//8b6//87zPj/ALD6/wCx+v8Asfr/ALH6/wCx+v8Asfr/ALX9/wBdgf8AAwVcL3J892Oj")
      [Void]$Code.appendLine("q/9jo6v/Y6Or/2Ojq/9boqz/Br3q/wDN/v8Azf//AM3//wDN//8Azf//AM3//wDN//8AZ3/+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMABtfPkA4v//AOL//wDi//8A4v//AOL//wDi//8A3vv/ADY+zAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQlvAEtQ0ABPVNIAT1TSAE9U0gBPVNIAT1TSACgrsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$BlueIcon")
      [Void]$Code.appendLine("`$BlueIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHh8ZAK9BNADSQTQA0kE0ANJBNADSQTQA0kE0ANJBNADSQTQA0kE0ANJBNADSQTQA0kE0ANIfGQCvAAAAHiojCcHFoxv/yacb/8mnG//Jpxv/yacb/8mnG//Jpxv/yacb/8mnG//Jpxv/yacb/8mn")
      [Void]$Code.appendLine("G//Jpxv/xaMb/yojCcFjUQn9yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv9jUQn9aFcT/86tJv/OrSb/zq0m/86tJv/OrSb/zq0m/86tJv/OrSb/zq0m/86t")
      [Void]$Code.appendLine("Jv/OrSb/zq0m/86tJv/OrSb/aFcT/2tcHv/Ttjz/07Y8/9O1PP/TtTv/07U6/9O1Ov/TtTr/07U6/9O1Ov/TtTr/07U6/9O1Ov/TtTr/07U6/2pbHf9uYCv/2sBZ/9rAWf/awFn/2sBY/9nAV//Zv1X/2L5S/9i9")
      [Void]$Code.appendLine("T//XvE//17xP/9e8T//XvE//17xP/9e8T/9tXyj/cWY5/+HNeP/hzXj/4c14/+HNeP/hzXj/4c14/+HNeP/gzHf/38tz/97Ibf/dxmb/3MRj/9zEY//cxGP/b2My/3RsR//o2Zn/6NmZ/+jZmf/o2Zn/6NmZ/+jZ")
      [Void]$Code.appendLine("mf/o2Zn/6NmZ/+jZmf/o2Zn/6NmZ/+fXlP/l1Iv/49CB/3JoPf93cVb/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf9qZD7/enVj//Xv1v/179b/9e/W//Xv")
      [Void]$Code.appendLine("1v/179b/9e/W/+/pyP/Tzpr/086Z/9POmf/Tzpn/086Z/9POmf/Bumz/VUoF/1hXRuv7+O3/+/ju//v47v/7+O7/+/ju//v47v/NxoT/wKYo/8GnKf/Bpyn/wacp/8GnKf/Cpyn/yasp/2hYFP8CAwJccW9h96Kh")
      [Void]$Code.appendLine("lf+joZX/o6GV/6Ohlf+hoJH/wrRo/9vDYf/bw2H/28Nh/9vDYf/bw2H/28Nh/9vDYf9uYjD+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMHFqTfnq3KL/6tyi/+rcov/q3KL/6tyi/+rcov/n2Z//ODQkzAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQdvTUtC0FFPRtJRT0bSUU9G0lFPRtJRT0bSKSgjsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$GreenIcon")
      [Void]$Code.appendLine("`$GreenIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgkaAK8TNgDSEzYA0hM2ANITNgDSEzYA0hM2ANITNgDSEzYA0hM2ANITNgDSEzYA0hM2ANIJGgCvAAAAHgkkB8Eypxn/M6sZ/zOrGf8zqxn/M6sZ/zOrGf8zqxn/M6sZ/zOrGf8zqxn/M6sZ/zOr")
      [Void]$Code.appendLine("Gf8zqxn/MqcZ/wkkB8EYVw/9MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8YVw/9Fl0Z/yy5Mv8suTL/LLky/yy5Mv8suTL/LLky/yy5Mv8suTL/LLky/yy5")
      [Void]$Code.appendLine("Mv8suTL/LLky/yy5Mv8suTL/Fl0Z/xRiI/8pwkf/KMJH/yjCR/8nwkb/JsJF/ybCRf8mwkX/JsJF/ybCRf8mwkX/JsJF/ybCRf8mwkX/JsJF/xNiI/8UZy//Lc5h/y3OYf8tzmH/Lc5h/yvNYP8pzV7/Jcxb/yHL")
      [Void]$Code.appendLine("WP8gy1j/IMtY/yDLWP8gy1j/IMtY/yDLWP8QZyz/GG09/zrZf/862X//Otl//zrZf/862X//Otl//zrZf/852X7/Mth6/yrWdP8f1G3/G9Nr/xvTa/8b02v/DWs2/x5ySv9P5J3/T+Sd/0/knf9P5J3/T+Sd/0/k")
      [Void]$Code.appendLine("nf9P5J3/T+Sd/0/knf9P5J3/T+Sd/0fjmf844ZD/J96H/wxvQP8nd1f/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/8eaUD/M3tj/5X31/+V99f/lffX/5X3")
      [Void]$Code.appendLine("1/+V99f/lffX/3zxyf9Z2J3/Wdec/1nXnP9Z15z/Wdec/1nXnP9BwnH/F00H/yJbR+vD/O3/x/zu/8f87v/H/O7/x/zu/8f87v9M0Iv/J7M2/yezNv8nszb/J7M2/yezNv8ntDb/Kbg3/xVeHP8AAwNcMXRi92Sm")
      [Void]$Code.appendLine("lf9kppb/ZKaW/2Smlv9epZL/GsJw/xvTa/8b02v/G9Nr/xvTa/8b02v/G9Nr/xvTa/8Najb+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMAZyTPkM66D/DOug/wzroP8M66D/DOug/wzroP8M6J3/AzgkzAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQdvAE890ABTQNIAU0DSAFNA0gBTQNIAU0DSACogsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$RedIcon")
      [Void]$Code.appendLine("`$RedIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgAAHq8AAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAB6vAAAAHgAGKcEAFML/ABTG/wAUxv8AFMb/ABTG/wAUxv8AFMb/ABTG/wAUxv8AFMb/ABTG/wAU")
      [Void]$Code.appendLine("xv8AFMb/ABTC/wAGKcEACWP9ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8ACWP9AA9o/wAfz/8AH8//AB/P/wAfz/8AH8//AB/P/wAfz/8AH8//AB/P/wAf")
      [Void]$Code.appendLine("z/8AH8//AB/P/wAfz/8AH8//AA9o/wAWbP8CLdX/Ai3V/wEs1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAVa/8EH2//DkLd/w5C3f8OQt3/DkHd/wxA3P8JPtz/BDrb/wA3")
      [Void]$Code.appendLine("2/8ANtv/ADbb/wA22/8ANtv/ADbb/wA22/8AG27/Cypz/yFc5f8hXOX/IVzl/yFc5f8hXOX/IVzl/yFc5f8gW+T/GVXj/xBO4v8ERuH/AELg/wBC4P8AQuD/ACFx/xQ2dv8+euz/Pnrs/z567P8+euz/Pnrs/z56")
      [Void]$Code.appendLine("7P8+euz/Pnrs/z567P8+euz/Pnns/zVz6/8laOr/E1vo/wEodf8hQ3r/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/8UL2z/MFB8/5C8+f+QvPn/kLz5/5C8")
      [Void]$Code.appendLine("+f+QvPn/kLz5/3Wp9f9Me93/THvd/0x73f9Me93/THvd/0x63f8sUsb/AAFJ/x41XOvC3f3/xt/9/8bf/f/G3/3/xt/9/8bf/f87XdL/AACp/wAAqv8AAKr/AACq/wAAqv8AAKr/AACr/wAAV/8AAQRcL0l292N8")
      [Void]$Code.appendLine("p/9jfaj/Y32o/2N9qP9bdqf/BhLA/wAAyv8AAMr/AADK/wAAyv8AAMr/AADK/wAAyv8AAGX+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMAAAb/kAAOf/AADn/wAA5/8AAOf/AADn/wAA5/8AAOP/AAA3zAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlvAABP0AAAU9IAAFPSAABT0gAAU9IAAFPSAAAqsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$SilverIcon")
      [Void]$Code.appendLine("`$SilverIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHhcUEa8vKiTSLyok0i8qJNIvKiTSLyok0i8qJNIvKiTSLyok0i8qJNIvKiTSLyok0i8qJNIXFBGvAAAAHiIgHcGcj4H/n5KD/5+Sg/+fkoP/n5KD/5+Sg/+fkoP/n5KD/5+Sg/+fkoP/n5KD/5+S")
      [Void]$Code.appendLine("g/+fkoP/nI+B/yIgHcFQSUP9opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/9QSUP9WFJM/66jl/+uo5f/rqOX/66jl/+uo5f/rqOX/66jl/+uo5f/rqOX/66j")
      [Void]$Code.appendLine("l/+uo5f/rqOX/66jl/+uo5f/WFJM/15ZVP+6sab/urCm/7qwpv+6sKb/urCl/7qwpf+6sKX/urCl/7qwpf+6sKX/urCl/7qwpf+6sKX/urCl/15ZVP9lYVz/ycG4/8nBuP/Jwbj/ycG4/8jAuP/Hv7f/xr61/8W9")
      [Void]$Code.appendLine("tP/FvbT/xb20/8W9tP/FvbT/xb20/8W9tP9kX1v/a2hl/9fRy//X0cv/19HL/9fRy//X0cv/19HL/9fRy//X0cv/1c/J/9PNxv/Sy8T/0crC/9HKwv/RysL/aWZi/3Jwbf/k4Nz/5ODc/+Tg3P/k4Nz/5ODc/+Tg")
      [Void]$Code.appendLine("3P/k4Nz/5ODc/+Tg3P/k4Nz/5ODc/+Lf2v/g3Nf/3tnU/29tav93dnT/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6/9pZmL/fHt6//j39v/49/b/+Pf2//j3")
      [Void]$Code.appendLine("9v/49/b/+Pf2//Px7//Y087/19LN/9fSzf/X0s3/19LN/9fSzf/AuLD/R0A4/1pZWOv9/fz//f38//39/P/9/fz//f38//39/P/Hwbn/mIt8/5mLff+Zi33/mYt9/5mLff+Zi33/nI5//1BJQf8DAwNcc3Fw96Sj")
      [Void]$Code.appendLine("ov+lpKL/paSi/6Wkov+joqD/ppyR/6ugk/+roJP/q6CT/6ugk/+roJP/q6CT/6ugk/9WUEr+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMFtXUvm9tKv/vbSr/720q/+9tKv/vbSr/720q/+7sqj/LSsozAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBwdvQD480ERBP9JEQT/SREE/0kRBP9JEQT/SIiEgsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.Images.Add(`"Yellow`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$YellowIcon)))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.Images.Add(`"Blue`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$BlueIcon)))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.Images.Add(`"Green`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$GreenIcon)))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.Images.Add(`"Red`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$RedIcon)))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitImageList.Images.Add(`"Silver`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$SilverIcon)))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitReturnTreeView = System.Windows.Forms.TreeView")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitReturnTreeView`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView = New-Object -TypeName System.Windows.Forms.TreeView")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Controls.Add(`$DialogMyADOrgUnitReturnTreeView)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.BackColor = `$TextBackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.CausesValidation = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.CheckBoxes = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADOrgUnitForm.Font.FontFamily, `$DialogMyADOrgUnitForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ForeColor = `$TextForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.FullRowSelect = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.HideSelection = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.HotTracking = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ImageList = `$DialogMyADOrgUnitImageList")
      [Void]$Code.appendLine("    `$TempSizeTV = `$DialogMyADOrgUnitReturnTreeView.CreateGraphics().MeasureString(`"I`", `$DialogMyADOrgUnitReturnTreeView.Font)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Indent = `$TempSizeTV.Width * 2")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ItemHeight = `$TempSizeTV.Height")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.LineColor = `$LineColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Name = `"DialogMyADOrgUnitReturnTreeView`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.PathSeparator = `"/`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Scrollable = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ShowLines = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ShowNodeToolTips = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ShowPlusMinus = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.ShowRootLines = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Sorted = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.Text = `"DialogMyADOrgUnitReturnTreeView`"")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitReturnTreeViewBeforeExpand")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitReturnTreeViewBeforeExpand()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          BeforeExpand event for the DialogMyADOrgUnitReturnTreeView Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          BeforeExpand event for the DialogMyADOrgUnitReturnTreeView Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitReturnTreeViewBeforeExpand -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter BeforeExpand Event for ```$DialogMyADOrgUnitReturnTreeView`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitReturnTreeView.BeginUpdate()")
      [Void]$Code.appendLine("        if (`$EventArg.Node.Checked)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$Sender.BeginUpdate()")
      [Void]$Code.appendLine("          `$EventArg.Node.Checked = `$False")
      [Void]$Code.appendLine("          `$EventArg.Node.Nodes.Clear()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("          if (`$Containers)")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$MySearcher = [ADSISearcher]`"(|((&(objectClass=organizationalunit)(objectCategory=organizationalUnit))(&(objectClass=container)(objectCategory=container))(&(objectClass=builtindomain)(objectCategory=builtindomain))))`"")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          else")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$MySearcher = [ADSISearcher]`"(&(objectClass=organizationalunit)(objectCategory=organizationalUnit))`"")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          `$MySearcher.SearchRoot = [ADSI]`"LDAP://`$(`$EventArg.Node.Tag.DN)`"")
      [Void]$Code.appendLine("          `$MySearcher.SearchScope = `"OneLevel`"")
      [Void]$Code.appendLine("          `$MySearcher.Sort = New-Object -TypeName System.DirectoryServices.SortOption(`"ou`", `"Ascending`")")
      [Void]$Code.appendLine("          `$MySearcher.SizeLimit = 0")
      [Void]$Code.appendLine("          [Void]`$MySearcher.PropertiesToLoad.Add(`"ou`")")
      [Void]$Code.appendLine("          [Void]`$MySearcher.PropertiesToLoad.Add(`"canonicalname`")")
      [Void]$Code.appendLine("          [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.appendLine("          ForEach (`$Item in `$MySearcher.FindAll())")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$TempNode = New-Object -TypeName System.Windows.Forms.TreeNode(`$Item.Properties[`"ou`"][0], [System.Windows.Forms.TreeNode[]](@(`"`$*`$`")))")
      [Void]$Code.appendLine("            `$TempNode.Name = `$Item.Properties[`"ou`"][0]")
      [Void]$Code.appendLine("            `$TempNode.Tag = [PSCustomObject]@{`"DN`" = (`$Item.Properties[`"distinguishedname`"][0]); `"CanonicalName`" = (`$Item.Properties[`"canonicalname`"][0])}")
      [Void]$Code.appendLine("            `$TempNode.Checked = `$True")
      [Void]$Code.appendLine("            `$TempNode.ImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("            `$TempNode.SelectedImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("            `$EventArg.Node.Nodes.Add(`$TempNode)")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          `$Sender.EndUpdate()")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitReturnTreeView.EndUpdate()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        `$MySearcher = `$Null")
      [Void]$Code.appendLine("        `$Item = `$Null")
      [Void]$Code.appendLine("        `$TempNode = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit BeforeExpand Event for ```$DialogMyADOrgUnitReturnTreeView`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView.add_BeforeExpand({Start-DialogMyADOrgUnitReturnTreeViewBeforeExpand -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$CurrentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    if (`$SearchRoot -eq `"Forest`")")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainLabel.Visible = `$True")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.Visible = `$True")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$TempHeight = `$DialogMyADOrgUnitReturnDomainLabel.Height")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainLabel.AutoSize = `$False")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainLabel.Size = New-Object -TypeName System.Drawing.Size(([Math]::Ceiling(`$DialogMyADOrgUnitReturnDomainLabel.CreateGraphics().MeasureString(`"`$(`$DialogMyADOrgUnitReturnDomainLabel.Text)`", `$DialogMyADOrgUnitReturnDomainLabel.Font).Width)), `$TempHeight)")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.Size = New-Object -TypeName System.Drawing.Size((`$TempSizeCB.Width * `$Width), `$DialogMyADOrgUnitReturnDomainLabel.Height)")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADOrgUnitReturnGroupBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADOrgUnitReturnGroupBox.Font).Height)))")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADOrgUnitReturnDomainLabel.Right + `$DialogSpacer), `$DialogMyADOrgUnitReturnDomainLabel.Top)")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.Items.AddRange((([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).Domains | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$PSItem.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://`$(`$PSItem.GetDirectoryEntry().distinguishedName)`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.SelectedItem = `$DialogMyADOrgUnitReturnDomainComboBox.Items | Where-Object -FilterScript { `$PSItem.Value -eq `"LDAP://DC=`$(`$CurrentDomain.Name.Split(`".`") -Join `",DC=`")`" }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnTreeView.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADOrgUnitReturnDomainComboBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnTreeView.Size = New-Object -TypeName System.Drawing.Size((`$DialogMyADOrgUnitReturnDomainComboBox.Right - `$DialogMyADOrgUnitReturnTreeView.Left), (`$TempSizeTV.Height * `$Height))")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    else")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainLabel.Visible = `$False")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.Visible = `$False")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      if (`$SearchRoot -eq `"Current`")")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitReturnDomainComboBox.Items.AddRange((`"`" | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$CurrentDomain.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://DC=`$(`$CurrentDomain.Name.Split(`".`") -Join `",DC=`")`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      else")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitReturnDomainComboBox.Items.AddRange(([ADSI]`"LDAP://`$(`$SearchRoot)`" | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$PSItem.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://`$(`$PSItem.DistinguishedName)`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnDomainComboBox.SelectedIndex = 0")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnTreeView.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADOrgUnitReturnGroupBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADOrgUnitReturnGroupBox.Font).Height)))")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnTreeView.Size = New-Object -TypeName System.Drawing.Size((`$TempSizeTV.Width * `$Width), (`$TempSizeTV.Height * `$Height))")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitReturnChildCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitReturnChildCheckBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox.Controls.Add(`$DialogMyADOrgUnitReturnChildCheckBox)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Checked = `$EnableCheckBox")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADOrgUnitForm.Font.FontFamily, `$DialogMyADOrgUnitForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Location = New-Object -TypeName System.Drawing.Point((((`$DialogMyADOrgUnitReturnTreeView.Right - (`$DialogMyADOrgUnitReturnTreeView.Left + `$DialogMyADOrgUnitReturnChildCheckBox.Width)) / 2) + `$DialogSpacer), (`$DialogMyADOrgUnitReturnTreeView.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Name = `"DialogMyADOrgUnitReturnChildCheckBox`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Text = `$CheckBoxText")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.ThreeState = `$False")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox.Visible = `$ShowCheckBox")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    if (`$ShowCheckBox)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnChildCheckBox.Location = New-Object -TypeName System.Drawing.Point((((`$DialogMyADOrgUnitReturnTreeView.Right - (`$DialogMyADOrgUnitReturnTreeView.Left + `$DialogMyADOrgUnitReturnChildCheckBox.Width)) / 2) + `$DialogSpacer), (`$DialogMyADOrgUnitReturnTreeView.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyADOrgUnitReturnTreeView.Right + `$DialogSpacer), (`$DialogMyADOrgUnitReturnChildCheckBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    else")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMyADOrgUnitReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyADOrgUnitReturnTreeView.Right + `$DialogSpacer), (`$DialogMyADOrgUnitReturnTreeView.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitOKButton = System.Windows.Forms.Button")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitOKButton`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Controls.Add(`$DialogMyADOrgUnitOKButton)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Font = `$DialogMyADOrgUnitForm.Font")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADOrgUnitReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Name = `"DialogMyADOrgUnitOKButton`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Text = `"&OK`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.Width = (`$DialogMyADOrgUnitReturnGroupBox.Width - `$DialogSpacer) / 2")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.AcceptButton = `$DialogMyADOrgUnitOKButton")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitOKButtonClick")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitOKButtonClick()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Click event for the DialogMyADOrgUnitOKButton Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Click event for the DialogMyADOrgUnitOKButton Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyADOrgUnitOKButton`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$DialogMyADOrgUnitReturnTreeView.SelectedNode)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.appendLine("          `$DialogMyADOrgUnitForm.Tag = @([PSCustomObject]@{`"Name`" = `$DialogMyADOrgUnitReturnTreeView.SelectedNode.Text; `"DN`" = `$DialogMyADOrgUnitReturnTreeView.SelectedNode.Tag.DN; `"CanonicalName`" = `$DialogMyADOrgUnitReturnTreeView.SelectedNode.Tag.CanonicalName; `"EnableCheckBox`" = `$DialogMyADOrgUnitReturnChildCheckBox.Checked})")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyADOrgUnitOKButton`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton.add_Click({Start-DialogMyADOrgUnitOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMyADOrgUnitCancelButton = System.Windows.Forms.Button")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADOrgUnitCancelButton`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.Controls.Add(`$DialogMyADOrgUnitCancelButton)")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Font = `$DialogMyADOrgUnitForm.Font")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADOrgUnitOKButton.Right + `$DialogSpacer), (`$DialogMyADOrgUnitReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Name = `"DialogMyADOrgUnitCancelButton`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Text = `"&Cancel`"")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.Width = `$DialogMyADOrgUnitOKButton.Width")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.CancelButton = `$DialogMyADOrgUnitCancelButton")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMyADOrgUnitCancelButtonClick")
      [Void]$Code.appendLine("    function Start-DialogMyADOrgUnitCancelButtonClick()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Click event for the DialogMyADOrgUnitCancelButton Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Click event for the DialogMyADOrgUnitCancelButton Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMyADOrgUnitCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyADOrgUnitCancelButton`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.appendLine("        `$DialogMyADOrgUnitForm.Tag = @()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyADOrgUnitCancelButton`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton.add_Click({Start-DialogMyADOrgUnitCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyADOrgUnitForm.Controls[`$DialogMyADOrgUnitForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyADOrgUnitForm.Controls[`$DialogMyADOrgUnitForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$CurrentDomain = `$Null")
      [Void]$Code.appendLine("    `$TempBottom = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    if (`$DialogMyADOrgUnitForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMyADOrgUnitForm.Tag}")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    else")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = `$Null}")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$TempSizeCB = `$Null")
      [Void]$Code.appendLine("    `$TempSizeTV = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitForm = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnGroupBox = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainLabel = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnDomainComboBox = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnTreeView = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitReturnChildCheckBox = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitOKButton = `$Null")
      [Void]$Code.appendLine("    `$DialogMyADOrgUnitCancelButton = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    [System.GC]::Collect()")
      [Void]$Code.appendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("  }")
      [Void]$Code.appendLine("  Catch")
      [Void]$Code.appendLine("  {")
      [Void]$Code.appendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.appendLine("  }")
      [Void]$Code.appendLine("  Write-Verbose -Message `"Exit Function DialogGet-MyADOrgUnit`"")
      [Void]$Code.appendLine("}")
      [Void]$Code.appendLine("#endregion")
      #endregion
      Break
    }
    "Get-MyADObject"
    {
      #region ******** function DialogGet-MyADObject *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogGet-MyADObject")
      [Void]$Code.AppendLine("function DialogGet-MyADObject()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Returns User, Computer, Contact, or Group AD Objects")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Returns User, Computer, Contact, or Group AD Objects")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.AppendLine("    .PARAMETER InputName")
      [Void]$Code.AppendLine("      Text to Display in the Search Input GroupBox")
      [Void]$Code.AppendLine("    .PARAMETER ReturnName")
      [Void]$Code.AppendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.AppendLine("    .PARAMETER SearchRoot")
      [Void]$Code.AppendLine("      Active Directory SearchRoot to Search. Can also be set to `"Forest`" to Allow Selecting of all")
      [Void]$Code.AppendLine("      Domains in the AD Forest or `"Current`" for the Curent Domain the User is Logged in to")
      [Void]$Code.AppendLine("    .PARAMETER SearchScope")
      [Void]$Code.AppendLine("      Search `"SubTree`" to Search all Sub OU's or OneLevel to only Search the Specified OU")
      [Void]$Code.AppendLine("    .PARAMETER SizeLimit")
      [Void]$Code.AppendLine("      Limits the Number of AD Objects Returned")
      [Void]$Code.AppendLine("    .PARAMETER MultiSelect")
      [Void]$Code.AppendLine("      Allow User to Select and Return More than One AD Object")
      [Void]$Code.AppendLine("    .PARAMETER ObjectType ")
      [Void]$Code.AppendLine("      Sets Type of AD Object to Return")
      [Void]$Code.AppendLine("    .PARAMETER ShowEnabled")
      [Void]$Code.AppendLine("      Show Enabled / Disabled Redion Buttons")
      [Void]$Code.AppendLine("    .PARAMETER Disabled")
      [Void]$Code.AppendLine("      Return Disabled User / Computer Objects")
      [Void]$Code.AppendLine("    .PARAMETER ShowType")
      [Void]$Code.AppendLine("      Show Group Type CheckBoxes")
      [Void]$Code.AppendLine("    .PARAMETER Security")
      [Void]$Code.AppendLine("      Check Security CheckBox")
      [Void]$Code.AppendLine("      Even if you do not show the Group Type CheckBoxes you have to pass this paramater to search for and return Security Groups")
      [Void]$Code.AppendLine("    .PARAMETER Distribution")
      [Void]$Code.AppendLine("      Check Distribution CheckBox")
      [Void]$Code.AppendLine("      Even if you do not show the Group Type CheckBoxes you have to pass this paramater to search for and return Distribution Groups")
      [Void]$Code.AppendLine("    .PARAMETER ShowScope")
      [Void]$Code.AppendLine("      Show Group Scope CheckBoxes")
      [Void]$Code.AppendLine("    .PARAMETER Local")
      [Void]$Code.AppendLine("      Check Local CheckBox")
      [Void]$Code.AppendLine("      Even if you do not show the Group Scope CheckBoxes you have to pass this paramater to search for and return Local Groups")
      [Void]$Code.AppendLine("    .PARAMETER Global")
      [Void]$Code.AppendLine("      Check Global CheckBox")
      [Void]$Code.AppendLine("      Even if you do not show the Group Scope CheckBoxes you have to pass this paramater to search for and return Global Groups")
      [Void]$Code.AppendLine("    .PARAMETER Universal")
      [Void]$Code.AppendLine("      Check Universal CheckBox")
      [Void]$Code.AppendLine("      Even if you do not show the Group Scope CheckBoxes you have to pass this paramater to search for and return Universal Groups")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER Height")
      [Void]$Code.AppendLine("      Dialog Height")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.AppendLine("      Control Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      Textbox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      Textbox Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER SearchDomain")
      [Void]$Code.AppendLine("      Default Search Domain")
      [Void]$Code.AppendLine("    .PARAMETER SearchText")
      [Void]$Code.AppendLine("      Default Search Text")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyADObject -FontFamily `"Verdana`" -FontSize 10).Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyADObject -DialogName `"Search AD Users`" -ReturnName `"User Names`" -ObjectType `"User`" -SearchRoot `"Forest`" -ShowEnabled -SizeLimit 10 -GroupForeColor `"Blue`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyADObject -DialogName `"Search AD Groups`" -ReturnName `"Group Names`" -ObjectType `"Group`" -ShowType -Security -ShowScope -Global -Local -MultiSelect -GroupForeColor `"Blue`" -SearchText `"N0G`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((`$List = DialogGet-MyADObject -DialogName `"Search AD Contacts`" -ReturnName `"Contact Names`" -ObjectType `"Contact`" -SearchRoot `"Forest`" -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -TextBackColor `"White`" -TextForeColor `"Black`").Result)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        ForEach (`$Item in `$List.Items)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Write-Host -Object `"Found Item `$Item`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Basic`")]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Select Active Directory {0}`",")
      [Void]$Code.AppendLine("    [String]`$InputName = `"Search Active Directory`",")
      [Void]$Code.AppendLine("    [String]`$ReturnName = `"{0} &List`",")
      [Void]$Code.AppendLine("    [String]`$SearchRoot = `"Current`",")
      [Void]$Code.AppendLine("    [ValidateSet(`"OneLevel`", `"SubTree`")]")
      [Void]$Code.AppendLine("    [System.DirectoryServices.SearchScope]`$SearchScope = `"SubTree`",")
      [Void]$Code.AppendLine("    [ValidateRange(1, 100)]")
      [Void]$Code.AppendLine("    [Int]`$SizeLimit = 50,")
      [Void]$Code.AppendLine("    [Switch]`$MultiSelect,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [ValidateSet(`"User`", `"Computer`", `"Group`", `"Contact`")]")
      [Void]$Code.AppendLine("    [String]`$ObjectType, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"CompUser`")]")
      [Void]$Code.AppendLine("    [Switch]`$ShowEnabled, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"CompUser`")]")
      [Void]$Code.AppendLine("    [Switch]`$Disabled, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$ShowType, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$Security, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$Distribution, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$ShowScope, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$Local, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$Global, ")
      [Void]$Code.AppendLine("    [Parameter(ParameterSetName=`"Group`")]")
      [Void]$Code.AppendLine("    [Switch]`$Universal, ")
      [Void]$Code.AppendLine("    [int]`$Width = 25,")
      [Void]$Code.AppendLine("    [int]`$Height = 12,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
      [Void]$Code.AppendLine("    [String]`$SearchDomain = `$Null,")
      [Void]$Code.AppendLine("    [String]`$SearchText = `$Null")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogGet-MyADObject`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Name = `"DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Tag =  @()")
      [Void]$Code.AppendLine("    if (`$DialogName.Contains(`"{0}`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectForm.Text = (`$DialogName -f `$ObjectType)")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          Start-DialogMyADObjectCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.add_KeyDown({Start-DialogMyADObjectFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectFormShown")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogMyADObjectForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogMyADObjectForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (-not [String]::IsNullOrEmpty(`$SearchDomain))")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$TempItem = `$DialogMyADObjectInputDomainComboBox.Items | Where-Object -FilterScript { `$PSItem.Value -eq `$SearchDomain }")
      [Void]$Code.AppendLine("          if (-not [String]::IsNullOrEmpty(`$TempItem))")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$DialogMyADObjectInputDomainComboBox.SelectedItem = `$TempItem")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (-not [String]::IsNullOrEmpty(`$SearchText))")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputSearchTextBox.Text = `$SearchText")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputSearchTextBox.SelectionStart = 0")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputSearchTextBox.SelectionLength = 0")
      [Void]$Code.AppendLine("          `$DialogMyADObjectForm.Refresh()")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputButton.PerformClick()")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$TempItem = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyADObjectForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.add_Shown({Start-DialogMyADObjectFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADObjectForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADObjectInputGroupBox.CreateGraphics().MeasureString(`$DialogMyADObjectInputGroupBox.Text, `$DialogMyADObjectInputGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Controls.Add(`$DialogMyADObjectInputGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Name = `"DialogMyADObjectInputGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Text = `$InputName")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Width = 300")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADObjectInputGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputDomainLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputDomainLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputDomainLabel)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.Name = `"DialogMyADObjectInputDomainLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.Text = `"&Domain:`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$TempHeight = `$DialogMyADObjectInputDomainLabel.Height")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.AutoSize = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel.Size = New-Object -TypeName System.Drawing.Size(([Math]::Ceiling(`$DialogMyADObjectInputDomainLabel.CreateGraphics().MeasureString(`"`$(`$DialogMyADObjectInputDomainLabel.Text)`", `$DialogMyADObjectInputDomainLabel.Font).Width)), `$TempHeight)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputDomainComboBox = System.Windows.Forms.ComboBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputDomainComboBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox = New-Object -TypeName System.Windows.Forms.ComboBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputDomainComboBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.DisplayMember = `"Text`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.ItemHeight = ([System.Math]::Floor(`$DialogMyADObjectInputDomainComboBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADObjectInputDomainComboBox.Font).Height))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.MaxDropDownItems = 8")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.Name = `"DialogMyADObjectInputDomainComboBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.Sorted = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.Text = `"DialogMyADObjectInputDomainComboBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.ValueMember = `"Value`"")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputSearchLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputSearchLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputSearchLabel)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.Name = `"DialogMyADObjectInputSearchLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.Size = `$DialogMyADObjectInputDomainLabel.Size")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.Text = `"Se&arch:`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomRight")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputSearchTextBox = System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputSearchTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox = New-Object -TypeName System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputSearchTextBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.AcceptsReturn = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.HideSelection = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.MaxLength = 100")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.MultiLine = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.Name = `"DialogMyADObjectInputDomainTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.Text = `"`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectInputSearchTextBoxKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectInputSearchTextBoxKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectInputSearchTextBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectInputSearchTextBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectInputSearchTextBoxKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyADObjectInputSearchTextBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        If (`$EventArg.KeyValue -eq 13)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$EventArg.SuppressKeyPress = `$True")
      [Void]$Code.AppendLine("          Start-DialogMyADObjectInputButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyADObjectInputSearchTextBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.add_KeyDown({Start-DialogMyADObjectInputSearchTextBoxKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$CurrentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.BeginUpdate()")
      [Void]$Code.AppendLine("    if (`$SearchRoot -eq `"Forest`")")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainLabel.Visible = `$True")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Visible = `$True")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADObjectInputGroupBox.CreateGraphics().MeasureString(`$DialogMyADObjectInputGroupBox.Text, `$DialogMyADObjectInputGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADObjectInputDomainLabel.Right + `$DialogSpacer), `$DialogMyADObjectInputDomainLabel.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Width = `$DialogMyADObjectInputDomainComboBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADObjectInputDomainComboBox.Font).Width * `$Width")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectInputDomainLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchTextBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADObjectInputSearchLabel.Right + `$DialogSpacer), `$DialogMyADObjectInputSearchLabel.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchTextBox.Size = New-Object -TypeName System.Drawing.Size(`$DialogMyADObjectInputDomainComboBox.Width, `$DialogMyADObjectInputSearchLabel.Height)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Items.AddRange(([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest() | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`"Search All Domains`"}}, @{`"Name`"=`"Value`"; `"Expression`"={`"GC://`$(`$PSItem.Name)`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Items.AddRange((([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).Domains | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$PSItem.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://`$(`$PSItem.GetDirectoryEntry().distinguishedName)`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.SelectedItem = `$DialogMyADObjectInputDomainComboBox.Items | Where-Object -FilterScript { `$PSItem.Value -eq `"LDAP://DC=`$(`$CurrentDomain.Name.Split(`".`") -Join `",DC=`")`" }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainLabel.Visible = `$False")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.Visible = `$False")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADObjectInputGroupBox.CreateGraphics().MeasureString(`$DialogMyADObjectInputGroupBox.Text, `$DialogMyADObjectInputGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchTextBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADObjectInputSearchLabel.Right + `$DialogSpacer), `$DialogMyADObjectInputSearchLabel.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputSearchTextBox.Size = New-Object -TypeName System.Drawing.Size((`$DialogMyADObjectInputSearchTextBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADObjectInputSearchTextBox.Font).Width * `$Width), `$DialogMyADObjectInputSearchLabel.Height)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if (`$SearchRoot -eq `"Current`")")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputDomainComboBox.Items.AddRange((`"`" | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$CurrentDomain.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://DC=`$(`$CurrentDomain.Name.Split(`".`") -Join `",DC=`")`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputDomainComboBox.Items.AddRange(([ADSI]`"LDAP://`$(`$SearchRoot)`" | Select-Object -Property @{`"Name`"=`"Text`"; `"Expression`"={`$PSItem.Name}}, @{`"Name`"=`"Value`"; `"Expression`"={`"LDAP://`$(`$PSItem.DistinguishedName)`"}}, @{`"Name`"=`"Tag`"; `"Expression`"={ `$Null }}))")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `$DialogMyADObjectInputDomainComboBox.SelectedIndex = 0")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox.EndUpdate()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputEnabledRadioButton = System.Windows.Forms.RadioButton")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputEnabledRadioButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton = New-Object -TypeName System.Windows.Forms.RadioButton")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputEnabledRadioButton)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.CheckAlign = [System.Drawing.ContentAlignment]::MiddleLeft")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Name = `"DialogMyADObjectInputEnabledRadioButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Text = `"Enabled`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton.Visible = `$ShowEnabled")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputDisabledRadioButton = System.Windows.Forms.RadioButton")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputDisabledRadioButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton = New-Object -TypeName System.Windows.Forms.RadioButton")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputDisabledRadioButton)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Name = `"DialogMyADObjectInputDisabledRadioButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Text = `"Disabled`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton.Visible = `$ShowEnabled")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputSecurityCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputSecurityCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputSecurityCheckBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.CheckState = [System.Windows.Forms.CheckState]::Unchecked")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Name = `"DialogMyADObjectInputSecurityCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Text = `"S&ecurity`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.ThreeState = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox.Visible = `$ShowType")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputDistributionCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputDistributionCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputDistributionCheckBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.CheckState = [System.Windows.Forms.CheckState]::Unchecked")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Name = `"DialogMyADObjectInputDistributionCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Text = `"D&istribution`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.ThreeState = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox.Visible = `$ShowType")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputUniversalCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputUniversalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputUniversalCheckBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.CheckState = [System.Windows.Forms.CheckState]::Unchecked")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Name = `"DialogMyADObjectInputUniversalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Text = `"&Universal`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.ThreeState = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox.Visible = `$ShowScope")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputGlobalCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputGlobalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputGlobalCheckBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.CheckState = [System.Windows.Forms.CheckState]::Unchecked")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Name = `"DialogMyADObjectInputGlobalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Text = `"&Global`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.ThreeState = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox.Visible = `$ShowScope")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputLocalCheckBox = System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputLocalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputLocalCheckBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Checked = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.CheckState = [System.Windows.Forms.CheckState]::Unchecked")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Name = `"DialogMyADObjectInputLocalCheckBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Text = `"&Local`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.ThreeState = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox.Visible = `$ShowScope")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectInputButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectInputButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.Controls.Add(`$DialogMyADObjectInputButton)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.Name = `"DialogMyADObjectInputButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.Text = `"&Search`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.Width = `$DialogMyADObjectInputSearchTextBox.Right - `$DialogMyADObjectInputButton.Left")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectInputButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectInputButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectInputButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectInputButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectInputButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyADObjectInputButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputSearchTextBox.Text = `$DialogMyADObjectInputSearchTextBox.Text.Trim(@(' ', ','))")
      [Void]$Code.AppendLine("        if (`$DialogMyADObjectInputSearchTextBox.Text.Length)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectReturnListBox.BeginUpdate()")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputButton.Enabled = `$False")
      [Void]$Code.AppendLine("          `$TempSearchText = `"`$(`$DialogMyADObjectInputSearchTextBox.Text.Split(@('/', '\', '[', ']', ':', ';', '|', '=', '+', '*', '?', '<', '>', '```"', '@'), [System.StringSplitOptions]::RemoveEmptyEntries) -join '')`"")
      [Void]$Code.AppendLine("          If (`$TempSearchText.Length -eq `$DialogMyADObjectInputSearchTextBox.Text.Length)")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$DialogMyADObjectReturnListBox.Items.Clear()")
      [Void]$Code.AppendLine("            `$MySearcher = New-Object -TypeName DirectoryServices.DirectorySearcher([ADSI]`"`$(`$SelectAD_DomainComboBox.SelectedItem.Value)`")")
      [Void]$Code.AppendLine("            `$MySearcher.SearchScope = `$SearchScope")
      [Void]$Code.AppendLine("            `$MySearcher.SizeLimit = `$SizeLimit")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("            Switch (`$ObjectType)")
      [Void]$Code.AppendLine("            {")
      [Void]$Code.AppendLine("              `"Computer`"")
      [Void]$Code.AppendLine("              {")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"name`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.AppendLine("                `$MySearcher.Sort = New-Object -TypeName System.DirectoryServices.SortOption(`"Name`", `"Ascending`")")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputEnabledRadioButton.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$EnabledMod = `"(!(userAccountControl:1.2.840.113556.1.4.803:=2))`"")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                else")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$EnabledMod = `"(userAccountControl:1.2.840.113556.1.4.803:=2)`"")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                `$MySearcher.Filter = `"(&(objectClass=user)(objectCategory=computer)(samaccounttype=805306369)`$EnabledMod(name=`$(`$TempSearchText)*))`"")
      [Void]$Code.AppendLine("                ForEach (`$Item in `$MySearcher.FindAll())")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$DialogMyADObjectReturnListBox.Items.Add(([PSCustomObject]@{`"Name`" = `"`$(`$Item.Properties[`"name`"][0])`"; `"DN`" = `"`$(`$Item.Properties[`"distinguishedname`"][0])`"; `"Tag`" = `"`"}))")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                Break")
      [Void]$Code.AppendLine("              }")
      [Void]$Code.AppendLine("              `"User`"")
      [Void]$Code.AppendLine("              {")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"displayname`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"samaccountname`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.AppendLine("                `$MySearcher.Sort = New-Object -TypeName System.DirectoryServices.SortOption(`"givenname`", `"Ascending`")")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                Switch (`$TempSearchText)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  { `$PSItem.Contains(`",`") }")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$TempNames = `$TempSearchText.Split(@(`",`", `" `"), [System.StringSplitOptions]::RemoveEmptyEntries)")
      [Void]$Code.AppendLine("                    `$NameMod = `"(givenname=`$(`$TempNames[1])*)(sn=`$(`$TempNames[0])*)`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                  { `$PSItem.Contains(`" `") }")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$TempNames = `$TempSearchText.Split(@(`" `"), [System.StringSplitOptions]::RemoveEmptyEntries)")
      [Void]$Code.AppendLine("                    `$NameMod = `"(givenname=`$(`$TempNames[0])*)(sn=`$(`$TempNames[1])*)`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                  Default")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$NameMod = `"(|(givenname=`$(`$TempSearchText)*)(sn=`$(`$TempSearchText)*)(samaccountname=`$(`$TempSearchText)*))`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputEnabledRadioButton.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$EnabledMod = `"(!(userAccountControl:1.2.840.113556.1.4.803:=2))`"")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                else")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$EnabledMod = `"(userAccountControl:1.2.840.113556.1.4.803:=2)`"")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                `$MySearcher.Filter = `"(&(objectClass=user)(objectCategory=person)(samaccounttype=805306368)`$EnabledMod`$NameMod)`"")
      [Void]$Code.AppendLine("                ForEach (`$Item in `$MySearcher.FindAll())")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$DialogMyADObjectReturnListBox.Items.Add(([PSCustomObject]@{`"Name`" = `"`$(`$Item.Properties[`"displayname`"][0]) - `$(`$Item.Properties[`"samaccountname`"][0])`"; `"DN`" = `"`$(`$Item.Properties[`"distinguishedname`"][0])`"; `"Tag`" = `"`"}))")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                Break")
      [Void]$Code.AppendLine("              }")
      [Void]$Code.AppendLine("              `"Group`"")
      [Void]$Code.AppendLine("              {")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"name`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.AppendLine("                `$MySearcher.Sort = New-Object -TypeName System.DirectoryServices.SortOption(`"name`", `"Ascending`")")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                `$TypeMod = `"(samaccounttype=0)`"")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputSecurityCheckBox.Checked -or `$DialogMyADObjectInputDistributionCheckBox.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  if (`$DialogMyADObjectInputSecurityCheckBox.Checked)")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$SecurityMod = `"(&(groupType:1.2.840.113556.1.4.803:=-2147483648)(|(samaccounttype=268435456)(samaccounttype=536870912)))`"")
      [Void]$Code.AppendLine("                    `$DistributionMod = `"`"")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                  if (`$DialogMyADObjectInputDistributionCheckBox.Checked)")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$DistributionMod = `"(|(samaccounttype=268435457)(samaccounttype=536870913))`"")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                  `$TypeMod = `"(|`$SecurityMod`$DistributionMod)`"")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                `$ScopeValue = 0")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputUniversalCheckBox.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$ScopeValue += 8")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputGlobalCheckBox.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$ScopeValue += 2")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                if (`$DialogMyADObjectInputLocalCheckBox.Checked)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$ScopeValue += 4")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                `$ScopeMod = `"(groupType:1.2.840.113556.1.4.804:=`$ScopeValue)`"")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                `$MySearcher.Filter = `"(&(objectClass=group)(objectCategory=group)`$TypeMod`$ScopeMod(|(name=`$(`$TempSearchText)*)(cn=`$(`$TempSearchText)*)))`"")
      [Void]$Code.AppendLine("                ForEach (`$Item in `$MySearcher.FindAll())")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$DialogMyADObjectReturnListBox.Items.Add(([PSCustomObject]@{`"Name`" = `"`$(`$Item.Properties[`"name`"][0])`"; `"DN`" = `"`$(`$Item.Properties[`"distinguishedname`"][0])`"; `"Tag`" = `"`"}))")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                Break")
      [Void]$Code.AppendLine("              }")
      [Void]$Code.AppendLine("              `"Contact`"")
      [Void]$Code.AppendLine("              {")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"displayname`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"mail`")")
      [Void]$Code.AppendLine("                [Void]`$MySearcher.PropertiesToLoad.Add(`"distinguishedname`")")
      [Void]$Code.AppendLine("                `$MySearcher.Sort = New-Object -TypeName System.DirectoryServices.SortOption(`"givenname`", `"Ascending`")")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                Switch (`$TempSearchText)")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  { `$PSItem.Contains(`",`") }")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$TempNames = `$TempSearchText.Split(@(`",`", `" `"), [System.StringSplitOptions]::RemoveEmptyEntries)")
      [Void]$Code.AppendLine("                    `$NameMod = `"(givenname=`$(`$TempNames[1])*)(sn=`$(`$TempNames[0])*)`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                  { `$PSItem.Contains(`" `") }")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$TempNames = `$TempSearchText.Split(@(`" `"), [System.StringSplitOptions]::RemoveEmptyEntries)")
      [Void]$Code.AppendLine("                    `$NameMod = `"(givenname=`$(`$TempNames[0])*)(sn=`$(`$TempNames[1])*)`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                  Default")
      [Void]$Code.AppendLine("                  {")
      [Void]$Code.AppendLine("                    `$NameMod = `"(|(givenname=`$(`$TempSearchText)*)(sn=`$(`$TempSearchText)*))`"")
      [Void]$Code.AppendLine("                    break")
      [Void]$Code.AppendLine("                  }")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("                `$MySearcher.Filter = `"(&(objectClass=contact)(objectCategory=person)`$NameMod)`"")
      [Void]$Code.AppendLine("                ForEach (`$Item in `$MySearcher.FindAll())")
      [Void]$Code.AppendLine("                {")
      [Void]$Code.AppendLine("                  `$DialogMyADObjectReturnListBox.Items.Add(([PSCustomObject]@{`"Name`" = `"`$(`$Item.Properties[`"displayname`"][0]) - `$(`$Item.Properties[`"mail`"][0])`"; `"DN`" = `"`$(`$Item.Properties[`"distinguishedname`"][0])`"; `"Tag`" = `"`"}))")
      [Void]$Code.AppendLine("                }")
      [Void]$Code.AppendLine("                Break")
      [Void]$Code.AppendLine("              }")
      [Void]$Code.AppendLine("            }")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          `$DialogMyADObjectReturnListBox.EndUpdate()")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputButton.Enabled = `$True")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$TempSearchText = `$Null")
      [Void]$Code.AppendLine("        `$MySearcher = `$Null")
      [Void]$Code.AppendLine("        `$EnabledMod = `$Null")
      [Void]$Code.AppendLine("        `$TempNames = `$Null")
      [Void]$Code.AppendLine("        `$NameMod = `$Null")
      [Void]$Code.AppendLine("        `$TypeMod = `$Null")
      [Void]$Code.AppendLine("        `$SecurityMod = `$Null")
      [Void]$Code.AppendLine("        `$DistributionMod = `$Null")
      [Void]$Code.AppendLine("        `$ScopeValue = `$Null")
      [Void]$Code.AppendLine("        `$ScopeMod = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyADObjectInputButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton.add_Click({Start-DialogMyADObjectInputButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    Switch (`$ObjectType)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `"Contact`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectInputSearchLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        Break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Group`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$TempBottom = `$DialogMyADObjectInputSearchTextBox.Bottom")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputSecurityCheckBox.Checked = `$Security")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputDistributionCheckBox.Checked = `$Distribution")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputUniversalCheckBox.Checked = `$Universal")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputGlobalCheckBox.Checked = `$Global")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputLocalCheckBox.Checked = `$Local")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (`$ShowType)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$TempSpacer = [Math]::Ceiling((`$DialogMyADObjectInputSearchTextBox.Right - (`$DialogSpacer + (`$DialogMyADObjectInputDistributionCheckBox.Width * 2))) / 3)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputSecurityCheckBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$TempSpacer), (`$TempBottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputDistributionCheckBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$DialogMyADObjectInputDistributionCheckBox.Width + (`$TempSpacer * 2)), `$DialogMyADObjectInputSecurityCheckBox.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$TempBottom = `$DialogMyADObjectInputSecurityCheckBox.Bottom")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (`$ShowScope)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$TempSpacer = [Math]::Ceiling((`$DialogMyADObjectInputSearchTextBox.Right - (`$DialogSpacer + (`$DialogMyADObjectInputUniversalCheckBox.Width * 3))) / 4)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputUniversalCheckBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$TempSpacer), (`$TempBottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputGlobalCheckBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$DialogMyADObjectInputUniversalCheckBox.Width + (`$TempSpacer * 2)), `$DialogMyADObjectInputUniversalCheckBox.Top)")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputLocalCheckBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + (`$DialogMyADObjectInputUniversalCheckBox.Width * 2) + (`$TempSpacer * 3)), `$DialogMyADObjectInputUniversalCheckBox.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$TempBottom = `$DialogMyADObjectInputUniversalCheckBox.Bottom")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        `$DialogMyADObjectInputButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$TempBottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        Break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Default")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$Disabled)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputDisabledRadioButton.Checked = `$True")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputEnabledRadioButton.Checked = `$True")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (`$ShowEnabled)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$TempSpacer = [Math]::Ceiling((`$DialogMyADObjectInputSearchTextBox.Right - (`$DialogSpacer + (`$DialogMyADObjectInputDisabledRadioButton.Width * 2))) / 3)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputEnabledRadioButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$TempSpacer), (`$DialogMyADObjectInputSearchTextBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputDisabledRadioButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogSpacer + `$DialogMyADObjectInputDisabledRadioButton.Width + (`$TempSpacer * 2)), `$DialogMyADObjectInputEnabledRadioButton.Top)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectInputEnabledRadioButton.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectInputButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectInputSearchLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        Break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyADObjectInputGroupBox.Controls[`$DialogMyADObjectInputGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyADObjectInputGroupBox.Controls[`$DialogMyADObjectInputGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.AppendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADObjectReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyADObjectReturnGroupBox.Text, `$DialogMyADObjectReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Controls.Add(`$DialogMyADObjectReturnGroupBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectInputGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Name = `"DialogMyADObjectReturnGroupBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Tag = `$Null")
      [Void]$Code.AppendLine("    if (`$ReturnName.Contains(`"{0}`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectReturnGroupBox.Text = (`$ReturnName -f `$ObjectType)")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectReturnGroupBox.Text = `$ReturnName")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Width = `$DialogMyADObjectInputGroupBox.Width")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyADObjectReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectReturnListBox = System.Windows.Forms.ListBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox = New-Object -TypeName System.Windows.Forms.ListBox")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.Controls.Add(`$DialogMyADObjectReturnListBox)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.AutoSize = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.DisplayMember = `"Name`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.ItemHeight = ([System.Math]::Floor(`$DialogMyADObjectReturnListBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADObjectReturnListBox.Font).Height))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.IntegralHeight = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMyADObjectReturnGroupBox.CreateGraphics().MeasureString(`$DialogMyADObjectReturnGroupBox.Text, `$DialogMyADObjectReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Name = `"DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("    if (`$MultiSelect)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyADObjectReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyADObjectReturnListBox.CreateGraphics().MeasureString(`"I`", `$DialogMyADObjectReturnListBox.Font)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Size = New-Object -TypeName System.Drawing.Size((`$DialogMyADObjectReturnGroupBox.ClientSize.Width - (`$DialogMyADObjectReturnListBox.Left + `$DialogSpacer)), (`$TempSize.Height * `$Height))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Sorted = `$False")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.Text = `"DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.ValueMember = `"DN`"")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectReturnListBoxKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectReturnListBoxKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectReturnListBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogMyADObjectReturnListBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 13)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$EventArg.SuppressKeyPress = `$True")
      [Void]$Code.AppendLine("          Start-DialogMyADObjectOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.add_KeyDown({Start-DialogMyADObjectReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectReturnListBoxMouseDoubleClick")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectReturnListBoxMouseDoubleClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          MouseDoubleClick event for the DialogMyADObjectReturnListBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          MouseDoubleClick event for the DialogMyADObjectReturnListBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter MouseDoubleClick Event for ```$DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Start-DialogMyADObjectOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit MouseDoubleClick Event for ```$DialogMyADObjectReturnListBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox.add_MouseDoubleClick({Start-DialogMyADObjectReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyADObjectReturnGroupBox.Controls[`$DialogMyADObjectReturnGroupBox.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyADObjectReturnGroupBox.Controls[`$DialogMyADObjectReturnGroupBox.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Controls.Add(`$DialogMyADObjectOKButton)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyADObjectReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Name = `"DialogMyADObjectOKButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.Width = (`$DialogMyADObjectReturnGroupBox.Width - `$DialogSpacer) / 2")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.AcceptButton = `$DialogMyADObjectOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectOKButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectOKButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectOKButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectOKButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyADObjectOKButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$DialogMyADObjectReturnListBox.SelectedIndex -gt -1)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyADObjectForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("          `$DialogMyADObjectForm.Tag = @(`$DialogMyADObjectReturnListBox.SelectedItems)")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyADObjectOKButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton.add_Click({Start-DialogMyADObjectOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyADObjectCancelButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyADObjectCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.Controls.Add(`$DialogMyADObjectCancelButton)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Font = New-Object -TypeName System.Drawing.Font(`$DialogMyADObjectForm.Font.FontFamily, `$DialogMyADObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyADObjectOKButton.Right + `$DialogSpacer), (`$DialogMyADObjectReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Name = `"DialogMyADObjectCancelButton`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Text = `"&Cancel`"")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.Width = `$DialogMyADObjectOKButton.Width")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.CancelButton = `$DialogMyADObjectCancelButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyADObjectCancelButtonClick")
      [Void]$Code.AppendLine("    function Start-DialogMyADObjectCancelButtonClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectCancelButton Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Click event for the DialogMyADObjectCancelButton Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyADObjectCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMyADObjectCancelButton`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyADObjectForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("        `$DialogMyADObjectForm.Tag = @()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMyADObjectCancelButton`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton.add_Click({Start-DialogMyADObjectCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMyADObjectForm.Controls[`$DialogMyADObjectForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMyADObjectForm.Controls[`$DialogMyADObjectForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox.Select()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempItem = `$Null")
      [Void]$Code.AppendLine("    `$CurrentDomain = `$Null")
      [Void]$Code.AppendLine("    `$TempSpacer = `$Null")
      [Void]$Code.AppendLine("    `$TempBottom = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$DialogMyADObjectForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMyADObjectForm.Tag; `"Searchroot`" = `$DialogMyADObjectInputDomainComboBox.SelectedItem.Value;}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = `$Null; `"Searchroot`" = `$Null;}")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDomainComboBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSearchTextBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputEnabledRadioButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDisabledRadioButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputSecurityCheckBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputDistributionCheckBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputUniversalCheckBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputGlobalCheckBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputLocalCheckBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectInputButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnGroupBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectReturnListBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectOKButton = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyADObjectCancelButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogGet-MyADObject`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Select-MySCCMObject"
    {
      #region ********* function DialogSelect-MySCCMObject *********
      [Void]$Code.AppendLine("")
      [Void]$Code.appendLine("#region function DialogSelect-MySCCMObject")
      [Void]$Code.appendLine("function DialogSelect-MySCCMObject()")
      [Void]$Code.appendLine("{")
      [Void]$Code.appendLine("  <#")
      [Void]$Code.appendLine("    .SYNOPSIS")
      [Void]$Code.appendLine("    .DESCRIPTION")
      [Void]$Code.appendLine("    .PARAMETER DialogName")
      [Void]$Code.appendLine("      Name to Display in the Dialog Title Bar")
      [Void]$Code.appendLine("    .PARAMETER ReturnName")
      [Void]$Code.appendLine("      Text to Display in the Return Data GroupBox")
      [Void]$Code.appendLine("    .PARAMETER FolderName")
      [Void]$Code.appendLine("      Name of Root Folder")
      [Void]$Code.appendLine("    .PARAMETER FolderID")
      [Void]$Code.appendLine("      ID of Root Folder")
      [Void]$Code.appendLine("    .PARAMETER ObjectType")
      [Void]$Code.appendLine("      Type of SCCM Objects")
      [Void]$Code.appendLine("    .PARAMETER MultiSelect")
      [Void]$Code.appendLine("      Allow User to Select and Return More than One Item")
      [Void]$Code.appendLine("    .PARAMETER FolderWidth")
      [Void]$Code.appendLine("      Dialog FolderWidth")
      [Void]$Code.appendLine("    .PARAMETER ObjectWidth")
      [Void]$Code.appendLine("      Dialog ObjectWidth")
      [Void]$Code.appendLine("    .PARAMETER Height")
      [Void]$Code.appendLine("      Dialog Height")
      [Void]$Code.appendLine("    .PARAMETER FontFamily")
      [Void]$Code.appendLine("      Dialog Font Family")
      [Void]$Code.appendLine("    .PARAMETER FontSize")
      [Void]$Code.appendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.appendLine("    .PARAMETER Owner")
      [Void]$Code.appendLine("      Parent Calling Form")
      [Void]$Code.appendLine("    .PARAMETER ImageIndex")
      [Void]$Code.appendLine("      Folder Image")
      [Void]$Code.appendLine("    .PARAMETER BackColor")
      [Void]$Code.appendLine("      Dialog Back Color")
      [Void]$Code.appendLine("    .PARAMETER ForeColor")
      [Void]$Code.appendLine("      Dialog Fore Color")
      [Void]$Code.appendLine("    .PARAMETER TextBackColor")
      [Void]$Code.appendLine("      TextBox back Color")
      [Void]$Code.appendLine("    .PARAMETER TextForeColor")
      [Void]$Code.appendLine("      TextBox Fore Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.appendLine("      Button Back Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.appendLine("      Button Fore Color")
      [Void]$Code.appendLine("    .EXAMPLE")
      [Void]$Code.appendLine("      ForEach (`$ObjectType in @(`"Package`", `"Application`", `"User`", `"Device`", `"StateMigration`", `"MeteringRule`", `"ConfigurationItem`", `"Driver`", `"ConfigurationBaseline`", `"DriverPackage`", `"Image`", `"OperatingSystem`", `"BootImage`", `"TaskSequence`", `"VHD`", `"SoftwareUpdate`", `"Query`"))")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if ((`$List = DialogSelect-MySCCMObject -ObjectType `$ObjectType).Result)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          ForEach (`$Item in `$List.Items)")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$Item")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.appendLine("    .LINK")
      [Void]$Code.appendLine("  #>")
      [Void]$Code.appendLine("  [CmdletBinding(DefaultParameterSetName=`"FolderName`")]")
      [Void]$Code.appendLine("  param(")
      [Void]$Code.appendLine("    [String]`$DialogName = `"Select SCCM {0}`",")
      [Void]$Code.appendLine("    [String]`$ReturnName = `"SCCM {0}s`",")
      [Void]$Code.appendLine("    [String]`$SCCMServer, ")
      [Void]$Code.appendLine("    [String]`$SCCMSite,")
      [Void]$Code.appendLine("    [parameter(ParameterSetName=`"FolderName`")]")
      [Void]$Code.appendLine("    [String]`$FolderName = `"Root`", ")
      [Void]$Code.appendLine("    [parameter(ParameterSetName=`"FolderID`")]")
      [Void]$Code.appendLine("    [Int]`$FolderID = 0, ")
      [Void]$Code.appendLine("    [ValidateSet(`"Package`", `"Application`", `"User`", `"Device`", `"StateMigration`", `"MeteringRule`", `"ConfigurationItem`", `"ConfigurationBaseline`", `"Driver`", `"DriverPackage`", `"Image`", `"OperatingSystem`", `"BootImage`", `"TaskSequence`", `"VHD`", `"SoftwareUpdate`", `"Query`")]")
      [Void]$Code.appendLine("    [String]`$ObjectType = `"Application`",")
      [Void]$Code.appendLine("    [Switch]`$MultiSelect,")
      [Void]$Code.appendLine("    [int]`$FolderWidth = 30,")
      [Void]$Code.appendLine("    [int]`$ObjectWidth = 40,")
      [Void]$Code.appendLine("    [int]`$Height = 15,")
      [Void]$Code.appendLine("    [ValidateRange(0, 4)]")
      [Void]$Code.appendLine("    [Int]`$ImageIndex = 0,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
      [Void]$Code.appendLine("    [System.Drawing.Color]`$LineColor = $($CGenConfig.ToolName)Color.TextForeColor")
      [Void]$Code.appendLine("  )")
      [Void]$Code.appendLine("  Write-Verbose -Message `"Enter Function DialogSelect-MySCCMObject`"")
      [Void]$Code.appendLine("  Try")
      [Void]$Code.appendLine("  {")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectFormComponents = New-Object -TypeName System.ComponentModel.Container")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> Default Configuation <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("    `$WMIParams = @{`"ComputerName`" = `$SCCMServer; `"NameSpace`" = `"Root\SMS\Site_`$SCCMSite`"}")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogConfig = @{`"QueryWhereMod`" = `$Null}")
      [Void]$Code.appendLine("    Switch (`$ObjectType)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `"Package`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"Application`" ")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Application`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_ApplicationLatest`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"ModelName`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_ApplicationLatest`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"LocalizedDisplayName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"User`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"User Collection`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_Collection`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"CollectionID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_Collection_User`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        `$DialogConfig.QueryWhereMod = `"SMS_Collection.CollectionType = 1 and`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"Device`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Device Collection`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_Collection`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"CollectionID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_Collection_Device`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        `$DialogConfig.QueryWhereMod = `"SMS_Collection.CollectionType = 2 and`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"StateMigration`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"State Migration`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_StateMigration`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"MigrationID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_StateMigration`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"RestoreName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"MeteringRule`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Software Metering Rule`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_MeteredProductRule`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"SecurityKey`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_MeteredProductRule`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"ProductName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"ConfigurationItem`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Configuration Item`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_ConfigurationItemLatest`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"ModelName`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_ConfigurationItemLatest`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"LocalizedDisplayName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"ConfigurationBaseline`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Configuration Baseline`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_ConfigurationBaselineInfo`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"ModelName`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_ConfigurationBaselineInfo`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"LocalizedDisplayName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"Driver`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Driver`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_Driver`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"ModelName`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_Driver`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"LocalizedDisplayName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"DriverPackage`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Driver Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_DriverPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_DriverPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"Image`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Operating System Image`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_ImagePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_ImagePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"OperatingSystem`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Operating System Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_OperatingSystemInstallPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_OperatingSystemInstallPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"BootImage`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"boot Image`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_BootImagePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_BootImagePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"TaskSequence`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Task Sequence`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_TaskSequencePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_TaskSequencePackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"VHD`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"VHD Package`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_VhdPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"PackageID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_VhdPackage`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"SoftwareUpdate`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Software Update`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_SoftwareUpdate`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"ModelName`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_SoftwareUpdate`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"LocalizedDisplayName`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"Query`"")
      [Void]$Code.appendLine("      { ")
      [Void]$Code.appendLine("        `$DialogConfig.Name = `"Query`"")
      [Void]$Code.appendLine("        `$DialogConfig.Table = `"SMS_Query`"")
      [Void]$Code.appendLine("        `$DialogConfig.Value = `"QueryID`"")
      [Void]$Code.appendLine("        `$DialogConfig.Type = `"SMS_Query`"")
      [Void]$Code.appendLine("        `$DialogConfig.DisplayMember = `"Name`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectForm = System.Windows.Forms.Form")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.ForeColor = `$ForeColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.KeyPreview = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.MaximizeBox = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.MinimizeBox = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Name = `"DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Owner = `$Owner")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.ShowInTaskbar = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Tag = @()")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Text = (`$DialogName -f `$DialogConfig.Name)")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectFormKeyDown")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectFormKeyDown()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          KeyDown event for the DialogMySCCMObjectForm Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          KeyDown event for the DialogMySCCMObjectForm Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          Start-DialogMySCCMObjectCancelButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.add_KeyDown({Start-DialogMySCCMObjectFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectFormShown")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectFormShown()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Shown event for the DialogMySCCMObjectForm Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Shown event for the DialogMySCCMObjectForm Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectForm.Refresh()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMySCCMObjectForm`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.add_Shown({Start-DialogMySCCMObjectFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMySCCMObjectForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectReturnGroupBox = System.Windows.Forms.GroupBox")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectReturnGroupBox`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox")
      [Void]$Code.appendLine("    # Location of First Control New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Floor(`$DialogMySCCMObjectReturnGroupBox.CreateGraphics().MeasureString(`$DialogMySCCMObjectReturnGroupBox.Text, `$DialogMySCCMObjectReturnGroupBox.Font).Height + (`$DialogSpacer / 2))))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Controls.Add(`$DialogMySCCMObjectReturnGroupBox)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.BackColor = `$BackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMySCCMObjectForm.Font.FontFamily, `$DialogMySCCMObjectForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.ForeColor = `$GroupForeColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Name = `"DialogMySCCMObjectReturnGroupBox`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Text = (`$ReturnName -f `$DialogConfig.Name)")
      [Void]$Code.appendLine("    #`$DialogMySCCMObjectReturnGroupBox.Width = `$DialogMySCCMObjectReturnGroupBox.Width")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMySCCMObjectReturnGroupBox Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectImageList = System.Windows.Forms.ImageList")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectImageList`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList = New-Object -TypeName System.Windows.Forms.ImageList(`$DialogMySCCMObjectFormComponents)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.ImageSize = New-Object -TypeName System.Drawing.Size(16, 16)")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region >>>>>>>>>>>>>>>> `$DialogMySCCMObjectImageList Icons <<<<<<<<<<<<<<<<")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$YellowIcon")
      [Void]$Code.appendLine("`$YellowIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgAaKK8ANlTSADZU0gA2VNIANlTSADZU0gA2VNIANlTSADZU0gA2VNIANlTSADZU0gA2VNIAGiivAAAAHgIiNMEGpPf/Bqj9/wao/f8GqP3/Bqj9/wao/f8GqP3/Bqj9/wao/f8GqP3/Bqj9/wao")
      [Void]$Code.appendLine("/f8GqP3/BqT3/wIiNMEAV339AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8BsP//AbD//wGw//8AV339AFyB/wC3//8At///ALf//wC3//8At///ALf//wC3//8At///ALf//wC3")
      [Void]$Code.appendLine("//8At///ALf//wC3//8At///AFyB/wBggf8Cv///Ar///wG+//8Avv//AL7//wC+//8Avv//AL7//wC+//8Avv//AL7//wC+//8Avv//AL7//wBggf8EZYH/Dsn//w7J//8Oyf//Dsn//wzJ//8JyP//BMf//wDG")
      [Void]$Code.appendLine("//8Axv//AMb//wDG//8Axv//AMb//wDG//8AZIH/C2qB/yHU//8h1P//IdT//yHU//8h1P//IdT//yHU//8g1P//GdL//xDQ//8Ezv//AM3//wDN//8Azf//AGiB/xRvgf8+3///Pt///z7f//8+3///Pt///z7f")
      [Void]$Code.appendLine("//8+3///Pt///z7f//8+3///Pt///zXd//8l2///E9j//wFsgf8hdIH/Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//9j6f//Y+n//2Pp//8UZ37/MHiB/5Dz//+Q8///kPP//5Dz")
      [Void]$Code.appendLine("//+Q8///kPP//3Xt/v9M0/j/TNP4/0zT+P9M0/j/TNP4/0zT+P8sv/X/AE18/x5ZY+vC+v//xvr//8b6///G+v//xvr//8b6//87zPj/ALD6/wCx+v8Asfr/ALH6/wCx+v8Asfr/ALX9/wBdgf8AAwVcL3J892Oj")
      [Void]$Code.appendLine("q/9jo6v/Y6Or/2Ojq/9boqz/Br3q/wDN/v8Azf//AM3//wDN//8Azf//AM3//wDN//8AZ3/+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMABtfPkA4v//AOL//wDi//8A4v//AOL//wDi//8A3vv/ADY+zAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQlvAEtQ0ABPVNIAT1TSAE9U0gBPVNIAT1TSACgrsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$BlueIcon")
      [Void]$Code.appendLine("`$BlueIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHh8ZAK9BNADSQTQA0kE0ANJBNADSQTQA0kE0ANJBNADSQTQA0kE0ANJBNADSQTQA0kE0ANIfGQCvAAAAHiojCcHFoxv/yacb/8mnG//Jpxv/yacb/8mnG//Jpxv/yacb/8mnG//Jpxv/yacb/8mn")
      [Void]$Code.appendLine("G//Jpxv/xaMb/yojCcFjUQn9yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv/JpRL/yaUS/8mlEv9jUQn9aFcT/86tJv/OrSb/zq0m/86tJv/OrSb/zq0m/86tJv/OrSb/zq0m/86t")
      [Void]$Code.appendLine("Jv/OrSb/zq0m/86tJv/OrSb/aFcT/2tcHv/Ttjz/07Y8/9O1PP/TtTv/07U6/9O1Ov/TtTr/07U6/9O1Ov/TtTr/07U6/9O1Ov/TtTr/07U6/2pbHf9uYCv/2sBZ/9rAWf/awFn/2sBY/9nAV//Zv1X/2L5S/9i9")
      [Void]$Code.appendLine("T//XvE//17xP/9e8T//XvE//17xP/9e8T/9tXyj/cWY5/+HNeP/hzXj/4c14/+HNeP/hzXj/4c14/+HNeP/gzHf/38tz/97Ibf/dxmb/3MRj/9zEY//cxGP/b2My/3RsR//o2Zn/6NmZ/+jZmf/o2Zn/6NmZ/+jZ")
      [Void]$Code.appendLine("mf/o2Zn/6NmZ/+jZmf/o2Zn/6NmZ/+fXlP/l1Iv/49CB/3JoPf93cVb/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf/v5bn/7+W5/+/luf9qZD7/enVj//Xv1v/179b/9e/W//Xv")
      [Void]$Code.appendLine("1v/179b/9e/W/+/pyP/Tzpr/086Z/9POmf/Tzpn/086Z/9POmf/Bumz/VUoF/1hXRuv7+O3/+/ju//v47v/7+O7/+/ju//v47v/NxoT/wKYo/8GnKf/Bpyn/wacp/8GnKf/Cpyn/yasp/2hYFP8CAwJccW9h96Kh")
      [Void]$Code.appendLine("lf+joZX/o6GV/6Ohlf+hoJH/wrRo/9vDYf/bw2H/28Nh/9vDYf/bw2H/28Nh/9vDYf9uYjD+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMHFqTfnq3KL/6tyi/+rcov/q3KL/6tyi/+rcov/n2Z//ODQkzAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQdvTUtC0FFPRtJRT0bSUU9G0lFPRtJRT0bSKSgjsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$GreenIcon")
      [Void]$Code.appendLine("`$GreenIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgkaAK8TNgDSEzYA0hM2ANITNgDSEzYA0hM2ANITNgDSEzYA0hM2ANITNgDSEzYA0hM2ANIJGgCvAAAAHgkkB8Eypxn/M6sZ/zOrGf8zqxn/M6sZ/zOrGf8zqxn/M6sZ/zOrGf8zqxn/M6sZ/zOr")
      [Void]$Code.appendLine("Gf8zqxn/MqcZ/wkkB8EYVw/9MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8xsB//MbAf/zGwH/8YVw/9Fl0Z/yy5Mv8suTL/LLky/yy5Mv8suTL/LLky/yy5Mv8suTL/LLky/yy5")
      [Void]$Code.appendLine("Mv8suTL/LLky/yy5Mv8suTL/Fl0Z/xRiI/8pwkf/KMJH/yjCR/8nwkb/JsJF/ybCRf8mwkX/JsJF/ybCRf8mwkX/JsJF/ybCRf8mwkX/JsJF/xNiI/8UZy//Lc5h/y3OYf8tzmH/Lc5h/yvNYP8pzV7/Jcxb/yHL")
      [Void]$Code.appendLine("WP8gy1j/IMtY/yDLWP8gy1j/IMtY/yDLWP8QZyz/GG09/zrZf/862X//Otl//zrZf/862X//Otl//zrZf/852X7/Mth6/yrWdP8f1G3/G9Nr/xvTa/8b02v/DWs2/x5ySv9P5J3/T+Sd/0/knf9P5J3/T+Sd/0/k")
      [Void]$Code.appendLine("nf9P5J3/T+Sd/0/knf9P5J3/T+Sd/0fjmf844ZD/J96H/wxvQP8nd1f/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/9u77v/bu+7/27vu/8eaUD/M3tj/5X31/+V99f/lffX/5X3")
      [Void]$Code.appendLine("1/+V99f/lffX/3zxyf9Z2J3/Wdec/1nXnP9Z15z/Wdec/1nXnP9BwnH/F00H/yJbR+vD/O3/x/zu/8f87v/H/O7/x/zu/8f87v9M0Iv/J7M2/yezNv8nszb/J7M2/yezNv8ntDb/Kbg3/xVeHP8AAwNcMXRi92Sm")
      [Void]$Code.appendLine("lf9kppb/ZKaW/2Smlv9epZL/GsJw/xvTa/8b02v/G9Nr/xvTa/8b02v/G9Nr/xvTa/8Najb+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMAZyTPkM66D/DOug/wzroP8M66D/DOug/wzroP8M6J3/AzgkzAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQdvAE890ABTQNIAU0DSAFNA0gBTQNIAU0DSACogsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$RedIcon")
      [Void]$Code.appendLine("`$RedIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHgAAHq8AAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAD/SAAA/0gAAP9IAAB6vAAAAHgAGKcEAFML/ABTG/wAUxv8AFMb/ABTG/wAUxv8AFMb/ABTG/wAUxv8AFMb/ABTG/wAU")
      [Void]$Code.appendLine("xv8AFMb/ABTC/wAGKcEACWP9ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8AFMj/ABTI/wAUyP8ACWP9AA9o/wAfz/8AH8//AB/P/wAfz/8AH8//AB/P/wAfz/8AH8//AB/P/wAf")
      [Void]$Code.appendLine("z/8AH8//AB/P/wAfz/8AH8//AA9o/wAWbP8CLdX/Ai3V/wEs1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAr1f8AK9X/ACvV/wAVa/8EH2//DkLd/w5C3f8OQt3/DkHd/wxA3P8JPtz/BDrb/wA3")
      [Void]$Code.appendLine("2/8ANtv/ADbb/wA22/8ANtv/ADbb/wA22/8AG27/Cypz/yFc5f8hXOX/IVzl/yFc5f8hXOX/IVzl/yFc5f8gW+T/GVXj/xBO4v8ERuH/AELg/wBC4P8AQuD/ACFx/xQ2dv8+euz/Pnrs/z567P8+euz/Pnrs/z56")
      [Void]$Code.appendLine("7P8+euz/Pnrs/z567P8+euz/Pnns/zVz6/8laOr/E1vo/wEodf8hQ3r/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/9jmvP/Y5rz/2Oa8/8UL2z/MFB8/5C8+f+QvPn/kLz5/5C8")
      [Void]$Code.appendLine("+f+QvPn/kLz5/3Wp9f9Me93/THvd/0x73f9Me93/THvd/0x63f8sUsb/AAFJ/x41XOvC3f3/xt/9/8bf/f/G3/3/xt/9/8bf/f87XdL/AACp/wAAqv8AAKr/AACq/wAAqv8AAKr/AACr/wAAV/8AAQRcL0l292N8")
      [Void]$Code.appendLine("p/9jfaj/Y32o/2N9qP9bdqf/BhLA/wAAyv8AAMr/AADK/wAAyv8AAMr/AADK/wAAyv8AAGX+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMAAAb/kAAOf/AADn/wAA5/8AAOf/AADn/wAA5/8AAOP/AAA3zAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlvAABP0AAAU9IAAFPSAABT0gAAU9IAAFPSAAAqsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("#region `$SilverIcon")
      [Void]$Code.appendLine("`$SilverIcon = @`"")
      [Void]$Code.appendLine("AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAHhcUEa8vKiTSLyok0i8qJNIvKiTSLyok0i8qJNIvKiTSLyok0i8qJNIvKiTSLyok0i8qJNIXFBGvAAAAHiIgHcGcj4H/n5KD/5+Sg/+fkoP/n5KD/5+Sg/+fkoP/n5KD/5+Sg/+fkoP/n5KD/5+S")
      [Void]$Code.appendLine("g/+fkoP/nI+B/yIgHcFQSUP9opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/+ilYf/opWH/6KVh/9QSUP9WFJM/66jl/+uo5f/rqOX/66jl/+uo5f/rqOX/66jl/+uo5f/rqOX/66j")
      [Void]$Code.appendLine("l/+uo5f/rqOX/66jl/+uo5f/WFJM/15ZVP+6sab/urCm/7qwpv+6sKb/urCl/7qwpf+6sKX/urCl/7qwpf+6sKX/urCl/7qwpf+6sKX/urCl/15ZVP9lYVz/ycG4/8nBuP/Jwbj/ycG4/8jAuP/Hv7f/xr61/8W9")
      [Void]$Code.appendLine("tP/FvbT/xb20/8W9tP/FvbT/xb20/8W9tP9kX1v/a2hl/9fRy//X0cv/19HL/9fRy//X0cv/19HL/9fRy//X0cv/1c/J/9PNxv/Sy8T/0crC/9HKwv/RysL/aWZi/3Jwbf/k4Nz/5ODc/+Tg3P/k4Nz/5ODc/+Tg")
      [Void]$Code.appendLine("3P/k4Nz/5ODc/+Tg3P/k4Nz/5ODc/+Lf2v/g3Nf/3tnU/29tav93dnT/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6//v7ev/7+3r/+/t6/9pZmL/fHt6//j39v/49/b/+Pf2//j3")
      [Void]$Code.appendLine("9v/49/b/+Pf2//Px7//Y087/19LN/9fSzf/X0s3/19LN/9fSzf/AuLD/R0A4/1pZWOv9/fz//f38//39/P/9/fz//f38//39/P/Hwbn/mIt8/5mLff+Zi33/mYt9/5mLff+Zi33/nI5//1BJQf8DAwNcc3Fw96Sj")
      [Void]$Code.appendLine("ov+lpKL/paSi/6Wkov+joqD/ppyR/6ugk/+roJP/q6CT/6ugk/+roJP/q6CT/6ugk/9WUEr+AAAAAAAAABAAAAAsAAAALAAAACwAAAAsAAAAMFtXUvm9tKv/vbSr/720q/+9tKv/vbSr/720q/+7sqj/LSsozAAA")
      [Void]$Code.appendLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBwdvQD480ERBP9JEQT/SREE/0kRBP9JEQT/SIiEgsgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
      [Void]$Code.appendLine("AAAAAAAA//+sQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQYAArEH+AKxB//+sQQ==")
      [Void]$Code.appendLine("`"@")
      [Void]$Code.appendLine("#endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.Images.Add(`"Yellow`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$YellowIcon)))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.Images.Add(`"Blue`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$BlueIcon)))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.Images.Add(`"Green`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$GreenIcon)))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.Images.Add(`"Red`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$RedIcon)))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectImageList.Images.Add(`"Silver`", ([System.Drawing.Icon][System.Convert]::FromBase64String(`$SilverIcon)))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectReturnTreeView = System.Windows.Forms.TreeView")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView = New-Object -TypeName System.Windows.Forms.TreeView")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Controls.Add(`$DialogMySCCMObjectReturnTreeView)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.BackColor = `$TextBackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.CausesValidation = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.CheckBoxes = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Font = New-Object -TypeName System.Drawing.Font(`$DialogMySCCMObjectForm.Font.FontFamily, `$DialogMySCCMObjectForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ForeColor = `$TextForeColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.FullRowSelect = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.HideSelection = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.HotTracking = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ImageList = `$DialogMySCCMObjectImageList")
      [Void]$Code.appendLine("    `$TempSizeTV = `$DialogMySCCMObjectReturnTreeView.CreateGraphics().MeasureString(`"I`", `$DialogMySCCMObjectReturnTreeView.Font)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Indent = `$TempSizeTV.Width * 2")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ItemHeight = `$TempSizeTV.Height")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.LineColor = `$LineColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, ([System.Math]::Ceiling(`$DialogMySCCMObjectReturnGroupBox.CreateGraphics().MeasureString(`"I`", `$DialogMySCCMObjectReturnGroupBox.Font).Height)))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Name = `"DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.PathSeparator = `"/`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Scrollable = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ShowLines = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ShowNodeToolTips = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ShowPlusMinus = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.ShowRootLines = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Size = New-Object -TypeName System.Drawing.Size((`$TempSizeTV.Width * `$FolderWidth), (`$TempSizeTV.Height * `$Height))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Sorted = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Text = `"DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectReturnTreeViewAfterSelect")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectReturnTreeViewAfterSelect()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          AfterSelect event for the DialogMySCCMObjectReturnTreeView Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          AfterSelect event for the DialogMySCCMObjectReturnTreeView Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectReturnTreeViewAfterSelect -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter AfterSelect Event for ```$DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectForm.Text = `"`$(`$DialogName -f `$DialogConfig.Name) - Querying SCCM`"")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectReturnListBox.Items.Clear()")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectReturnListBox.BeginUpdate()")
      [Void]$Code.appendLine("        if ([String]::IsNullOrEmpty(`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.Objects))")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          if (`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.ContainerNodeID)")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$Query = `"Select `$(`$DialogConfig.Table).`$(`$DialogConfig.DisplayMember), `$(`$DialogConfig.Table).`$(`$DialogConfig.Value) from `$(`$DialogConfig.Table) Inner Join SMS_ObjectContainerItem on `$(`$DialogConfig.Table).`$(`$DialogConfig.Value) = SMS_ObjectContainerItem.InstanceKey and ObjectTypeName = '`$(`$DialogConfig.Type)' Where `$(`$DialogConfig.QueryWhereMod) SMS_ObjectContainerItem.ContainerNodeID = `$(`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.ContainerNodeID) Order By `$(`$DialogConfig.Table).`$(`$DialogConfig.DisplayMember)`"")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          else")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$Query = `"Select `$(`$DialogConfig.Table).`$(`$DialogConfig.DisplayMember), `$(`$DialogConfig.Table).`$(`$DialogConfig.Value) from `$(`$DialogConfig.Table) Left Join SMS_ObjectContainerItem on `$(`$DialogConfig.Table).`$(`$DialogConfig.Value) = SMS_ObjectContainerItem.InstanceKey and ObjectTypeName = '`$(`$DialogConfig.Type)' Where `$(`$DialogConfig.QueryWhereMod) SMS_ObjectContainerItem.InstanceKey is null Order By `$(`$DialogConfig.Table).`$(`$DialogConfig.DisplayMember)`"")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          if ((`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.Objects = Get-WmiObject @WMIParams -Query `$Query | ForEach-Object -Process {[PSCustomObject]@{`"Text`" = `$PSItem.`$(`$DialogConfig.DisplayMember); `"Value`" = `$PSItem.`$(`$DialogConfig.Value)}}).Count -eq 0)")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.Objects = `"None`"")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        else")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        if (`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.Objects -ne `"None`")")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$DialogMySCCMObjectReturnListBox.Items.AddRange(@(`$DialogMySCCMObjectReturnTreeView.SelectedNode.Tag.Objects))")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectReturnListBox.EndUpdate()")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectForm.Text = (`$DialogName -f `$DialogConfig.Name)")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        `$Query = `$Null")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit AfterSelect Event for ```$DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.add_AfterSelect({Start-DialogMySCCMObjectReturnTreeViewAfterSelect -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectReturnTreeViewBeforeExpand")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectReturnTreeViewBeforeExpand()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          BeforeExpand event for the DialogMySCCMObjectReturnTreeView Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          BeforeExpand event for the DialogMySCCMObjectReturnTreeView Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectReturnTreeViewBeforeExpand -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter BeforeExpand Event for ```$DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectReturnTreeView.BeginUpdate()")
      [Void]$Code.appendLine("        if (`$EventArg.Node.Checked)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$Sender.BeginUpdate()")
      [Void]$Code.appendLine("          `$EventArg.Node.Checked = `$False")
      [Void]$Code.appendLine("          `$EventArg.Node.Nodes.Clear()")
      [Void]$Code.appendLine("          ForEach (`$Folder in @(Get-WmiObject @WMIParams -Query `"Select Name, ContainerNodeID from SMS_ObjectContainerNode Where ParentContainerNodeID = `$(`$EventArg.Node.Tag.ContainerNodeID) and ObjectTypeName = '`$(`$DialogConfig.Type)' Order By Name`"))")
      [Void]$Code.appendLine("          {")
      [Void]$Code.appendLine("            `$TempNode = New-Object -TypeName System.Windows.Forms.TreeNode(`$Folder.Name, [System.Windows.Forms.TreeNode[]](@(`"`$*`$`")))")
      [Void]$Code.appendLine("            `$TempNode.Tag = [PSCustomObject]@{`"ContainerNodeID`" = `$Folder.ContainerNodeID; `"Objects`" = `$Null}")
      [Void]$Code.appendLine("            `$TempNode.Checked = `$True")
      [Void]$Code.appendLine("            `$TempNode.ImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("            `$TempNode.SelectedImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("            `$EventArg.Node.Nodes.Add(`$TempNode)")
      [Void]$Code.appendLine("          }")
      [Void]$Code.appendLine("          `$Sender.EndUpdate()")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectReturnTreeView.EndUpdate()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        `$MySearcher = `$Null")
      [Void]$Code.appendLine("        `$TempNode = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit BeforeExpand Event for ```$DialogMySCCMObjectReturnTreeView`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.add_BeforeExpand({Start-DialogMySCCMObjectReturnTreeViewBeforeExpand -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectReturnListBox = System.Windows.Forms.ListBox")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox = New-Object -TypeName System.Windows.Forms.ListBox")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.Controls.Add(`$DialogMySCCMObjectReturnListBox)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.AutoSize = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.BackColor = `$TextBackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.DisplayMember = `"Text`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Font = New-Object -TypeName System.Drawing.Font(`$DialogMySCCMObjectForm.Font.FontFamily, `$DialogMySCCMObjectForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.ForeColor = `$TextForeColor")
      [Void]$Code.appendLine("    `$TempSizeLB = `$DialogMySCCMObjectReturnTreeView.CreateGraphics().MeasureString(`"I`", `$DialogMySCCMObjectReturnTreeView.Font)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.ItemHeight = `$TempSizeLB.Height")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.IntegralHeight = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Location = New-Object -TypeName System.Drawing.Point((`$DialogMySCCMObjectReturnTreeView.Right + `$DialogSpacer), `$DialogMySCCMObjectReturnTreeView.Top)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Name = `"DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("    if (`$MultiSelect)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMySCCMObjectReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    else")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `$DialogMySCCMObjectReturnListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::One")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Size = New-Object -TypeName System.Drawing.Size((`$TempSizeLB.Width * `$ObjectWidth), (`$TempSizeLB.Height * `$Height))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Sorted = `$False")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.Text = `"DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.ValueMember = `"Value`"")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectReturnListBoxKeyDown")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectReturnListBoxKeyDown()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          KeyDown event for the DialogMySCCMObjectReturnListBox Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          KeyDown event for the DialogMySCCMObjectReturnListBox Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$EventArg.KeyValue -eq 13)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$EventArg.SuppressKeyPress = `$True")
      [Void]$Code.appendLine("          Start-DialogMySCCMObjectOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.add_KeyDown({Start-DialogMySCCMObjectReturnListBoxKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectReturnListBoxMouseDoubleClick")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectReturnListBoxMouseDoubleClick()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          MouseDoubleClick event for the DialogMySCCMObjectReturnListBox Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          MouseDoubleClick event for the DialogMySCCMObjectReturnListBox Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter MouseDoubleClick Event for ```$DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Start-DialogMySCCMObjectOKButtonClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit MouseDoubleClick Event for ```$DialogMySCCMObjectReturnListBox`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox.add_MouseDoubleClick({Start-DialogMySCCMObjectReturnListBoxMouseDoubleClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMySCCMObjectReturnListBox.Right + `$DialogSpacer), (`$DialogMySCCMObjectReturnTreeView.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectOKButton = System.Windows.Forms.Button")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectOKButton`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Controls.Add(`$DialogMySCCMObjectOKButton)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Font = `$DialogMySCCMObjectForm.Font")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMySCCMObjectReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Name = `"DialogMySCCMObjectOKButton`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Text = `"&OK`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.Width = (`$DialogMySCCMObjectReturnGroupBox.Width - `$DialogSpacer) / 2")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.AcceptButton = `$DialogMySCCMObjectOKButton")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectOKButtonClick")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectOKButtonClick()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Click event for the DialogMySCCMObjectOKButton Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Click event for the DialogMySCCMObjectOKButton Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectOKButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMySCCMObjectOKButton`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$DialogMySCCMObjectReturnListBox.SelectedIndex -gt -1)")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$DialogMySCCMObjectForm.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.appendLine("          `$DialogMySCCMObjectForm.Tag = @(`$DialogMySCCMObjectReturnListBox.SelectedItems)")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMySCCMObjectOKButton`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton.add_Click({Start-DialogMySCCMObjectOKButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region `$DialogMySCCMObjectCancelButton = System.Windows.Forms.Button")
      [Void]$Code.appendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMySCCMObjectCancelButton`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.Controls.Add(`$DialogMySCCMObjectCancelButton)")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.AutoSize = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.BackColor = `$ButtonBackColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Font = `$DialogMySCCMObjectForm.Font")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogMySCCMObjectOKButton.Right + `$DialogSpacer), (`$DialogMySCCMObjectReturnGroupBox.Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Name = `"DialogMySCCMObjectCancelButton`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.TabStop = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Tag = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Text = `"&Cancel`"")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.Width = `$DialogMySCCMObjectOKButton.Width")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.CancelButton = `$DialogMySCCMObjectCancelButton")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #region function Start-DialogMySCCMObjectCancelButtonClick")
      [Void]$Code.appendLine("    function Start-DialogMySCCMObjectCancelButtonClick()")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      <#")
      [Void]$Code.appendLine("        .SYNOPSIS")
      [Void]$Code.appendLine("          Click event for the DialogMySCCMObjectCancelButton Control")
      [Void]$Code.appendLine("        .DESCRIPTION")
      [Void]$Code.appendLine("          Click event for the DialogMySCCMObjectCancelButton Control")
      [Void]$Code.appendLine("        .PARAMETER Sender")
      [Void]$Code.appendLine("           The Form Control that fired the Event")
      [Void]$Code.appendLine("        .PARAMETER EventArg")
      [Void]$Code.appendLine("           The Event Arguments for the Event")
      [Void]$Code.appendLine("        .EXAMPLE")
      [Void]$Code.appendLine("           Start-DialogMySCCMObjectCancelButtonClick -Sender `$This -EventArg `$PSItem")
      [Void]$Code.appendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.appendLine("        .LINK")
      [Void]$Code.appendLine("      #>")
      [Void]$Code.appendLine("      [CmdletBinding()]")
      [Void]$Code.appendLine("      param (")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$Sender,")
      [Void]$Code.appendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.appendLine("        [Object]`$EventArg")
      [Void]$Code.appendLine("      )")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Enter Click Event for ```$DialogMySCCMObjectCancelButton`"")
      [Void]$Code.appendLine("      Try")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.appendLine("        `$DialogMySCCMObjectForm.Tag = @()")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("        [System.GC]::Collect()")
      [Void]$Code.appendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Catch")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      Write-Verbose -Message `"Exit Click Event for ```$DialogMySCCMObjectCancelButton`"")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton.add_Click({Start-DialogMySCCMObjectCancelButtonClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$(`$DialogMySCCMObjectForm.Controls[`$DialogMySCCMObjectForm.Controls.Count - 1]).Right + `$DialogSpacer), (`$(`$DialogMySCCMObjectForm.Controls[`$DialogMySCCMObjectForm.Controls.Count - 1]).Bottom + `$DialogSpacer))")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    #endregion")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    Switch (`$PSCmdLet.ParametersetName)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      `"FolderName`"")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        if (`$FolderName -eq `"Root`")")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$RootFolder = [PSCustomObject]@{`"Name`" = `"`$(`$DialogConfig.Name)s`"; `"ContainerNodeID`" = 0}")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        else")
      [Void]$Code.appendLine("        {")
      [Void]$Code.appendLine("          `$RootFolder = Get-WmiObject @WMIParams -Query `"Select Name, ContainerNodeID from SMS_ObjectContainerNode Where Name = '`$FolderName' and ObjectTypeName = '`$(`$DialogConfig.Type)'`" | Select-Object -Property `"Name`", `"ContainerNodeID`"")
      [Void]$Code.appendLine("        }")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("      `"FolderID`"")
      [Void]$Code.appendLine("      {")
      [Void]$Code.appendLine("        `$RootFolder = Get-WmiObject @WMIParams -Query `"Select Name, ContainerNodeID from SMS_ObjectContainerNode Where ContainerNodeID = `$FolderID and ObjectTypeName = '`$(`$DialogConfig.Type)'`" | Select-Object -Property `"Name`", `"ContainerNodeID`"")
      [Void]$Code.appendLine("        Break")
      [Void]$Code.appendLine("      }")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$TempNode = New-Object System.Windows.Forms.TreeNode(`$RootFolder.Name, [System.Windows.Forms.TreeNode[]](@(`"`$*`$`")))")
      [Void]$Code.appendLine("    `$TempNode.Tag = [PSCustomObject]@{`"ContainerNodeID`" = `$RootFolder.ContainerNodeID; `"Objects`" = `$Null}")
      [Void]$Code.appendLine("    `$TempNode.ImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("    `$TempNode.SelectedImageIndex = `$ImageIndex")
      [Void]$Code.appendLine("    `$TempNode.Checked = `$True")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView.Nodes.Add(`$TempNode)")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    if (`$DialogMySCCMObjectForm.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      [PSCustomObject]@{`"Result`" = `$True; `"Items`" = `$DialogMySCCMObjectForm.Tag}")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("    else")
      [Void]$Code.appendLine("    {")
      [Void]$Code.appendLine("      [PSCustomObject]@{`"Result`" = `$False; `"Items`" = @()}")
      [Void]$Code.appendLine("    }")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    `$TempNode = `$Null")
      [Void]$Code.appendLine("    `$TempSizeTV = `$Null")
      [Void]$Code.appendLine("    `$TempSizeLB = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectForm = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnGroupBox = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnTreeView = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectReturnListBox = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectOKButton = `$Null")
      [Void]$Code.appendLine("    `$DialogMySCCMObjectCancelButton = `$Null")
      [Void]$Code.appendLine("")
      [Void]$Code.appendLine("    [System.GC]::Collect()")
      [Void]$Code.appendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.appendLine("  }")
      [Void]$Code.appendLine("  Catch")
      [Void]$Code.appendLine("  {")
      [Void]$Code.appendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.appendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.appendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.appendLine("  }")
      [Void]$Code.appendLine("  Write-Verbose -Message `"Exit Function DialogSelect-MySCCMObject`"")
      [Void]$Code.appendLine("}")
      [Void]$Code.appendLine("#endregion")
      #endregion
      Break
    }
    "Display-MyStatus"
    {
      #region ******** function DialogDisplay-MyStatus *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogDisplay-MyStatus")
      [Void]$Code.AppendLine("function DialogDisplay-MyStatus()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Dialog Width")
      [Void]$Code.AppendLine("    .PARAMETER Height")
      [Void]$Code.AppendLine("      Dialog Height")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER TextBackColor")
      [Void]$Code.AppendLine("      TextBox Back Color")
      [Void]$Code.AppendLine("    .PARAMETER TextForeColor")
      [Void]$Code.AppendLine("      TextBox Fore Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.appendLine("      Button Back Color")
      [Void]$Code.appendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.appendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ScriptBlock")
      [Void]$Code.AppendLine("      ScritpBlock to Execute")
      [Void]$Code.AppendLine("    .PARAMETER ItemList")
      [Void]$Code.AppendLine("      List of items to Process")
      [Void]$Code.AppendLine("    .PARAMETER ShowOK")
      [Void]$Code.AppendLine("      Show the OK Button")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((DialogDisplay-MyStatus -Width 30 -Height 12 -FontSize 15 -ScriptBlock { [CmdletBinding()]param ([System.Windows.Forms.TextBox]`$TextBox) Display-MyStatusSample -TextBox `$TextBox }) -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"All Good`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"All Bad`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      if ((DialogDisplay-MyStatus -BackColor `"Black`" -ForeColor `"Red`" -TextBackColor `"White`" -TextForeColor `"Black`" -ScriptBlock { [CmdletBinding()]param ([System.Windows.Forms.TextBox]`$TextBox, [Object[]]`$ItemList) Display-MyStatusSample -TextBox `$TextBox -ItemList `$ItemList } -ItemList @(0, 1, 2, 3, 4, 5,6, 7, 8, 9 )) -eq [System.Windows.Forms.DialogResult]::OK)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"All Good`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Host -Object `"All Bad`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [Int]`$Width = 25,")
      [Void]$Code.AppendLine("    [Int]`$Height = 10,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextBackColor = $($CGenConfig.ToolName)Color.TextBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$TextForeColor = $($CGenConfig.ToolName)Color.TextForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [ScriptBlock]`$ScriptBlock,")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList,")
      [Void]$Code.AppendLine("    [Switch]`$ShowOk")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function DialogDisplay-MyStatus`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogMyStatusForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyStatusForm`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::None")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Name = `"DialogMyStatusForm`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Text = `"`$ScriptName - `$ScriptVersion`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.TopMost = `$Owner.TopMost")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyStatusFormShown")
      [Void]$Code.AppendLine("    function Start-DialogMyStatusFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogMyStatusForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogMyStatusForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyStatusFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyStatusForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyStatusForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if ([String]::IsNullOrEmpty(`$ItemList))")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyStatusOkButton.DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$DialogMyStatusTextBox")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyStatusOkButton.DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList `$DialogMyStatusTextBox, `$ItemList")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (`$ShowOK)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyStatusOkButton.Enabled = `$True")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        else")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogMyStatusForm.DialogResult = `$DialogMyStatusOkButton.DialogResult")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyStatusForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.add_Shown({Start-DialogMyStatusFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyStatusForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyStatusTextBox = System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyStatusTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox = New-Object -TypeName System.Windows.Forms.TextBox")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Controls.Add(`$DialogMyStatusTextBox)")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.AcceptsReturn = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.BackColor = `$TextBackColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.ForeColor = `$TextForeColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.HideSelection = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.MaxLength = 32767")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Multiline = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Name = `"DialogMyStatusTextBox`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.ReadOnly = `$True")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyStatusTextBox.CreateGraphics().MeasureString(`"X`", `$DialogMyStatusTextBox.Font)")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Size = New-Object -TypeName System.Drawing.Size((`$TempSize.Width * `$Width), (`$TempSize.Height * `$Height))")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::None")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.Text = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.TextAlign = [System.Windows.Forms.HorizontalAlignment]::Left")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox.WordWrap = `$True")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyStatusOkButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyStatusOkButton`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.Controls.Add(`$DialogMyStatusOkButton)")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.DialogResult = [System.Windows.Forms.DialogResult]::None")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Enabled = `$False")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Name = `"DialogMyStatusOkButton`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Text = `"OK`"")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Visible = `$ShowOK")
      [Void]$Code.AppendLine("    `$DialogMyStatusOkButton.Width = `$DialogMyStatusTextBox.Width")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$ShowOK)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyStatusOkButton.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyStatusTextBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("      `$DialogMyStatusForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyStatusTextBox.Right + `$DialogSpacer), (`$DialogMyStatusOkButton.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyStatusForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyStatusTextBox.Right + `$DialogSpacer), (`$DialogMyStatusTextBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm.ShowDialog()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyStatusForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyStatusTextBox = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function DialogDisplay-MyStatus`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion

      #region ******** function DialogDisplay-MyStatus Sample *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function Display-MyStatusSample")
      [Void]$Code.AppendLine("function Display-MyStatusSample() ")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .PARAMETER Value")
      [Void]$Code.AppendLine("      Value Command Line Parameter")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      Display-MyStatusSamplePipe -Value `"String`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [System.Windows.Forms.TextBox]`$TextBox,")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Display-MyStatusSample`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("    `$TextBox.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    # **********************")
      [Void]$Code.AppendLine("    # Update TextBox Text...")
      [Void]$Code.AppendLine("    # **********************")
      [Void]$Code.AppendLine("    `$TextBox.AppendText(`"Update TextBox Text...``r``n`")")
      [Void]$Code.AppendLine("    `$TextBox.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"ItemList`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      ForEach (`$Item in `$ItemList)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$TextBox.AppendText(`"Found List Item: `$Item``r``n`")")
      [Void]$Code.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("        Start-Sleep -Milliseconds 100")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      For (`$Count = 0; `$Count -le 9; `$Count++)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$TextBox.AppendText(`"`$(`"*`" * `$Count)``r``n`")")
      [Void]$Code.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("        Start-Sleep -Milliseconds 100")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DisplayResult")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DisplayResult = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DialogResult]::Abort")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("    Start-Sleep -Milliseconds 50000")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Display-MyStatusSample`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Display-MyMessage"
    {
      #region ******** function DialogDisplay-MyMessage *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogDisplay-MyMessage")
      [Void]$Code.AppendLine("function DialogDisplay-MyMessage()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Dislays a Message Window")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Dislays a Message Window")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Width of Dialog")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.AppendLine("      Label Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER Image")
      [Void]$Code.AppendLine("      Control Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER Message")
      [Void]$Code.AppendLine("      Message to Display")
      [Void]$Code.AppendLine("    .PARAMETER ScriptBlock")
      [Void]$Code.AppendLine("      Script Block to Execute")
      [Void]$Code.AppendLine("    .PARAMETER ItemList")
      [Void]$Code.AppendLine("      Item List to Process")
      [Void]$Code.AppendLine("    .PARAMETER Timeout")
      [Void]$Code.AppendLine("      Number of Seconds Before Message Closes")
      [Void]$Code.AppendLine("    .PARAMETER NoButton")
      [Void]$Code.AppendLine("      Do not Display the OK Button, Only works if Timeout > 0")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogDisplay-MyMessage -Timeout 8 -Message `"Showing the User a Message.``r``n``r``nThis is the Message to Display.`"")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogDisplay-MyMessage -NoButton -Timeout 8 -Message `"Showing the User a Message``r``n``r``nThis is the Message to Display.`" -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`"")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogDisplay-MyMessage -Message `"Showing the User a Message``r``n``r``nThis is the Message to Display.`" -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`"")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogDisplay-MyMessage -Message `"Doign some Work.``r``n``r``nThis is the Message to Display.`" -ScriptBlock { [CmdletBinding()]param() Display-MessageSample}")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogDisplay-MyMessage -Message `"Doign some Work``r``n``r``nThis is the Message to Display.`" -ScriptBlock { [CmdletBinding()]param([Object[]]`$ItemList) Display-MessageSample -ItemList `$ItemList } -ItemList @(1..16) -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Standard`")]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [int]`$Width = 25,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [ValidateSet(`"Info`", `"Help`", `"Warning`", `"Error`")]")
      [Void]$Code.AppendLine("    [String]`$Image = `"Info`",")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$Message,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Script`")]")
      [Void]$Code.AppendLine("    [ScriptBlock]`$ScriptBlock,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Script`")]")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Standard`")]")
      [Void]$Code.AppendLine("    [Int]`$Timeout = 0,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Standard`")]")
      [Void]$Code.AppendLine("    [Switch]`$NoButton")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Funcation for DialogDisplay-MyMessage`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DialogMyMessageFormComponents = New-Object -TypeName System.ComponentModel.Container")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyMessageForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyMessageForm`"")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.ControlBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Name = `"DialogMyMessageForm`"")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Tag = `$True")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyMessageFormClosing")
      [Void]$Code.AppendLine("    function Start-DialogMyMessageFormClosing()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Closing event for the DialogMyMessageForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Closing event for the DialogMyMessageForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyMessageFormClosing -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Closing Event for ```$DialogMyMessageForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayTimer.Enabled = `$False")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Closing Event for ```$DialogMyMessageForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.add_Closing({ Start-DialogMyMessageFormClosing -Sender `$This -EventArg `$PSItem })")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyMessageFormShown")
      [Void]$Code.AppendLine("    function Start-DialogMyMessageFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogMyMessageForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogMyMessageForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyMessageFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyMessageForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessageForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        if (`$DialogMyMessageForm.Tag)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          if ([String]::IsNullOrEmpty(`$ItemList))")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$DialogMyMessageForm.DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          else")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$DialogMyMessageForm.DialogResult = Invoke-Command -ScriptBlock `$ScriptBlock -ArgumentList @( ,`$ItemList)")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyMessageForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.add_Shown({ Start-DialogMyMessageFormShown -Sender `$This -EventArg `$PSItem })")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyMessageForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Infojpg ********")
      [Void]$Code.AppendLine("`$Infojpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4H87P/AAVI/wCD")
      [Void]$Code.AppendLine("iv8AZi/YC17Xfgt8LNKf9pn9pbRTPYeIPCmga9Ho/wAOPhlqyFo2sfiJ45t4dVafxLYyEG78DeFtP1LUrZ7e503xLq3g6/e3Mi/8HFf/AAVH139gH9mDR/hZ8FdfOjftLftNf294f8KeINPunGq/DL4b6OkEPjn4")
      [Void]$Code.AppendLine("h2TofMsvEk8mq6d4W8C3bi3kt9U1HV/FGm3LX3hD7PL/AJk1zc3F5cXF5eXE11d3U0tzdXVzLJPcXNxPI0s9xcTys8s000rNJLLIzSSSMzuxYkn/AGY/Zyfs5Mg8d8gpeOPjjTzCp4cVMwxWD4L4LweKxOWVONqm")
      [Void]$Code.AppendLine("WYmeDzLOc5zPBzo4/C8NYXH0cTlmEwmWYjCZhmmYYTGVauNweAwdOnm/53xfxfVyyq8syxwWMUIyxOJlGM1hlOKlCnThK8JVpQanKVSMoQhKKUZTk3T/AKB/i7/wc7f8FbPiVrF1feEfi98P/gXo80rtD4a+Fvwg")
      [Void]$Code.AppendLine("8B6jZW8G4mKL+1vixpXxN8Su6Lt8yaPWoPNcMwjjjYRKfCL/AIOdv+Ctnw11i1vvF3xe+H/x00eGVGm8NfFL4QeA9OsriDcDLF/a3wn0r4ZeJUd13eXNJrU/lOVYxyRqYm7P/g2k/YJ/Z0/bf/aw+Ld1+0v4Rsfi")
      [Void]$Code.AppendLine("T4N+CHwqsfFmhfDbWZ7yHw54h8WeJPE1toljqfiW2sZ7eTWdI8P6fBqbjQbiQaff6nqOmz36XFvZNZXU/wDwcv8A7A/7OX7EP7Vfwevv2aPCFj8NPB/xx+FmpeKNf+G2izXknhvQPFfhnxHJo95q3hq1vp7h9F0n")
      [Void]$Code.AppendLine("xDp97phOhWsg06y1HTL+5sYraK/Npb/6UPK/oFL6Rq+hX/xLD4f/AOtz4Q/t7+3f+IY8Hf2Z7T+xXxD/AGX/AKzcv+t39q/6vJ4/+1b8ntP9j+vfWm0fH8/FP9j/AOsf9tYv6v8AWPZey+u4jnt7X2PP7H/d+T23")
      [Void]$Code.AppendLine("ucm9ve5eU/qX/wCCXH/BxX+zF+37r2hfBb4p6U37M37S2tGCw8P+E9f16PWfhx8TtVciNLH4d+Op4dJaDxLfSjdaeBvFOnadqVy1xbab4a1bxjfrcNH/AES4fn5p+r/8s5fTjGZM4z9zPOfv8V/iBW1zcWdxb3ln")
      [Void]$Code.AppendLine("cTWt3azRXNrdW0skFxbXEEiywXFvPEySwzQyqskUsbLJHIqujBgCP9Nj/g3U/wCCo2u/t/fswaz8LPjVr39tftLfszLougeLPEGoXEj6r8TvhvrFvdQeBviJfMzLJe+I4H0rUPC3ju7UXEl1qOnaR4k1G5F94xFv")
      [Void]$Code.AppendLine("F/mx+0b/AGcmQeBGQVfHHwOpZhS8OKWYYXB8a8F4zFYnM6nBNTM8TTweWZzk2ZYydbH4rhrFY+th8sxeEzPE4vMMrzDF4KrSxmMy/GVKeT/YcIcX1c0qrLMzcHjHCUsNiYxjBYlQjzTp1IRtFV1FSqRlBRhOEZpx")
      [Void]$Code.AppendLine("jKKdT+S7/g52+L2s/Er/AIK2fF3wlfXU8+kfAv4e/B74W+G4ZJCYrey1DwFpPxX1byoxhEdvEvxN1qOZwu6TyI1LNHFFt/nyr+gz/g52+EOsfDT/AIK1/FzxbfWs0Gj/AB0+Hvwe+KXhqZomSCey0/wFpPwo1XyX")
      [Void]$Code.AppendLine("OVLJ4l+GWtSSx7t8QniLKqSRbv586/3L+hv/AGL/AMSn/Rz/ALA9j/Z//EGfD3n9hy8v9q/6tZf/AG97Tl9361/bv9pfXLf8xft763PzTiL2n9u5v7W/N/aOLtf/AJ9+2n7K3l7Lk5fKx/TD/wAGpnxptvht/wAF")
      [Void]$Code.AppendLine("OLz4c6hd+TbftAfAH4keA9LtjIsaz+KfCd14f+K+nzBmwDLD4c8B+LoI1OQVvZGAMix4f/wdbfGu1+JP/BTaw+G+nXYmtf2ffgD8OPAuq2yyeasHivxdc6/8VtRlLDgSzeG/HPg+CVV4/wBDRj8zMB+Df7Kv7Rnj")
      [Void]$Code.AppendLine("b9kf9o34N/tK/DqGxu/GHwa8d6L410vTNUa5TSddh0+Yx6t4b1drKWC8XSPEuiz6joGqm0nhuRp+pXJgljl2MD9qr9ovxt+1x+0b8Zf2lfiJDY2fi/4zePNa8bappeltcvpOhQ6hMI9J8N6Q97LPeNpHhrRYNO0D")
      [Void]$Code.AppendLine("Smu5pbk6fptsbiR5d7H4L/iWbE/8T2r6T/Lhf9Xl4F/6pcnt6f1//iIX9t/2d9b+r/xPqP8AqLfCe1t/vPu89vcOr+2Y/wCq/wDYt5e2/tP2+z5PqnsuflvtzfWryt21t1Pn+v6DP+DYn4v6x8M/+Ctfwk8JWN1N")
      [Void]$Code.AppendLine("Do/x0+Hfxj+FniWFZCsNxZWHgDV/itpJlTlDJH4l+GeipDKV3xGaQBljklDfz51/Qb/wbE/CDWPiX/wVr+Efi2ytZZtH+Bfw8+MXxS8SzLE7wQWV/wCAdW+FGkiZ1GA7+JfiborxR7g8vkSEK0ccxX736ZP9i/8A")
      [Void]$Code.AppendLine("Ep/0jP7f9j/Z/wDxBrxB5PbcvL/av+rWYf2D7Pn936z/AG7/AGb9Tvr9b9jbWxycPe0/t3KPZX5v7Rwl7X+D20Pa3t9n2XPzf3b30P60f+Div/glzrv7f37MOjfFL4K6ENa/aW/ZmGva/wCE/D+nxvNq3xO+HGsR")
      [Void]$Code.AppendLine("wT+Ovh3YKqiW+8RwPpVh4p8D2rG4e51TT9X8OabbLe+NBcRf5k9zbXFncXFneW81rd2s0ttdWtzFJBcW1xBI0U9vcQSqksM0MqtHLFIqyRyKyOoYED/cAJbI5l+8P+WsI/ifjGOTwRs6EgqeEFfzr/8ABUf/AIN1")
      [Void]$Code.AppendLine("P2Yf2/de1741fCzWR+zN+0rrRn1DX/FmgaNaaz8N/ibqrku9/wDETwNb3WkvB4ivpV2XfjrwvqGn6pczXNzqHiXSPGN6tt5X+Gf7OT9o3kHgRkFLwO8camYU/DinmGKxnBfGmDwuJzOpwTUzPEzxmZZNnOWYOFbH")
      [Void]$Code.AppendLine("4rhrFY+ticzwmLyzD4vMMrzDF4ylVwWMwGMp1Mo/TOL+EKuZ1XmeWKDxjhGOJw0pRgsSoRUYVKc5WhGtGCUJRqSjCcIxalGcWqn8Vv8AwQp/ak/ZP/Y+/wCCgHhL4x/th6ZA3w2tfAXjPw/4b8Z3XhS/8aWvws+I")
      [Void]$Code.AppendLine("urPo0ugfEGfQNH07WNemW20mx8Q+GEvNB0jUtV0ubxRHqUNukNrPc27/APgux+1N+yh+2F+3/wCKvjJ+x7psH/Ct7jwB4M8PeJfGlr4Uv/Bdt8U/iLpEmty698QIdB1nTdG16JZ9Iv8Aw74Xa91/SNO1XU5fC0mo")
      [Void]$Code.AppendLine("S2729zb3M/vvxf8A+DYn/grX8M9YurHwl8JPh38dNHhmlWHxL8LPjH4AsLK4hQ/JKdJ+K2r/AAz8SxyFCplhTRZjE+4CSSNRKy/CD/g2I/4K1/EzWLWx8W/CP4efAvR5pYhN4l+Kfxi8A39lBA7YeYaT8KdW+Jni")
      [Void]$Code.AppendLine("V3ChvKhfRYfNcKpkjRvNX/Vz/iJn0If+Izr6V/8AxNJwT/rKvDd+Hv8AYX/EXeF/7BeRvMf7W+sf6kc/+s/9ue10+pc31bm/2r+xf7TX10+G+pcS/wBnf2F/YmJ9j9c+t+1/s+v7X2vIqfL9Zt7D2VvtfFry+05P")
      [Void]$Code.AppendLine("dP5+La2uLy4t7Ozt5rq7upora1tbaKSe4ubieRYoLe3giV5ZpppWWOKKNWkkkZURSxAP+mz/AMG6f/BLjXf2Af2YdZ+Kfxq0IaL+0t+0z/YWv+K9A1BGh1f4Y/DjSILufwN8O75XUy2HiO4fVL/xT44tlNu1vqeo")
      [Void]$Code.AppendLine("6T4Y1K2a/wDB4uJV/wCCXH/Bul+zD+wFrug/Gn4p6wf2mf2ltFMd/oHivXtEtdH+G/wy1WLEi33w88DXF3qrz+I7CZtlt468U3+oapaSW1rqXhrSPB981yJf6KPnz1l+9/fg/uZxjpnHOzpj5+tf5SftG/2jeQeO")
      [Void]$Code.AppendLine("+QVfA7wOq5hV8OKuYYXGca8aYzC4nLKnG1TLMTTxmWZNk2W4yFHH4XhrC4+jh8zxeLzPDYTMM0zDCYKlSweDy/B1Kmcfc8IcIVcrqrM8zUFjFCUcNhoyjNYZTjyzqVJxvF13FypxjByhCEptylKSVP8A/9k=")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Helpjpg ********")
      [Void]$Code.AppendLine("`$Helpjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4H4V/8FPv+C+f7")
      [Void]$Code.AppendLine("JP8AwTgv9Q+F9umo/tB/tLWtqr3Pwb8C6zaaZp/guW4iFxZH4q+PJodVsfBk13bsk8Hh/TtI8T+L/s01ne3vh3TtL1Ky1WQ/4L5/8FPtQ/4Jv/skQwfC7UrW2/aW/aDvtZ8CfBy5YpdS+C9O0y1guPHfxVNjcqba")
      [Void]$Code.AppendLine("8l8GWWq6Tp3h+G4SaD/hMPE3h6/vLLUtJsdUs5P8uLW9b1nxLrOreI/EWralr/iDX9SvtZ1zXNZvrrVNY1nWNUupb3UtV1XUr2We81DUdQvJ5ru9vbuaa5urmaWeeWSWRmP+wH7Oj9nRlP0iMpl4z+M8syo+FdHM")
      [Void]$Code.AppendLine("sTlvC3C2XYmtlmM49xmWVnh81x2OzXDuGMwHC+AxkK2V/wDCXVw+aZnmeHx1Olj8so5Y3mPwHF3F1TKKn9nZdyPHOEZ1684qccLGaUqcYwleM604tT99OEIODcZufuf0k/GD/g6v/wCCnvj7Wbu4+G5+B/wK0Hzp")
      [Void]$Code.AppendLine("P7N0rwp8OE8ZanFaFiYk1XW/ibqfi231G9VfllurDRNDtZcBo9Og5BPg/wD8HV//AAU98A6zaXHxIPwP+Oug+dH/AGlpXiv4cJ4N1OW0DAyppWt/DLU/CVvp16y/LFdX+ia5axZLSadPwB45+xV/wSQ+BviX9gDx")
      [Void]$Code.AppendLine("t/wVJ/b6+MvxP+Gn7K2ga5L4e8GeBP2fvDvhzX/jN8RriHx3Z/DGTU7HU/GCXnhXw/bS/EC5m8MaZY6jpN2bttN1fWdV1Tw9pNjbTap9P+L/APghN+zD+1D+wJ4k/b8/4JXfHn44+NdE8D6d411LxJ8Df2nPD/gy")
      [Void]$Code.AppendLine("L4hXj/DuCXUfGfhyw8QfDvT9E0TTvGOnaJEusaFoy6b4k0vxXBe6fa23iTTbq6jV/wDSjPsj/ZncNYnG8BZv4IcF4fh/KuP4eDec+IUfCvNKvCuS+Jc8NSqS4LzTxUp4GWY4XPcPCvRhj8e82lgstxFRwzDNsLXp")
      [Void]$Code.AppendLine("V/ZfG0qnGdZRxVPMsTKtUwv9oU8J9fgq9TB3a+swwLnySpNp8sPZqU0rwpyTV/6l/wDgmD/wXz/ZK/4KP3+n/C+ddR/Z8/aWubZnt/g3461i01PT/GktvEbi9Pwp8eQxaVY+Mp7SBXnn8P6jpHhnxf8AZob28svD")
      [Void]$Code.AppendLine("mo6Xp17qsX7qYfn5p+r/APLOX04xmTOM/czzn7/Ff4h+ia3rPhrWdJ8R+HdW1LQPEGgalY6zoeuaNfXWl6xo2saXdRXum6rpWpWUsF5p+o6feQQ3dle2k0Nza3MMU8EscsasP9R3/ggZ/wAFPb7/AIKQfskTwfFH")
      [Void]$Code.AppendLine("UbW5/aW/Z8vNL8C/GS4ULbS+NNO1LT7qfwH8VhY2u23tJfGdjpWr6d4iggSG3Pi7wx4ivLKy0/StQ0qyi/zW/aL/ALOjKfo75THxn8GJZlW8K62ZYbLeKeFsyxVbM8ZwFjMzrLD5VjsDmuIc8Zj+F8fjJ0cq/wCF")
      [Void]$Code.AppendLine("WtiM0yzNMRgKVTHZnRzNPLvsuEeLqmbVP7OzHkWOUJToV4JQjiowV5xlTXuxrxjep+7ShOCk1CDh7/8AJZ/wdYfGHWvH/wDwU9/4Vvc3c50H4E/Az4beE9K00ybraLU/GUWpfE3W9VWMfIt9qNv4u0TT7qVPv2uh")
      [Void]$Code.AppendLine("6bC3/HsK/mir+lz/AIOr/g/rPgH/AIKef8LIuLSYaD8dfgZ8NfFek6l5LR2kup+DYtS+GWtaUjn5Teadb+EtEv7qJSTHa65psrnNxgfzR1/ud9Bv+xP+JQfo7f2B7H6j/wAQs4Y9v7Dl5P7b+pr/AFl5uTT23+sf")
      [Void]$Code.AppendLine("9q/Wb+99Y9rz+/zH5lxL7X+3839rfm+vV7X39lzfufl7H2dvK1j6RX9rz9ps/s1/8Mcp8ZvG5/Zmk8W/8Jr/AMKaW+iPhV/EjagmrC48sW39pNYnXETX10H7edBHiPPiBdMGtM18f7ovgD478L/8EL/+CB9hY/tI")
      [Void]$Code.AppendLine("31toP7SPx78O/FTxp4H+CN1PGni7V/if8XdHFj4T8NXGiORf2lh4F8IjwTqfxav7uCC38LXCanojPc63PoWn6x/Ch+ybq3iPw3+058AfF3hL4Pax+0Fr/gX4u+APiBY/BLQdN1bVtS+KP/CB+JtN8X3PgqOx0LRf")
      [Void]$Code.AppendLine("EWqy2+vWmiz2N+9noWrvBYS3Nw9hdRRPE3tP/BSP9qn9oP8AbB/a++Lfxd/aQ0Pxv4C8a3Ov3Ol6T8HPHEmtR3nwR8I2rtN4f+GOn6Vrmj+HLvSrPQrO4WW4LeHNEuNa1S8v/EmpWR1TWL24m+K+kR9Hih488X+H")
      [Void]$Code.AppendLine("3hQsNw7wj4QYDimt47+LM8j/ALFwfFPiBxZl2MpZXkeQPLMJUoZjRwudSxWZZjxZxnjMFiqmKWByzLsJjIZinUo9OUZu8qw+Lx3NVxGYToLK8AqvtJUMJQnF1KtXnknBunywhQw8ZRUeec5R5NH8JV/S7/wan/GD")
      [Void]$Code.AppendLine("WfAP/BTw/De3u5hoPx2+BXxN8KarpvmlLWbVPBttp/xN0TVWj+4b7TrfwjrdhaTOD5NrrmooB+/JH80Vf0uf8Gp/we1jx/8A8FPf+FkW9nKdB+BPwM+JfizVdSMLyWkOp+MoNO+GWiaU7rwL3Ubfxdrd/axMQZLX")
      [Void]$Code.AppendLine("Q9RkB/0cg/a/Tk/sT/iUH6RP9v8AsfqP/ELOJ/Ye35eT+2/qb/1a5efT23+sf9lfVre99Y9lye/ynNw17X+38o9lfm+vUL239lzfvvl7H2nN5Xuf1qf8F9P+CYV9/wAFH/2SIZ/hfYWdz+0r+z5e6z47+Dlu8yQy")
      [Void]$Code.AppendLine("+NNO1K0gh8efCo311tt7SXxlY6XpOpaDcTyQW3/CY+GfDtpe3unaTqmp3sX+XFreiaz4a1nVvDviLSdT0DxBoOpX2ja5oetWN1pesaNrGmXUtlqWlarpt7FBe6fqWn3kE1pfWN3DDc2tzDLBPFHLGyj/AG8yWyOZ")
      [Void]$Code.AppendLine("fvD/AJawj+J+MY5PBGzoSCp4QV+FH/BT7/ggZ+yR/wAFH7/UfihBNe/s+ftLXVqq3Hxl8DaZpuqab4zkt4hbWX/C1vAc11pNj4zktIFS3h8Q6fq/hnxh5MNnY3viLUNJ06y0uL/DL9nR+0Xyn6O+Uy8GPGeOZVvC")
      [Void]$Code.AppendLine("utmWJzLhbinLsNWzPGcBYzM6zxGa4HHZVh1PGY/hfH4ydbNP+EuliM0yzM8RjqlLAZnRzNrLv03i7hGpm9T+0cu5FjlCMK9CclCOKjBKNOUZytGFaEUoe+1CcFBOUHD3/wCGL/ghx/wUT+EP/BNH9sjVPjb8b/h9")
      [Void]$Code.AppendLine("4g8beAvGHwk8T/Cq+1PwbY6VqfjTwHc674g8JeIrbxToOm6zqWj2eowyN4VbQNdsotW03UDo2s3d1ZXF29o+i6vgf8Fsf+CgXwq/4KS/ts3fx/8Agx8P9c8B+AdG+GHg74XaZP4ss9L07xj46l8K6j4m1Sfxv4p0")
      [Void]$Code.AppendLine("7R9Q1iysL64/4SSPw3pdr/bOqXMfhfwzoBu57a4aTTLH7p+MH/Bqf/wU98A6xd2/w3PwK+OugiaX+zdU8KfE228G6pLaqf3baronxNsPCVtp18U+ae1sNc1y1hyAmpT8kL8H/wDg1O/4KfePtYtIPiR/wov4FaCZ")
      [Void]$Code.AppendLine("YjqWqeK/iZbeMtUitGbEjaVovwysPFttqN6BzBa3+uaHaTEFX1KDgn/WCHjD+z5p+L1b6V8fHzgH/X+vwLHgupUfiA3L+wo1KdfmXAXP/bazN0qVPDOl/ZluWPOsAswcsS/hP7P4reXrIv7KxX1VYr6yv9k/5e2t")
      [Void]$Code.AppendLine("/vVvZcl23fn625+S0T+bXRNE1nxLrOk+HPDuk6lr/iDX9SsdG0PQ9GsbrVNY1nWNUuorLTdK0rTbKKe81DUdQvJ4bSysrSGa5urmaKCCKSWRVP8AqO/8EC/+CYN9/wAE3/2SZrj4oafZW37S/wC0He6N47+McCTx")
      [Void]$Code.AppendLine("TTeC9N02wuovAfwpF9a74LqXwbY6rq2o6/cQSTW3/CYeJvEdhZ3moaXp+l3srv8AgmB/wQL/AGSf+Cb9/p3xQuJb/wDaD/aXtbWVIPjJ460nTdM03wXLPCba+Hwp8BxXWrWXgyW6hd7e48Q6jq3ibxikEt5Z2XiL")
      [Void]$Code.AppendLine("T9K1G90uX91vnz1l+9/fg/uZxjpnHOzpj5+tf5PftF/2i+U/SIymPgx4MRzKj4V0cyw2ZcU8U5lha+WYzj3GZZXWIyrA4HKsQoYzAcL4DGQo5r/wq0cPmmZ5ph8BVqYDLKOWJZj93wjwjUymp/aOY8jxzhKFChBq")
      [Void]$Code.AppendLine("ccLGatOUqi92VeUb0/3bcIQckpzc/c//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Warningjpg ********")
      [Void]$Code.AppendLine("`$Warningjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4CYfA+a4zt5+R8")
      [Void]$Code.AppendLine("53np+8wDtxxyuMnO44BlRn5kOWH/AC2l/wCejMMkDHHZugPzkneM8R8RPHWh/DXwV4h8b688Q07QNNkumgSaSOa/umkWGw0y18z5ftWpX0tvZW6t8qzTrNIViV2Hn5tmuW5FleZZ3nGMoZdlOT4DF5pmeYYqfs8N")
      [Void]$Code.AppendLine("gsvwGHqYrGYuvPXko4fD0qlWpKztCDaTeh1YLBYvMsbhMuwGHqYrHY/E0MHg8NRjzVcRisTVjRoUKUftVKtWcYQXWUkfJn7Xf7UWr/CGXTfBHgC5tB411G2/tPVdTvIEvV8OaVI7R2McNlcPJay6nqLxyzRrfxyp")
      [Void]$Code.AppendLine("a2ESyyWcx1C0mgP2RP2otW+L0upeB/H1zaHxrp1t/amlanZwJZL4j0qN1jvo5rG3aK1j1TTXkimkFhHFHd2ErSx2cB0+7mn/ADa8P+E/iZ+1J8UvEN1pv2W88R63Ld+Itb1HUrh7PR9HsRLFbwJLP5V1cR2dor2e")
      [Void]$Code.AppendLine("l6ZZW0F3diCOFI4XigmkjXxD4S+Jv7LXxS8PXWpC1s/EeiSWfiPRNQ065e80fWbAyS28yRz+Va3ElneIl5pmpWdzBaXZt5ZkkhSKeGWT/EL/AIm/8e/+Iuf8TELL+N39Gv8A1v8A9UP7F+r4r/VH/Vrnjg7+x5fq")
      [Void]$Code.AppendLine("P+tvsb5v/aTmqn9uf8If19ZfbAn+hX/EDPDf/Un/AIhb9Z4e/wCIsf2Gs8+v+1of25/azj7de/f6z/YntH9R+qcvL/Z3/Cj9W+tf7Sf0HYfH3rjO3/nnJnO7/rpjdj/gO3/bow/PzT9X/wCWcvpxjMmcZ+5nnP3+")
      [Void]$Code.AppendLine("K4r4d+OdD+JXgnw/430B4zp2v6ZHdiBpJJJbC6WYwX+mXRjO37Tpt7HPZXAX5WuIWkj3QsjntiEyfufemHLTZ+VATnnr/wA9D0ZeFya/29ynNstz7KstzzJ8ZQzHKc4wGEzTLMwws1Uw2Ny/H4enisHi6FRaTo4j")
      [Void]$Code.AppendLine("D1adWnLS8Jp2R/nrjcFi8txmLy/H4ephcbgcTXweMwtaPJVw+Kw1WVGvQqx+zUpVYShNdJRaHEtkcy/eH/LWEfxPxjHJ4I2dCQVPCCvx8/bv+NZ8VeK7b4UaFeM+heCrk3PiN45g8d/4teJ0FozINssfh+0me3IB")
      [Void]$Code.AppendLine("BXUrzUYJkL2EDL+hP7R3xftfgv8ADLWPEkbwHxHqG7RfCNnLBGDca5eRzeXdNHJu32mk26SandhlCSJbQ2bSRzXkZP8APxd3Vze3Vxe3lxLdXd3cTXV1c3EzST3FxcOZZ55pXLPJLNK7SSO5Lu7F2JLE1/lt+0q+")
      [Void]$Code.AppendLine("kB/YXD+A8COGcby5txRRw+dcdVcPUtPBcN0q6nlWRzlCScK2eY2h9dxlJyhUjleBoUqtOrhM51/sT6Jvhn/aOZ4nxHzbDqWCyepVwHDlOrC8MRmsqfLjcxjGStKnl1Cp9XoTtKDxmIqThKFfAafd3/BPbXhp/wAX")
      [Void]$Code.AppendLine("vEOhyOVj8QeB74whXVWe+0nU9Nu4l3PwEFjJqTsfvZRWA+Wn/wDBQvXBffF3w1okb7o9C8CWLzAvuZL3VtU1S4lTI4K/YoNOkDcEtIxxgjPzt+zh48sfht8ZfBvi7VEv5tLsZdVtdQt9Mtm1G+ng1XQ9T0xEt7FC")
      [Void]$Code.AppendLine("rXUi3V3bzCJWBLRBlyVwZf2k/H1h8S/jL4v8W6SmoQ6Td/2PZadBqlq2nX8EOl6HpunTpcWLszWsjX9vdzGNjkGUlgC2K/iReLuWL6BsvCx5rhf9Y/8AiN8cJHI/ar67/qi8rjxd/avsL3+pLiNPCObdvrLS2dz+")
      [Void]$Code.AppendLine("gnwRi/8AiZCPGKwVX+yv+Ie+2eYcj+rf24sZ/Yn1Jzvb6w8qtX5f+fV2fSX7CHxrPhXxXdfCfXbtk0LxrcC58NvJMEj0/wAWpHGhtFZ8LHH4hs4UtgCW3alZ6fDBGHv53P7BknJ5b703/LZB0QY4xxjsOsZ+ZuK/")
      [Void]$Code.AppendLine("l9tbq5sbq3vbO4ltbuzuIrq1uYJmint7m3dZYJ4ZEIeOWGVFkjdCHjdVdSCAa/oI/Zx+L9r8aPhlo/iSR7ceI9P26L4vsooFJt9cs4I/MuljQjZZ6vC0OqWoUFY/tMlmJHazm2/2z+zU+kD/AG9w9j/AjibG82bc")
      [Void]$Code.AppendLine("L0cRnXAtXEVb1Mbw3Vrc+a5HCc5c062R42v9dwdJSnUlleOr0qVOlhMm0/n36WXhn/Z2Z4bxHynD2wWbzpYDiOFKHu4fNYU+TBZjJRVowzGhT+r15tRgsZh6c5ynXx5+S/7Xfxhn+K3xV1K1sppP+ET8ETXvhzw9")
      [Void]$Code.AppendLine("BuZ4rieCdo9b1sBicyarfwBYXwhbTbPTQ8aS+bu+WDnPfr2A9B6/z+o9K/WD4hf8E9rXxB4q1jXfCHj5NC03WdQu9QGh6tof9oNp097PLPLb2uo22r2pntFlkdbaKazWe3hVYZLm7dTOeIP/AATh8Qnn/haWiY+9")
      [Void]$Code.AppendLine("k+Grrpwuf+Q3jG7jPTOO9fyJ4sfRE+mFx34lcbcXZ34d1s/zDPuIcxxss1wXE/CEsvxOFlWVLLo5fDFcQYfFUMtw2X0sLhcvwuJw+HxGEwVChh61ClUpSpx/cOCvHDwM4c4T4fyPL+KKeW4bLcrwuHWCxGT54sTR")
      [Void]$Code.AppendLine("rKmp4p4p0csq0amKq4qVatiq1GrVpVsRUqVadScZqT8V/Yv+Inw6+HHxL1PUfiDLbaYupeHZdN0LxFfW8k1ro9+93byXCSvbxzS2I1G0R7f7eECwoj2s0kVveyuF/bR+Ivw6+I/xL0zUfh7Lbamum+HYtN17xFZW")
      [Void]$Code.AppendLine("8sNrrGoJeXElukLzxQy3w06zeO3+3shWZHS1hllt7KFq9o/4dweIv+io6J3H/Is3X8Iy3/Mc6r39uuKd/wAO3/EWP+So6L0/6Fm6/ib5f+Y50Y9PfpmvsX4KfTV/4gL/AMS+LwKyb/VX/WlcUf21/afB3+sn1lV1")
      [Void]$Code.AppendLine("ivYfW/8AXD6p/vH7v659S+v/ANnp5Z9Z+pr2Z4X/ABEDwA/4iR/xE7/iI2P/ALZ/sf8Asf6h9Tz3+yfY+z9j7T2H9he3/h+99X+sfVvrP+1+x9v75+avOe/U9h6cf/WP4Gvqf9kX4xT/AAo+Kum2t7NJ/wAIp43m")
      [Void]$Code.AppendLine("sfDfiCDeyRW89xOYtG1vCkYfSr24KTuQxTTL3UgiPI0W36D/AOHcHiLk/wDC0dG/iP8AyLN10HDE/wDE77Hhu3rg12/w+/4J622geKtG13xh49XXdM0fULTUDoek6F/Z7alPZSpdQ291qFzq90YbRpI0F1FDZtPP")
      [Void]$Code.AppendLine("btJHHc2rlZR8b4S/RD+mFwJ4lcE8X5J4d1sgzDIeIcuxsc2x3E3CCwGGwsa8aeYxzGGE4hxGKr5dicuqYrC5hhsNh6+IxeCr18NRoValWMH7vGvjf4F8R8J8QZHmHFFPMsLmWV4rDvBYfKM8eJrVvZueFeFdbLKV")
      [Void]$Code.AppendLine("GniqWKjRrYWtWqU6VHEU6dWpUhGEpL//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Errorjpg ********")
      [Void]$Code.AppendLine("`$Errorjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4CYfA+a4zt5+R8")
      [Void]$Code.AppendLine("53np+8wDtxxyuMnO44BlRn5kOWH/AC2l/wCejMMkDHHZugPzkneM+EftL/tA+BP2WvgV8Sfjz8Q7iJPDXw78NXOrtYR3LQXviDV5JUsvDvhXSmmBj/tXxPr1zp+iacsgMUd1fR3VwUtIppEwxWKw+Cw2IxmLrQw+")
      [Void]$Code.AppendLine("FwlCricTXqPlp0aFCEqtWrOXSFOnGUpPokz1ciyPN+Js7yfhvIMvxObZ7n+aYDJcmyvB03VxeY5rmmKpYLL8Dhaas6mIxeLr0qFKF1zVKkVdLU/HP/gs3/wVk8YfsY3fhf4C/s6X2iL8c/EulDxX4v8AFWr6da+I")
      [Void]$Code.AppendLine("Ivhp4TuZZINAtrPQ9QNzpF14r8Tz293eRJr1re22keH7SK7n0e8bxFpN7Yn/AARk/wCCsnjD9s678UfAX9ou+0Rvjn4a0pvFfhDxVpGnWvh+H4l+E7aWODXra80PTzbaRa+K/DE9xa3kyaDbWVtq/h+7ku4NHs28")
      [Void]$Code.AppendLine("O6te338vXw3+D37VH/BWj9rP4j6r4Wi0jW/iZ46u9Z+JXjrxJ4l1WfRfBXgrw+Lq002whu9QFtquoW2iaPFPovhTwxo2mWGr6r9gtrOC2sprWwvbm2X4k/Bz9qj/AIJLftZ/DfVvFMWkaJ8TfA11ovxL8CeI/DWq")
      [Void]$Code.AppendLine("z614K8a+H2u7zTb6G1vzbaVqFzomsRW+teFfE+janYaRqv8AZ91dwXNlDaX9lc3P8df8RU42/wBaP9fPYZx/xD7+1f7L+p+zqf2X/Z/N7L4bex/tTl/2r6xfm+uf7H7f2H7k/wCkP/iQX6MH/ECP+JTv7V8N/wDi")
      [Void]$Code.AppendLine("cH/UP/X3/WH63gv9fP8AXD2X9ocvt7/2n/qJ7f8A4Qf7H9n7L/Vv/jJP7LWa/wDCmf6Q+Hx964zt/wCecmc7v+umN2P+A7f9ujD8/NP1f/lnL6cYzJnGfuZ5z9/ivCf2aP2gPAn7UvwJ+G/x5+HlxG/hr4h+GbbV")
      [Void]$Code.AppendLine("xYSXDXF54e1iOZ7HxD4V1VocR/2p4Y1221DRNR8tRFLeWL3NsXtJoZX93ITJ+596YctNn5UBOeev/PQ9GXhcmv7FwuKw+Nw2HxmErQxGFxdClicNXpvmp1qFeEatKrCXWFSnKMovqmj/AJvM9yPN+Gc7zjhvP8vx")
      [Void]$Code.AppendLine("OU57kGaY/Jc5yvGU3SxeXZrleKq4LMMDiqbu6eIwmLoVaFaF3y1KcldrUcS2RzL94f8ALWEfxPxjHJ4I2dCQVPCCv4rf+Dg79uo/Fz4v6Z+yB8PtZaf4ffAzUjqnxMntLkSWviL4xTWstuNIleImO4tfhxpF5Ppj")
      [Void]$Code.AppendLine("gMpTxTrXiSxvYGm0KxlT+kj/AIKb/tpaX+w3+yr4z+J1tcWTfE3xGH8DfBrRbm3ic6h4+1u1u/s2rzWku77Ro/g7T4rvxTq6yKtvdR6baaK9xBeazaF/84vVtW1PXtV1PXNb1C81bWda1C91bV9V1C4lu7/U9T1G")
      [Void]$Code.AppendLine("5kvL/UL66nZ5rm8vLqaW5ubiZ3lmmkeSRmdiT/N30g+OfqWBo8F5dWtisxjDF51KnL3qOXxnzYbBycXeM8bVh7atFuMlhqMIyUqWLP8Aa39j39Fj/WfirM/pN8Y5bz5FwXiMVw94Z0MXSvSzHi+th/Z53xJThUjy")
      [Void]$Code.AppendLine("1cPw1l+J/s7L6yjUozzrMsTWo1aWO4f0/oH/AODbr4hJ4c/bP+JHgK5k8u3+I/wH182QVkWSXXvB3inwrrNpEGcY8saDceJ5pMHcGhiYAhSVn/4OSvHya/8AtmfC/wACW0okg+H3wD0Ka9G4M8OueMPF3i7UrqEl")
      [Void]$Code.AppendLine("f4f7EsfDlwpOCzXEhChSpb81/wDgmL+0JoP7Lv7b/wAEvjL4st/EV74T0G78X6R4j0/wno03iHX9Q0/xb4C8UeFoLfTdDt5IptUuI9V1fTryO1icOz2quocoEaz/AMFQ/wBonw9+1N+2/wDGb4xeD7fxHZeD9Ybw")
      [Void]$Code.AppendLine("VofhrT/FujTeHfEOn2XhPwD4Y8OX9vqWh3Ekk2mTya9pusXhtZHLqLrewDOQPx5cU4f/AIgo+G3iqf1//XH2SwfN++/sv6ss0+s8n/PlZhek3/z8t3P9HJeA2c/8VPIeNayTGf6o/wDEt8sdLiT2Ev7NXHizl8CL")
      [Void]$Code.AppendLine("I3iPh/tF8IuOYKn/ANAibvdWf6e/8G+P7dR+Efxf1T9kD4g6w0Pw++OepDVPhnPeXPl2vhz4xQ20NudIieUrHb23xH0ezg0tAzOX8U6N4bsbKBZ9dvpm/tTJOTy33pv+WyDogxxjjHYdYz8zcV/lAaTq2p6Dquma")
      [Void]$Code.AppendLine("5omoXmk6zouoWWraRqun3Etpf6ZqenXMd5YahY3UDJNbXlndQxXNtcQuksM0aSRsrqCP9HX/AIJkftpaV+3J+yr4M+J1zPYp8TfDYj8C/GXRba3jQ6f4+0Sytxc6vDaRFfs+j+MrGWz8VaSsStBajU7nRUnmuNGv")
      [Void]$Code.AppendLine("dn7B9Hzjn67ga3BWY1r4rLoVMXks6kryrZfKd8Tg05O8p4OtP21GN3J4atOMYxpYQ/zj/bCfRY/1Y4qyz6TfB2W8mRcZ4jC8PeJlDC0rUsu4uo4f2WR8SVIU1y0sPxJl2G/s7MKzjTowzrLcNWrVauO4g1/jp/4L")
      [Void]$Code.AppendLine("Mftr3/7X37XPibSdDvpz8IPgNfa58MfhvYCZ2tNRvtP1I23jnx15bMytceLde05Y7KdRGZPC2i+GVmhiu0u9/wCSFf2DftH/APBt3pPxF+LfjT4gfBj9ouHwB4X8a+ItX8S/8IJ4v8AyeJJPDF9reoXGo3mnaR4k")
      [Void]$Code.AppendLine("0vxbpL6ho0d1cTx6Va3+ixX+n2UcNpdanrE6Pev4P/xDF/Enr/w1t4HxjOf+FWa10zjP/I7dM8Z9eOtflnE/hb4rZ1xDnGaYzIZ46vjcfiKzxVHMcqdCpSc3GgqCqY6FSGHp0I06dCnUhCdKjCFOcIyi4r+9fAv6")
      [Void]$Code.AppendLine("en0AvDPwf8OeA+HPFjD8L5VwxwplOXQyPMuDOPY5pg8bHDxrZtPNp4HhXFYLE5vjM1q43G5rjMHisVhcbmGJxOLw+Ir0q0Kkvhb/AIIbftL/ALM/7MX7U3irxP8AtH3ml+FY/E3w4vPDHw/+JWt6bc6jpXgrxDPq")
      [Void]$Code.AppendLine("+nXOpQ3c1na3lzoA8S6PBPp3/CSRwLHaRQz6Ve3Nrp2t3koX/guT+0v+zN+07+1N4V8T/s4XmmeKo/DPw4s/DHxB+JWiadc6fpPjXxDBrGo3Wmw2k15aWVzrw8NaNPBpv/CRyQvHdxTQ6VZXV1p2i2cp+6P+IYv4")
      [Void]$Code.AppendLine("lf8AR2vgfuP+SWa11UZYf8jt/COT6DrS/wDEMV8S/wDo7TwR2P8AySvWujHCn/kdv4jwPU9K9b/VDxe/1J/1F/1Lwn9m/wBo/wBpfXPrOVf2h7RzVXk9r/avsvj911fY+39h/s/tPZLlPz//AImL/Z0/8TPv6Vf/")
      [Void]$Code.AppendLine("ABMxn/8Ars+C/wDUr/V7+xfED/U/6n9VWB+s/UP9QPr/APuy9p/Z/wDaP9l/2p/wsfVP7Q/en8uFfrf/AMEZ/wBte/8A2Qf2uvDOk63fTj4QfHm+0P4Y/EiwMzpa6bfajqP2XwP462KwVbjwlrupPDfTkSFPCut+")
      [Void]$Code.AppendLine("Jkihlu3tdn6Qf8QxXxL/AOjtPBHc/wDJK9a6KcMf+R2/hPB9D1r3j9nH/g260r4dfFvwV8QPjP8AtFRePvC3grxHpHiU+BPCHgCTw3J4nvdEvYdUsdO1bxJqni3VXsNGlurWBNVtbHRpb/UNPe4t7TU9ImZLxPJ4")
      [Void]$Code.AppendLine("Y8LfFXJeIcnzTB5DPA18Fj8PWWJrZjlSoU6Smo11iFSx06s8PUoSqUq9OnCdSrRnOnCEpSSf6B46fT0+gF4meD/iNwHxH4sYfijKuJ+FM2y2eR5bwZx7LNMZjZYeVbKZ5TPHcK4XBYbN8Hm1LBY7KsbjMVhcLgcw")
      [Void]$Code.AppendLine("w2GxeIxNClRnVj//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyMessagePictureBox = System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyMessagePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox = New-Object -TypeName System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Controls.Add(`$DialogMyMessagePictureBox)")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
      [Void]$Code.AppendLine("    switch (`$Image)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `"Info`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessagePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Infojpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Help`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessagePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Helpjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Warning`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessagePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Warningjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Error`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessagePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Errorjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.Name = `"DialogMyMessagePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.Text = `"DialogMyMessagePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.Size = `$DialogMyMessagePictureBox.Image.Size")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox.MinimumSize = `$DialogMyMessagePictureBox.Image.Size")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyMessageLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyMessageLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.Controls.Add(`$DialogMyMessageLabel)")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.Font = `$DialogMyMessageForm.Font")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyMessagePictureBox.Right + `$DialogSpacer), `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.Name = `"DialogMyMessageLabel`"")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyMessageLabel.CreateGraphics().MeasureString(`"X`", `$DialogMyMessageLabel.Font)")
      [Void]$Code.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSize.Width * `$Width)")
      [Void]$Code.AppendLine("    `$TempHeight = [Math]::Max((`$DialogMyMessagePictureBox.Bottom - `$DialogMyMessageLabel.Top), ([Math]::Ceiling((`$DialogMyMessageLabel.CreateGraphics().MeasureString(`"X`$(`$Message)X`", `$DialogMyMessageLabel.Font)).Width / `$TempWidth) * `$TempSize.Height))")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.Size = New-Object -TypeName System.Drawing.Size(`$TempWidth, `$TempHeight)")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel.Text = `$Message")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyMessageDelayTimer = System.Windows.Forms.Timer")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyMessageDelayTimer`"")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayTimer = New-Object -TypeName System.Windows.Forms.Timer(`$DialogMyMessageTimerFormComponents)")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayTimer.Enabled = `$False")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayTimer.Interval = 1000")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayTimer.Tag = `$Timeout")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$PSCmdlet.ParameterSetName -eq `"Standard`")")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyMessageForm.Tag = `$False")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if (`$Timeout -gt 0)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayTimer.Enabled = `$True")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        #region `$DialogMyMessageDelayLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("        Write-Verbose -Message `"Creating Form Control ```$DialogMyMessageDelayLabel`"")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("        `$DialogMyMessageForm.Controls.Add(`$DialogMyMessageDelayLabel)")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.AutoSize = `$True")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, (`$DialogMyMessageLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.Name = `"DialogMyMessageDelayLabel`"")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.Text = (`"{0:00} Hours {1:00} Minutes {2:00} Seconds`" -f [Math]::Floor(`$Timeout / 3600), [Math]::Floor((`$Timeout % 3600) / 60), [Math]::Floor(`$Timeout % 60))")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("        #endregion")
      [Void]$Code.AppendLine("        `$TempHeight = `$DialogMyMessageDelayLabel.Height")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.AutoSize = `$False")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayLabel.Size = New-Object -TypeName System.Drawing.Size((`$DialogMyMessageLabel.Right - `$DialogMyMessagePictureBox.Left), `$TempHeight)")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        #region function Start-DialogMyMessageDelayTimerTick")
      [Void]$Code.AppendLine("        function Start-DialogMyMessageDelayTimerTick()")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          <#")
      [Void]$Code.AppendLine("            .SYNOPSIS")
      [Void]$Code.AppendLine("              Tick event for the DialogMyMessageDelayTimer Control")
      [Void]$Code.AppendLine("            .DESCRIPTION")
      [Void]$Code.AppendLine("              Tick event for the DialogMyMessageDelayTimer Control")
      [Void]$Code.AppendLine("            .PARAMETER Sender")
      [Void]$Code.AppendLine("               The Form Control that fired the Event")
      [Void]$Code.AppendLine("            .PARAMETER EventArg")
      [Void]$Code.AppendLine("               The Event Arguments for the Event")
      [Void]$Code.AppendLine("            .EXAMPLE")
      [Void]$Code.AppendLine("               Start-DialogMyMessageDelayTimerTick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("            .NOTES")
      [Void]$Code.AppendLine("              Original Function By Ken Sweet")
      [Void]$Code.AppendLine("            .LINK")
      [Void]$Code.AppendLine("          #>")
      [Void]$Code.AppendLine("          [CmdletBinding()]")
      [Void]$Code.AppendLine("          param (")
      [Void]$Code.AppendLine("            [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("            [Object]`$Sender,")
      [Void]$Code.AppendLine("            [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("            [Object]`$EventArg")
      [Void]$Code.AppendLine("          )")
      [Void]$Code.AppendLine("          Write-Verbose -Message `"Enter Tick Event for ```$DialogMyMessageDelayTimer`"")
      [Void]$Code.AppendLine("          Try")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            `$DialogMyMessageDelayTimer.Tag -= 1")
      [Void]$Code.AppendLine("            `$DialogMyMessageDelayLabel.Text = (`"{0:00} Hours {1:00} Minutes {2:00} Seconds`" -f [Math]::Floor(`$DialogMyMessageDelayTimer.Tag / 3600), [Math]::Floor((`$DialogMyMessageDelayTimer.Tag % 3600) / 60), [Math]::Floor(`$DialogMyMessageDelayTimer.Tag % 60))")
      [Void]$Code.AppendLine("            if (`$DialogMyMessageDelayTimer.Tag -le 0)")
      [Void]$Code.AppendLine("            {")
      [Void]$Code.AppendLine("              `$DialogMyMessageForm.DialogResult = [System.Windows.Forms.DialogResult]::Cancel")
      [Void]$Code.AppendLine("            }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("            [System.GC]::Collect()")
      [Void]$Code.AppendLine("            [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          Catch")
      [Void]$Code.AppendLine("          {")
      [Void]$Code.AppendLine("            Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("            Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("            Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("          }")
      [Void]$Code.AppendLine("          Write-Verbose -Message `"Exit Tick Event for ```$DialogMyMessageDelayTimer`"")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("        #endregion")
      [Void]$Code.AppendLine("        `$DialogMyMessageDelayTimer.add_Tick({ Start-DialogMyMessageDelayTimerTick -Sender `$This -EventArg `$PSItem })")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      if ((-not `$NoButton) -or (`$Timeout -le 0))")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        #region `$DialogMyMessageOkButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("        Write-Verbose -Message `"Creating Form Control ```$DialogMyMessageOkButton`"")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("        `$DialogMyMessageForm.Controls.Add(`$DialogMyMessageOkButton)")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.AutoSize = `$True")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Enabled = `$True")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Location = New-Object -TypeName System.Drawing.Size(`$DialogSpacer, (`$DialogMyMessageForm.Controls[(`$DialogMyMessageForm.Controls.Count - 2)].Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Name = `"DialogMyMessageOkButton`"")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Text = `"OK`"")
      [Void]$Code.AppendLine("        `$DialogMyMessageOkButton.Width = `$DialogMyMessageLabel.Right - `$DialogMyMessagePictureBox.Left")
      [Void]$Code.AppendLine("        #endregion")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyMessageForm.Controls[(`$DialogMyMessageForm.Controls.Count - 1)].Right + `$DialogSpacer), (`$DialogMyMessageForm.Controls[(`$DialogMyMessageForm.Controls.Count - 1)].Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm.ShowDialog()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$TempWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempHeight = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessageForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessagePictureBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessageLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessageDelayTimer = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyMessageOkButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Funcation for DialogDisplay-MyMessage`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      
      #region ******** function DialogDisplay-MyMessage Sample *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function Display-MessageSample")
      [Void]$Code.AppendLine("function Display-MessageSample()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Command to do something specific")
      [Void]$Code.AppendLine("    .PARAMETER Value")
      [Void]$Code.AppendLine("      Value Command Line Parameter")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      Display-MessageSamplePipe -Value `"String`"")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [Object[]]`$ItemList")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Function Display-MessageSample`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DisplayResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"ItemList`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      ForEach (`$Item in `$ItemList)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("        Start-Sleep -Milliseconds 100")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      For (`$Count = 0; `$Count -le 16; `$Count++)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        [System.Windows.Forms.Application]::DoEvents()")
      [Void]$Code.AppendLine("        Start-Sleep -Milliseconds 100")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DisplayResult")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DisplayResult = `$Null")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    [System.Windows.Forms.DialogResult]::Abort")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("    Start-Sleep -Milliseconds 50000")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Function Display-MessageSample`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      
      Break
    }
    "Get-MyResponse"
    {
      #region ******** function DialogGet-MyResponse *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogGet-MyResponse")
      [Void]$Code.AppendLine("function DialogGet-MyResponse()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("      Dislays a Message Window")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("      Dislays a Message Window")
      [Void]$Code.AppendLine("    .PARAMETER Width")
      [Void]$Code.AppendLine("      Width of Dialog")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.AppendLine("      Label Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER Image")
      [Void]$Code.AppendLine("      Control Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER Title")
      [Void]$Code.AppendLine("      Message Title")
      [Void]$Code.AppendLine("    .PARAMETER Message")
      [Void]$Code.AppendLine("      Message to Display")
      [Void]$Code.AppendLine("    .PARAMETER Buttons")
      [Void]$Code.AppendLine("      Buttons to Display")
      [Void]$Code.AppendLine("    .PARAMETER DefaultButton")
      [Void]$Code.AppendLine("      Default selected Button")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogGet-MyResponse -Message `"Showing the User a Message.``r``n``r``nThis is the Message to Display.`" -Buttons Ok")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogGet-MyResponse -Title `"Question`" -Message `"Showing the User a Message.``r``n``r``nThis is the Message to Display.`" -Buttons AbortRetryIgnore -DefaultButton 2")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding(DefaultParameterSetName = `"Standard`")]")
      [Void]$Code.AppendLine("  param (")
      [Void]$Code.AppendLine("    [int]`$Width = 25,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [ValidateSet(`"Info`", `"Help`", `"Warning`", `"Error`")]")
      [Void]$Code.AppendLine("    [String]`$Image = `"Info`",")
      [Void]$Code.AppendLine("    [String]`$Title,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$Message,")
      [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ParameterSetName = `"Standard`")]")
      [Void]$Code.AppendLine("    [System.Windows.Forms.MessageBoxButtons]`$Buttons = `"OK`",")
      [Void]$Code.AppendLine("    [ValidateRange(1, 3)]")
      [Void]$Code.AppendLine("    [int]`$DefaultButton = 1")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Funcation for DialogGet-MyResponse`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    `$DialogMyResponseFormComponents = New-Object -TypeName System.ComponentModel.Container")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyResponseForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyResponseForm`"")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.ControlBox = `$False")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Name = `"DialogMyResponseForm`"")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Tag = `$True")
      [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Title`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogMyResponseForm.Text = `$Title")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogMyResponseFormShown")
      [Void]$Code.AppendLine("    function Start-DialogMyResponseFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogMyResponseForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogMyResponseForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogMyResponseFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogMyResponseForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponseForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogMyResponseForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.add_Shown({ Start-DialogMyResponseFormShown -Sender `$This -EventArg `$PSItem })")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogMyResponseForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Infojpg ********")
      [Void]$Code.AppendLine("`$Infojpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4H87P/AAVI/wCD")
      [Void]$Code.AppendLine("iv8AZi/YC17Xfgt8LNKf9pn9pbRTPYeIPCmga9Ho/wAOPhlqyFo2sfiJ45t4dVafxLYyEG78DeFtP1LUrZ7e503xLq3g6/e3Mi/8HFf/AAVH139gH9mDR/hZ8FdfOjftLftNf294f8KeINPunGq/DL4b6OkEPjn4")
      [Void]$Code.AppendLine("h2TofMsvEk8mq6d4W8C3bi3kt9U1HV/FGm3LX3hD7PL/AJk1zc3F5cXF5eXE11d3U0tzdXVzLJPcXNxPI0s9xcTys8s000rNJLLIzSSSMzuxYkn/AGY/Zyfs5Mg8d8gpeOPjjTzCp4cVMwxWD4L4LweKxOWVONqm")
      [Void]$Code.AppendLine("WYmeDzLOc5zPBzo4/C8NYXH0cTlmEwmWYjCZhmmYYTGVauNweAwdOnm/53xfxfVyyq8syxwWMUIyxOJlGM1hlOKlCnThK8JVpQanKVSMoQhKKUZTk3T/AKB/i7/wc7f8FbPiVrF1feEfi98P/gXo80rtD4a+Fvwg")
      [Void]$Code.AppendLine("8B6jZW8G4mKL+1vixpXxN8Su6Lt8yaPWoPNcMwjjjYRKfCL/AIOdv+Ctnw11i1vvF3xe+H/x00eGVGm8NfFL4QeA9OsriDcDLF/a3wn0r4ZeJUd13eXNJrU/lOVYxyRqYm7P/g2k/YJ/Z0/bf/aw+Ld1+0v4Rsfi")
      [Void]$Code.AppendLine("T4N+CHwqsfFmhfDbWZ7yHw54h8WeJPE1toljqfiW2sZ7eTWdI8P6fBqbjQbiQaff6nqOmz36XFvZNZXU/wDwcv8A7A/7OX7EP7Vfwevv2aPCFj8NPB/xx+FmpeKNf+G2izXknhvQPFfhnxHJo95q3hq1vp7h9F0n")
      [Void]$Code.AppendLine("xDp97phOhWsg06y1HTL+5sYraK/Npb/6UPK/oFL6Rq+hX/xLD4f/AOtz4Q/t7+3f+IY8Hf2Z7T+xXxD/AGX/AKzcv+t39q/6vJ4/+1b8ntP9j+vfWm0fH8/FP9j/AOsf9tYv6v8AWPZey+u4jnt7X2PP7H/d+T23")
      [Void]$Code.AppendLine("ucm9ve5eU/qX/wCCXH/BxX+zF+37r2hfBb4p6U37M37S2tGCw8P+E9f16PWfhx8TtVciNLH4d+Op4dJaDxLfSjdaeBvFOnadqVy1xbab4a1bxjfrcNH/AES4fn5p+r/8s5fTjGZM4z9zPOfv8V/iBW1zcWdxb3ln")
      [Void]$Code.AppendLine("cTWt3azRXNrdW0skFxbXEEiywXFvPEySwzQyqskUsbLJHIqujBgCP9Nj/g3U/wCCo2u/t/fswaz8LPjVr39tftLfszLougeLPEGoXEj6r8TvhvrFvdQeBviJfMzLJe+I4H0rUPC3ju7UXEl1qOnaR4k1G5F94xFv")
      [Void]$Code.AppendLine("F/mx+0b/AGcmQeBGQVfHHwOpZhS8OKWYYXB8a8F4zFYnM6nBNTM8TTweWZzk2ZYydbH4rhrFY+th8sxeEzPE4vMMrzDF4KrSxmMy/GVKeT/YcIcX1c0qrLMzcHjHCUsNiYxjBYlQjzTp1IRtFV1FSqRlBRhOEZpx")
      [Void]$Code.AppendLine("jKKdT+S7/g52+L2s/Er/AIK2fF3wlfXU8+kfAv4e/B74W+G4ZJCYrey1DwFpPxX1byoxhEdvEvxN1qOZwu6TyI1LNHFFt/nyr+gz/g52+EOsfDT/AIK1/FzxbfWs0Gj/AB0+Hvwe+KXhqZomSCey0/wFpPwo1XyX")
      [Void]$Code.AppendLine("OVLJ4l+GWtSSx7t8QniLKqSRbv586/3L+hv/AGL/AMSn/Rz/ALA9j/Z//EGfD3n9hy8v9q/6tZf/AG97Tl9361/bv9pfXLf8xft763PzTiL2n9u5v7W/N/aOLtf/AJ9+2n7K3l7Lk5fKx/TD/wAGpnxptvht/wAF")
      [Void]$Code.AppendLine("OLz4c6hd+TbftAfAH4keA9LtjIsaz+KfCd14f+K+nzBmwDLD4c8B+LoI1OQVvZGAMix4f/wdbfGu1+JP/BTaw+G+nXYmtf2ffgD8OPAuq2yyeasHivxdc6/8VtRlLDgSzeG/HPg+CVV4/wBDRj8zMB+Df7Kv7Rnj")
      [Void]$Code.AppendLine("b9kf9o34N/tK/DqGxu/GHwa8d6L410vTNUa5TSddh0+Yx6t4b1drKWC8XSPEuiz6joGqm0nhuRp+pXJgljl2MD9qr9ovxt+1x+0b8Zf2lfiJDY2fi/4zePNa8bappeltcvpOhQ6hMI9J8N6Q97LPeNpHhrRYNO0D")
      [Void]$Code.AppendLine("Smu5pbk6fptsbiR5d7H4L/iWbE/8T2r6T/Lhf9Xl4F/6pcnt6f1//iIX9t/2d9b+r/xPqP8AqLfCe1t/vPu89vcOr+2Y/wCq/wDYt5e2/tP2+z5PqnsuflvtzfWryt21t1Pn+v6DP+DYn4v6x8M/+Ctfwk8JWN1N")
      [Void]$Code.AppendLine("Do/x0+Hfxj+FniWFZCsNxZWHgDV/itpJlTlDJH4l+GeipDKV3xGaQBljklDfz51/Qb/wbE/CDWPiX/wVr+Efi2ytZZtH+Bfw8+MXxS8SzLE7wQWV/wCAdW+FGkiZ1GA7+JfiborxR7g8vkSEK0ccxX736ZP9i/8A")
      [Void]$Code.AppendLine("Ep/0jP7f9j/Z/wDxBrxB5PbcvL/av+rWYf2D7Pn936z/AG7/AGb9Tvr9b9jbWxycPe0/t3KPZX5v7Rwl7X+D20Pa3t9n2XPzf3b30P60f+Div/glzrv7f37MOjfFL4K6ENa/aW/ZmGva/wCE/D+nxvNq3xO+HGsR")
      [Void]$Code.AppendLine("wT+Ovh3YKqiW+8RwPpVh4p8D2rG4e51TT9X8OabbLe+NBcRf5k9zbXFncXFneW81rd2s0ttdWtzFJBcW1xBI0U9vcQSqksM0MqtHLFIqyRyKyOoYED/cAJbI5l+8P+WsI/ifjGOTwRs6EgqeEFfzr/8ABUf/AIN1")
      [Void]$Code.AppendLine("P2Yf2/de1741fCzWR+zN+0rrRn1DX/FmgaNaaz8N/ibqrku9/wDETwNb3WkvB4ivpV2XfjrwvqGn6pczXNzqHiXSPGN6tt5X+Gf7OT9o3kHgRkFLwO8camYU/DinmGKxnBfGmDwuJzOpwTUzPEzxmZZNnOWYOFbH")
      [Void]$Code.AppendLine("4rhrFY+ticzwmLyzD4vMMrzDF4ylVwWMwGMp1Mo/TOL+EKuZ1XmeWKDxjhGOJw0pRgsSoRUYVKc5WhGtGCUJRqSjCcIxalGcWqn8Vv8AwQp/ak/ZP/Y+/wCCgHhL4x/th6ZA3w2tfAXjPw/4b8Z3XhS/8aWvws+I")
      [Void]$Code.AppendLine("urPo0ugfEGfQNH07WNemW20mx8Q+GEvNB0jUtV0ubxRHqUNukNrPc27/APgux+1N+yh+2F+3/wCKvjJ+x7psH/Ct7jwB4M8PeJfGlr4Uv/Bdt8U/iLpEmty698QIdB1nTdG16JZ9Iv8Aw74Xa91/SNO1XU5fC0mo")
      [Void]$Code.AppendLine("S2729zb3M/vvxf8A+DYn/grX8M9YurHwl8JPh38dNHhmlWHxL8LPjH4AsLK4hQ/JKdJ+K2r/AAz8SxyFCplhTRZjE+4CSSNRKy/CD/g2I/4K1/EzWLWx8W/CP4efAvR5pYhN4l+Kfxi8A39lBA7YeYaT8KdW+Jni")
      [Void]$Code.AppendLine("V3ChvKhfRYfNcKpkjRvNX/Vz/iJn0If+Izr6V/8AxNJwT/rKvDd+Hv8AYX/EXeF/7BeRvMf7W+sf6kc/+s/9ue10+pc31bm/2r+xf7TX10+G+pcS/wBnf2F/YmJ9j9c+t+1/s+v7X2vIqfL9Zt7D2VvtfFry+05P")
      [Void]$Code.AppendLine("dP5+La2uLy4t7Ozt5rq7upora1tbaKSe4ubieRYoLe3giV5ZpppWWOKKNWkkkZURSxAP+mz/AMG6f/BLjXf2Af2YdZ+Kfxq0IaL+0t+0z/YWv+K9A1BGh1f4Y/DjSILufwN8O75XUy2HiO4fVL/xT44tlNu1vqeo")
      [Void]$Code.AppendLine("6T4Y1K2a/wDB4uJV/wCCXH/Bul+zD+wFrug/Gn4p6wf2mf2ltFMd/oHivXtEtdH+G/wy1WLEi33w88DXF3qrz+I7CZtlt468U3+oapaSW1rqXhrSPB981yJf6KPnz1l+9/fg/uZxjpnHOzpj5+tf5SftG/2jeQeO")
      [Void]$Code.AppendLine("+QVfA7wOq5hV8OKuYYXGca8aYzC4nLKnG1TLMTTxmWZNk2W4yFHH4XhrC4+jh8zxeLzPDYTMM0zDCYKlSweDy/B1Kmcfc8IcIVcrqrM8zUFjFCUcNhoyjNYZTjyzqVJxvF13FypxjByhCEptylKSVP8A/9k=")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Helpjpg ********")
      [Void]$Code.AppendLine("`$Helpjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4H4V/8FPv+C+f7")
      [Void]$Code.AppendLine("JP8AwTgv9Q+F9umo/tB/tLWtqr3Pwb8C6zaaZp/guW4iFxZH4q+PJodVsfBk13bsk8Hh/TtI8T+L/s01ne3vh3TtL1Ky1WQ/4L5/8FPtQ/4Jv/skQwfC7UrW2/aW/aDvtZ8CfBy5YpdS+C9O0y1guPHfxVNjcqba")
      [Void]$Code.AppendLine("8l8GWWq6Tp3h+G4SaD/hMPE3h6/vLLUtJsdUs5P8uLW9b1nxLrOreI/EWralr/iDX9SvtZ1zXNZvrrVNY1nWNUupb3UtV1XUr2We81DUdQvJ5ru9vbuaa5urmaWeeWSWRmP+wH7Oj9nRlP0iMpl4z+M8syo+FdHM")
      [Void]$Code.AppendLine("sTlvC3C2XYmtlmM49xmWVnh81x2OzXDuGMwHC+AxkK2V/wDCXVw+aZnmeHx1Olj8so5Y3mPwHF3F1TKKn9nZdyPHOEZ1684qccLGaUqcYwleM604tT99OEIODcZufuf0k/GD/g6v/wCCnvj7Wbu4+G5+B/wK0Hzp")
      [Void]$Code.AppendLine("P7N0rwp8OE8ZanFaFiYk1XW/ibqfi231G9VfllurDRNDtZcBo9Og5BPg/wD8HV//AAU98A6zaXHxIPwP+Oug+dH/AGlpXiv4cJ4N1OW0DAyppWt/DLU/CVvp16y/LFdX+ia5axZLSadPwB45+xV/wSQ+BviX9gDx")
      [Void]$Code.AppendLine("t/wVJ/b6+MvxP+Gn7K2ga5L4e8GeBP2fvDvhzX/jN8RriHx3Z/DGTU7HU/GCXnhXw/bS/EC5m8MaZY6jpN2bttN1fWdV1Tw9pNjbTap9P+L/APghN+zD+1D+wJ4k/b8/4JXfHn44+NdE8D6d411LxJ8Df2nPD/gy")
      [Void]$Code.AppendLine("L4hXj/DuCXUfGfhyw8QfDvT9E0TTvGOnaJEusaFoy6b4k0vxXBe6fa23iTTbq6jV/wDSjPsj/ZncNYnG8BZv4IcF4fh/KuP4eDec+IUfCvNKvCuS+Jc8NSqS4LzTxUp4GWY4XPcPCvRhj8e82lgstxFRwzDNsLXp")
      [Void]$Code.AppendLine("V/ZfG0qnGdZRxVPMsTKtUwv9oU8J9fgq9TB3a+swwLnySpNp8sPZqU0rwpyTV/6l/wDgmD/wXz/ZK/4KP3+n/C+ddR/Z8/aWubZnt/g3461i01PT/GktvEbi9Pwp8eQxaVY+Mp7SBXnn8P6jpHhnxf8AZob28svD")
      [Void]$Code.AppendLine("mo6Xp17qsX7qYfn5p+r/APLOX04xmTOM/czzn7/Ff4h+ia3rPhrWdJ8R+HdW1LQPEGgalY6zoeuaNfXWl6xo2saXdRXum6rpWpWUsF5p+o6feQQ3dle2k0Nza3MMU8EscsasP9R3/ggZ/wAFPb7/AIKQfskTwfFH")
      [Void]$Code.AppendLine("UbW5/aW/Z8vNL8C/GS4ULbS+NNO1LT7qfwH8VhY2u23tJfGdjpWr6d4iggSG3Pi7wx4ivLKy0/StQ0qyi/zW/aL/ALOjKfo75THxn8GJZlW8K62ZYbLeKeFsyxVbM8ZwFjMzrLD5VjsDmuIc8Zj+F8fjJ0cq/wCF")
      [Void]$Code.AppendLine("WtiM0yzNMRgKVTHZnRzNPLvsuEeLqmbVP7OzHkWOUJToV4JQjiowV5xlTXuxrxjep+7ShOCk1CDh7/8AJZ/wdYfGHWvH/wDwU9/4Vvc3c50H4E/Az4beE9K00ybraLU/GUWpfE3W9VWMfIt9qNv4u0TT7qVPv2uh")
      [Void]$Code.AppendLine("6bC3/HsK/mir+lz/AIOr/g/rPgH/AIKef8LIuLSYaD8dfgZ8NfFek6l5LR2kup+DYtS+GWtaUjn5Teadb+EtEv7qJSTHa65psrnNxgfzR1/ud9Bv+xP+JQfo7f2B7H6j/wAQs4Y9v7Dl5P7b+pr/AFl5uTT23+sf")
      [Void]$Code.AppendLine("9q/Wb+99Y9rz+/zH5lxL7X+3839rfm+vV7X39lzfufl7H2dvK1j6RX9rz9ps/s1/8Mcp8ZvG5/Zmk8W/8Jr/AMKaW+iPhV/EjagmrC48sW39pNYnXETX10H7edBHiPPiBdMGtM18f7ovgD478L/8EL/+CB9hY/tI")
      [Void]$Code.AppendLine("31toP7SPx78O/FTxp4H+CN1PGni7V/if8XdHFj4T8NXGiORf2lh4F8IjwTqfxav7uCC38LXCanojPc63PoWn6x/Ch+ybq3iPw3+058AfF3hL4Pax+0Fr/gX4u+APiBY/BLQdN1bVtS+KP/CB+JtN8X3PgqOx0LRf")
      [Void]$Code.AppendLine("EWqy2+vWmiz2N+9noWrvBYS3Nw9hdRRPE3tP/BSP9qn9oP8AbB/a++Lfxd/aQ0Pxv4C8a3Ov3Ol6T8HPHEmtR3nwR8I2rtN4f+GOn6Vrmj+HLvSrPQrO4WW4LeHNEuNa1S8v/EmpWR1TWL24m+K+kR9Hih488X+H")
      [Void]$Code.AppendLine("3hQsNw7wj4QYDimt47+LM8j/ALFwfFPiBxZl2MpZXkeQPLMJUoZjRwudSxWZZjxZxnjMFiqmKWByzLsJjIZinUo9OUZu8qw+Lx3NVxGYToLK8AqvtJUMJQnF1KtXnknBunywhQw8ZRUeec5R5NH8JV/S7/wan/GD")
      [Void]$Code.AppendLine("WfAP/BTw/De3u5hoPx2+BXxN8KarpvmlLWbVPBttp/xN0TVWj+4b7TrfwjrdhaTOD5NrrmooB+/JH80Vf0uf8Gp/we1jx/8A8FPf+FkW9nKdB+BPwM+JfizVdSMLyWkOp+MoNO+GWiaU7rwL3Ubfxdrd/axMQZLX")
      [Void]$Code.AppendLine("Q9RkB/0cg/a/Tk/sT/iUH6RP9v8AsfqP/ELOJ/Ye35eT+2/qb/1a5efT23+sf9lfVre99Y9lye/ynNw17X+38o9lfm+vUL239lzfvvl7H2nN5Xuf1qf8F9P+CYV9/wAFH/2SIZ/hfYWdz+0r+z5e6z47+Dlu8yQy")
      [Void]$Code.AppendLine("+NNO1K0gh8efCo311tt7SXxlY6XpOpaDcTyQW3/CY+GfDtpe3unaTqmp3sX+XFreiaz4a1nVvDviLSdT0DxBoOpX2ja5oetWN1pesaNrGmXUtlqWlarpt7FBe6fqWn3kE1pfWN3DDc2tzDLBPFHLGyj/AG8yWyOZ")
      [Void]$Code.AppendLine("fvD/AJawj+J+MY5PBGzoSCp4QV+FH/BT7/ggZ+yR/wAFH7/UfihBNe/s+ftLXVqq3Hxl8DaZpuqab4zkt4hbWX/C1vAc11pNj4zktIFS3h8Q6fq/hnxh5MNnY3viLUNJ06y0uL/DL9nR+0Xyn6O+Uy8GPGeOZVvC")
      [Void]$Code.AppendLine("utmWJzLhbinLsNWzPGcBYzM6zxGa4HHZVh1PGY/hfH4ydbNP+EuliM0yzM8RjqlLAZnRzNrLv03i7hGpm9T+0cu5FjlCMK9CclCOKjBKNOUZytGFaEUoe+1CcFBOUHD3/wCGL/ghx/wUT+EP/BNH9sjVPjb8b/h9")
      [Void]$Code.AppendLine("4g8beAvGHwk8T/Cq+1PwbY6VqfjTwHc674g8JeIrbxToOm6zqWj2eowyN4VbQNdsotW03UDo2s3d1ZXF29o+i6vgf8Fsf+CgXwq/4KS/ts3fx/8Agx8P9c8B+AdG+GHg74XaZP4ss9L07xj46l8K6j4m1Sfxv4p0")
      [Void]$Code.AppendLine("7R9Q1iysL64/4SSPw3pdr/bOqXMfhfwzoBu57a4aTTLH7p+MH/Bqf/wU98A6xd2/w3PwK+OugiaX+zdU8KfE228G6pLaqf3baronxNsPCVtp18U+ae1sNc1y1hyAmpT8kL8H/wDg1O/4KfePtYtIPiR/wov4FaCZ")
      [Void]$Code.AppendLine("YjqWqeK/iZbeMtUitGbEjaVovwysPFttqN6BzBa3+uaHaTEFX1KDgn/WCHjD+z5p+L1b6V8fHzgH/X+vwLHgupUfiA3L+wo1KdfmXAXP/bazN0qVPDOl/ZluWPOsAswcsS/hP7P4reXrIv7KxX1VYr6yv9k/5e2t")
      [Void]$Code.AppendLine("/vVvZcl23fn625+S0T+bXRNE1nxLrOk+HPDuk6lr/iDX9SsdG0PQ9GsbrVNY1nWNUuorLTdK0rTbKKe81DUdQvJ4bSysrSGa5urmaKCCKSWRVP8AqO/8EC/+CYN9/wAE3/2SZrj4oafZW37S/wC0He6N47+McCTx")
      [Void]$Code.AppendLine("TTeC9N02wuovAfwpF9a74LqXwbY6rq2o6/cQSTW3/CYeJvEdhZ3moaXp+l3srv8AgmB/wQL/AGSf+Cb9/p3xQuJb/wDaD/aXtbWVIPjJ460nTdM03wXLPCba+Hwp8BxXWrWXgyW6hd7e48Q6jq3ibxikEt5Z2XiL")
      [Void]$Code.AppendLine("T9K1G90uX91vnz1l+9/fg/uZxjpnHOzpj5+tf5PftF/2i+U/SIymPgx4MRzKj4V0cyw2ZcU8U5lha+WYzj3GZZXWIyrA4HKsQoYzAcL4DGQo5r/wq0cPmmZ5ph8BVqYDLKOWJZj93wjwjUymp/aOY8jxzhKFChBq")
      [Void]$Code.AppendLine("ccLGatOUqi92VeUb0/3bcIQckpzc/c//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Warningjpg ********")
      [Void]$Code.AppendLine("`$Warningjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4CYfA+a4zt5+R8")
      [Void]$Code.AppendLine("53np+8wDtxxyuMnO44BlRn5kOWH/AC2l/wCejMMkDHHZugPzkneM8R8RPHWh/DXwV4h8b688Q07QNNkumgSaSOa/umkWGw0y18z5ftWpX0tvZW6t8qzTrNIViV2Hn5tmuW5FleZZ3nGMoZdlOT4DF5pmeYYqfs8N")
      [Void]$Code.AppendLine("gsvwGHqYrGYuvPXko4fD0qlWpKztCDaTeh1YLBYvMsbhMuwGHqYrHY/E0MHg8NRjzVcRisTVjRoUKUftVKtWcYQXWUkfJn7Xf7UWr/CGXTfBHgC5tB411G2/tPVdTvIEvV8OaVI7R2McNlcPJay6nqLxyzRrfxyp")
      [Void]$Code.AppendLine("a2ESyyWcx1C0mgP2RP2otW+L0upeB/H1zaHxrp1t/amlanZwJZL4j0qN1jvo5rG3aK1j1TTXkimkFhHFHd2ErSx2cB0+7mn/ADa8P+E/iZ+1J8UvEN1pv2W88R63Ld+Itb1HUrh7PR9HsRLFbwJLP5V1cR2dor2e")
      [Void]$Code.AppendLine("l6ZZW0F3diCOFI4XigmkjXxD4S+Jv7LXxS8PXWpC1s/EeiSWfiPRNQ065e80fWbAyS28yRz+Va3ElneIl5pmpWdzBaXZt5ZkkhSKeGWT/EL/AIm/8e/+Iuf8TELL+N39Gv8A1v8A9UP7F+r4r/VH/Vrnjg7+x5fq")
      [Void]$Code.AppendLine("P+tvsb5v/aTmqn9uf8If19ZfbAn+hX/EDPDf/Un/AIhb9Z4e/wCIsf2Gs8+v+1of25/azj7de/f6z/YntH9R+qcvL/Z3/Cj9W+tf7Sf0HYfH3rjO3/nnJnO7/rpjdj/gO3/bow/PzT9X/wCWcvpxjMmcZ+5nnP3+")
      [Void]$Code.AppendLine("K4r4d+OdD+JXgnw/430B4zp2v6ZHdiBpJJJbC6WYwX+mXRjO37Tpt7HPZXAX5WuIWkj3QsjntiEyfufemHLTZ+VATnnr/wA9D0ZeFya/29ynNstz7KstzzJ8ZQzHKc4wGEzTLMwws1Uw2Ny/H4enisHi6FRaTo4j")
      [Void]$Code.AppendLine("D1adWnLS8Jp2R/nrjcFi8txmLy/H4ephcbgcTXweMwtaPJVw+Kw1WVGvQqx+zUpVYShNdJRaHEtkcy/eH/LWEfxPxjHJ4I2dCQVPCCvx8/bv+NZ8VeK7b4UaFeM+heCrk3PiN45g8d/4teJ0FozINssfh+0me3IB")
      [Void]$Code.AppendLine("BXUrzUYJkL2EDL+hP7R3xftfgv8ADLWPEkbwHxHqG7RfCNnLBGDca5eRzeXdNHJu32mk26SandhlCSJbQ2bSRzXkZP8APxd3Vze3Vxe3lxLdXd3cTXV1c3EzST3FxcOZZ55pXLPJLNK7SSO5Lu7F2JLE1/lt+0q+")
      [Void]$Code.AppendLine("kB/YXD+A8COGcby5txRRw+dcdVcPUtPBcN0q6nlWRzlCScK2eY2h9dxlJyhUjleBoUqtOrhM51/sT6Jvhn/aOZ4nxHzbDqWCyepVwHDlOrC8MRmsqfLjcxjGStKnl1Cp9XoTtKDxmIqThKFfAafd3/BPbXhp/wAX")
      [Void]$Code.AppendLine("vEOhyOVj8QeB74whXVWe+0nU9Nu4l3PwEFjJqTsfvZRWA+Wn/wDBQvXBffF3w1okb7o9C8CWLzAvuZL3VtU1S4lTI4K/YoNOkDcEtIxxgjPzt+zh48sfht8ZfBvi7VEv5tLsZdVtdQt9Mtm1G+ng1XQ9T0xEt7FC")
      [Void]$Code.AppendLine("rXUi3V3bzCJWBLRBlyVwZf2k/H1h8S/jL4v8W6SmoQ6Td/2PZadBqlq2nX8EOl6HpunTpcWLszWsjX9vdzGNjkGUlgC2K/iReLuWL6BsvCx5rhf9Y/8AiN8cJHI/ar67/qi8rjxd/avsL3+pLiNPCObdvrLS2dz+")
      [Void]$Code.AppendLine("gnwRi/8AiZCPGKwVX+yv+Ie+2eYcj+rf24sZ/Yn1Jzvb6w8qtX5f+fV2fSX7CHxrPhXxXdfCfXbtk0LxrcC58NvJMEj0/wAWpHGhtFZ8LHH4hs4UtgCW3alZ6fDBGHv53P7BknJ5b703/LZB0QY4xxjsOsZ+ZuK/")
      [Void]$Code.AppendLine("l9tbq5sbq3vbO4ltbuzuIrq1uYJmint7m3dZYJ4ZEIeOWGVFkjdCHjdVdSCAa/oI/Zx+L9r8aPhlo/iSR7ceI9P26L4vsooFJt9cs4I/MuljQjZZ6vC0OqWoUFY/tMlmJHazm2/2z+zU+kD/AG9w9j/AjibG82bc")
      [Void]$Code.AppendLine("L0cRnXAtXEVb1Mbw3Vrc+a5HCc5c062R42v9dwdJSnUlleOr0qVOlhMm0/n36WXhn/Z2Z4bxHynD2wWbzpYDiOFKHu4fNYU+TBZjJRVowzGhT+r15tRgsZh6c5ynXx5+S/7Xfxhn+K3xV1K1sppP+ET8ETXvhzw9")
      [Void]$Code.AppendLine("BuZ4rieCdo9b1sBicyarfwBYXwhbTbPTQ8aS+bu+WDnPfr2A9B6/z+o9K/WD4hf8E9rXxB4q1jXfCHj5NC03WdQu9QGh6tof9oNp097PLPLb2uo22r2pntFlkdbaKazWe3hVYZLm7dTOeIP/AATh8Qnn/haWiY+9")
      [Void]$Code.AppendLine("k+Grrpwuf+Q3jG7jPTOO9fyJ4sfRE+mFx34lcbcXZ34d1s/zDPuIcxxss1wXE/CEsvxOFlWVLLo5fDFcQYfFUMtw2X0sLhcvwuJw+HxGEwVChh61ClUpSpx/cOCvHDwM4c4T4fyPL+KKeW4bLcrwuHWCxGT54sTR")
      [Void]$Code.AppendLine("rKmp4p4p0csq0amKq4qVatiq1GrVpVsRUqVadScZqT8V/Yv+Inw6+HHxL1PUfiDLbaYupeHZdN0LxFfW8k1ro9+93byXCSvbxzS2I1G0R7f7eECwoj2s0kVveyuF/bR+Ivw6+I/xL0zUfh7Lbamum+HYtN17xFZW")
      [Void]$Code.AppendLine("8sNrrGoJeXElukLzxQy3w06zeO3+3shWZHS1hllt7KFq9o/4dweIv+io6J3H/Is3X8Iy3/Mc6r39uuKd/wAO3/EWP+So6L0/6Fm6/ib5f+Y50Y9PfpmvsX4KfTV/4gL/AMS+LwKyb/VX/WlcUf21/afB3+sn1lV1")
      [Void]$Code.AppendLine("ivYfW/8AXD6p/vH7v659S+v/ANnp5Z9Z+pr2Z4X/ABEDwA/4iR/xE7/iI2P/ALZ/sf8Asf6h9Tz3+yfY+z9j7T2H9he3/h+99X+sfVvrP+1+x9v75+avOe/U9h6cf/WP4Gvqf9kX4xT/AAo+Kum2t7NJ/wAIp43m")
      [Void]$Code.AppendLine("sfDfiCDeyRW89xOYtG1vCkYfSr24KTuQxTTL3UgiPI0W36D/AOHcHiLk/wDC0dG/iP8AyLN10HDE/wDE77Hhu3rg12/w+/4J622geKtG13xh49XXdM0fULTUDoek6F/Z7alPZSpdQ291qFzq90YbRpI0F1FDZtPP")
      [Void]$Code.AppendLine("btJHHc2rlZR8b4S/RD+mFwJ4lcE8X5J4d1sgzDIeIcuxsc2x3E3CCwGGwsa8aeYxzGGE4hxGKr5dicuqYrC5hhsNh6+IxeCr18NRoValWMH7vGvjf4F8R8J8QZHmHFFPMsLmWV4rDvBYfKM8eJrVvZueFeFdbLKV")
      [Void]$Code.AppendLine("GniqWKjRrYWtWqU6VHEU6dWpUhGEpL//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region ******** `$Errorjpg ********")
      [Void]$Code.AppendLine("`$Errorjpg = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAYABgAAD//gA8Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gMTAwCv/bAEMAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB")
      [Void]$Code.AppendLine("AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/bAEMBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAf/AABEIADAAMAMBIgACEQEDEQH/")
      [Void]$Code.AppendLine("xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNU")
      [Void]$Code.AppendLine("VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQID")
      [Void]$Code.AppendLine("BAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqC")
      [Void]$Code.AppendLine("g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP77OSRhpiN2GwsuDh3BGd+QAMA9WGBj5t4CYfA+a4zt5+R8")
      [Void]$Code.AppendLine("53np+8wDtxxyuMnO44BlRn5kOWH/AC2l/wCejMMkDHHZugPzkneM+EftL/tA+BP2WvgV8Sfjz8Q7iJPDXw78NXOrtYR3LQXviDV5JUsvDvhXSmmBj/tXxPr1zp+iacsgMUd1fR3VwUtIppEwxWKw+Cw2IxmLrQw+")
      [Void]$Code.AppendLine("FwlCricTXqPlp0aFCEqtWrOXSFOnGUpPokz1ciyPN+Js7yfhvIMvxObZ7n+aYDJcmyvB03VxeY5rmmKpYLL8Dhaas6mIxeLr0qFKF1zVKkVdLU/HP/gs3/wVk8YfsY3fhf4C/s6X2iL8c/EulDxX4v8AFWr6da+I")
      [Void]$Code.AppendLine("Ivhp4TuZZINAtrPQ9QNzpF14r8Tz293eRJr1re22keH7SK7n0e8bxFpN7Yn/AARk/wCCsnjD9s678UfAX9ou+0Rvjn4a0pvFfhDxVpGnWvh+H4l+E7aWODXra80PTzbaRa+K/DE9xa3kyaDbWVtq/h+7ku4NHs28")
      [Void]$Code.AppendLine("O6te338vXw3+D37VH/BWj9rP4j6r4Wi0jW/iZ46u9Z+JXjrxJ4l1WfRfBXgrw+Lq002whu9QFtquoW2iaPFPovhTwxo2mWGr6r9gtrOC2sprWwvbm2X4k/Bz9qj/AIJLftZ/DfVvFMWkaJ8TfA11ovxL8CeI/DWq")
      [Void]$Code.AppendLine("z614K8a+H2u7zTb6G1vzbaVqFzomsRW+teFfE+janYaRqv8AZ91dwXNlDaX9lc3P8df8RU42/wBaP9fPYZx/xD7+1f7L+p+zqf2X/Z/N7L4bex/tTl/2r6xfm+uf7H7f2H7k/wCkP/iQX6MH/ECP+JTv7V8N/wDi")
      [Void]$Code.AppendLine("cH/UP/X3/WH63gv9fP8AXD2X9ocvt7/2n/qJ7f8A4Qf7H9n7L/Vv/jJP7LWa/wDCmf6Q+Hx964zt/wCecmc7v+umN2P+A7f9ujD8/NP1f/lnL6cYzJnGfuZ5z9/ivCf2aP2gPAn7UvwJ+G/x5+HlxG/hr4h+GbbV")
      [Void]$Code.AppendLine("xYSXDXF54e1iOZ7HxD4V1VocR/2p4Y1221DRNR8tRFLeWL3NsXtJoZX93ITJ+596YctNn5UBOeev/PQ9GXhcmv7FwuKw+Nw2HxmErQxGFxdClicNXpvmp1qFeEatKrCXWFSnKMovqmj/AJvM9yPN+Gc7zjhvP8vx")
      [Void]$Code.AppendLine("OU57kGaY/Jc5yvGU3SxeXZrleKq4LMMDiqbu6eIwmLoVaFaF3y1KcldrUcS2RzL94f8ALWEfxPxjHJ4I2dCQVPCCv4rf+Dg79uo/Fz4v6Z+yB8PtZaf4ffAzUjqnxMntLkSWviL4xTWstuNIleImO4tfhxpF5Ppj")
      [Void]$Code.AppendLine("gMpTxTrXiSxvYGm0KxlT+kj/AIKb/tpaX+w3+yr4z+J1tcWTfE3xGH8DfBrRbm3ic6h4+1u1u/s2rzWku77Ro/g7T4rvxTq6yKtvdR6baaK9xBeazaF/84vVtW1PXtV1PXNb1C81bWda1C91bV9V1C4lu7/U9T1G")
      [Void]$Code.AppendLine("5kvL/UL66nZ5rm8vLqaW5ubiZ3lmmkeSRmdiT/N30g+OfqWBo8F5dWtisxjDF51KnL3qOXxnzYbBycXeM8bVh7atFuMlhqMIyUqWLP8Aa39j39Fj/WfirM/pN8Y5bz5FwXiMVw94Z0MXSvSzHi+th/Z53xJThUjy")
      [Void]$Code.AppendLine("1cPw1l+J/s7L6yjUozzrMsTWo1aWO4f0/oH/AODbr4hJ4c/bP+JHgK5k8u3+I/wH182QVkWSXXvB3inwrrNpEGcY8saDceJ5pMHcGhiYAhSVn/4OSvHya/8AtmfC/wACW0okg+H3wD0Ka9G4M8OueMPF3i7UrqEl")
      [Void]$Code.AppendLine("f4f7EsfDlwpOCzXEhChSpb81/wDgmL+0JoP7Lv7b/wAEvjL4st/EV74T0G78X6R4j0/wno03iHX9Q0/xb4C8UeFoLfTdDt5IptUuI9V1fTryO1icOz2quocoEaz/AMFQ/wBonw9+1N+2/wDGb4xeD7fxHZeD9Ybw")
      [Void]$Code.AppendLine("VofhrT/FujTeHfEOn2XhPwD4Y8OX9vqWh3Ekk2mTya9pusXhtZHLqLrewDOQPx5cU4f/AIgo+G3iqf1//XH2SwfN++/sv6ss0+s8n/PlZhek3/z8t3P9HJeA2c/8VPIeNayTGf6o/wDEt8sdLiT2Ev7NXHizl8CL")
      [Void]$Code.AppendLine("I3iPh/tF8IuOYKn/ANAibvdWf6e/8G+P7dR+Efxf1T9kD4g6w0Pw++OepDVPhnPeXPl2vhz4xQ20NudIieUrHb23xH0ezg0tAzOX8U6N4bsbKBZ9dvpm/tTJOTy33pv+WyDogxxjjHYdYz8zcV/lAaTq2p6Dquma")
      [Void]$Code.AppendLine("5omoXmk6zouoWWraRqun3Etpf6ZqenXMd5YahY3UDJNbXlndQxXNtcQuksM0aSRsrqCP9HX/AIJkftpaV+3J+yr4M+J1zPYp8TfDYj8C/GXRba3jQ6f4+0Sytxc6vDaRFfs+j+MrGWz8VaSsStBajU7nRUnmuNGv")
      [Void]$Code.AppendLine("dn7B9Hzjn67ga3BWY1r4rLoVMXks6kryrZfKd8Tg05O8p4OtP21GN3J4atOMYxpYQ/zj/bCfRY/1Y4qyz6TfB2W8mRcZ4jC8PeJlDC0rUsu4uo4f2WR8SVIU1y0sPxJl2G/s7MKzjTowzrLcNWrVauO4g1/jp/4L")
      [Void]$Code.AppendLine("Mftr3/7X37XPibSdDvpz8IPgNfa58MfhvYCZ2tNRvtP1I23jnx15bMytceLde05Y7KdRGZPC2i+GVmhiu0u9/wCSFf2DftH/APBt3pPxF+LfjT4gfBj9ouHwB4X8a+ItX8S/8IJ4v8AyeJJPDF9reoXGo3mnaR4k")
      [Void]$Code.AppendLine("0vxbpL6ho0d1cTx6Va3+ixX+n2UcNpdanrE6Pev4P/xDF/Enr/w1t4HxjOf+FWa10zjP/I7dM8Z9eOtflnE/hb4rZ1xDnGaYzIZ46vjcfiKzxVHMcqdCpSc3GgqCqY6FSGHp0I06dCnUhCdKjCFOcIyi4r+9fAv6")
      [Void]$Code.AppendLine("en0AvDPwf8OeA+HPFjD8L5VwxwplOXQyPMuDOPY5pg8bHDxrZtPNp4HhXFYLE5vjM1q43G5rjMHisVhcbmGJxOLw+Ir0q0Kkvhb/AIIbftL/ALM/7MX7U3irxP8AtH3ml+FY/E3w4vPDHw/+JWt6bc6jpXgrxDPq")
      [Void]$Code.AppendLine("+nXOpQ3c1na3lzoA8S6PBPp3/CSRwLHaRQz6Ve3Nrp2t3koX/guT+0v+zN+07+1N4V8T/s4XmmeKo/DPw4s/DHxB+JWiadc6fpPjXxDBrGo3Wmw2k15aWVzrw8NaNPBpv/CRyQvHdxTQ6VZXV1p2i2cp+6P+IYv4")
      [Void]$Code.AppendLine("lf8AR2vgfuP+SWa11UZYf8jt/COT6DrS/wDEMV8S/wDo7TwR2P8AySvWujHCn/kdv4jwPU9K9b/VDxe/1J/1F/1Lwn9m/wBo/wBpfXPrOVf2h7RzVXk9r/avsvj911fY+39h/s/tPZLlPz//AImL/Z0/8TPv6Vf/")
      [Void]$Code.AppendLine("ABMxn/8Ars+C/wDUr/V7+xfED/U/6n9VWB+s/UP9QPr/APuy9p/Z/wDaP9l/2p/wsfVP7Q/en8uFfrf/AMEZ/wBte/8A2Qf2uvDOk63fTj4QfHm+0P4Y/EiwMzpa6bfajqP2XwP462KwVbjwlrupPDfTkSFPCut+")
      [Void]$Code.AppendLine("Jkihlu3tdn6Qf8QxXxL/AOjtPBHc/wDJK9a6KcMf+R2/hPB9D1r3j9nH/g260r4dfFvwV8QPjP8AtFRePvC3grxHpHiU+BPCHgCTw3J4nvdEvYdUsdO1bxJqni3VXsNGlurWBNVtbHRpb/UNPe4t7TU9ImZLxPJ4")
      [Void]$Code.AppendLine("Y8LfFXJeIcnzTB5DPA18Fj8PWWJrZjlSoU6Smo11iFSx06s8PUoSqUq9OnCdSrRnOnCEpSSf6B46fT0+gF4meD/iNwHxH4sYfijKuJ+FM2y2eR5bwZx7LNMZjZYeVbKZ5TPHcK4XBYbN8Hm1LBY7KsbjMVhcLgcw")
      [Void]$Code.AppendLine("w2GxeIxNClRnVj//2Q==")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyResponsePictureBox = System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyResponsePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox = New-Object -TypeName System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Controls.Add(`$DialogMyResponsePictureBox)")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
      [Void]$Code.AppendLine("    switch (`$Image)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `"Info`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponsePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Infojpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Help`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponsePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Helpjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Warning`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponsePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Warningjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `"Error`"")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponsePictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Errorjpg))")
      [Void]$Code.AppendLine("        break")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.Name = `"DialogMyResponsePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.Text = `"DialogMyResponsePictureBox`"")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.Size = `$DialogMyResponsePictureBox.Image.Size")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox.MinimumSize = `$DialogMyResponsePictureBox.Image.Size")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogMyResponseLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogMyResponseLabel`"")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.Controls.Add(`$DialogMyResponseLabel)")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.Font = `$DialogMyResponseForm.Font")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.Location = New-Object -TypeName System.Drawing.Point((`$DialogMyResponsePictureBox.Right + `$DialogSpacer), `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.Name = `"DialogMyResponseLabel`"")
      [Void]$Code.AppendLine("    `$TempSize = `$DialogMyResponseLabel.CreateGraphics().MeasureString(`"X`", `$DialogMyResponseLabel.Font)")
      [Void]$Code.AppendLine("    `$TempWidth = [Math]::Floor(`$TempSize.Width * `$Width)")
      [Void]$Code.AppendLine("    `$TempHeight = [Math]::Max((`$DialogMyResponsePictureBox.Bottom - `$DialogMyResponseLabel.Top), ([Math]::Ceiling((`$DialogMyResponseLabel.CreateGraphics().MeasureString(`"X`$(`$Message)X`", `$DialogMyResponseLabel.Font)).Width / `$TempWidth) * `$TempSize.Height))")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.Size = New-Object -TypeName System.Drawing.Size(`$TempWidth, `$TempHeight)")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel.Text = `$Message")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> Create / Configure Dialog Buttons <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    switch (`$Buttons)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `"OK`" { `$ButtonValues = @(`"OK`"); Break }")
      [Void]$Code.AppendLine("      `"OKCancel`" { `$ButtonValues = @(`"OK`", `"Cancel`"); Break }")
      [Void]$Code.AppendLine("      `"AbortRetryIgnore`" { `$ButtonValues = @(`"Abort`", `"Retry`", `"Ignore`"); Break }")
      [Void]$Code.AppendLine("      `"YesNoCancel`" { `$ButtonValues = @(`"Yes`", `"No`", `"Cancel`"); Break }")
      [Void]$Code.AppendLine("      `"YesNo`" { `$ButtonValues = @(`"Yes`", `"No`"); Break }")
      [Void]$Code.AppendLine("      `"RetryCancel`" { `$ButtonValues = @(`"Retry`", `"Cancel`"); Break }")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$ButtonCount = `$ButtonValues.Count")
      [Void]$Code.AppendLine("    `$TempWidth = [Math]::Floor(`$DialogMyResponseLabel.Right - (`$DialogSpacer * `$ButtonCount)) / `$ButtonCount")
      [Void]$Code.AppendLine("    `$TempMod = (`$DialogMyResponseLabel.Right - (`$DialogSpacer * `$ButtonCount)) % `$ButtonCount")
      [Void]$Code.AppendLine("    `$DialogMyResponseButton = New-Object -TypeName System.Windows.Forms.Button[] -ArgumentList `$ButtonCount")
      [Void]$Code.AppendLine("    `$TempLeft = `$DialogSpacer")
      [Void]$Code.AppendLine("    For (`$Count = 0; `$Count -lt `$ButtonCount; `$Count++)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      #region `$DialogMyResponseButton[] = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Creating Form Control ```$DialogMyResponseButton[`$Count]`"")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count] = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("      `$DialogMyResponseForm.Controls.Add(`$DialogMyResponseButton[`$Count])")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].AutoSize = `$True")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].DialogResult = `$ButtonValues[`$Count]")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Enabled = `$True")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Location = New-Object -TypeName System.Drawing.Size(`$TempLeft, (`$DialogMyResponseLabel.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Name = `"DialogMyResponseButton`$Count`"")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Text = `$ButtonValues[`$Count]")
      [Void]$Code.AppendLine("      if (`$Count -eq 1 -and `$ButtonCount -eq 3)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponseButton[`$Count].Width = `$TempWidth + `$TempMod")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      else")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogMyResponseButton[`$Count].Width = `$TempWidth")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      `$DialogMyResponseButton[`$Count].Visible = `$True")
      [Void]$Code.AppendLine("      `$TempLeft = `$DialogMyResponseButton[`$Count].Right + `$DialogSpacer")
      [Void]$Code.AppendLine("      if (`$Count -eq 1 -and `$ButtonCount -eq 2)")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$TempLeft = `$TempLeft + `$TempMod")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      #endregion")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogMyResponseButton[(`$DefaultButton - 1) % `$ButtonCount].Select()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogMyResponseForm.Controls[(`$DialogMyResponseForm.Controls.Count - 1)].Right + `$DialogSpacer), (`$DialogMyResponseForm.Controls[(`$DialogMyResponseForm.Controls.Count - 1)].Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm.ShowDialog()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$TempSize = `$Null")
      [Void]$Code.AppendLine("    `$TempWidth = `$Null")
      [Void]$Code.AppendLine("    `$TempHeight = `$Null")
      [Void]$Code.AppendLine("    `$TempLeft = `$Null")
      [Void]$Code.AppendLine("    `$ButtonCount = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyResponseForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyResponsePictureBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyResponseLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogMyResponseButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Funcation for DialogGet-MyResponse`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
    "Help-About"
    {
      #region ******** function DialogHelp-About *********
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("#region function DialogHelp-About")
      [Void]$Code.AppendLine("function DialogHelp-About()")
      [Void]$Code.AppendLine("{")
      [Void]$Code.AppendLine("  <#")
      [Void]$Code.AppendLine("    .SYNOPSIS")
      [Void]$Code.AppendLine("    .DESCRIPTION")
      [Void]$Code.AppendLine("    .PARAMETER DialogName")
      [Void]$Code.AppendLine("      Hep Dialog Name")
      [Void]$Code.AppendLine("    .PARAMETER FontFamily")
      [Void]$Code.AppendLine("      Dialog Font Family")
      [Void]$Code.AppendLine("    .PARAMETER FontSize")
      [Void]$Code.AppendLine("      Dialog Font Size")
      [Void]$Code.AppendLine("    .PARAMETER DialogSpacer")
      [Void]$Code.AppendLine("      Dialog Control Space")
      [Void]$Code.AppendLine("    .PARAMETER Owner")
      [Void]$Code.AppendLine("      Parent Calling Form")
      [Void]$Code.AppendLine("    .PARAMETER BackColor")
      [Void]$Code.AppendLine("      Dialog Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ForeColor")
      [Void]$Code.AppendLine("      Dialog Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER GroupForeColor")
      [Void]$Code.AppendLine("      Control  Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonBackColor")
      [Void]$Code.AppendLine("      Button Back Color")
      [Void]$Code.AppendLine("    .PARAMETER ButtonForeColor")
      [Void]$Code.AppendLine("      Button Fore Color")
      [Void]$Code.AppendLine("    .PARAMETER Image")
      [Void]$Code.AppendLine("      Help Message Encoded Imaged")
      [Void]$Code.AppendLine("    .PARAMETER Text")
      [Void]$Code.AppendLine("      Help Message Message")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogHelp-About -Message `"This is the Help-About.``r``n``r``nThis is the Message to Display.`" -FontFamily `"Verdana`" -FontSize 10")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogHelp-About -Message `"This is the Help-About.``r``n``r``nThis is the Message to Display.`" -DialogName `"Help About`" -ScriptBlock { Write-Host -Object `"ScriptBock Executed`" } -NoTitle")
      [Void]$Code.AppendLine("    .EXAMPLE")
      [Void]$Code.AppendLine("      DialogHelp-About -Message `"This is the Help-About.``r``n``r``nThis is the Message to Display.`" -DialogName `"More Help About`" -BackColor `"Black`" -ForeColor `"Red`" -GroupForeColor `"Yellow`" -ButtonBackColor `"DimGray`" -ButtonForeColor `"Ivory`" -ScriptBlock { Write-Host -Object `"ScriptBock Executed`" } -NoTitle")
      [Void]$Code.AppendLine("    .NOTES")
      [Void]$Code.AppendLine("      Original Function By Ken Sweet")
      [Void]$Code.AppendLine("    .LINK")
      [Void]$Code.AppendLine("  #>")
      [Void]$Code.AppendLine("  [CmdletBinding()]")
      [Void]$Code.AppendLine("  param(")
      [Void]$Code.AppendLine("    [parameter()]")
      [Void]$Code.AppendLine("    [String]`$DialogName = `"Help-About`",")
      [Void]$Code.AppendLine("    [Switch]`$NoTitle,")
      [Void]$Code.AppendLine("    [int]`$Width = 25,")
      [Void]$Code.AppendLine("    [System.Drawing.FontFamily]`$FontFamily = $($CGenConfig.ToolName)Config.FontFamily,")
      [Void]$Code.AppendLine("    [Int]`$FontSize = $($CGenConfig.ToolName)Config.FontSize,")
      [Void]$Code.AppendLine("    [Int]`$DialogSpacer = $($CGenConfig.ToolName)Config.FormSpacer,")
      [Void]$Code.AppendLine("    [System.Windows.Forms.Form]`$Owner = $($CGenConfig.ToolName)Form,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$BackColor = $($CGenConfig.ToolName)Color.BackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ForeColor = $($CGenConfig.ToolName)Color.ForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$GroupForeColor = $($CGenConfig.ToolName)Color.GroupForeColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonBackColor = $($CGenConfig.ToolName)Color.ButtonBackColor,")
      [Void]$Code.AppendLine("    [System.Drawing.Color]`$ButtonForeColor = $($CGenConfig.ToolName)Color.ButtonForeColor,")
      [Void]$Code.AppendLine("    [String]`$Image,")
      [Void]$Code.AppendLine("    [Parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("    [String]`$Message,")
      [Void]$Code.AppendLine("    [ScriptBlock]`$ScriptBlock")
      [Void]$Code.AppendLine("  )")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Enter Funcation for DialogHelp-About`"")
      [Void]$Code.AppendLine("  Try")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    #region `$DialogHelpForm = System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogHelpForm`"")
      [Void]$Code.AppendLine("    `$DialogHelpForm = New-Object -TypeName System.Windows.Forms.Form")
      [Void]$Code.AppendLine("    `$DialogHelpForm.BackColor = `$BackColor")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Font = New-Object -TypeName System.Drawing.Font(`$FontFamily, `$FontSize, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)")
      [Void]$Code.AppendLine("    `$DialogHelpForm.ForeColor = `$ForeColor")
      [Void]$Code.AppendLine("    if (`$NoTitle)")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogHelpForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::None")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    else")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogHelpForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedToolWindow")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    `$DialogHelpForm.KeyPreview = `$True")
      [Void]$Code.AppendLine("    `$DialogHelpForm.MaximizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogHelpForm.MinimizeBox = `$False")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Name = `"DialogHelpForm`"")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Owner = `$Owner")
      [Void]$Code.AppendLine("    `$DialogHelpForm.ShowInTaskbar = `$False")
      [Void]$Code.AppendLine("    `$DialogHelpForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterParent")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Text = `$DialogName")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogHelpFormKeyDown")
      [Void]$Code.AppendLine("    function Start-DialogHelpFormKeyDown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          KeyDown event for the DialogHelpForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          KeyDown event for the DialogHelpForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogHelpFormKeyDown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter KeyDown Event for ```$DialogHelpForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        if (`$EventArg.KeyValue -eq 27)")
      [Void]$Code.AppendLine("        {")
      [Void]$Code.AppendLine("          `$DialogHelpForm.Close()")
      [Void]$Code.AppendLine("        }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit KeyDown Event for ```$DialogHelpForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogHelpForm.add_KeyDown({Start-DialogHelpFormKeyDown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogHelpFormShown")
      [Void]$Code.AppendLine("    function Start-DialogHelpFormShown()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          Shown event for the DialogHelpForm Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          Shown event for the DialogHelpForm Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogHelpFormShown -Sender `$This -EventArg `$PSItem")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter Shown Event for ```$DialogHelpForm`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$DialogHelpForm.Refresh()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit Shown Event for ```$DialogHelpForm`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogHelpForm.add_Shown({Start-DialogHelpFormShown -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region >>>>>>>>>>>>>>>> `$DialogHelpForm Controls <<<<<<<<<<<<<<<<")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    if (-not `$PSBoundParameters.ContainsKey(`"Image`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("#region `$Image")
      [Void]$Code.AppendLine("`$Image = @`"")
      [Void]$Code.AppendLine("/9j/4AAQSkZJRgABAQEAZABkAAD/4QAiRXhpZgAATU0AKgAAAAgAAQESAAMAAAABAAEAAAAAAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0M")
      [Void]$Code.AppendLine("DgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCADVAJsDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQF")
      [Void]$Code.AppendLine("BgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG")
      [Void]$Code.AppendLine("h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQA")
      [Void]$Code.AppendLine("AQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmq")
      [Void]$Code.AppendLine("srO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9/KKKKACiivl//gpD+3RL+y/4X0nwv4U/s65+J/jVJ20mO9Qy2eh2UQUXOr3iAqWggMkSJEGUzzzQxBkU")
      [Void]$Code.AppendLine("ySxZ1KkKcHUm7JatlRi5NRjuzxL9vP8A4LpfCX4d+Mta+EPgLxlrWqfFa2V4Xu/Cv9lXFvoNwrFSk0l+TFOVZXWWK1jnkRo3R/Kfp5n+y3/wWK+O3w505h8dPDPgHx5pdtKUkvvARktNcS3AOLk2Msjw3ch4MkMU")
      [Void]$Code.AppendLine("kDoOIUunOwfJlkNc+I3jDWPDPwo0248QaoJ1h8UeLdXuPKgS4RQAl1PEmZpkXASxtYxFbIUjAtI9gqv8U/2Efj94dt9P1Dwj4y8Fa5cqd9/Z6vYSaXbyjjEVvGhnk3nn95LdKowBtGSw+IxfFkvbqFFxiv717v1t")
      [Void]$Code.AppendLine("8N+l/XY+kw3D850+eSb9Lfhff5H70fBP43+Ff2ivhlpHjLwTrdj4i8M65EZbO/tHJR9rFHRlYBo5I5FaN43CvG6MjqrKQOsr8Cf2D/8AgoXq/wCwD+0Xql14is9U0LwvqNxCPid4Yvows+nqwEcXiGBEZ43aJVHm")
      [Void]$Code.AppendLine("zQM8dzbI/wAzy20Sr+6nib4h6ToGh2d7Pqmj2sGqzQ2emz3V8kNvfXNwQtvEj8hjK5RVC7ixYbQTgH6zLswhi6KqxVn1XZ/qnun1R4OKw0qFTkl/X/B7rozoN/zD3oDg/wD6q/Jfw3/wXV1Lwd+1tfT3XhXxLJo/")
      [Void]$Code.AppendLine("xS+Hmi6xovgu/uAZNO8VTtcrbRW98qtB/Zl7Ywi4e6HyxLaSM0ST+fDTf2Q/G/hL9tP4yaZ4q/aW/aNsfGmueL5Ek8F/BDRNYez0iC0LCSC9vdGtXae4M6lZYYr/AMwpBIGl3Oxjg641IydovzMXFrVn62Bsiua+")
      [Void]$Code.AppendLine("Knxj8J/AvwdN4i8beJ/Dvg/w/bMFm1PW9Th0+zhJzgNLMyoM47mviX9sn/gqlH4Y1/Uvhz8E5NDgl8Ns+l694zubYXGleGpY/kex0+2UhL2+iwQ+Strasu2QzSI1qfzM+Of7XXw/0Lxz/wAJHqmsQ+MvGUEypceJ")
      [Void]$Code.AppendLine("fFWrw6trlsHbBZGkIFnDuIJhsooIUBLCIKCR4uYcQUMNP2ME5z7Lp6vp6avyO7DZbVqx537se7/Q/Sr4Z/H/AOKP/BQz9sP40W/wJ/aY8I6J8Nfh2NCg0xtP8H2Hiiw1CW7s5Jbg/afNidtskZ+7IR83Ht7Vo/wR")
      [Void]$Code.AppendLine("/a00f5n/AGiPg1qu3ot78GLtA/1MOvp+gFfJn/BvR8WpPG/xw/acv9UnRHhHhMSSyybQC1vfoMlj/sgdfQV+p5bHavVweI+sUIV7W5knb1OWvT9nUlT7Ox8E/tK/E/8Ab8+CXiPwzb+C/DPwX+NkOp3n/E1XRPCN")
      [Void]$Code.AppendLine("xoJ0exVlDymXUPEaRSTnd+7gU/NtYs8YClvTtN/aU/aq8X6jLHpv7L/gzw7ZhcwzeK/i5DBKfZ4tP069Ab2EhHT5vT6mUsBwn61IOldJifJ+reJf23NQQ/YfA/7Kuln0uPGuv3//AKDpUOP1qGCD9uTVIV8y7/ZP")
      [Void]$Code.AppendLine("0OQnHy2niHVFH4GS2/L9RX1tWb4u8QQ+E/DGoarcssdvplrLdys3RUjQsSfwFAHif/BMH9pLxR+19+w74D+JHjO30G18R+KILqa5TRbea309ljvbiGJ4UmklkVXiijfDSMcsegOB79Xzf/wR58Mp4Q/4JU/s52SK")
      [Void]$Code.AppendLine("V3fDfQbuQEYYST2EU75990jV9IUAFFFFAGP4+8daT8MPBOseJNf1C10jQfD9jPqWpX9y4jgsbaGMySzSMfuoiKzE9gpr8PYdd8bf8FRv2o/F+qafJrHhqLxVJbz+IdTJMdz4J8OIrnSdEgySI9Smhke5dORby391")
      [Void]$Code.AppendLine("Mc/6Osn1J/wWZ/aA8TftX/HHw9+x/wDCeSB9UvYYPE/xK1aSIXFj4c0tZFezt7oA/MZZVWc225WmWKCI/ubqWWLd+F/wd1D4UfD+8+EP7OenaZq3ijQd82ueIvEd2xsNHvpsSy3Wp3KRSm51a4z5gt0ifyw0bzLF")
      [Void]$Code.AppendLine("B5EU3yfENarWnHAYZXk9fTs35LfXd26Kz9zKaVOCeKraRWnr5L+tr9duj8H/AAW8FfsyfCK0sbHT7Pw34U8Orb2FraWsDyMsk0iRwwpGoaSWeaaVAqgNJLJMD8zPk8z44/ap+D/gO/8AGUOt+LNN0+z8CzNZaveK")
      [Void]$Code.AppendLine("r3kcN1EiSXkQjt1lkZbNZrUXE23yYZLqOJnEgdF6C/8A+CVvxC1rWfhzfX3xIgtZPDt7qF1eLbz3TNo0l3AYJNRtZCAb/WGinvYvt10I0he4jlt7eBImtZ/ob4Kf8E4fhH8EfD+vadZ+DPD2qweINXXVbgappsN4")
      [Void]$Code.AppendLine("IhDH5FlbxrIpEcNpbbYYkXAUGR+Xmld/NwvBMZXeKm7vtvv3d9e++r8rvtrcTVb2pLQ+GP2sf2LPDv7Yvwg0nxN4Z1Czh1KO2OoeFPFEEJmhiEqhijrgedZzrtE0DckYYBZERl83/Yo8P/EL9t/9lay+BHxGsda8")
      [Void]$Code.AppendLine("D6D+zjr8ul3GrPK32uS4VYX023sLlWBaTT7G4uljugMLv0q5Adw6L9tf8FDv2fPhv+zd+zvrnxA8F6LpHwy+IC3Vjpmj6z4ZsILCS+1C+vYLO2gu7dU8jUIWlnUGG5jkUAsy+W6rIvmnw0+EHir466fe+AvgvqTe")
      [Void]$Code.AppendLine("DPhz4Zvbux1X4h6pB/a19q+p+c7XpsYpCEvLoXBlM97PmBJy0SQ3BSRbfOnleOy6bwmDlz+0WnTlSerb1VtdPNtpXvd1cfhsbFV8SuVx3682miS3b0+5auyR8m/8FvdeHwx8d/Bm9+H+j6LYtp+lX3h4SSwuLOK3")
      [Void]$Code.AppendLine("hg3WFrEy8oUT7bHvIfbFdyBV3MGWlb/FlP2cP+CTugWf7Gfwf+IGpa58SbO0Xxt4zstAOm63esUb7ZZWDxRs3mxsJIUmgU2luhk+zyy3HI7n9rz9lHSfAnj3wd8OfjXqz+IPDPgXUV8VwajGsy3XxDs7mGazSzmj")
      [Void]$Code.AppendLine("LSzS3gvvLjuI7cs08c8HlpEJnii9qu/jf4E/aV8DXHwx+KnwvuPC8OqQ3EOmeFvGvhyXTodYs7fcsc1lHcRRhgsKq+yILPa91j2qxwp5hi8spypypuTjpKSTaSvJp3TW6aa1Vla+r02lgaGMmpU5pKXwptJt2S23")
      [Void]$Code.AppendLine("0ad9Nemh4X+y9/wTB+HviD4D+HfE3xQ8QeF/FenvFDBY6NFeCDwfoPUR2UVtJ5aXEyYKs14jyGRX2xQkFK+irL/gnn8LzoC2sPw78GSaNcR71gTQ7T7JcRn0RY9hU57DBznoab/wTJ/Yw/Z9/aR+AHjrwj4q+DPw")
      [Void]$Code.AppendLine("08RXng3xReaJdajf+H7Wa71KCaKC8hn8zZuik8u5COYiivNFLKFUyED2L4tf8EePh3qHwKufCPwx1rxZ8FdU+ziOw1rwtq1zDJHKmWhluYvNUXUiHYPPZlu9ilBcqrvu1fCbxdOOJo4htStJJppWevR6PvpdvfXU")
      [Void]$Code.AppendLine("P7flhZvD1KKTjo+91pq7a/1Y/Hr9qH9nT/hj/wDYU/bZ+HNzd3V/od/43+HelaPLFE09y2mvObyCArktJNDEfKx1fykbktk/S/8AwVg/4KhXX7eHw1+Evwl0T4HftOfDHSvH3xh8LaJdeIPG/hF/D+lalGbwutrF")
      [Void]$Code.AppendLine("KJ2eSRnjSRU2gjyC3BUV7R+y1/wTqs/2wfFHxq0v4jeLPEV5ffDr46eGNakvLC5iddRv9E8M6Q/2SR3gUy2glupEBdfPZUjMkryb5H+zv24f2GtN/be/4VF/aXiDUNA/4VH8SdH+JFqbSBJP7Qn07ztls+4/Kj+c")
      [Void]$Code.AppendLine("csMkbRwa+8wdKdOhCnUackkm1te2p8riKinUlOKsmz8IPAngD9n/AOOvx/8A2n/EXxT/AGUP2sP2gPEOp/G3xV/YPib4caTqN5pek6f9r3RwJLDeRR/aEkaSQq0bgK8XOOK/TH/gkV4i1hP+Cof7WvgeHxJ47v8A")
      [Void]$Code.AppendLine("wH8MPDnw70Xw9pHiXVp72fSQ+iO8okWR2C3JkR/NK/efdnOBVP4e/wDBKX9qz9kLxP4r0n4D/tOeDPDvw38TeKdQ8UxaR4g+H8V/eWEl7P5ssZn3kzbRgBspnA+Vc8M1z/gmD+1p8Nf2zPjp46+DHx3+F/gDQPjl")
      [Void]$Code.AppendLine("q9lrF/f33hN9V1uxNtbGGOFIpt1uUXc+MsSQc8ciugxPkD/gqX+29J4V/wCCl37VlneftR/Gn4T+KPhXpHhqP4R+EfCupXU+meJ9am00XM1rPpqxSQXCPO0COZCgBmy3mKu0eyfD/wDa9+MHjjRP+ChFx8StV1jS")
      [Void]$Code.AppendLine("9b+H/wCz34Vv5vDM0zx6f4b1y88H3d7eLb27ErA7XTMGA+YlVBLbFx9pf8E+P+CcWtfspfGX4vePfH3jbSfih4y+J2oaTfPr3/CPx6bdJJaaXFZzSmNWdIWmk81/LiIRVYAccDxL9vP9k7W/hD+zr/wUk+KGsaf4")
      [Void]$Code.AppendLine("Thh+MPgmJ9NvdLv7yW+vLXTdCltlW9gmzDDIjM4VrdtsitllUryAfe/7Pvw+j+E/wI8E+F4VCxeG9AsNKRQMYWC3jiH/AKBXYUAbRiigArzf9rT4peI/gv8AAPxD4k8I+Fbvxp4msYUj0zSYIZpvPuJpo4UklWFH")
      [Void]$Code.AppendLine("mNvEZPOm8pHkEUUhRHbCn0ikZd3/AOqgD4B/Y5/4J8eO10DVp/FGo6t4LPjXUn1/xprhlhTxx47v5c+Y8skDyQaLaKP3UEFtLPPDb+WI5rSVXZ/t74XfC/w/8GvA+n+G/C2k2Oh6DpcZjtLGzi8uKLLMzN/tO7sz")
      [Void]$Code.AppendLine("M5yzszMxLEk9DXm/7VXxtsfgH8GtS1641OHTb6QpYaQDpkurTXuoTMEtreGyhkjlu5pJCAsMboW5yyqGYcuHwtKhdwWr1be7fdv+kulka1K06lk9lol0Xob3xo+NPhn9nr4cah4v8ZapDofhnSPLN/qM0btDZrJK")
      [Void]$Code.AppendLine("kSvJsVisYaRdzkbUXczFVVmEfw3+Pngn4x6Muo+EPGHhTxVp7sUW60fWLe+hZgcEb4nYZB4xmvgT4R/8E5fid8Zte1DxR+0j8VNe8aaPrEpkHgS9W3uLZIGGPIvEjc6em5TteGztzs5X7Zc8yH234zfA/wCBd3o8")
      [Void]$Code.AppendLine("ureNPhl8I9Qs9Cs1Euo+IfDunXCWVrCoUGS4uYztjRQBud8ADrXm4ziDD0JW+L0/rU66OW1aivt6n56/8HE//BRKH4tfHDwr8Ifh74ksxa/CXxJYax4ivrO8VmXX2njitYI9udzWEcr3Eg5UTyQqcPC4X69+HnxZ")
      [Void]$Code.AppendLine("vvhR/wAEMPhZN8LBMmp6L4K0mwlW1kRbixlitglxG8jAiFnu4jayXDDFuZnlYr5RdfKPHvx//Z/8Z+En8O/D39mfwb8UNB2kJNF4O0vRvC6t2KXN1ErTA8ES2UE6dCHziuH/AGX/AAtZN8d7PwC3gnxF8GdB8VQX")
      [Void]$Code.AppendLine("mq6YvgT41+K4bOe9heOa4szCPIhiaWMl90UaExrOVIdAT4dTPqdV1qU5uLlFpW5eaGm695O61lql5HrSyeqqEHGHwu7bvZp/L0WnfU7j9lj4/wDxS8YfGfwB4m8UfDOX4oeLPDs3hnQrO3h1FrmTwHpXiQXX9u64")
      [Void]$Code.AppendLine("ZpBLJPbw3WktbQys7CS3iyJ5I5fMf7e/4KfeBfDviv8AYH+KreIJI7C30Twzfa3ZakhEc+jX1nbvcWl5A/VZoZo0ZCOcjHQkH4V0r9m7xL4Q+LV540+Hs0nw5vZnW2l8X2uh6xGuqRoyAxXMmp6tKdajKqFWV9Pg")
      [Void]$Code.AppendLine("DALJBdxbFLcR8WtZ+NH/AAVM8LXHhzwr+0H8EfE3hXR5VbU9HtdK1TQZ7qaOYiKW7jke8la3Ese5AhWGV4875Qgx6OFzfC4fBqhKUpSpxSfNdt6WvKTurvrzO/r14KWV1q1aMtIxk9+2utktXbyX3Ha/8GsX7Umq")
      [Void]$Code.AppendLine("fGXTf2hPDPii1s7Xxd4f17SdRvhCNouBNp62zOvAAUy2MjbR9zzcZIwT+tjHIxX4n/8ABLz/AIJR/H3/AIJ2ftDax8RNK+JHwh1HUPEum3WmaxbXFhqV3bagJriO4WTCmAo0TxkLgt8sjg9c19mfGj9vL9oT9mTR")
      [Void]$Code.AppendLine("E1G6+E/hv41R7GeS08CLqNjexbewSSO5V244UsuTxkV15fmeBhRhQhNKySsrpaLp0t2FmOFrzxFSsk2m27vezfXz7mn/AMEpvjZ4N1DW/i1oy+KtDufHXjr4n+N/FiaHHdK+oDTLLWjoyXTxAllixaQIruAGJwud")
      [Void]$Code.AppendLine("px9pg5Ffmh+w3+wv8Gf2sVk+M3wZ1D4xfs165Np9z4X8TaLokujwaq93JeG/um1G4lgvZ2u2kkiJ3TpIiRRI0cYGwe9/8OrNQjMjf8NSftaM0meT4zsvkJ7gfYccdcYx+HFe4eSfWlFfzr/t3/E39sr/AIJZ/HiC")
      [Void]$Code.AppendLine("1+JXx/8AjJq3w7F8s9l4jsbu0jtvEunhi0iQNLbulvqEcIZmtJdxLRkoZIzvX74/4JXfDD44ftffs33njDxZ+1V8ctL1VNdn0+3j0+08NPbmGKC33Fln0mQs3ntPghgNoQYyCTzrFQ9qqOvM03t0Vr/+lK3/AADZ")
      [Void]$Code.AppendLine("0Jez9p00X33t+TP0wr5j/wCC0Uoh/wCCSv7RzN/0TzWV/O0kFQ3/AOxR8doZC2m/tkfFFVH3U1HwV4Sul/Hy9MhY/mK4j9oP/gnP+0N+0Z8BfF3w3179qjS7/wAN+NtJuNF1Jrz4V2Zu/s86FH2SW95AqvtJwdhA")
      [Void]$Code.AppendLine("PY10GJ9sg5FFFFABRRRQAV8d/FrxjD4v/wCCg2pLqUkcln8I/DFkNDtm6R6nqzXX227x0MiWdvawI4G5EvLtcgTHP2JXwT+3H+w38UNb/bmsfjZ8O5otX0uz8IPp+r+FVuIrafXrlLmNCsckrKiytayCSIsyxmXT")
      [Void]$Code.AppendLine("o45GjE/mp52bUa1XCThQ+K339bfPY68DOlGvF1vhvr/n8tz1LxP8XlXT2VJOR6NXy7+1PqXhTxjeeH5vGFnL4ie31Af2Boi20uoyajqBG5Ps9hGG+1XSKpZD5bNCvmODGvmONqy1bx149uV0nwt8K/iZqWvTHHla")
      [Void]$Code.AppendLine("1oF14b0+y55a4vr2JYQg7m2+0yYyUjk4z9Ufsc/sO2fwCmuPFnie+s/FXxT1e38i91pLYx2ulWxIb+z9NidmaC1BVS7FjLcOoeVjtjSP4DL8gxuMrXxPNTgvk35Jfrt6n1uKzTC4WnajacvvS83/AJb+h85+HP2N")
      [Void]$Code.AppendLine("/iNrXhS68WePfFHhH4C+FbGFry8F4INZ1i1tlBLy3NzJIunWLKMllxeoBz5g+6OG+D/wlvPiD+194X8R+GfEnjrxZ8KfBdtd3tprvirT9N0mTW9Xmhe1R7GC1sLad7SO2mugZZwI5nnieHesYaT7a/4KDfBfWvjl")
      [Void]$Code.AppendLine("+zReaT4btbfU9c0vVtK8RWWl3Eqww6y+nahb332Jnb5VMwgKIz/IsjRsxCqa+c/hX+1L4X8Q6vNo8OqrY+Jrcbr3w7rH/Eu17Tz1InsZts6YzjftMbdUd1KsfSznBYfL6caeGoKzunO12vK+6bXW/kjhwGKr4ycp")
      [Void]$Code.AppendLine("1qruto3sn8utu1vmSfth/s0+F/FHgHxVNZ6VY6Dr/irTp7DUPEGk2dvBrEkcqlW/0kxsxODxv3AEA44GPzt8Fa94m+F/iy4huLO+0bVPhXbwzQeNrDTFn0m30+ffEv2y2R/MhtHFuUuVcLbxtHG4ngc27rr/AB4/")
      [Void]$Code.AppendLine("bl/aG+HH7VPxp8fahPaat+yn4Z8d6f8ADi+F5Jbxz+Fb+SytS1zCABIIVmmQzbyQftAwN43J94/8Ekv2ZvFk/wAU9c+M3iTTr7w5peoaJJoHh6wvrdra91WCe4hnnv5oHAeGIm2gSBZAshBndkVXj3edTyPEV8dT")
      [Void]$Code.AppendLine("jNP2co83Mvs3Wm636OLumn5aeis0o0MFNxa51Ll5X9pX8tu6ktU1Y5j9n79prVfG1l5fiDRIdFuVjSRLqy1WLUNL1AMMhoJPkuBkYbbLCoAICyS4LH07V/H2LbcJPlxnrXmP7ev7E8H7GNxcfE74f262Pwxmn3+K")
      [Void]$Code.AppendLine("NAgQR23hR3bH9qWiDiOzLsPtEC/JFu89AiicNxmj/FYXmkmOSXEi/KVzyOcV89nGCxGX13Rq2s9YtXs1827Puru3pY9fLp0cbRVajutGnun8radnbX1udv8As1QWnwr/AOComm+OI9c8SLYfGLRpfCGpaZ9tMunD")
      [Void]$Code.AppendLine("VLZGvbKd43B2hoIL2NdjKElYYUm6lNfop4l8T2Hg3w9eatq15Z6bpWm28l3e3t3MsFvZwRqXklkdsKiKoLFmIAAJJr8pfAZ8R/F/9sT4T+DPDPh/UNUtrPxBYeKPEetwD/R/C1raTm5tjO3YXn2O9t0wOWUjIB54")
      [Void]$Code.AppendLine("b/gqB/wU7uPjtrWvaW0c1j8HfB+r3NlFpSKZLjxtfWN29u092o+9ai7iKW1kP9c6JLMWDJCn32R5rKhlEa+KT35YrrLsl87r0Vz4/N8DCWYSpUO15dl3/T5ux6N+09/wXT8I/GDwj498Car8L7+2+H3jPw3qdl4d")
      [Void]$Code.AppendLine("8R6neRyTXlzJaS/YpbnTJIQbWG4lEYhdpWlUzQGSGHc3l+/f8ENfiF4b0n9h3w/oLa/oieILjWdWf+zH1CIXx/02bGYt2/lQGHHTBr8Jv2nriaf4YaXpHi+/upNc8VaoLvVJI5HuJbMPeG+uAjKrN5cIPkq+MAmL")
      [Void]$Code.AppendLine("swrh7jTPDOtXN9Np8PiLxFrd9vkSZbSQyx3BHyzi5kRFikRtrK/mqVKgryAK58Ln1WVRYivDmtzxXKmlZyhZ3en2WtbX8h1sBTVJ0acrX5XrvdKWlvmj+vAHIorw7/gm5+0nN+1z+xB8NfH94syatrGjJBrCyYJT")
      [Void]$Code.AppendLine("U7V3tL5QQAGUXUE4DAAMMHAzivca+5jJNXR85qnZhRRRTAKKKKACjFFFACBdtR3Vx9miLLG0jAEhV6t7Cpa/KH/gq9+2n4u+Jv7Yzfs96bZ6r4a+GOh6RHqPibUnvn0s+Lp5t7Lp8LR4nntRHHIGSJo1neK6DyGO")
      [Void]$Code.AppendLine("1lhn48wx1PB4aeKq/DBXdt/l5m+Fw8q9WNGG8nY+gtX/AOC/vwFS58QWOjWfxS8Ta54Wv30rVdLsfBd7BNYXaffgllulht43GD96UDHIJHNfm3/wUW/aR8Sf8FkPjT4N8D6xpEPgrwNDfu+maM1xFe3unxrG5vta")
      [Void]$Code.AppendLine("1CZA0Qe3shP5UETPEjuu6SR5E8vgfir41s/DNjDo2i2djo+k2KmO1sbCBLe3tkz91I4wFUfQV9Hf8EdfgIvi7wj8Qvibq1stx/bU7+DtI8xQ6mzgCvfsAeMS3LJCwPB+wAcc1+b/AOt+Nxt3CKpwWul3J9k3tq90")
      [Void]$Code.AppendLine("ltdXPraeR4eg0pPmk++3m7b+l38j8j/2c/2qfHH7SPiS/wD2U/A8+l+Hfg18bPi5p+ttBJYgS6Ksl9DBCfOUfu4lRbTd8p+aBMFdzh/7H1XbX4qeEP8AglN8KPgkfEWg6PoWn6DB4ms5I7v+zDKl6YnJAkWd2Mie")
      [Void]$Code.AppendLine("W5V0VGAR1RhjArqv+CA//BTz4jaX8X9T/Ze+OV9J4i1bw7c3um+HPF+p6s0+palc2sj+dYXLTYMzlFaWAgmQw4GJArSJ9hkvEVDHzlShFx5bW5rXat6/5+up4uaZPUwkY1HJSve9r2T/AAP1y8UeGLHxnoF5pOqW")
      [Void]$Code.AppendLine("drqGmalbyWl3a3EYkhuoZFKSRup4ZWUkEHgg1+WvjD/gjh8avhn8RptH+HOr+Cte+H8kuNK1DxFrVzbalpFt/DBcxpbS/ajEMKsiyK0yqN/lvmR/1ZRt65pcV6eZZThcfBQxUOZJ3W6t81Z69V1OPA5licHJzw8u")
      [Void]$Code.AppendLine("VtWez/B/geNfsXfseaT+x38NrjS4NRl8ReJNcuBqPiHX54RBNq90EVF2xgsIbeKNVjihDMERclnkaSR/59v+CnvjKXwr+0t8TPDtnBqipYfEPxFrEN3YW3nrpXk6v9uMsq7GCxCWclmcbB0JGQR/TdX4J/s2/E2H")
      [Void]$Code.AppendLine("Q/8Agvp4T8QNOv2PxB8WPG+k7yQqyRzyazaQ/UGSKDHrx6iubM8LRcKFBq0edJJdLRlb9CsLWqc1Sre7s22/VH5/+A9e8Uav4jv9QuY7HVtR1BVayk1W5l02/n08AFXhiW3aNrUyeZteIBXKHeWdTt6Sbw54/wDi")
      [Void]$Code.AppendLine("Lqtr4b0a4sYfFviJ/sOg6Lo8T3moandvkRRiSULtTdguyxDy0DuZEClh/Uf8Yv2a/h9+0bpNpZ/EHwL4N8dWdk5ltoPEGiW2pR2zH+JFmRtpx3GDWd8Ev2OfhR+zRcXM3w5+Gnw/8BzXilLiXw/4ftdOluFJztd4")
      [Void]$Code.AppendLine("kVmGQDgmvPlwvTeIVXmVtNOVbLpq7L5R9Dojm0lT5Gnf1/4F/wATa+A/wL8Mfs1/CfQ/BPg3S49F8M+Hrf7PY2STSTeUCxd2aSRmkkd3Z3aSRmd2dmYkkmuwoHAor6r0PHCiiigAooooAKKKKACvx/8A+CtH7Nt1")
      [Void]$Code.AppendLine("4N/4KfWvxW1TWPtR8b+A9U0TR7AMTHp1tpr6Ixbp/rJJr69JH9xFPdq/YCvz5/4L/aKNJ8EfBrxaqx7rHxXeeH5nK8pDfaReOOe2biztVx3JUV4vElGVXK68I/yt/cr/AKHoZVUUMZTk/wCZfjofhz+1h8RL7RPi")
      [Void]$Code.AppendLine("D4cjt5gsa6jLeXWXKr9mhtpmlJ4JIG5SB3OBx1H7qfsM/B+b4EfsO/CvwtdRPb6nZ+HLa71SNuGF/dL9ru8j1+0Ty1+CHizw/J8b/wBsDQ/CsYaRL6az0Mgdm1W/itDx7KFOf9uv6UPFs0cVxcMpxGWbaM9B2/Sv")
      [Void]$Code.AppendLine("zmvSjRwNGFrNq7+/T8JH1VGTqYmcv6/rQ+QPi98TL6f/AIKFeH/B9vo+ofYNP8AX+q32pB1a1b7Xf26W8br95JA2m3RBOQwc4wQc/lN+138abew/4KS/F+xuLNbP7NrNp5qwXDJvmitoBFdRyKQ8U22KCTcjB0lB")
      [Void]$Code.AppendLine("ZWBAr9OPhv4Rt9A/aH/aE+MGuatNaaX4i1aHSYUnb/R9N07QrY209yvYCSdbpm4/5Yg8lqo+H/8Ag2O8Aftl+Abf4ueLvGXxR8C/FX4mB/E+q21pNZTWemPeM00No1vNblw0EDQxNiUZaJjxnA9TIcvhia9SK0UY")
      [Void]$Code.AppendLine("RV1/M2pfendfJGOa4p0qEHLdybt5JW+5qzMT9iv/AIL5/EDwF4WtdD8YWGm/FrT7cIkGpT6qmkeI4ohxskJiNrfOBjEjtbMcfOZGzIftr4af8FzPgX4vihXxLceLPhrdSEqR4l0aT7GmO7X9obiyVe+XnX6DpX56")
      [Void]$Code.AppendLine("/Ej/AINUfi14HmM3w5+Nfg3xLGqlktvEWj3OjS5/u+dA9yp+vlL9O9eFfEb/AIJ0/tl/snxSTah8K/EHiDT4BltQ8HXkevREd8QwsLz3/wCPcV9RzZthlayqr7pfft+B4Djgqrum4P8AD+vmfvyv7XPw51r4O+IP")
      [Void]$Code.AppendLine("Hug+MvC/irwz4W0u51i+vNC1a31COO3giaVzuiZh91D1Ir+cfxT45vfgd8ePgV4k1DauueGvEfh/xDqqli2Lo6hb3V4p+rvOCevJryjxn8fNPfxDdaf428L6Lba+ytDdWviDR0tNSCsCGR0nRZgCCcg8HJ9a4L44")
      [Void]$Code.AppendLine("/GMahcaOtrd6ba3U15bxWLajcYs0bzVIaaRzgRDqzOwGOpFYVcVXxeIoxdNw5ZXd9en9dC4UadGnNqaldWP7DrHWLa/vLq2hmhkmsXEc8aSBmhYqGAYDlSVKsAeoIPQ1ar5S/wCCOmqeGNa/ZEjv9E+J1l8ZvEWs")
      [Void]$Code.AppendLine("ardar408a2KS/Y9c164KyXPkMyIvkwr5VvEkahY4beFNqFdo+ra+rPHCiiigAooooA4H4+ftQeA/2XtP8OXnj7xJp3hWx8Wa1H4d027v2aO2lvpIZ50ieXGyINHbykPIVTKhd2WUGj4X/a68B+Lv2iPFHwntdaSL")
      [Void]$Code.AppendLine("4heEYILu90e5ikt5Z7aWGKUXFszqFuIlEyK7RFvLchXC7l3cf/wUs/ZUuf2xP2S9e8J6SLEeKLVo9Z8Om9/4931C2bzI7eY4IEFynm2spw2IbqU7W6V+I+hfGPxF4I+Jfgy+bUdX0Cw0QJ4asdWv0d9c+F2rWdzM")
      [Void]$Code.AppendLine("unQTo5+a2tp7jULGSJz/AKrUHtZWe2WLZ5GZZqsE06kXZ7P56r1trFfas0tbX7sJgniLqL1X9J+l9H232P6NKK+Xvg9/wVA8GeK/gv8ACfxB4maHQde+JHimHwDe6dFOsqaH4haO9Bt5GOG8iS4sJYoJSo84TQMB")
      [Void]$Code.AppendLine("iTj6hU5FerGSlFSi7p6o4pRadmFfDf8AwcF36Wn7CekwmPzZrvx5oCQjAypW681j+Ecb9O2a+5K/M7/g4l+LsbaR8I/AMUirM2pah411ABsmO2srN7GIN6B7jU42XPX7M+PumuDOKqp4GtN/yy/FNL8TpwMHPEQi")
      [Void]$Code.AppendLine("v5l+Z+QH7Cejr4z/AOCiXg26b5lvPihpEKsRnKWN3AWA9t1pIfxNfvN8SfGK2YYCTay9K/D3/glf4N1TSf2rPgrNrFu1rfXXjdNTdSOfKu9On1W2b/gVvcwtzz81fqZ+158ZZPhzpUH2Wxm1nXtav7bRtG0qHcG1")
      [Void]$Code.AppendLine("C/up47a3jZlVvLh86WMSSkYRWzyxVW/Ms6pVHUjhaavK/Kl6WivyPtMp9nyyrTdla9/vbNTwH8NY/wBrD45aX8NYLaP/AIRHSfJ8Q+N2VNsX2ATM9tppxxvvrmMl1PW2t7sNjzYy36WDpXkv7Gn7LNn+yf8ACFdF")
      [Void]$Code.AppendLine("a+GueI9XuG1bxNrTQ+U+talIqrJKEyfLiRUSKGLJ8uGGJMttLH1qv0fI8rjgMKqO8t5Pu3v8uiPkc0xzxVd1FpHZLsv61DFNKZp1FeueeYXjr4ZeHfifpLaf4k0HRPENi4KtbanYRXkLD3WRSK8xtP8Agm5+zzYa")
      [Void]$Code.AppendLine("mL23+A3wXhvByJ4/BOmrID65EOa9rooAraVpUGi2UNrawwWtrbxrFDDDGI44kAwFVRwAB2AqzRRQAUUUUAFFFFAGT458IWnj7wnqGi37XkdjqlvJaztZ3k1ncKjqVJinhZJYpBnKyRsrqQCpBANfzs/8FePFvjb9")
      [Void]$Code.AppendLine("i79qrd450O81SPXm+y32o6nbxpN4r0tE8mO7N5FGljqM0KeRE8ssdldLGUhuYriNIbxf6PK4H9oz9mTwT+1l8Mrnwf8AEDQLHxHoF04mME26OW2mUEJPBMhWSCZQzBZYmVxuODgkHnxWGp4ik6VVXT/r5PzNaNaV")
      [Void]$Code.AppendLine("KaqQdmj+dLxe+rfGHT9M8QeF9QW40j7Smvanp6PJa6lqzxxRRPbwnb+7uJreC3WGZirW0tsGQkXMxr9a/g3/AMFU/EnxA/YF1jxR4c0fSfiP8XvhzbWl7rWgfaP7Nm8ZaUP3zappsYB+e6sY55UiCkR3MNxbncYs")
      [Void]$Code.AppendLine("t8Yftif8EpdX/YW1idPh/wCJND8deEY2M6aO2oWll4q0ZWJYg2gaNL2MA5DW6pMSwH2eVi0h8G8N+PdL8dTeE/EGi69feHvFHw/1k6joPiPQXRL/AEa5yVuYXVhgrIrSLLBMu1mP7xGG9G+Fo4/G5PXjSxcW6C91")
      [Void]$Code.AppendLine("Na2WvLtva9raO3R2R9HLC0MdTcqLSqPWz016/f8An6s/f/8AZ/8A2sPBf7THwE074k+FdS+1eF7+za7eSRds9jsB82KaMZKSRlXVl55X5SwIJ/n0/bc/bo1D9s74wfHb4gXWl6toUOnp/YejWGrWslnf6dpNiLwQ")
      [Void]$Code.AppendLine("JJA4DRNJKbidw3zebPJHjbCjNm3X7SXxA/Z5/awt/it8NYZPBfiTwtK1/faVpqSHw34p0u62LewpbgktFDNCjLbtmWC3kggiZ2s7aZ/MNc8T2PxD/Zv+M3i28/ti18ReJr29u/FU+ormT+15tNju9QeFQzL9l+13")
      [Void]$Code.AppendLine("c7wbSQ0LRscszE+nm+YUMXgOWDveUU7dfeTT9GrPutnqmjjwOFnRxN5Lo/y/Pp+KPtG0+HVt4K/4KY/B3RbGGOCTRbfwLYXRX+K5g8Iy+bn3+yxW689gO2K+u/Htiuu/tK/BfTZI2kjvviHpruAM4+zR3N+pPsJL")
      [Void]$Code.AppendLine("SM89wO4FfH37Gnju6/aW/wCChng3xpqNvNDe+JdX1nxu9q/3tOtI9Fm0+wtmHTMFpLYQnHBkQnvX1Z8cPEDeEfjR8Lda83yP7F+Inh5i/wDcS51CPTpSeehivZR7ZzXhZhiKc86ozW3Ovwlb9D2MBTksuqp78r/9")
      [Void]$Code.AppendLine("Jv8Aqfp8OlFAORRX6YfFhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHhv7Tv8AwTX+BP7Zd59s+Jnwr8HeKtWVFjXVprL7PqqIvRFvYSlwqjptEgHtXw/+2N/wbzfBL4R/CrXfFnwvb4qeEfFlvGq6bbeGLEeJ7i5k")
      [Void]$Code.AppendLine("LgCFbOba05YFlBnuUii3eY7qiGv1SprKGrKrQp1FapFP1SZUako/C2j+ff4E/wDBGD9tLxXrE1xrWjaDpeils2sPizWLKzu3i/haQaabhY5MdVKsFzgFjzXhv7ev7Oni39kOz+NngbxtJ4fm1xbODVy2jX0t5a+V")
      [Void]$Code.AppendLine("PpCQrh5YYXzm1bIMYGc4Jr+niOZZCcDocEjnmvwj/wCDoTQf+Ee/aQ8RXywqsPib4WWAZlPMk1tf6nC+f+AXcAz/ALNfM5pkuFpU/b0YKMuaG2itzxvorL8D1sDjq05+znK6tLf/AAsT/gidHH4r/a616+m2tcaf")
      [Void]$Code.AppendLine("8Prz7Pnr++1HThIQPpEgPs3vXvX7a/jW18GfEv4S6TcFmuvGXxT8J6NbRJ95x/bdpPM3+6sULZPYuo6kV+X2gfGrxv8AAKOx8QfDzxdeeC/E2o2X/CMWtxZwQSTXH2+4tl2M06SIqK8MMnyp5n7o7XUZB9c8A3t7")
      [Void]$Code.AppendLine("4l/bG+B+seIvEXivxFqlv8RPDdtHe67r13fmGKXXNPeQKksjRx7zEhOxVHyDgAYr5DCUaU8Xhpzf2rWS6qV9fLVbX6o+glXnTw9aEFvF6+qt+jP6S16fiaWuG1z9o3wd4fl8u41yxjbOMeYK1fDHxd8O+MAv9n6r")
      [Void]$Code.AppendLine("Z3O7oFkFfrVmfDXR0lFN81cZyMeuarnWLVQ2biEbOvz9KBlqiqsOsW9wMpNGy+oNU9S8c6To+ftWoWsOOu6QCgDWorzXxt+1j4I8DIrXmt2fzdlkBzXOD9vb4cH/AJjUP/fVUoti5ke20V47Zftz/Du9bC69b9M/")
      [Void]$Code.AppendLine("eFFz+3R8ObZcnXbdvo1HJLsLmR7FRXiLft9/DdGx/bUPP+1XXeH/ANo3w74l0eC+tLppLe4BZGCdRkj+lHKw5kegU1n2so/vU6qms2R1KwmtxI0RuIniDjqhYYyPpmpKPzT+Nf8AwW58eeJ30S3+FfgLwhb6J8Sd")
      [Void]$Code.AppendLine("WbRfBvinW9dmuLtoRHPcNrMulR26obZrW0uJoIzeLI4a3LiPzGRfDPGn/BUP4p/EHQvFHwJ8QeMH1i81HUdNmm8X6dZrouqDQXh1SXULb/RiqRyNNpttbLNCEdYtUbGJIlkbwfw3Dd+DtE/Z3j1eE2N98PtUi8Ea")
      [Void]$Code.AppendLine("9b440vUYtMvtClhYdsagYYhkYImVhkMCfNPC1hqVt+3v4qa7EK2N74Uvn06TDB2dZtKjdCS207SJiFVQyiZyWYOFX8XlxhmlSvXjUmoKNOrZJLSam4rXfmhGz37u2p9//YeDjSpuEea8oXbf2eVN+Vm7rb8j7I/4")
      [Void]$Code.AppendLine("JO/Grwz+yV8afjt44hht/CPwo8E+ArXUPEGk6TD5dvfalPqDx6b5UCkI99KILuBAP3kzzRKSxKV8Qf8ABT79uPxR+3zLrvjDxY3h6A6R4XuNIs9P8P6Zc/YdLH2sXEts+oSyPHfyxlEjaaFY0LLJhF4A4O88R6p4")
      [Void]$Code.AppendLine("70IWd7rmpPonizWG8VSaRFiG2sLZIRa2rsVG+S6lgREjLtiAT3rxKkhaRuu8afspeMPi3+yjY/Er914f+GWoeK7LwhosSWw/4qZgtw9x9nGQEsrdbRk3qD5rq6LtSJi30GDxlaWGpYKk21TXNUk9fhd3q7t2aajq")
      [Void]$Code.AppendLine("r2T1ja/mV8PTVWeIqWTm7RS81ZaKyW93223K37M/wI1D9rH4qWvg3TdOk1O/i8K61rOnxqu7yNRhtFt7Cf8A7ZXl7BKDjrEK6fx7fL4m0z4a+JtM32K6trnhzUo85Q2jPqdm5Ddw0ZJB9Cpr2r/gjbrOv/Bj4/fF")
      [Void]$Code.AppendLine("DxB4Y0WbVtR0fwnpmkRSeWW+yLd31zK5+rf2fF+VeOftaWGq+EPD/wAWNLuLKTSdY8L67e69YW6xhWihu8axb7FwBsWaaWJcDA8ggdK0xGFjTweCzCH2al3/AIZS6/cvvM6dZzxOIw0usdPVL/gv7j9OdL/4JueO")
      [Void]$Code.AppendLine("vEUsj6lrUcbbjuL3GdpzXI/E34R+Iv2U5Ib238XRtdRt8sMNxlia9N+GH7Ofxe+Jfhux1r/hKpLfTNato7+3k84kSwyoJEYexVgfxrxb9o34PXfw91a4TWNQvNQulP8ArHyVb9a/T0fGM6zVf+Cmvjq78I2unRTL")
      [Void]$Code.AppendLine("HJFHtac8s9cVoH7Z3jC21ZptQ1a8uIZDlo9xANeTWGnzapdpBbRNNLIcKqjJJr2z4V/sCeOvihp01wunyWIjTcvnLt3/AEoskGrPUvgd8Z/H37T+p3Oj6Hqa6SI03Z/iP9c1s/ED9hL4nXljNe3niuSfywXYGVsY")
      [Void]$Code.AppendLine("rwS+8CfEb9kXxDJPHBdWEjDAmRTtI6Vs+F/2rvit4ruhZwyahqCTHa0WzIcHt0peg9Op5D46sb/SNeuLG5uprxrdihfJYZFYjh0HzGRfzFfoJCfhd4D+H1jqHjzQYLPXrpN7wbfmc+uK8H+MPxs+FviO7NtpXhLy")
      [Void]$Code.AppendLine("YATiZflPtTTJPneMzP8Ad838M0jG4A+bzj+dfR37KXi/4exeIWs9W8PTalJezBIvk3eWp/CvuvTf2M/hxrenw3C+H7dBOgcBk5GfWlKSW5UYt7H5T/CXwNc+P/iBpulxrNuup1Q8Z4zX69fDf4E6T4Q8B6Vpq20e")
      [Void]$Code.AppendLine("LO3VOU/H+tR+Ef2S/BHgjW4dQ0/R7eG6hOUcL0r0jYV4U7V7DFZSqX2NY07bjqMZoorI1Pjv9vf/AII6+D/2zbnxBrmk+IdT+HPjLxRZi01fUNPtUvLHWiiosFxdWjlc3UHlxmK5gkgnXyYQ0jpEiL8F/En/AIIP")
      [Void]$Code.AppendLine("/tO+JPHa3dnq3wlnvPDjzzW2vPqt3Zr4nV4XheFrNbVzZtMpEjZlkSKWNNplUcfttL/q2+hr5G/ae/az8cfAvXbxI9PW4s92Y5Qv3fY15eKyDAYqp7WrSTlrrs3dWd7Wvdaa30S7I7KWaYihHlhN20032d1a+2uv")
      [Void]$Code.AppendLine("3nw9+x//AMG5njjx743t9R+P2paLoHguzcGXwx4c1R7rUNdVScQz3apGlrbkcMsBeV1JAkgPX2b/AIL33vhnwB8Pf2dfhvYw6V4f0uHxFc3+l6bbQLBbww2WlS6Zb21vEgwoWXVrZVRRhVBPCqSPffhX/wAFRfD+")
      [Void]$Code.AppendLine("r+GY216P7LqG4IyY/WvlD/g4z+A4/ay/Z58D/F74d6heal4y+DxvbmysrJvnSzujayXt0COQ8UFm4XAyDNuBBQGiWS0qeDqYTDR5VJNd91bV7/5ExzCc68a1V3s0/uZD/wAG1Wn2MvxS/aYgmazmvLeXw1A9sXDS")
      [Void]$Code.AppendLine("RoI9RdGKdQrGV8HGCQw7GuP/AODhbwZpvgz9sTwbqEf2Rf8AhYXgS4tbi1X7ztpV8pR2XGMNHqsi56nycdhXnf8AwSq+N+l/s0f8FXFvri6htfD/AMSPCuqadcOvCXckCw39nISOGZYre6VCc4WVgMZxVP8A4Kwf")
      [Void]$Code.AppendLine("tDWf7TX7aHibWbHcumeGPB+kaNanOAPNu9SuJm9i2Ic+oiWvl62IhPhjna0SjH5qSX56ntQpyWb27tv5NN/loWP2Nv26PH2s/sw+FdB/4SC68zwFb/8ACJSYk+YpZARW7E55L2v2d8/7ddF4u+K+veOG/wCJpqM1")
      [Void]$Code.AppendLine("2T/fbdXy1/wTR+F2qaX8L9Q1zUFvV1jx1qf9o+W0pa3uIJIopbWZEI+V/Lm8ttuFPlAYyma/Vb9mn/glrN4y0iz1jxJceRDMBJ5C9cHmv0Gg5KlH2vxWV/XqfK1rOo+Ta+nofK/wks9etvE0F9oWnTX09qQ6gR7h")
      [Void]$Code.AppendLine("X3L8G/28/E3hjR47PxJ4Tvt0Yx5sUGB+NfSnwl/Zr8K/CDS1t9L06BW2jdI6Alq6+bwfplz/AKyxtW+sYolUT3QRptHzlrf7ZngPx7aeRr2gXDL3822zj9Kbon7SPwf8F2El1p+mw288allAgUNkdK+gL34T+HdQ")
      [Void]$Code.AppendLine("B8zSLFs/9MhWRefs4+Dr5syaHYtz/wA8xRzRtYfLI/PFvibH+07+1faz6rYySaIJPLSIjgJ9K+0ov2Dvhr4hsYZl0eJFK5HyCu/0f9nrwloF4txZ6PaQzKchgnIrtIYVt4lRFCqvAA7UpVOwRp23PL/h/wDsd+Bf")
      [Void]$Code.AppendLine("hzqC3Vho9v50ZyrMmcV6hDEsMYVVVVXoAKdRUNt7miSWwUUUUhhRRWF8SfiZ4f8Ag94J1LxL4q1vSfDfh3R4jcahqmqXkdnZ2MY43ySyEKq5IGSepFAG7XM+OPC/hzxJbNDrMNjKrLtPm4z+Vfnz+17/AMFwv+Eh")
      [Void]$Code.AppendLine("0vwrqn7Mun+JviR/wj/iGG58URTeENRh0nW9Ge2uUljinaD7SHErQTJLbQzZETFUuFBifwH9oX/gq/Z/FX9qjTvDutT+LvhTpniDw/Hq9lN4k0+S0i0u4SSRbq3upl3QtCqiKVb2B5IFWVlmaBo2Ayo4qhOp7OM1")
      [Void]$Code.AppendLine("zLpdXKqUqijzuLt6H318R/2DPhv43vp5bfUbaxZcuRG+Nory+3/YQ0vU9Xm0vRPG0Nxa7Sktsz7ldCMMpHoRkfjXm3hr9lb4ueItAXV9H1Fdc0rVIxLbajY3y3VreRN0eOWNijqexUkH1Ndb8Hv2Hfippcs00moH")
      [Void]$Code.AppendLine("SzIpMs3mFmxXft1OPfofl98X/hjqX7Mvxl8I6PeTyS6h8JfG0fgu7uVPNxbEGxtLhvUT6ffWcxP/AE29qwP2i9RmtdU+L01qWN95OmaXahjwbhrLMK/jJdoP+BV7B/wVJ+FS+HPjJ4o0ux1C41DUPFfhWS6SeUfe")
      [Void]$Code.AppendLine("1jSXQwPnrueK4hXOelknpXMab4d0X4zftyW9pp13DceHPEHiLRvFLyM3y/ZbTwlpuqrx6m4WBCOxevh8Rgf3dTLls60H/wBuyak/u5ZfcfSUcR70cW91CS+a0/VH1T+wb+zz/wAJP4/8M+HbNW/s/wANW8FoD979")
      [Void]$Code.AppendLine("3Aixr19kFfsdoWlx6NpFvaRj5beNUH4Cvzz/AOCTDw2XxI1JZIHYycRy44xk85r7+8cfEPQ/hj4WvNd8S6vpPh3Q9PTzbrUdTvI7O0tl/vPLIQqj3JAr7OrueBS2ubVFfG/xK/4LQ/DkeZa/CzRfEXxnvFLIL/Qh")
      [Void]$Code.AppendLine("HY+GkIONx1e7aO2mTrn7Ebpxj7hrwH4zf8Ff/wBprw7HY3nhH4OfBnW1ZyZ9Ij8dXMtxEg6f6TcW9mhc9MLE6gg5bpnw8Rn+W4er7CtXjGXZtaevb52PTo5biqsPaU6ba9Py7/I/Uaivn/8AYx/4KGeBP2wdPXTb")
      [Void]$Code.AppendLine("G+h0X4iWFil3rXg+/MsGp6YMhWkjSeKJ7m13kKt1Chhc8Bs8V7+rbhXqwnGcVKDuns1szjlFxfLLcWiiiqJCiiigAooooACcV+On/BUL9tTwt+2tf2/hvVNJGu/CfTdVubfw/pWnxxXGtfEq9tsw3N1bvIwi0/S4")
      [Void]$Code.AppendLine("WYoL0NFO4culzbRTRi7/AFr+J+la5rngfVLPw1qtroXiC6tZIdP1G5tPtcNjOwwszQ7k8zYfm2FgDjB44r+cL4P2lv4O0a8hs9Zk8RRafNN4S0jVZI0jabRNIuZtPsI1VWdVV0ga4kVWIM9zMckBNvz/ABJj6mFw")
      [Void]$Code.AppendLine("qnTdru3ns9u22r3torN3XpZXh41q1pdNfL/g+n/DPZ+HHi6+/Zq8Ma1qHjHxVZ6H4ZsZWuNO0PwveXOhad4eh4IjY2LWltdnjq9n5jNktLNnJ634ef8ABQ7WPjbpFndzfDrVrfQLS8ivLC58SGGK7eRMNHdw25Vg")
      [Void]$Code.AppendLine("CrAFZfMVuhHODXhumazb/GPUP+Ek1K4Sbw1p91KuhWDEeVcvC7IdQnXOHYyIfIQ5WNAsmPMceXF49+MdtpdncXV1qFtY2cJzLc3U6xxKSf4nYgZJOMdSTX53WqTnJqUeap87R8klbXu310s3qfTwioq8XaP4vzbf")
      [Void]$Code.AppendLine("Tse/W/xY8J+B9fuNV8OWN94B1S9YyXV74M1e88Ly3bnq8406aBbhieT54kyRXYaF/wAFOfij4TsRa6d8fviwtuoAWDUrXw/qqj6yXGltcN0/imYnnnPNeefs2/8ABJ79oj9r+3t9U0PwX/whvhu5+aPXfHTy6LHM")
      [Void]$Code.AppendLine("vHzQWQje+l4O5TJDBE45WbHNfa/wj/4NhPDMVosnxI+MnjTxBecbrfwtptp4fsceh85by5P+8s6Z64HSvostyvOuW8akoL+83+WrX3I8zFYrAX96Kk/Jfrofnb+1H+0H4m/aE8a6HrmveMhr13os88yL/YFlYvMZ")
      [Void]$Code.AppendLine("baWAgtbKneRWIKkHYOhxjxH9lXXvEngW6j8ReGda8PTHS7/WNClXVtOl1CNbUvaxRKBDcQENHHZW0YG8fu2bsAD+9/hr/g3l/ZV8OSpJceAdY8RMuNy654v1nUIJAOz28l0YHB7q0ZU9CCOK7jxz/wAEZf2afiNc")
      [Void]$Code.AppendLine("282q/B/wY01rax2UEtrpyWckMEa7Y4leHYyoi/KqggKvAwOK96nk+NTdaeI/eaWfKntfpovtPoedLHYe3JGl7uul+9v8u5+R3hv9v/41afoP9mab8TrXwXaOrRyJ4O8Lafp00ikYwZ7xb64X/eSVG7g5rk7/AMQ6")
      [Void]$Code.AppendLine("d4o8SW+veJHvvHXiK1O6DV/F2pXPiK+tDnP7iS9eYwY9IdgHYCv1Y8Vf8G6v7NOuZbTdH8ceF5ez6T421bap9obi4mhH08vHtXkPxD/4Nl9LCM3gP47eN9LkP3YvFOi2Gt26e3+irYy/QmQke9eTmXD+bYlNTxPM")
      [Void]$Code.AppendLine("u13FP5JWOvC5lg6Xw0uV/J/i2fFOo/HzUNQbdJdSTMe7NuNed/GL4/a34f0OSRtE1jWdLzmVtA1WWHVIfR1hTymcDHISbcf7pAr6D+M3/BCv9qD4SJLNoVj4J+Kuno21P+Ef1kabqco4+Y2moCOBfoL1zgdCcA/H")
      [Void]$Code.AppendLine("Hxk8Sa78DvEQ8OfEDw54g8D65MCYbDxJpk2l3FxgkMYfPVRcICCPMgMiejHjPzK4Zr4WalKjdeX+cXoex/a1OtGyn/XzN7wN8eNUtPDem65q3ibWvFmg2N0dW0LxXpqtY+IfBLYx5qlAZmCbSHmDNIRuSaGSLeR+")
      [Void]$Code.AppendLine("4v8AwSH/AOCi6ftsfBa50zxNqul3nxO8F3L6brL2iCCLXYUjglh1SBB8hWWC6tTKsWUimlK8I0W7+c6x+JzfDT4h6beaVHdO/ii+FlcabDC8kl5cMhMU8MaAs0+5FjIQEyK65BZEr92v+De3wT44+Af7PN54J8e/")
      [Void]$Code.AppendLine("CfV/Afn3l/4i8NXN3oxs5Rp11Ojva3P7sGGbz2eVIJH83ym2tHEIAp+04dw9WjUmrWg1dLRK910Wie97JKWjaT38HNKkZxV/iX329d2vXVbH6NA5FFAORRX1h4oUUUUAFFFFAGT438KWXjvwnqWi6kk0mm6xaS2F")
      [Void]$Code.AppendLine("2kU8lvI8MqGNwskbK6EqxwyMGB5BBANfMfjv/gil+zT8QfELatd/Dy8sdQuCr3Muj+K9a0db+XAUz3KWd5EtxO+0F5pQ0shyXdiSSUUpQjJcsldFRk07o8O8Nf8ABsn8C9K8JaNp0ni34tQ3GnWyQX76fryW9tqU")
      [Void]$Code.AppendLine("ox5kiwyRS/Z1ZsnZC64ySWZizt9F/svf8Ekv2e/2R/ENtrvg34caW3iezO+31/XLifXdWtGwVJgubx5Xt85ORAY1OelFFRHD0ovnjFJ97K4/aTlGzbsfSwjUHpTqKK0ICiiigAooooAMZrD8f/DvQfih4Zm0XxNo")
      [Void]$Code.AppendLine("mj+ItGvPlnsNUso7y1mH+1FICrfiKKKAPIdG/wCCYv7PHg+drjw78FPhj4QvzLHINQ8NeHrfQ9QQpIki7bmzWKZV3KuVVwrDKsCrEH3hY1A6deT70UUAOooooAKKKKACiiigD//Z")
      [Void]$Code.AppendLine("`"@")
      [Void]$Code.AppendLine("#endregion")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogHelpPictureBox = System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogHelpPictureBox`"")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox = New-Object -TypeName System.Windows.Forms.PictureBox")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Controls.Add(`$DialogHelpPictureBox)")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.Image = [System.Drawing.Image]([System.Convert]::FromBase64String(`$Image))")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.Location = New-Object -TypeName System.Drawing.Point(`$DialogSpacer, `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.Name = `"DialogHelpPictureBox`"")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox.Text = `"DialogHelpPictureBox`"")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region function Start-DialogHelpPictureBoxDoubleClick")
      [Void]$Code.AppendLine("    function Start-DialogHelpPictureBoxDoubleClick()")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      <#")
      [Void]$Code.AppendLine("        .SYNOPSIS")
      [Void]$Code.AppendLine("          DoubleClick event for the DialogHelpPictureBox Control")
      [Void]$Code.AppendLine("        .DESCRIPTION")
      [Void]$Code.AppendLine("          DoubleClick event for the DialogHelpPictureBox Control")
      [Void]$Code.AppendLine("        .PARAMETER Sender")
      [Void]$Code.AppendLine("           The Form Control that fired the Event")
      [Void]$Code.AppendLine("        .PARAMETER EventArg")
      [Void]$Code.AppendLine("           The Event Arguments for the Event")
      [Void]$Code.AppendLine("        .EXAMPLE")
      [Void]$Code.AppendLine("           Start-DialogHelpPictureBoxDoubleClick -Sender `$Sender -EventArg `$EventArg")
      [Void]$Code.AppendLine("        .NOTES")
      [Void]$Code.AppendLine("          Original Function By Ken Sweet")
      [Void]$Code.AppendLine("        .LINK")
      [Void]$Code.AppendLine("      #>")
      [Void]$Code.AppendLine("      [CmdletBinding()]")
      [Void]$Code.AppendLine("      param (")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$Sender,")
      [Void]$Code.AppendLine("        [parameter(Mandatory = `$True)]")
      [Void]$Code.AppendLine("        [Object]`$EventArg")
      [Void]$Code.AppendLine("      )")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Enter DoubleClick Event for ```$DialogHelpPictureBox`"")
      [Void]$Code.AppendLine("      Try")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        `$ScriptBlock.Invoke()")
      [Void]$Code.AppendLine("        [System.GC]::Collect()")
      [Void]$Code.AppendLine("        [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Catch")
      [Void]$Code.AppendLine("      {")
      [Void]$Code.AppendLine("        Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("        Write-Debug -Message `"Code: `$((`$Error[0].InvocationInfo.Line).Trim())`"")
      [Void]$Code.AppendLine("      }")
      [Void]$Code.AppendLine("      Write-Verbose -Message `"Exit DoubleClick Event for ```$DialogHelpPictureBox`"")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"ScriptBlock`"))")
      [Void]$Code.AppendLine("    {")
      [Void]$Code.AppendLine("      `$DialogHelpPictureBox.add_DoubleClick({Start-DialogHelpPictureBoxDoubleClick -Sender `$This -EventArg `$PSItem})")
      [Void]$Code.AppendLine("    }")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogHelpLabel = System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogHelpLabel`"")
      [Void]$Code.AppendLine("    `$DialogHelpLabel = New-Object -TypeName System.Windows.Forms.Label")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Controls.Add(`$DialogHelpLabel)")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Font = `$DialogHelpForm.Font")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.ForeColor = `$GroupForeColor")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Location = New-Object -TypeName System.Drawing.Point((`$DialogHelpPictureBox.Right + `$DialogSpacer), `$DialogSpacer)")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Name = `"DialogHelpLabel`"")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Size = New-Object -TypeName System.Drawing.Size((`$DialogHelpLabel.CreateGraphics().MeasureString(`"I`", `$DialogHelpLabel.Font).Width * `$Width), `$DialogHelpLabel.Height)")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Text = `$Message")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #region `$DialogHelpOKButton = System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    Write-Verbose -Message `"Creating Form Control ```$DialogHelpOKButton`"")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton = New-Object -TypeName System.Windows.Forms.Button")
      [Void]$Code.AppendLine("    `$DialogHelpForm.Controls.Add(`$DialogHelpOKButton)")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.AutoSize = `$True")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.BackColor = `$ButtonBackColor")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Font = `$DialogHelpForm.Font")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.ForeColor = `$ButtonForeColor")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Name = `"DialogHelpOKButton`"")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.TabStop = `$True")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Tag = `$Null")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Text = `"&OK`"")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Location = New-Object -TypeName System.Drawing.Point((`$DialogHelpPictureBox.Right + `$DialogSpacer), (`$DialogHelpPictureBox.Bottom - `$DialogHelpOKButton.Height))")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton.Width = `$DialogHelpLabel.Right - `$DialogHelpOKButton.Left")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("    `$DialogHelpForm.AcceptButton = `$DialogHelpOKButton")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogHelpLabel.Size = New-Object -TypeName System.Drawing.Size(`$DialogHelpLabel.Width, ((`$DialogHelpOKButton.Top - `$DialogSpacer) - `$DialogHelpLabel.Top))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogHelpForm.ClientSize = New-Object -TypeName System.Drawing.Size((`$DialogHelpOKButton.Right + `$DialogSpacer), (`$DialogHelpPictureBox.Bottom + `$DialogSpacer))")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    #endregion")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogHelpForm.ShowDialog()")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    `$DialogHelpForm = `$Null")
      [Void]$Code.AppendLine("    `$DialogHelpPictureBox = `$Null")
      [Void]$Code.AppendLine("    `$DialogHelpLabel = `$Null")
      [Void]$Code.AppendLine("    `$DialogHelpOKButton = `$Null")
      [Void]$Code.AppendLine("")
      [Void]$Code.AppendLine("    [System.GC]::Collect()")
      [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Catch")
      [Void]$Code.AppendLine("  {")
      [Void]$Code.AppendLine("    Write-Debug -Message `"ErrMsg: `$(`$Error[0].Exception.Message)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Line: `$(`$Error[0].InvocationInfo.ScriptLineNumber)`"")
      [Void]$Code.AppendLine("    Write-Debug -Message `"Code:`$(`$Error[0].InvocationInfo.Line)`"")
      [Void]$Code.AppendLine("  }")
      [Void]$Code.AppendLine("  Write-Verbose -Message `"Exit Funcation for DialogHelp-About`"")
      [Void]$Code.AppendLine("}")
      [Void]$Code.AppendLine("#endregion")
      #endregion
      Break
    }
  }
  $Code.ToString()
  $Code = $Null
  [System.GC]::Collect()
  [System.GC]::WaitForPendingFinalizers()
  Write-Verbose -Message "Exit Function New-MyDialog"
}
#endregion

#region function Generate-VerifyWorkstation
function Generate-VerifyWorkstation()
{
  <#
    .SYNOPSIS
    .DESCRIPTION
    .EXAMPLE
      $A = Generate-VerifyWorkstation
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
  )
  Write-Verbose -Message "Enter Function Generate-VerifyWorkstation"
  Try
  {
    $Code = New-Object -TypeName System.Text.StringBuilder
    #region ******** function Verify-Workstation *********
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("#region function Test-MyWorkstation")
    [Void]$Code.AppendLine("function Test-MyWorkstation()")
    [Void]$Code.AppendLine("{")
    [Void]$Code.AppendLine("  <#")
    [Void]$Code.AppendLine("    .SYNOPSIS")
    [Void]$Code.AppendLine("      Verify Remote Workstation is the Correct One")
    [Void]$Code.AppendLine("    .DESCRIPTION")
    [Void]$Code.AppendLine("      Verify Remote Workstation is the Correct One")
    [Void]$Code.AppendLine("    .PARAMETER ComputerName")
    [Void]$Code.AppendLine("      Name of the Computer to Verify")
    [Void]$Code.AppendLine("    .PARAMETER Credential")
    [Void]$Code.AppendLine("      Credentials to use when connecting to the Remote Computer")
    [Void]$Code.AppendLine("    .PARAMETER Wait")
    [Void]$Code.AppendLine("      How Long to Wait for Job to be Completed")
    [Void]$Code.AppendLine("    .PARAMETER Serial")
    [Void]$Code.AppendLine("      Return Serial Number")
    [Void]$Code.AppendLine("    .PARAMETER Mobile")
    [Void]$Code.AppendLine("      Check if System is Desktop / Laptop")
    [Void]$Code.AppendLine("    .INPUTS")
    [Void]$Code.AppendLine("    .OUTPUTS")
    [Void]$Code.AppendLine("    .EXAMPLE")
    [Void]$Code.AppendLine("      Test-MyWorkstation -ComputerName `"MyWorkstation`"")
    [Void]$Code.AppendLine("    .NOTES")
    [Void]$Code.AppendLine("      Original Script By Ken Sweet")
    [Void]$Code.AppendLine("    .LINK")
    [Void]$Code.AppendLine("  #>")
    [Void]$Code.AppendLine("  [CmdletBinding()]")
    [Void]$Code.AppendLine("  param (")
    [Void]$Code.AppendLine("    [parameter(Mandatory = `$False, ValueFromPipeline = `$True, ValueFromPipelineByPropertyName = `$True)]")
    [Void]$Code.AppendLine("    [String[]]`$ComputerName = [System.Environment]::MachineName,")
    [Void]$Code.AppendLine("    [PSCredential]`$Credential,")
    [Void]$Code.AppendLine("    [ValidateRange(30, 300)]")
    [Void]$Code.AppendLine("    [Int]`$Wait = 120,")
    [Void]$Code.AppendLine("    [Switch]`$Serial,")
    [Void]$Code.AppendLine("    [Switch]`$Mobile")
    [Void]$Code.AppendLine("  )")
    [Void]$Code.AppendLine("  Begin")
    [Void]$Code.AppendLine("  {")
    [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation`"")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("    # Default Common Get-WmiObject Options")
    [Void]$Code.AppendLine("    if (`$PSBoundParameters.ContainsKey(`"Credential`"))")
    [Void]$Code.AppendLine("    {")
    [Void]$Code.AppendLine("      `$Params = @{")
    [Void]$Code.AppendLine("        `"ComputerName`" = `$Null;")
    [Void]$Code.AppendLine("        `"Credential`" = `$Credential")
    [Void]$Code.AppendLine("      }")
    [Void]$Code.AppendLine("    }")
    [Void]$Code.AppendLine("    else")
    [Void]$Code.AppendLine("    {")
    [Void]$Code.AppendLine("      `$Params = @{")
    [Void]$Code.AppendLine("        `"ComputerName`" = `$Null")
    [Void]$Code.AppendLine("      }")
    [Void]$Code.AppendLine("    }")
    [Void]$Code.AppendLine("  }")
    [Void]$Code.AppendLine("  Process")
    [Void]$Code.AppendLine("  {")
    [Void]$Code.AppendLine("    Write-Verbose -Message `"Enter Function Test-MyWorkstation - Process`"")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("    ForEach (`$Computer in `$ComputerName)")
    [Void]$Code.AppendLine("    {")
    [Void]$Code.AppendLine("      # Used to Calculate Verify Time")
    [Void]$Code.AppendLine("      `$StartTime = [DateTime]::Now")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      # Default Custom Object for the Verify Function to Return, Since it will always return a value I create the Object with the default error / failure values and update the poperties as needed")
    [Void]$Code.AppendLine("      #region >>>>>>>>>>>>>>>> Custom Return Object `$VerifyObject <<<<<<<<<<<<<<<<")
    [Void]$Code.AppendLine("      `$VerifyObject = [PSCustomObject]@{")
    [Void]$Code.AppendLine("        `"ComputerName`" = `$Computer.ToUpper();")
    [Void]$Code.AppendLine("        `"FQDN`" = `$Computer.ToUpper();")
    [Void]$Code.AppendLine("        `"Found`" = `$False;")
    [Void]$Code.AppendLine("        `"UserName`" = `"`";")
    [Void]$Code.AppendLine("        `"Domain`" = `"`";")
    [Void]$Code.AppendLine("        `"DomainMember`" = `"`";")
    [Void]$Code.AppendLine("        `"ProductType`" = 0;")
    [Void]$Code.AppendLine("        `"Manufacturer`" = `"`";")
    [Void]$Code.AppendLine("        `"Model`" = `"`";")
    [Void]$Code.AppendLine("        `"IsMobile`" = `$False;")
    [Void]$Code.AppendLine("        `"SerialNumber`" = `"`";")
    [Void]$Code.AppendLine("        `"Memory`" = `"`";")
    [Void]$Code.AppendLine("        `"OperatingSystem`" = `"`";")
    [Void]$Code.AppendLine("        `"BuildNumber`" = `"`";")
    [Void]$Code.AppendLine("        `"Version`" = `"`";")
    [Void]$Code.AppendLine("        `"ServicePack`" = `"`";")
    [Void]$Code.AppendLine("        `"Architecture`" = `"`";")
    [Void]$Code.AppendLine("        `"Is64Bit`" = `$False;")
    [Void]$Code.AppendLine("        `"LocalDateTime`" = `"`";")
    [Void]$Code.AppendLine("        `"InstallDate`" = `"`";")
    [Void]$Code.AppendLine("        `"LastBootUpTime`" = `"`";")
    [Void]$Code.AppendLine("        `"IPAddress`" = `"`";")
    [Void]$Code.AppendLine("        `"Status`" = `"Off-Line`";")
    [Void]$Code.AppendLine("        `"Time`" = [TimeSpan]::Zero")
    [Void]$Code.AppendLine("      }")
    [Void]$Code.AppendLine("      #endregion")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      if (`$Computer -match `"^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])`$`")")
    [Void]$Code.AppendLine("      {")
    [Void]$Code.AppendLine("        Try")
    [Void]$Code.AppendLine("        {")
    [Void]$Code.AppendLine("          # Get IP Address from DNS, you want to do all remote checks using IP rather than ComputerName.  If you connect to a computer using the wrong name Get-WmiObject will fail and using the IP Address will not")
    [Void]$Code.AppendLine("          `$IPAddresses = @([System.Net.Dns]::GetHostAddresses(`$Computer) | Where-Object -FilterScript { `$_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork } | Select-Object -ExpandProperty IPAddressToString)")
    [Void]$Code.AppendLine("          ForEach (`$IPAddress in `$IPAddresses)")
    [Void]$Code.AppendLine("          {")
    [Void]$Code.AppendLine("            # I think this is Faster than using Test-Connection")
    [Void]$Code.AppendLine("            if (((New-Object -TypeName System.Net.NetworkInformation.Ping).Send(`$IPAddress)).Status -eq [System.Net.NetworkInformation.IPStatus]::Success)")
    [Void]$Code.AppendLine("            {")
    [Void]$Code.AppendLine("              `$Params.ComputerName = `$IPAddress")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("              # Start Setting Return Values as they are Found")
    [Void]$Code.AppendLine("              `$VerifyObject.Status = `"On-Line`"")
    [Void]$Code.AppendLine("              `$VerifyObject.IPAddress = `$IPAddress")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("              # Start Primary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
    [Void]$Code.AppendLine("              [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_ComputerSystem)")
    [Void]$Code.AppendLine("              # Wait for Job to Finish or Wait Time has Elasped")
    [Void]$Code.AppendLine("              [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("              # Check if Job is Complete and has Data")
    [Void]$Code.AppendLine("              if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
    [Void]$Code.AppendLine("              {")
    [Void]$Code.AppendLine("                # Get Job Data")
    [Void]$Code.AppendLine("                `$MyCompData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                # Set Found Properties")
    [Void]$Code.AppendLine("                `$VerifyObject.ComputerName = `"`$(`$MyCompData.Name)`"")
    [Void]$Code.AppendLine("                if (`$MyCompData.PartOfDomain)")
    [Void]$Code.AppendLine("                {")
    [Void]$Code.AppendLine("                  `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)``.`$(`$MyCompData.Domain)`"")
    [Void]$Code.AppendLine("                }")
    [Void]$Code.AppendLine("                else")
    [Void]$Code.AppendLine("                {")
    [Void]$Code.AppendLine("                  `$VerifyObject.FQDN = `"`$(`$MyCompData.Name)`"")
    [Void]$Code.AppendLine("                }")
    [Void]$Code.AppendLine("                `$VerifyObject.UserName = `"`$(`$MyCompData.UserName)`"")
    [Void]$Code.AppendLine("                `$VerifyObject.Domain = `"`$(`$MyCompData.Domain)`"")
    [Void]$Code.AppendLine("                `$VerifyObject.DomainMember = `$MyCompData.PartOfDomain")
    [Void]$Code.AppendLine("                `$VerifyObject.Manufacturer = `"`$(`$MyCompData.Manufacturer)`"")
    [Void]$Code.AppendLine("                `$VerifyObject.Model = `"`$(`$MyCompData.Model)`"")
    [Void]$Code.AppendLine("                `$VerifyObject.Memory = `"`$(`$MyCompData.TotalPhysicalMemory)`"")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                # Verify Remote Computer is the Connect Computer, No need to get any more information")
    [Void]$Code.AppendLine("                if (`$MyCompData.Name -eq @(`$Computer.Split(`".`", [System.StringSplitOptions]::RemoveEmptyEntries))[0])")
    [Void]$Code.AppendLine("                {")
    [Void]$Code.AppendLine("                  # Found Corrct Workstation")
    [Void]$Code.AppendLine("                  `$VerifyObject.Found = `$True")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                  # Start Secondary Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
    [Void]$Code.AppendLine("                  [Void](`$MyJob = Get-WmiObject -AsJob @Params -Class Win32_OperatingSystem)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                  # Wait for Job to Finish or Wait Time has Elasped")
    [Void]$Code.AppendLine("                  [Void](Wait-Job -Job `$MyJob -Timeout `$Wait)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                  # Check if Job is Complete and has Data")
    [Void]$Code.AppendLine("                  if (`$MyJob.State -eq `"Completed`" -and `$MyJob.HasMoreData)")
    [Void]$Code.AppendLine("                  {")
    [Void]$Code.AppendLine("                    # Get Job Data")
    [Void]$Code.AppendLine("                    `$MyOSData = Get-Job -ID `$MyJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                    # Set Found Properties")
    [Void]$Code.AppendLine("                    `$VerifyObject.ProductType = `$MyOSData.ProductType")
    [Void]$Code.AppendLine("                    `$VerifyObject.OperatingSystem = `"`$(`$MyOSData.Caption)`"")
    [Void]$Code.AppendLine("                    `$VerifyObject.ServicePack = `"`$(`$MyOSData.CSDVersion)`"")
    [Void]$Code.AppendLine("                    `$VerifyObject.BuildNumber = `"`$(`$MyOSData.BuildNumber)`"")
    [Void]$Code.AppendLine("                    `$VerifyObject.Version = `"`$(`$MyOSData.Version)`"")
    [Void]$Code.AppendLine("                    `$VerifyObject.Architecture = `$(if ([String]::IsNullOrEmpty(`$MyOSData.OSArchitecture)) { `"32-bit`" } else { `"`$(`$MyOSData.OSArchitecture)`" })")
    [Void]$Code.AppendLine("                    `$VerifyObject.Is64Bit = (`$VerifyObject.Architecture -eq `"64-bit`")")
    [Void]$Code.AppendLine("                    `$VerifyObject.LocalDateTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LocalDateTime)")
    [Void]$Code.AppendLine("                    `$VerifyObject.InstallDate = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.InstallDate)")
    [Void]$Code.AppendLine("                    `$VerifyObject.LastBootUpTime = [System.Management.ManagementDateTimeConverter]::ToDateTime(`$MyOSData.LastBootUpTime)")
    [Void]$Code.AppendLine("                  }")
    [Void]$Code.AppendLine("                  else")
    [Void]$Code.AppendLine("                  {")
    [Void]$Code.AppendLine("                    `$VerifyObject.Status = `"Verify Operating System Error`"")
    [Void]$Code.AppendLine("                    [Void](Remove-Job -Job `$MyJob -Force)")
    [Void]$Code.AppendLine("                  }")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                  # Optional SerialNumber Job")
    [Void]$Code.AppendLine("                  if (`$Serial.IsPresent)")
    [Void]$Code.AppendLine("                  {")
    [Void]$Code.AppendLine("                    # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
    [Void]$Code.AppendLine("                    [Void](`$MyBIOSJob = Get-WmiObject -AsJob @Params -Class Win32_Bios)")
    [Void]$Code.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
    [Void]$Code.AppendLine("                    [Void](Wait-Job -Job `$MyBIOSJob -Timeout `$Wait)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                    # Check if Job is Complete and has Data")
    [Void]$Code.AppendLine("                    if (`$MyBIOSJob.State -eq `"Completed`" -and `$MyBIOSJob.HasMoreData)")
    [Void]$Code.AppendLine("                    {")
    [Void]$Code.AppendLine("                      # Get Job Data")
    [Void]$Code.AppendLine("                      `$MyBIOSData = Get-Job -ID `$MyBIOSJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                      # Set Found Property")
    [Void]$Code.AppendLine("                      `$VerifyObject.SerialNumber = `"`$(`$MyBIOSData.SerialNumber)`"")
    [Void]$Code.AppendLine("                    }")
    [Void]$Code.AppendLine("                    else")
    [Void]$Code.AppendLine("                    {")
    [Void]$Code.AppendLine("                      `$VerifyObject.Status = `"Verify SerialNumber Error`"")
    [Void]$Code.AppendLine("                      [Void](Remove-Job -Job `$MyBIOSJob -Force)")
    [Void]$Code.AppendLine("                    }")
    [Void]$Code.AppendLine("                  }")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                  # Optional Mobile / ChassisType Job")
    [Void]$Code.AppendLine("                  if (`$Mobile.IsPresent)")
    [Void]$Code.AppendLine("                  {")
    [Void]$Code.AppendLine("                    # Start Optional Job, Pass IP Address and Credentials to Job Script to make Connection to Remote Computer")
    [Void]$Code.AppendLine("                    [Void](`$MyChassisJob = Get-WmiObject -AsJob @Params -Class Win32_SystemEnclosure)")
    [Void]$Code.AppendLine("                    # Wait for Job to Finish or Wait Time has Elasped")
    [Void]$Code.AppendLine("                    [Void](Wait-Job -Job `$MyChassisJob -Timeout `$Wait)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                    # Check if Job is Complete and has Data")
    [Void]$Code.AppendLine("                    if (`$MyChassisJob.State -eq `"Completed`" -and `$MyChassisJob.HasMoreData)")
    [Void]$Code.AppendLine("                    {")
    [Void]$Code.AppendLine("                      # Get Job Data")
    [Void]$Code.AppendLine("                      `$MyChassisData = Get-Job -ID `$MyChassisJob.ID | Receive-Job -AutoRemoveJob -Wait -Force")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("                      # Set Found Property")
    [Void]$Code.AppendLine("                      `$VerifyObject.IsMobile = `$(@(8, 9, 10, 11, 12, 14, 18, 21, 30, 31, 32) -contains ((`$MyChassisData.ChassisTypes)[0]))")
    [Void]$Code.AppendLine("                    }")
    [Void]$Code.AppendLine("                    else")
    [Void]$Code.AppendLine("                    {")
    [Void]$Code.AppendLine("                      `$VerifyObject.Status = `"Verify is Mobile Error`"")
    [Void]$Code.AppendLine("                      [Void](Remove-Job -Job `$MyChassisJob -Force)")
    [Void]$Code.AppendLine("                    }")
    [Void]$Code.AppendLine("                  }")
    [Void]$Code.AppendLine("                }")
    [Void]$Code.AppendLine("                else")
    [Void]$Code.AppendLine("                {")
    [Void]$Code.AppendLine("                  `$VerifyObject.Status = `"Wrong Workstation Name`"")
    [Void]$Code.AppendLine("                }")
    [Void]$Code.AppendLine("              }")
    [Void]$Code.AppendLine("              else")
    [Void]$Code.AppendLine("              {")
    [Void]$Code.AppendLine("                `$VerifyObject.Status = `"Verify Workstation Error`"")
    [Void]$Code.AppendLine("                [Void](Remove-Job -Job `$MyJob -Force)")
    [Void]$Code.AppendLine("              }")
    [Void]$Code.AppendLine("              # Beak out of Loop, Verify was a Success no need to try other IP Address if any")
    [Void]$Code.AppendLine("              Break")
    [Void]$Code.AppendLine("            }")
    [Void]$Code.AppendLine("          }")
    [Void]$Code.AppendLine("        }")
    [Void]$Code.AppendLine("        Catch")
    [Void]$Code.AppendLine("        {")
    [Void]$Code.AppendLine("          # Workstation Not in DNS")
    [Void]$Code.AppendLine("          `$VerifyObject.Status = `"Workstation Not in DNS`"")
    [Void]$Code.AppendLine("        }")
    [Void]$Code.AppendLine("      }")
    [Void]$Code.AppendLine("      else")
    [Void]$Code.AppendLine("      {")
    [Void]$Code.AppendLine("        `$VerifyObject.Status = `"Invalid Computer Name`"")
    [Void]$Code.AppendLine("      }")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      # Calculate Verify Time")
    [Void]$Code.AppendLine("      `$VerifyObject.Time = ([DateTime]::Now - `$StartTime)")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      # Return Custom Object with Collected Verify Information")
    [Void]$Code.AppendLine("      Write-Output -InputObject `$VerifyObject")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      `$VerifyObject = `$Null")
    [Void]$Code.AppendLine("      `$Params = `$Null")
    [Void]$Code.AppendLine("      `$MyJob = `$Null")
    [Void]$Code.AppendLine("      `$MyCompData = `$Null")
    [Void]$Code.AppendLine("      `$MyOSData = `$Null")
    [Void]$Code.AppendLine("      `$MyBIOSData = `$Null")
    [Void]$Code.AppendLine("      `$MyChassisData = `$Null")
    [Void]$Code.AppendLine("      `$StartTime = `$Null")
    [Void]$Code.AppendLine("")
    [Void]$Code.AppendLine("      [System.GC]::Collect()")
    [Void]$Code.AppendLine("      [System.GC]::WaitForPendingFinalizers()")
    [Void]$Code.AppendLine("    }")
    [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation - Process`"")
    [Void]$Code.AppendLine("  }")
    [Void]$Code.AppendLine("  End")
    [Void]$Code.AppendLine("  {")
    [Void]$Code.AppendLine("    [System.GC]::Collect()")
    [Void]$Code.AppendLine("    [System.GC]::WaitForPendingFinalizers()")
    [Void]$Code.AppendLine("    Write-Verbose -Message `"Exit Function Test-MyWorkstation`"")
    [Void]$Code.AppendLine("  }")
    [Void]$Code.AppendLine("}")
    [Void]$Code.AppendLine("#endregion")
    [Void]$Code.AppendLine("")
    #endregion
    $Code.ToString()
    $Code = $Null
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
  }
  Write-Verbose -Message "Exit Function Generate-VerifyWorkstation"
}
#endregion

#endregion

#region ******** CGenForm ********

$CGenFormComponents = New-Object -TypeName System.ComponentModel.Container

#region $CGenToolTip = System.Windows.Forms.ToolTip
Write-Verbose -Message "Creating Form Control `$CGenToolTip"
$CGenToolTip = New-Object -TypeName System.Windows.Forms.ToolTip($CGenFormComponents)
$CGenToolTip.Active = $False
#$CGenToolTip.AutomaticDelay = 500
#$CGenToolTip.AutoPopDelay = 5000
#$CGenToolTip.BackColor = [System.Drawing.SystemColors]::Info
#$CGenToolTip.ForeColor = [System.Drawing.SystemColors]::InfoText
#$CGenToolTip.InitialDelay = 500
#$CGenToolTip.IsBalloon = $False
#$CGenToolTip.OwnerDraw = $False
#$CGenToolTip.ReshowDelay = 100
#$CGenToolTip.ShowAlways = $False
#$CGenToolTip.StripAmpersands = $False
#$CGenToolTip.Tag = $Null
$CGenToolTip.ToolTipIcon = [System.Windows.Forms.ToolTipIcon]::Info
$CGenToolTip.ToolTipTitle = "$($CGenConfig.ScriptName) - $($CGenConfig.ScriptVersion)"
#$CGenToolTip.UseAnimation = $True
#$CGenToolTip.UseFading = $True
#endregion
#$CGenToolTip.SetToolTip($FormControl, "Form Control Help")

#region $CGenFormICO
# Icons for Forms are 16x16
$CGenFormICO = @"
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJfAz/D44Y/w+OGP8Pjhj/EI8Z/xCP
Gv8KfA3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD48Z/4fknP+C5Jj/g+SZ/4Plm/9645X/EZAe/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCPHP+J5qD/J9JU/yjT
V/8o1Fr/fOWb/xKRIf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAzqf8AM6n/ADOp/wAAAAARkR//i+im/ynWXv8q12D/K9hj/37oof8SkiT/BlriMAZZ4v8GWOH/Blfh/wZW4P8FVd//BVXf/wVU3jAAAAAAEpIi/4zq
q/8s2Wf/Ldpq/y7bbf9/6qf/E5Mn/wAAAAAHX+aAB1/l/wde5f8HXeT/B1zk/wZb44AAAAAAAAAAABOTJP+N7LD/L91x/zDedP8w33b/geyt/xOVKv8AAAAAAAAAAAhl6tAIZOn/CGTp/whj6NAAAAAAAAAAAAAA
AAASjyL/Ks1l/yrOZ/8rz2n/K9Br/yvQa/8TjyX/AAAAAAAAAAAJbO4wCWvu/wlq7f8JauwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApy8oAKcfGAAAAAAAAA
AACgjW1loo9vsqCNbbKYhWWyjXpaZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrmHhltKGBsrelhLK0oYGyq5h4sp2KarKNelplAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAu6iIssi1lLLNupmyyLWUsruoiLKrmHiymIVlsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMi1lLLZyKWy4tGustnIpbLItZSytKGBsqCNbbIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADNupmy4tGusvfmw7Li0a6yzbqZsrelhLKij2+yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyLWUZdnIpbLi0a6y2cilssi1lLK0oYGyoI1tZQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADItZRlzbqZssi1lLK7qIiyq5h4ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA/4CsQf+ArEH/gKxBAICsQQCArEGBgKxBw4CsQcP/rEHmD6xB/AesQfwHrEH8B6xB/AesQfwHrEH+D6xB//+sQQ==
"@
#endregion

#region $CGenForm = System.Windows.Forms.Form
Write-Verbose -Message "Creating Form Control `$CGenForm"
$CGenForm = New-Object -TypeName System.Windows.Forms.Form
$CGenForm.BackColor = $CGenColor.BackColor
$CGenForm.Font = New-Object -TypeName System.Drawing.Font($CGenConfig.FontFamily, ($CGenConfig.FontSize * (96 / ($CGenForm.CreateGraphics()).DpiX)), [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)
$CGenForm.ForeColor = $CGenColor.ForeColor
$CGenForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
$CGenForm.Icon = [System.Drawing.Icon]([System.Convert]::FromBase64String(($CGenFormICO)))
$CGenForm.KeyPreview = $True
$CGenForm.MaximizeBox = $False
$CGenForm.MinimumSize = New-Object -TypeName System.Drawing.Size(800, 500)
$CGenForm.Name = "CGenForm"
$CGenForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen
$CGenForm.Tag = (-not $CGenConfig.Production)
$CGenForm.Text = "$($CGenConfig.ScriptName) - $($CGenConfig.ScriptVersion)"
#endregion
$CGenToolTip.SetToolTip($CGenForm, "Help for Control $($CGenForm.Name)")

#region function Start-CGenFormClosing
function Start-CGenFormClosing()
{
  <#
    .SYNOPSIS
      Closing event for the CGenForm Control
    .DESCRIPTION
      Closing event for the CGenForm Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenFormClosing -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Closing Event for `$CGenForm"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    # Show Console Window
    $Script:VerbosePreference = "Continue"
    $Script:DebugPreference = "Continue"
    [Void][Window.Display]::Show()
    $CGenForm.Tag = $True
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Closing Event for `$CGenForm"
}
#endregion
$CGenForm.add_Closing({Start-CGenFormClosing -Sender $This -EventArg $PSItem})

#region function Start-CGenFormKeyDown
function Start-CGenFormKeyDown()
{
  <#
    .SYNOPSIS
      KeyDown event for the CGenForm Control
    .DESCRIPTION
      KeyDown event for the CGenForm Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenFormKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$CGenForm"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    if ($EventArg.Control -and $EventArg.Alt -and $EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F10)
    {
      if ($CGenForm.Tag)
      {
        # Hide Console Window
        $Script:VerbosePreference = "SilentlyContinue"
        $Script:DebugPreference = "SilentlyContinue"
        [Void][Window.Display]::Hide()
        $CGenForm.Tag = $False
      }
      else
      {
        # Show Console Window
        $Script:VerbosePreference = "Continue"
        $Script:DebugPreference = "Continue"
        [Void][Window.Display]::Show()
        $CGenForm.Tag = $True
      }
      $CGenForm.Activate()
      $CGenForm.Select()
    }
    elseif ($EventArg.KeyCode -eq [System.Windows.Forms.Keys]::F1)
    {
      $CGenToolTip.Active = (-not $CGenToolTip.Active)
    }
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit KeyDown Event for `$CGenForm"
}
#endregion
$CGenForm.add_KeyDown({Start-CGenFormKeyDown -Sender $This -EventArg $PSItem})

#region function Start-CGenFormLoad
function Start-CGenFormLoad()
{
  <#
    .SYNOPSIS
      Load event for the CGenForm Control
    .DESCRIPTION
      Load event for the CGenForm Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenFormLoad -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Load Event for `$CGenForm"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor

    $Screen = ([System.Windows.Forms.Screen]::FromControl($Sender)).WorkingArea
    $Sender.Left = [Math]::Floor(($Screen.Width - $Sender.Width) / 2)
    $Sender.Top = [Math]::Floor(($Screen.Height - $Sender.Height) / 2)

    if ($CGenConfig.Production)
    {
      # Hide Console Window
      $Script:VerbosePreference = "SilentlyContinue"
      $Script:DebugPreference = "SilentlyContinue"
      [Void][Window.Display]::Hide()
      $CGenForm.Tag = $False
    }
    else
    {
      $CGenForm.Tag = $True
    }
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Load Event for `$CGenForm"
}
#endregion
$CGenForm.add_Load({Start-CGenFormLoad -Sender $This -EventArg $PSItem})

#region function Start-CGenFormShown
function Start-CGenFormShown()
{
  <#
    .SYNOPSIS
      Shown event for the CGenForm Control
    .DESCRIPTION
      Shown event for the CGenForm Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenFormShown -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Shown Event for `$CGenForm"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
    
    $Sender.Refresh()
    $CGenControlListListBox.BeginUpdate()
    ForEach ($Control in $CGenConfig.ControlList)
    {
      New-MyListItem -Text $Control -Value $Control -Control $CGenControlListListBox
    }
    $CGenControlListListBox.EndUpdate()
    
    $Sender.Refresh()
    $CGenControlListListBox.SelectedItem = $CGenControlListListBox.Items | Where-Object -FilterScript { $PSItem.Text -eq "Form" }
    
    $CGenControlNameTextBox.Select()

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Shown Event for `$CGenForm"
}
#endregion
$CGenForm.add_Shown({Start-CGenFormShown -Sender $This -EventArg $PSItem})

#region ******** $CGenForm Controls ********

#region $CGenLabel = System.Windows.Forms.Label
Write-Verbose -Message "Creating Form Control `$CGenLabel"
$CGenLabel = New-Object -TypeName System.Windows.Forms.Label
$CGenForm.Controls.Add($CGenLabel)
$CGenLabel.AutoSize = $True
$CGenLabel.BackColor = $CGenColor.TitleBackColor
$CGenLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$CGenLabel.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, ($CGenForm.Font.Size * 2), [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenLabel.ForeColor = $CGenColor.TitleForeColor
$CGenLabel.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, $CGenConfig.FormSpacer)
$CGenLabel.Name = "CGenLabel"
$CGenLabel.Tag = 0
$CGenLabel.Text = "$($CGenConfig.ScriptName) - $($CGenConfig.ScriptVersion)"
$CGenLabel.TextAlign = [System.Drawing.ContentAlignment]::BottomCenter
#endregion
$TempHeight = $CGenLabel.Height
$CGenLabel.AutoSize = $False
$CGenLabel.Size = New-Object -TypeName System.Drawing.Size(([Math]::Ceiling($CGenLabel.CreateGraphics().MeasureString("X", $CGenLabel.Font).Width * $CGenConfig.MainWidth)), $TempHeight)

#region function Start-CGenLabelDoubleClick
function Start-CGenLabelDoubleClick()
{
  <#
    .SYNOPSIS
      DoubleClick event for the CGenLabel Control
    .DESCRIPTION
      DoubleClick event for the CGenLabel Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenLabelDoubleClick -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter DoubleClick Event for `$CGenLabel"
  Try
  {
    Switch (($CGenLabel.Tag = ($CGenLabel.Tag + 1) % 8))
    {
      0
      {
        # Main Form Colors - Mine - Dark
        $CGenColor.BackColor = [System.Drawing.Color]::Black
        $CGenColor.ForeColor = [System.Drawing.Color]::DarkRed
        
        # Default Color for Labels
        $CGenColor.LabelForeColor = [System.Drawing.Color]::DarkRed
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::DimGray
        $CGenColor.TitleForeColor = [System.Drawing.Color]::Black
        
        # Default Color for GroupBoxes, CheckBoxes, and RadioButtons
        $CGenColor.GroupForeColor = [System.Drawing.Color]::DarkRed
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::LightGray
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::DarkGray
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Black
        Break
      }
      1
      {
        # Main Form Colors - Mine - Light
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::LightBlue
        $CGenColor.TitleForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.Color]::Navy
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
      2
      {
        # Main Form Colors - Default
        $CGenColor.BackColor = [System.Drawing.SystemColors]::Control
        $CGenColor.ForeColor = [System.Drawing.SystemColors]::ControlText
        
        # Default Color for Labels
        $CGenColor.LabelForeColor = [System.Drawing.SystemColors]::ControlText
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.SystemColors]::Control
        $CGenColor.TitleForeColor = [System.Drawing.SystemColors]::ControlText
        
        # Default Color for GroupBoxes, CheckBoxes, and RadioButtons
        $CGenColor.GroupForeColor = [System.Drawing.SystemColors]::ControlText
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.SystemColors]::Window
        $CGenColor.TextForeColor = [System.Drawing.SystemColors]::WindowText
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.SystemColors]::Control
        $CGenColor.ButtonForeColor = [System.Drawing.SystemColors]::ControlText
        Break
      }
      3
      {
        # Main Form Colors - PSHJ
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml("#1F3D7D")
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::White
        $CGenColor.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml("#1F3D7D")
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml("#419639")
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
      4
      {
        # Main Form Colors - Providence
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml("#004B8E")
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::White
        $CGenColor.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml("#004B8E")
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml("#FF8C0E")
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
      5
      {
        # Main Form Colors - Swedish
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml("#000000")
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::White
        $CGenColor.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml("#000000")
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml("#639EC8")
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
      6
      {
        # Main Form Colors - Facey
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml("#000000")
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::White
        $CGenColor.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml("#000000")
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml("#005092")
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
      7
      {
        # Main Form Colors - Kadlec
        $CGenColor.BackColor = [System.Drawing.Color]::White
        $CGenColor.ForeColor = [System.Drawing.Color]::Navy
        
        # Default Color for Labels, CheckBoxes, and RadioButtons
        $CGenColor.LabelForeColor = [System.Drawing.ColorTranslator]::FromHtml("#0D3B5F")
        
        # Default Color for Title Labels
        $CGenColor.TitleBackColor = [System.Drawing.Color]::White
        $CGenColor.TitleForeColor = [System.Drawing.ColorTranslator]::FromHtml("#0D3B5F")
        
        # Default Color for GroupBoxes
        $CGenColor.GroupForeColor = [System.Drawing.ColorTranslator]::FromHtml("#0D3B5F")
        
        # Default Colors for TextBoxes, ComboBoxes, CheckedListBoxes, ListBoxes, ListViews, TreeViews, RichTextBoxes, DateTimePickers, and DataGridViews
        $CGenColor.TextBackColor = [System.Drawing.Color]::White
        $CGenColor.TextForeColor = [System.Drawing.Color]::Black
        
        # Default Color for Buttons
        $CGenColor.ButtonBackColor = [System.Drawing.Color]::AliceBlue
        $CGenColor.ButtonForeColor = [System.Drawing.Color]::Navy
        Break
      }
    }
    
    $CGenForm.BackColor = $CGenColor.BackColor
    $CGenForm.ForeColor = $CGenColor.ForeColor
    
    $CGenLabel.BackColor = $CGenColor.TitleBackColor
    $CGenLabel.ForeColor = $CGenColor.TitleForeColor
    
    $CGenEncodeGroupBox.ForeColor = $CGenColor.GroupForeColor
    
    $CGenEncodeButton.BackColor = $CGenColor.ButtonBackColor
    $CGenEncodeButton.ForeColor = $CGenColor.ButtonForeColor
    
    $CGenEncodeCheckBox.ForeColor = $CGenColor.LabelForeColor
    
    $CGenCompressGroupBox.ForeColor = $CGenColor.GroupForeColor
    
    $CGenCompressButton.BackColor = $CGenColor.ButtonBackColor
    $CGenCompressButton.ForeColor = $CGenColor.ButtonForeColor
    
    $CGenControlGroupBox.ForeColor = $CGenColor.GroupForeColor
    
    $CGenControlNameLabel.BackColor = $CGenColor.TitleBackColor
    $CGenControlNameLabel.ForeColor = $CGenColor.TitleForeColor
    
    $CGenControlNameTextBox.BackColor = $CGenColor.TextBackColor
    $CGenControlNameTextBox.ForeColor = $CGenColor.TextForeColor
    
    $CGenControlListLabel.BackColor = $CGenColor.TitleBackColor
    $CGenControlListLabel.ForeColor = $CGenColor.TitleForeColor
    
    $CGenControlListListBox.BackColor = $CGenColor.TextBackColor
    $CGenControlListListBox.ForeColor = $CGenColor.TextForeColor
    
    $CGenControlEventLabel.BackColor = $CGenColor.TitleBackColor
    $CGenControlEventLabel.ForeColor = $CGenColor.TitleForeColor
    
    $CGenControlEventListBox.BackColor = $CGenColor.TextBackColor
    $CGenControlEventListBox.ForeColor = $CGenColor.TextForeColor
    
    $CGenCheckBox.ForeColor = $CGenColor.LabelForeColor
    
    $CGenButton.BackColor = $CGenColor.ButtonBackColor
    $CGenButton.ForeColor = $CGenColor.ButtonForeColor
    
    $CGenTextBox.BackColor = $CGenColor.TextBackColor
    $CGenTextBox.ForeColor = $CGenColor.TextForeColor
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit DoubleClick Event for `$CGenLabel"
}
#endregion
$CGenLabel.add_DoubleClick({ Start-CGenLabelDoubleClick -Sender $This -EventArg $PSItem })

#region $CGenEncodeGroupBox = System.Windows.Forms.GroupBox
Write-Verbose -Message "Creating Form Control `$CGenEncodeGroupBox"
$CGenEncodeGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox
# Location of First Control New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenEncodeGroupBox.CreateGraphics().MeasureString($CGenEncodeGroupBox.Text, $CGenEncodeGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenForm.Controls.Add($CGenEncodeGroupBox)
$CGenEncodeGroupBox.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenEncodeGroupBox.ForeColor = $CGenColor.GroupForeColor
$CGenEncodeGroupBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenLabel.Bottom + $CGenConfig.FormSpacer))
$CGenEncodeGroupBox.Name = "CGenEncodeGroupBox"
#$CGenEncodeGroupBox.TabIndex = 0
#$CGenEncodeGroupBox.TabStop = $False
#$CGenEncodeGroupBox.Tag = $Null
$CGenEncodeGroupBox.Text = "Encode Icon / Image"
$CGenEncodeGroupBox.Width = [Math]::Floor($CGenLabel.Width / 4)
#endregion

#region ******** $CGenEncodeGroupBox Controls ********

#region $CGenEncodeButton = System.Windows.Forms.Button
Write-Verbose -Message "Creating Form Control `$CGenEncodeButton"
$CGenEncodeButton = New-Object -TypeName System.Windows.Forms.Button
$CGenEncodeGroupBox.Controls.Add($CGenEncodeButton)
$CGenEncodeButton.AutoSize = $True
$CGenEncodeButton.BackColor = $CGenColor.ButtonBackColor
$CGenEncodeButton.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenEncodeButton.ForeColor = $CGenColor.ButtonForeColor
$CGenEncodeButton.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenEncodeGroupBox.CreateGraphics().MeasureString($CGenEncodeGroupBox.Text, $CGenEncodeGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenEncodeButton.Name = "CGenEncodeButton"
$CGenEncodeButton.TabIndex = 0
$CGenEncodeButton.TabStop = $True
$CGenEncodeButton.Tag = $Null
$CGenEncodeButton.Text = "Select Icon / Image"
$CGenEncodeButton.Width = $CGenEncodeGroupBox.ClientSize.Width - ($CGenConfig.FormSpacer * 2)
#endregion
$CGenToolTip.SetToolTip($CGenEncodeButton, "Encode an Icon / Image File")

#region function Start-CGenEncodeButtonClick
function Start-CGenEncodeButtonClick()
{
  <#
    .SYNOPSIS
      Click event for the CGenEncodeButton Control
    .DESCRIPTION
      Click event for the CGenEncodeButton Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenEncodeButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$CGenEncodeButton"
  Try
  {
    $CGenOpenFileDialog.Filter = "All Icon and Image Files|*.ico;*.bmp;*.gif;*.jpg;*.jpeg;*.png|Icon Files Only|*.ico|Image Files Only|*.bmp;*.gif;*.jpg;*.jpeg;*.png"
    $CGenOpenFileDialog.FilterIndex = 0
    $CGenOpenFileDialog.FileName = ""
    If ($CGenOpenFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $CGenTextBox.Text = $(Convert-MyFormImageToBase64 -Path $CGenOpenFileDialog.FileName -Name $CGenOpenFileDialog.SafeFileName)
      $CGenTextBox.SelectAll()
      $CGenTextBox.Copy()
      $CGenTextBox.DeselectAll()
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Click Event for `$CGenEncodeButton"
}
#endregion
$CGenEncodeButton.add_Click({Start-CGenEncodeButtonClick -Sender $This -EventArg $PSItem})

#region $CGenEncodeCheckBox = System.Windows.Forms.CheckBox
Write-Verbose -Message "Creating Form Control `$CGenEncodeCheckBox"
$CGenEncodeCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox
$CGenEncodeGroupBox.Controls.Add($CGenEncodeCheckBox)
$CGenEncodeCheckBox.AutoSize = $True
$CGenEncodeCheckBox.Checked = $True
$CGenEncodeCheckBox.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenEncodeCheckBox.ForeColor = $CGenColor.GroupForeColor
$CGenEncodeCheckBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenEncodeButton.Bottom + $CGenConfig.FormSpacer))
$CGenEncodeCheckBox.Name = "CGenEncodeCheckBox"
#$CGenEncodeCheckBox.TabIndex = 0
#$CGenEncodeCheckBox.TabStop = $True
#$CGenEncodeCheckBox.Tag = $Null
$CGenEncodeCheckBox.Text = "Convert Image to JPG"
#endregion
$CGenToolTip.SetToolTip($CGenEncodeCheckBox, "Convert Image to JPG")

$CGenEncodeGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size(($CGenEncodeButton.Right + $CGenConfig.FormSpacer), ($CGenEncodeCheckBox.Bottom + $CGenConfig.FormSpacer))

#endregion

#region $CGenCompressGroupBox = System.Windows.Forms.GroupBox
Write-Verbose -Message "Creating Form Control `$CGenCompressGroupBox"
$CGenCompressGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox
# Location of First Control New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenCompressGroupBox.CreateGraphics().MeasureString($CGenCompressGroupBox.Text, $CGenCompressGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenForm.Controls.Add($CGenCompressGroupBox)
$CGenCompressGroupBox.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenCompressGroupBox.ForeColor = $CGenColor.GroupForeColor
$CGenCompressGroupBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenEncodeGroupBox.Bottom + $CGenConfig.FormSpacer))
$CGenCompressGroupBox.Name = "CGenCompressGroupBox"
#$CGenCompressGroupBox.TabIndex = 0
#$CGenCompressGroupBox.TabStop = $False
#$CGenCompressGroupBox.Tag = $Null
$CGenCompressGroupBox.Text = "Compress Data / File"
$CGenCompressGroupBox.Width = [Math]::Floor($CGenLabel.Width / 4)
#endregion

#region ******** $CGenCompressGroupBox Controls ********

#region $CGenCompressButton = System.Windows.Forms.Button
Write-Verbose -Message "Creating Form Control `$CGenCompressButton"
$CGenCompressButton = New-Object -TypeName System.Windows.Forms.Button
$CGenCompressGroupBox.Controls.Add($CGenCompressButton)
$CGenCompressButton.AutoSize = $True
$CGenCompressButton.BackColor = $CGenColor.ButtonBackColor
$CGenCompressButton.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenCompressButton.ForeColor = $CGenColor.ButtonForeColor
$CGenCompressButton.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenCompressGroupBox.CreateGraphics().MeasureString($CGenCompressGroupBox.Text, $CGenCompressGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenCompressButton.Name = "CGenCompressButton"
$CGenCompressButton.TabIndex = 0
$CGenCompressButton.TabStop = $True
$CGenCompressButton.Tag = $Null
$CGenCompressButton.Text = "Select Data / File"
$CGenCompressButton.Width = $CGenCompressGroupBox.ClientSize.Width - ($CGenConfig.FormSpacer * 2)
#endregion
$CGenToolTip.SetToolTip($CGenCompressButton, "Compress an Image or File")

#region function Start-CGenCompressButtonClick
function Start-CGenCompressButtonClick()
{
  <#
    .SYNOPSIS
      Click event for the CGenCompressButton Control
    .DESCRIPTION
      Click event for the CGenCompressButton Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenCompressButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$CGenCompressButton"
  Try
  {
    $CGenOpenFileDialog.Filter = "Text Files|*.txt|XML Files|*.xml|HTM/HTML Files|*.htm;*.html|Rich Text Documents|*.rtf|Microsoft Office Files|*.doc;*.docx;*.xls;*.xlsx|Applications|*.exe|All Files|*.*"
    $CGenOpenFileDialog.FilterIndex = 0
    $CGenOpenFileDialog.FileName = ""
    If ($CGenOpenFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
    {
      $CGenTextBox.Text = $(Compress-MyDataFile -Path $CGenOpenFileDialog.FileName -Name $CGenOpenFileDialog.SafeFileName)
      $CGenTextBox.SelectAll()
      $CGenTextBox.Copy()
      $CGenTextBox.DeselectAll()
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Click Event for `$CGenCompressButton"
}
#endregion
$CGenCompressButton.add_Click({Start-CGenCompressButtonClick -Sender $This -EventArg $PSItem})

$CGenCompressGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size(($($CGenCompressGroupBox.Controls[$CGenCompressGroupBox.Controls.Count - 1]).Right + $CGenConfig.FormSpacer), ($($CGenCompressGroupBox.Controls[$CGenCompressGroupBox.Controls.Count - 1]).Bottom + $CGenConfig.FormSpacer))

#endregion

#region $CGenControlGroupBox = System.Windows.Forms.GroupBox
Write-Verbose -Message "Creating Form Control `$CGenControlGroupBox"
$CGenControlGroupBox = New-Object -TypeName System.Windows.Forms.GroupBox
# Location of First Control New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenControlGroupBox.CreateGraphics().MeasureString($CGenControlGroupBox.Text, $CGenControlGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenForm.Controls.Add($CGenControlGroupBox)
$CGenControlGroupBox.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenControlGroupBox.ForeColor = $CGenColor.GroupForeColor
$CGenControlGroupBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenCompressGroupBox.Bottom + $CGenConfig.FormSpacer))
$CGenControlGroupBox.Name = "CGenControlGroupBox"
#$CGenControlGroupBox.TabIndex = 0
#$CGenControlGroupBox.TabStop = $False
#$CGenControlGroupBox.Tag = $Null
$CGenControlGroupBox.Text = "Form Controls"
$CGenControlGroupBox.Width = $CGenEncodeGroupBox.Width
#endregion

#region ******** $CGenControlGroupBox Controls ********

#region $CGenControlNameLabel = System.Windows.Forms.Label
Write-Verbose -Message "Creating Form Control `$CGenControlNameLabel"
$CGenControlNameLabel = New-Object -TypeName System.Windows.Forms.Label
$CGenControlGroupBox.Controls.Add($CGenControlNameLabel)
$CGenControlNameLabel.AutoSize = $True
$CGenControlNameLabel.BackColor = $CGenColor.TitleBackColor
$CGenControlNameLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$CGenControlNameLabel.ForeColor = $CGenColor.TitleForeColor
$CGenControlNameLabel.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ([System.Math]::Ceiling($CGenControlGroupBox.CreateGraphics().MeasureString($CGenControlGroupBox.Text, $CGenControlGroupBox.Font).Height + ($CGenConfig.FormSpacer / 2))))
$CGenControlNameLabel.Name = "CGenControlNameLabel"
#$CGenControlNameLabel.TabIndex = 0
#$CGenControlNameLabel.TabStop = $False
#$CGenControlNameLabel.Tag = $Null
$CGenControlNameLabel.Text = "Control Name"
$CGenControlNameLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion
$TempHeight = $CGenControlNameLabel.Height
$CGenControlNameLabel.AutoSize = $False
$CGenControlNameLabel.Size = New-Object -TypeName System.Drawing.Size(($CGenControlGroupBox.ClientSize.Width - ($CGenConfig.FormSpacer * 2)), $TempHeight)

#region $CGenControlNameTextBox = System.Windows.Forms.TextBox
Write-Verbose -Message "Creating Form Control `$CGenControlNameTextBox"
$CGenControlNameTextBox = New-Object -TypeName System.Windows.Forms.TextBox
$CGenControlGroupBox.Controls.Add($CGenControlNameTextBox)
#$CGenControlNameTextBox.AutoSize = $True
$CGenControlNameTextBox.BackColor = $CGenColor.TextBackColor
$CGenControlNameTextBox.Font = $CGenForm.Font
$CGenControlNameTextBox.ForeColor = $CGenColor.TextForeColor
$CGenControlNameTextBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlNameLabel.Bottom + $CGenConfig.FormSpacer))
$CGenControlNameTextBox.MaxLength = 40
$CGenControlNameTextBox.Name = "CGenControlNameTextBox"
#$CGenControlNameTextBox.TabIndex = 0
#$CGenControlNameTextBox.TabStop = $True
#$CGenControlNameTextBox.Tag = $Null
$CGenControlNameTextBox.Text = $CGenConfig.ToolName
$CGenControlNameTextBox.Width = $CGenControlNameLabel.Width
#endregion
$CGenToolTip.SetToolTip($CGenControlNameTextBox, "Enter Form Control Name Prefix.")

#region $CGenControlListLabel = System.Windows.Forms.Label
Write-Verbose -Message "Creating Form Control `$CGenControlListLabel"
$CGenControlListLabel = New-Object -TypeName System.Windows.Forms.Label
$CGenControlGroupBox.Controls.Add($CGenControlListLabel)
$CGenControlListLabel.BackColor = $CGenColor.TitleBackColor
$CGenControlListLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$CGenControlListLabel.ForeColor = $CGenColor.TitleForeColor
$CGenControlListLabel.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlNameTextBox.Bottom + $CGenConfig.FormSpacer))
$CGenControlListLabel.Name = "CGenControlListLabel"
$CGenControlListLabel.Size = $CGenControlNameLabel.Size
#$CGenControlListLabel.TabIndex = 0
#$CGenControlListLabel.TabStop = $False
#$CGenControlListLabel.Tag = $Null
$CGenControlListLabel.Text = "Control List"
$CGenControlListLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion

#region $CGenControlListListBox = System.Windows.Forms.ListBox
Write-Verbose -Message "Creating Form Control `$CGenControlListListBox"
$CGenControlListListBox = New-Object -TypeName System.Windows.Forms.ListBox
$CGenControlGroupBox.Controls.Add($CGenControlListListBox)
$CGenControlListListBox.BackColor = $CGenColor.TextBackColor
$CGenControlListListBox.DisplayMember = "Text"
$CGenControlListListBox.Font = $CGenForm.Font
$CGenControlListListBox.ForeColor = $CGenColor.TextForeColor
$TempHeight = [System.Math]::Floor($CGenControlListListBox.CreateGraphics().MeasureString("X", $CGenControlListListBox.Font).Height)
$CGenControlListListBox.Height = $TempHeight * 8
$CGenControlListListBox.IntegralHeight = $False
$CGenControlListListBox.ItemHeight = $TempHeight
#$CGenControlListListBox.BeginUpdate()
#[Void]$CGenControlListListBox.Items.Add($ListBoxItems)
#$CGenControlListListBox.EndUpdate()
#$CGenControlListListBox.Items.AddRange(@($ListBoxItems))
$CGenControlListListBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlListLabel.Bottom + $CGenConfig.FormSpacer))
$CGenControlListListBox.Name = "CGenControlListListBox"
#$CGenControlListListBox.Sorted = $False
#$CGenControlListListBox.TabIndex = 0
#$CGenControlListListBox.TabStop = $True
#$CGenControlListListBox.Tag = $Null
$CGenControlListListBox.Text = "CGenControlListListBox"
$CGenControlListListBox.ValueMember = "Value"
$CGenControlListListBox.Width = $CGenControlNameLabel.Width
#endregion
$CGenToolTip.SetToolTip($CGenControlListListBox, "Select Form Control to Generate Code for.")

#region function Start-CGenControlListListBoxSelectedIndexChanged
function Start-CGenControlListListBoxSelectedIndexChanged()
{
  <#
    .SYNOPSIS
      SelectedIndexChanged event for the CGenControlListListBox Control
    .DESCRIPTION
      SelectedIndexChanged event for the CGenControlListListBox Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenControlListListBoxSelectedIndexChanged -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter SelectedIndexChanged Event for `$CGenControlListListBox"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow

    if ($Sender.Tag -ne $Sender.SelectedIndex)
    {
      $Sender.Tag = $Sender.SelectedIndex
      $CGenControlEventListBox.BeginUpdate()
      $CGenControlEventListBox.Items.Clear()
      if ($Sender.SelectedIndex -gt -1)
      {
        if ($Sender.SelectedItem.Text.StartsWith("*"))
        {
          $CGenTextBox.Text = New-MyDialog -DialogName ($Sender.SelectedItem.Text.SubString(2))
        }
        else
        {
          $CGenControlEventListBox.Items.AddRange(@(Get-MyWindowsFormControlEvent -Control ($Sender.Text) | ForEach-Object -Process { [PSCustomObject]@{"Text" = $PSItem.Name.Replace("add_", "") ; "Value"= $PSItem.Name} }))
          Switch ($Sender.Text)
          {
            { @("Button", "PictureBox", "ToolStripMenuItem", "ToolStripButton", "ToolStripDropDownButton") -contains $PSItem }
            {
              @("Click") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            { @("RadioButton", "CheckBox") -contains $PSItem }
            {
              @("CheckedChanged") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            { @("ComboBox", "ListBox", "ToolStripComboBox", "CheckedListBox") -contains $PSItem }
            {
              @("SelectedIndexChanged") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            { @("ToolStrip", "MenuStrip") -contains $PSItem }
            {
              @("ItemClicked") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "ContextMenuStrip"
            {
              #@("Opening", "ItemClicked") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "ToolBar"
            {
              @("ButtonClick") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "TabControl"
            {
              @("SelectedIndexChanged") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "TabPage"
            {
              @("Enter") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "TrackBar"
            {
              @("ValueChanged") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "TextBox"
            {
              @("KeyDown", "DoubleClick") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "Timer"
            {
              @("Tick") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "TreeView"
            {
              @("AfterSelect", "BeforeExpand") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              
              Break
            }
            "Form"
            {
              @("Closing", "KeyDown", "Load", "Shown") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
            "ListView"
            {
              @("ColumnClick") | ForEach-Object -Process { $CGenControlEventListBox.SetSelected($CGenControlEventListBox.FindStringExact($PSItem), $True) }
              Break
            }
          }
        }
      }
      $CGenControlEventListBox.EndUpdate()
    }

    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit SelectedIndexChanged Event for `$CGenControlListListBox"
}
#endregion
$CGenControlListListBox.add_SelectedIndexChanged({Start-CGenControlListListBoxSelectedIndexChanged -Sender $This -EventArg $PSItem})

#region $CGenControlEventLabel = System.Windows.Forms.Label
Write-Verbose -Message "Creating Form Control `$CGenControlEventLabel"
$CGenControlEventLabel = New-Object -TypeName System.Windows.Forms.Label
$CGenControlGroupBox.Controls.Add($CGenControlEventLabel)
$CGenControlEventLabel.BackColor = $CGenColor.TitleBackColor
$CGenControlEventLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::FixedSingle
$CGenControlEventLabel.ForeColor = $CGenColor.TitleForeColor
$CGenControlEventLabel.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlListListBox.Bottom + $CGenConfig.FormSpacer))
$CGenControlEventLabel.Name = "CGenControlEventLabel"
$CGenControlEventLabel.Size = $CGenControlNameLabel.Size
#$CGenControlEventLabel.TabIndex = 0
#$CGenControlEventLabel.TabStop = $False
#$CGenControlEventLabel.Tag = $Null
$CGenControlEventLabel.Text = "Control Events"
$CGenControlEventLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
#endregion

#region $CGenControlEventListBox = System.Windows.Forms.ListBox
Write-Verbose -Message "Creating Form Control `$CGenControlEventListBox"
$CGenControlEventListBox = New-Object -TypeName System.Windows.Forms.ListBox
$CGenControlGroupBox.Controls.Add($CGenControlEventListBox)
$CGenControlEventListBox.BackColor = $CGenColor.TextBackColor
$CGenControlEventListBox.DisplayMember = "Text"
$CGenControlEventListBox.Font = $CGenForm.Font
$CGenControlEventListBox.ForeColor = $CGenColor.TextForeColor
$TempHeight = [System.Math]::Floor($CGenControlEventListBox.CreateGraphics().MeasureString("X", $CGenControlEventListBox.Font).Height)
$CGenControlEventListBox.Height = $CGenControlListListBox.Height * 2
$CGenControlEventListBox.IntegralHeight = $False
$CGenControlEventListBox.ItemHeight = $TempHeight
#$CGenControlEventListBox.BeginUpdate()
#[Void]$CGenControlEventListBox.Items.Add($EventBoxItems)
#$CGenControlEventListBox.EndUpdate()
#$CGenControlEventListBox.Items.AddRange(@($EventBoxItems))
$CGenControlEventListBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlEventLabel.Bottom + $CGenConfig.FormSpacer))
$CGenControlEventListBox.Name = "CGenControlEventListBox"
$CGenControlEventListBox.SelectionMode = [System.Windows.Forms.SelectionMode]::MultiExtended
#$CGenControlEventListBox.Sorted = $False
#$CGenControlEventListBox.TabIndex = 0
#$CGenControlEventListBox.TabStop = $True
#$CGenControlEventListBox.Tag = $Null
$CGenControlEventListBox.Text = "CGenControlEventListBox"
$CGenControlEventListBox.ValueMember = "Value"
$CGenControlEventListBox.Width = $CGenControlNameLabel.Width
#endregion
$CGenToolTip.SetToolTip($CGenControlEventListBox, "Select Required Form Control Events")

$CGenControlGroupBox.ClientSize = New-Object -TypeName System.Drawing.Size(($($CGenControlGroupBox.Controls[$CGenControlGroupBox.Controls.Count - 1]).Right + $CGenConfig.FormSpacer), ($($CGenControlGroupBox.Controls[$CGenControlGroupBox.Controls.Count - 1]).Bottom + $CGenConfig.FormSpacer))

#endregion

#region $CGenCheckBox = System.Windows.Forms.CheckBox
Write-Verbose -Message "Creating Form Control `$CGenCheckBox"
$CGenCheckBox = New-Object -TypeName System.Windows.Forms.CheckBox
$CGenForm.Controls.Add($CGenCheckBox)
$CGenCheckBox.AutoSize = $True
$CGenCheckBox.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenCheckBox.ForeColor = $CGenColor.GroupForeColor
$CGenCheckBox.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenControlGroupBox.Bottom + $CGenConfig.FormSpacer))
$CGenCheckBox.Name = "CGenCheckBox"
#$CGenCheckBox.TabIndex = 0
#$CGenCheckBox.TabStop = $True
#$CGenCheckBox.Tag = $Null
$CGenCheckBox.Text = "Generate Event Code Only"
#endregion
$CGenToolTip.SetToolTip($CGenCheckBox, "Generate Event Code Only")

#region $CGenButton = System.Windows.Forms.Button
Write-Verbose -Message "Creating Form Control `$CGenButton"
$CGenButton = New-Object -TypeName System.Windows.Forms.Button
$CGenForm.Controls.Add($CGenButton)
$CGenButton.AutoSize = $True
$CGenButton.BackColor = $CGenColor.ButtonBackColor
$CGenButton.Font = New-Object -TypeName System.Drawing.Font($CGenForm.Font.FontFamily, $CGenForm.Font.Size, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Point)
$CGenButton.ForeColor = $CGenColor.ButtonForeColor
$CGenButton.Location = New-Object -TypeName System.Drawing.Point($CGenConfig.FormSpacer, ($CGenCheckBox.Bottom + $CGenConfig.FormSpacer))
$CGenButton.Name = "CGenButton"
$CGenButton.TabIndex = 0
$CGenButton.TabStop = $True
$CGenButton.Tag = $Null
$CGenButton.Text = "Generate Form Code"
$CGenButton.Width = $CGenControlGroupBox.Width
#endregion
$CGenToolTip.SetToolTip($CGenButton, "Generate PowerShell Form Code")

#region function Start-CGenButtonClick
function Start-CGenButtonClick()
{
  <#
    .SYNOPSIS
      Click event for the CGenButton Control
    .DESCRIPTION
      Click event for the CGenButton Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenButtonClick -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter Click Event for `$CGenButton"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
    if ($CGenControlListListBox.SelectedItem.Text.StartsWith("*"))
    {
      $CGenTextBox.Text = New-MyDialog -DialogName ($CGenControlListListBox.SelectedItem.Text.SubString(2))
      $CGenTextBox.SelectAll()
      $CGenTextBox.Copy()
      $CGenTextBox.DeselectAll()
    }
    else
    {
      if (([String]::IsNullOrEmpty($CGenControlNameTextBox.Text)) -or ($CGenControlListListBox.SelectedIndex -eq -1)) 
      {
        [System.Windows.Forms.MessageBox]::Show("Invalid Control Options Selected.", "Generate Code", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
      } 
      else 
      {
        $CGenTextBox.Text = ""
        if ($CGenCheckBox.Checked -and @($CGenControlEventListBox.SelectedIndices).Count)
        {
          $CGenTextBox.Text += $(New-MyWindowsFormEventsfunction -Control $($CGenControlListListBox.SelectedItem.Value) -Name $($CGenControlNameTextBox.Text) -Events $($CGenControlEventListBox.SelectedItems))
          $CGenTextBox.SelectAll()
          $CGenTextBox.Copy()
          $CGenTextBox.DeselectAll()
        }
        else
        {
          $CGenTextBox.Text = $(New-MyWindowsFormControl -Name $($CGenControlNameTextBox.Text) -Control $($CGenControlListListBox.SelectedItem.Value))
          if ((@($CGenControlEventListBox.SelectedIndices).Count) -and ($CGenControlListListBox.SelectedItem.Value -ne "Form"))
          {
            $CGenTextBox.Text += $(New-MyWindowsFormEventsfunction -Control $($CGenControlListListBox.SelectedItem.Value) -Name $($CGenControlNameTextBox.Text) -Events $($CGenControlEventListBox.SelectedItems))
          }
          $CGenTextBox.SelectAll()
          $CGenTextBox.Copy()
          $CGenTextBox.DeselectAll()
        }
      }
    }
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit Click Event for `$CGenButton"
}
#endregion
$CGenButton.add_Click({Start-CGenButtonClick -Sender $This -EventArg $PSItem})

#region $CGenTextBox = System.Windows.Forms.TextBox
Write-Verbose -Message "Creating Form Control `$CGenTextBox"
$CGenTextBox = New-Object -TypeName System.Windows.Forms.TextBox
$CGenForm.Controls.Add($CGenTextBox)
$CGenTextBox.BackColor = $CGenColor.TextBackColor
$CGenTextBox.Font = New-Object -TypeName System.Drawing.Font("Courier New", $CGenForm.Font.Size, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point)
$CGenTextBox.ForeColor = $CGenColor.TextForeColor
$CGenTextBox.Location = New-Object -TypeName System.Drawing.Point(($CGenEncodeGroupBox.Right + $CGenConfig.FormSpacer), ($CGenLabel.Bottom + $CGenConfig.FormSpacer))
$CGenTextBox.MaxLength = [Int]::MaxValue
$CGenTextBox.Multiline = $True
$CGenTextBox.Name = "CGenTextBox"
$CGenTextBox.ReadOnly = $False
$CGenTextBox.ScrollBars = [System.Windows.Forms.ScrollBars]::Both
#$CGenTextBox.SelectedText = ""
#$CGenTextBox.SelectionLength = 0
#$CGenTextBox.SelectionStart = 0
$CGenTextBox.Size = New-Object -TypeName System.Drawing.Size(($CGenLabel.Right - $CGenTextBox.Left), ($CGenButton.Bottom - $CGenTextBox.Top))
$CGenTextBox.TabStop = $False
#$CGenTextBox.Tag = $Null
$CGenTextBox.Text = ""
$CGenTextBox.WordWrap = $False
#endregion
$CGenToolTip.SetToolTip($CGenTextBox, "Generated PowerShell Form Code")

#region function Start-CGenTextBoxDoubleClick
function Start-CGenTextBoxDoubleClick()
{
  <#
    .SYNOPSIS
      DoubleClick event for the CGenTextBox Control
    .DESCRIPTION
      DoubleClick event for the CGenTextBox Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenTextBoxDoubleClick -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter DoubleClick Event for `$CGenTextBox"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
    
    $CGenTextBox.SelectAll()
    $CGenTextBox.Copy()
    $CGenTextBox.DeselectAll()
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit DoubleClick Event for `$CGenTextBox"
}
#endregion
$CGenTextBox.add_DoubleClick({ Start-CGenTextBoxDoubleClick -Sender $This -EventArg $PSItem })

#region function Start-CGenTextBoxKeyDown
function Start-CGenTextBoxKeyDown()
{
  <#
    .SYNOPSIS
      KeyDown event for the CGenTextBox Control
    .DESCRIPTION
      KeyDown event for the CGenTextBox Control
    .PARAMETER Sender
       The Form Control that fired the Event
    .PARAMETER EventArg
       The Event Arguments for the Event
    .EXAMPLE
       Start-CGenTextBoxKeyDown -Sender $Sender -EventArg $EventArg
    .NOTES
    .LINK
  #>
  [CmdletBinding()]
  param (
    [parameter(Mandatory = $True)]
    [Object]$Sender,
    [parameter(Mandatory = $True)]
    [Object]$EventArg
  )
  Write-Verbose -Message "Enter KeyDown Event for `$CGenTextBox"
  Try
  {
    #$CGenConfig.AutoExit = 0
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
    #$CGenForm.Cursor = [System.Windows.Forms.Cursors]::Arrow
    if ($EventArg.Control -and $EventArg.KeyCode -eq [System.Windows.Forms.Keys]::A)
    {
      $CGenTextBox.SelectAll()
    }
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
  }
  Catch
  {
    Write-Debug -Message "ErrMsg: $($Error[0].Exception.Message)"
    Write-Debug -Message "Line: $($Error[0].InvocationInfo.ScriptLineNumber)"
    Write-Debug -Message "Code: $(($Error[0].InvocationInfo.Line).Trim())"
  }
  Write-Verbose -Message "Exit KeyDown Event for `$CGenTextBox"
}
#endregion
$CGenTextBox.add_KeyDown({ Start-CGenTextBoxKeyDown -Sender $This -EventArg $PSItem })

$CGenForm.ClientSize = New-Object -TypeName System.Drawing.Size(($($CGenForm.Controls[$CGenForm.Controls.Count - 1]).Right + $CGenConfig.FormSpacer), ($($CGenForm.Controls[$CGenForm.Controls.Count - 1]).Bottom + $CGenConfig.FormSpacer))

#region $CGenOpenFileDialog = System.Windows.Forms.OpenFileDialog
Write-Verbose -Message "Creating Form Control `$CGenOpenFileDialog"
$CGenOpenFileDialog = New-Object -TypeName System.Windows.Forms.OpenFileDialog
$CGenOpenFileDialog.Filter = ""
$CGenOpenFileDialog.InitialDirectory = [System.Environment]::CurrentDirectory
$CGenOpenFileDialog.RestoreDirectory = $True
$CGenOpenFileDialog.ShowHelp = $True
$CGenOpenFileDialog.SupportMultiDottedExtensions = $True
$CGenOpenFileDialog.Title = "Select File too Encode"
#endregion

#endregion

#endregion

[System.Windows.Forms.Application]::Run($CGenForm)

if ($CGenConfig.Production)
{
  [Environment]::Exit(0)
}

